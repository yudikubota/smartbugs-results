WARNING:root:You are using evm version 1.8.2. The supported version is 1.7.3
WARNING:root:You are using solc version 0.4.25, The latest supported version is 0.4.19
INFO:root:contract /unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:CardioCoin:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 61.3%
INFO:symExec:	  Integer Underflow: 			 True
INFO:symExec:	  Integer Overflow: 			 True
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:137:5: Warning: Integer Underflow.
    string public name = "CardioCoin"
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:418:9: Warning: Integer Underflow.
        return lockerList[_operator].role
Integer Underflow occurs if:
    return lockerList[_operator].role = 1
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:138:5: Warning: Integer Underflow.
    string public symbol = "CRDC"
INFO:symExec:/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:180:9: Warning: Integer Overflow.
        b.lockUpData
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:180:22: Warning: Integer Overflow.
        b.lockUpData[b.lockUpCount
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:346:50: Warning: Integer Overflow.
        if (b.lockUpCount > 0 && b.unlockIndex < b.lockUpCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:266:46: Warning: Integer Overflow.
            for (uint i = b.unlockIndex; i < b.lockUpCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:273:42: Warning: Integer Overflow.
                    if (unlockedAmount > b.lockedUp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:270:74: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:347:46: Warning: Integer Overflow.
            for (uint i = b.unlockIndex; i < b.lockUpCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:271:70: Warning: Integer Overflow.
                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:339:47: Warning: Integer Overflow.
        return balances[_owner].available.add(balances[_owner].lockedUp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:181:9: Warning: Integer Overflow.
        b.lockUpCount
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:422:16: Warning: Integer Overflow.
        return lockerList[_operator].lockUpPeriod
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:325:44: Warning: Integer Overflow.
            addLockedUpTokens(_to, _value, l.lockUpPeriod
Integer Overflow occurs if:
    balances[msg.sender].available = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:350:21: Warning: Integer Overflow.
                if (l.unlockTimestamp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:351:74: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:400:5: Warning: Integer Overflow.
    function addAddressToLockerList(address _operator, string role, uint lockUpPeriod, uint unlockCount)
    ^
Spanning multiple lines.
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:426:16: Warning: Integer Overflow.
        return lockerList[_operator].unlockCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:346:13: Warning: Integer Overflow.
        if (b.lockUpCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:347:27: Warning: Integer Overflow.
            for (uint i = b.unlockIndex
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:270:55: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:180:9: Warning: Integer Overflow.
        b.lockUpData[b.lockUpCount] = l
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:109:9: Warning: Integer Overflow.
    c = _a + _b
Integer Overflow occurs if:
    balances[_owner].available = 1
    balances[_owner].lockedUp = 115792089237316195423570985008687907853269984665640564039457584007913129639935
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:346:34: Warning: Integer Overflow.
        if (b.lockUpCount > 0 && b.unlockIndex
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:177:29: Warning: Integer Overflow.
        l.unlockTimestamp = now + lockUpPeriod
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:266:27: Warning: Integer Overflow.
            for (uint i = b.unlockIndex
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:348:36: Warning: Integer Overflow.
                lockUp storage l = b.lockUpData
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:179:9: Warning: Integer Overflow.
        b.lockedUp
Integer Overflow occurs if:
    balances[owner].available = 0
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:351:91: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:344:35: Warning: Integer Overflow.
        uint256 lockedUpBalance = b.lockedUp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:351:55: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:267:36: Warning: Integer Overflow.
                lockUp storage l = b.lockUpData
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:270:91: Warning: Integer Overflow.
                    uint count = calculateUnlockCount(l.unlockTimestamp, l.unlockedCount, l.unlockCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:418:16: Warning: Integer Overflow.
        return lockerList[_operator].role
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:269:21: Warning: Integer Overflow.
                if (l.unlockTimestamp
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:352:70: Warning: Integer Overflow.
                    uint256 unlockedAmount = l.amount.mul(count).div(l.unlockCount
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:179:9: Warning: Integer Overflow.
        b.lockedUp += amount
Integer Overflow occurs if:
    balances[owner].available = 44369063854674067291029404066660873444229566625561754964912869797988903417852
    owner = 0
/unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:325:60: Warning: Integer Overflow.
            addLockedUpTokens(_to, _value, l.lockUpPeriod, l.unlockCount
Integer Overflow occurs if:
    balances[msg.sender].available = 0
INFO:symExec:	====== Analysis Completed ======
INFO:root:contract /unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:Constants:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 99.0%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 False
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:	====== Analysis Completed ======
INFO:root:contract /unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:Ownable:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 99.7%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 False
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:	====== Analysis Completed ======
INFO:root:contract /unique_chucks/15/0x237b33851c40c59533f3585dd0b03df80afdc7f6.sol:SafeMath:
INFO:symExec:	============ Results ===========
INFO:symExec:	  EVM Code Coverage: 			 100.0%
INFO:symExec:	  Integer Underflow: 			 False
INFO:symExec:	  Integer Overflow: 			 False
INFO:symExec:	  Parity Multisig Bug 2: 		 False
INFO:symExec:	  Callstack Depth Attack Vulnerability:  False
INFO:symExec:	  Transaction-Ordering Dependence (TOD): False
INFO:symExec:	  Timestamp Dependency: 		 False
INFO:symExec:	  Re-Entrancy Vulnerability: 		 False
INFO:symExec:	====== Analysis Completed ======