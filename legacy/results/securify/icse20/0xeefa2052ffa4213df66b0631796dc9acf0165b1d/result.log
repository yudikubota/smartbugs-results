Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:IERC20
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:ManualPriceFeed
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:Ownable
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:PriceFeedInterface
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:Testable
Processing contract: /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol:Withdrawable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'ManualPriceFeed':
    |    // Withdraws ETH from the contract.
    |    function withdraw(uint amount) external onlyOwner {
  > |        msg.sender.transfer(amount);
    |    }
    |
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'ManualPriceFeed':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'ManualPriceFeed':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'ManualPriceFeed':
    |
    |    function setCurrentTime(uint _time) external onlyOwner onlyIfTest {
  > |        currentTime = _time;
    |    }
    |
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'ManualPriceFeed':
    |        require(publishTime <= getCurrentTime().add(BLOCK_TIMESTAMP_TOLERANCE));
    |        require(publishTime > prices[identifier].timestamp);
  > |        prices[identifier] = PriceTick(publishTime, newPrice);
    |        emit PriceUpdated(identifier, publishTime, newPrice);
    |    }
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(247)

[31mViolation[0m for MissingInputValidation in contract 'Withdrawable':
    |contract Withdrawable is Ownable {
    |    // Withdraws ETH from the contract.
  > |    function withdraw(uint amount) external onlyOwner {
    |        msg.sender.transfer(amount);
    |    }
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(175)

[31mViolation[0m for MissingInputValidation in contract 'Withdrawable':
    |
    |    // Withdraws ERC20 tokens from the contract.
  > |    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {
    |        IERC20 erc20 = IERC20(erc20Address);
    |        require(erc20.transfer(msg.sender, amount));
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(180)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Withdrawable':
    |    // Withdraws ETH from the contract.
    |    function withdraw(uint amount) external onlyOwner {
  > |        msg.sender.transfer(amount);
    |    }
    |
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(176)

[31mViolation[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0xeefa2052ffa4213df66b0631796dc9acf0165b1d.sol(92)