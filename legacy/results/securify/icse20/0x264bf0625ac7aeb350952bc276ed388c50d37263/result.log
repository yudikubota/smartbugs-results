Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:AOContentHost
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:IAOContent
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:IAOContentHost
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:IAOEarning
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:IAOPurchaseReceipt
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:IAOStakedContent
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:INameFactory
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:INameTAOPosition
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol:tokenRecipient
[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |		require (_canBecomeHost(_purchaseReceiptId, _hostNameId, _baseChallengeV, _baseChallengeR, _baseChallengeS));
    |
  > |		(, bytes32 _stakedContentId,,,,,,,,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);
    |
    |		require (_create(_hostNameId, _stakedContentId, _encChallenge, _contentDatKey, _metadataDatKey));
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1008)

[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |		require (bytes(_contentDatKey).length > 0);
    |		require (bytes(_metadataDatKey).length > 0);
  > |		require (_aoStakedContent.isActive(_stakedContentId));
    |
    |		// Increment totalContentHosts
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1032)

[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |		require (_contentHost.host == address(0));
    |
  > |		(bytes32 _contentId,,,,,,,) = _aoStakedContent.getById(_stakedContentId);
    |
    |		_contentHost.contentHostId = _contentHostId;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1045)

[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |	function _canBecomeHost(bytes32 _purchaseReceiptId, address _sender, uint8 _baseChallengeV, bytes32 _baseChallengeR, bytes32 _baseChallengeS) internal view returns (bool) {
    |		// Make sure the purchase receipt owner is the same as the sender
  > |		return (_aoPurchaseReceipt.senderIsBuyer(_purchaseReceiptId, _sender) &&
    |			_verifyBecomeHostSignature(_purchaseReceiptId, _baseChallengeV, _baseChallengeR, _baseChallengeS)
    |		);
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1072)

[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |	 */
    |	function _verifyBecomeHostSignature(bytes32 _purchaseReceiptId, uint8 _v, bytes32 _r, bytes32 _s) internal view returns (bool) {
  > |		(,, bytes32 _contentId,,,,,, address _publicAddress,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);
    |
    |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _aoContent.getBaseChallenge(_contentId)));
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1086)

[31mViolation[0m for RepeatedCall in contract 'AOContentHost':
    |		(,, bytes32 _contentId,,,,,, address _publicAddress,) = _aoPurchaseReceipt.getById(_purchaseReceiptId);
    |
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _aoContent.getBaseChallenge(_contentId)));
    |		return (ecrecover(_hash, _v, _r, _s) == _publicAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1088)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(829)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(839)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setAOContentAddress(address _aoContentAddress) public onlyTheAO {
    |		require (_aoContentAddress != address(0));
  > |		aoContentAddress = _aoContentAddress;
    |		_aoContent = IAOContent(_aoContentAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(848)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		require (_aoContentAddress != address(0));
    |		aoContentAddress = _aoContentAddress;
  > |		_aoContent = IAOContent(_aoContentAddress);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(849)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {
    |		require (_aoStakedContentAddress != address(0));
  > |		aoStakedContentAddress = _aoStakedContentAddress;
    |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(858)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		require (_aoStakedContentAddress != address(0));
    |		aoStakedContentAddress = _aoStakedContentAddress;
  > |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(859)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setAOPurchaseReceiptAddress(address _aoPurchaseReceiptAddress) public onlyTheAO {
    |		require (_aoPurchaseReceiptAddress != address(0));
  > |		aoPurchaseReceiptAddress = _aoPurchaseReceiptAddress;
    |		_aoPurchaseReceipt = IAOPurchaseReceipt(_aoPurchaseReceiptAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(868)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		require (_aoPurchaseReceiptAddress != address(0));
    |		aoPurchaseReceiptAddress = _aoPurchaseReceiptAddress;
  > |		_aoPurchaseReceipt = IAOPurchaseReceipt(_aoPurchaseReceiptAddress);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(869)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setAOEarningAddress(address _aoEarningAddress) public onlyTheAO {
    |		require (_aoEarningAddress != address(0));
  > |		aoEarningAddress = _aoEarningAddress;
    |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(878)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		require (_aoEarningAddress != address(0));
    |		aoEarningAddress = _aoEarningAddress;
  > |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(879)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(888)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(889)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(898)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |
    |		// Increment totalContentHosts
  > |		totalContentHosts++;
    |
    |		// Generate contentId
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1035)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		(bytes32 _contentId,,,,,,,) = _aoStakedContent.getById(_stakedContentId);
    |
  > |		_contentHost.contentHostId = _contentHostId;
    |		_contentHost.stakedContentId = _stakedContentId;
    |		_contentHost.contentId = _contentId;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1047)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |
    |		_contentHost.contentHostId = _contentHostId;
  > |		_contentHost.stakedContentId = _stakedContentId;
    |		_contentHost.contentId = _contentId;
    |		_contentHost.host = _host;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1048)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		_contentHost.contentHostId = _contentHostId;
    |		_contentHost.stakedContentId = _stakedContentId;
  > |		_contentHost.contentId = _contentId;
    |		_contentHost.host = _host;
    |		_contentHost.encChallenge = _encChallenge;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1049)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		_contentHost.stakedContentId = _stakedContentId;
    |		_contentHost.contentId = _contentId;
  > |		_contentHost.host = _host;
    |		_contentHost.encChallenge = _encChallenge;
    |		_contentHost.contentDatKey = _contentDatKey;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1050)

[33mWarning[0m for UnrestrictedWrite in contract 'AOContentHost':
    | * @title AOContentHost
    | */
  > |contract AOContentHost is TheAO, IAOContentHost {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(756)

[33mWarning[0m for UnrestrictedWrite in contract 'AOContentHost':
    |		_contentHost.metadataDatKey = _metadataDatKey;
    |
  > |		contentHostIndex[_contentHostId] = totalContentHosts;
    |
    |		emit HostContent(_contentHost.host, _contentHost.contentHostId, _contentHost.stakedContentId, _contentHost.contentId, _contentHost.contentDatKey, _contentHost.metadataDatKey);
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(1055)

[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(398)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(410)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(419)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(448)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(357)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(357)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(710)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(739)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(731)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(742)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(141)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(189)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(265)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(281)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/34/0x264bf0625ac7aeb350952bc276ed388c50d37263.sol(283)