Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:ERC20
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:ERC20Basic
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:URACCrowdSale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol:URACToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(219)

[31mViolation[0m for DAOConstantGas in contract 'URACCrowdSale':
    |        if (toFund > 0) {
    |            require(uracToken.mint(receipient, toCollect, true));
  > |            wallet.transfer(toFund);
    |            openSoldTokens = openSoldTokens.add(toCollect);
    |            emit NewSale(receipient, toFund, toCollect);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(677)

[33mWarning[0m for DAOConstantGas in contract 'URACCrowdSale':
    |                uint refund1 = fund1.sub(MAX_STAGE_1_LIMIT);
    |                value = value.sub(refund1);
  > |                msg.sender.transfer(refund1);
    |            }
    |        }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(666)

[33mWarning[0m for DAOConstantGas in contract 'URACCrowdSale':
    |        uint toReturn = value.sub(toFund);
    |        if (toReturn > 0) {
  > |            msg.sender.transfer(toReturn);
    |        }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(685)

[31mViolation[0m for RepeatedCall in contract 'URACCrowdSale':
    |        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, value);
    |        if (toFund > 0) {
  > |            require(uracToken.mint(receipient, toCollect, true));
    |            wallet.transfer(toFund);
    |            openSoldTokens = openSoldTokens.add(toCollect);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(676)

[33mWarning[0m for TODAmount in contract 'URACCrowdSale':
    |                uint refund1 = fund1.sub(MAX_STAGE_1_LIMIT);
    |                value = value.sub(refund1);
  > |                msg.sender.transfer(refund1);
    |            }
    |        }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(666)

[33mWarning[0m for TODAmount in contract 'URACCrowdSale':
    |        if (toFund > 0) {
    |            require(uracToken.mint(receipient, toCollect, true));
  > |            wallet.transfer(toFund);
    |            openSoldTokens = openSoldTokens.add(toCollect);
    |            emit NewSale(receipient, toFund, toCollect);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(677)

[33mWarning[0m for TODAmount in contract 'URACCrowdSale':
    |        uint toReturn = value.sub(toFund);
    |        if (toReturn > 0) {
  > |            msg.sender.transfer(toReturn);
    |        }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(685)

[31mViolation[0m for TODReceiver in contract 'URACCrowdSale':
    |        if (toFund > 0) {
    |            require(uracToken.mint(receipient, toCollect, true));
  > |            wallet.transfer(toFund);
    |            openSoldTokens = openSoldTokens.add(toCollect);
    |            emit NewSale(receipient, toFund, toCollect);
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(677)

[31mViolation[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |        require(saleNotEnd());
    |        for (uint i = 0; i < users.length; i++) {
  > |            fullWhiteList[users[i]] = openTag;
    |        }
    |    }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(582)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |        earlierThan(endTime)
    |    {
  > |        exchangeRate = rate;
    |    }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(562)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |        onlyOwner
    |    {
  > |        startTime = _startTime;
    |        endTime = startTime + MAX_SALE_DURATION;
    |    }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(569)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |    {
    |        startTime = _startTime;
  > |        endTime = startTime + MAX_SALE_DURATION;
    |    }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |    {
    |        require(saleNotEnd());
  > |        fullWhiteList[user] = openTag;
    |
    |    }
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(595)

[33mWarning[0m for UnrestrictedWrite in contract 'URACCrowdSale':
    |    function setWallet(address payable newAddress)  external onlyOwner {
    |        emit NewWallet(owner, wallet, newAddress);
  > |        wallet = newAddress;
    |    }
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(602)

[31mViolation[0m for LockedEther in contract 'URACToken':
    |/// For more information about this token sale, please visit http://www.uranus.io
    |/// @author reedhong
  > |contract URACToken is PausableToken {
    |    using SafeMath for uint;
    |
  at /unique_chucks/12/0x5e44414f186e763f376e9ede66aec2ac24bea086.sol(326)