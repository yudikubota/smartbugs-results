Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IERC20Token
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IOwnable
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IRefund
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:ITap
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IVerificationList
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IVoting
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IWinbixPayable
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:IWinbixToken
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:PreDAICO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol:WinbixPayable
[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |    }
    |
  > |    function changeOwner(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |    function changeOwner(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(28)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(msg.sender == newOwner);
    |        emit OwnerChanged(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(34)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        emit OwnerChanged(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(35)

[31mViolation[0m for DAOConstantGas in contract 'PreDAICO':
    |            etherValue = etherPaid[_from];
    |            require(etherValue > 0 && _value == wbxSold[_from]);
  > |            _from.transfer(etherValue);
    |            etherPaid[_from] = 0;
    |            wbxSold[_from] = 0;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(523)

[33mWarning[0m for DAOConstantGas in contract 'PreDAICO':
    |        if (newSum > HARDCAP) {
    |            uint forRefund = safeMul((newSum - HARDCAP), tokenPrice) / (1 ether);
  > |            address(msg.sender).transfer(forRefund);
    |            etherValue = safeSub(etherValue, forRefund);
    |            tokenValue = safeSub(HARDCAP, soldTokens);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(332)

[31mViolation[0m for RepeatedCall in contract 'PreDAICO':
    |        bool softcapNotYetCompiled = soldTokens < SOFTCAP;
    |
  > |        buyers.toCheck(msg.sender);
    |        winbixToken.freeze(msg.sender);
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(327)

[31mViolation[0m for RepeatedCall in contract 'PreDAICO':
    |
    |        buyers.toCheck(msg.sender);
  > |        winbixToken.freeze(msg.sender);
    |
    |        if (newSum > HARDCAP) {
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(328)

[33mWarning[0m for RepeatedCall in contract 'PreDAICO':
    |        if (address(voting) == address(0)) {
    |            voting = IVoting(_voting);
  > |            voting.acceptOwnership();
    |        }
    |        if (address(tap) == address(0)) {
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(288)

[33mWarning[0m for RepeatedCall in contract 'PreDAICO':
    |        if (address(tap) == address(0)) {
    |            tap = ITap(_tap);
  > |            tap.acceptOwnership();
    |        }
    |        if (address(refund) == address(0)) {
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(292)

[33mWarning[0m for RepeatedCall in contract 'PreDAICO':
    |        if (address(refund) == address(0)) {
    |            refund = IRefund(_refund);
  > |            refund.acceptOwnership();
    |        }
    |        kycChecker = msg.sender;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(296)

[31mViolation[0m for TODAmount in contract 'PreDAICO':
    |        if (newSum > HARDCAP) {
    |            uint forRefund = safeMul((newSum - HARDCAP), tokenPrice) / (1 ether);
  > |            address(msg.sender).transfer(forRefund);
    |            etherValue = safeSub(etherValue, forRefund);
    |            tokenValue = safeSub(HARDCAP, soldTokens);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(332)

[33mWarning[0m for TODAmount in contract 'PreDAICO':
    |            etherValue = etherPaid[_from];
    |            require(etherValue > 0 && _value == wbxSold[_from]);
  > |            _from.transfer(etherValue);
    |            etherPaid[_from] = 0;
    |            wbxSold[_from] = 0;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(523)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PreDAICO':
    |        if (newSum > HARDCAP) {
    |            uint forRefund = safeMul((newSum - HARDCAP), tokenPrice) / (1 ether);
  > |            address(msg.sender).transfer(forRefund);
    |            etherValue = safeSub(etherValue, forRefund);
    |            tokenValue = safeSub(HARDCAP, soldTokens);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(332)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |
  > |        soldTokens += tokenValue;
    |        recievedEther += etherValue;
    |        etherPaid[msg.sender] += etherValue;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(337)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |
    |        soldTokens += tokenValue;
  > |        recievedEther += etherValue;
    |        etherPaid[msg.sender] += etherValue;
    |        wbxSold[msg.sender] += tokenValue;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(338)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |        if (soldTokens == HARDCAP) {
  > |            endDate = now;
    |            emit HardcapCompiled();
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(350)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(tokensForMarketingTotal == 0);
    |        require(now > endDate + additionalTime + 15 days + SKIP_TIME && soldTokens >= SOFTCAP);
  > |        tokensForMarketingTotal = tokensAfterKyc / 10;
    |        tokensForMarketingRemains = tokensForMarketingTotal;
    |        winbixToken.burn(TOKENS_FOR_ISSUE - soldTokens - tokensForMarketingTotal);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(397)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(now > endDate + additionalTime + 15 days + SKIP_TIME && soldTokens >= SOFTCAP);
    |        tokensForMarketingTotal = tokensAfterKyc / 10;
  > |        tokensForMarketingRemains = tokensForMarketingTotal;
    |        winbixToken.burn(TOKENS_FOR_ISSUE - soldTokens - tokensForMarketingTotal);
    |        winbixToken.allowTransfer(true);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(398)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(!votingApplied);
    |        require(!voting.inProgress());
  > |        votingApplied = true;
    |        if (voting.isSubjectApproved()) {
    |            startDate = endDate + 2 days;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(483)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        votingApplied = true;
    |        if (voting.isSubjectApproved()) {
  > |            startDate = endDate + 2 days;
    |            endDate = startDate + 30 days;
    |            additionalTime = 0;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(485)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        if (voting.isSubjectApproved()) {
    |            startDate = endDate + 2 days;
  > |            endDate = startDate + 30 days;
    |            additionalTime = 0;
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(486)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |            startDate = endDate + 2 days;
    |            endDate = startDate + 30 days;
  > |            additionalTime = 0;
    |        }
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(487)

[31mViolation[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(!voting.inProgress());
    |        require(now < voting.nextVotingDate());
  > |        votingApplied = true;
    |        if (voting.isSubjectApproved()) {
    |            tap.changeNextTap(voting.subject());
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(496)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |
    |    function changeOwner(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(28)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(msg.sender == newOwner);
    |        emit OwnerChanged(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(34)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        emit OwnerChanged(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(35)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |    ) public onlyOwner {
    |        if (address(winbixToken) == address(0)) {
  > |            winbixToken = IWinbixToken(_winbixToken);
    |            winbixToken.setMePayable(true);
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |        if (address(buyers) == address(0)) {
  > |            buyers = IVerificationList(_buyers);
    |            buyers.acceptOwnership();
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(283)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |        if (address(voting) == address(0)) {
  > |            voting = IVoting(_voting);
    |            voting.acceptOwnership();
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |        if (address(tap) == address(0)) {
  > |            tap = ITap(_tap);
    |            tap.acceptOwnership();
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(291)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        }
    |        if (address(refund) == address(0)) {
  > |            refund = IRefund(_refund);
    |            refund.acceptOwnership();
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(295)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |            refund.acceptOwnership();
    |        }
  > |        kycChecker = msg.sender;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |
    |    function setKycChecker(address _address) public onlyOwner {
  > |        kycChecker = _address;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        );
    |        winbixToken.issue(address(this), TOKENS_FOR_ISSUE);
  > |        startDate = now;
    |        endDate = now + 60 days;
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(314)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        winbixToken.issue(address(this), TOKENS_FOR_ISSUE);
    |        startDate = now;
  > |        endDate = now + 60 days;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(315)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(now > endDate + SKIP_TIME && now < endDate + additionalTime + 15 days);
    |        require(!buyers.isAccepted(_address));
  > |        etherAfterKyc += etherPaid[_address];
    |        tokensAfterKyc += wbxSold[_address];
    |        winbixToken.unfreeze(_address);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(372)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(!buyers.isAccepted(_address));
    |        etherAfterKyc += etherPaid[_address];
  > |        tokensAfterKyc += wbxSold[_address];
    |        winbixToken.unfreeze(_address);
    |        buyers.accept(_address);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(373)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(!buyers.isRejected(_address));
    |        if (buyers.isAccepted(_address)) {
  > |            etherAfterKyc -= etherPaid[_address];
    |            tokensAfterKyc -= wbxSold[_address];
    |        }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(382)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        if (buyers.isAccepted(_address)) {
    |            etherAfterKyc -= etherPaid[_address];
  > |            tokensAfterKyc -= wbxSold[_address];
    |        }
    |        winbixToken.freeze(_address);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        winbixToken.transfer(_to, _value);
    |        winbixToken.issueAccruable(_to, _value);
  > |        tokensForMarketingRemains -= _value;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(409)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(soldTokens <= HARDCAP * 90 / 100);
    |        voting.initProlongationVoting();
  > |        votingApplied = false;
    |        additionalTime = 2 days;
    |        votingType = VotingType.Prolongation;
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(434)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        voting.initProlongationVoting();
    |        votingApplied = false;
  > |        additionalTime = 2 days;
    |        votingType = VotingType.Prolongation;
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        votingApplied = false;
    |        additionalTime = 2 days;
  > |        votingType = VotingType.Prolongation;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(436)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        require(now > endDate + 17 days);
    |        voting.initTapChangeVoting(newPercent);
  > |        votingApplied = false;
    |        votingType = VotingType.TapChange;
    |    }
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(443)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |        voting.initTapChangeVoting(newPercent);
    |        votingApplied = false;
  > |        votingType = VotingType.TapChange;
    |    }
    |
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(444)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |            require(etherValue > 0 && _value == wbxSold[_from]);
    |            _from.transfer(etherValue);
  > |            etherPaid[_from] = 0;
    |            wbxSold[_from] = 0;
    |            winbixToken.unfreeze(_from);
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(524)

[33mWarning[0m for UnrestrictedWrite in contract 'PreDAICO':
    |            _from.transfer(etherValue);
    |            etherPaid[_from] = 0;
  > |            wbxSold[_from] = 0;
    |            winbixToken.unfreeze(_from);
    |        } else {
  at /unique_chucks/18/0x8a451bcd32a78661678e08a724c9f759906fd2eb.sol(525)