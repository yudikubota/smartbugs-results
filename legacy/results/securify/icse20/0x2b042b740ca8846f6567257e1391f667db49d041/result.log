Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:ERC20
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:ERC20Basic
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol:WFRA_MGNS_Derivative
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  }
    |  function finishMinting() KingPrerogative canMint public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |  }
    |  function pause() KingPrerogative whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |  }
    |  function unpause() KingPrerogative whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= balances[_from]);
    |    require(_value <= allowed[_from][msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(79)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  }
    |  function pause() KingPrerogative whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  }
    |  function unpause() KingPrerogative whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= balances[_from]);
    |    require(_value <= allowed[_from][msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(79)

[31mViolation[0m for LockedEther in contract 'WFRA_MGNS_Derivative':
    |  }
    |}
  > |contract WFRA_MGNS_Derivative is PausableToken, MintableToken {
    |    string public constant name = "MGNS. 1MWh France Regular WC";
    |    string public constant symbol = "WFRA";
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'WFRA_MGNS_Derivative':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'WFRA_MGNS_Derivative':
    |  }
    |  function finishMinting() KingPrerogative canMint public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'WFRA_MGNS_Derivative':
    |  }
    |  function pause() KingPrerogative whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'WFRA_MGNS_Derivative':
    |  }
    |  function unpause() KingPrerogative whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_contracts/0x2b042b740ca8846f6567257e1391f667db49d041.sol(146)