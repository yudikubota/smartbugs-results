Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:IERC20
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:MinterRole
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:PayableOwnable
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:PumaPayPullPayment
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:PumaPayToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'PumaPayPullPayment':
    |    executorDoesNotExists(_executor)
    |    {
  > |        _executor.transfer(FUNDING_AMOUNT);
    |        executors[_executor] = true;
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(690)

[33mWarning[0m for TODReceiver in contract 'PumaPayPullPayment':
    |
    |        if (isFundingNeeded(owner())) {
  > |            owner().transfer(FUNDING_AMOUNT);
    |        }
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(694)

[33mWarning[0m for TODReceiver in contract 'PumaPayPullPayment':
    |        executors[_executor] = false;
    |        if (isFundingNeeded(owner())) {
  > |            owner().transfer(FUNDING_AMOUNT);
    |        }
    |        emit LogExecutorRemoved(_executor);
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(711)

[33mWarning[0m for TODReceiver in contract 'PumaPayPullPayment':
    |
    |        if (isFundingNeeded(owner())) {
  > |            owner().transfer(FUNDING_AMOUNT);
    |        }
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(729)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |/// @author PumaPay Dev Team - <developers@pumapay.io>
    |
  > |contract PumaPayPullPayment is PayableOwnable {
    |
    |    using SafeMath for uint256;
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(518)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |    onlyOwner
    |    returns (bool) {
  > |        conversionRates[_currency] = _rate;
    |        emit LogSetConversionRate(_currency, _rate);
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(725)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |
    |        pullPayments[_addresses[0]][_addresses[1]].currency = _currency;
  > |        pullPayments[_addresses[0]][_addresses[1]].initialPaymentAmountInCents = _initialPaymentAmountInCents;
    |        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;
    |        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(786)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].currency = _currency;
    |        pullPayments[_addresses[0]][_addresses[1]].initialPaymentAmountInCents = _initialPaymentAmountInCents;
  > |        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;
    |        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;
    |        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(787)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].initialPaymentAmountInCents = _initialPaymentAmountInCents;
    |        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;
  > |        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;
    |        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;
    |        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(788)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].fiatAmountInCents = _fiatAmountInCents;
    |        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;
  > |        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;
    |        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;
    |        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(789)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].frequency = _frequency;
    |        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;
  > |        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;
    |        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];
    |        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(790)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].startTimestamp = _startTimestamp;
    |        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;
  > |        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];
    |        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];
    |        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _ids[2];
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].numberOfPayments = _numberOfPayments;
    |        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];
  > |        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];
    |        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _ids[2];
    |        pullPayments[_addresses[0]][_addresses[1]].treasuryAddress = _addresses[2];
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].paymentID = _ids[0];
    |        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];
  > |        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _ids[2];
    |        pullPayments[_addresses[0]][_addresses[1]].treasuryAddress = _addresses[2];
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(793)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].businessID = _ids[1];
    |        pullPayments[_addresses[0]][_addresses[1]].uniqueReferenceID = _ids[2];
  > |        pullPayments[_addresses[0]][_addresses[1]].treasuryAddress = _addresses[2];
    |
    |        require(isValidRegistration(
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(794)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        );
    |
  > |        pullPayments[_addresses[0]][_addresses[1]].nextPaymentTimestamp = _startTimestamp;
    |        pullPayments[_addresses[0]][_addresses[1]].lastPaymentTimestamp = 0;
    |        pullPayments[_addresses[0]][_addresses[1]].cancelTimestamp = 0;
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(806)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |
    |        pullPayments[_addresses[0]][_addresses[1]].nextPaymentTimestamp = _startTimestamp;
  > |        pullPayments[_addresses[0]][_addresses[1]].lastPaymentTimestamp = 0;
    |        pullPayments[_addresses[0]][_addresses[1]].cancelTimestamp = 0;
    |
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(807)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        pullPayments[_addresses[0]][_addresses[1]].nextPaymentTimestamp = _startTimestamp;
    |        pullPayments[_addresses[0]][_addresses[1]].lastPaymentTimestamp = 0;
  > |        pullPayments[_addresses[0]][_addresses[1]].cancelTimestamp = 0;
    |
    |        if (isFundingNeeded(msg.sender)) {
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(808)

[33mWarning[0m for UnrestrictedWrite in contract 'PumaPayPullPayment':
    |        require(isValidDeletion(v, r, s, _paymentID, _client, _pullPaymentExecutor), "Invalid deletion - ECRECOVER_FAILED.");
    |
  > |        pullPayments[_client][_pullPaymentExecutor].cancelTimestamp = now;
    |
    |        if (isFundingNeeded(msg.sender)) {
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(846)

[31mViolation[0m for LockedEther in contract 'PumaPayToken':
    |/// Super is used to bypass the original function signature and include the whenNotMinting modifier.
    |
  > |contract PumaPayToken is ERC20Mintable {
    |
    |    string public name = "PumaPay";
  at /unique_contracts/0x4a8688ccc04aee23b868cf66fbbf3a88428d095b.sol(404)