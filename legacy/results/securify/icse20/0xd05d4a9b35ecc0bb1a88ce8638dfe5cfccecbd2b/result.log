Processing contract: /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol:EtherBoxStake
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol:Stake
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAOConstantGas in contract 'EtherBoxStake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[33mWarning[0m for TODAmount in contract 'EtherBoxStake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[31mViolation[0m for TODReceiver in contract 'EtherBoxStake':
    |        require(_amount>100&&_amount<=stakes[msg.sender]);
    |        stakes[msg.sender]-=_amount;
  > |        if (msg.sender==owner) owner.transfer(_amount);
    |        else msg.sender.transfer(_amount-payfee(_amount));
    |        return true;
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(40)

[31mViolation[0m for TODReceiver in contract 'EtherBoxStake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBoxStake':
    |    function () payable external {
    |        require(msg.value>=100);
  > |        if (stakes[msg.sender]==0) stakers++;
    |        stakes[msg.sender]+=msg.value-payfee(msg.value);
    |        emit Staked(msg.sender,msg.value);
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(63)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBoxStake':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(11)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    address payable owner;
    |    address payable newOwner;
  > |    function changeOwner(address payable _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(10)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(11)

[33mWarning[0m for DAOConstantGas in contract 'Stake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[33mWarning[0m for TODAmount in contract 'Stake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[31mViolation[0m for TODReceiver in contract 'Stake':
    |        require(_amount>100&&_amount<=stakes[msg.sender]);
    |        stakes[msg.sender]-=_amount;
  > |        if (msg.sender==owner) owner.transfer(_amount);
    |        else msg.sender.transfer(_amount-payfee(_amount));
    |        return true;
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(40)

[31mViolation[0m for TODReceiver in contract 'Stake':
    |        if (msg.sender==owner) return 0;
    |        fees = _amount*fee/100;
  > |        owner.transfer(fees);
    |        return fees;
    |    }
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'Stake':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/24/0xd05d4a9b35ecc0bb1a88ce8638dfe5cfccecbd2b.sol(11)