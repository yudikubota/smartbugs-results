Processing contract: /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol:EthSwapContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'EthSwapContract':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        receiver.transfer(swaps[_swapID].value);
    |
    |        // Logs close event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(169)

[33mWarning[0m for TODAmount in contract 'EthSwapContract':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        swaps[_swapID].funder.transfer(swaps[_swapID].value + swaps[_swapID].brokerFee);
    |
    |        // Logs expire event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(183)

[33mWarning[0m for TODReceiver in contract 'EthSwapContract':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        receiver.transfer(swaps[_swapID].value);
    |
    |        // Logs close event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(169)

[33mWarning[0m for TODReceiver in contract 'EthSwapContract':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        swaps[_swapID].funder.transfer(swaps[_swapID].value + swaps[_swapID].brokerFee);
    |
    |        // Logs expire event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(183)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'EthSwapContract':
    |        require(_amount <= brokerFees[msg.sender]);
    |        brokerFees[msg.sender] -= _amount;
  > |        msg.sender.transfer(_amount);
    |    }
    |
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(195)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthSwapContract':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        swaps[_swapID].funder.transfer(swaps[_swapID].value + swaps[_swapID].brokerFee);
    |
    |        // Logs expire event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(183)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(111)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |        });
    |        swaps[_swapID] = swap;
  > |        swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(144)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |        });
    |        swaps[_swapID] = swap;
  > |        swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(145)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |    function refund(bytes32 _swapID) external onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {
    |        // Expire the swap.
  > |        swapStates[_swapID] = States.EXPIRED;
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(180)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        redeemedAt[_swapID] = now;
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |        swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(163)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwapContract':
    |
    |        // Update the broker fees to the broker.
  > |        brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  at /unique_chucks/16/0x4bc1d23a8c00ac87c57b6a32d5fb82aa5346950d.sol(166)