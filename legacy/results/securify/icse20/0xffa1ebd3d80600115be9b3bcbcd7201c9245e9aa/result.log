Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:DSParser
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:I_Pricer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:I_minter
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:OraclizeAddrResolverI
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:OraclizeI
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:Pricer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:mortal
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'I_Pricer':
    |
    |/** @title I_Pricer. */
  > |contract I_Pricer {
    |    uint128 public lastPrice;
    |    uint public constant DELAY = 1 days;// this needs to be a day on the mainnet
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(256)

[31mViolation[0m for LockedEther in contract 'I_minter':
    |
    |/** @title I_minter. */
  > |contract I_minter { 
    |    event EventCreateStatic(address indexed _from, uint128 _value, uint _transactionID, uint _Price); 
    |    event EventRedeemStatic(address indexed _from, uint128 _value, uint _transactionID, uint _Price); 
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(235)

[33mWarning[0m for DAO in contract 'Pricer':
    |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
  > |        return oraclize.query.value(price)(timestamp, datasource, arg);
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(155)

[31mViolation[0m for RepeatedCall in contract 'Pricer':
    |   
    |	function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal { 
  > |        return oraclize.setCustomGasPrice(gasPrice); 
    |	}     
    |
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(148)

[31mViolation[0m for RepeatedCall in contract 'Pricer':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address){
  > |        return oraclize.cbAddress();
    |    }
    |    function oraclize_setProof(byte proofP) oraclizeAPI internal {
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(165)

[31mViolation[0m for RepeatedCall in contract 'Pricer':
    |        }
    |        if(RevTransaction[myid]>0){  //if it's not from QuickPrice
  > |            mint.PriceReturn(RevTransaction[myid],lastPrice);  //Call the minter
    |        }
    |        delete RevTransaction[myid]; // free up the memory
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(346)

[33mWarning[0m for RepeatedCall in contract 'Pricer':
    |
    |   function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){
  > |       return oraclize.getPrice(datasource);
    |   }
    |
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(140)

[33mWarning[0m for RepeatedCall in contract 'Pricer':
    |
    |    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){
  > |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
    |        return oraclize.query.value(price)(timestamp, datasource, arg);
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(153)

[33mWarning[0m for RepeatedCall in contract 'Pricer':
    |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
  > |        return oraclize.query.value(price)(timestamp, datasource, arg);
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(155)

[31mViolation[0m for TODAmount in contract 'Pricer':
    |          * @return True if sucessful
    |        */
  > |        return owner.send(this.balance);
    |		return true;
    |    }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(367)

[33mWarning[0m for TODAmount in contract 'Pricer':
    |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
  > |        return oraclize.query.value(price)(timestamp, datasource, arg);
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(155)

[31mViolation[0m for TODReceiver in contract 'Pricer':
    |          * @return True if sucessful
    |        */
  > |        return owner.send(this.balance);
    |		return true;
    |    }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(367)

[33mWarning[0m for TODReceiver in contract 'Pricer':
    |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
  > |        return oraclize.query.value(price)(timestamp, datasource, arg);
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(155)

[31mViolation[0m for UnhandledException in contract 'Pricer':
    |          * @return True if sucessful
    |        */
  > |        return owner.send(this.balance);
    |		return true;
    |    }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(367)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Pricer':
    |        uint price = oraclize.getPrice(datasource);
    |        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price
  > |        return oraclize.query.value(price)(timestamp, datasource, arg);
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'Pricer':
    |    modifier oraclizeAPI {
    |        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork();
  > |        oraclize = OraclizeI(OAR.getAddress());
    |        _;
    |    }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'Pricer':
    |
    |/** @title Pricer. */
  > |contract Pricer is I_Pricer, 
    |	mortal, 
    |	usingOraclize, 
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(275)

[33mWarning[0m for UnrestrictedWrite in contract 'Pricer':
    |        */
    |        bytes32 TrasID =oraclize_query(1, "URL", sURL);
  > |        RevTransaction[TrasID]=0;
    |    }
    |	
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'Pricer':
    |             lastPrice =  0;  //0 is taken to be an error by the minter contract
    |        } else {
  > |            lastPrice =  parseInt128(result);  //convert the string into a 18 decimal place number
    |        }
    |        if(RevTransaction[myid]>0){  //if it's not from QuickPrice
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(343)

[33mWarning[0m for UnrestrictedWrite in contract 'Pricer':
    |        bytes32 TrasID;
    |        TrasID=oraclize_query(DELAY, "URL", sURL);
  > |        RevTransaction[TrasID]=_actionID;
    |		return _TrasID;
    |    }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(387)

[31mViolation[0m for MissingInputValidation in contract 'mortal':
    |    owner = msg.sender;
    |  }
  > |  function changeOwner(address newOwner) onlyOwner {
    |    owner = newOwner;
    |  }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(9)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |    owner = msg.sender;
    |  }
  > |  function changeOwner(address newOwner) onlyOwner {
    |    owner = newOwner;
    |  }
  at /unique_contracts/0xffa1ebd3d80600115be9b3bcbcd7201c9245e9aa.sol(9)