Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:INameAccountRecovery
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:INameFactory
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:INamePublicKey
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:INameTAOPosition
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:NamePublicKey
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(363)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(375)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(384)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(413)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(322)

[31mViolation[0m for RepeatedCall in contract 'NamePublicKey':
    |	 */
    |	function _setWriterKey(address _id, address _writerKey) internal returns (bool) {
  > |		require (this.isKeyExist(_id, _writerKey));
    |
    |		PublicKey storage _publicKey = publicKeys[_id];
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1140)

[31mViolation[0m for RepeatedCall in contract 'NamePublicKey':
    |		_publicKey.writerKey = _writerKey;
    |
  > |		uint256 _nonce = _nameFactory.incrementNonce(_id);
    |		require (_nonce > 0);
    |		emit SetWriterKey(_id, _writerKey, _nonce);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1145)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    | * @title NamePublicKey
    | */
  > |contract NamePublicKey is TheAO, INamePublicKey {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(719)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(819)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(829)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(838)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(839)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(848)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(849)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(858)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(859)

[31mViolation[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (_publicKey.keys.length > 1);
    |
  > |		keyToNameId[_key] = address(0);
    |
    |		uint256 index;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1031)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |pragma solidity >=0.5.4 <0.6.0;
    |
  > |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    | * @title NamePublicKey
    | */
  > |contract NamePublicKey is TheAO, INamePublicKey {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(719)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (!isExist(_id));
    |
  > |		keyToNameId[_defaultKey] = _id;
    |		if (_defaultKey != _writerKey) {
    |			keyToNameId[_writerKey] = _id;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(898)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		keyToNameId[_defaultKey] = _id;
    |		if (_defaultKey != _writerKey) {
  > |			keyToNameId[_writerKey] = _id;
    |		}
    |		PublicKey storage _publicKey = publicKeys[_id];
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(900)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		}
    |		PublicKey storage _publicKey = publicKeys[_id];
  > |		_publicKey.created = true;
    |		_publicKey.defaultKey = _defaultKey;
    |		_publicKey.writerKey = _writerKey;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(903)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		PublicKey storage _publicKey = publicKeys[_id];
    |		_publicKey.created = true;
  > |		_publicKey.defaultKey = _defaultKey;
    |		_publicKey.writerKey = _writerKey;
    |		_publicKey.keys.push(_defaultKey);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(904)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		_publicKey.created = true;
    |		_publicKey.defaultKey = _defaultKey;
  > |		_publicKey.writerKey = _writerKey;
    |		_publicKey.keys.push(_defaultKey);
    |		if (_defaultKey != _writerKey) {
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(905)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		_publicKey.defaultKey = _defaultKey;
    |		_publicKey.writerKey = _writerKey;
  > |		_publicKey.keys.push(_defaultKey);
    |		if (_defaultKey != _writerKey) {
    |			_publicKey.keys.push(_writerKey);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(906)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		_publicKey.keys.push(_defaultKey);
    |		if (_defaultKey != _writerKey) {
  > |			_publicKey.keys.push(_writerKey);
    |		}
    |		return true;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(908)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |
    |		for (uint256 i = index; i < _publicKey.keys.length.sub(1); i++) {
  > |			_publicKey.keys[i] = _publicKey.keys[i+1];
    |		}
    |		_publicKey.keys.length--;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1042)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |
    |		PublicKey storage _publicKey = publicKeys[_id];
  > |		_publicKey.defaultKey = _defaultKey;
    |
    |		uint256 _nonce = _nameFactory.incrementNonce(_id);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1067)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |		require (!this.isKeyExist(_id, _key));
    |
  > |		keyToNameId[_key] = _id;
    |
    |		PublicKey storage _publicKey = publicKeys[_id];
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1121)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |
    |		PublicKey storage _publicKey = publicKeys[_id];
  > |		_publicKey.keys.push(_key);
    |
    |		uint256 _nonce = _nameFactory.incrementNonce(_id);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1124)

[33mWarning[0m for UnrestrictedWrite in contract 'NamePublicKey':
    |
    |		PublicKey storage _publicKey = publicKeys[_id];
  > |		_publicKey.writerKey = _writerKey;
    |
    |		uint256 _nonce = _nameFactory.incrementNonce(_id);
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(1143)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(322)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(675)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(704)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(696)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(707)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(106)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(154)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(230)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(246)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/23/0x51bedad07ab8c2470556d565f98307d89380a6da.sol(248)