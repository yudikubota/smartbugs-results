Processing contract: /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol:CryptoHands
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'CryptoHands':
    |        if(users[referer].levelExpired[_level] >= now ){
    |            bool result;
  > |            result = address(uint160(referer)).send(LEVEL_PRICE[_level]);
    |            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);
    |        } else {
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(280)

[33mWarning[0m for TODReceiver in contract 'CryptoHands':
    |        if(users[referer].levelExpired[_level] >= now ){
    |            bool result;
  > |            result = address(uint160(referer)).send(LEVEL_PRICE[_level]);
    |            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);
    |        } else {
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(280)

[31mViolation[0m for UnhandledException in contract 'CryptoHands':
    |        if(users[referer].levelExpired[_level] >= now ){
    |            bool result;
  > |            result = address(uint160(referer)).send(LEVEL_PRICE[_level]);
    |            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);
    |        } else {
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(280)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoHands':
    |        if(users[referer].levelExpired[_level] >= now ){
    |            bool result;
  > |            result = address(uint160(referer)).send(LEVEL_PRICE[_level]);
    |            emit getMoneyForLevelEvent(referer, msg.sender, _level, now);
    |        } else {
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |/*
  > | $$$$$$\                                 $$\               $$\   $$\                           $$\           
    |$$  __$$\                                $$ |              $$ |  $$ |                          $$ |          
    |$$ /  \__| $$$$$$\  $$\   $$\  $$$$$$\ $$$$$$\    $$$$$$\  $$ |  $$ | $$$$$$\  $$$$$$$\   $$$$$$$ | $$$$$$$\ 
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |}
    |
  > |contract CryptoHands is Ownable {
    |
    |    event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |
    |        UserStruct memory userStruct;
  > |        currUserID++;
    |
    |        userStruct = UserStruct({
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |
    |        users[msg.sender] = userStruct;
  > |        userList[currUserID] = msg.sender;
    |
    |        users[msg.sender].levelExpired[1] = now + PERIOD_LENGTH;
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |        users[msg.sender].levelExpired[8] = 0;
    |
  > |        users[userList[_referrerID]].referral.push(msg.sender);
    |
    |        payForLevel(1, msg.sender);
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(220)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |
    |  function transferOwnership(address newOwner) public onlyOwner {
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoHands':
    |
    |  function setManager(address _manager) public onlyOwnerOrManager {
  > |      manager = _manager;
    |  }
    |}
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(76)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |  }
    |
  > |  function transferOwnership(address newOwner) public onlyOwner {
    |    owner = newOwner;
    |  }
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(71)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |  }
    |
  > |  function setManager(address _manager) public onlyOwnerOrManager {
    |      manager = _manager;
    |  }
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |  function transferOwnership(address newOwner) public onlyOwner {
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |  function setManager(address _manager) public onlyOwnerOrManager {
  > |      manager = _manager;
    |  }
    |}
  at /unique_chucks/5/0xa315bd2e3227c2ab71f1350644b01757eaff9cb4.sol(76)