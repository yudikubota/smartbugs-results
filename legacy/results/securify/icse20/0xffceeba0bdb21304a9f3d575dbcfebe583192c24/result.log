Processing contract: /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol:IERC20
Processing contract: /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol:ReserveDollar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol:ReserveDollarEternalStorage
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ReserveDollar':
    |}
    |
  > |contract ReserveDollar is IERC20 {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(12)

[31mViolation[0m for RepeatedCall in contract 'ReserveDollar':
    |    /// Modifies a function to run only when the `account` is not frozen.
    |    modifier notFrozen(address account) {
  > |        require(data.frozenTime(account) == 0, "account frozen");
    |        _;
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(188)

[31mViolation[0m for RepeatedCall in contract 'ReserveDollar':
    |    {
    |        _burn(account, value);
  > |        _approve(account, msg.sender, data.allowed(account, msg.sender).sub(value));
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(323)

[31mViolation[0m for RepeatedCall in contract 'ReserveDollar':
    |
    |        totalSupply = totalSupply.sub(value);
  > |        data.subBalance(account, value);
    |        emit Transfer(account, address(0), value);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(342)

[31mViolation[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |}
    |
  > |contract ReserveDollar is IERC20 {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(12)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |}
    |
  > |contract ReserveDollar is IERC20 {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(12)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Change who holds the `minter` role.
    |    function changeMinter(address newMinter) external onlyOwnerOr(minter) {
  > |        minter = newMinter;
    |        emit MinterChanged(newMinter);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Change who holds the `pauser` role.
    |    function changePauser(address newPauser) external onlyOwnerOr(pauser) {
  > |        pauser = newPauser;
    |        emit PauserChanged(newPauser);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Change who holds the `freezer` role.
    |    function changeFreezer(address newFreezer) external onlyOwnerOr(freezer) {
  > |        freezer = newFreezer;
    |        emit FreezerChanged(newFreezer);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// actually change `owner` to `nominatedOwner` until `nominatedOwner` calls `acceptOwnership`.
    |    function nominateNewOwner(address nominee) external only(owner) {
  > |        nominatedOwner = nominee;
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |            emit OwnerChanged(msg.sender);
    |        }
  > |        owner = msg.sender;
    |        nominatedOwner = address(0);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |        }
    |        owner = msg.sender;
  > |        nominatedOwner = address(0);
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Only do this to deliberately lock in the current permissions.
    |    function renounceOwnership() external only(owner) {
  > |        owner = address(0);
    |        emit OwnerChanged(owner);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Pause the contract.
    |    function pause() external only(pauser) {
  > |        paused = true;
    |        emit Paused(pauser);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |    /// Unpause the contract.
    |    function unpause() external only(pauser) {
  > |        paused = false;
    |        emit Unpaused(pauser);
    |    }
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |        require(account != address(0), "can't mint to address zero");
    |
  > |        totalSupply = totalSupply.add(value);
    |        data.addBalance(account, value);
    |        emit Transfer(address(0), account, value);
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(310)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollar':
    |        require(account != address(0), "can't burn from address zero");
    |
  > |        totalSupply = totalSupply.sub(value);
    |        data.subBalance(account, value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |        require(msg.sender == owner || msg.sender == escapeHatch, "not authorized");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(387)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |        require(msg.sender == escapeHatch, "not authorized");
    |        emit EscapeHatchTransferred(escapeHatch, newEscapeHatch);
  > |        escapeHatch = newEscapeHatch;
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(394)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |    /// available anyway.
    |    function addBalance(address key, uint256 value) external onlyOwner {
  > |        balance[key] = balance[key].add(value);
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |    /// Subtract `value` from `balance[key]`, unless this causes integer underflow.
    |    function subBalance(address key, uint256 value) external onlyOwner {
  > |        balance[key] = balance[key].sub(value);
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(412)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |    /// Set `balance[key]` to `value`.
    |    function setBalance(address key, uint256 value) external onlyOwner {
  > |        balance[key] = value;
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(417)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |    /// Set `to`'s allowance of `from`'s tokens to `value`.
    |    function setAllowed(address from, address to, uint256 value) external onlyOwner {
  > |        allowed[from][to] = value;
    |    }
    |
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(428)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveDollarEternalStorage':
    |    /// Set `frozenTime[who]` to `time`.
    |    function setFrozenTime(address who, uint256 time) external onlyOwner {
  > |        frozenTime[who] = time;
    |    }
    |}
  at /unique_chucks/34/0xffceeba0bdb21304a9f3d575dbcfebe583192c24.sol(442)