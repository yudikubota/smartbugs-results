Processing contract: /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol:MarketContractRegistry
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol:MarketContractRegistryInterface
Processing contract: /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol:Ownable
[31mViolation[0m for LockedEther in contract 'MarketContractRegistry':
    |/// @title MarketContractRegistry
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContractRegistry is Ownable, MarketContractRegistryInterface {
    |
    |    // whitelist accounting
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(121)

[31mViolation[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |/// @title MarketContractRegistry
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContractRegistry is Ownable, MarketContractRegistryInterface {
    |
    |    // whitelist accounting
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |/*
  > |    Copyright 2017-2019 Phillip A. Elsasser
    |
    |    Licensed under the Apache License, Version 2.0 (the "License");
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |/// @title MarketContractRegistry
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContractRegistry is Ownable, MarketContractRegistryInterface {
    |
    |    // whitelist accounting
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |        require(isWhiteListed[contractAddress], "can only remove whitelisted addresses");
    |        require(addressWhiteList[whiteListIndex] == contractAddress, "index does not match address");
  > |        isWhiteListed[contractAddress] = false;
    |
    |        // push the last item in array to replace the address we are removing and then trim the array.
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |
    |        // push the last item in array to replace the address we are removing and then trim the array.
  > |        addressWhiteList[whiteListIndex] = addressWhiteList[addressWhiteList.length - 1];
    |        addressWhiteList.length -= 1;
    |        emit AddressRemovedFromWhitelist(contractAddress);
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |        require(isOwner() || factoryAddressWhiteList[msg.sender], "Can only be added by factory or owner");
    |        require(!isWhiteListed[contractAddress], "Address must not be whitelisted");
  > |        isWhiteListed[contractAddress] = true;
    |        addressWhiteList.push(contractAddress);
    |        emit AddressAddedToWhitelist(contractAddress);
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(175)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |        require(!isWhiteListed[contractAddress], "Address must not be whitelisted");
    |        isWhiteListed[contractAddress] = true;
  > |        addressWhiteList.push(contractAddress);
    |        emit AddressAddedToWhitelist(contractAddress);
    |    }
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |    function addFactoryAddress(address factoryAddress) external onlyOwner {
    |        require(!factoryAddressWhiteList[factoryAddress], "address already added");
  > |        factoryAddressWhiteList[factoryAddress] = true;
    |        emit FactoryAddressAdded(factoryAddress);
    |    }
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractRegistry':
    |    function removeFactoryAddress(address factoryAddress) external onlyOwner {
    |        require(factoryAddressWhiteList[factoryAddress], "factory address is not in the white list");
  > |        factoryAddressWhiteList[factoryAddress] = false;
    |        emit FactoryAddressRemoved(factoryAddress);
    |    }
  at /unique_chucks/36/0x94772cc6e33b186bfdd0719a287f12d3ca816657.sol(192)