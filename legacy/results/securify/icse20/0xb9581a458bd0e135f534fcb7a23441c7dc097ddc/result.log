Processing contract: /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol:ContractOwned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol:ContractTokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol:GLBToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol:tokenRecipient
[31mViolation[0m for MissingInputValidation in contract 'ContractOwned':
    |    }
    |
  > |    function transferOwnership(address newOwner) onlyOwner public {
    |        owner = newOwner;
    |    }
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'ContractOwned':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(16)

[31mViolation[0m for LockedEther in contract 'ContractTokenERC20':
    |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
  > |contract ContractTokenERC20 {
    |    // Public variables of the token
    |    string public name;
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(22)

[31mViolation[0m for UnrestrictedWrite in contract 'ContractTokenERC20':
    |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(74)

[33mWarning[0m for TODAmount in contract 'GLBToken':
    |        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy
    |        _transfer(msg.sender, address(this), amount);       // makes the transfers
  > |        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks
    |    }
    |}
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(217)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GLBToken':
    |        require(myAddress.balance >= amount * sellPrice);   // checks if the contract has enough ether to buy
    |        _transfer(msg.sender, address(this), amount);       // makes the transfers
  > |        msg.sender.transfer(amount * sellPrice);            // sends ether to the seller. It's important to do this last to avoid recursion attacks
    |    }
    |}
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(16)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |    /// @param mintedAmount the amount of tokens it will receive
    |    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
  > |        balanceOf[target] += mintedAmount;
    |        totalSupply += mintedAmount;
    |        emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    |        balanceOf[target] += mintedAmount;
  > |        totalSupply += mintedAmount;
    |        emit Transfer(address(0), address(this), mintedAmount);
    |        emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |    /// @param freeze either to freeze it or not
    |    function freezeAccount(address target, bool freeze) onlyOwner public {
  > |        frozenAccount[target] = freeze;
    |        emit FrozenFunds(target, freeze);
    |    }
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(193)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |    /// @param newBuyPrice Price users can buy from the contract
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
  > |        sellPrice = newSellPrice;
    |        buyPrice = newBuyPrice;
    |    }
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'GLBToken':
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
    |        sellPrice = newSellPrice;
  > |        buyPrice = newBuyPrice;
    |    }
    |
  at /unique_chucks/12/0xb9581a458bd0e135f534fcb7a23441c7dc097ddc.sol(202)