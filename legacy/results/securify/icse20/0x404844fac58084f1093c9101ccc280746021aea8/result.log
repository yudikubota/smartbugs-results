Processing contract: /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol:BaseToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol:IERC20
Processing contract: /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol:Ownable
Processing contract: /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol:TestCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'BaseToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        emit Transfer(msg.sender, _to, _value);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(214)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseToken':
    |
    |        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to]  = balances[_to].add(_value);
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(244)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseToken':
    |        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to]  = balances[_to].add(_value);
    |
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(245)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseToken':
    |        require(newMaster != address(0));
    |        emit MasterRoleTransferred(_master, newMaster);
  > |        _master = newMaster;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseToken':
    |    {
    |        emit Stopped();
  > |        stopped = true;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseToken':
    |    {
    |        emit Started();
  > |        stopped = false;
    |    }
    |}
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(173)

[31mViolation[0m for LockedEther in contract 'TestCToken':
    |}
    |
  > |contract TestCToken is BaseToken
    |{
    |    using SafeMath for uint256;
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(253)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        emit Transfer(msg.sender, _to, _value);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(214)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |
    |        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to]  = balances[_to].add(_value);
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(244)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to]  = balances[_to].add(_value);
    |
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(245)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        emit Deposit(msg.sender, _to, _value);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(284)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value + _fee);
  > |        balances[_to] = balances[_to].add(_value);
    |        balances[_sale] = balances[_sale].add(_fee);
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(298)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |        balances[msg.sender] = balances[msg.sender].sub(_value + _fee);
    |        balances[_to] = balances[_to].add(_value);
  > |        balances[_sale] = balances[_sale].add(_fee);
    |
    |        emit ReferralDrop(msg.sender, _to, _value, address(0), 0);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(299)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value1 + _value2 + _fee);
  > |        balances[_to1] = balances[_to1].add(_value1);
    |        balances[_to2] = balances[_to2].add(_value2);
    |        balances[_sale] = balances[_sale].add(_fee);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(314)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |        balances[msg.sender] = balances[msg.sender].sub(_value1 + _value2 + _fee);
    |        balances[_to1] = balances[_to1].add(_value1);
  > |        balances[_to2] = balances[_to2].add(_value2);
    |        balances[_sale] = balances[_sale].add(_fee);
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(315)

[31mViolation[0m for UnrestrictedWrite in contract 'TestCToken':
    |        balances[_to1] = balances[_to1].add(_value1);
    |        balances[_to2] = balances[_to2].add(_value2);
  > |        balances[_sale] = balances[_sale].add(_fee);
    |
    |        emit ReferralDrop(msg.sender, _to1, _value1, _to2, _value2);
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(316)

[33mWarning[0m for UnrestrictedWrite in contract 'TestCToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'TestCToken':
    |        require(newMaster != address(0));
    |        emit MasterRoleTransferred(_master, newMaster);
  > |        _master = newMaster;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'TestCToken':
    |    {
    |        emit Stopped();
  > |        stopped = true;
    |    }
    |
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'TestCToken':
    |    {
    |        emit Started();
  > |        stopped = false;
    |    }
    |}
  at /unique_chucks/11/0x404844fac58084f1093c9101ccc280746021aea8.sol(173)