Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:AggregatedTokenSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:ExternalCall
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:IERC20
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:IGST2
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:IWETH
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:Ownable
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol:TokenSpender
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(23)

[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        (bool success, bytes memory returndata) = address(token).call(data);
    |        require(success);
    |
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(285)

[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |            return who.balance;
    |        } else {
  > |            return token.balanceOf(who);
    |        }
    |    }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(455)

[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {
    |            if (allowFail) {
  > |                return to.send(amount);
    |            } else {
    |                to.transfer(amount);
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(462)

[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |                return to.send(amount);
    |            } else {
  > |                to.transfer(amount);
    |                return true;
    |            }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(464)

[31mViolation[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |            }
    |
  > |            uint gasTokenBalance = IERC20(address(gasToken)).balanceOf(address(this));
    |
    |            if (tokensAmount > 0 && gasTokenBalance >= tokensAmount) {
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(525)

[33mWarning[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |            require(address(this).balance >= minTokensAmount);
    |        } else {
  > |            require(toToken.balanceOf(address(this)) >= minTokensAmount);
    |        }
    |
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(408)

[33mWarning[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |        //
    |
  > |        require(gasTokenBalance == gasToken.balanceOf(address(this)));
    |        if (mintGasPrice > 0) {
    |            audoRefundGas(returnAmount, mintGasPrice);
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(413)

[33mWarning[0m for RepeatedCall in contract 'AggregatedTokenSwap':
    |            if (tokensAmount > 0 && gasTokenBalance >= tokensAmount) {
    |
  > |                return gasToken.freeUpTo(tokensAmount);
    |            } else {
    |
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(529)

[31mViolation[0m for TODAmount in contract 'AggregatedTokenSwap':
    |        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {
    |            if (allowFail) {
  > |                return to.send(amount);
    |            } else {
    |                to.transfer(amount);
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(462)

[31mViolation[0m for TODAmount in contract 'AggregatedTokenSwap':
    |                return to.send(amount);
    |            } else {
  > |                to.transfer(amount);
    |                return true;
    |            }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(464)

[31mViolation[0m for TODAmount in contract 'AggregatedTokenSwap':
    |            IERC20 _gasToken = IERC20(address(gasToken));
    |
  > |            owner.transfer(address(this).balance);
    |            _gasToken.safeTransfer(owner, _gasToken.balanceOf(address(this)));
    |        }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(546)

[33mWarning[0m for TODAmount in contract 'AggregatedTokenSwap':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(23)

[33mWarning[0m for TODReceiver in contract 'AggregatedTokenSwap':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(23)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AggregatedTokenSwap':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(23)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AggregatedTokenSwap':
    |        if (address(token) == ETH_ADDRESS || token == IERC20(0)) {
    |            if (allowFail) {
  > |                return to.send(amount);
    |            } else {
    |                to.transfer(amount);
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(462)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AggregatedTokenSwap':
    |                return to.send(amount);
    |            } else {
  > |                to.transfer(amount);
    |                return true;
    |            }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(464)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AggregatedTokenSwap':
    |            IERC20 _gasToken = IERC20(address(gasToken));
    |
  > |            owner.transfer(address(this).balance);
    |            _gasToken.safeTransfer(owner, _gasToken.balanceOf(address(this)));
    |        }
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'AggregatedTokenSwap':
    |    function setFee(uint _fee) public onlyOwner {
    |
  > |        fee = _fee;
    |    }
    |
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(362)

[31mViolation[0m for LockedEther in contract 'TokenSpender':
    |
    |
  > |contract TokenSpender is Ownable {
    |
    |    using SafeERC20 for IERC20;
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(305)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSpender':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(203)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSpender':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x0000000006adbd7c01bc0738cdbfc3932600ad63.sol(221)