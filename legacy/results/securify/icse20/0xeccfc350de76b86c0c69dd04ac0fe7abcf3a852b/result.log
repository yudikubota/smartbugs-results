Processing contract: /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol:COM
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'COM':
    |}
    |
  > |contract COM {
    |
    |    using SafeMath for uint256;
  at /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol(32)

[33mWarning[0m for UnrestrictedWrite in contract 'COM':
    |            // Update balances of msg.sender and _to:
    |        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);
  > |        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'COM':
    |        require(_value <= allowance[_from][msg.sender]);
    |            // Update balances of _from and _to:
  > |        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);
    |        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);
    |            // Update allowance:
  at /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'COM':
    |            // Update balances of _from and _to:
    |        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);
  > |        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);
    |            // Update allowance:
    |        require(allowance[_from][msg.sender]  < MAX_UINT256);
  at /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol(90)

[33mWarning[0m for UnrestrictedWrite in contract 'COM':
    |        require(_value > 0);
    |        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value);
  > |        totalSupply = SafeMath.sub(totalSupply,_value);
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/29/0xeccfc350de76b86c0c69dd04ac0fe7abcf3a852b.sol(111)