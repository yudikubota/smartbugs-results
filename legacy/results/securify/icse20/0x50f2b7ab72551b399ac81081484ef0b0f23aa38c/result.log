Processing contract: /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol:BaseSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol:EthSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol:SwapInterface
[31mViolation[0m for LockedEther in contract 'BaseSwap':
    |}
    |
  > |contract BaseSwap is SwapInterface {
    |    string public VERSION; // Passed in as a constructor parameter.
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(106)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(245)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(246)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(285)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {
    |        // Expire the swap.
  > |        _swapStates[_swapID] = States.EXPIRED;
    |
    |        // Logs expire event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(296)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(267)

[33mWarning[0m for TODAmount in contract 'EthSwap':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        _receiver.transfer(BaseSwap.swaps[_swapID].value);
    |    }
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(450)

[33mWarning[0m for TODAmount in contract 'EthSwap':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        swaps[_swapID].spender.transfer(BaseSwap.swaps[_swapID].value);
    |    }
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(464)

[33mWarning[0m for TODAmount in contract 'EthSwap':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        BaseSwap.swaps[_swapID].funder.transfer(
    |            BaseSwap.swaps[_swapID].value + BaseSwap.swaps[_swapID].brokerFee
    |        );
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(474)

[33mWarning[0m for TODReceiver in contract 'EthSwap':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        _receiver.transfer(BaseSwap.swaps[_swapID].value);
    |    }
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(450)

[33mWarning[0m for TODReceiver in contract 'EthSwap':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        swaps[_swapID].spender.transfer(BaseSwap.swaps[_swapID].value);
    |    }
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(464)

[33mWarning[0m for TODReceiver in contract 'EthSwap':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        BaseSwap.swaps[_swapID].funder.transfer(
    |            BaseSwap.swaps[_swapID].value + BaseSwap.swaps[_swapID].brokerFee
    |        );
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(474)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'EthSwap':
    |    function withdrawBrokerFees(uint256 _amount) public {
    |        BaseSwap.withdrawBrokerFees(_amount);
  > |        msg.sender.transfer(_amount);
    |    }
    |}
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(484)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthSwap':
    |
    |        // Transfer the ETH funds from this contract to the receiver.
  > |        swaps[_swapID].spender.transfer(BaseSwap.swaps[_swapID].value);
    |    }
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(464)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthSwap':
    |
    |        // Transfer the ETH value from this contract back to the ETH trader.
  > |        BaseSwap.swaps[_swapID].funder.transfer(
    |            BaseSwap.swaps[_swapID].value + BaseSwap.swaps[_swapID].brokerFee
    |        );
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(474)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(245)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(246)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(285)

[31mViolation[0m for UnrestrictedWrite in contract 'EthSwap':
    |    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {
    |        // Expire the swap.
  > |        _swapStates[_swapID] = States.EXPIRED;
    |
    |        // Logs expire event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(296)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwap':
    |
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'EthSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/31/0x50f2b7ab72551b399ac81081484ef0b0f23aa38c.sol(267)