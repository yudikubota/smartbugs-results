Processing contract: /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol:Cleanedapp
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol:IDeadTokens
Processing contract: /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol:IERC20
Processing contract: /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol:IOracle
[33mWarning[0m for DAO in contract 'Cleanedapp':
    |        
    |        if (amount > 0) {
  > |            token.transferFrom(user, address(this), amount);
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(55)

[31mViolation[0m for MissingInputValidation in contract 'Cleanedapp':
    |    event Burned(address indexed token, address indexed user, uint amount, string message);
    |    
  > |    function burn(IERC20 token, string calldata message) external onlyBuried(token) {
    |        _burn(token, msg.sender, message);
    |    }
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(41)

[31mViolation[0m for MissingInputValidation in contract 'Cleanedapp':
    |        _burn(token, msg.sender, message);
    |    }
  > |    function burn(IERC20 token, address user, string calldata message) external onlyBuried(token) {
    |        _burn(token, user, message);
    |    }
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(44)

[33mWarning[0m for RepeatedCall in contract 'Cleanedapp':
    |    function _burn(IERC20 token, address user, string memory message) internal {
    |        uint approved = token.allowance(user, address(this));
  > |        uint balance = token.balanceOf(user);
    |        uint amount = approved < balance ? approved : balance;
    |        
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(51)

[33mWarning[0m for TODAmount in contract 'Cleanedapp':
    |        
    |        if (amount > 0) {
  > |            token.transferFrom(user, address(this), amount);
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(55)

[33mWarning[0m for TODReceiver in contract 'Cleanedapp':
    |        
    |        if (amount > 0) {
  > |            token.transferFrom(user, address(this), amount);
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(55)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Cleanedapp':
    |        
    |        if (amount > 0) {
  > |            token.transferFrom(user, address(this), amount);
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(55)

[31mViolation[0m for UnrestrictedWrite in contract 'Cleanedapp':
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  > |                slotsCleared += 1;
    |            }
    |            emit Burned(address(token), user, amount, message);
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(58)

[33mWarning[0m for UnrestrictedWrite in contract 'Cleanedapp':
    |            if (amount == approved) {
    |                // this guy just sent all his tokens
  > |                slotsCleared += 1;
    |            }
    |            emit Burned(address(token), user, amount, message);
  at /unique_chucks/20/0x6faecc30bec9420a8e4a71e6b4c248186ca77d9a.sol(58)