Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:ERC20Detailed
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:FoundationOwnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:IERC20
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:Pausable
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:PauserRole
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:Port
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:PortedToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol:TeleportOwnable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'FoundationOwnable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'FoundationOwnable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'FoundationOwnable':
    |		_removePauser(foundation);
    |		_addPauser(f);
  > |		foundation = f;
    |	}
    |}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(164)

[31mViolation[0m for RepeatedCall in contract 'Port':
    |		for (uint i=0; i<registeredMainTokens.length; i++) {
    |			IERC20 token = IERC20(registeredMainTokens[i]);
  > |			uint256 balance = token.balanceOf(address(this));
    |			token.transfer(beneficiary, balance);
    |		}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(668)

[31mViolation[0m for RepeatedCall in contract 'Port':
    |			IERC20 token = IERC20(registeredMainTokens[i]);
    |			uint256 balance = token.balanceOf(address(this));
  > |			token.transfer(beneficiary, balance);
    |		}
    |
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(669)

[31mViolation[0m for RepeatedCall in contract 'Port':
    |		for (uint i=0; i<registeredClonedTokens.length; i++) {
    |			PortedToken token = PortedToken(registeredClonedTokens[i]);
  > |			token.transferTeleport(beneficiary);
    |		}
    |
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(675)

[33mWarning[0m for TODAmount in contract 'Port':
    |		proofs[proof] = true;
    |
  > |		addr.transfer(value);
    |	}
    |
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(784)

[33mWarning[0m for TODReceiver in contract 'Port':
    |		proofs[proof] = true;
    |
  > |		addr.transfer(value);
    |	}
    |
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(784)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Port':
    |		proofs[proof] = true;
    |
  > |		addr.transfer(value);
    |	}
    |
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(784)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |pragma solidity ^0.5.2;
    |
  > |// File: openzeppelin-solidity/contracts/access/Roles.sol
    |
    |/**
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |// - address: "addr" is the address on this chain and "alt" is the one on
    |//            another chain.
  > |contract Port is FoundationOwnable {
    |	// Library
    |	using SafeMath for uint256;
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(534)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |		emit Withdraw(chain_id, address(0), addr, proof, cloned_token, value);
    |
  > |		proofs[proof] = true;
    |
    |		addr.transfer(value);
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(782)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |		emit Withdraw(chain_id, main_token, addr, proof, cloned_token, value);
    |
  > |		proofs[proof] = true;
    |
    |		IERC20 token = IERC20(main_token);
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(811)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |
    |		breakoutTokens[main_token][chain_id] = cloned_token;
  > |		minPortValue[main_token][chain_id] = minValue;
    |
    |		bool firstTimeRegistration = old_cloned_token.length == 0;
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(846)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |		bool firstTimeRegistration = old_cloned_token.length == 0;
    |		if (main_token != address(0) && firstTimeRegistration) {
  > |			registeredMainTokens.push(main_token);
    |		}
    |	}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(850)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |
    |		breakinTokens[cloned_token][chain_id] = main_token;
  > |		minPortValue[cloned_token][chain_id] = minValue;
    |
    |		bool firstTimeRegistration = old_main_token.length == 0;
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(882)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |		bool firstTimeRegistration = old_main_token.length == 0;
    |		if (firstTimeRegistration) {
  > |			registeredClonedTokens.push(cloned_token);
    |		}
    |	}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(886)

[33mWarning[0m for UnrestrictedWrite in contract 'Port':
    |		emit Mint(chain_id, cloned_token, addr, proof, main_token, value);
    |
  > |		proofs[proof] = true;
    |
    |		PortedToken token = PortedToken(cloned_token);
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(915)

[31mViolation[0m for LockedEther in contract 'PortedToken':
    |// File: contracts/PortedToken.sol
    |
  > |contract PortedToken is TeleportOwnable, ERC20, ERC20Detailed{
    |
    |	constructor(string memory name, string memory symbol, uint8 decimals)
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(510)

[33mWarning[0m for UnrestrictedWrite in contract 'PortedToken':
    |		require(f != address(0));
    |		emit TeleportTransferred(teleport, f);
  > |		teleport = f;
    |	}
    |}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'PortedToken':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.add(value);
    |        _balances[account] = _balances[account].add(value);
    |        emit Transfer(address(0), account, value);
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(433)

[33mWarning[0m for UnrestrictedWrite in contract 'PortedToken':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(447)

[33mWarning[0m for UnrestrictedWrite in contract 'TeleportOwnable':
    |		require(f != address(0));
    |		emit TeleportTransferred(teleport, f);
  > |		teleport = f;
    |	}
    |}
  at /unique_chucks/21/0x41374200d72e8f6a1e3f7afcd19bf14e29da9f78.sol(188)