Processing contract: /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol:SimpleMultiSigWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'SimpleMultiSigWallet':
    |					bool success;
    |					bytes memory returnData;
  > |					(success, returnData) = proposals[hash].to.call.value(proposals[hash].amount)(proposals[hash].data);
    |					require(success);
    |                }
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(40)

[31mViolation[0m for DAOConstantGas in contract 'SimpleMultiSigWallet':
    |            if (proposals[hash].votes >= maximumVotes){
    |                if (proposals[hash].data.length == 0){
  > |                    proposals[hash].to.transfer(proposals[hash].amount);
    |                }else{
    |					bool success;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(36)

[33mWarning[0m for TODAmount in contract 'SimpleMultiSigWallet':
    |            if (proposals[hash].votes >= maximumVotes){
    |                if (proposals[hash].data.length == 0){
  > |                    proposals[hash].to.transfer(proposals[hash].amount);
    |                }else{
    |					bool success;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(36)

[33mWarning[0m for TODAmount in contract 'SimpleMultiSigWallet':
    |					bool success;
    |					bytes memory returnData;
  > |					(success, returnData) = proposals[hash].to.call.value(proposals[hash].amount)(proposals[hash].data);
    |					require(success);
    |                }
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(40)

[33mWarning[0m for TODReceiver in contract 'SimpleMultiSigWallet':
    |            if (proposals[hash].votes >= maximumVotes){
    |                if (proposals[hash].data.length == 0){
  > |                    proposals[hash].to.transfer(proposals[hash].amount);
    |                }else{
    |					bool success;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(36)

[33mWarning[0m for TODReceiver in contract 'SimpleMultiSigWallet':
    |					bool success;
    |					bytes memory returnData;
  > |					(success, returnData) = proposals[hash].to.call.value(proposals[hash].amount)(proposals[hash].data);
    |					require(success);
    |                }
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(40)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SimpleMultiSigWallet':
    |            if (proposals[hash].votes >= maximumVotes){
    |                if (proposals[hash].data.length == 0){
  > |                    proposals[hash].to.transfer(proposals[hash].amount);
    |                }else{
    |					bool success;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(36)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SimpleMultiSigWallet':
    |					bool success;
    |					bytes memory returnData;
  > |					(success, returnData) = proposals[hash].to.call.value(proposals[hash].amount)(proposals[hash].data);
    |					require(success);
    |                }
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(40)

[31mViolation[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |pragma solidity ^0.5.2;
    |// This is basically a shared account in which any transactions done must be signed by multiple parties. Hence, multi-signature wallet.
  > |contract SimpleMultiSigWallet {
    |    struct Proposal {
    |        uint256 amount;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |        require(!proposals[hash].voted[msg.sender], "Already voted");
    |        if (proposals[hash].votes == 0){
  > |            proposals[hash].amount = amount;
    |            proposals[hash].to = to;
    |            proposals[hash].data = data;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(26)

[31mViolation[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |        if (proposals[hash].votes == 0){
    |            proposals[hash].amount = amount;
  > |            proposals[hash].to = to;
    |            proposals[hash].data = data;
    |            proposals[hash].votes = voteCount[msg.sender];
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(27)

[31mViolation[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |            proposals[hash].voted[msg.sender] = true;
    |        }else{
  > |            proposals[hash].votes += voteCount[msg.sender];
    |            proposals[hash].voted[msg.sender] = true;
    |            if (proposals[hash].votes >= maximumVotes){
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(32)

[33mWarning[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |pragma solidity ^0.5.2;
    |// This is basically a shared account in which any transactions done must be signed by multiple parties. Hence, multi-signature wallet.
  > |contract SimpleMultiSigWallet {
    |    struct Proposal {
    |        uint256 amount;
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |            proposals[hash].to = to;
    |            proposals[hash].data = data;
  > |            proposals[hash].votes = voteCount[msg.sender];
    |            proposals[hash].voted[msg.sender] = true;
    |        }else{
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(29)

[33mWarning[0m for UnrestrictedWrite in contract 'SimpleMultiSigWallet':
    |					require(success);
    |                }
  > |                delete proposals[hash];
    |            }
    |        }
  at /unique_chucks/33/0x8ffde97829408c39cde8fadcd4060fd6ffd5a355.sol(43)