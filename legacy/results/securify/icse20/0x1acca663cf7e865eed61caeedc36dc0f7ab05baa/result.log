Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:DestroyerRole
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:ERC20Destroyable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:ERC20Detailed
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:IBalanceSheetContract
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:IERC20
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:IEntryCreditContract
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:MinterRole
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:Ownable
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:Pausable
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:PauserRole
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:PrzToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(492)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(500)

[31mViolation[0m for LockedEther in contract 'PrzToken':
    |}
    |
  > |contract PrzToken is ERC20Detailed, ERC20Mintable, ERC20Destroyable, ERC20Pausable, Ownable {
    |
    |    // Stores the address of the entry credit contract
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(662)

[31mViolation[0m for RepeatedCall in contract 'PrzToken':
    |            _burn(from, value);
    |            IEntryCreditContract entryCreditContractInstance = IEntryCreditContract(to);
  > |            require(entryCreditContractInstance.mint(from, value), "Failed to mint entry credits");
    |
    |            IBalanceSheetContract balanceSheetContractInstance = IBalanceSheetContract(_balanceSheetContract);
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(784)

[31mViolation[0m for RepeatedCall in contract 'PrzToken':
    |
    |            IBalanceSheetContract balanceSheetContractInstance = IBalanceSheetContract(_balanceSheetContract);
  > |            require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");
    |
    |        } else {
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(787)

[31mViolation[0m for RepeatedCall in contract 'PrzToken':
    |        _batchMint(receivers, amounts);
    |
  > |        require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");
    |    }
    |
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(847)

[31mViolation[0m for RepeatedCall in contract 'PrzToken':
    |        _batchMint(claimers, amounts);
    |
  > |        require(balanceSheetContractInstance.setPeerzTokenSupply(totalSupply()), "Failed to update token supply");
    |    }
    |
  at /unique_chucks/47/0x1acca663cf7e865eed61caeedc36dc0f7ab05baa.sol(860)