Processing contract: /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol:Asset
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol:ERC20Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol:ERC20TokenInterface
Processing contract: /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol:Owned
Processing contract: /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Asset':
    | * @dev Initial supply creation
    | */
  > |contract Asset is ERC20Token {
    |    string public name = 'Orionix';
    |    uint8 public decimals = 18;
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |    function transferAdminship(address _newOwner) public onlyOwner { //Owner can be transfered
    |        require(_newOwner != address(0), "Not allowed");
  > |        owner = _newOwner;
    |        emit TransferOwnership(owner);
    |    }
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |     */
    |    function setSupplyLock(bool _set) public onlyOwner { //Only the owner can set a lock on supply
  > |        lockSupply = _set;
    |        emit SetSupplyLock(lockSupply);
    |    }
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |    function transfer(address _to, uint256 _value) public returns(bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |    function burnTokens(uint256 _value) public onlyOwner {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        totalSupply = totalSupply.sub(_value);
    |
    |        emit Transfer(msg.sender, address(0), _value);
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(159)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |    function transferAdminship(address _newOwner) public onlyOwner { //Owner can be transfered
    |        require(_newOwner != address(0), "Not allowed");
  > |        owner = _newOwner;
    |        emit TransferOwnership(owner);
    |    }
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |     */
    |    function setSupplyLock(bool _set) public onlyOwner { //Only the owner can set a lock on supply
  > |        lockSupply = _set;
    |        emit SetSupplyLock(lockSupply);
    |    }
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |    function transfer(address _to, uint256 _value) public returns(bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success) {
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |    function burnTokens(uint256 _value) public onlyOwner {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        totalSupply = totalSupply.sub(_value);
    |
    |        emit Transfer(msg.sender, address(0), _value);
  at /unique_chucks/45/0x4e84a65b5664d33b67750771f8beaec458bd6729.sol(159)