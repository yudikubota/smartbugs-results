Processing contract: /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol:MessageTransport
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol:Ownable
Processing contract: /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'MessageTransport':
    |  function withdrawRetainedFees() public {
    |    uint _amount = retainedFeesBalance / 2;
  > |    address(0).transfer(_amount);
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(360)

[31mViolation[0m for TODAmount in contract 'MessageTransport':
    |  function withdrawRetainedFees() public {
    |    uint _amount = retainedFeesBalance / 2;
  > |    address(0).transfer(_amount);
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(360)

[33mWarning[0m for TODAmount in contract 'MessageTransport':
    |    uint _amount = _account.feeBalance;
    |    _account.feeBalance = 0;
  > |    msg.sender.transfer(_amount);
    |  }
    |
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(351)

[33mWarning[0m for TODAmount in contract 'MessageTransport':
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  > |    (bool paySuccess, ) = tokenAddr.call.value(_amount)("");
    |    require(paySuccess, "failed to transfer fees");
    |  }
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(363)

[33mWarning[0m for TODReceiver in contract 'MessageTransport':
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  > |    (bool paySuccess, ) = tokenAddr.call.value(_amount)("");
    |    require(paySuccess, "failed to transfer fees");
    |  }
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(363)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MessageTransport':
    |    uint _amount = _account.feeBalance;
    |    _account.feeBalance = 0;
  > |    msg.sender.transfer(_amount);
    |  }
    |
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(351)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MessageTransport':
    |  function withdrawRetainedFees() public {
    |    uint _amount = retainedFeesBalance / 2;
  > |    address(0).transfer(_amount);
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(360)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MessageTransport':
    |    _amount = safeSub(retainedFeesBalance, _amount);
    |    retainedFeesBalance = 0;
  > |    (bool paySuccess, ) = tokenAddr.call.value(_amount)("");
    |    require(paySuccess, "failed to transfer fees");
    |  }
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(363)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |
    |
  > |contract MessageTransport is SafeMath, Ownable {
    |
    |  // -------------------------------------------------------------------------
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(133)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |    _account.publicKey = _publicKey;
    |    _account.encryptedPrivateKey = _encryptedPrivateKey;
  > |    _account.isValid = true;
    |    _modifyAccount(_account, _messageFee, _spamFee);
    |  }
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |      else
    |        require(msg.value >= _recvAccount.messageFee, "fee is insufficient");
  > |      messageCount = safeAdd(messageCount, 1);
    |      _recvAccount.recvIds[_recvAccount.recvMessageCount] = messageCount;
    |      _sendAccount.sentIds[_sendAccount.sentMessageCount] = messageCount;
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(323)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |        require(msg.value >= _recvAccount.messageFee, "fee is insufficient");
    |      messageCount = safeAdd(messageCount, 1);
  > |      _recvAccount.recvIds[_recvAccount.recvMessageCount] = messageCount;
    |      _sendAccount.sentIds[_sendAccount.sentMessageCount] = messageCount;
    |      _recvAccount.recvMessageCount = safeAdd(_recvAccount.recvMessageCount, 1);
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |      _recvAccount.recvIds[_recvAccount.recvMessageCount] = messageCount;
    |      _sendAccount.sentIds[_sendAccount.sentMessageCount] = messageCount;
  > |      _recvAccount.recvMessageCount = safeAdd(_recvAccount.recvMessageCount, 1);
    |      _sendAccount.sentMessageCount = safeAdd(_sendAccount.sentMessageCount, 1);
    |      emit MessageEvent(messageCount, messageCount, messageCount, _fromAddr, _toAddr, _via, _sendAccount.sentMessageCount, _recvAccount.recvMessageCount, attachmentIdx, _ref, _message);
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |    }
    |    uint _retainAmount = safeMul(msg.value, 30) / 100;
  > |    retainedFeesBalance = safeAdd(retainedFeesBalance, _retainAmount);
    |    _recvAccount.feeBalance = safeAdd(_recvAccount.feeBalance, safeSub(msg.value, _retainAmount));
    |    _recvAccount.peerRecvMessageCount[_fromAddr] = safeAdd(_recvAccount.peerRecvMessageCount[_fromAddr], 1);
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(338)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |    address(0).transfer(_amount);
    |    _amount = safeSub(retainedFeesBalance, _amount);
  > |    retainedFeesBalance = 0;
    |    (bool paySuccess, ) = tokenAddr.call.value(_amount)("");
    |    require(paySuccess, "failed to transfer fees");
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(362)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(110)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'MessageTransport':
    |  }
    |  function setTrust(address _trustedAddr, bool _trust) public onlyOwner {
  > |    trusted[_trustedAddr] = _trust;
    |  }
    |
  at /unique_chucks/10/0x6a973275f5bccfe0c7309c9934d7f945c3138dfd.sol(194)