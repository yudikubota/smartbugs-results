Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:ERC20Interface
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:OraclizeI
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:raffleContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:solcChecker
Processing contract: /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'raffleContract':
    |        }
    |        bytes memory args = ba2cbor(_argN);
  > |        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(678)

[33mWarning[0m for LockedEther in contract 'raffleContract':
    |}
    |
  > |contract raffleContract is usingOraclize {
    |
    |  event LogConstructorInitiated(string nextStep);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1351)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(305)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(306)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |
    |    function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
  > |        return oraclize.getPrice(_datasource);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(378)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |
    |    function oraclize_setProof(byte _proofP) oraclizeAPI internal {
  > |        return oraclize.setProofType(_proofP);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(842)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |
    |    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
  > |        return oraclize.randomDS_getSessionPubKeyHash();
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(861)

[31mViolation[0m for RepeatedCall in contract 'raffleContract':
    |          raffleVersion[currentRaffleVersion].end = now + defaultTime;
    |          raffleVersion[currentRaffleVersion].price = defaultPrice;
  > |          btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
    |          raffleVersion[currentRaffleVersion].already[msg.sender] = true;
    |          raffleVersion[currentRaffleVersion].players++;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1430)

[33mWarning[0m for RepeatedCall in contract 'raffleContract':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(305)

[33mWarning[0m for RepeatedCall in contract 'raffleContract':
    |
    |    function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource, _gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |            return 0; // Unexpectedly high price
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(673)

[33mWarning[0m for RepeatedCall in contract 'raffleContract':
    |        }
    |        bytes memory args = ba2cbor(_argN);
  > |        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(678)

[33mWarning[0m for RepeatedCall in contract 'raffleContract':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
  > |        return oraclize.cbAddress();
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(847)

[33mWarning[0m for RepeatedCall in contract 'raffleContract':
    |    raffleVersion[raffleToSolve].winner = winner;
    |
  > |    btcnnTok.transfer(winner, amount);
    |
    |    emit LogResult(randomNumber, winner, amount);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1408)

[33mWarning[0m for TODAmount in contract 'raffleContract':
    |        }
    |        bytes memory args = ba2cbor(_argN);
  > |        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(678)

[33mWarning[0m for TODReceiver in contract 'raffleContract':
    |        }
    |        bytes memory args = ba2cbor(_argN);
  > |        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(678)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'raffleContract':
    |        }
    |        bytes memory args = ba2cbor(_argN);
  > |        return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(678)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(306)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(339)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(344)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(354)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(358)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(362)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |    function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {
  > |        oraclize_randomDS_args[_queryId] = _commitment;
    |    }
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1124)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |}
    |
  > |contract raffleContract is usingOraclize {
    |
    |  event LogConstructorInitiated(string nextStep);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1351)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |    address winner = raffleVersion[raffleToSolve].player[randomNumber];
    |
  > |    raffleVersion[raffleToSolve].winner = winner;
    |
    |    btcnnTok.transfer(winner, amount);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1406)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |    emit LogResult(randomNumber, winner, amount);
    |
  > |    raffleToSolve++;
    |
    |  }
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1412)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |          emit LogNewOraclizeQuery("Oraclize query was NOT sent, please add some ETH to cover for the query fee");
    |        } else {
  > |          currentRaffleVersion++; //Next Raffle Verison
    |
    |          raffleVersion[currentRaffleVersion].start = now;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1425)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |          currentRaffleVersion++; //Next Raffle Verison
    |
  > |          raffleVersion[currentRaffleVersion].start = now;
    |          raffleVersion[currentRaffleVersion].end = now + defaultTime;
    |          raffleVersion[currentRaffleVersion].price = defaultPrice;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1427)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |          raffleVersion[currentRaffleVersion].start = now;
  > |          raffleVersion[currentRaffleVersion].end = now + defaultTime;
    |          raffleVersion[currentRaffleVersion].price = defaultPrice;
    |          btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1428)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |          raffleVersion[currentRaffleVersion].start = now;
    |          raffleVersion[currentRaffleVersion].end = now + defaultTime;
  > |          raffleVersion[currentRaffleVersion].price = defaultPrice;
    |          btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
    |          raffleVersion[currentRaffleVersion].already[msg.sender] = true;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1429)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |          btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
    |          raffleVersion[currentRaffleVersion].already[msg.sender] = true;
  > |          raffleVersion[currentRaffleVersion].players++;
    |          raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1432)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |          raffleVersion[currentRaffleVersion].already[msg.sender] = true;
    |          raffleVersion[currentRaffleVersion].players++;
  > |          raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
    |          oraclize_setProof(proofType_Ledger); // sets the Ledger authenticity proof
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1433)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |
  > |        raffleVersion[currentRaffleVersion].start = now;
    |        raffleVersion[currentRaffleVersion].end = now + defaultTime;
    |        raffleVersion[currentRaffleVersion].price = defaultPrice;
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1446)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |        raffleVersion[currentRaffleVersion].start = now;
  > |        raffleVersion[currentRaffleVersion].end = now + defaultTime;
    |        raffleVersion[currentRaffleVersion].price = defaultPrice;
    |        btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1447)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        raffleVersion[currentRaffleVersion].start = now;
    |        raffleVersion[currentRaffleVersion].end = now + defaultTime;
  > |        raffleVersion[currentRaffleVersion].price = defaultPrice;
    |        btcnnTok.transferFrom(msg.sender, address(this), raffleVersion[currentRaffleVersion].price);
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1448)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |        raffleVersion[currentRaffleVersion].already[msg.sender] = true;
  > |        raffleVersion[currentRaffleVersion].players++;
    |        raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1452)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |        raffleVersion[currentRaffleVersion].already[msg.sender] = true;
    |        raffleVersion[currentRaffleVersion].players++;
  > |        raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
    |        emit LogNewEntry(msg.sender, raffleVersion[currentRaffleVersion].players, currentRaffleVersion);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1453)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |
    |      raffleVersion[currentRaffleVersion].already[msg.sender] = true;
  > |      raffleVersion[currentRaffleVersion].players++;
    |      raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1467)

[33mWarning[0m for UnrestrictedWrite in contract 'raffleContract':
    |      raffleVersion[currentRaffleVersion].already[msg.sender] = true;
    |      raffleVersion[currentRaffleVersion].players++;
  > |      raffleVersion[currentRaffleVersion].player[raffleVersion[currentRaffleVersion].players] = msg.sender;
    |
    |      emit LogNewEntry(msg.sender, raffleVersion[currentRaffleVersion].players, currentRaffleVersion);
  at /unique_chucks/26/0xcc504b2f1f9d49bd6a2435584d88bf50973db7d9.sol(1468)