Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:Authorizable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:Claimable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:Errors
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:ITradeHistory
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:Killable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:MathUint
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:NoDefaultFunc
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol:TradeHistory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'Authorizable':
    |/// @dev The Authorizable contract allows a contract to be used by other contracts
    |///      by authorizing it by the contract owner.
  > |contract Authorizable is Claimable, Errors  {
    |
    |    event AddressAuthorized(
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(328)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |/*
    |
  > |  Copyright 2017 Loopring Project Ltd (Loopring Foundation).
    |
    |  Licensed under the Apache License, Version 2.0 (the "License");
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |    {
    |        require(newOwner != address(0x0) && newOwner != owner, "INVALID_ADDRESS");
  > |        pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |    {
    |        emit OwnershipTransferred(owner, pendingOwner);
  > |        owner = pendingOwner;
    |        pendingOwner = address(0x0);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        emit OwnershipTransferred(owner, pendingOwner);
    |        owner = pendingOwner;
  > |        pendingOwner = address(0x0);
    |    }
    |}
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |/// @dev The Authorizable contract allows a contract to be used by other contracts
    |///      by authorizing it by the contract owner.
  > |contract Authorizable is Claimable, Errors  {
    |
    |    event AddressAuthorized(
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(328)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(isContract(addr), INVALID_ADDRESS);
    |
  > |        authorizedAddresses.push(addr);
    |        positionMap[addr] = authorizedAddresses.length;
    |        emit AddressAuthorized(addr);
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(364)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |
    |        authorizedAddresses.push(addr);
  > |        positionMap[addr] = authorizedAddresses.length;
    |        emit AddressAuthorized(addr);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(365)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        if (pos != size) {
    |            address lastOne = authorizedAddresses[size - 1];
  > |            authorizedAddresses[pos - 1] = lastOne;
    |            positionMap[lastOne] = pos;
    |        }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |            address lastOne = authorizedAddresses[size - 1];
    |            authorizedAddresses[pos - 1] = lastOne;
  > |            positionMap[lastOne] = pos;
    |        }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(384)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |
    |        authorizedAddresses.length -= 1;
  > |        delete positionMap[addr];
    |
    |        emit AddressDeauthorized(addr);
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(388)

[33mWarning[0m for UnrestrictedWrite in contract 'Claimable':
    |    {
    |        require(newOwner != address(0x0) && newOwner != owner, "INVALID_ADDRESS");
  > |        pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'Claimable':
    |    {
    |        emit OwnershipTransferred(owner, pendingOwner);
  > |        owner = pendingOwner;
    |        pendingOwner = address(0x0);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Claimable':
    |        emit OwnershipTransferred(owner, pendingOwner);
    |        owner = pendingOwner;
  > |        pendingOwner = address(0x0);
    |    }
    |}
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |    {
    |        require(newOwner != address(0x0) && newOwner != owner, "INVALID_ADDRESS");
  > |        pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |    {
    |        emit OwnershipTransferred(owner, pendingOwner);
  > |        owner = pendingOwner;
    |        pendingOwner = address(0x0);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |        emit OwnershipTransferred(owner, pendingOwner);
    |        owner = pendingOwner;
  > |        pendingOwner = address(0x0);
    |    }
    |}
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |        notSuspended
    |    {
  > |        suspended = true;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(538)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |        isSuspended
    |    {
  > |        suspended = false;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'Killable':
    |        isSuspended
    |    {
  > |        owner = address(0x0);
    |        emit OwnershipTransferred(owner, address(0x0));
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(555)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0x0), "ZERO_ADDRESS");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(120)

[31mViolation[0m for LockedEther in contract 'TradeHistory':
    |/// @title An Implementation of ITradeHistory.
    |/// @author Brecht Devos - <brecht@loopring.org>.
  > |contract TradeHistory is ITradeHistory, Authorizable, Killable, NoDefaultFunc {
    |    using MathUint for uint;
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(596)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |/// @title An Implementation of ITradeHistory.
    |/// @author Brecht Devos - <brecht@loopring.org>.
  > |contract TradeHistory is ITradeHistory, Authorizable, Killable, NoDefaultFunc {
    |    using MathUint for uint;
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(596)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |                filledAmount := calldataload(add(p, 32))
    |            }
  > |            filled[hash] = filledAmount;
    |        }
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(618)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        notSuspended
    |    {
  > |        cancelled[broker][orderHash] = true;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(630)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        require(cutoffs[broker] < cutoff, INVALID_VALUE);
  > |        cutoffs[broker] = cutoff;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(642)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        require(tradingPairCutoffs[broker][tokenPair] < cutoff, INVALID_VALUE);
  > |        tradingPairCutoffs[broker][tokenPair] = cutoff;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(655)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        require(cutoffsOwner[broker][owner] < cutoff, INVALID_VALUE);
  > |        cutoffsOwner[broker][owner] = cutoff;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(668)

[31mViolation[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        require(tradingPairCutoffsOwner[broker][owner][tokenPair] < cutoff, INVALID_VALUE);
  > |        tradingPairCutoffsOwner[broker][owner][tokenPair] = cutoff;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(682)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |/*
    |
  > |  Copyright 2017 Loopring Project Ltd (Loopring Foundation).
    |
    |  Licensed under the Apache License, Version 2.0 (the "License");
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        require(newOwner != address(0x0) && newOwner != owner, "INVALID_ADDRESS");
  > |        pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |    {
    |        emit OwnershipTransferred(owner, pendingOwner);
  > |        owner = pendingOwner;
    |        pendingOwner = address(0x0);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        emit OwnershipTransferred(owner, pendingOwner);
    |        owner = pendingOwner;
  > |        pendingOwner = address(0x0);
    |    }
    |}
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        require(isContract(addr), INVALID_ADDRESS);
    |
  > |        authorizedAddresses.push(addr);
    |        positionMap[addr] = authorizedAddresses.length;
    |        emit AddressAuthorized(addr);
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(364)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |
    |        authorizedAddresses.push(addr);
  > |        positionMap[addr] = authorizedAddresses.length;
    |        emit AddressAuthorized(addr);
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(365)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        if (pos != size) {
    |            address lastOne = authorizedAddresses[size - 1];
  > |            authorizedAddresses[pos - 1] = lastOne;
    |            positionMap[lastOne] = pos;
    |        }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |            address lastOne = authorizedAddresses[size - 1];
    |            authorizedAddresses[pos - 1] = lastOne;
  > |            positionMap[lastOne] = pos;
    |        }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(384)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |
    |        authorizedAddresses.length -= 1;
  > |        delete positionMap[addr];
    |
    |        emit AddressDeauthorized(addr);
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(388)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        notSuspended
    |    {
  > |        suspended = true;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(538)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        isSuspended
    |    {
  > |        suspended = false;
    |    }
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |        isSuspended
    |    {
  > |        owner = address(0x0);
    |        emit OwnershipTransferred(owner, address(0x0));
    |    }
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(555)

[33mWarning[0m for UnrestrictedWrite in contract 'TradeHistory':
    |/// @title An Implementation of ITradeHistory.
    |/// @author Brecht Devos - <brecht@loopring.org>.
  > |contract TradeHistory is ITradeHistory, Authorizable, Killable, NoDefaultFunc {
    |    using MathUint for uint;
    |
  at /unique_chucks/23/0xbf5a37670b3de1e606ec68be3558c536b2008669.sol(596)