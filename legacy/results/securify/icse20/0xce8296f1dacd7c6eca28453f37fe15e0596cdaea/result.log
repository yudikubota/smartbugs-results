Processing contract: /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol:CrdSet
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol:Crowdsourcing
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol:Set
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for MissingInputValidation in contract 'CrdSet':
    |    event newContract(Crowdsourcing indexed c);
    |
  > |    function createCC(uint total, string memory content) public payable returns (Crowdsourcing){
    |        require(msg.value % total == 0, "Amount of money need to be dividable by the total number of answers");
    |        Crowdsourcing a = new Crowdsourcing(msg.sender, total, content, msg.value);
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(179)

[33mWarning[0m for TODAmount in contract 'CrdSet':
    |        Crowdsourcing a = new Crowdsourcing(msg.sender, total, content, msg.value);
    |        list.push(a);
  > |        address(a).transfer(msg.value);
    |        emit newContract(a);
    |        return a;
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(183)

[33mWarning[0m for TODReceiver in contract 'CrdSet':
    |        Crowdsourcing a = new Crowdsourcing(msg.sender, total, content, msg.value);
    |        list.push(a);
  > |        address(a).transfer(msg.value);
    |        emit newContract(a);
    |        return a;
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(183)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CrdSet':
    |        Crowdsourcing a = new Crowdsourcing(msg.sender, total, content, msg.value);
    |        list.push(a);
  > |        address(a).transfer(msg.value);
    |        emit newContract(a);
    |        return a;
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(183)

[31mViolation[0m for UnrestrictedWrite in contract 'CrdSet':
    |// File: contracts/Set.sol
    |
  > |pragma solidity ^0.5.0;
    |
    |library Set {
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'CrdSet':
    |        require(msg.value % total == 0, "Amount of money need to be dividable by the total number of answers");
    |        Crowdsourcing a = new Crowdsourcing(msg.sender, total, content, msg.value);
  > |        list.push(a);
    |        address(a).transfer(msg.value);
    |        emit newContract(a);
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(182)

[31mViolation[0m for TODAmount in contract 'Crowdsourcing':
    |        paid[target] = true;
    |        _current ++;
  > |        target.transfer(_amount / _total);
    |    }
    |    
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(123)

[31mViolation[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |// File: contracts/Set.sol
    |
  > |pragma solidity ^0.5.0;
    |
    |library Set {
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |    function addMoney() public payable {
    |        require((msg.value + _amount) % _total == 0);
  > |        _amount += msg.value;
    |    }
    |    
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(105)

[31mViolation[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |    function answer(string calldata ans) external {
    |        answers[msg.sender] = ans;
  > |        workersArr.push(msg.sender);
    |        if (Set.insert(workers, msg.sender))
    |        {
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |
    |
  > |contract Crowdsourcing {
    |    address public _owner;
    |    string task;
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |        if (Set.insert(workers, msg.sender))
    |        {
  > |            workerCount++;
    |        }
    |        emit toVerification(msg.sender);
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(140)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |
    |
  > |contract Crowdsourcing {
    |    address public _owner;
    |    string task;
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |        require(Set.contains(workers, target));
    |        require(_current  < _total);
  > |        paid[target] = true;
    |        _current ++;
    |        target.transfer(_amount / _total);
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsourcing':
    |        require(_current  < _total);
    |        paid[target] = true;
  > |        _current ++;
    |        target.transfer(_amount / _total);
    |    }
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(122)

[31mViolation[0m for LockedEther in contract 'Set':
    |pragma solidity ^0.5.0;
    |
  > |library Set {
    |    // We define a new struct datatype that will be used to
    |    // hold its data in the calling contract.
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(5)

[31mViolation[0m for MissingInputValidation in contract 'Set':
    |    // to call the first parameter `self`, if the function can
    |    // be seen as a method of that object.
  > |    function insert(Data storage self, address value)
    |        public
    |        returns (bool)
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(18)

[31mViolation[0m for MissingInputValidation in contract 'Set':
    |    }
    |
  > |    function remove(Data storage self, address value)
    |        public
    |        returns (bool)
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(28)

[31mViolation[0m for MissingInputValidation in contract 'Set':
    |    }
    |
  > |    function contains(Data storage self, address value)
    |        public
    |        view
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(38)

[31mViolation[0m for UnrestrictedWrite in contract 'Set':
    |        if (self.flags[value])
    |            return false; // already there
  > |        self.flags[value] = true;
    |        return true;
    |    }
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(24)

[31mViolation[0m for UnrestrictedWrite in contract 'Set':
    |        if (!self.flags[value])
    |            return false; // not there
  > |        self.flags[value] = false;
    |        return true;
    |    }
  at /unique_chucks/41/0xce8296f1dacd7c6eca28453f37fe15e0596cdaea.sol(34)