Processing contract: /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol:AlluvaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol:ERC20Interface
Processing contract: /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'AlluvaToken':
    |// @title Alluva ERC20 Token
    |// @notice Inherits default interface, ownership and safe maths.
  > |contract AlluvaToken is ERC20Interface, Owned, SafeMath {
    |    address public owner = msg.sender;
    |    string public symbol;
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(84)

[31mViolation[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] = safeSub(balances[msg.sender], _value);
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |
    |        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
  > |        balances[_from] = safeSub(balances[_from], _value);
    |        balances[_to] = safeAdd(balances[_to], _value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(135)

[31mViolation[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);
    |        balances[_from] = safeSub(balances[_from], _value);
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(136)

[33mWarning[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |    // @dev can only be executed by contract owner
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |        emit OwnershipTransferred(owner, newOwner);
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'AlluvaToken':
    |        require(msg.sender == newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |        emit OwnershipTransferred(owner, newOwner);
    |    }
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(77)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    // @param _newOwner The address of the new owner
    |    // @dev can only be executed by contract owner
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    // @dev can only be executed by contract owner
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |        emit OwnershipTransferred(owner, newOwner);
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |        emit OwnershipTransferred(owner, newOwner);
    |    }
  at /unique_chucks/5/0x744c9c36d1cc3268a4b9b2e28c60b1752c85e97d.sol(77)