Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:Configurable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:CrowdsaleToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:ERC20
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:ERC20Basic
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:GATS
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(132)

[33mWarning[0m for DAOConstantGas in contract 'CrowdsaleToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(297)

[31mViolation[0m for TODAmount in contract 'CrowdsaleToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance); 
    |    }
    |
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(326)

[33mWarning[0m for TODAmount in contract 'CrowdsaleToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(297)

[33mWarning[0m for TODAmount in contract 'CrowdsaleToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(304)

[31mViolation[0m for TODReceiver in contract 'CrowdsaleToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(304)

[31mViolation[0m for TODReceiver in contract 'CrowdsaleToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance); 
    |    }
    |
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |    function startSto() public onlyOwner {
    |        require(currentStage != Stages.stoEnd);
  > |        currentStage = Stages.stoStart;
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(313)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |     **/
    |    function endSto() internal {
  > |        currentStage = Stages.stoEnd;
    |        // Transfer any remaining tokens
    |        if(remainingTokens > 0)
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(321)

[33mWarning[0m for DAOConstantGas in contract 'GATS':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(297)

[31mViolation[0m for TODAmount in contract 'GATS':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance); 
    |    }
    |
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(326)

[33mWarning[0m for TODAmount in contract 'GATS':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(297)

[33mWarning[0m for TODAmount in contract 'GATS':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(304)

[31mViolation[0m for TODReceiver in contract 'GATS':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(304)

[31mViolation[0m for TODReceiver in contract 'GATS':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance); 
    |    }
    |
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'GATS':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'GATS':
    |    function startSto() public onlyOwner {
    |        require(currentStage != Stages.stoEnd);
  > |        currentStage = Stages.stoStart;
    |    }
    |    
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(313)

[33mWarning[0m for UnrestrictedWrite in contract 'GATS':
    |     **/
    |    function endSto() internal {
  > |        currentStage = Stages.stoEnd;
    |        // Transfer any remaining tokens
    |        if(remainingTokens > 0)
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(321)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |    
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        
  at /unique_chucks/25/0x8b3436bacaa2f8c98716f69f3b62b6c2994a3e78.sol(161)