Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:AdminUpgradeable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:BICALedger
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:BICALogic
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:BICALogicUpgradeable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:BICAProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:ERC20Interface
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:RequestUid
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'AdminUpgradeable':
    |     * MEMBER: a list of requests submitted.
    |     */
  > |    mapping (bytes32 => AdminChangeRequest) public adminChangeReqs;
    |    
    |    /**
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(96)

[31mViolation[0m for MissingInputValidation in contract 'AdminUpgradeable':
    |     * @param _uid The uid of request to change admin.
    |     */
  > |    function confirmAdminChange(bytes32 _uid) public adminOperations {
    |        admin = getAdminChangeReq(_uid);
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(142)

[31mViolation[0m for UnrestrictedWrite in contract 'AdminUpgradeable':
    |     */
    |    function generateRequestUid() internal returns (bytes32 uid) {
  > |        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'AdminUpgradeable':
    |        uid = generateRequestUid();
    |
  > |        adminChangeReqs[uid] = AdminChangeRequest({
    |            newAdminAddress: _newAdmin
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminUpgradeable':
    |     */
    |    function confirmAdminChange(bytes32 _uid) public adminOperations {
  > |        admin = getAdminChangeReq(_uid);
    |
    |        delete adminChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminUpgradeable':
    |        admin = getAdminChangeReq(_uid);
    |
  > |        delete adminChangeReqs[_uid];
    |
    |        emit AdminChangeConfirmed(_uid, admin);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(145)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function generateRequestUid() internal returns (bytes32 uid) {
  > |        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALedger':
    |        uid = generateRequestUid();
    |
  > |        adminChangeReqs[uid] = AdminChangeRequest({
    |            newAdminAddress: _newAdmin
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(127)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALedger':
    |        uid = generateRequestUid();
    |
  > |        logicChangeReqs[uid] = LogicChangeRequest({
    |            newLogicAddress: _newLogic
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function confirmAdminChange(bytes32 _uid) public adminOperations {
  > |        admin = getAdminChangeReq(_uid);
    |
    |        delete adminChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |        admin = getAdminChangeReq(_uid);
    |
  > |        delete adminChangeReqs[_uid];
    |
    |        emit AdminChangeConfirmed(_uid, admin);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function confirmLogicChange(bytes32 _uid) public adminOperations {
  > |        bicaLogic = getLogicChangeReq(_uid);
    |
    |        delete logicChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |        bicaLogic = getLogicChangeReq(_uid);
    |
  > |        delete logicChangeReqs[_uid];
    |
    |        emit LogicChangeConfirmed(_uid, address(bicaLogic));
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(248)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |    function freezeByAddress(address _user) public onlyLogic {
    |        require(!frozen[_user], "user already frozen");
  > |        frozen[_user] = true;
    |        emit AddressFrozen(_user);
    |    }
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(665)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |    function unfreezeByAddress(address _user) public onlyLogic {
    |        require(frozen[_user], "address already unfrozen");
  > |        frozen[_user] = false;
    |        emit AddressUnfrozen(_user);
    |    }
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(676)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function setTotalSupply(uint256 _newTotalSupply) public onlyLogic {
  > |        totalSupply = _newTotalSupply;
    |    }
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(688)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function setAllowance(address _owner, address _spender, uint256 _value) public onlyLogic {
  > |        allowed[_owner][_spender] = _value;
    |    }
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(700)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function setBalance(address _owner, uint256 _newBalance) public onlyLogic {
  > |        balances[_owner] = _newBalance;
    |    }
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(711)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALedger':
    |     */
    |    function addBalance(address _owner, uint256 _balanceIncrease) public onlyLogic {
  > |        balances[_owner] = balances[_owner].add(_balanceIncrease);
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(722)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(!senderFrozen, "Sender is frozen");
    |
  > |        bool spenderFrozen = bicaLedger.getFrozenByAddress(_spender);
    |        require(!spenderFrozen, "Spender is frozen");
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(360)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(!bicaLedger.getFrozenByAddress(_requesterAccount), "Requester is frozen");
    |        require(!bicaLedger.getFrozenByAddress(_marginAccount), "Margin account is frozen");
  > |        require(!bicaLedger.getFrozenByAddress(_interestAccount), "Interest account is frozen");
    |        require(!bicaLedger.getFrozenByAddress(_otherFeeAddress), "Other fee account is frozen");
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(448)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(!bicaLedger.getFrozenByAddress(_marginAccount), "Margin account is frozen");
    |        require(!bicaLedger.getFrozenByAddress(_interestAccount), "Interest account is frozen");
  > |        require(!bicaLedger.getFrozenByAddress(_otherFeeAddress), "Other fee account is frozen");
    |
    |        uint256 requestTotalValue = _marginValue.add(_interestValue).add(_otherFeeValue).add(_requestValue);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(449)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        uint256 requestTotalValue = _marginValue.add(_interestValue).add(_otherFeeValue).add(_requestValue);
    |
  > |        uint256 supply = bicaLedger.totalSupply();
    |        uint256 newSupply = supply.add(requestTotalValue);
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(453)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |            bicaLedger.setTotalSupply(newSupply);
    |            bicaLedger.addBalance(_marginAccount, _marginValue);
  > |            bicaLedger.addBalance(_interestAccount, _interestValue);
    |            if ( _otherFeeValue > 0 ){
    |                bicaLedger.addBalance(_otherFeeAddress, _otherFeeValue);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(459)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(_value <= balanceOfSender);
    |
  > |        bicaLedger.setBalance(msg.sender, balanceOfSender.sub(_value));
    |        bicaLedger.setTotalSupply(bicaLedger.totalSupply().sub(_value));
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(490)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |
    |        bicaLedger.setBalance(msg.sender, balanceOfSender.sub(_value));
  > |        bicaLedger.setTotalSupply(bicaLedger.totalSupply().sub(_value));
    |
    |        bicaProxy.emitTransfer(msg.sender, address(0), _value);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(491)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);
    |        require(!senderFrozen, "Sender is frozen");
  > |        bool fromFrozen = bicaLedger.getFrozenByAddress(_from);
    |        require(!fromFrozen, "`from` is frozen");
    |        bool toFrozen = bicaLedger.getFrozenByAddress(_to);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(531)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        bool fromFrozen = bicaLedger.getFrozenByAddress(_from);
    |        require(!fromFrozen, "`from` is frozen");
  > |        bool toFrozen = bicaLedger.getFrozenByAddress(_to);
    |        require(!toFrozen, "`to` is frozen");
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(533)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(_value <= senderAllowance);
    |
  > |        bicaLedger.setBalance(_from, balanceOfFrom.sub(_value));
    |
    |        bicaLedger.addBalance(_to, _value);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(542)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        bicaLedger.setBalance(_from, balanceOfFrom.sub(_value));
    |
  > |        bicaLedger.addBalance(_to, _value);
    |
    |        bicaLedger.setAllowance(_from, _sender, senderAllowance.sub(_value));
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(544)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        bool senderFrozen = bicaLedger.getFrozenByAddress(_sender);
    |        require(!senderFrozen, "sender is frozen");
  > |        bool toFrozen = bicaLedger.getFrozenByAddress(_to);
    |        require(!toFrozen, "to is frozen");
    |
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(564)

[31mViolation[0m for RepeatedCall in contract 'BICALogic':
    |        require(_value <= balanceOfSender);
    |
  > |        bicaLedger.setBalance(_sender, balanceOfSender.sub(_value));
    |
    |        bicaLedger.addBalance(_to, _value);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(570)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALogic':
    |     */
    |    function generateRequestUid() internal returns (bytes32 uid) {
  > |        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALogic':
    |        uid = generateRequestUid();
    |
  > |        adminChangeReqs[uid] = AdminChangeRequest({
    |            newAdminAddress: _newAdmin
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogic':
    |     */
    |    function confirmAdminChange(bytes32 _uid) public adminOperations {
  > |        admin = getAdminChangeReq(_uid);
    |
    |        delete adminChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogic':
    |        admin = getAdminChangeReq(_uid);
    |
  > |        delete adminChangeReqs[_uid];
    |
    |        emit AdminChangeConfirmed(_uid, admin);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(145)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |     */
    |    function generateRequestUid() internal returns (bytes32 uid) {
  > |        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |        uid = generateRequestUid();
    |
  > |        adminChangeReqs[uid] = AdminChangeRequest({
    |            newAdminAddress: _newAdmin
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(127)

[31mViolation[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |        uid = generateRequestUid();
    |
  > |        logicChangeReqs[uid] = LogicChangeRequest({
    |            newLogicAddress: _newLogic
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |     */
    |    function confirmAdminChange(bytes32 _uid) public adminOperations {
  > |        admin = getAdminChangeReq(_uid);
    |
    |        delete adminChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |        admin = getAdminChangeReq(_uid);
    |
  > |        delete adminChangeReqs[_uid];
    |
    |        emit AdminChangeConfirmed(_uid, admin);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |     */
    |    function confirmLogicChange(bytes32 _uid) public adminOperations {
  > |        bicaLogic = getLogicChangeReq(_uid);
    |
    |        delete logicChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'BICALogicUpgradeable':
    |        bicaLogic = getLogicChangeReq(_uid);
    |
  > |        delete logicChangeReqs[_uid];
    |
    |        emit LogicChangeConfirmed(_uid, address(bicaLogic));
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(248)

[31mViolation[0m for LockedEther in contract 'BICAProxy':
    | * It includes no logic and data.
    | */
  > |contract BICAProxy is ERC20Interface, BICALogicUpgradeable {
    |
    |    /**
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(749)

[31mViolation[0m for UnrestrictedWrite in contract 'BICAProxy':
    |     */
    |    function generateRequestUid() internal returns (bytes32 uid) {
  > |        return keccak256(abi.encodePacked(blockhash(block.number - uint256(1)), address(this), ++requestCount));
    |    }
    |}
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'BICAProxy':
    |        uid = generateRequestUid();
    |
  > |        adminChangeReqs[uid] = AdminChangeRequest({
    |            newAdminAddress: _newAdmin
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(127)

[31mViolation[0m for UnrestrictedWrite in contract 'BICAProxy':
    |        uid = generateRequestUid();
    |
  > |        logicChangeReqs[uid] = LogicChangeRequest({
    |            newLogicAddress: _newLogic
    |            });
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'BICAProxy':
    |     */
    |    function confirmAdminChange(bytes32 _uid) public adminOperations {
  > |        admin = getAdminChangeReq(_uid);
    |
    |        delete adminChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'BICAProxy':
    |        admin = getAdminChangeReq(_uid);
    |
  > |        delete adminChangeReqs[_uid];
    |
    |        emit AdminChangeConfirmed(_uid, admin);
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'BICAProxy':
    |     */
    |    function confirmLogicChange(bytes32 _uid) public adminOperations {
  > |        bicaLogic = getLogicChangeReq(_uid);
    |
    |        delete logicChangeReqs[_uid];
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'BICAProxy':
    |        bicaLogic = getLogicChangeReq(_uid);
    |
  > |        delete logicChangeReqs[_uid];
    |
    |        emit LogicChangeConfirmed(_uid, address(bicaLogic));
  at /unique_chucks/23/0x7a2b4708e18f3d11393b6de37cf1fe1ec7b4fd62.sol(248)