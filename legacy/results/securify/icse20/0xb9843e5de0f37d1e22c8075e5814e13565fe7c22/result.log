Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:ApproveAndCallFallBack
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:IERC20
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:LBNToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:MultiOwnable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:Pausable
Processing contract: /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |
    |    function pause() public whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(171)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |
    |    function unpause() public whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(176)

[31mViolation[0m for LockedEther in contract 'LBNToken':
    | * @author https://grox.solutions
    | */
  > |contract LBNToken is ERC20Pausable, MultiOwnable {
    |
    |    // name of the token
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |
    |    function pause() public whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |
    |    function unpause() public whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    | * @author https://grox.solutions
    | */
  > |contract LBNToken is ERC20Pausable, MultiOwnable {
    |
    |    // name of the token
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |        // if that is the new proposal add a number to count to prevent the error of repeating the same proposal
    |        if (props.votes == 0) {
  > |            props.count++;
    |        }
    |
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(299)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |        // if msg.sender hasn't voted yet, do this
    |        if (!props.voted[props.count][msg.sender]) {
  > |            props.votes++;
    |            props.voted[props.count][msg.sender] = true;
    |            emit LogProposal(method, param1, param2, param3, param4, msg.sender, props.votes, consensusValue);
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |        // if an amount of votes is equal or more than consensusValue renew the proposal and return `true` to process the action
    |        if (props.votes >= consensusValue) {
  > |            props.votes = 0;
    |            emit LogAction(method, param1, param2, param3, param4);
    |            return true;
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(311)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |
    |        if (_vote(ownerProp[previousOwner][newOwner], "changeOwner", previousOwner, newOwner, 0, "")) {
  > |            _owner[previousOwner] = false;
    |            _owner[newOwner] = true;
    |        }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(333)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |        if (_vote(ownerProp[previousOwner][newOwner], "changeOwner", previousOwner, newOwner, 0, "")) {
    |            _owner[previousOwner] = false;
  > |            _owner[newOwner] = true;
    |        }
    |
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |
    |        if (_vote(consProp[newConsensusValue], "setConsensusValue", address(0), address(0), newConsensusValue, "")) {
  > |            consensusValue = newConsensusValue;
    |        }
    |
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(351)

[33mWarning[0m for UnrestrictedWrite in contract 'LBNToken':
    |
    |        if (_vote(finMintProp, "finalizeMinting", address(0), address(0), 0, "")) {
  > |            mintingIsFinished = true;
    |        }
    |
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(367)

[31mViolation[0m for MissingInputValidation in contract 'MultiOwnable':
    |    }
    |
  > |    function isOwner(address addr) public view returns (bool) {
    |        return _owner[addr];
    |    }
  at /unique_contracts/0xb9843e5de0f37d1e22c8075e5814e13565fe7c22.sol(34)