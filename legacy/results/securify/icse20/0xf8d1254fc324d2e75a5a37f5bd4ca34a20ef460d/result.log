Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:ADVC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:ERC20
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:ERC20Basic
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ADVC':
    |}
    |
  > |contract ADVC is BurnableToken {
    |    
    |  string public constant name = "advertisingcoin";
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |  function transfer(address _to, uint256 _value)public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(75)

[33mWarning[0m for TODAmount in contract 'Crowdsale':
    |
    |  function createTokens() public limitation saleIsOn payable {
  > |    multisig.transfer(msg.value);
    |    uint tokens = rate.mul(msg.value).div(1 ether);
    |    token.transfer(msg.sender, tokens);
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(286)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Crowdsale':
    |
    |  function createTokens() public limitation saleIsOn payable {
  > |    multisig.transfer(msg.value);
    |    uint tokens = rate.mul(msg.value).div(1 ether);
    |    token.transfer(msg.sender, tokens);
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(286)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |  function transferOwnership(address newOwner)public onlyOwner {
    |    require(newOwner != address(0));      
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |  
    |    function setStart(uint newStart) public onlyOwner {
  > |        start = newStart;
    |    }
    |    
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(242)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |  
    |    function setPeriod(uint newPeriod) public onlyOwner {
  > |        period = newPeriod;
    |    }
    |
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |  
    |    function setRate(uint newRate)public onlyOwner {
  > |        rate = newRate * (10**8);
    |    }
    |
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function transferOwnership(address newOwner)public onlyOwner {
    |    require(newOwner != address(0));      
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transfer(address _to, uint256 _value)public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // require (_value <= _allowance);
    |
  > |    balances[_to] = balances[_to].add(_value);
    |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_to] = balances[_to].add(_value);
  > |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/4/0xf8d1254fc324d2e75a5a37f5bd4ca34a20ef460d.sol(115)