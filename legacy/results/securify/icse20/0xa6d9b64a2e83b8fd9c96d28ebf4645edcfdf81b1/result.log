Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:ADGZToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:AntiTheftToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:ERC20
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:Freezable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:FreezableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ADGZToken':
    |}
    |
  > |contract ADGZToken is BurnableToken, AntiTheftToken {
    |
    |    constructor() public {
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(301)

[31mViolation[0m for LockedEther in contract 'AntiTheftToken':
    | *
    | */
  > |contract AntiTheftToken is FreezableToken {
    |
    |    function restoreFunds(address from, address to, uint amount) public onlyOwner {
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(270)

[31mViolation[0m for LockedEther in contract 'BurnableToken':
    |}
    |
  > |contract BurnableToken is StandardToken {
    |
    |    /** How many tokens we burned */
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(284)

[31mViolation[0m for MissingInputValidation in contract 'Freezable':
    |    }
    |
  > |    function freezeAddress(address addr) public onlyOwner {
    |        frozenAddresses[addr] = true;
    |    }
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(229)

[31mViolation[0m for MissingInputValidation in contract 'Freezable':
    |    }
    |
  > |    function unfreezeAddress(address addr) public onlyOwner {
    |        frozenAddresses[addr] = false;
    |    }
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(233)

[33mWarning[0m for UnrestrictedWrite in contract 'Freezable':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'Freezable':
    |
    |    function freezeAddress(address addr) public onlyOwner {
  > |        frozenAddresses[addr] = true;
    |    }
    |
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'Freezable':
    |
    |    function unfreezeAddress(address addr) public onlyOwner {
  > |        frozenAddresses[addr] = false;
    |    }
    |}
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(234)

[31mViolation[0m for LockedEther in contract 'FreezableToken':
    | * @dev StandardToken modified with freezable transfers.
    | **/
  > |contract FreezableToken is StandardToken, Freezable {
    |
    |    function transfer(address _to, uint256 _value) public ifNotFrozen returns (bool) {
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(242)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezableToken':
    |    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {
    |        balances[msg.sender] = safeSub(balances[msg.sender], _value);
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezableToken':
    |        uint _allowance = allowed[_from][msg.sender];
    |
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        balances[_from] = safeSub(balances[_from], _value);
    |        allowed[_from][msg.sender] = safeSub(_allowance, _value);
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezableToken':
    |
    |        balances[_to] = safeAdd(balances[_to], _value);
  > |        balances[_from] = safeSub(balances[_from], _value);
    |        allowed[_from][msg.sender] = safeSub(_allowance, _value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(26)

[31mViolation[0m for LockedEther in contract 'StandardToken':
    | * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
    | */
  > |contract StandardToken is ERC20, SafeMath {
    |
    |    string public name;
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) public returns (bool success) {
    |        balances[msg.sender] = safeSub(balances[msg.sender], _value);
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        uint _allowance = allowed[_from][msg.sender];
    |
  > |        balances[_to] = safeAdd(balances[_to], _value);
    |        balances[_from] = safeSub(balances[_from], _value);
    |        allowed[_from][msg.sender] = safeSub(_allowance, _value);
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_to] = safeAdd(balances[_to], _value);
  > |        balances[_from] = safeSub(balances[_from], _value);
    |        allowed[_from][msg.sender] = safeSub(_allowance, _value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/42/0xa6d9b64a2e83b8fd9c96d28ebf4645edcfdf81b1.sol(150)