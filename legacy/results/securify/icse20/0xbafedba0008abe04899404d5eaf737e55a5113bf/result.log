Processing contract: /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol:PERSONAToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol:StandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |        //Default assumes totalSupply can't be over max (2^256 - 1).
    |        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(43)

[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |        //same as above. Replace this line with the following if you want to protect against wrapping uints.
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(56)

[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(68)

[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(72)

[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(78)

[31mViolation[0m for MissingInputValidation in contract 'PERSONAToken':
    |
    |    /* Approves and then calls the receiving contract */
  > |    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'PERSONAToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(50)

[33mWarning[0m for UnrestrictedWrite in contract 'PERSONAToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'PERSONAToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            Transfer(_from, _to, _value);
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(61)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |        //Default assumes totalSupply can't be over max (2^256 - 1).
    |        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(43)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |        //same as above. Replace this line with the following if you want to protect against wrapping uints.
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(56)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(68)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(72)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(50)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            Transfer(_from, _to, _value);
  at /unique_chucks/17/0xbafedba0008abe04899404d5eaf737e55a5113bf.sol(61)