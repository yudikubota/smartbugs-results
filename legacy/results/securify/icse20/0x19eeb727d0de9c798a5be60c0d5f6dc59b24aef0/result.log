Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:Arbitrage
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:ArbitrageMainnet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:IDutchExchange
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:IERC20
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:ITokenMinimal
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:IUniswapExchange
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:IUniswapFactory
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:Ownable
Processing contract: /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'Arbitrage':
    |        // // Deposit balance to WETH
    |        address weth = dutchXProxy.ethToken();
  > |        ITokenMinimal(weth).deposit.value(balance)();
    |
    |        uint wethBalance = ITokenMinimal(weth).balanceOf(address(this));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(357)

[33mWarning[0m for DAO in contract 'Arbitrage':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
    |        // call return false when something wrong
    |        require(success, "safeApprove must succeed");
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(241)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |
    |        // // Deposit balance to WETH
  > |        address weth = dutchXProxy.ethToken();
    |        ITokenMinimal(weth).deposit.value(balance)();
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(356)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |    /// @param amount The amount of WETH to withdraw and convert.
    |    function _withdrawEther(uint amount) internal {
  > |        address weth = dutchXProxy.ethToken();
    |        dutchXProxy.withdraw(weth, amount);
    |        ITokenMinimal(weth).withdraw(amount);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(396)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |    function _withdrawEther(uint amount) internal {
    |        address weth = dutchXProxy.ethToken();
  > |        dutchXProxy.withdraw(weth, amount);
    |        ITokenMinimal(weth).withdraw(amount);
    |    }
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(397)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |    function _depositToken(address token, uint amount) internal {
    |
  > |        uint allowance = ITokenMinimal(token).allowance(address(this), address(dutchXProxy));
    |        if (allowance < amount) {
    |            SafeERC20.safeApprove(token, address(dutchXProxy), max);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(435)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |    function dutchOpportunity(address arbToken, uint256 amount) external onlyOwner {
    |
  > |        address etherToken = dutchXProxy.ethToken();
    |
    |        // The order of parameters for getAuctionIndex don't matter
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(451)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |
    |        // The order of parameters for getAuctionIndex don't matter
  > |        uint256 dutchAuctionIndex = dutchXProxy.getAuctionIndex(arbToken, etherToken);
    |
    |        // postBuyOrder(sellToken, buyToken, amount)
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(454)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        // which means the buyToken is what the buyer wants to get rid of.
    |        // "The buy token is what the buyer provides, the seller token is what the seller provides."
  > |        dutchXProxy.postBuyOrder(arbToken, etherToken, dutchAuctionIndex, amount);
    |
    |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(460)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        dutchXProxy.postBuyOrder(arbToken, etherToken, dutchAuctionIndex, amount);
    |
  > |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
    |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(462)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |
    |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
  > |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
    |        address uniswapExchange = uniFactory.getExchange(arbToken);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(463)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
  > |        address uniswapExchange = uniFactory.getExchange(arbToken);
    |
    |        uint allowance = ITokenMinimal(arbToken).allowance(address(this), address(uniswapExchange));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(465)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        address uniswapExchange = uniFactory.getExchange(arbToken);
    |
  > |        uint allowance = ITokenMinimal(arbToken).allowance(address(this), address(uniswapExchange));
    |        if (allowance < tokensBought) {
    |            // Approve Uniswap to transfer arbToken on contract's behalf
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(467)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        // minimumReturn is enough to make a profit (excluding gas)
    |        // timeToLive is now because transaction is atomic
  > |        uint256 etherReturned = IUniswapExchange(uniswapExchange).tokenToEthSwapInput(tokensBought, 1, block.timestamp);
    |
    |        // gas costs were excluded because worse case scenario the tx fails and gas costs were spent up to here anyway
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(477)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[31mViolation[0m for RepeatedCall in contract 'Arbitrage':
    |        _depositToken(arbToken, tokensBought);
    |
  > |        address etherToken = dutchXProxy.ethToken();
    |
    |        // The order of parameters for getAuctionIndex don't matter
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(508)

[33mWarning[0m for RepeatedCall in contract 'Arbitrage':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
    |        // call return false when something wrong
    |        require(success, "safeTransfer must succeed");
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(204)

[31mViolation[0m for TODAmount in contract 'Arbitrage':
    |        // // Deposit balance to WETH
    |        address weth = dutchXProxy.ethToken();
  > |        ITokenMinimal(weth).deposit.value(balance)();
    |
    |        uint wethBalance = ITokenMinimal(weth).balanceOf(address(this));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(357)

[31mViolation[0m for TODReceiver in contract 'Arbitrage':
    |    function withdrawEtherThenTransfer(uint amount) external onlyOwner {
    |        _withdrawEther(amount);
  > |        address(uint160(owner())).transfer(amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(377)

[31mViolation[0m for TODReceiver in contract 'Arbitrage':
    |    function transferEther(uint amount) external onlyOwner {
    |        // If amount is zero, deposit the entire contract balance.
  > |        address(uint160(owner())).transfer(amount == 0 ? address(this).balance : amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(384)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Arbitrage':
    |    function withdrawEtherThenTransfer(uint amount) external onlyOwner {
    |        _withdrawEther(amount);
  > |        address(uint160(owner())).transfer(amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(377)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Arbitrage':
    |    function transferEther(uint amount) external onlyOwner {
    |        // If amount is zero, deposit the entire contract balance.
  > |        address(uint160(owner())).transfer(amount == 0 ? address(this).balance : amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(384)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Arbitrage':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'Arbitrage':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'Arbitrage':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(321)

[33mWarning[0m for DAO in contract 'ArbitrageMainnet':
    |        // // Deposit balance to WETH
    |        address weth = dutchXProxy.ethToken();
  > |        ITokenMinimal(weth).deposit.value(balance)();
    |
    |        uint wethBalance = ITokenMinimal(weth).balanceOf(address(this));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(357)

[33mWarning[0m for DAO in contract 'ArbitrageMainnet':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));
    |        // call return false when something wrong
    |        require(success, "safeApprove must succeed");
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(241)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |
    |        // // Deposit balance to WETH
  > |        address weth = dutchXProxy.ethToken();
    |        ITokenMinimal(weth).deposit.value(balance)();
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(356)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |    /// @param amount The amount of WETH to withdraw and convert.
    |    function _withdrawEther(uint amount) internal {
  > |        address weth = dutchXProxy.ethToken();
    |        dutchXProxy.withdraw(weth, amount);
    |        ITokenMinimal(weth).withdraw(amount);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(396)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |    function _withdrawEther(uint amount) internal {
    |        address weth = dutchXProxy.ethToken();
  > |        dutchXProxy.withdraw(weth, amount);
    |        ITokenMinimal(weth).withdraw(amount);
    |    }
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(397)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |    function _depositToken(address token, uint amount) internal {
    |
  > |        uint allowance = ITokenMinimal(token).allowance(address(this), address(dutchXProxy));
    |        if (allowance < amount) {
    |            SafeERC20.safeApprove(token, address(dutchXProxy), max);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(435)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |    function dutchOpportunity(address arbToken, uint256 amount) external onlyOwner {
    |
  > |        address etherToken = dutchXProxy.ethToken();
    |
    |        // The order of parameters for getAuctionIndex don't matter
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(451)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |
    |        // The order of parameters for getAuctionIndex don't matter
  > |        uint256 dutchAuctionIndex = dutchXProxy.getAuctionIndex(arbToken, etherToken);
    |
    |        // postBuyOrder(sellToken, buyToken, amount)
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(454)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        // which means the buyToken is what the buyer wants to get rid of.
    |        // "The buy token is what the buyer provides, the seller token is what the seller provides."
  > |        dutchXProxy.postBuyOrder(arbToken, etherToken, dutchAuctionIndex, amount);
    |
    |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(460)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        dutchXProxy.postBuyOrder(arbToken, etherToken, dutchAuctionIndex, amount);
    |
  > |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
    |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(462)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |
    |        (uint tokensBought, ) = dutchXProxy.claimBuyerFunds(arbToken, etherToken, address(this), dutchAuctionIndex);
  > |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
    |        address uniswapExchange = uniFactory.getExchange(arbToken);
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(463)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        dutchXProxy.withdraw(arbToken, tokensBought);
    |
  > |        address uniswapExchange = uniFactory.getExchange(arbToken);
    |
    |        uint allowance = ITokenMinimal(arbToken).allowance(address(this), address(uniswapExchange));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(465)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        address uniswapExchange = uniFactory.getExchange(arbToken);
    |
  > |        uint allowance = ITokenMinimal(arbToken).allowance(address(this), address(uniswapExchange));
    |        if (allowance < tokensBought) {
    |            // Approve Uniswap to transfer arbToken on contract's behalf
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(467)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        // minimumReturn is enough to make a profit (excluding gas)
    |        // timeToLive is now because transaction is atomic
  > |        uint256 etherReturned = IUniswapExchange(uniswapExchange).tokenToEthSwapInput(tokensBought, 1, block.timestamp);
    |
    |        // gas costs were excluded because worse case scenario the tx fails and gas costs were spent up to here anyway
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(477)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        _depositToken(arbToken, tokensBought);
    |
  > |        address etherToken = dutchXProxy.ethToken();
    |
    |        // The order of parameters for getAuctionIndex don't matter
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(508)

[31mViolation[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        dutchXProxy.postBuyOrder(etherToken, arbToken, dutchAuctionIndex, max);
    |        // solium-disable-next-line no-unused-vars
  > |        (uint etherReturned, ) = dutchXProxy.claimBuyerFunds(etherToken, arbToken, address(this), dutchAuctionIndex);
    |
    |        // gas costs were excluded because worse case scenario the tx fails and gas costs were spent up to here anyway
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(518)

[33mWarning[0m for RepeatedCall in contract 'ArbitrageMainnet':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
    |        // call return false when something wrong
    |        require(success, "safeTransfer must succeed");
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(204)

[31mViolation[0m for TODAmount in contract 'ArbitrageMainnet':
    |        // // Deposit balance to WETH
    |        address weth = dutchXProxy.ethToken();
  > |        ITokenMinimal(weth).deposit.value(balance)();
    |
    |        uint wethBalance = ITokenMinimal(weth).balanceOf(address(this));
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(357)

[31mViolation[0m for TODReceiver in contract 'ArbitrageMainnet':
    |    function withdrawEtherThenTransfer(uint amount) external onlyOwner {
    |        _withdrawEther(amount);
  > |        address(uint160(owner())).transfer(amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(377)

[31mViolation[0m for TODReceiver in contract 'ArbitrageMainnet':
    |    function transferEther(uint amount) external onlyOwner {
    |        // If amount is zero, deposit the entire contract balance.
  > |        address(uint160(owner())).transfer(amount == 0 ? address(this).balance : amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(384)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ArbitrageMainnet':
    |    function withdrawEtherThenTransfer(uint amount) external onlyOwner {
    |        _withdrawEther(amount);
  > |        address(uint160(owner())).transfer(amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(377)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ArbitrageMainnet':
    |    function transferEther(uint amount) external onlyOwner {
    |        // If amount is zero, deposit the entire contract balance.
  > |        address(uint160(owner())).transfer(amount == 0 ? address(this).balance : amount);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(384)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ArbitrageMainnet':
    |        // deadline is now since trade is atomic
    |        // solium-disable-next-line security/no-block-members
  > |        uint256 tokensBought = IUniswapExchange(uniFactory.getExchange(arbToken)).ethToTokenSwapInput.value(amount)(1, block.timestamp);
    |
    |        // tokens need to be approved for the dutchX before they are deposited
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'ArbitrageMainnet':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'ArbitrageMainnet':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0x19eeb727d0de9c798a5be60c0d5f6dc59b24aef0.sol(321)