Processing contract: /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol:Toss
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'Toss':
    |        // Get fees
    |        uint fee = (address(this).balance)/100;
  > |        (0x9A660374103a0787A69847A670Fc3Aa19f82E2Ff).transfer(fee);
    |
    |        // Get toss result
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(39)

[31mViolation[0m for DAOConstantGas in contract 'Toss':
    |        // heads: p1 wins
    |        if(result == 0){
  > |            player1.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(46)

[31mViolation[0m for DAOConstantGas in contract 'Toss':
    |        // tail: p2 wins
    |        else if(result == 1){
  > |            player2.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(52)

[31mViolation[0m for TODAmount in contract 'Toss':
    |        // Get fees
    |        uint fee = (address(this).balance)/100;
  > |        (0x9A660374103a0787A69847A670Fc3Aa19f82E2Ff).transfer(fee);
    |
    |        // Get toss result
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(39)

[31mViolation[0m for TODAmount in contract 'Toss':
    |        // heads: p1 wins
    |        if(result == 0){
  > |            player1.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(46)

[31mViolation[0m for TODAmount in contract 'Toss':
    |        // tail: p2 wins
    |        else if(result == 1){
  > |            player2.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(52)

[31mViolation[0m for TODReceiver in contract 'Toss':
    |        // tail: p2 wins
    |        else if(result == 1){
  > |            player2.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(52)

[33mWarning[0m for TODReceiver in contract 'Toss':
    |        // heads: p1 wins
    |        if(result == 0){
  > |            player1.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(46)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Toss':
    |        // Get fees
    |        uint fee = (address(this).balance)/100;
  > |        (0x9A660374103a0787A69847A670Fc3Aa19f82E2Ff).transfer(fee);
    |
    |        // Get toss result
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(39)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Toss':
    |        // heads: p1 wins
    |        if(result == 0){
  > |            player1.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(46)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Toss':
    |        // tail: p2 wins
    |        else if(result == 1){
  > |            player2.transfer(address(this).balance);
    |            currentState = GameState.bidOver;
    |        }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(52)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |    function acceptBid() public onlyState(GameState.bidMade) payable {
    |        require(msg.value == wager, "Payment should be equal to current wager");
  > |        player2 = msg.sender;
    |        currentState = GameState.bidAccepted;
    |        acceptationBlockNumber = block.number;
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(29)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |        require(msg.value == wager, "Payment should be equal to current wager");
    |        player2 = msg.sender;
  > |        currentState = GameState.bidAccepted;
    |        acceptationBlockNumber = block.number;
    |        emit tossUpdatedEvent();
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(30)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |        player2 = msg.sender;
    |        currentState = GameState.bidAccepted;
  > |        acceptationBlockNumber = block.number;
    |        emit tossUpdatedEvent();
    |    }
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(31)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |
    |        // Get toss result
  > |        result = tossCoin();
    |
    |        // heads: p1 wins
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(42)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |        if(result == 0){
    |            player1.transfer(address(this).balance);
  > |            currentState = GameState.bidOver;
    |        }
    |
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(47)

[31mViolation[0m for UnrestrictedWrite in contract 'Toss':
    |        else if(result == 1){
    |            player2.transfer(address(this).balance);
  > |            currentState = GameState.bidOver;
    |        }
    |        emit tossUpdatedEvent();
  at /unique_chucks/33/0x6b464f6fca149b56c0c91c199ba17626d8bc48be.sol(53)