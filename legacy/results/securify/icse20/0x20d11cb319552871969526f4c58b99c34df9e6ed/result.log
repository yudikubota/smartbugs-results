Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:ERC20
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:ERC20Basic
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:FrankToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    require(_value <= balances[msg.sender]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(218)

[31mViolation[0m for LockedEther in contract 'FrankToken':
    |  }
    |}
  > |contract FrankToken is StandardToken, Pausable {
    |    string public constant name = "Frank Token";
    |    string public constant symbol = "FT";
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(358)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |    require(_value <= balances[msg.sender]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |    require(_value <= balances[_from]);
    |    require(_value <= allowed[_from][msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(265)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'FrankToken':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= balances[msg.sender]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= balances[_from]);
    |    require(_value <= allowed[_from][msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x20d11cb319552871969526f4c58b99c34df9e6ed.sol(265)