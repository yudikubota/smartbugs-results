Processing contract: /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol:DIYSToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol:ERC20Interface
Processing contract: /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'DIYSToken':
    |}
    |
  > |contract DIYSToken is ERC20Interface, Ownable {
    |    using SafeMath for uint;
    |
  at /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol(30)

[31mViolation[0m for UnrestrictedWrite in contract 'DIYSToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol(57)

[31mViolation[0m for UnrestrictedWrite in contract 'DIYSToken':
    |
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol(70)

[31mViolation[0m for UnrestrictedWrite in contract 'DIYSToken':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/41/0xca1746f3e6e9098c9b11290fc7f2887741dbad80.sol(72)