Processing contract: /unique_chucks/35/0xe4967c26898e9d4063a7f469fba1a8089e74cd40.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Token':
    |pragma solidity ^0.5.1;
    |
  > |contract Token{
    |
    |    // ERC20 Token, with the addition of symbol, name and decimals and a
  at /unique_chucks/35/0xe4967c26898e9d4063a7f469fba1a8089e74cd40.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        require( balances[msg.sender] >= tokens && tokens > 0 );
    |        balances[msg.sender] -= tokens;
  > |        balances[to] += tokens;
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/35/0xe4967c26898e9d4063a7f469fba1a8089e74cd40.sol(40)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
    |        require( allowed[from][msg.sender] >= tokens && balances[from] >= tokens && tokens > 0 );
  > |        balances[from] -= tokens;
    |        allowed[from][msg.sender] -= tokens;
    |        balances[to] += tokens;
  at /unique_chucks/35/0xe4967c26898e9d4063a7f469fba1a8089e74cd40.sol(50)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        balances[from] -= tokens;
    |        allowed[from][msg.sender] -= tokens;
  > |        balances[to] += tokens;
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/35/0xe4967c26898e9d4063a7f469fba1a8089e74cd40.sol(52)