Processing contract: /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol:EtherStake
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol:Ownable
Processing contract: /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol:WithdrawalContract
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'EtherStake':
    |        seed[roundId+1] = totalStake.div(10); //10% of pot to seed next round
    |        winnerShare -= seed[roundId+1];
  > |        leadAddress.transfer(winnerShare);
    |        emit CashedOut(leadAddress, winnerShare);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(424)

[31mViolation[0m for TODAmount in contract 'EtherStake':
    |        seed[roundId+1] = totalStake.div(10); //10% of pot to seed next round
    |        winnerShare -= seed[roundId+1];
  > |        leadAddress.transfer(winnerShare);
    |        emit CashedOut(leadAddress, winnerShare);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(424)

[33mWarning[0m for TODAmount in contract 'EtherStake':
    |        uint _availableDivs = _senderDivs.sub(_spentDivs);
    |        require(_availableDivs >= 0);
  > |        msg.sender.transfer(_divs);
    |        emit CashedOut(msg.sender, _divs);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(357)

[33mWarning[0m for TODAmount in contract 'EtherStake':
    |        spentDivs[_withdrawer] += _availableDivs;
    |        require(_availableDivs >= 0);
  > |        _withdrawer.transfer(_availableDivs);
    |        emit CashedOut(_withdrawer, _availableDivs);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(385)

[31mViolation[0m for TODReceiver in contract 'EtherStake':
    |        seed[roundId+1] = totalStake.div(10); //10% of pot to seed next round
    |        winnerShare -= seed[roundId+1];
  > |        leadAddress.transfer(winnerShare);
    |        emit CashedOut(leadAddress, winnerShare);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(424)

[33mWarning[0m for TODReceiver in contract 'EtherStake':
    |        spentDivs[_withdrawer] += _availableDivs;
    |        require(_availableDivs >= 0);
  > |        _withdrawer.transfer(_availableDivs);
    |        emit CashedOut(_withdrawer, _availableDivs);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(385)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherStake':
    |        uint _availableDivs = _senderDivs.sub(_spentDivs);
    |        require(_availableDivs >= 0);
  > |        msg.sender.transfer(_divs);
    |        emit CashedOut(msg.sender, _divs);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(357)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherStake':
    |        spentDivs[_withdrawer] += _availableDivs;
    |        require(_availableDivs >= 0);
  > |        _withdrawer.transfer(_availableDivs);
    |        emit CashedOut(_withdrawer, _availableDivs);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(385)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherStake':
    |        seed[roundId+1] = totalStake.div(10); //10% of pot to seed next round
    |        winnerShare -= seed[roundId+1];
  > |        leadAddress.transfer(winnerShare);
    |        emit CashedOut(leadAddress, winnerShare);
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(424)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |}
    |
  > |contract EtherStake is Ownable {
    | /**
    | * EtherStake
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        stakeBought = stakeBought.div(1000);
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += stakeBought;
  > |        leadAddress = msg.sender;
    |        totalStake += stakeBought;
    |        addTime(stakeBought); // Add time based on amount bought
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(211)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += stakeBought;
    |        leadAddress = msg.sender;
  > |        totalStake += stakeBought;
    |        addTime(stakeBought); // Add time based on amount bought
    |        emit InvestReceipt(msg.sender, stakeBought);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(212)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        stakeBought = stakeBought.div(1000);
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += stakeBought;
  > |        leadAddress = msg.sender;
    |        totalStake += stakeBought;
    |        addTime(stakeBought);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += stakeBought;
    |        leadAddress = msg.sender;
  > |        totalStake += stakeBought;
    |        addTime(stakeBought);
    |        emit InvestReceipt(msg.sender, stakeBought);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        }
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += _divs;
  > |        leadAddress = msg.sender;
    |        totalStake += _divs;
    |        addTime(_divs);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(344)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].playerStakeAtDay[msg.sender] += _divs;
    |        leadAddress = msg.sender;
  > |        totalStake += _divs;
    |        addTime(_divs);
    |        emit InvestReceipt(msg.sender, _divs);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(345)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        uint _spentDivs = spentDivs[_reinvestor];
    |        uint _availableDivs = _senderDivs.sub(_spentDivs);
  > |        spentDivs[_reinvestor] += _senderDivs;
    |        require(_availableDivs >= 10000000000000000, "You need at least 0.01 ETH in dividends.");
    |        if(now > roundEndTime){
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(366)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |            startNewRound();
    |        }
  > |        playerDivsInADay[roundId][day].playerStakeAtDay[_reinvestor] += _availableDivs;
    |        leadAddress = _reinvestor;
    |        totalStake += _availableDivs;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(371)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        }
    |        playerDivsInADay[roundId][day].playerStakeAtDay[_reinvestor] += _availableDivs;
  > |        leadAddress = _reinvestor;
    |        totalStake += _availableDivs;
    |        addTime(_availableDivs);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(372)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].playerStakeAtDay[_reinvestor] += _availableDivs;
    |        leadAddress = _reinvestor;
  > |        totalStake += _availableDivs;
    |        addTime(_availableDivs);
    |        emit InvestReceipt(msg.sender, _availableDivs);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(373)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        uint _spentDivs = spentDivs[_withdrawer];
    |        uint _availableDivs = _senderDivs.sub(_spentDivs);
  > |        spentDivs[_withdrawer] += _availableDivs;
    |        require(_availableDivs >= 0);
    |        _withdrawer.transfer(_availableDivs);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        uint _timeAdd = _stakeBought/1000000000000; //1000000000000 0.01 ETH adds 2.77 hours
    |        if(_timeAdd < timeInADay){
  > |            roundEndTime += _timeAdd;
    |        }else{
    |        roundEndTime += timeInADay; //24 hour cap
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(393)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |            roundEndTime += _timeAdd;
    |        }else{
  > |        roundEndTime += timeInADay; //24 hour cap
    |        }
    |            
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(395)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    
    |    function startNewDay() private {
  > |        playerDivsInADay[roundId][day].totalStakeAtDay = totalStake;
    |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
    |        if(stakeMultiplier > 1000) {
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(404)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    function startNewDay() private {
    |        playerDivsInADay[roundId][day].totalStakeAtDay = totalStake;
  > |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
    |        if(stakeMultiplier > 1000) {
    |            stakeMultiplier -= 1;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(405)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
    |        if(stakeMultiplier > 1000) {
  > |            stakeMultiplier -= 1;
    |        }
    |        startOfNewDay = now + timeInADay;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |            stakeMultiplier -= 1;
    |        }
  > |        startOfNewDay = now + timeInADay;
    |        ++day;
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(409)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        }
    |        startOfNewDay = now + timeInADay;
  > |        ++day;
    |    }
    |
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(410)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |
    |    function startNewRound() private { 
  > |        playerDivsInADay[roundId][day].totalStakeAtDay = totalStake; //commit last changes to ending round
    |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
    |        roundIdToDays[roundId] = day; //save last day of ending round
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(414)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    function startNewRound() private { 
    |        playerDivsInADay[roundId][day].totalStakeAtDay = totalStake; //commit last changes to ending round
  > |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
    |        roundIdToDays[roundId] = day; //save last day of ending round
    |        jackpot();
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(415)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        playerDivsInADay[roundId][day].totalStakeAtDay = totalStake; //commit last changes to ending round
    |        playerDivsInADay[roundId][day].revenueAtDay = totalStake - playerDivsInADay[roundId][day-1].totalStakeAtDay; //div revenue today = pot today - pot yesterday
  > |        roundIdToDays[roundId] = day; //save last day of ending round
    |        jackpot();
    |        resetRound();
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(416)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    function jackpot() private {
    |        uint winnerShare = playerDivsInADay[roundId][day].totalStakeAtDay.div(2) + seed[roundId]; //add last seed to pot
  > |        seed[roundId+1] = totalStake.div(10); //10% of pot to seed next round
    |        winnerShare -= seed[roundId+1];
    |        leadAddress.transfer(winnerShare);
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(422)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    }
    |    function resetRound() private {
  > |        roundId += 1;
    |        roundEndTime = now + timeInAWeek;  //add 1 week time to start next round
    |        startOfNewDay = now; // save day start time, multiplier decreases 0.1%/day
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(428)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    function resetRound() private {
    |        roundId += 1;
  > |        roundEndTime = now + timeInAWeek;  //add 1 week time to start next round
    |        startOfNewDay = now; // save day start time, multiplier decreases 0.1%/day
    |        day = 0;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(429)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        roundId += 1;
    |        roundEndTime = now + timeInAWeek;  //add 1 week time to start next round
  > |        startOfNewDay = now; // save day start time, multiplier decreases 0.1%/day
    |        day = 0;
    |        stakeMultiplier = 1100;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(430)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        roundEndTime = now + timeInAWeek;  //add 1 week time to start next round
    |        startOfNewDay = now; // save day start time, multiplier decreases 0.1%/day
  > |        day = 0;
    |        stakeMultiplier = 1100;
    |        totalStake = 10000000;
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(431)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        startOfNewDay = now; // save day start time, multiplier decreases 0.1%/day
    |        day = 0;
  > |        stakeMultiplier = 1100;
    |        totalStake = 10000000;
    |    }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(432)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        day = 0;
    |        stakeMultiplier = 1100;
  > |        totalStake = 10000000;
    |    }
    |
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(433)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |    }
    |      function setWithdrawalAndReinvestmentContracts(address _withdrawalContractAddress, address _reinvestmentContractAddress) external onlyOwner {
  > |    withdrawalContractAddress = _withdrawalContractAddress;
    |    reinvestmentContractAddress = _reinvestmentContractAddress;
    |  }
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(468)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherStake':
    |      function setWithdrawalAndReinvestmentContracts(address _withdrawalContractAddress, address _reinvestmentContractAddress) external onlyOwner {
    |    withdrawalContractAddress = _withdrawalContractAddress;
  > |    reinvestmentContractAddress = _reinvestmentContractAddress;
    |  }
    |}
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(469)

[31mViolation[0m for TODAmount in contract 'WithdrawalContract':
    |    
    |    function collectFees() external {
  > |        owner.transfer(address(this).balance);
    |    }
    |}
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(491)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'WithdrawalContract':
    |    
    |    function collectFees() external {
  > |        owner.transfer(address(this).balance);
    |    }
    |}
  at /unique_contracts/0x012052cfcdc8044f021b764b71d8855a06543abd.sol(491)