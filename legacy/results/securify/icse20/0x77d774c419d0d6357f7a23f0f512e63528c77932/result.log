Processing contract: /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol:ConditionalPayment
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol:Master
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol:Oracle
Processing contract: /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol:Withdraw
[31mViolation[0m for DAO in contract 'ConditionalPayment':
    |        {
    |            Master m = Master(masterAddress);
  > |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
    |            isSettled = true;
    |        }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(303)

[33mWarning[0m for DAOConstantGas in contract 'ConditionalPayment':
    |        {
    |            stakes[msg.sender] = 0;
  > |            msg.sender.transfer(w.amountCreator(
    |                creatorLong,
    |                stakeMemory,
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(312)

[31mViolation[0m for TODAmount in contract 'ConditionalPayment':
    |        {
    |            stakes[msg.sender] -= maxWithdrawAmount;
  > |            msg.sender.transfer(maxWithdrawAmount);
    |        }
    |    }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(248)

[31mViolation[0m for TODAmount in contract 'ConditionalPayment':
    |        {
    |            Master m = Master(masterAddress);
  > |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
    |            isSettled = true;
    |        }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(303)

[33mWarning[0m for TODAmount in contract 'ConditionalPayment':
    |        uint256 stakeMemory = stakes[msg.sender];
    |        stakes[msg.sender] = 0;
  > |        msg.sender.transfer(stakeMemory);
    |    }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(341)

[33mWarning[0m for TODReceiver in contract 'ConditionalPayment':
    |        {
    |            Master m = Master(masterAddress);
  > |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
    |            isSettled = true;
    |        }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(303)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ConditionalPayment':
    |        {
    |            Master m = Master(masterAddress);
  > |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
    |            isSettled = true;
    |        }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(303)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ConditionalPayment':
    |        uint256 stakeMemory = stakes[msg.sender];
    |        stakes[msg.sender] = 0;
  > |        msg.sender.transfer(stakeMemory);
    |    }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(341)

[31mViolation[0m for UnrestrictedWrite in contract 'ConditionalPayment':
    |        {
    |            Master m = Master(masterAddress);
  > |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
    |            isSettled = true;
    |        }
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(303)

[31mViolation[0m for UnrestrictedWrite in contract 'ConditionalPayment':
    |            Master m = Master(masterAddress);
    |            settlementPrice = m.settle.value(totalStakeCounterparties/200)(dueDate);
  > |            isSettled = true;
    |        }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'ConditionalPayment':
    |        require(countCounterparties == 0);
    |
  > |        strikePrice = newStrikePrice;
    |    }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(227)

[33mWarning[0m for UnrestrictedWrite in contract 'ConditionalPayment':
    |        require(msg.sender != creator);
    |        require(requestedStrikePrice == strikePrice);
  > |        totalStakeCounterparties += msg.value;
    |        require(totalStakeCounterparties <= stakes[creator]);
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(281)

[31mViolation[0m for MissingInputValidation in contract 'Master':
    |    address constant oracleAddress = 0xE8013bD526100Ebf67ace0E0F21a296D8974f0A4;
    |
  > |    mapping (uint => bool) public validDueDate;
    |
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(14)

[31mViolation[0m for MissingInputValidation in contract 'Master':
    |     * @param strikePrice Choose a strike price which will be used on the due date for calculation of the payout. Make sure that the format is correct.
    |     */
  > |    function createConditionalPayment
    |    (
    |        address payable creator,
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(41)

[31mViolation[0m for MissingInputValidation in contract 'Master':
    |
    |    /// @notice This function will be called by every conditional payment contract at settlement and requests the price from the oracle.
  > |    function settle
    |    (
    |        uint256 dueDate
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(67)

[31mViolation[0m for MissingInputValidation in contract 'Master':
    |     */
    |
  > |    function setValidDueDate
    |    (
    |        uint dueDate,
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(84)

[31mViolation[0m for TODAmount in contract 'Master':
    |        onlyByOwner
    |    {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Master':
    |        onlyByOwner
    |    {
  > |        validDueDate[dueDate] = valid;
    |    }
    |
  at /unique_chucks/33/0x77d774c419d0d6357f7a23f0f512e63528c77932.sol(92)