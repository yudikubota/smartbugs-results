Processing contract: /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol:BarToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'BarToken':
    |}
    |
  > |contract BarToken is owned, TokenERC20 {
    |
    |    mapping (address => bool) public frozenAccount;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'BarToken':
    |        require(balanceOf[msg.sender] >= _value);   
    |        balanceOf[msg.sender] -= _value;            
  > |        totalSupply -= _value;                      
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(104)

[31mViolation[0m for UnrestrictedWrite in contract 'BarToken':
    |        require(balanceOf[_from] >= _value);                
    |        require(_value <= allowance[_from][msg.sender]);    
  > |        balanceOf[_from] -= _value;                         
    |        allowance[_from][msg.sender] -= _value;             
    |        totalSupply -= _value;                              
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'BarToken':
    |        balanceOf[_from] -= _value;                         
    |        allowance[_from][msg.sender] -= _value;             
  > |        totalSupply -= _value;                              
    |        emit Burn(_from, _value);
    |        return true;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(114)

[31mViolation[0m for UnrestrictedWrite in contract 'BarToken':
    |        require(!frozenAccount[_to]);                           
    |        balanceOf[_from] -= _value;                             
  > |        balanceOf[_to] += _value;                               
    |        emit Transfer(_from, _to, _value);
    |    }
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'BarToken':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(16)

[33mWarning[0m for UnrestrictedWrite in contract 'BarToken':
    |
    |    function freezeAccount(address target, bool freeze) onlyOwner public {
  > |        frozenAccount[target] = freeze;
    |        emit FrozenFunds(target, freeze);
    |    }
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(144)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
  > |contract TokenERC20 {
    |    
    |    string public name;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(22)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        balanceOf[_from] -= _value;
    |        
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(66)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        require(balanceOf[msg.sender] >= _value);   
    |        balanceOf[msg.sender] -= _value;            
  > |        totalSupply -= _value;                      
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(104)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        require(balanceOf[_from] >= _value);                
    |        require(_value <= allowance[_from][msg.sender]);    
  > |        balanceOf[_from] -= _value;                         
    |        allowance[_from][msg.sender] -= _value;             
    |        totalSupply -= _value;                              
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        balanceOf[_from] -= _value;                         
    |        allowance[_from][msg.sender] -= _value;             
  > |        totalSupply -= _value;                              
    |        emit Burn(_from, _value);
    |        return true;
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(114)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |    }
    |
  > |    function transferOwnership(address newOwner) onlyOwner public {
    |        owner = newOwner;
    |    }
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(15)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0x5e647e8d46f209a60227526ea6d6d26e748a2b13.sol(16)