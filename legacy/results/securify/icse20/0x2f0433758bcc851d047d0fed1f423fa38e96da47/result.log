Processing contract: /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol:DreamCarToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol:ERC721
Processing contract: /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol:ERC721Metadata
Processing contract: /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol:WishListToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'WishListToken':
    |        for (uint256 i = 0; i < dreamCarCoinContracts.length; i++) {
    |            if (_amount > 0 && address(dreamCarCoinContracts[i]) != address(0)) {
  > |                _amount = dreamCarCoinContracts[i].getWLCReward(_amount, msg.sender);
    |            } else {
    |                break;
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(492)

[31mViolation[0m for TODAmount in contract 'WishListToken':
    |        
    |        //transfer ETH to CEO
  > |        CEO.transfer((amount * tokenPrice));
    |        
    |        getDCCRewards(amount);
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(386)

[31mViolation[0m for TODAmount in contract 'WishListToken':
    |        
    |        //returns excessive ETH
  > |        msg.sender.transfer(msg.value - (amount * tokenPrice));
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(391)

[33mWarning[0m for TODReceiver in contract 'WishListToken':
    |        
    |        //transfer ETH to CEO
  > |        CEO.transfer((amount * tokenPrice));
    |        
    |        getDCCRewards(amount);
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(386)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'WishListToken':
    |        
    |        //transfer ETH to CEO
  > |        CEO.transfer((amount * tokenPrice));
    |        
    |        getDCCRewards(amount);
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(386)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'WishListToken':
    |        
    |        //returns excessive ETH
  > |        msg.sender.transfer(msg.value - (amount * tokenPrice));
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(391)

[31mViolation[0m for UnrestrictedWrite in contract 'WishListToken':
    |        for (uint256 i = 0; i < priceAdmins.length; i++) {
    |            if (_existingPriceAdmin == priceAdmins[i]) {
  > |                delete priceAdmins[i];
    |                break;
    |            }
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(318)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |
    |//WLC VERSION 10
  > |
    |/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
    |/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |    function _addTokensToAddress(address _to, uint256 _amount) internal {
    |        for (uint256 i = 0; i < _amount; i++) {
  > |            tokensOwnedBy[_to].push(nextTokenId + i);
    |            tokenOwner[nextTokenId + i] = _to;
    |            ownedTokensIndex[nextTokenId + i] = tokensOwnedBy[_to].length - 1;
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(332)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |        for (uint256 i = 0; i < _amount; i++) {
    |            tokensOwnedBy[_to].push(nextTokenId + i);
  > |            tokenOwner[nextTokenId + i] = _to;
    |            ownedTokensIndex[nextTokenId + i] = tokensOwnedBy[_to].length - 1;
    |        }
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(333)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |            tokensOwnedBy[_to].push(nextTokenId + i);
    |            tokenOwner[nextTokenId + i] = _to;
  > |            ownedTokensIndex[nextTokenId + i] = tokensOwnedBy[_to].length - 1;
    |        }
    |        
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |        }
    |        
  > |        nextTokenId += _amount;
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(337)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |
    |//WLC VERSION 10
  > |
    |/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
    |/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |     */
    |    function addPriceAdmin(address _newPriceAdmin) onlyCEO public {
  > |        priceAdmins.push(_newPriceAdmin);
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(308)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |    function mint(uint256 _amount) onlyCEO public {
    |        require (_amount > 0, 'Amount must be bigger than 0!');
  > |        totalTokenSupply += _amount;
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(434)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |        require (_address != address(0));
    |        if (dreamCarCoinContracts.length > 0 && dreamCarCoinContracts.length - 1 >= _index) {
  > |            dreamCarCoinContracts[_index] = DreamCarToken(_address);
    |        } else {
    |            dreamCarCoinContracts.push(DreamCarToken(_address));
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(448)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |            dreamCarCoinContracts[_index] = DreamCarToken(_address);
    |        } else {
  > |            dreamCarCoinContracts.push(DreamCarToken(_address));
    |        }
    |    }
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |     */
    |    function removeDreamCarCoinAddress(uint256 _index) public onlyCEO {
  > |        delete(dreamCarCoinContracts[_index]);
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(459)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |    function setDreamCarCoinExchanger(address _address) public onlyCEO {
    |        require (_address != address(0));
  > |        dreamCarCoinExchanger = DreamCarToken(_address);
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(469)

[33mWarning[0m for UnrestrictedWrite in contract 'WishListToken':
    |     */
    |    function removeDreamCarCoinExchanger() public onlyCEO {
  > |        dreamCarCoinExchanger = DreamCarToken(address(0));
    |    }
    |    
  at /unique_chucks/11/0x2f0433758bcc851d047d0fed1f423fa38e96da47.sol(477)