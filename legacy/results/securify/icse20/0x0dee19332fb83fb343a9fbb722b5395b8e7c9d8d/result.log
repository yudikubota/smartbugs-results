Processing contract: /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol:HumanStandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol:StandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol:Token
[31mViolation[0m for LockedEther in contract 'HumanStandardToken':
    |pragma solidity ^0.4.15;
    |
  > |contract HumanStandardToken is StandardToken {
    |
    |    /* Public variables of the token */
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(112)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |        //Default assumes totalSupply can't be over max (2^256 - 1).
    |        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(52)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |        //same as above. Replace this line with the following if you want to protect against wrapping uints.
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(65)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(77)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(81)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(87)

[31mViolation[0m for MissingInputValidation in contract 'HumanStandardToken':
    |
    |    /* Approves and then calls the receiving contract */
  > |    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'HumanStandardToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(59)

[33mWarning[0m for UnrestrictedWrite in contract 'HumanStandardToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'HumanStandardToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            Transfer(_from, _to, _value);
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(70)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |        //Default assumes totalSupply can't be over max (2^256 - 1).
    |        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(52)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |        //same as above. Replace this line with the following if you want to protect against wrapping uints.
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(65)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(77)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(81)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(59)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            Transfer(_from, _to, _value);
  at /unique_chucks/31/0x0dee19332fb83fb343a9fbb722b5395b8e7c9d8d.sol(70)