Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:ERC20
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:ERC20Basic
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:EqvcTokens
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:EqvcsCrowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |     balances[msg.sender] = balances[msg.sender].sub(value);
  > |     balances[to] = balances[to].add(tokensToTransfer);
    |
    |    totalSupply = totalSupply.sub(tokensToBurn);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |     balances[to] = balances[to].add(tokensToTransfer);
    |
  > |    totalSupply = totalSupply.sub(tokensToBurn);
    |
    |    emit Transfer(msg.sender, to, tokensToTransfer);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(179)

[31mViolation[0m for LockedEther in contract 'EqvcTokens':
    | */
    |
  > |contract EqvcTokens is StandardToken, Ownable {
    |    string public constant symbol = "EQVC";
    |    string public constant name = "EqvcToken";
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |
    |     balances[msg.sender] = balances[msg.sender].sub(value);
  > |     balances[to] = balances[to].add(tokensToTransfer);
    |
    |    totalSupply = totalSupply.sub(tokensToBurn);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |     balances[to] = balances[to].add(tokensToTransfer);
    |
  > |    totalSupply = totalSupply.sub(tokensToBurn);
    |
    |    emit Transfer(msg.sender, to, tokensToTransfer);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(263)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |     */
    |    function EqvcToken(address admin) public {
  > |        totalSupply = INITIAL_SUPPLY;
    |        
    |        // Mint tokens
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(404)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcTokens':
    |
    |        // Approve allowance for admin account
  > |        adminAddr = admin;
    |        approve(adminAddr, ADMIN_ALLOWANCE);
    |    }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(411)

[31mViolation[0m for RepeatedCall in contract 'EqvcsCrowdsale':
    |        uint256 tokens = contributionInETH.mul(rate);
    |        
  > |        if (!token.transferFrom(token.owner(), participant, tokens)) {
    |            revert();
    |        }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(674)

[31mViolation[0m for RepeatedCall in contract 'EqvcsCrowdsale':
    |     */
    |    function allocateTokens(address to, uint256 tokens) public onlyOwner returns (bool) {
  > |        if (!token.transferFrom(token.owner(), to, tokens)) {
    |            revert();
    |        }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(712)

[31mViolation[0m for TODAmount in contract 'EqvcsCrowdsale':
    |    //  */
    |    function ownerSafeWithdrawal() external onlyOwner {
  > |        beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(571)

[33mWarning[0m for TODAmount in contract 'EqvcsCrowdsale':
    |        // // Transfer funds to beneficiary
    |        // transfer(beneficiary,contributionInETH);
  > |        beneficiary.transfer(contributionInETH.mul(10**18));
    |        emit TokenPurchase(msg.sender, contributionInETH, tokens);          
    |    }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(691)

[31mViolation[0m for TODReceiver in contract 'EqvcsCrowdsale':
    |    //  */
    |    function ownerSafeWithdrawal() external onlyOwner {
  > |        beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(571)

[33mWarning[0m for TODReceiver in contract 'EqvcsCrowdsale':
    |        // // Transfer funds to beneficiary
    |        // transfer(beneficiary,contributionInETH);
  > |        beneficiary.transfer(contributionInETH.mul(10**18));
    |        emit TokenPurchase(msg.sender, contributionInETH, tokens);          
    |    }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(691)

[31mViolation[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        require(tokenAddress != address(0));
    |
  > |        token = EqvcTokens(tokenAddress);
    |        rate = eqvcToEtherRate;
    |        beneficiary = beneficiaryAddr;
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(554)

[31mViolation[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |
    |        token = EqvcTokens(tokenAddress);
  > |        rate = eqvcToEtherRate;
    |        beneficiary = beneficiaryAddr;
    |        stage = Stages.Setup;
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(555)

[31mViolation[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        token = EqvcTokens(tokenAddress);
    |        rate = eqvcToEtherRate;
  > |        beneficiary = beneficiaryAddr;
    |        stage = Stages.Setup;
    |    }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(556)

[31mViolation[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        rate = eqvcToEtherRate;
    |        beneficiary = beneficiaryAddr;
  > |        stage = Stages.Setup;
    |    }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(557)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        require(now >= startTime && now <= endTime && stage == Stages.OfferingStarted);
    |        if(now > capReleaseTimestamp) {
  > |          maxContribution = 2000;
    |        }
    |        uint256 contributionInETH = uint256(msg.value).div(10**18);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(651)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |
    |    function updateRate(uint256 eqvcToEtherRate) public onlyOwner atStage(Stages.Setup) {
  > |        rate = eqvcToEtherRate;
    |    }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(575)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |     */
    |    function startOffering(uint256 durationInSeconds) public onlyOwner atStage(Stages.Setup) {
  > |        stage = Stages.OfferingStarted;
    |        startTime = now;
    |        capReleaseTimestamp = startTime + 1 days;
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(599)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |    function startOffering(uint256 durationInSeconds) public onlyOwner atStage(Stages.Setup) {
    |        stage = Stages.OfferingStarted;
  > |        startTime = now;
    |        capReleaseTimestamp = startTime + 1 days;
    |        extraTime = capReleaseTimestamp + 365 days;
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(600)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        stage = Stages.OfferingStarted;
    |        startTime = now;
  > |        capReleaseTimestamp = startTime + 1 days;
    |        extraTime = capReleaseTimestamp + 365 days;
    |        endTime = extraTime.add(durationInSeconds);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(601)

[33mWarning[0m for UnrestrictedWrite in contract 'EqvcsCrowdsale':
    |        startTime = now;
    |        capReleaseTimestamp = startTime + 1 days;
  > |        extraTime = capReleaseTimestamp + 365 days;
    |        endTime = extraTime.add(durationInSeconds);
    |        emit OfferingOpens(startTime, endTime);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(602)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |     balances[msg.sender] = balances[msg.sender].sub(value);
  > |     balances[to] = balances[to].add(tokensToTransfer);
    |
    |    totalSupply = totalSupply.sub(tokensToBurn);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |     balances[to] = balances[to].add(tokensToTransfer);
    |
  > |    totalSupply = totalSupply.sub(tokensToBurn);
    |
    |    emit Transfer(msg.sender, to, tokensToTransfer);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/12/0xa82873dbb0835dca5c273363eeb006342e696036.sol(263)