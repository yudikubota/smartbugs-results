Processing contract: /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol:ECR20HoneycombToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol:tokenRecipient
[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |    }
    |
  > |    function allowTransferOwnership(bool flag ) public onlyOwner {
    |      ownershipTransferAllowed = flag;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(18)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |
    |    // This creates an array with all balances
  > |    mapping (address => uint256) public balanceOf;
    |    mapping (address => mapping (address => uint256)) public allowance;
    |
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(51)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |    // This creates an array with all balances
    |    mapping (address => uint256) public balanceOf;
  > |    mapping (address => mapping (address => uint256)) public allowance;
    |
    |    // This generates a public event on the blockchain that will notify clients
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(52)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param _value the amount to send
    |     */
  > |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    |        require(_value <= allowance[_from][msg.sender]);     // Check allowance
    |        allowance[_from][msg.sender] -= _value;
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(154)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param _value the max amount they can spend
    |     */
  > |    function approve(address _spender, uint256 _value) public
    |        returns (bool success) {
    |        allowance[msg.sender][_spender] = _value;
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(169)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param _extraData some extra information to send to the approved contract
    |     */
  > |    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {
    |        tokenRecipient spender = tokenRecipient(_spender);
    |        if (approve(_spender, _value)) {
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(184)

[31mViolation[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param amount minimumPayout amount in Wei
    |     */
  > |		function setMinimumPayout(uint256 amount) public onlyOwner {
    |		minimumPayout = amount;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(197)

[33mWarning[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @return eth to receive in wei
    |     **/
  > |    function sell(uint256 amountToken) public returns (uint256 revenue){
    |        revenue = amountToken * tokenFactor / sellPrice;                        // calulate the revenue in Wei
    |        require( revenue >= minimumPayout );									// check whether selling get more ether than the minimum payout
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(115)

[33mWarning[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param _value the amount to send
    |     */
  > |    function transfer(address _to, uint256 _value) public {
    |        if ( _to  == address(this) )
    |        {
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(134)

[33mWarning[0m for MissingInputValidation in contract 'ECR20HoneycombToken':
    |     * @param amount amount of token in wei
    |     */
  > |		function restore(uint256 amount) public onlyOwner {
    |        uint256 newPrice = _newPrice(balanceOf[this] + amount);                 // calc new price after transfer
    |        _transfer(owner, this, amount );                                        // transfer token back to contract
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(216)

[33mWarning[0m for TODAmount in contract 'ECR20HoneycombToken':
    |        _transfer(msg.sender, this, amountToken);                               // transfer token back to contract
    |        _setPrices( newPrice );                                                 // update prices after transfer
  > |        msg.sender.transfer(revenue);                                           // send ether to seller
    |        return revenue;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(122)

[31mViolation[0m for TODReceiver in contract 'ECR20HoneycombToken':
    |		function save(uint256 amount) public onlyOwner {
    |        require( amount >= minimumPayout );	
  > |        owner.transfer( amount);
    |    }
    |		
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(208)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ECR20HoneycombToken':
    |        _transfer(msg.sender, this, amountToken);                               // transfer token back to contract
    |        _setPrices( newPrice );                                                 // update prices after transfer
  > |        msg.sender.transfer(revenue);                                           // send ether to seller
    |        return revenue;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(122)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ECR20HoneycombToken':
    |		function save(uint256 amount) public onlyOwner {
    |        require( amount >= minimumPayout );	
  > |        owner.transfer( amount);
    |    }
    |		
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |
    |    function constructor() public {
  > |        owner = msg.sender;
    |    }
    |
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(10)

[31mViolation[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |
    |    function _setPrices(uint256 newPrice) internal {
  > |        buyPrice = newPrice;
    |        sellPrice = buyPrice * 141421356 / 100000000;                           // sellPrice is sqrt(2) higher
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(83)

[31mViolation[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |    function _setPrices(uint256 newPrice) internal {
    |        buyPrice = newPrice;
  > |        sellPrice = buyPrice * 141421356 / 100000000;                           // sellPrice is sqrt(2) higher
    |    }
    |
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(84)

[31mViolation[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        uint previousBalances = balanceOf[_from] + balanceOf[_to];
    |        // Subtract from the sender
  > |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
    |        balanceOf[_to] += _value;
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(235)

[31mViolation[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(237)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        uint previousBalances = balanceOf[_from] + balanceOf[_to];
    |        // Subtract from the sender
  > |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
    |        balanceOf[_to] += _value;
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(237)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |
    |    function allowTransferOwnership(bool flag ) public onlyOwner {
  > |      ownershipTransferAllowed = flag;
    |    }
    | 
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(19)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        require( newOwner != 0x0 );                                             // not to 0x0
    |        require( ownershipTransferAllowed );                                 
  > |        owner = newOwner;
    |        ownershipTransferAllowed = false;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(25)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |        require( ownershipTransferAllowed );                                 
    |        owner = newOwner;
  > |        ownershipTransferAllowed = false;
    |    }
    |}
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'ECR20HoneycombToken':
    |     */
    |		function setMinimumPayout(uint256 amount) public onlyOwner {
  > |		minimumPayout = amount;
    |    }
    |		
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(198)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |    }
    |
  > |    function allowTransferOwnership(bool flag ) public onlyOwner {
    |      ownershipTransferAllowed = flag;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(18)

[31mViolation[0m for UnrestrictedWrite in contract 'owned':
    |
    |    function constructor() public {
  > |        owner = msg.sender;
    |    }
    |
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(10)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |
    |    function allowTransferOwnership(bool flag ) public onlyOwner {
  > |      ownershipTransferAllowed = flag;
    |    }
    | 
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(19)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |        require( newOwner != 0x0 );                                             // not to 0x0
    |        require( ownershipTransferAllowed );                                 
  > |        owner = newOwner;
    |        ownershipTransferAllowed = false;
    |    }
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(25)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |        require( ownershipTransferAllowed );                                 
    |        owner = newOwner;
  > |        ownershipTransferAllowed = false;
    |    }
    |}
  at /unique_chucks/27/0xa86914a1402f3cdcb27084e08a47445e8ab1bbab.sol(26)