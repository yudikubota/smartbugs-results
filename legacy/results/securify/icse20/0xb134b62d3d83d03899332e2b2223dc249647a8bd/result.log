Processing contract: /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol:ERC20Interface
Processing contract: /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol:HCREDITToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'HCREDITToken':
    |}
    |
  > |contract HCREDITToken is ERC20Interface {
    |   
    |    using SafeMath for uint256;
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |        && balances[_to] + _amount > balances[_to]) {
    |            balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |            balances[_to] = balances[_to].add(_amount);
    |            emit Transfer(msg.sender, _to, _amount);
    |            return true;
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |        && _amount > 0
    |        && balances[_to] + _amount > balances[_to]) {
  > |            balances[_from] = balances[_from].sub(_amount);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
    |            balances[_to] = balances[_to].add(_amount);
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |            balances[_from] = balances[_from].sub(_amount);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
  > |            balances[_to] = balances[_to].add(_amount);
    |            emit Transfer(_from, _to, _amount);
    |            return true;
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |pragma solidity ^0.5.0;
    |
  > |// ----------------------------------------------------------------------------------------------
    |// Sample fixed supply token contract
    |// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |        require(msg.sender == owner);
    |       
  > |        lockAccount[_addr].status = 1;
    |        AllLockAccounts.push(_addr) -1;
    |    }
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |       
    |        lockAccount[_addr].status = 1;
  > |        AllLockAccounts.push(_addr) -1;
    |    }
    |    
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'HCREDITToken':
    |      function unLockAccount(address _addr) public {
    |        require(msg.sender == owner);
  > |       lockAccount[_addr].status = 0;
    |       
    |    }
  at /unique_chucks/42/0xb134b62d3d83d03899332e2b2223dc249647a8bd.sol(154)