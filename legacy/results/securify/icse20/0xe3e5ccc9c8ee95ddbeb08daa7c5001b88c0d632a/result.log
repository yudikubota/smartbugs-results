Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:BangkaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:ERC20
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BangkaToken':
    |
    |
  > |contract BangkaToken is PausableToken {
    |    string  public  constant name = "Bangka Token";
    |    string  public  constant symbol = "BGT";
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(206)

[33mWarning[0m for UnrestrictedWrite in contract 'BangkaToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |  
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'BangkaToken':
    |    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));
    |
  > |    pausedPublic = newPausedPublic;
    |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'BangkaToken':
    |
    |    pausedPublic = newPausedPublic;
  > |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
    |    emit PausePublic(newPausedPublic);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'BangkaToken':
    |        // owner can re-assign the admin
    |        emit AdminTransferred(admin, newAdmin);
  > |        admin = newAdmin;
    |    }
    |}
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(267)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |  
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(145)

[33mWarning[0m for MissingInputValidation in contract 'Pausable':
    |  }
    |
  > |  function pause(bool newPausedPublic, bool newPausedOwnerAdmin) onlyOwner public {
    |    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));
    |
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |  
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));
    |
  > |    pausedPublic = newPausedPublic;
    |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |
    |    pausedPublic = newPausedPublic;
  > |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
    |    emit PausePublic(newPausedPublic);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(63)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |  
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(!(newPausedPublic == false && newPausedOwnerAdmin == true));
    |
  > |    pausedPublic = newPausedPublic;
    |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    pausedPublic = newPausedPublic;
  > |    pausedOwnerAdmin = newPausedOwnerAdmin;
    |
    |    emit PausePublic(newPausedPublic);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(63)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0xe3e5ccc9c8ee95ddbeb08daa7c5001b88c0d632a.sol(74)