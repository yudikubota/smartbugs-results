Processing contract: /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol:CardRPS
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol:CryptoTycoonsConstants
Processing contract: /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol:CryptoTycoonsVIPLib
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'CardRPS':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(293)

[33mWarning[0m for TODAmount in contract 'CardRPS':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(429)

[33mWarning[0m for TODAmount in contract 'CardRPS':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(jackpotFee);
    |            vipLib.increaseJackpot(jackpotFee);
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(449)

[33mWarning[0m for TODAmount in contract 'CardRPS':
    |        winAmount += vipPayback;
    |        if(winAmount > 0){
  > |            if (gambler.send(winAmount)) {
    |                emit Payment(gambler, winAmount, 
    |                    randomNumber.playerNum1, 
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(497)

[31mViolation[0m for TODReceiver in contract 'CardRPS':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(293)

[31mViolation[0m for TODReceiver in contract 'CardRPS':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(jackpotFee);
    |            vipLib.increaseJackpot(jackpotFee);
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(449)

[33mWarning[0m for TODReceiver in contract 'CardRPS':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(429)

[33mWarning[0m for TODReceiver in contract 'CardRPS':
    |        winAmount += vipPayback;
    |        if(winAmount > 0){
  > |            if (gambler.send(winAmount)) {
    |                emit Payment(gambler, winAmount, 
    |                    randomNumber.playerNum1, 
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(497)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CardRPS':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(293)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CardRPS':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(429)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CardRPS':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(jackpotFee);
    |            vipLib.increaseJackpot(jackpotFee);
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(449)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CardRPS':
    |        winAmount += vipPayback;
    |        if(winAmount > 0){
  > |            if (gambler.send(winAmount)) {
    |                emit Payment(gambler, winAmount, 
    |                    randomNumber.playerNum1, 
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(497)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CardRPS':
    |    function withdrawFunds(address payable beneficiary, uint withdrawAmount) external onlyOwner {
    |        require (withdrawAmount <= address(this).balance, "Increase amount larger than balance.");
  > |        if (beneficiary.send(withdrawAmount)){
    |            emit WithdrawFunds(beneficiary, withdrawAmount);
    |        }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |    function approveNextOwner(address payable _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |    function acceptNextOwner() external {
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
  > |        owner = nextOwner;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(212)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |    // See comment for "secretSigner" variable.
    |    function setSecretSigner(address newSecretSigner) external onlyOwner {
  > |        secretSigner = newSecretSigner;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == false) {
  > |            croupierMap[newCroupier] = true;
    |        }
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(227)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == true) {
  > |            croupierMap[newCroupier] = false;
    |        }
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |
    |    function setVIPLibraryAddress(address payable addr) external onlyOwner{
  > |        VIPLibraryAddress = addr;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(239)

[33mWarning[0m for UnrestrictedWrite in contract 'CardRPS':
    |    function setMaxProfit(uint _maxProfit) public onlyOwner {
    |        require (_maxProfit < MAX_AMOUNT, "maxProfit should be a sane number.");
  > |        maxProfit = _maxProfit;
    |    }
    |    
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(245)

[31mViolation[0m for DAOConstantGas in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(108)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(108)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(125)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(108)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(125)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        uint exp = userExpPool[addr];
    |        exp = exp + amount;
  > |        userExpPool[addr] = exp;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (increaseAmount <= address(this).balance, "Increase amount larger than balance.");
    |        require (jackpotSize + increaseAmount <= address(this).balance, "Not enough funds.");
  > |        jackpotSize += uint128(increaseAmount);
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(104)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payJackpotReward(address payable to) external onlyCaller{
    |        to.transfer(jackpotSize);
  > |        jackpotSize = 0;
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(109)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (amount <= address(this).balance, "Increase amount larger than balance.");
    |        require (rankingRewardSize + amount <= address(this).balance, "Not enough funds.");
  > |        rankingRewardSize += uint128(amount);
    |    }
    |
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(119)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payRankingReward(address payable to) external onlyCaller {
    |        uint128 prize = rankingRewardSize / 2;
  > |        rankingRewardSize = rankingRewardSize - prize;
    |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == false){
  > |            callerMap[caller] = true;
    |        }
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == true) {
  > |            callerMap[caller] = false;
    |        }
    |    }
  at /unique_chucks/24/0xf6752df534a51f0acbe18d13491513a756f0b796.sol(51)