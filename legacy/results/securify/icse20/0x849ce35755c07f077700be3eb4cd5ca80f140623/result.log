Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:AOContentFactory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOContent
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOContentHost
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOEarning
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOSetting
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOStakedContent
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:IAOTreasury
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:INameFactory
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:INameTAOPosition
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol:tokenRecipient
[31mViolation[0m for RepeatedCall in contract 'AOContentFactory':
    |		address _taoId
    |		) internal returns (bytes32) {
  > |		address _creatorNameId = _nameFactory.ethAddressToNameId(_creator);
    |		require (_creatorNameId != address(0));
    |		return _aoContent.create(_creatorNameId, _baseChallenge, _fileSize, _contentUsageType, _taoId);
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(1196)

[31mViolation[0m for RepeatedCall in contract 'AOContentFactory':
    |		address _stakeOwnerNameId = _nameFactory.ethAddressToNameId(_stakeOwner);
    |		require (_stakeOwnerNameId != address(0));
  > |		return _aoStakedContent.create(_stakeOwnerNameId, _contentId, _networkIntegerAmount, _networkFractionAmount, _denomination, _primordialAmount, _profitPercentage);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(1222)

[31mViolation[0m for RepeatedCall in contract 'AOContentFactory':
    |	 */
    |	function _hostContent(address _host, bytes32 _stakedContentId, string memory _encChallenge, string memory _contentDatKey, string memory _metadataDatKey) internal returns (bool) {
  > |		address _hostNameId = _nameFactory.ethAddressToNameId(_host);
    |		require (_hostNameId != address(0));
    |		return _aoContentHost.create(_hostNameId, _stakedContentId, _encChallenge, _contentDatKey, _metadataDatKey);
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(1235)

[33mWarning[0m for RepeatedCall in contract 'AOContentFactory':
    |		uint256 _profitPercentage
    |		) internal returns (bytes32) {
  > |		address _stakeOwnerNameId = _nameFactory.ethAddressToNameId(_stakeOwner);
    |		require (_stakeOwnerNameId != address(0));
    |		return _aoStakedContent.create(_stakeOwnerNameId, _contentId, _networkIntegerAmount, _networkFractionAmount, _denomination, _primordialAmount, _profitPercentage);
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(1220)

[33mWarning[0m for RepeatedCall in contract 'AOContentFactory':
    |		address _hostNameId = _nameFactory.ethAddressToNameId(_host);
    |		require (_hostNameId != address(0));
  > |		return _aoContentHost.create(_hostNameId, _stakedContentId, _encChallenge, _contentDatKey, _metadataDatKey);
    |	}
    |}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(1237)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(837)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(847)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setSettingTAOId(address _settingTAOId) public onlyTheAO {
    |		require (AOLibrary.isTAO(_settingTAOId));
  > |		settingTAOId = _settingTAOId;
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(856)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(865)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(866)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOTreasuryAddress(address _aoTreasuryAddress) public onlyTheAO {
    |		require (_aoTreasuryAddress != address(0));
  > |		aoTreasuryAddress = _aoTreasuryAddress;
    |		_aoTreasury = IAOTreasury(_aoTreasuryAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(875)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoTreasuryAddress != address(0));
    |		aoTreasuryAddress = _aoTreasuryAddress;
  > |		_aoTreasury = IAOTreasury(_aoTreasuryAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(876)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOContentAddress(address _aoContentAddress) public onlyTheAO {
    |		require (_aoContentAddress != address(0));
  > |		aoContentAddress = _aoContentAddress;
    |		_aoContent = IAOContent(_aoContentAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(885)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoContentAddress != address(0));
    |		aoContentAddress = _aoContentAddress;
  > |		_aoContent = IAOContent(_aoContentAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(886)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {
    |		require (_aoStakedContentAddress != address(0));
  > |		aoStakedContentAddress = _aoStakedContentAddress;
    |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(895)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoStakedContentAddress != address(0));
    |		aoStakedContentAddress = _aoStakedContentAddress;
  > |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(896)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOContentHostAddress(address _aoContentHostAddress) public onlyTheAO {
    |		require (_aoContentHostAddress != address(0));
  > |		aoContentHostAddress = _aoContentHostAddress;
    |		_aoContentHost = IAOContentHost(_aoContentHostAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(905)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoContentHostAddress != address(0));
    |		aoContentHostAddress = _aoContentHostAddress;
  > |		_aoContentHost = IAOContentHost(_aoContentHostAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(906)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setAOEarningAddress(address _aoEarningAddress) public onlyTheAO {
    |		require (_aoEarningAddress != address(0));
  > |		aoEarningAddress = _aoEarningAddress;
    |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(915)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_aoEarningAddress != address(0));
    |		aoEarningAddress = _aoEarningAddress;
  > |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(916)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(925)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(926)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(935)

[31mViolation[0m for UnrestrictedWrite in contract 'AOContentFactory':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(936)

[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(403)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(415)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(424)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(453)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(362)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(362)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(715)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(744)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(736)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(747)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(146)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(194)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(270)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(286)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/37/0x849ce35755c07f077700be3eb4cd5ca80f140623.sol(288)