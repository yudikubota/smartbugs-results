Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:AdminStuffs
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:Eth2DaiInterface
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:Helper
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:KyberInterface
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:SplitHelper
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:SplitResolver
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:SplitSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:Swap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:TokenInterface
Processing contract: /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol:UniswapExchange
[31mViolation[0m for TODAmount in contract 'AdminStuffs':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function changeMinEth(uint amt) public isAdmin {
  > |        minEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function changeMinDai(uint amt) public isAdmin {
  > |        minDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(154)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(208)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(210)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(215)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |    function getRateUniswap(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(221)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(223)

[31mViolation[0m for TODAmount in contract 'SplitHelper':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |
    |    function changeMinEth(uint amt) public isAdmin {
  > |        minEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitHelper':
    |
    |    function changeMinDai(uint amt) public isAdmin {
  > |        minDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(154)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(208)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(210)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(215)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |    function getRateUniswap(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(221)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(223)

[31mViolation[0m for TODAmount in contract 'SplitResolver':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |
    |    function changeMinEth(uint amt) public isAdmin {
  > |        minEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitResolver':
    |
    |    function changeMinDai(uint amt) public isAdmin {
  > |        minDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(154)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(208)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(210)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(215)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |    function getRateUniswap(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(221)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(223)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
  > |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(239)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for RepeatedCall in contract 'SplitSwap':
    |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(264)

[31mViolation[0m for TODAmount in contract 'SplitSwap':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(138)

[33mWarning[0m for TODReceiver in contract 'SplitSwap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[33mWarning[0m for TODReceiver in contract 'SplitSwap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[33mWarning[0m for TODReceiver in contract 'SplitSwap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'SplitSwap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'SplitSwap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'SplitSwap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'SplitSwap':
    |        wethToEth();
    |        require(destAmt > slippageAmt, "Dest Amt < slippage");
  > |        msg.sender.transfer(destAmt);
    |        emit LogDaiToEth(msg.sender, finalSrcAmt, destAmt);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |
    |    function changeMinEth(uint amt) public isAdmin {
  > |        minEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'SplitSwap':
    |
    |    function changeMinDai(uint amt) public isAdmin {
  > |        minDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(154)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(208)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(210)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(215)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |    function getRateUniswap(address src, address dest, uint srcAmt) internal view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(221)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(223)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
  > |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(239)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for RepeatedCall in contract 'Swap':
    |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(264)

[31mViolation[0m for TODAmount in contract 'Swap':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(138)

[33mWarning[0m for TODReceiver in contract 'Swap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[33mWarning[0m for TODReceiver in contract 'Swap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[33mWarning[0m for TODReceiver in contract 'Swap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Swap':
    |    function swapEth2Dai(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == wethAddr) {
  > |            TokenInterface(wethAddr).deposit.value(srcAmt)();
    |        }
    |        destAmt = Eth2DaiInterface(eth2daiAddr).sellAllAmount(
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(237)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Swap':
    |    function swapKyber(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        uint ethAmt = src == ethAddr ? srcAmt : 0;
  > |        destAmt = KyberInterface(kyberAddr).trade.value(ethAmt)(
    |                src,
    |                srcAmt,
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(249)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Swap':
    |    function swapUniswap(address src, address dest, uint srcAmt) internal returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).ethToTokenSwapInput.value(srcAmt)(1, block.timestamp + 1);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).tokenToEthSwapInput(srcAmt, 1, block.timestamp + 1);
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(262)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Swap':
    |        wethToEth();
    |        require(destAmt > slippageAmt, "Dest Amt < slippage");
  > |        msg.sender.transfer(destAmt);
    |        emit LogDaiToEth(msg.sender, finalSrcAmt, destAmt);
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |
    |    function changeMinEth(uint amt) public isAdmin {
  > |        minEth = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'Swap':
    |
    |    function changeMinDai(uint amt) public isAdmin {
  > |        minDai = amt;
    |    }
    |
  at /unique_chucks/42/0xa4bca645f9cb9e6f9ad8c56d90a65b07c2f4e1dd.sol(154)