Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:ERC20
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:ERC20Basic
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:LineageCode
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit Transfer(msg.sender, _to, _amount);
    |        return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |            // SafeMath.sub will throw if there is not enough balance.
    |            balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |            balances[_to] = balances[_to].add(_amount);
    |            emit Transfer(msg.sender, _to, _amount);
    |            return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |                // SafeMath.sub will throw if there is not enough balance.
    |                balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |                balances[_to] = balances[_to].add(_amount);
    |                emit Transfer(msg.sender, _to, _amount);
    |                return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(193)

[31mViolation[0m for LockedEther in contract 'LineageCode':
    | * @dev Token representing LineageCode.
    | */
  > | contract LineageCode is BurnableToken {
    |     string public name ;
    |     string public symbol ;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(305)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit Transfer(msg.sender, _to, _amount);
    |        return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |            // SafeMath.sub will throw if there is not enough balance.
    |            balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |            balances[_to] = balances[_to].add(_amount);
    |            emit Transfer(msg.sender, _to, _amount);
    |            return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |                // SafeMath.sub will throw if there is not enough balance.
    |                balances[msg.sender] = balances[msg.sender].sub(_amount);
  > |                balances[_to] = balances[_to].add(_amount);
    |                emit Transfer(msg.sender, _to, _amount);
    |                return true;
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(193)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        }
    |    }
  > |    balances[_from] = balances[_from].sub(_amount);
    |    balances[_to] = balances[_to].add(_amount);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(244)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    }
    |    balances[_from] = balances[_from].sub(_amount);
  > |    balances[_to] = balances[_to].add(_amount);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);
    |    emit Transfer(_from, _to, _amount);
  at /unique_chucks/8/0x4fadfc53dbabd88ad01538993f8dba6b99430c81.sol(245)