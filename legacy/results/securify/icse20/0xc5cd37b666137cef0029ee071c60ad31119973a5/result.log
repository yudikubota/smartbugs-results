Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:AI247Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:AI247Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:CappedCrowdsale
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:ConditionalEscrow
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:ERC20Detailed
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Escrow
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:FinalizableCrowdsale
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:IERC20
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Math
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:MintedCrowdsale
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:MinterRole
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Ownable
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:ReentrancyGuard
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:RefundEscrow
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:RefundableCrowdsale
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:Secondary
Processing contract: /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol:TimedCrowdsale
[31mViolation[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(214)

[31mViolation[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |        require(hasClosed(), "FinalizableCrowdsale: not closed");
    |
  > |        _finalized = true;
    |
    |        _finalization();
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(563)

[33mWarning[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |    }
    |    function _setRate(uint256 rate) internal{
  > |        _rate = rate;
    |    }
    |    /**
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |
    |        // update state
  > |        _weiRaised = _weiRaised.add(weiAmount);
    |
    |        _processPurchase(beneficiary, tokens);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(333)

[33mWarning[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(1275)

[33mWarning[0m for UnrestrictedWrite in contract 'AI247Crowdsale':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(1293)

[31mViolation[0m for LockedEther in contract 'AI247Token':
    | * @title AI247Token
    | */
  > |contract AI247Token is ERC20Mintable, ERC20Detailed {
    |    constructor () public ERC20Detailed("AI247 Token", "AI247", 18) {
    |        // solhint-disable-previous-line no-empty-blocks
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(1219)

[33mWarning[0m for TODAmount in contract 'Crowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(389)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Crowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(389)

[31mViolation[0m for UnrestrictedWrite in contract 'Crowdsale':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |
    |        // update state
  > |        _weiRaised = _weiRaised.add(weiAmount);
    |
    |        _processPurchase(beneficiary, tokens);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(333)

[33mWarning[0m for TODAmount in contract 'Escrow':
    |        _deposits[payee] = 0;
    |
  > |        payee.transfer(payment);
    |
    |        emit Withdrawn(payee, payment);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(667)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |    function transferPrimary(address recipient) public onlyPrimary {
    |        require(recipient != address(0), "Secondary: new primary is the zero address");
  > |        _primary = recipient;
    |        emit PrimaryTransferred(_primary);
    |    }
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(618)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |    function deposit(address payee) public onlyPrimary payable {
    |        uint256 amount = msg.value;
  > |        _deposits[payee] = _deposits[payee].add(amount);
    |
    |        emit Deposited(payee, amount);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(653)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |        uint256 payment = _deposits[payee];
    |
  > |        _deposits[payee] = 0;
    |
    |        payee.transfer(payment);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(665)

[31mViolation[0m for TODAmount in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(769)

[33mWarning[0m for TODAmount in contract 'RefundEscrow':
    |        _deposits[payee] = 0;
    |
  > |        payee.transfer(payment);
    |
    |        emit Withdrawn(payee, payment);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(667)

[31mViolation[0m for TODReceiver in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(769)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(769)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function transferPrimary(address recipient) public onlyPrimary {
    |        require(recipient != address(0), "Secondary: new primary is the zero address");
  > |        _primary = recipient;
    |        emit PrimaryTransferred(_primary);
    |    }
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(618)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function deposit(address payee) public onlyPrimary payable {
    |        uint256 amount = msg.value;
  > |        _deposits[payee] = _deposits[payee].add(amount);
    |
    |        emit Deposited(payee, amount);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(653)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |        uint256 payment = _deposits[payee];
    |
  > |        _deposits[payee] = 0;
    |
    |        payee.transfer(payment);
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(665)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function close() public onlyPrimary {
    |        require(_state == State.Active, "RefundEscrow: can only close while active");
  > |        _state = State.Closed;
    |        emit RefundsClosed();
    |    }
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(751)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function enableRefunds() public onlyPrimary {
    |        require(_state == State.Active, "RefundEscrow: can only enable refunds while active");
  > |        _state = State.Refunding;
    |        emit RefundsEnabled();
    |    }
  at /unique_chucks/28/0xc5cd37b666137cef0029ee071c60ad31119973a5.sol(760)