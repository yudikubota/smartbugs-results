Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:Controlled
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:ControlledI
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:Deployer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:DeployerI
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:OwnedI
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:SolidifiedDepositableFactoryI
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:SolidifiedMain
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:SolidifiedVault
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:Stoppable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol:StoppableI
[33mWarning[0m for UnrestrictedWrite in contract 'Controlled':
    |        require(newOwner != address(0), "Owned:invalid address");
    |        emit LogOwnerChanged(contractOwner, newOwner);
  > |        contractOwner = newOwner;
    |        return true;
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(36)

[33mWarning[0m for UnrestrictedWrite in contract 'Controlled':
    |        require(newController != controllerAddress, "Controlled:New controller should be different than controller");
    |        emit LogControllerChanged(msg.sender, controllerAddress, newController);
  > |        controllerAddress = newController;
    |        return true;
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(newOwner != address(0), "Owned:invalid address");
    |        emit LogOwnerChanged(contractOwner, newOwner);
  > |        contractOwner = newOwner;
    |        return true;
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(36)

[31mViolation[0m for RepeatedCall in contract 'SolidifiedMain':
    |      require(depositAddresses[_userAddress] == address(0), "Main:invalid address");
    |      SolidifiedDepositableFactoryI f = SolidifiedDepositableFactoryI(depositableFactoryAddress);
  > |      address d = f.deployDepositableContract(_userAddress, address(this));
    |
    |      require(insertDeployedContract(d), "Main:insert contract failed");
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(643)

[33mWarning[0m for TODAmount in contract 'SolidifiedMain':
    |    userStructs[_userAddress].balance = userStructs[_userAddress].balance.add(msg.value);
    |
  > |    vault.transfer(msg.value);
    |    emit LogUserDeposit(_userAddress, msg.sender, msg.value);
    |  }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(594)

[31mViolation[0m for TODReceiver in contract 'SolidifiedMain':
    |    userStructs[_userAddress].balance = userStructs[_userAddress].balance.add(msg.value);
    |
  > |    vault.transfer(msg.value);
    |    emit LogUserDeposit(_userAddress, msg.sender, msg.value);
    |  }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(594)

[31mViolation[0m for DAO in contract 'SolidifiedVault':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)("");
    |            if (exec)
    |                emit Execution(transactionId);
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(397)

[33mWarning[0m for TODAmount in contract 'SolidifiedVault':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)("");
    |            if (exec)
    |                emit Execution(transactionId);
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(397)

[33mWarning[0m for TODReceiver in contract 'SolidifiedVault':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)("");
    |            if (exec)
    |                emit Execution(transactionId);
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(397)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SolidifiedVault':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)("");
    |            if (exec)
    |                emit Execution(transactionId);
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(397)

[31mViolation[0m for UnrestrictedWrite in contract 'SolidifiedVault':
    |    {
    |        transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(437)

[31mViolation[0m for UnrestrictedWrite in contract 'SolidifiedVault':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(442)

[33mWarning[0m for UnrestrictedWrite in contract 'SolidifiedVault':
    |        if (isConfirmed(transactionId)) {
    |            Transaction storage txn = transactions[transactionId];
  > |            txn.executed = true;
    |            (bool exec, bytes memory _) = txn.destination.call.value(txn.value)("");
    |            if (exec)
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(396)

[33mWarning[0m for UnrestrictedWrite in contract 'SolidifiedVault':
    |            else {
    |                emit ExecutionFailure(transactionId);
  > |                txn.executed = false;
    |            }
    |        }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(402)

[31mViolation[0m for MissingInputValidation in contract 'Stoppable':
    |    }
    |
  > |    function setRunSwitch(bool onOff)
    |        public
    |        onlyOwner
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(211)

[33mWarning[0m for UnrestrictedWrite in contract 'Stoppable':
    |        require(newOwner != address(0), "Owned:invalid address");
    |        emit LogOwnerChanged(contractOwner, newOwner);
  > |        contractOwner = newOwner;
    |        return true;
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(36)

[33mWarning[0m for UnrestrictedWrite in contract 'Stoppable':
    |    {
    |        emit LogSetRunSwitch(msg.sender, onOff);
  > |        running = onOff;
    |        return true;
    |    }
  at /unique_chucks/12/0x9806af0a04e49da7d0bb31e18f1b31c83c6cac29.sol(217)