Processing contract: /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol:DiamondTransaction
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol:SocialLocker
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'DiamondTransaction':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    DiamondTransaction is ERC20
    |{
    |    struct TDiamondTransaction
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(267)

[31mViolation[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |        assert(finalAmount <= baseAmount);
    |
  > |        balances[fromAddr] = finalAmount;
    |
    |                //----- balances[toAddr] = balances[toAddr].add(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |        assert(finalAmount >= baseAmount);
    |
  > |        balances[toAddr] = finalAmount;
    |
    |                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |pragma solidity ^0.5.7;    
  > |////////////////////////////////////////////////////////////////////////////////
    |library     SafeMath                    // This library is not used systematically since it tends to create "Infinite gas" functions and consumes too many gas
    |{
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |        emit OnOwnershipTransfered(owner, newOwner);
    |
  > |        owner            = newOwner;
    |        totalSoldByOwner = 0;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |
    |        owner            = newOwner;
  > |        totalSoldByOwner = 0;
    |    }
    |    //--------------------------------------------------------------------------
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |
    |        emit OnAdminUserChanged(admin, newAdminAddress);
  > |        admin = newAdminAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |
    |        emit OnVautingUserChanged(admin, newAddress);
  > |        mazler = newAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |        item.sourceId         = sourceId;
    |
  > |        diamondTransactions[indexInOurDb] = item; 
    |        diamondTransactionIds.push(indexInOurDb)-1;
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'DiamondTransaction':
    |
    |        diamondTransactions[indexInOurDb] = item; 
  > |        diamondTransactionIds.push(indexInOurDb)-1;
    |
    |        if (isBuy)
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(325)

[31mViolation[0m for LockedEther in contract 'ERC20':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    ERC20 
    |{
    |    using SafeMath  for uint256;
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(33)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |        assert(finalAmount <= baseAmount);
    |
  > |        balances[fromAddr] = finalAmount;
    |
    |                //----- balances[toAddr] = balances[toAddr].add(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |        assert(finalAmount >= baseAmount);
    |
  > |        balances[toAddr] = finalAmount;
    |
    |                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |        emit OnOwnershipTransfered(owner, newOwner);
    |
  > |        owner            = newOwner;
    |        totalSoldByOwner = 0;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |        owner            = newOwner;
  > |        totalSoldByOwner = 0;
    |    }
    |    //--------------------------------------------------------------------------
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |        emit OnAdminUserChanged(admin, newAdminAddress);
  > |        admin = newAdminAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |        emit OnVautingUserChanged(admin, newAddress);
  > |        mazler = newAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(261)

[31mViolation[0m for LockedEther in contract 'SocialLocker':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    SocialLocker    is  DiamondTransaction
    |{
    |    uint256 public              minVotesCount         = 20;
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(467)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        assert(finalAmount <= baseAmount);
    |
  > |        balances[fromAddr] = finalAmount;
    |
    |                //----- balances[toAddr] = balances[toAddr].add(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        assert(finalAmount >= baseAmount);
    |
  > |        balances[toAddr] = finalAmount;
    |
    |                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues 
    |
  > |        votersMap[possibleFraudster][voter] = true;           // Ok, this voter just voted, don't allow anymore votes from him on the possibleFraudster
    |
    |        currentVoteCount = refundTotalVotes[possibleFraudster];
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(529)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        assert(currentVoteCount<sum);
    |
  > |        refundTotalVotes[possibleFraudster] = sum;
    |
    |        emit OnVotedForRefund(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(536)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |            assert(finalAmount >= baseAmount);
    |
  > |            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)
    |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(549)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |
    |            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)
  > |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
    |            voteLockedWallets[possibleFraudster] = false;   
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(550)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
  > |            voteLockedWallets[possibleFraudster] = false;   
    |
    |            emit Transfer(possibleFraudster, owner, balances[possibleFraudster]);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(552)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues 
    |
  > |        votersMap[possibleFraudster][voter] = true;           // don't let the voter votes again for this possibleFraudster
    |
    |        currentVoteCount = unlockingTotalVotes[possibleFraudster];
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(569)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        assert(currentVoteCount<sum);
    |
  > |        unlockingTotalVotes[possibleFraudster] = sum;
    |
    |        emit OnVotedForUnlocking(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(576)

[31mViolation[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        if (sum>=minVotesCount)         // The VOTE is Finished!!!
    |        {
  > |            voteLockedWallets[possibleFraudster] = false;                         // Redemption allowed by the crowd
    |        }
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(584)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |pragma solidity ^0.5.7;    
  > |////////////////////////////////////////////////////////////////////////////////
    |library     SafeMath                    // This library is not used systematically since it tends to create "Infinite gas" functions and consumes too many gas
    |{
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        emit OnOwnershipTransfered(owner, newOwner);
    |
  > |        owner            = newOwner;
    |        totalSoldByOwner = 0;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |
    |        owner            = newOwner;
  > |        totalSoldByOwner = 0;
    |    }
    |    //--------------------------------------------------------------------------
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |
    |        emit OnAdminUserChanged(admin, newAdminAddress);
  > |        admin = newAdminAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |
    |        emit OnVautingUserChanged(admin, newAddress);
  > |        mazler = newAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        item.sourceId         = sourceId;
    |
  > |        diamondTransactions[indexInOurDb] = item; 
    |        diamondTransactionIds.push(indexInOurDb)-1;
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |
    |        diamondTransactions[indexInOurDb] = item; 
  > |        diamondTransactionIds.push(indexInOurDb)-1;
    |
    |        if (isBuy)
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(325)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        emit OnSocialLockerStateChanged(isSocialLockerEnabled, newState);
    |
  > |        isSocialLockerEnabled = newState;
    |        return 1;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(495)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        emit OnSocialLockerChangeMinVoteCount(minVotesCount, newMinVoteCount);
    |
  > |        minVotesCount = newMinVoteCount;
    |        return 1;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |    function    tagWalletForVoting(address walletToTag) public onlyAdmin  returns(uint256)
    |    {
  > |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
    |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
    |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(509)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |    {
    |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
  > |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
    |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(510)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
    |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
  > |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
    |
    |        emit OnWalletTaggedForSocialLocking(walletToTag);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |    function    banVoter(address voter) public onlyAdmin  returns(uint256)
    |    {
  > |        forbiddenVoters[voter] = true;      // this user cannot vote anymore. A possible abuser
    |
    |        emit OnVoterBannished(voter);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'SocialLocker':
    |    function    allowVoter(address voter) public onlyAdmin  returns(uint256)
    |    {
  > |        forbiddenVoters[voter] = false;      // this user cannot vote anymore. A possible abuser
    |
    |        emit OnVoterAllowed(voter);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(599)

[31mViolation[0m for LockedEther in contract 'Token':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    Token  is  SocialLocker
    |{
    |    address public                  validator;                              // Address of the guy who will validate any extend/reduce query. so it's considered as Admin2 here. Adm
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(611)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount <= baseAmount);
    |
  > |        balances[fromAddr] = finalAmount;
    |
    |                //----- balances[toAddr] = balances[toAddr].add(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount >= baseAmount);
    |
  > |        balances[toAddr] = finalAmount;
    |
    |                //----- allowances[fromAddr][msg.sender] = allowances[fromAddr][msg.sender].sub(amountInWei);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues 
    |
  > |        votersMap[possibleFraudster][voter] = true;           // Ok, this voter just voted, don't allow anymore votes from him on the possibleFraudster
    |
    |        currentVoteCount = refundTotalVotes[possibleFraudster];
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(529)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        assert(currentVoteCount<sum);
    |
  > |        refundTotalVotes[possibleFraudster] = sum;
    |
    |        emit OnVotedForRefund(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(536)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |            assert(finalAmount >= baseAmount);
    |
  > |            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)
    |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(549)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |
    |            balances[owner]           = finalAmount;        // The official Token owner receives back the token (voted as to be refunded)
  > |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
    |            voteLockedWallets[possibleFraudster] = false;   
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(550)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |            balances[possibleFraudster] = 0;                  // Sorry scammer, but the vote said  you won't have even 1 token in your wallet!
    |
  > |            voteLockedWallets[possibleFraudster] = false;   
    |
    |            emit Transfer(possibleFraudster, owner, balances[possibleFraudster]);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(552)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |                isSocialLockerEnabled);                     // Don't vote on wallets not yet locked by ADMIN. To avoid abuse and security issues 
    |
  > |        votersMap[possibleFraudster][voter] = true;           // don't let the voter votes again for this possibleFraudster
    |
    |        currentVoteCount = unlockingTotalVotes[possibleFraudster];
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(569)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        assert(currentVoteCount<sum);
    |
  > |        unlockingTotalVotes[possibleFraudster] = sum;
    |
    |        emit OnVotedForUnlocking(voter, possibleFraudster, sum, minVotesCount);    // People has voted to refund all tokens from the involved wallet. it's a social voting
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(576)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        if (sum>=minVotesCount)         // The VOTE is Finished!!!
    |        {
  > |            voteLockedWallets[possibleFraudster] = false;                         // Redemption allowed by the crowd
    |        }
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(584)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |pragma solidity ^0.5.7;    
  > |////////////////////////////////////////////////////////////////////////////////
    |library     SafeMath                    // This library is not used systematically since it tends to create "Infinite gas" functions and consumes too many gas
    |{
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        emit OnOwnershipTransfered(owner, newOwner);
    |
  > |        owner            = newOwner;
    |        totalSoldByOwner = 0;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        owner            = newOwner;
  > |        totalSoldByOwner = 0;
    |    }
    |    //--------------------------------------------------------------------------
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        emit OnAdminUserChanged(admin, newAdminAddress);
  > |        admin = newAdminAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        emit OnVautingUserChanged(admin, newAddress);
  > |        mazler = newAddress;
    |
    |        return 1;       // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        item.sourceId         = sourceId;
    |
  > |        diamondTransactions[indexInOurDb] = item; 
    |        diamondTransactionIds.push(indexInOurDb)-1;
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        diamondTransactions[indexInOurDb] = item; 
  > |        diamondTransactionIds.push(indexInOurDb)-1;
    |
    |        if (isBuy)
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(325)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        emit OnSocialLockerStateChanged(isSocialLockerEnabled, newState);
    |
  > |        isSocialLockerEnabled = newState;
    |        return 1;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(495)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        emit OnSocialLockerChangeMinVoteCount(minVotesCount, newMinVoteCount);
    |
  > |        minVotesCount = newMinVoteCount;
    |        return 1;
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function    tagWalletForVoting(address walletToTag) public onlyAdmin  returns(uint256)
    |    {
  > |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
    |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
    |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(509)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    {
    |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
  > |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
    |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(510)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        voteLockedWallets[walletToTag]   = true;    // now people can vote for a refund or to unlock this wallet
    |        unlockingTotalVotes[walletToTag] = 0;       // no votes yet on this
  > |        refundTotalVotes[walletToTag]    = 0;       // no vote yet
    |
    |        emit OnWalletTaggedForSocialLocking(walletToTag);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function    banVoter(address voter) public onlyAdmin  returns(uint256)
    |    {
  > |        forbiddenVoters[voter] = true;      // this user cannot vote anymore. A possible abuser
    |
    |        emit OnVoterBannished(voter);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function    allowVoter(address voter) public onlyAdmin  returns(uint256)
    |    {
  > |        forbiddenVoters[voter] = false;      // this user cannot vote anymore. A possible abuser
    |
    |        emit OnVoterAllowed(voter);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(599)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        uint256 oldQuantity = maxReduceInUnit;
    |
  > |        maxReduceInUnit = newQuantityInUnit;
    |        maxReduce       = maxReduceInUnit * 10**decimals;
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(661)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        maxReduceInUnit = newQuantityInUnit;
  > |        maxReduce       = maxReduceInUnit * 10**decimals;
    |
    |        emit OnMaxReduceChanged(maxReduceInUnit, oldQuantity);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(662)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        uint256 oldQuantity = maxExtendInUnit;
    |
  > |        maxExtendInUnit = newQuantityInUnit;
    |        maxExtend       = maxExtendInUnit * 10**decimals;
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(673)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        maxExtendInUnit = newQuantityInUnit;
  > |        maxExtend       = maxExtendInUnit * 10**decimals;
    |
    |        emit OnMaxExtendChanged(maxExtendInUnit, oldQuantity);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(674)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        emit OnValidationUserChanged(validator, newValidatorAddress);
    |
  > |        validator = newValidatorAddress;
    |
    |        return 1;
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(689)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        else if (newDelayInSecond>24*3600)      return 0;   // not more than 24H of waiting
    |
  > |        minDelayBeforeStockChange = newDelayInSecond;
    |
    |        emit OnLogNumber("changeMinDelayBeforeReduce", newDelayInSecond);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(699)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        require(volumeInUnit<=maxExtendInUnit);
    |
  > |        isExtendStockValidated = true;
    |        extendVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(713)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        isExtendStockValidated = true;
  > |        extendVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one
    |
    |        return 1;                                   // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(714)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function    cancelExtendStock() public onlyValidator returns(uint256)
    |    {
  > |        isExtendStockValidated = false;             // Cancel any request posted by admin
    |        return 1;                                   // for API use
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(721)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount >= baseAmount);
    |
  > |        totalSupply = finalAmount;
    |
    |        //----- balances[owner] = balances[owner].add(extraVolumeInDecimal);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(747)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount >= baseAmount);
    |
  > |        balances[owner] = finalAmount;
    |
    |        //-----
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(756)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        //-----
    |
  > |        isExtendStockValidated = false;                                 // reset for the next extend request
    |
    |        emit OnStockVolumeExtended(extendVolumeInUnit, extraVolumeInDecimal, totalSupply);        
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(760)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        require(volumeInUnit<=maxReduceInUnit);
    |
  > |        isReduceStockValidated = true;
    |        reduceVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one
    |
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(779)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        isReduceStockValidated = true;
  > |        reduceVolumeInUnit     = volumeInUnit;      // If a request was already done, the volume will be changed with this one
    |
    |        return 1;                                   // for API use
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(780)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function    cancelReduceStock() public onlyValidator returns(uint256)
    |    {
  > |        isReduceStockValidated = false;             // Cancel any request posted by admin
    |        return 1;                                   // for API use
    |    }
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(787)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        }
    |
  > |        lastReduceCallTime = now;
    |
    |        //-----
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(807)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount <= baseAmount);
    |
  > |        totalSupply = finalAmount;
    |
    |        //----- balances[owner] = balances[owner].sub(reducedVolumeInDecimal);
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(820)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        assert(finalAmount <= baseAmount);
    |
  > |        balances[owner] = finalAmount;
    |
    |        //-----
  at /unique_chucks/7/0x588a8c163688efa1f33814693ea27d0c3867d5e9.sol(829)