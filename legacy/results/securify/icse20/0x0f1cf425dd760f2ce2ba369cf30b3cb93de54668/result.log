Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:ERC20
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:ERC20Basic
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:NewToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(92)

[31mViolation[0m for LockedEther in contract 'NewToken':
    |}
    |
  > |contract NewToken is StandardToken {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'NewToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'NewToken':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'NewToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'NewToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(92)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/39/0x0f1cf425dd760f2ce2ba369cf30b3cb93de54668.sol(92)