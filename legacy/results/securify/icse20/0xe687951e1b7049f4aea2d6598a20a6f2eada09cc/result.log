Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:AnyPaymentReceiver
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:CheckedERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:IERC20
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:IKyberNetwork
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:IndexedMerkleProof
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:InstaLend
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:Ownable
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:QRToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'AnyPaymentReceiver':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(645)

[33mWarning[0m for UnrestrictedWrite in contract 'AnyPaymentReceiver':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(627)

[33mWarning[0m for UnrestrictedWrite in contract 'AnyPaymentReceiver':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(645)

[31mViolation[0m for LockedEther in contract 'InstaLend':
    |
    |
  > |contract InstaLend {
    |    using SafeMath for uint;
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(194)

[31mViolation[0m for RepeatedCall in contract 'InstaLend':
    |        uint256[] memory prevAmounts = new uint256[](tokens.length);
    |        for (uint i = 0; i < tokens.length; i++) {
  > |            prevAmounts[i] = tokens[i].balanceOf(address(this));
    |            require(tokens[i].transfer(target, amounts[i]));
    |        }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(233)

[31mViolation[0m for RepeatedCall in contract 'InstaLend':
    |        for (uint i = 0; i < tokens.length; i++) {
    |            prevAmounts[i] = tokens[i].balanceOf(address(this));
  > |            require(tokens[i].transfer(target, amounts[i]));
    |        }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(234)

[31mViolation[0m for RepeatedCall in contract 'InstaLend':
    |        for (uint i = 0; i < tokens.length; i++) {
    |            uint256 expectedFees = amounts[i].mul(_feesPercent).div(100);
  > |            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));
    |            if (_feesReceiver != address(this)) {
    |                require(tokens[i].transfer(_feesReceiver, expectedFees));
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(244)

[31mViolation[0m for RepeatedCall in contract 'InstaLend':
    |            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));
    |            if (_feesReceiver != address(this)) {
  > |                require(tokens[i].transfer(_feesReceiver, expectedFees));
    |            }
    |        }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(246)

[33mWarning[0m for RepeatedCall in contract 'InstaLend':
    |
    |        // Perform arbitrary call
  > |        (bool res,) = target.call(data);    // solium-disable-line security/no-low-level-calls
    |        require(res, "Invalid arbitrary call");
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(238)

[31mViolation[0m for UnrestrictedWrite in contract 'InstaLend':
    |        notInLendingMode
    |    {
  > |        _inLendingMode = true;
    |
    |        // Backup original balances and lend tokens
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(228)

[31mViolation[0m for UnrestrictedWrite in contract 'InstaLend':
    |        }
    |
  > |        _inLendingMode = false;
    |    }
    |}
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(250)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        uint256[] memory prevAmounts = new uint256[](tokens.length);
    |        for (uint i = 0; i < tokens.length; i++) {
  > |            prevAmounts[i] = tokens[i].balanceOf(address(this));
    |            require(tokens[i].transfer(target, amounts[i]));
    |        }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(233)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        for (uint i = 0; i < tokens.length; i++) {
    |            prevAmounts[i] = tokens[i].balanceOf(address(this));
  > |            require(tokens[i].transfer(target, amounts[i]));
    |        }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(234)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        for (uint i = 0; i < tokens.length; i++) {
    |            uint256 expectedFees = amounts[i].mul(_feesPercent).div(100);
  > |            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));
    |            if (_feesReceiver != address(this)) {
    |                require(tokens[i].transfer(_feesReceiver, expectedFees));
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(244)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |            require(tokens[i].balanceOf(address(this)) >= prevAmounts[i].add(expectedFees));
    |            if (_feesReceiver != address(this)) {
  > |                require(tokens[i].transfer(_feesReceiver, expectedFees));
    |            }
    |        }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(246)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        require(isContract(token));
    |        // solium-disable-next-line security/no-low-level-calls
  > |        (bool res,) = address(token).call(abi.encodeWithSignature("transfer(address,uint256)", to, value));
    |        require(res);
    |        return handleReturnBool();
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(502)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        require(isContract(token));
    |        // solium-disable-next-line security/no-low-level-calls
  > |        (bool res,) = address(token).call(abi.encodeWithSignature("transferFrom(address,address,uint256)", from, to, value));
    |        require(res);
    |        return handleReturnBool();
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(510)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |        require(isContract(token));
    |        // solium-disable-next-line security/no-low-level-calls
  > |        (bool res,) = address(token).call(abi.encodeWithSignature("approve(address,uint256)", spender, value));
    |        require(res);
    |        return handleReturnBool();
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(518)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |    function checkedTransfer(IERC20 token, address to, uint256 value) internal {
    |        if (value > 0) {
  > |            uint256 balance = token.balanceOf(address(this));
    |            asmTransfer(token, to, value);
    |            require(token.balanceOf(address(this)) == balance.sub(value), "checkedTransfer: Final balance didn't match");
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(527)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |            uint256 balance = token.balanceOf(address(this));
    |            asmTransfer(token, to, value);
  > |            require(token.balanceOf(address(this)) == balance.sub(value), "checkedTransfer: Final balance didn't match");
    |        }
    |    }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(529)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |            uint256 toBalance = token.balanceOf(to);
    |            asmTransferFrom(token, from, to, value);
  > |            require(token.balanceOf(to) == toBalance.add(value), "checkedTransfer: Final balance didn't match");
    |        }
    |    }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(537)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |
    |        require(IERC20(paymentToken).asmApprove(address(kyber), paymentAmount));
  > |        kyber.trade(
    |            paymentToken,
    |            paymentAmount,
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(676)

[31mViolation[0m for RepeatedCall in contract 'QRToken':
    |
    |        uint256 gotEther = _processPayment(kyber, address(distribution.token), fee);
  > |        msg.sender.transfer(gotEther);
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(814)

[33mWarning[0m for RepeatedCall in contract 'QRToken':
    |
    |        // Perform arbitrary call
  > |        (bool res,) = target.call(data);    // solium-disable-line security/no-low-level-calls
    |        require(res, "Invalid arbitrary call");
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(238)

[31mViolation[0m for TODAmount in contract 'QRToken':
    |
    |        uint256 gotEther = _processPayment(kyber, address(distribution.token), fee);
  > |        msg.sender.transfer(gotEther);
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(814)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'QRToken':
    |
    |        uint256 gotEther = _processPayment(kyber, address(distribution.token), fee);
  > |        msg.sender.transfer(gotEther);
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(814)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        notInLendingMode
    |    {
  > |        _inLendingMode = true;
    |
    |        // Backup original balances and lend tokens
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(228)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        }
    |
  > |        _inLendingMode = false;
    |    }
    |}
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |
    |
  > |contract QRToken is InstaLend, AnyPaymentReceiver {
    |    using SafeMath for uint;
    |    using ECDSA for bytes;
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(704)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        token.checkedTransferFrom(msg.sender, address(this), sumTokenAmount);
    |        Distribution storage distribution = distributions[root];
  > |        distribution.token = token;
    |        distribution.sumAmount = sumTokenAmount;
    |        distribution.codesCount = codesCount;
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(749)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        Distribution storage distribution = distributions[root];
    |        distribution.token = token;
  > |        distribution.sumAmount = sumTokenAmount;
    |        distribution.codesCount = codesCount;
    |        distribution.deadline = deadline;
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(750)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        distribution.token = token;
    |        distribution.sumAmount = sumTokenAmount;
  > |        distribution.codesCount = codesCount;
    |        distribution.deadline = deadline;
    |        distribution.sponsor = msg.sender;
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(751)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        distribution.sumAmount = sumTokenAmount;
    |        distribution.codesCount = codesCount;
  > |        distribution.deadline = deadline;
    |        distribution.sponsor = msg.sender;
    |    }
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(752)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        distribution.codesCount = codesCount;
    |        distribution.deadline = deadline;
  > |        distribution.sponsor = msg.sender;
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(753)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);
    |
  > |        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));
    |        distribution.token.checkedTransfer(msg.sender, distribution.sumAmount.div(distribution.codesCount));
    |        emit Redeemed(root, index, msg.sender);
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(788)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        require(distribution.bitMask[index / 32] & (1 << (index % 32)) == 0);
    |
  > |        distribution.bitMask[index / 32] = distribution.bitMask[index / 32] | (1 << (index % 32));
    |        uint256 reward = distribution.sumAmount.div(distribution.codesCount);
    |        uint256 fee = reward.mul(feePrecent).div(100);
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(807)

[33mWarning[0m for UnrestrictedWrite in contract 'QRToken':
    |        }
    |        distribution.token.checkedTransfer(distribution.sponsor, distribution.sumAmount.sub(count));
  > |        delete distributions[root];
    |    }
    |
  at /unique_contracts/0xe687951e1b7049f4aea2d6598a20a6f2eada09cc.sol(831)