Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:ABToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:AccessControl
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:ERC165
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:ERC721Receiver
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:IERC165
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:IERC721
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:IERC721Receiver
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:OwnableDelegateProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:ProxyRegistry
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:Strings
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol:iABToken
[31mViolation[0m for TODAmount in contract 'ABToken':
    |
    |   function withdrawEther() external onlyCREATOR {
  > |    creatorAddress.transfer(address(this).balance);
    |}
    |
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(605)

[31mViolation[0m for TODReceiver in contract 'ABToken':
    |
    |   function withdrawEther() external onlyCREATOR {
  > |    creatorAddress.transfer(address(this).balance);
    |}
    |
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(605)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    | * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md
    | */
  > |contract ABToken is IERC721, iABToken, ERC165 {
    |    using SafeMath for uint256;
    |    using SafeMath for uint8;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(396)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |     
    |    for (i=6; i<15; i++) {
  > |        maxTokenNumbers[i]= 45;
    |    }
    |     for (i=15; i<24; i++) {
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |    }
    |     for (i=15; i<24; i++) {
  > |        maxTokenNumbers[i]= 65;
    |    }
    |   
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(514)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |     uint i = 0;
    |     for (i=43; i<60; i++) {
  > |        maxTokenNumbers[i]= 200;
    |    }
    |}
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(524)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        require(_cardSeriesId <100);
    |           ABCard storage abcard = ABTokenCollection[totalTokens];
  > |           abcard.power = _power;
    |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(784)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           ABCard storage abcard = ABTokenCollection[totalTokens];
    |           abcard.power = _power;
  > |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(785)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.power = _power;
    |           abcard.cardSeriesId= _cardSeriesId;
  > |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
    |           abcard.auraBlue= _auraBlue;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(786)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
  > |           abcard.auraYellow= _auraYellow;
    |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(787)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
  > |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
    |           abcard.experience = _experience;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(788)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
  > |           abcard.experience = _experience;
    |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(790)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.name = _name;
    |           abcard.experience = _experience;
  > |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.experience = _experience;
    |           abcard.tokenId = totalTokens;
  > |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
  > |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
    |           abcard.oldId = _oldId;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(793)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
  > |           abcard.lastBattleResult = 0;
    |           abcard.oldId = _oldId;
    |           _mint(owner, totalTokens);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(794)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
  > |           abcard.oldId = _oldId;
    |           _mint(owner, totalTokens);
    |           totalTokens = totalTokens +1;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(795)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        require(_cardSeriesId <100);
    |           ABCard storage abcard = ABTokenCollection[totalTokens];
  > |           abcard.power = _power;
    |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(805)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           ABCard storage abcard = ABTokenCollection[totalTokens];
    |           abcard.power = _power;
  > |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(806)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.power = _power;
    |           abcard.cardSeriesId= _cardSeriesId;
  > |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
    |           abcard.auraBlue= _auraBlue;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(807)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.cardSeriesId= _cardSeriesId;
    |           abcard.auraRed = _auraRed;
  > |           abcard.auraYellow= _auraYellow;
    |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(808)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.auraRed = _auraRed;
    |           abcard.auraYellow= _auraYellow;
  > |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
    |           abcard.experience = _experience;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(809)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.auraBlue= _auraBlue;
    |           abcard.name = _name;
  > |           abcard.experience = _experience;
    |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(811)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.name = _name;
    |           abcard.experience = _experience;
  > |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(812)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.experience = _experience;
    |           abcard.tokenId = totalTokens;
  > |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(813)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.tokenId = totalTokens;
    |           abcard.lastBattleTime = uint64(now);
  > |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
    |           abcard.oldId = _oldId;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(814)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.lastBattleTime = uint64(now);
    |           abcard.lastBreedingTime = uint64(now);
  > |           abcard.lastBattleResult = 0;
    |           abcard.oldId = _oldId;
    |           _mint(owner, totalTokens);
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(815)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |           abcard.lastBreedingTime = uint64(now);
    |           abcard.lastBattleResult = 0;
  > |           abcard.oldId = _oldId;
    |           _mint(owner, totalTokens);
    |           totalTokens = totalTokens +1;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(816)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.auraRed = _red;
    |            abcard.auraYellow = _yellow;
    |            abcard.auraBlue = _blue;
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(942)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        if (abcard.tokenId == tokenId) {
    |            abcard.auraRed = _red;
  > |            abcard.auraYellow = _yellow;
    |            abcard.auraBlue = _blue;
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(943)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |            abcard.auraRed = _red;
    |            abcard.auraYellow = _yellow;
  > |            abcard.auraBlue = _blue;
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(944)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.experience = _experience;
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(959)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.lastBattleResult = _result;
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(966)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.lastBattleTime = uint64(now);
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(973)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.lastBreedingTime = uint64(now);
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(980)

[33mWarning[0m for UnrestrictedWrite in contract 'ABToken':
    |        ABCard storage abcard = ABTokenCollection[tokenId];
    |        if (abcard.tokenId == tokenId) {
  > |            abcard.oldId = _oldId;
    |    }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(987)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessControl':
    |    function addSERAPHIM(address _newSeraphim) onlyCREATOR public {
    |        if (seraphims[_newSeraphim] == false) {
  > |            seraphims[_newSeraphim] = true;
    |            totalSeraphims += 1;
    |        }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessControl':
    |        if (seraphims[_newSeraphim] == false) {
    |            seraphims[_newSeraphim] = true;
  > |            totalSeraphims += 1;
    |        }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessControl':
    |    function removeSERAPHIM(address _oldSeraphim) onlyCREATOR public {
    |        if (seraphims[_oldSeraphim] == true) {
  > |            seraphims[_oldSeraphim] = false;
    |            totalSeraphims -= 1;
    |        }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessControl':
    |        if (seraphims[_oldSeraphim] == true) {
    |            seraphims[_oldSeraphim] = false;
  > |            totalSeraphims -= 1;
    |        }
    |    }
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(90)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessControl':
    |
    |    function updateMaintenanceMode(bool _isMaintaining) onlyCREATOR public {
  > |        isMaintenanceMode = _isMaintaining;
    |    }
    |
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(95)

[31mViolation[0m for MissingInputValidation in contract 'ProxyRegistry':
    |
    |contract ProxyRegistry {
  > |    mapping(address => OwnableDelegateProxy) public proxies;
    |}
    |contract iABToken is AccessControl{
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(340)

[31mViolation[0m for LockedEther in contract 'SafeMath':
    | * @dev Unsigned math operations with safety checks that revert on error
    | */
  > |library SafeMath {
    |    /**
    |    * @dev Multiplies two unsigned integers, reverts on overflow.
  at /unique_chucks/18/0xdc32ff5aada11b5ce3caf2d00459cfda05293f96.sol(107)