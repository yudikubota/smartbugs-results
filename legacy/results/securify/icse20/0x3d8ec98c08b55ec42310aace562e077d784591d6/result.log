Processing contract: /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol:ERC20Token
Processing contract: /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol:Meritocracy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'Meritocracy':
    |                c.allocation = 0;
    |                // WARN: Should totalReceived and totalForfeited be zeroed-out? 
  > |                token.transfer(c.addr, r); // Transfer any owed tokens to contributor 
    |        }
    |        lastForfeit = block.timestamp;
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(344)

[31mViolation[0m for RepeatedCall in contract 'Meritocracy':
    |    function escape() public onlyOwner {
    |        // Body
  > |        token.transfer(owner,  token.balanceOf(address(this)));
    |        owner.transfer(address(this).balance);
    |        emit EscapeHatchTriggered(msg.sender);
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(354)

[31mViolation[0m for TODAmount in contract 'Meritocracy':
    |        // Body
    |        token.transfer(owner,  token.balanceOf(address(this)));
  > |        owner.transfer(address(this).balance);
    |        emit EscapeHatchTriggered(msg.sender);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(355)

[31mViolation[0m for TODReceiver in contract 'Meritocracy':
    |        // Body
    |        token.transfer(owner,  token.balanceOf(address(this)));
  > |        owner.transfer(address(this).balance);
    |        emit EscapeHatchTriggered(msg.sender);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(355)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |
    |/*
  > |Future Goals:
    |- remove admins necessity
    |- encourage contributors to allocate
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |}
    |
  > |contract Meritocracy {
    |
    |    struct Status {
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        // cAllocator.inPot = true;
    |        for (uint256 i = 0; i < registry.length; i++) {
  > |               contributors[registry[i]].allocation += individualAmount;
    |        }
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        });
    |
  > |        cReceiver.status.push(s); // Record the history
    |        emit ContributorTransaction(cSender.addr, cReceiver.addr);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        // Body
    |        Contributor storage c = contributors[_contributor];
  > |        c.addr = _contributor;
    |        registry.push(_contributor);
    |        emit ContributorAdded(_contributor);
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        Contributor storage c = contributors[_contributor];
    |        c.addr = _contributor;
  > |        registry.push(_contributor);
    |        emit ContributorAdded(_contributor);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        address c = registry[idx];
    |        // Swap & Pop!
  > |        registry[idx] = registry[registryLength];
    |        registry.pop();
    |        delete contributors[c]; // TODO check if this works
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        // Swap & Pop!
    |        registry[idx] = registry[registryLength];
  > |        registry.pop();
    |        delete contributors[c]; // TODO check if this works
    |        emit ContributorRemoved(c);
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        registry[idx] = registry[registryLength];
    |        registry.pop();
  > |        delete contributors[c]; // TODO check if this works
    |        emit ContributorRemoved(c);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(281)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        require(_maxContributors > registry.length); // have to removeContributor first
    |        // Body
  > |        maxContributors = _maxContributors;
    |        emit MaxContributorsChanged(maxContributors);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        require(block.timestamp >= lastForfeit + 1 weeks); // prevents admins accidently calling too quickly.
    |        // Body
  > |        lastForfeit = block.timestamp; 
    |        for (uint256 i = 0; i < registryLength; i++) { // should never be longer than maxContributors, see addContributor
    |                Contributor storage c = contributors[registry[i]];
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        for (uint256 i = 0; i < registryLength; i++) { // should never be longer than maxContributors, see addContributor
    |                Contributor storage c = contributors[registry[i]];
  > |                c.totalForfeited += c.allocation; // Shaaaaame!
    |                c.allocation = 0;
    |                // cReceiver.inPot = false; // Contributor has to put tokens into next round
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |                Contributor storage c = contributors[registry[i]];
    |                c.totalForfeited += c.allocation; // Shaaaaame!
  > |                c.allocation = 0;
    |                // cReceiver.inPot = false; // Contributor has to put tokens into next round
    |        }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |                Contributor storage c = contributors[registry[i]];
    |                uint256 r =  c.received;
  > |                c.received = 0;
    |                c.allocation = 0;
    |                // WARN: Should totalReceived and totalForfeited be zeroed-out? 
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |                uint256 r =  c.received;
    |                c.received = 0;
  > |                c.allocation = 0;
    |                // WARN: Should totalReceived and totalForfeited be zeroed-out? 
    |                token.transfer(c.addr, r); // Transfer any owed tokens to contributor 
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |                token.transfer(c.addr, r); // Transfer any owed tokens to contributor 
    |        }
  > |        lastForfeit = block.timestamp;
    |        token = ERC20Token(_token);
    |        emit TokenChanged(_token);
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(346)

[33mWarning[0m for UnrestrictedWrite in contract 'Meritocracy':
    |        }
    |        lastForfeit = block.timestamp;
  > |        token = ERC20Token(_token);
    |        emit TokenChanged(_token);
    |    }
  at /unique_chucks/12/0x3d8ec98c08b55ec42310aace562e077d784591d6.sol(347)