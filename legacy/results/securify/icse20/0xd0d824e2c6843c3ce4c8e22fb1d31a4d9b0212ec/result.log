Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:ERC20Detailed
Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:IERC20
Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:Multiownable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol:vUSD
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Multiownable':
    |
    |
  > |contract Multiownable {
    |
    |    // VARIABLES
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(325)

[33mWarning[0m for UnrestrictedWrite in contract 'Multiownable':
    |        // Reset owners reverse lookup table
    |        for (uint j = 0; j < owners.length; j++) {
  > |            delete ownersIndices[owners[j]];
    |        }
    |        for (uint i = 0; i < newOwners.length; i++) {
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(551)

[33mWarning[0m for UnrestrictedWrite in contract 'Multiownable':
    |            require(newOwners[i] != address(0), "transferOwnershipWithHowMany: owners array contains zero");
    |            require(ownersIndices[newOwners[i]] == 0, "transferOwnershipWithHowMany: owners array contains duplicates");
  > |            ownersIndices[newOwners[i]] = i + 1;
    |        }
    |        
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'Multiownable':
    |        emit OwnershipTransferred(owners, howManyOwnersDecide, newOwners, newHowManyOwnersDecide);
    |        owners = newOwners;
  > |        howManyOwnersDecide = newHowManyOwnersDecide;
    |        allOperations.length = 0;
    |        ownersGeneration++;
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(561)

[31mViolation[0m for LockedEther in contract 'vUSD':
    |}
    |
  > |contract vUSD is ERC20, ERC20Detailed, Multiownable {    
    |    address public operator;
    |    uint256 public availableForMinting = 0;
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(568)

[33mWarning[0m for UnrestrictedWrite in contract 'vUSD':
    |        // Reset owners reverse lookup table
    |        for (uint j = 0; j < owners.length; j++) {
  > |            delete ownersIndices[owners[j]];
    |        }
    |        for (uint i = 0; i < newOwners.length; i++) {
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(551)

[33mWarning[0m for UnrestrictedWrite in contract 'vUSD':
    |            require(newOwners[i] != address(0), "transferOwnershipWithHowMany: owners array contains zero");
    |            require(ownersIndices[newOwners[i]] == 0, "transferOwnershipWithHowMany: owners array contains duplicates");
  > |            ownersIndices[newOwners[i]] = i + 1;
    |        }
    |        
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'vUSD':
    |        emit OwnershipTransferred(owners, howManyOwnersDecide, newOwners, newHowManyOwnersDecide);
    |        owners = newOwners;
  > |        howManyOwnersDecide = newHowManyOwnersDecide;
    |        allOperations.length = 0;
    |        ownersGeneration++;
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(561)

[33mWarning[0m for UnrestrictedWrite in contract 'vUSD':
    |}
    |
  > |contract vUSD is ERC20, ERC20Detailed, Multiownable {    
    |    address public operator;
    |    uint256 public availableForMinting = 0;
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(568)

[33mWarning[0m for UnrestrictedWrite in contract 'vUSD':
    |
    |    function disableOperator() public onlyOperator {
  > |        operator = address(0);
    |        emit OperatorDisabled();
    |    }
  at /unique_chucks/15/0xd0d824e2c6843c3ce4c8e22fb1d31a4d9b0212ec.sol(591)