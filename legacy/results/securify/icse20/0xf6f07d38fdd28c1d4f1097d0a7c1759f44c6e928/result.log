Processing contract: /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol:IERC721
Processing contract: /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol:Wizards
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    
    |    // increment game ids
  > |    ids++;
    |
    |    // add game details
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(55)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |
    |    // add game details
  > |    games[ids].id = ids;
    |    games[ids].player1 = msg.sender;
    |    games[ids].player1TokenId = tokenId;
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    // add game details
    |    games[ids].id = ids;
  > |    games[ids].player1 = msg.sender;
    |    games[ids].player1TokenId = tokenId;
    |    games[ids].player1SpellHash = spellHash;
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(59)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    games[ids].id = ids;
    |    games[ids].player1 = msg.sender;
  > |    games[ids].player1TokenId = tokenId;
    |    games[ids].player1SpellHash = spellHash;
    |    
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(60)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    games[ids].player1 = msg.sender;
    |    games[ids].player1TokenId = tokenId;
  > |    games[ids].player1SpellHash = spellHash;
    |    
    |    emit GameUpdate(ids);
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(61)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |
    |    // update game details
  > |    game.player2 = msg.sender;
    |    game.player2TokenId = tokenId;
    |    game.player2Spell = player2Spell;
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    // update game details
    |    game.player2 = msg.sender;
  > |    game.player2TokenId = tokenId;
    |    game.player2Spell = player2Spell;
    |    game.timer = now;
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(88)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    game.player2 = msg.sender;
    |    game.player2TokenId = tokenId;
  > |    game.player2Spell = player2Spell;
    |    game.timer = now;
    |    
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(89)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    game.player2TokenId = tokenId;
    |    game.player2Spell = player2Spell;
  > |    game.timer = now;
    |    
    |    emit GameUpdate(gameId);
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    
    |    // set player 1 spell
  > |    game.player1Spell = player1Spell;
    |    
    |    uint8 player2Spell = game.player2Spell;
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(113)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |    if (player1Spell == player2Spell) {
    |      // draw
  > |      game.winner = address(this);
    |      // TODO: return wizards to rightful owners
    |      // wizards.transferFrom(address(this), game.player1, game.player1TokenId);
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(121)

[31mViolation[0m for UnrestrictedWrite in contract 'Wizards':
    |  function _winner(uint256 gameId, address winner) internal {
    |    Game storage game = games[gameId];
  > |    game.winner = winner;
    |    // wizards.transferFrom(address(this), winner, game.player2TokenId);
    |    // wizards.transferFrom(address(this), winner, game.player1TokenId);
  at /unique_chucks/24/0xf6f07d38fdd28c1d4f1097d0a7c1759f44c6e928.sol(183)