Processing contract: /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol:Adminstrator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol:FiftyContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Adminstrator':
    |  }
    |
  > |  function transferAdmin(address newAdmin) public onlyAdmin {
    |    admin = newAdmin; 
    |  }
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'Adminstrator':
    |
    |  function transferAdmin(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(34)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		emit startTree(sender, nodeIDIndex[sender][newTreeType] - 1, newTreeType);
    |		if(reminder>0){
  > |			sender.transfer(reminder);
    |			sentAmount +=reminder;
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(210)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(258)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(264)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(264)

[31mViolation[0m for TODAmount in contract 'FiftyContract':
    |    function withdrawAll() public onlyAdmin returns(bool) {
    |        uint balanceOld = address(this).balance;
  > |        owner.transfer(balanceOld);
    |        return true;
    |    }
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(138)

[31mViolation[0m for TODAmount in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(258)

[31mViolation[0m for TODAmount in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(264)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |		emit startTree(sender, nodeIDIndex[sender][newTreeType] - 1, newTreeType);
    |		if(reminder>0){
  > |			sender.transfer(reminder);
    |			sentAmount +=reminder;
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(210)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |        return true;
    |    }
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(133)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |    function withdrawAll() public onlyAdmin returns(bool) {
    |        uint balanceOld = address(this).balance;
  > |        owner.transfer(balanceOld);
    |        return true;
    |    }
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(138)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(258)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(264)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		emit startTree(sender, nodeIDIndex[sender][newTreeType] - 1, newTreeType);
    |		if(reminder>0){
  > |			sender.transfer(reminder);
    |			sentAmount +=reminder;
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(210)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(258)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(264)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |        return true;
    |    }
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(133)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		currentNodes[sender][newTreeType] = true;
    |		nodeIDIndex[sender][newTreeType] += 1;
  > |		receivedAmount += msg.value;
    |		emit startTree(sender, nodeIDIndex[sender][newTreeType] - 1, newTreeType);
    |		if(reminder>0){
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(reminder>0){
    |			sender.transfer(reminder);
  > |			sentAmount +=reminder;
    |		}
    |		nodeActionHistory[sender][nodeLatestAction[sender]] = nodeAction(nodeActionType.startTree,0,newTreeType);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(211)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		//If this has been searched before
    |		if(tempSearchRefer[treeRoot] == firstUpline || firstUpline == owner) return;
  > |		if(o.isDirectParent) tempDirRefer[treeRoot][treeType][treeNodeID] = firstUpline;
    |		//Now check its parent for a place for node
    |		rewardDistribution memory rewardResult = _placeChildTree(firstUpline,treeType,treeRoot,treeNodeID);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(237)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.first == address(0)){
    |			//Search not successful, find upline
  > |			tempSearchRefer[treeRoot] = firstUpline;
    |			string memory queryStr = strConcating(websiteGrand,result);
    |			emit makeQuery(msg.sender,"Oraclize query sent");
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(242)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			return;
    |		}
  > |		tempSearchRefer[treeRoot] = address(0);
    |		emit assignTreeNode(treeRoot,treeNodeID,treeType,rewardResult.first);
    |		//Distribute the award
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(250)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.first != address(0)){
    |			rewardResult.first.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(259)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
  > |			nodeReceivedETH[rewardResult.first] += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
    |		} 
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(260)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.second != address(0)){
    |			rewardResult.second.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(265)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
  > |			nodeReceivedETH[rewardResult.second] += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(266)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			getETHOne=firstUpline;
    |			uint cNodeID=nodeIDIndex[firstUpline][treeType] - 1;
  > |			nodeActionHistory[getETHOne][nodeLatestAction[getETHOne]] = nodeAction(nodeActionType.addNode,1,treeType);
    |			nodeLatestAction[getETHOne] +=1;
    |			//So the firstUpline will get the money, as well as the parent of the firstUpline
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			uint cNodeID=nodeIDIndex[firstUpline][treeType] - 1;
    |			nodeActionHistory[getETHOne][nodeLatestAction[getETHOne]] = nodeAction(nodeActionType.addNode,1,treeType);
  > |			nodeLatestAction[getETHOne] +=1;
    |			//So the firstUpline will get the money, as well as the parent of the firstUpline
    |			if(treeParent[firstUpline][treeType][cNodeID].nodeType != 0){
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			if(treeParent[firstUpline][treeType][cNodeID].nodeType != 0){
    |				getETHTwo = treeParent[firstUpline][treeType][cNodeID].ethAddress;
  > |				nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
    |				nodeLatestAction[getETHTwo] +=1;
    |			}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(284)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |				getETHTwo = treeParent[firstUpline][treeType][cNodeID].ethAddress;
    |				nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
  > |				nodeLatestAction[getETHTwo] +=1;
    |			}
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(285)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |							//So the child of firstUpline will get the money, as well as the child
    |							getETHTwo = firstUpline;
  > |							nodeActionHistory[getETHOne][nodeLatestAction[getETHOne]] = nodeAction(nodeActionType.addNode,1,treeType);
    |							nodeLatestAction[getETHOne] +=1;
    |							nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(301)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |							getETHTwo = firstUpline;
    |							nodeActionHistory[getETHOne][nodeLatestAction[getETHOne]] = nodeAction(nodeActionType.addNode,1,treeType);
  > |							nodeLatestAction[getETHOne] +=1;
    |							nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
    |							nodeLatestAction[getETHTwo] +=1;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(302)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |							nodeActionHistory[getETHOne][nodeLatestAction[getETHOne]] = nodeAction(nodeActionType.addNode,1,treeType);
    |							nodeLatestAction[getETHOne] +=1;
  > |							nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
    |							nodeLatestAction[getETHTwo] +=1;
    |						}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(303)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |							nodeLatestAction[getETHOne] +=1;
    |							nodeActionHistory[getETHTwo][nodeLatestAction[getETHTwo]] = nodeAction(nodeActionType.addNode,2,treeType);
  > |							nodeLatestAction[getETHTwo] +=1;
    |						}
    |					}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(304)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |				if(treeChildren[firstUpline][treeType][cNodeID][i].nodeType == 0){
    |					//firstUpline has a place
  > |					treeChildren[firstUpline][treeType][cNodeID][i]
    |						= treeNode(treeRoot,treeType,treeNodeID,false);
    |					//Set parent
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(319)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |						= treeNode(treeRoot,treeType,treeNodeID,false);
    |					//Set parent
  > |					treeParent[treeRoot][treeType][treeNodeID] 
    |						= treeNode(firstUpline,treeType,cNodeID,false);
    |					_checkTreeComplete(firstUpline,treeType,cNodeID);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(322)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(!_isCompleted) return;
    |		//The tree is completed, root can start over again
  > |		currentNodes[_root][_treeType] = false;
    |		//Ban this user
    |		if(_isDirectRefCount <= minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(363)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		currentNodes[_root][_treeType] = false;
    |		//Ban this user
  > |		if(_isDirectRefCount <= minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
    |		nodeActionHistory[_root][nodeLatestAction[_root]] = nodeAction(nodeActionType.completeTree,0,_treeType);
    |		nodeLatestAction[_root] +=1;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(365)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		//Ban this user
    |		if(_isDirectRefCount <= minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
  > |		nodeActionHistory[_root][nodeLatestAction[_root]] = nodeAction(nodeActionType.completeTree,0,_treeType);
    |		nodeLatestAction[_root] +=1;
    |	}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(366)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(_isDirectRefCount <= minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
    |		nodeActionHistory[_root][nodeLatestAction[_root]] = nodeAction(nodeActionType.completeTree,0,_treeType);
  > |		nodeLatestAction[_root] +=1;
    |	}
    |    function strConcating(string memory _a, string memory _b) internal pure returns (string memory){
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(367)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |  }
    |}
  > |contract FiftyContract is Adminstrator {//,usingOraclize {
    |    uint public mRate = 150 finney; //membership fee
    |	uint public membershiptime = 183 * 86400; //183 days, around 0.5 year
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		website = web;
    |		websiteGrand = webGrand;
  > |		minTreeType = minTreeSize;
    |		maxTreeType = maxTreeSize;
    |	}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		websiteGrand = webGrand;
    |		minTreeType = minTreeSize;
  > |		maxTreeType = maxTreeSize;
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		//bytes32 queryId=oraclize_query("URL", queryStr, 600000);
    |		bytes32 queryId=bytes32("AAA");
  > |        oraclizeCallbacks[queryId] = 
    |			treeNode(msg.sender,newTreeType,nodeIDIndex[msg.sender][newTreeType] - 1,true);
    |	}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			//bytes32 queryId=oraclize_query("URL", queryStr, 600000);
    |			bytes32 queryId=bytes32("BBB");
  > |            oraclizeCallbacks[queryId] = treeNode(treeRoot,treeType,treeNodeID,false);            
    |			return;
    |		}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(247)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |
    |  function transferAdmin(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(34)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newMrate > 0, "new rate must be positive");
    |		require(newTime > 0, "new membership time must be positive");
  > |		mRate = newMrate * 10 ** uint256(15); //In finney
    |		membershiptime = newTime * 86400; //In days
    |		
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(106)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTime > 0, "new membership time must be positive");
    |		mRate = newMrate * 10 ** uint256(15); //In finney
  > |		membershiptime = newTime * 86400; //In days
    |		
    |	}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newDivideRate > 1, "new divide level must > 1");
    |		require(newTreeNodeReferred > 1, "new min tree nodes referred by root must > 1");
  > |		spread = newSpread;
    |		divideRadio = newDivideRate;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTreeNodeReferred > 1, "new min tree nodes referred by root must > 1");
    |		spread = newSpread;
  > |		divideRadio = newDivideRate;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		spread = newSpread;
    |		divideRadio = newDivideRate;
  > |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
    |	function setWebAndTreeType(string memory web, string memory webGrand, uint minTreeSize, uint maxTreeSize) public onlyAdmin{
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  > |		paused = isPause;
    |		if(isPause) emit Paused(msg.sender);
    |		else emit Unpaused(msg.sender);
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	function banMember(address member) public onlyAdmin {
    |		require(member != address(0));
  > |		membership[member] = 0;
    |	}
    |	function checkMemberShip(address member) public view returns(uint) {
  at /unique_chucks/19/0x406d29c3a96864e4d159287f9bd582767a90f8d0.sol(155)