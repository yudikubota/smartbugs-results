Processing contract: /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol:ERC20CompatibleToken
Processing contract: /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol:RecurringBillingContractFactory
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol:TokenRecurringBilling
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'RecurringBillingContractFactory':
    |    event NewRecurringBillingContractCreated(address token, address recurringBillingContract);
    |
  > |    function newRecurringBillingContract (address tokenAddress) public returns (address recurringBillingContractAddress) {
    |        TokenRecurringBilling rb = new TokenRecurringBilling(tokenAddress);
    |        emit NewRecurringBillingContractCreated(tokenAddress, address(rb));
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(57)

[31mViolation[0m for RepeatedCall in contract 'TokenRecurringBilling':
    |
    |        require(
  > |            token.transferFrom(billingRecord.customer, merchantRegistry[merchantId].beneficiary, value),
    |            "Unable to charge customer"
    |        );
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(214)

[31mViolation[0m for RepeatedCall in contract 'TokenRecurringBilling':
    |        require(period < now, "Invalid period specified");
    |        require(token.balanceOf(customer) >= value, "Not enough tokens for the first charge");
  > |        require(token.allowance(customer, address(this)) >= value, "Tokens are not approved for this smart contract");
    |        require(billingRegistry[billingId].customer == address(0x0), "Recurring billing with this ID is already registered");
    |
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecurringBilling':
    |    function registerNewMerchant (address beneficiary, address chargingAccount) public returns (uint256 merchantId) {
    |
  > |        merchantId = ++lastMerchantId;
    |        Merchant storage record = merchantRegistry[merchantId];
    |        record.merchant = msg.sender;
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecurringBilling':
    |        merchantId = ++lastMerchantId;
    |        Merchant storage record = merchantRegistry[merchantId];
  > |        record.merchant = msg.sender;
    |        record.beneficiary = beneficiary;
    |        emit MerchantRegistered(merchantId, msg.sender, beneficiary);
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecurringBilling':
    |        Merchant storage record = merchantRegistry[merchantId];
    |        record.merchant = msg.sender;
  > |        record.beneficiary = beneficiary;
    |        emit MerchantRegistered(merchantId, msg.sender, beneficiary);
    |
  at /unique_chucks/40/0xdcc90d21186e9c1b60439fdbf88f0f14ad3a7355.sol(182)