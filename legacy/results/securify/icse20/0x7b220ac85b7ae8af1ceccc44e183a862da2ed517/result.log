Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:Abilitable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:AddressUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:ERC165
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:ERC721
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:ERC721Enumerable
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:ERC721Metadata
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:ERC721TokenReceiver
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:NFTokenMetadataEnumerable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:OrderGateway
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle2371041049291379096/mustExplicit -j 1 -F /tmp/souffle-bd18c264-83d1-443d-8a1d-d275dccb1ec0 -D /tmp/souffle-bd18c264-83d1-443d-8a1d-d275dccb1ec0_OUT
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:Proxy
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:OrderGateway
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:SupportsInterface
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:Xcert
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertBurnable
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertCreateProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertMutable
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertPausable
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertRevokable
Processing contract: /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol:XcertToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Abilitable':
    |    hasAbilities(SUPER_ABILITY)
    |  {
  > |    addressToAbility[_target] |= _abilities;
    |    emit GrantAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'Abilitable':
    |      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);
    |    }
  > |    addressToAbility[_target] &= ~_abilities;
    |    emit RevokeAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(384)

[31mViolation[0m for LockedEther in contract 'NFTokenMetadataEnumerable':
    | * @dev Optional metadata enumerable implementation for ERC-721 non-fungible token standard.
    | */
  > |contract NFTokenMetadataEnumerable is
    |  ERC721,
    |  ERC721Metadata,
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(792)

[31mViolation[0m for RepeatedCall in contract 'NFTokenMetadataEnumerable':
    |    {
    |      require(
  > |        ERC721TokenReceiver(_to)
    |          .onERC721Received(msg.sender, _from, _tokenId, _data) == MAGIC_ON_ERC721_RECEIVED,
    |        NOT_ABLE_TO_RECEIVE_NFT
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1360)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataEnumerable':
    | * @dev Optional metadata enumerable implementation for ERC-721 non-fungible token standard.
    | */
  > |contract NFTokenMetadataEnumerable is
    |  ERC721,
    |  ERC721Metadata,
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertCreateProxy':
    |    hasAbilities(SUPER_ABILITY)
    |  {
  > |    addressToAbility[_target] |= _abilities;
    |    emit GrantAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertCreateProxy':
    |      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);
    |    }
  > |    addressToAbility[_target] &= ~_abilities;
    |    emit RevokeAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(384)

[31mViolation[0m for LockedEther in contract 'XcertToken':
    | * @dev Xcert implementation.
    | */
  > |contract XcertToken is 
    |  Xcert,
    |  XcertBurnable,
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1407)

[31mViolation[0m for RepeatedCall in contract 'XcertToken':
    |    {
    |      require(
  > |        ERC721TokenReceiver(_to)
    |          .onERC721Received(msg.sender, _from, _tokenId, _data) == MAGIC_ON_ERC721_RECEIVED,
    |        NOT_ABLE_TO_RECEIVE_NFT
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1360)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |
    |/**
  > | * @dev Standard interface for a dex proxy contract.
    | */
    |interface Proxy {
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    hasAbilities(SUPER_ABILITY)
    |  {
  > |    addressToAbility[_target] |= _abilities;
    |    emit GrantAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |      require((_abilities & 1) == 0, CANNOT_REVOKE_OWN_SUPER_ABILITY);
    |    }
  > |    addressToAbility[_target] &= ~_abilities;
    |    emit RevokeAbilities(_target, _abilities);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(384)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |
    |    // add NFT
  > |    idToOwner[_tokenId] = _to;
    |
    |    uint256 length = ownerToIds[_to].push(_tokenId);
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1219)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    idToOwner[_tokenId] = _to;
    |
  > |    uint256 length = ownerToIds[_to].push(_tokenId);
    |    idToOwnerIndex[_tokenId] = length - 1;
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1221)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |
    |    uint256 length = ownerToIds[_to].push(_tokenId);
  > |    idToOwnerIndex[_tokenId] = length - 1;
    |
    |    // add to tokens array
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1222)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |
    |    // add to tokens array
  > |    length = tokens.push(_tokenId);
    |    idToIndex[_tokenId] = length - 1;
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1225)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    // add to tokens array
    |    length = tokens.push(_tokenId);
  > |    idToIndex[_tokenId] = length - 1;
    |
    |    emit Transfer(address(0), _to, _tokenId);
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1226)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    if (idToApproval[_tokenId] != address(0))
    |    {
  > |      delete idToApproval[_tokenId];
    |    }
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1250)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    {
    |      lastToken = ownerToIds[owner][lastTokenIndex];
  > |      ownerToIds[owner][tokenToRemoveIndex] = lastToken;
    |      idToOwnerIndex[lastToken] = tokenToRemoveIndex;
    |    }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1262)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |      lastToken = ownerToIds[owner][lastTokenIndex];
    |      ownerToIds[owner][tokenToRemoveIndex] = lastToken;
  > |      idToOwnerIndex[lastToken] = tokenToRemoveIndex;
    |    }
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1263)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    }
    |
  > |    delete idToOwner[_tokenId];
    |    delete idToOwnerIndex[_tokenId];
    |    ownerToIds[owner].length--;
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1266)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |
    |    delete idToOwner[_tokenId];
  > |    delete idToOwnerIndex[_tokenId];
    |    ownerToIds[owner].length--;
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1267)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    | * @dev Xcert implementation.
    | */
  > |contract XcertToken is 
    |  Xcert,
    |  XcertBurnable,
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1407)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |  {
    |    super._create(_to, _id);
  > |    idToImprint[_id] = _imprint;
    |  }
    |
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1506)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |  {
    |    require(supportedInterfaces[PAUSABLE], CAPABILITY_NOT_SUPPORTED);
  > |    isPaused = _isPaused;
    |    emit IsPaused(_isPaused);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1549)

[33mWarning[0m for UnrestrictedWrite in contract 'XcertToken':
    |    require(supportedInterfaces[MUTABLE], CAPABILITY_NOT_SUPPORTED);
    |    require(idToOwner[_tokenId] != address(0), NOT_VALID_XCERT);
  > |    idToImprint[_tokenId] = _imprint;
    |    emit TokenImprintUpdate(_tokenId, _imprint);
    |  }
  at /unique_contracts/0x7b220ac85b7ae8af1ceccc44e183a862da2ed517.sol(1567)