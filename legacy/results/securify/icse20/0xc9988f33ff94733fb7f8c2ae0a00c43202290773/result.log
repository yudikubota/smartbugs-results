Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:ERC20
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:Enum
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:EtherPaymentFallback
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:Executor
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:MasterCopy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:MerchantModule
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:Module
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:ModuleManager
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:OracleRegistry
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:SM
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:SecuredTokenTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol:SelfAuthorized
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'EtherPaymentFallback':
    |/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments
    |/// @author Richard Meissner - <richard@gnosis.pm>
  > |contract EtherPaymentFallback {
    |
    |    /// @dev Fallback function accepts Ether transactions.
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(48)

[31mViolation[0m for LockedEther in contract 'Executor':
    |/// @title Executor - A contract that can execute transactions
    |/// @author Richard Meissner - <richard@gnosis.pm>
  > |contract Executor is EtherPaymentFallback {
    |
    |    event ContractCreation(address newContract);
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(62)

[33mWarning[0m for UnrestrictedWrite in contract 'MasterCopy':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(30)

[31mViolation[0m for RepeatedCall in contract 'MerchantModule':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            let success := call(sub(gas, 10000), token, 0, add(data, 0x20), mload(data), 0, 0)
    |            let ptr := mload(0x40)
    |            returndatacopy(ptr, 0, returndatasize)
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(402)

[31mViolation[0m for RepeatedCall in contract 'MerchantModule':
    |
    |
  > |            uint256 merchantBalanceStart = token.balanceOf(merchantWallet);
    |
    |
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(520)

[33mWarning[0m for TODAmount in contract 'MerchantModule':
    |            //pay network
    |
  > |            networkWallet.transfer(networkSplit);
    |            emit PaymentSent(address(0x0), networkWallet, networkSplit);
    |            //pay merchant
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(495)

[33mWarning[0m for TODAmount in contract 'MerchantModule':
    |            //pay merchant
    |
  > |            merchantWallet.transfer(merchantSplit);
    |            emit PaymentSent(address(0x0), merchantWallet, merchantSplit);
    |
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(499)

[33mWarning[0m for TODReceiver in contract 'MerchantModule':
    |            //pay network
    |
  > |            networkWallet.transfer(networkSplit);
    |            emit PaymentSent(address(0x0), networkWallet, networkSplit);
    |            //pay merchant
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(495)

[33mWarning[0m for TODReceiver in contract 'MerchantModule':
    |            //pay merchant
    |
  > |            merchantWallet.transfer(merchantSplit);
    |            emit PaymentSent(address(0x0), merchantWallet, merchantSplit);
    |
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(499)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MerchantModule':
    |            //pay network
    |
  > |            networkWallet.transfer(networkSplit);
    |            emit PaymentSent(address(0x0), networkWallet, networkSplit);
    |            //pay merchant
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(495)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MerchantModule':
    |            //pay merchant
    |
  > |            merchantWallet.transfer(merchantSplit);
    |            emit PaymentSent(address(0x0), merchantWallet, merchantSplit);
    |
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(499)

[31mViolation[0m for UnrestrictedWrite in contract 'MerchantModule':
    |        // Check ensures that setup function can only be called once.
    |        require(address(manager) == address(0), "Manager has already been set");
  > |        manager = ModuleManager(msg.sender);
    |    }
    |}
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(229)

[31mViolation[0m for UnrestrictedWrite in contract 'MerchantModule':
    |            "MerchantModule::setup: INVALID_STATE: ORACLE_REGISTRY_SET"
    |        );
  > |        oracleRegistry = OracleRegistry(_oracleRegistry);
    |    }
    |
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'MerchantModule':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(30)

[33mWarning[0m for UnrestrictedWrite in contract 'Module':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(30)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param prevModule Module that pointed to the module to be removed in the linked list
    |    /// @param module Module to be removed.
  > |    function disableModule(Module prevModule, Module module)
    |        public
    |        authorized
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(155)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param data Data payload of module transaction.
    |    /// @param operation Operation type of module transaction.
  > |    function execTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation)
    |        public
    |        returns (bool success)
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(172)

[33mWarning[0m for TODAmount in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[33mWarning[0m for TODReceiver in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[31mViolation[0m for UnhandledException in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(162)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/41/0xc9988f33ff94733fb7f8c2ae0a00c43202290773.sol(163)