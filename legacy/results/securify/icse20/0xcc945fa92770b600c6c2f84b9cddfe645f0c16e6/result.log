Processing contract: /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol:Checked
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol:ERC20
[33mWarning[0m for MissingInputValidation in contract 'Address':
    |        }
    |    }
  > |    function call(address contractAddr, uint amount, uint gaslimit, bytes memory data) public onlyOwner {
    |        require(isContract(contractAddr) && amount <= address(this).balance);
    |        if (gaslimit < 35000) gaslimit = 35000;
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(54)

[33mWarning[0m for TODAmount in contract 'Address':
    |        bool success;
    |        if (amount > 0) {
  > |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
    |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(59)

[33mWarning[0m for TODAmount in contract 'Address':
    |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
  > |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
    |        }
    |        if (!success) revert();
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(61)

[33mWarning[0m for TODReceiver in contract 'Address':
    |        bool success;
    |        if (amount > 0) {
  > |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
    |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(59)

[33mWarning[0m for TODReceiver in contract 'Address':
    |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
  > |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
    |        }
    |        if (!success) revert();
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(61)

[33mWarning[0m for UnhandledException in contract 'Address':
    |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
  > |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
    |        }
    |        if (!success) revert();
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(61)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Address':
    |        bool success;
    |        if (amount > 0) {
  > |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
    |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(59)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Address':
    |            (success,) = address(uint160(contractAddr)).call.gas(gaslimit).value(amount)(data);
    |        } else {
  > |            (success,) = contractAddr.call.gas(gaslimit).value(amount)(data);
    |        }
    |        if (!success) revert();
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(61)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Address':
    |        if (address(0) == token) {
    |            require(amount <= address(this).balance);
  > |            to.transfer(amount);
    |        } else {
    |            require(isContract(token) && ERC20(token).balanceOf(address(this)) >= amount);
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'Address':
    |    function changeOwner(address newOwner) public onlyOwner {
    |        require(newOwner != address(0) && address(this) != newOwner);
  > |        ContractDetails.Owner = newOwner;
    |    }
    |    function () external payable {}
  at /unique_chucks/32/0xcc945fa92770b600c6c2f84b9cddfe645f0c16e6.sol(37)