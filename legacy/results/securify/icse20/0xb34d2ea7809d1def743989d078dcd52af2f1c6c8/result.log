Processing contract: /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol:ERC20
Processing contract: /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol:Ownable
Processing contract: /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol:TokenMerge
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'TokenMerge':
    |    if (tokenTo.length == 1){
    |      for(uint i = 0; i < tokenFrom.length; i++) {
  > |        require(token.transferFrom(tokenFrom[i], tokenTo[0], amounts[i]));
    |      }
    |    }
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(47)

[31mViolation[0m for RepeatedCall in contract 'TokenMerge':
    |      require(tokenFrom.length == tokenTo.length);
    |      for(uint i = 0; i < tokenFrom.length; i++) {
  > |        require(token.transferFrom(tokenFrom[i], tokenTo[i], amounts[i]));
    |      }
    |    }
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(53)

[31mViolation[0m for RepeatedCall in contract 'TokenMerge':
    |
    |    for(uint i = 0; i < tokenFrom.length; i++) {
  > |      require(token.transferFrom(tokenFrom[i], tokenTo, token.balanceOf(tokenFrom[i])));
    |    }
    |  } 
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(64)

[31mViolation[0m for RepeatedCall in contract 'TokenMerge':
    |    require(addressesLength > 0);
    |      for(uint i = 0; i < addressesLength; i++) {
  > |        addresses[i].transfer(msg.value / addressesLength);
    |      }
    |    msg.sender.transfer(address(this).balance);
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(73)

[31mViolation[0m for RepeatedCall in contract 'TokenMerge':
    |        addresses[i].transfer(msg.value / addressesLength);
    |      }
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(75)

[31mViolation[0m for TODAmount in contract 'TokenMerge':
    |        addresses[i].transfer(msg.value / addressesLength);
    |      }
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(75)

[33mWarning[0m for TODAmount in contract 'TokenMerge':
    |    require(addressesLength > 0);
    |      for(uint i = 0; i < addressesLength; i++) {
  > |        addresses[i].transfer(msg.value / addressesLength);
    |      }
    |    msg.sender.transfer(address(this).balance);
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(73)

[33mWarning[0m for TODReceiver in contract 'TokenMerge':
    |    require(addressesLength > 0);
    |      for(uint i = 0; i < addressesLength; i++) {
  > |        addresses[i].transfer(msg.value / addressesLength);
    |      }
    |    msg.sender.transfer(address(this).balance);
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(73)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TokenMerge':
    |    require(addressesLength > 0);
    |      for(uint i = 0; i < addressesLength; i++) {
  > |        addresses[i].transfer(msg.value / addressesLength);
    |      }
    |    msg.sender.transfer(address(this).balance);
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(73)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TokenMerge':
    |        addresses[i].transfer(msg.value / addressesLength);
    |      }
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenMerge':
    |
    |    address oldOwner = owner;
  > |    owner = newOwner;
    |    emit OwnershipTransferred(oldOwner, newOwner);
    |    
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenMerge':
    |
    |    address oldTokenAddr = tokenAddr;
  > |    tokenAddr = newTokenAddr;
    |    emit ERC20TragetChanged(oldTokenAddr, newTokenAddr);
    |    
  at /unique_chucks/23/0xb34d2ea7809d1def743989d078dcd52af2f1c6c8.sol(95)