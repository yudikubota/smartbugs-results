Processing contract: /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol:tokenRecipient
Processing contract: /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol:xEuro
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'xEuro':
    |}
    |
  > |contract xEuro {
    |
    |    // see: https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/BasicToken.sol
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        isAdmin[_newAdmin] = true;
    |        emit AdminAdded(msg.sender, _newAdmin);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |
    |        uint256 from = minExchangeAmount;
  > |        minExchangeAmount = _minExchangeAmount;
    |        emit minExchangeAmountChanged(msg.sender, from, minExchangeAmount);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canMint[_newAddress] = true;
    |        emit AddressAddedToCanMint(msg.sender, _newAddress);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(271)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canMint[_addressToRemove] = false;
    |        emit AddressRemovedFromCanMint(msg.sender, _addressToRemove);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canTransferFromContract[_newAddress] = true;
    |        emit AddressAddedToCanTransferFromContract(msg.sender, _newAddress);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canTransferFromContract[_addressToRemove] = false;
    |        emit AddressRemovedFromCanTransferFromContract(msg.sender, _addressToRemove);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(297)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canBurn[_newAddress] = true;
    |        emit AddressAddedToCanBurn(msg.sender, _newAddress);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(307)

[33mWarning[0m for UnrestrictedWrite in contract 'xEuro':
    |        require(isAdmin[msg.sender]);
    |
  > |        canBurn[_addressToRemove] = false;
    |        emit AddressRemovedFromCanBurn(msg.sender, _addressToRemove);
    |        return true;
  at /unique_chucks/24/0xc31c61cf55fb5e646684ad8e8517793ec9a22c5e.sol(315)