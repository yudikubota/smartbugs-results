Processing contract: /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol:Operator
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle2300620939662289525/mustExplicit -j 2 -F /tmp/souffle-42513532-2e81-4e67-aae6-63b607ad5419 -D /tmp/souffle-42513532-2e81-4e67-aae6-63b607ad5419_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol:Operator
Processing contract: /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol:Querier
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Querier':
    |    }
    |}
  > |contract Querier {
    |    Operator public operator;
    |    
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(711)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        ats = new uint256[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.maxOutIds(i);
    |            address investor;
    |            uint256 time;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(750)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256 time;
    |            uint256 at;
  > |            (id, investor, time, at) = operator.maxOuts(id);
    |            ids[i] = id;
    |            times[i] = time;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(754)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    
    |    function getOneNode(address investorAddress) internal view returns(bytes32 email, address parent, uint256 leftSell, uint256 rightSell, uint256 generation, uint256 deposit) {
  > |        (email, parent, , ,) = operator.getInvestorPart1(investorAddress);
    |        (generation, deposit, ,) = operator.getInvestorPart2(investorAddress);
    |        (rightSell, leftSell, , ,) = operator.getInvestorPart4(investorAddress);
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(779)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function getOneNode(address investorAddress) internal view returns(bytes32 email, address parent, uint256 leftSell, uint256 rightSell, uint256 generation, uint256 deposit) {
    |        (email, parent, , ,) = operator.getInvestorPart1(investorAddress);
  > |        (generation, deposit, ,) = operator.getInvestorPart2(investorAddress);
    |        (rightSell, leftSell, , ,) = operator.getInvestorPart4(investorAddress);
    |        return (email, parent, leftSell, rightSell, generation, deposit);
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(780)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        (email, parent, , ,) = operator.getInvestorPart1(investorAddress);
    |        (generation, deposit, ,) = operator.getInvestorPart2(investorAddress);
  > |        (rightSell, leftSell, , ,) = operator.getInvestorPart4(investorAddress);
    |        return (email, parent, leftSell, rightSell, generation, deposit);
    |    }
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(781)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        presenters = new address[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            address investorAddress = operator.investorAddresses(i);
    |            bytes32 email;
    |            address parent;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(795)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            address rightChild;
    |            address presenter;
  > |            (email, parent, leftChild, rightChild, presenter) = operator.getInvestorPart1(investorAddress);
    |            investors[i] = investorAddress;
    |            emails[i] = email;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(801)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        isDisableds = new bool[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            address investorAddress = operator.investorAddresses(i);
    |            uint256 depositedAmount;
    |            uint256 withdrewAmount;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(820)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            bool isDisabled;
    |            uint256 generation;
  > |            (generation, depositedAmount, withdrewAmount, isDisabled) = operator.getInvestorPart2(investorAddress);
    |            investors[i] = investorAddress;
    |            depositedAmounts[i] = depositedAmount;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(825)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        sellThisMonths = new uint256[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            address investorAddress = operator.investorAddresses(i);
    |            uint256 lastMaxOut;
    |            uint256 maxOutTime;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(844)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256 totalSell;
    |            uint256 sellThisMonth;
  > |            (lastMaxOut, maxOutTime, maxOutTimesInWeek, totalSell, sellThisMonth) = operator.getInvestorPart3(investorAddress);
    |            investors[i] = investorAddress;
    |            lastMaxOuts[i] = maxOutTime;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(850)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        registerTimes = new uint256[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            address investorAddress = operator.investorAddresses(i);
    |            uint256 rightSell;
    |            uint256 leftSell;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(870)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256 dailyIncomeWithrewAmount;
    |            uint256 registerTime;
  > |            (rightSell, leftSell, reserveCommission, dailyIncomeWithrewAmount, registerTime) = operator.getInvestorPart4(investorAddress);
    |            investors[i] = investorAddress;
    |            rightSells[i] = rightSell;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(876)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        minDeposits = new uint256[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            address investorAddress = operator.investorAddresses(i);
    |            uint256 unpaidDailyIncome;
    |            uint256 unpaidSystemCommission;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(894)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256 unpaidSystemCommission;
    |            uint256 minDeposit;
  > |            (unpaidSystemCommission, unpaidDailyIncome, minDeposit) = operator.getInvestorPart5(investorAddress);
    |            investors[i] = investorAddress;
    |            unpaidSystemCommissions[i] = unpaidSystemCommission;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(898)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    
    |    function getInvestmentById(bytes32 investmentId) public view returns (bytes32 id, uint256 at, uint256 amount, address investor, address nextInvestor, bool nextBranch) {
  > |        return operator.investments(investmentId);
    |    }
    |    
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(908)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    
    |    function getWithdrawalById(bytes32 withdrawalId) public view returns (bytes32 id, uint256 at, uint256 amount, address investor, address presentee, uint256 reason, uint256 times) {
  > |        return operator.withdrawals(withdrawalId);
    |    }
    |    
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(912)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function getEmailByAddress(address investorAddress) public view returns (bytes32) {
    |        bytes32 email;
  > |        (email,,,,) = operator.getInvestorPart1(investorAddress);
    |        return email;
    |    }
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(917)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        uint256 index = 0;
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.investmentIds(i);
    |            uint256 at;
    |            uint256 amount;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(929)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        uint256 index = 0;
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.investmentIds(i);
    |            uint256 amount;
    |            address investor;
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(953)

[31mViolation[0m for UnrestrictedWrite in contract 'Querier':
    |    
    |    function setOperator(address payable operatorAddress) public {
  > |        operator = Operator(operatorAddress);
    |    }
    |    
  at /unique_chucks/41/0xd099c363eb969f405099f17b413e2ebdc7018a7d.sol(715)