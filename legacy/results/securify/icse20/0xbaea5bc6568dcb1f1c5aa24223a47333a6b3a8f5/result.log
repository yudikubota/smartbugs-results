Processing contract: /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol:Ownable
Processing contract: /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol:Token
Processing contract: /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol:TokenNoReturn
Processing contract: /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol:TrustlessOTC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |        require(msg.sender == o.creator);
    |        if (o.tokenFrom == address(0)) {
  > |          msg.sender.transfer(o.amountFrom);
    |        } else {
    |          if(noERC20Return[o.tokenFrom]) {
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(243)

[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |
    |        if (o.tokenFrom == address(0)) {
  > |            msg.sender.transfer(o.amountFrom.sub(fee));
    |        } else {
    |          if(noERC20Return[o.tokenFrom]) {
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(268)

[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(279)

[33mWarning[0m for RepeatedCall in contract 'TrustlessOTC':
    |            require(msg.value == 0);
    |            if(noERC20Return[o.tokenTo]) {
  > |              TokenNoReturn(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo);
    |            } else {
    |              Token(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(283)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(msg.sender == o.creator);
    |        if (o.tokenFrom == address(0)) {
  > |          msg.sender.transfer(o.amountFrom);
    |        } else {
    |          if(noERC20Return[o.tokenFrom]) {
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(243)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(279)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(feesToClaim > 0);
    |        if (address(_token) == address(0)) {
  > |            msg.sender.transfer(feesToClaim);
    |        } else {
    |            _token.transfer(owner(), feesToClaim);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(345)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |
    |        if (o.tokenFrom == address(0)) {
  > |            msg.sender.transfer(o.amountFrom.sub(fee));
    |        } else {
    |          if(noERC20Return[o.tokenFrom]) {
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(268)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(excess > 0);
    |        if (address(_token) == address(0)) {
  > |            msg.sender.transfer(excess);
    |        } else {
    |            _token.transfer(owner(), excess);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(323)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(excess > 0);
    |        if (address(_token) == address(0)) {
  > |            msg.sender.transfer(excess);
    |        } else {
    |            _token.transfer(owner(), excess);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(334)

[33mWarning[0m for TODReceiver in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |}
    |
  > |contract TrustlessOTC is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |          }
    |        }
  > |        balanceTracker[o.tokenFrom] -= o.amountFrom;
    |        o.active = false;
    |        emit OfferCancelled(tradeID);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |        }
    |        balanceTracker[o.tokenFrom] -= o.amountFrom;
  > |        o.active = false;
    |        emit OfferCancelled(tradeID);
    |        return true;
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |        require(o.optionalTaker == msg.sender || o.optionalTaker == address(0));
    |        require(o.active == true);
  > |        o.active = false;
    |        balanceTracker[o.tokenFrom] = balanceTracker[o.tokenFrom].sub(o.amountFrom);
    |        uint256 fee = o.amountFrom.mul(feeBasisPoints).div(10000);
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |    function claimFees(Token _token) external onlyOwner {
    |        uint256 feesToClaim = feeTracker[address(_token)];
  > |        feeTracker[address(_token)] = 0;
    |        require(feesToClaim > 0);
    |        if (address(_token) == address(0)) {
  at /unique_chucks/15/0xbaea5bc6568dcb1f1c5aa24223a47333a6b3a8f5.sol(342)