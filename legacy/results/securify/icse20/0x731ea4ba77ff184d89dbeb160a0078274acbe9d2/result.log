Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Claimable
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:CompatibleERC20Functions
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:DarknodePaymentStore
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:DarknodeRegistry
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:DarknodeRegistryStore
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:DarknodeSlasher
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:ERC20Detailed
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:IERC20
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:LinkedList
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Math
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Ownable
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Pausable
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:PauserRole
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:RenToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'DarknodePaymentStore':
    |
    |        if (_token == ETHEREUM) {
  > |            _recipient.transfer(_amount);
    |        } else {
    |            ERC20(_token).safeTransfer(_recipient, _amount);
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1806)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    */
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |      _pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function claimOwnership() onlyPendingOwner public {
    |      emit OwnershipTransferred(_owner, _pendingOwner);
  > |      _owner = _pendingOwner;
    |      _pendingOwner = address(0);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(350)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |      emit OwnershipTransferred(_owner, _pendingOwner);
    |      _owner = _pendingOwner;
  > |      _pendingOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(351)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function blacklist(address _darknode) external onlyOwner {
    |        require(!isBlacklisted(_darknode), "darknode already blacklisted");
  > |        darknodeBlacklist[_darknode] = now;
    |
    |        // Unwhitelist if necessary
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1758)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        // Unwhitelist if necessary
    |        if (isWhitelisted(_darknode)) {
  > |            darknodeWhitelist[_darknode] = 0;
    |            // Use SafeMath when subtracting to avoid underflows
    |            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1762)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |            darknodeWhitelist[_darknode] = 0;
    |            // Use SafeMath when subtracting to avoid underflows
  > |            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);
    |        }
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1764)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(!isWhitelisted(_darknode), "darknode already whitelisted");
    |
  > |        darknodeWhitelist[_darknode] = now;
    |        darknodeWhitelistLength++;
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1776)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |
    |        darknodeWhitelist[_darknode] = now;
  > |        darknodeWhitelistLength++;
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1777)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(availableBalance(_token) >= _amount, "insufficient contract balance");
    |
  > |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);
    |        lockedBalances[_token] = lockedBalances[_token].add(_amount);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1790)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |
    |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);
  > |        lockedBalances[_token] = lockedBalances[_token].add(_amount);
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1791)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function transfer(address _darknode, address _token, uint256 _amount, address payable _recipient) external onlyOwner {
    |        require(darknodeBalances[_darknode][_token] >= _amount, "insufficient darknode balance");
  > |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);
    |        lockedBalances[_token] = lockedBalances[_token].sub(_amount);
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1802)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(darknodeBalances[_darknode][_token] >= _amount, "insufficient darknode balance");
    |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);
  > |        lockedBalances[_token] = lockedBalances[_token].sub(_amount);
    |
    |        if (_token == ETHEREUM) {
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1803)

[31mViolation[0m for LockedEther in contract 'DarknodeRegistry':
    |/// @notice DarknodeRegistry is responsible for the registration and
    |/// deregistration of Darknodes.
  > |contract DarknodeRegistry is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1180)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |
    |        // Flag this darknode for registration
  > |        store.appendDarknode(
    |            _darknodeID,
    |            msg.sender,
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1335)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |    /// @param _epoch One of currentEpoch, previousEpoch
    |    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {
  > |        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
    |        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
    |        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1609)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {
    |        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
  > |        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
    |        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;
    |        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1610)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |            }
    |            if (!includeNext) {
  > |                next = store.next(next);
    |                continue;
    |            }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1651)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |            }
    |            nodes[n] = next;
  > |            next = store.next(next);
    |            n += 1;
    |        }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1655)

[31mViolation[0m for LockedEther in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1036)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1036)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    */
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |      _pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function claimOwnership() onlyPendingOwner public {
    |      emit OwnershipTransferred(_owner, _pendingOwner);
  > |      _owner = _pendingOwner;
    |      _pendingOwner = address(0);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(350)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |      emit OwnershipTransferred(_owner, _pendingOwner);
    |      _owner = _pendingOwner;
  > |      _pendingOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(351)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        address n = self.list[target].next;
    |
  > |        self.list[newNode].previous = target;
    |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(926)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |
    |        self.list[newNode].previous = target;
  > |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
    |        self.list[n].previous = newNode;
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(927)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[newNode].previous = target;
    |        self.list[newNode].next = n;
  > |        self.list[target].next = newNode;
    |        self.list[n].previous = newNode;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(928)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
  > |        self.list[n].previous = newNode;
    |
    |        self.list[newNode].inList = true;
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(929)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[n].previous = newNode;
    |
  > |        self.list[newNode].inList = true;
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(931)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        address n = self.list[node].next;
    |
  > |        self.list[p].next = n;
    |        self.list[n].previous = p;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(950)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |
    |        self.list[p].next = n;
  > |        self.list[n].previous = p;
    |
    |        // Deleting the node should set this value to false, but we set it here for
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(951)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        // Deleting the node should set this value to false, but we set it here for
    |        // explicitness.
  > |        self.list[node].inList = false;
    |        delete self.list[node];
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(955)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        // explicitness.
    |        self.list[node].inList = false;
  > |        delete self.list[node];
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(956)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1036)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |            deregisteredAt: _deregisteredAt
    |        });
  > |        darknodeRegistry[_darknodeID] = darknode;
    |        LinkedList.append(darknodes, _darknodeID);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1114)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function removeDarknode(address darknodeID) external onlyOwner {
    |        uint256 bond = darknodeRegistry[darknodeID].bond;
  > |        delete darknodeRegistry[darknodeID];
    |        LinkedList.remove(darknodes, darknodeID);
    |        require(ren.transfer(owner(), bond), "bond transfer failed");
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1133)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        uint256 previousBond = darknodeRegistry[darknodeID].bond;
    |        require(decreasedBond < previousBond, "bond not decreased");
  > |        darknodeRegistry[darknodeID].bond = decreasedBond;
    |        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), "bond transfer failed");
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1143)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    /// @notice Updates the deregistration timestamp of a darknode.
    |    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {
  > |        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(1149)

[31mViolation[0m for MissingInputValidation in contract 'DarknodeSlasher':
    |    }
    |
  > |    function slash(address _prover, address _challenger1, address _challenger2)
    |        external
    |        onlyOwner
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(852)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(574)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(755)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(763)

[31mViolation[0m for LockedEther in contract 'LinkedList':
    | * @notice LinkedList is a library for a circular double linked list.
    | */
  > |library LinkedList {
    |
    |    /*
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(863)

[31mViolation[0m for LockedEther in contract 'RenToken':
    |}
    |
  > |contract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {
    |
    |    string private constant _name = "Republic Token";
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(817)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(574)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(755)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/44/0x731ea4ba77ff184d89dbeb160a0078274acbe9d2.sol(763)