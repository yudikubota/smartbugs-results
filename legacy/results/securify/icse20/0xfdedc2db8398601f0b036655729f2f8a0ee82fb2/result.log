Processing contract: /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol:Governance
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Governance':
    |}
    |
  > |contract Governance {
    |    using SafeMath for uint256;
    |    mapping(bytes32 => Proposal) public proposals;
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(67)

[31mViolation[0m for UnrestrictedWrite in contract 'Governance':
    |
    |/**
  > | * @title SafeMath
    | * @dev Unsigned math operations with safety checks that revert on error
    | */
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'Governance':
    |}
    |
  > |contract Governance {
    |    using SafeMath for uint256;
    |    mapping(bytes32 => Proposal) public proposals;
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(67)

[31mViolation[0m for UnrestrictedWrite in contract 'Governance':
    |        bytes32 _proposalHash = keccak256(abi.encodePacked(_targetContract, _transaction, now));
    |        require(proposals[_proposalHash].transaction.length == 0, "The poll has already been initiated");
  > |        proposals[_proposalHash].targetContract = _targetContract;
    |        proposals[_proposalHash].transaction = _transaction;
    |        allProposals.push(_proposalHash);
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(110)

[31mViolation[0m for UnrestrictedWrite in contract 'Governance':
    |        proposals[_proposalHash].targetContract = _targetContract;
    |        proposals[_proposalHash].transaction = _transaction;
  > |        allProposals.push(_proposalHash);
    |        emit ProposalStarted(_proposalHash);
    |    }
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |        require(voters > 0, "Should have one or more voters");
    |        if (_yes) {
  > |            proposals[_proposalHash].yesVotes = proposals[_proposalHash].yesVotes.add(1);
    |        } else {
    |            proposals[_proposalHash].noVotes = proposals[_proposalHash].noVotes.add(1);
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |            proposals[_proposalHash].yesVotes = proposals[_proposalHash].yesVotes.add(1);
    |        } else {
  > |            proposals[_proposalHash].noVotes = proposals[_proposalHash].noVotes.add(1);
    |        }
    |        emit Vote(_proposalHash, _yes, proposals[_proposalHash].yesVotes, proposals[_proposalHash].noVotes, voters);
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |        require(_address != address(0), "Need non-zero address");
    |        require(!isVoter[_address], "Already in voters list");
  > |        isVoter[_address] = true;
    |        voters = voters.add(1);
    |        emit VoterAdded(_address);
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |        require(!isVoter[_address], "Already in voters list");
    |        isVoter[_address] = true;
  > |        voters = voters.add(1);
    |        emit VoterAdded(_address);
    |    }
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |        require(msg.sender == address(this), "Call via Governance procedure");
    |        require(isVoter[_address], "Not in voters list");
  > |        isVoter[_address] = false;
    |        voters = voters.sub(1);
    |        emit VoterDeleted(_address);
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'Governance':
    |        require(isVoter[_address], "Not in voters list");
    |        isVoter[_address] = false;
  > |        voters = voters.sub(1);
    |        emit VoterDeleted(_address);
    |    }
  at /unique_chucks/19/0xfdedc2db8398601f0b036655729f2f8a0ee82fb2.sol(165)