Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:BokkyPooBahsDateTimeLibrary
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:Enum
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:EtherPaymentFallback
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:Executor
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:GEnum
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:MasterCopy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:Module
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:ModuleManager
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:OracleRegistry
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:OwnerManager
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:SelfAuthorized
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:SignatureDecoder
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol:SubscriptionModule
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'EtherPaymentFallback':
    |/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments
    |/// @author Richard Meissner - <richard@gnosis.pm>
  > |contract EtherPaymentFallback {
    |
    |    /// @dev Fallback function accepts Ether transactions.
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(48)

[31mViolation[0m for LockedEther in contract 'Executor':
    |/// @title Executor - A contract that can execute transactions
    |/// @author Richard Meissner - <richard@gnosis.pm>
  > |contract Executor is EtherPaymentFallback {
    |
    |    event ContractCreation(address newContract);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(62)

[33mWarning[0m for UnrestrictedWrite in contract 'MasterCopy':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(30)

[33mWarning[0m for UnrestrictedWrite in contract 'Module':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(30)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param prevModule Module that pointed to the module to be removed in the linked list
    |    /// @param module Module to be removed.
  > |    function disableModule(Module prevModule, Module module)
    |        public
    |        authorized
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(155)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param data Data payload of module transaction.
    |    /// @param operation Operation type of module transaction.
  > |    function execTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation)
    |        public
    |        returns (bool success)
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(172)

[33mWarning[0m for TODAmount in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[33mWarning[0m for TODReceiver in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[31mViolation[0m for UnhandledException in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(162)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(163)

[31mViolation[0m for LockedEther in contract 'OwnerManager':
    |/// @author Stefan George - <stefan@gnosis.pm>
    |/// @author Richard Meissner - <richard@gnosis.pm>
  > |contract OwnerManager is SelfAuthorized {
    |
    |    event AddedOwner(address owner);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(236)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(290)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(291)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(312)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(313)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(314)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(337)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(338)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(339)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(355)

[31mViolation[0m for LockedEther in contract 'SubscriptionModule':
    |/// @title SubscriptionModule - A module with support for Subscription Payments
    |/// @author Andrew Redden - <andrew@groundhog.network>
  > |contract SubscriptionModule is Module, SignatureDecoder {
    |
    |    using BokkyPooBahsDateTimeLibrary for uint256;
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(923)

[31mViolation[0m for RepeatedCall in contract 'SubscriptionModule':
    |
    |            require(
  > |                OwnerManager(address(manager)).isOwner(currentOwner),
    |                "SubscriptionModule::_checkHash: INVALID_DATA: SIGNATURE_NOT_OWNER"
    |            );
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(1218)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        // Check ensures that setup function can only be called once.
    |        require(address(manager) == address(0), "Manager has already been set");
  > |        manager = ModuleManager(msg.sender);
    |    }
    |}
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(229)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        );
    |
  > |        domainSeparator = keccak256(
    |            abi.encode(
    |                DOMAIN_SEPARATOR_TYPEHASH,
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(987)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        );
    |
  > |        oracleRegistry = _oracleRegistry;
    |    }
    |
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(999)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(30)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        );
    |
  > |        sub.status = GEnum.SubscriptionStatus.CANCELLED;
    |
    |        if (sub.status != GEnum.SubscriptionStatus.INIT) {
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(1379)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |
    |        if (sub.status != GEnum.SubscriptionStatus.INIT) {
  > |            sub.endDate = sub.nextWithdraw;
    |        }
    |
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(1382)

[33mWarning[0m for UnrestrictedWrite in contract 'SubscriptionModule':
    |        }
    |
  > |        sub.nextWithdraw = 0;
    |
    |        emit NextPayment(
  at /unique_chucks/45/0x6505de89242b801880f911613f0541d89b4922fa.sol(1385)