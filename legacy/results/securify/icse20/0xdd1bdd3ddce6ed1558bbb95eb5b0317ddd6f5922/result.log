Processing contract: /unique_chucks/28/0xdd1bdd3ddce6ed1558bbb95eb5b0317ddd6f5922.sol:RaceToNumber
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'RaceToNumber':
    |            emit Victory(msg.sender, payout);
    |            if (payout > 0) { 
  > |                msg.sender.transfer(payout);
    |            }
    |        }
  at /unique_chucks/28/0xdd1bdd3ddce6ed1558bbb95eb5b0317ddd6f5922.sol(39)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaceToNumber':
    |            emit Victory(msg.sender, payout);
    |            if (payout > 0) { 
  > |                msg.sender.transfer(payout);
    |            }
    |        }
  at /unique_chucks/28/0xdd1bdd3ddce6ed1558bbb95eb5b0317ddd6f5922.sol(39)

[31mViolation[0m for UnrestrictedWrite in contract 'RaceToNumber':
    |
    |        // increment the call count
  > |        callCount++;
    |
    |        // if we've reached the callsToWin, user wins!
  at /unique_chucks/28/0xdd1bdd3ddce6ed1558bbb95eb5b0317ddd6f5922.sol(31)

[31mViolation[0m for UnrestrictedWrite in contract 'RaceToNumber':
    |        // if we've reached the callsToWin, user wins!
    |        if (callCount == callsToWin) {
  > |            callCount = 0;
    |            uint payout = address(this).balance;
    |            emit Victory(msg.sender, payout);
  at /unique_chucks/28/0xdd1bdd3ddce6ed1558bbb95eb5b0317ddd6f5922.sol(35)