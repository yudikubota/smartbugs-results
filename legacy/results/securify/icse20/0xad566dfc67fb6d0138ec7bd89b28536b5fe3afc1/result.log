Processing contract: /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol:manekio
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'manekio':
    |      uint256 _jackpot = jackpot;
    |      require(ended == true && checkJPotWinner(_pAddr) && !jPotclaimed);
  > |      _pAddr.transfer(_jackpot);
    |      jPotclaimed = true;
    |      jPotWinner = _pAddr;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(162)

[31mViolation[0m for DAOConstantGas in contract 'manekio':
    |      require(_pck >= 0 && _pck < 998);
    |      require(ended == true && pAddrxBk[_pAddr][_pck].paid == false && pAddrxBk[_pAddr][_pck].share > 0 && wPck == _pck);
  > |      _pAddr.transfer(pAddrxBk[_pAddr][_pck].share * shareval);
    |      pAddrxBk[_pAddr][_pck].paid = true;
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(171)

[31mViolation[0m for DAOConstantGas in contract 'manekio':
    |      uint256 _commDue = comm - commPaid;
    |      if (_commDue > 0) {
  > |        admin.transfer(_commDue);
    |        commPaid += _commDue;
    |      }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(302)

[31mViolation[0m for TODAmount in contract 'manekio':
    |      require(_pck >= 0 && _pck < 998);
    |      require(ended == true && pAddrxBk[_pAddr][_pck].paid == false && pAddrxBk[_pAddr][_pck].share > 0 && wPck == _pck);
  > |      _pAddr.transfer(pAddrxBk[_pAddr][_pck].share * shareval);
    |      pAddrxBk[_pAddr][_pck].paid = true;
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(171)

[31mViolation[0m for TODAmount in contract 'manekio':
    |      uint256 _commDue = comm - commPaid;
    |      if (_commDue > 0) {
  > |        admin.transfer(_commDue);
    |        commPaid += _commDue;
    |      }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(302)

[33mWarning[0m for TODAmount in contract 'manekio':
    |      uint256 _jackpot = jackpot;
    |      require(ended == true && checkJPotWinner(_pAddr) && !jPotclaimed);
  > |      _pAddr.transfer(_jackpot);
    |      jPotclaimed = true;
    |      jPotWinner = _pAddr;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(162)

[31mViolation[0m for TODReceiver in contract 'manekio':
    |      uint256 _commDue = comm - commPaid;
    |      if (_commDue > 0) {
  > |        admin.transfer(_commDue);
    |        commPaid += _commDue;
    |      }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(302)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'manekio':
    |      uint256 _jackpot = jackpot;
    |      require(ended == true && checkJPotWinner(_pAddr) && !jPotclaimed);
  > |      _pAddr.transfer(_jackpot);
    |      jPotclaimed = true;
    |      jPotWinner = _pAddr;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(162)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'manekio':
    |      require(_pck >= 0 && _pck < 998);
    |      require(ended == true && pAddrxBk[_pAddr][_pck].paid == false && pAddrxBk[_pAddr][_pck].share > 0 && wPck == _pck);
  > |      _pAddr.transfer(pAddrxBk[_pAddr][_pck].share * shareval);
    |      pAddrxBk[_pAddr][_pck].paid = true;
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _commEth = _eth / commrate;
    |        uint256 _jpEth = _eth / jpotrate;
  > |        comm += _commEth;
    |        jackpot += _jpEth;
    |        uint256 _potEth = _eth - _commEth - _jpEth;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(118)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _jpEth = _eth / jpotrate;
    |        comm += _commEth;
  > |        jackpot += _jpEth;
    |        uint256 _potEth = _eth - _commEth - _jpEth;
    |        //inc pot
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _potEth = _eth - _commEth - _jpEth;
    |        //inc pot
  > |        pot += _potEth;
    |        //calc shares (each share is .00001 eth)
    |        uint256 _share = _potEth / 1e13;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _share = _potEth / 1e13;
    |        //update books
  > |        pBk[_pck].nBet += 1;
    |        pBk[_pck].share += _share;
    |        //update plyrJBk
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(126)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        //update books
    |        pBk[_pck].nBet += 1;
  > |        pBk[_pck].share += _share;
    |        //update plyrJBk
    |        for(uint256 i = 0; true; i++) {
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        for(uint256 i = 0; true; i++) {
    |          if(plyrJBk[_pAddr][i].eShare == 0){
  > |            plyrJBk[_pAddr][i].sShare = tShare;
    |            plyrJBk[_pAddr][i].eShare = tShare + _share - 1;
    |            break;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |          if(plyrJBk[_pAddr][i].eShare == 0){
    |            plyrJBk[_pAddr][i].sShare = tShare;
  > |            plyrJBk[_pAddr][i].eShare = tShare + _share - 1;
    |            break;
    |          }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        }
    |        //update total shares
  > |        tShare += _share;
    |        //update pAddrxBk
    |        pAddrxBk[_pAddr][_pck].share += _share;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        tShare += _share;
    |        //update pAddrxBk
  > |        pAddrxBk[_pAddr][_pck].share += _share;
    |        //fire event
    |        emit playerBet(_pAddr, _pck, _potEth);
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _commEth = _eth / commrate;
    |        uint256 _jpEth = _eth / jpotrate;
  > |        comm += _commEth;
    |        jackpot += _jpEth;
    |        uint256 _potEth = _eth - _commEth - _jpEth;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        uint256 _jpEth = _eth / jpotrate;
    |        comm += _commEth;
  > |        jackpot += _jpEth;
    |        uint256 _potEth = _eth - _commEth - _jpEth;
    |        pot += _potEth;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |        jackpot += _jpEth;
    |        uint256 _potEth = _eth - _commEth - _jpEth;
  > |        pot += _potEth;
    |      }
    |      //if you really goof. send too little eth or betting is over it goes to admin
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      //if you really goof. send too little eth or betting is over it goes to admin
    |      else {
  > |        comm += _eth;
    |      }
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      require(ended == true && checkJPotWinner(_pAddr) && !jPotclaimed);
    |      _pAddr.transfer(_jackpot);
  > |      jPotclaimed = true;
    |      jPotWinner = _pAddr;
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(163)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      _pAddr.transfer(_jackpot);
    |      jPotclaimed = true;
  > |      jPotWinner = _pAddr;
    |    }
    |
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |    function startYourEngines(uint256 _pcknum, uint256 _endtime) onlyAdministrator() public returns(bool){
    |      require(!started);
  > |      pcknum = _pcknum;
    |      endtime = _endtime;
    |      started = true;
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(284)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      require(!started);
    |      pcknum = _pcknum;
  > |      endtime = _endtime;
    |      started = true;
    |      return(true);
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      pcknum = _pcknum;
    |      endtime = _endtime;
  > |      started = true;
    |      return(true);
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(286)

[33mWarning[0m for UnrestrictedWrite in contract 'manekio':
    |      if (_commDue > 0) {
    |        admin.transfer(_commDue);
  > |        commPaid += _commDue;
    |      }
    |    }
  at /unique_chucks/16/0xad566dfc67fb6d0138ec7bd89b28536b5fe3afc1.sol(303)