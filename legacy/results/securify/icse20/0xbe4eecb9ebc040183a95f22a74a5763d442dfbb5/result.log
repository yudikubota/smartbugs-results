Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:GnosisMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:GnosisStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:Proxied
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:Proxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:StandardTokenData
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:Token
Processing contract: /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol:TokenFRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'GnosisMath':
    |/// @author Alan Lu - <alan.lu@gnosis.pm>
    |/// @author Stefan George - <stefan@gnosis.pm>
  > |library GnosisMath {
    |    /*
    |     *  Constants
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(379)

[31mViolation[0m for LockedEther in contract 'TokenFRT':
    |
    |/// @title Standard token contract with overflow protection
  > |contract TokenFRT is Proxied, GnosisStandardToken {
    |    address public owner;
    |
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(419)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(379)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(_minter != address(0), "The new minter must be a valid address");
    |
  > |        minter = _minter;
    |    }
    |
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(452)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(msg.sender == owner, "Only the owner can update the owner");
    |        require(_owner != address(0), "The new owner must be a valid address");
  > |        owner = _owner;
    |    }
    |
  at /unique_chucks/42/0xbe4eecb9ebc040183a95f22a74a5763d442dfbb5.sol(460)