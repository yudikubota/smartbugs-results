Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle311696836178787751/mustExplicit -j 1 -F /tmp/souffle-9ad1bd37-3abd-4fe2-8221-5e066a169bce -D /tmp/souffle-9ad1bd37-3abd-4fe2-8221-5e066a169bce_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:AOLibrary
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:AOSettingDeprecation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:IAOSetting
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:IAOSettingAttribute
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:INameAccountRecovery
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:INameFactory
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:INameTAOPosition
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol:tokenRecipient
[31mViolation[0m for RepeatedCall in contract 'AOSettingDeprecation':
    |		senderNameNotCompromised {
    |		// Make sure the settings exist
  > |		require (_aoSetting.settingTypeLookup(_settingId) > 0 && _aoSetting.settingTypeLookup(_newSettingId) > 0);
    |
    |		// Make sure it's the same type
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(919)

[31mViolation[0m for RepeatedCall in contract 'AOSettingDeprecation':
    |
    |		// Make sure it's the same type
  > |		require (_aoSetting.settingTypeLookup(_settingId) == _aoSetting.settingTypeLookup(_newSettingId));
    |
    |		(bytes32 _associatedTAOSettingDeprecationId, bytes32 _creatorTAOSettingDeprecationId) = _aoSettingAttribute.addDeprecation(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _creatorTAOId, _associatedTAOId, _newSettingId, _newSettingContractAddress);
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(922)

[31mViolation[0m for RepeatedCall in contract 'AOSettingDeprecation':
    |		(bytes32 _associatedTAOSettingDeprecationId, bytes32 _creatorTAOSettingDeprecationId) = _aoSettingAttribute.addDeprecation(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _creatorTAOId, _associatedTAOId, _newSettingId, _newSettingContractAddress);
    |
  > |		emit SettingDeprecation(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _creatorTAOId, _associatedTAOId, _newSettingId, _newSettingContractAddress, _associatedTAOSettingDeprecationId, _creatorTAOSettingDeprecationId);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(926)

[31mViolation[0m for RepeatedCall in contract 'AOSettingDeprecation':
    |		require (_aoSetting.settingTypeLookup(_settingId) > 0);
    |
  > |		address _associatedTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);
    |		require (_aoSettingAttribute.approveDeprecation(_settingId, _associatedTAOAdvocate, _approved));
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(938)

[31mViolation[0m for RepeatedCall in contract 'AOSettingDeprecation':
    |		require (_aoSetting.settingTypeLookup(_settingId) > 0);
    |
  > |		address _creatorTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);
    |		require (_aoSettingAttribute.finalizeDeprecation(_settingId, _creatorTAOAdvocate));
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(953)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(835)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(845)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(854)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(855)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(864)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(865)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(874)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(875)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {
    |		require (_aoSettingAttributeAddress != address(0));
  > |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
    |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(884)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |		require (_aoSettingAttributeAddress != address(0));
    |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
  > |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(885)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(894)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingDeprecation':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(895)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(349)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(349)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(702)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(731)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(723)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(734)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(133)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(257)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(273)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_contracts/0x2d4bd4588dcab6a6eab2c33c74425b7138f18e36.sol(275)