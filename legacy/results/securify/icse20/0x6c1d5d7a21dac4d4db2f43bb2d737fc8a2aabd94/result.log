Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:ERC20
Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:ERC20Basic
Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:NTToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |  function transfer(address _to, uint256 _value)public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(75)

[31mViolation[0m for LockedEther in contract 'NTToken':
    | * @dev REP2 Mintable Token with migration from legacy contract
    | */
  > |contract NTToken is StandardToken {
    |
    |  string public constant name = "NineteenCoin";
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'NTToken':
    |  function transfer(address _to, uint256 _value)public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'NTToken':
    |    // require (_value <= _allowance);
    |
  > |    balances[_to] = balances[_to].add(_value);
    |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'NTToken':
    |
    |    balances[_to] = balances[_to].add(_value);
  > |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transfer(address _to, uint256 _value)public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // require (_value <= _allowance);
    |
  > |    balances[_to] = balances[_to].add(_value);
    |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_to] = balances[_to].add(_value);
  > |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x6c1d5d7a21dac4d4db2f43bb2d737fc8a2aabd94.sol(117)