Processing contract: /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol:IERC20
Processing contract: /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol:MerkleProof
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol:MerkleProofAirdrop
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'MerkleProofAirdrop':
    |  }
    |
  > |  mapping(bytes32 => Airdrop) public airdrops;
    |  address payable public owner;
    |
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(74)

[31mViolation[0m for MissingInputValidation in contract 'MerkleProofAirdrop':
    |  }
    |
  > |  function drop(bytes32[] memory proof, address _recipient, uint256 _amount, string memory _ipfs) public {
    |    bytes32 hash = keccak256(abi.encode(_recipient, _amount));
    |    bytes32 leaf = keccak256(abi.encode(hash));
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(115)

[33mWarning[0m for MissingInputValidation in contract 'MerkleProofAirdrop':
    |  }
    |
  > |  function createNewAirdrop(
    |      bytes32 _root,
    |      address _tokenAddress,
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(81)

[33mWarning[0m for MissingInputValidation in contract 'MerkleProofAirdrop':
    |  }
    |
  > |  function verify(
    |    bytes32[] memory proof,
    |    bytes32 root,
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(134)

[31mViolation[0m for TODAmount in contract 'MerkleProofAirdrop':
    |      claimed: 0
    |    });
  > |    owner.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(99)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MerkleProofAirdrop':
    |      claimed: 0
    |    });
  > |    owner.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(99)

[31mViolation[0m for UnrestrictedWrite in contract 'MerkleProofAirdrop':
    |    require(token.allowance(msg.sender, address(this)) >= _total, "this contract must be allowed to spend tokens");
    |
  > |    airdrops[ipfsHash] = Airdrop({
    |      owner: msg.sender,
    |      root: _root,
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(92)

[31mViolation[0m for UnrestrictedWrite in contract 'MerkleProofAirdrop':
    |    require(verify(proof, airdrop.root, leaf));
    |    require(airdrop.claimedRecipients[_recipient] == false, "double spend");
  > |    airdrop.claimedRecipients[_recipient] = true;
    |    airdrop.claimed += _amount;
    |
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(123)

[31mViolation[0m for UnrestrictedWrite in contract 'MerkleProofAirdrop':
    |    require(airdrop.claimedRecipients[_recipient] == false, "double spend");
    |    airdrop.claimedRecipients[_recipient] = true;
  > |    airdrop.claimed += _amount;
    |
    |    IERC20 token = IERC20(airdrop.tokenAddress);
  at /unique_chucks/8/0x58a67702949c87b5a9cd26132cc54ad63ff17aea.sol(124)