Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:FreezeToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'FreezeToken':
    |
    |  function freezeAccount(address target, bool frozen) public onlyAdmin {
  > |    frozenAccount[target] = frozen;
    |    emit FrozenAccount(target, frozen);
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(331)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |
    |  function addAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = true;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |
    |  function removeAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = false;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |   */
    |  function pause() public onlyOwner whenNotPaused {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(134)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |   */
    |  function unpause() public onlyOwner whenPaused {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |    require(balances[msg.sender] >= _value);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    totalSupply_ = totalSupply_.sub(_value);
    |    emit Transfer(msg.sender, address(0x00), _value);
    |    emit Burn(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(309)

[33mWarning[0m for UnrestrictedWrite in contract 'FreezeToken':
    |  function mint(uint256 _value) public onlyOwner {
    |    balances[msg.sender] = balances[msg.sender].add(_value);
  > |    totalSupply_ = totalSupply_.add(_value);
    |    emit Transfer(address(0x00), msg.sender, _value);
    |    emit Mint(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(316)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |contract Ownable {
    |  address public owner;
  > |  mapping(address => bool) public adminList;
    |
    |  event OwnershipTransferred(
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(52)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |  }
    |
  > |  function addAdmin(address _address) public onlyOwner {
    |      adminList[_address] = true;
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(80)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |  }
    |
  > |  function removeAdmin(address _address) public onlyOwner {
    |      adminList[_address] = false;
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(84)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |  function addAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = true;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |  function removeAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = false;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |
    |  function addAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = true;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |
    |  function removeAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = false;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() public onlyOwner whenNotPaused {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(134)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() public onlyOwner whenPaused {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |  function addAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = true;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |  function removeAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = false;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function pause() public onlyOwner whenNotPaused {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(134)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function unpause() public onlyOwner whenPaused {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(balances[msg.sender] >= _value);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    totalSupply_ = totalSupply_.sub(_value);
    |    emit Transfer(msg.sender, address(0x00), _value);
    |    emit Burn(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(309)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  function mint(uint256 _value) public onlyOwner {
    |    balances[msg.sender] = balances[msg.sender].add(_value);
  > |    totalSupply_ = totalSupply_.add(_value);
    |    emit Transfer(address(0x00), msg.sender, _value);
    |    emit Mint(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(316)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(214)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(252)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(253)

[31mViolation[0m for LockedEther in contract 'Token':
    |}
    |
  > |contract Token is FreezeToken {
    |  string public constant name = "BigONE Token";  // name of Token 
    |  string public constant symbol = "ONE"; // symbol of Token 
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(363)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |
    |  function freezeAccount(address target, bool frozen) public onlyAdmin {
  > |    frozenAccount[target] = frozen;
    |    emit FrozenAccount(target, frozen);
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(331)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |}
    |
  > |contract Token is FreezeToken {
    |  string public constant name = "BigONE Token";  // name of Token 
    |  string public constant symbol = "ONE"; // symbol of Token 
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(363)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |  function addAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = true;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |  function removeAdmin(address _address) public onlyOwner {
  > |      adminList[_address] = false;
    |  }
    |
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |   */
    |  function pause() public onlyOwner whenNotPaused {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(134)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |   */
    |  function unpause() public onlyOwner whenPaused {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    require(balances[msg.sender] >= _value);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    totalSupply_ = totalSupply_.sub(_value);
    |    emit Transfer(msg.sender, address(0x00), _value);
    |    emit Burn(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(309)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |  function mint(uint256 _value) public onlyOwner {
    |    balances[msg.sender] = balances[msg.sender].add(_value);
  > |    totalSupply_ = totalSupply_.add(_value);
    |    emit Transfer(address(0x00), msg.sender, _value);
    |    emit Mint(msg.sender, _value);
  at /unique_chucks/13/0x946551dd05c5abd7cc808927480225ce36d8c475.sol(316)