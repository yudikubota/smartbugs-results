Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:ERC20
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:ERC20Basic
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol:TUSTOKEN
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(219)

[31mViolation[0m for LockedEther in contract 'TUSTOKEN':
    |
    |
  > |contract TUSTOKEN is PausableToken {
    |    using SafeMath for uint;
    |
  at /unique_chucks/8/0x141c612f63c69e7f789e2eb6bc5f11f0470fd151.sol(323)