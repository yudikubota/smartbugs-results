Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:Configurable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:CrowdsaleToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:DronairToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:ERC20
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:ERC20Basic
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(155)

[33mWarning[0m for DAOConstantGas in contract 'CrowdsaleToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(319)

[31mViolation[0m for TODAmount in contract 'CrowdsaleToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(348)

[33mWarning[0m for TODAmount in contract 'CrowdsaleToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(319)

[33mWarning[0m for TODAmount in contract 'CrowdsaleToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        //totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(326)

[31mViolation[0m for TODReceiver in contract 'CrowdsaleToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        //totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(326)

[31mViolation[0m for TODReceiver in contract 'CrowdsaleToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(348)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |    function startIco() public onlyOwner {
    |        require(currentStage != Stages.icoEnd);
  > |        currentStage = Stages.icoStart;
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(335)

[33mWarning[0m for UnrestrictedWrite in contract 'CrowdsaleToken':
    |     **/
    |    function endIco() internal {
  > |        currentStage = Stages.icoEnd;
    |        // Transfer any remaining tokens
    |        if(remainingTokens > 0)
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(343)

[33mWarning[0m for DAOConstantGas in contract 'DronairToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(319)

[31mViolation[0m for TODAmount in contract 'DronairToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(348)

[33mWarning[0m for TODAmount in contract 'DronairToken':
    |        remainingTokens = cap.sub(tokensSold);
    |        if(returnWei > 0){
  > |            msg.sender.transfer(returnWei);
    |            emit Transfer(address(this), msg.sender, returnWei);
    |        }
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(319)

[33mWarning[0m for TODAmount in contract 'DronairToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        //totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(326)

[31mViolation[0m for TODReceiver in contract 'DronairToken':
    |        emit Transfer(address(this), msg.sender, tokens);
    |        //totalSupply_ = totalSupply_.add(tokens);
  > |        owner.transfer(weiAmount);// Send money to owner
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(326)

[31mViolation[0m for TODReceiver in contract 'DronairToken':
    |            balances[owner] = balances[owner].add(remainingTokens);
    |        // transfer any remaining ETH balance in the contract to the owner
  > |        owner.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(348)

[33mWarning[0m for UnrestrictedWrite in contract 'DronairToken':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'DronairToken':
    |    function startIco() public onlyOwner {
    |        require(currentStage != Stages.icoEnd);
  > |        currentStage = Stages.icoStart;
    |    }
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(335)

[33mWarning[0m for UnrestrictedWrite in contract 'DronairToken':
    |     **/
    |    function endIco() internal {
  > |        currentStage = Stages.icoEnd;
    |        // Transfer any remaining tokens
    |        if(remainingTokens > 0)
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(343)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |      require(newOwner != address(0));
    |      emit OwnershipTransferred(owner, newOwner);
  > |      owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |
  at /unique_chucks/28/0x7c45278715ea7cf3d6c2c7410aa2cd111b9f9e35.sol(184)