Processing contract: /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol:ERC20
Processing contract: /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol:ITCO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'ITCO':
    |    function forwardFunds() external onlyOwner {
    |        require(_ethFundMain != address(0));
  > |        _ethFundMain.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(216)

[31mViolation[0m for TODReceiver in contract 'ITCO':
    |    function forwardFunds() external onlyOwner {
    |        require(_ethFundMain != address(0));
  > |        _ethFundMain.transfer(address(this).balance);
    |    }
    |
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(216)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        require(!locked[msg.sender], "Sender address is locked");
    |        balances[msg.sender] = (balances[msg.sender]).sub(_amount);
  > |        balances[_to] = (balances[_to]).add(_amount);
    |        emit Transfer(msg.sender, _to, _amount);
    |        return true;
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        require(allowed[_from][msg.sender] >= _amount, "Allowance is not enough");
    |        require(!locked[_from], "From address is locked");
  > |        balances[_from] = (balances[_from]).sub(_amount);
    |        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);
    |        balances[_to] = (balances[_to]).add(_amount);
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        balances[_from] = (balances[_from]).sub(_amount);
    |        allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);
  > |        balances[_to] = (balances[_to]).add(_amount);
    |        emit Transfer(_from, _to, _amount);
    |        return true;
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        require(balances[msg.sender] >= _value, "Balance does not have enough tokens");   
    |        balances[msg.sender] = (balances[msg.sender]).sub(_value);            
  > |        _totalsupply = _totalsupply.sub(_value);                     
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(168)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |
    |    function stopTransferToken() external onlyOwner {
  > |        _lockToken = true;
    |        emit ChangeTokenLockStatus(true);
    |    }
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |
    |    function startTransferToken() external onlyOwner {
  > |        _lockToken = false;
    |        emit ChangeTokenLockStatus(false);
    |    }
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        require(receiver != address(0), "Address can not be 0x0");
    |        require(value > 0, "Value should larger than 0");
  > |        balances[receiver] = balances[receiver].add(value);
    |        _totalsupply = _totalsupply.add(value);
    |        require(_totalsupply <= _maxCap, "CrowdSale hit max cap");
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(195)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |        require(value > 0, "Value should larger than 0");
    |        balances[receiver] = balances[receiver].add(value);
  > |        _totalsupply = _totalsupply.add(value);
    |        require(_totalsupply <= _maxCap, "CrowdSale hit max cap");
    |        emit Mint(from, receiver, value);
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |	function assignOwnership(address newOwner) external onlyOwner {
    |	    require(newOwner != address(0), "Address can not be 0x0");
  > |	    _owner = newOwner;
    |	    emit ChangeOwnerShip(newOwner);
    |	}
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(204)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |    function changeReceiveWallet(address payable newAddress) external onlyOwner {
    |        require(newAddress != address(0), "Address can not be 0x0");
  > |        _ethFundMain = newAddress;
    |        emit ChangeReceiveWallet(newAddress);
    |    }
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |
    |    function haltTokenTransferFromAddress(address investor) external onlyOwner {
  > |        locked[investor] = true;
    |        emit ChangeLockStatusFrom(investor, true);
    |    }
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(220)

[33mWarning[0m for UnrestrictedWrite in contract 'ITCO':
    |
    |    function resumeTokenTransferFromAddress(address investor) external onlyOwner {
  > |        locked[investor] = false;
    |        emit ChangeLockStatusFrom(investor, false);
    |    }
  at /unique_chucks/7/0xb35da08825dc90c15ddb55e9e15005a3db9c5ebb.sol(225)