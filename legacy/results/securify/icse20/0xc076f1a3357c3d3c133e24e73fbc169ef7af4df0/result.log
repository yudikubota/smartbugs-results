Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:IERC20
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:OraclizeI
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:PAXTRExchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |        _;
    |    }
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(39)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(40)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(44)

[33mWarning[0m for DAO in contract 'PAXTRExchange':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(482)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(397)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(398)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |
    |    function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
  > |        return oraclize.getPrice(_datasource);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(470)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |
    |    function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource);
    |        if (price > 1 ether + tx.gasprice * 200000) {
    |            return 0; // Unexpectedly high price
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(478)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(482)

[31mViolation[0m for RepeatedCall in contract 'PAXTRExchange':
    |
    |    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
  > |        return oraclize.setCustomGasPrice(_gasPrice);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(949)

[33mWarning[0m for RepeatedCall in contract 'PAXTRExchange':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(397)

[33mWarning[0m for TODAmount in contract 'PAXTRExchange':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(482)

[33mWarning[0m for TODReceiver in contract 'PAXTRExchange':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(482)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PAXTRExchange':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(482)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PAXTRExchange':
    |        require((account[msg.sender].etherBalance - account[msg.sender].etherOrder) >= amount);
    |        account[msg.sender].etherBalance = account[msg.sender].etherBalance.sub(amount);
  > |        msg.sender.transfer(amount);
    |        emit Withdraw("Ether", amount, msg.sender);
    |    }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1499)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |pragma solidity ^0.5.0;
    |
  > |interface IERC20 {
    |  function totalSupply() external view returns (uint256);
    |
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(398)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |}
    |
  > |contract PAXTRExchange is Owned, usingOraclize {
    |    using SafeMath for uint256;
    |    
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1428)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].etherOrder == 0);
    |        account[msg.sender].etherOrder = amount;
  > |        etherOrders.push(msg.sender);
    |        account[msg.sender].etherOrderIndex = etherOrders.length - 1;
    |    }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1514)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].tokenOrder == 0);
    |        account[msg.sender].tokenOrder = amount;
  > |        tokenOrders.push(msg.sender);
    |        account[msg.sender].tokenOrderIndex = tokenOrders.length - 1;
    |    }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1521)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].etherOrder > 0);
    |        for (uint256 i = account[msg.sender].etherOrderIndex; i < (etherOrders.length - 1); i++) {
  > |            etherOrders[i] = etherOrders[i+1];
    |        }
    |        etherOrders.length -= 1;
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1529)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].tokenOrder > 0);
    |        for (uint256 i = account[msg.sender].tokenOrderIndex; i < (tokenOrders.length - 1); i++) {
  > |            tokenOrders[i] = tokenOrders[i+1];
    |        }
    |        tokenOrders.length -= 1;
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1537)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[tokenOrders[usedTokenOrders]].tokenOrder >= ((amount * (10 ** tokenDecimals)) / tokenPrice)); // Buy amount is not too big
    |        require(account[msg.sender].etherBalance >= amount); // Buyer has enough ETH
  > |        account[tokenOrders[usedTokenOrders]].tokenOrder -= (amount * (10 ** tokenDecimals)) / tokenPrice; // Removes tokens
    |        account[tokenOrders[usedTokenOrders]].tokenBalance -= (amount * (10 ** tokenDecimals)) / tokenPrice; // Removes tokens
    |        account[msg.sender].tokenBalance += (amount * (10 ** tokenDecimals)) / tokenPrice; // Adds tokens
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1568)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].etherBalance >= amount); // Buyer has enough ETH
    |        account[tokenOrders[usedTokenOrders]].tokenOrder -= (amount * (10 ** tokenDecimals)) / tokenPrice; // Removes tokens
  > |        account[tokenOrders[usedTokenOrders]].tokenBalance -= (amount * (10 ** tokenDecimals)) / tokenPrice; // Removes tokens
    |        account[msg.sender].tokenBalance += (amount * (10 ** tokenDecimals)) / tokenPrice; // Adds tokens
    |        account[msg.sender].etherBalance -= amount; // Removes ether
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1569)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        account[msg.sender].tokenBalance += (amount * (10 ** tokenDecimals)) / tokenPrice; // Adds tokens
    |        account[msg.sender].etherBalance -= amount; // Removes ether
  > |        account[tokenOrders[usedTokenOrders]].etherBalance += (amount - oraclize_getPrice("URL"));
    |        if (((account[tokenOrders[usedTokenOrders]].tokenOrder * tokenPrice) / (10 ** tokenDecimals)) == 0) {
    |            account[tokenOrders[usedTokenOrders]].tokenBalance -= account[tokenOrders[usedTokenOrders]].tokenOrder;
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1572)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        account[tokenOrders[usedTokenOrders]].etherBalance += (amount - oraclize_getPrice("URL"));
    |        if (((account[tokenOrders[usedTokenOrders]].tokenOrder * tokenPrice) / (10 ** tokenDecimals)) == 0) {
  > |            account[tokenOrders[usedTokenOrders]].tokenBalance -= account[tokenOrders[usedTokenOrders]].tokenOrder;
    |            account[tokenOrders[usedTokenOrders]].tokenOrder = 0;
    |        }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1574)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        if (((account[tokenOrders[usedTokenOrders]].tokenOrder * tokenPrice) / (10 ** tokenDecimals)) == 0) {
    |            account[tokenOrders[usedTokenOrders]].tokenBalance -= account[tokenOrders[usedTokenOrders]].tokenOrder;
  > |            account[tokenOrders[usedTokenOrders]].tokenOrder = 0;
    |        }
    |        if (account[tokenOrders[usedTokenOrders]].tokenOrder == 0) {
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1575)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        }
    |        if (account[tokenOrders[usedTokenOrders]].tokenOrder == 0) {
  > |            usedTokenOrders += 1;
    |        }
    |        updatePrice();
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1578)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(account[msg.sender].tokenBalance >= amount); // Seller has enough tokens
    |        account[msg.sender].tokenBalance -= amount; // Removes tokens
  > |        account[etherOrders[usedEtherOrders]].tokenBalance += amount; // Add tokens
    |        
    |        account[etherOrders[usedEtherOrders]].etherOrder -= ((amount * tokenPrice) / (10 ** tokenDecimals)); // Removes ether
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1586)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        account[etherOrders[usedEtherOrders]].tokenBalance += amount; // Add tokens
    |        
  > |        account[etherOrders[usedEtherOrders]].etherOrder -= ((amount * tokenPrice) / (10 ** tokenDecimals)); // Removes ether
    |        account[etherOrders[usedEtherOrders]].etherBalance -= ((amount * tokenPrice) / (10 ** tokenDecimals)); // Removes ether
    |        account[msg.sender].etherBalance += (((amount * tokenPrice) / (10 ** tokenDecimals)) - oraclize_getPrice("URL"));
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1588)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        
    |        account[etherOrders[usedEtherOrders]].etherOrder -= ((amount * tokenPrice) / (10 ** tokenDecimals)); // Removes ether
  > |        account[etherOrders[usedEtherOrders]].etherBalance -= ((amount * tokenPrice) / (10 ** tokenDecimals)); // Removes ether
    |        account[msg.sender].etherBalance += (((amount * tokenPrice) / (10 ** tokenDecimals)) - oraclize_getPrice("URL"));
    |        if (((account[etherOrders[usedEtherOrders]].etherOrder * (10 ** tokenDecimals)) / tokenPrice) == 0) {
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1589)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        account[msg.sender].etherBalance += (((amount * tokenPrice) / (10 ** tokenDecimals)) - oraclize_getPrice("URL"));
    |        if (((account[etherOrders[usedEtherOrders]].etherOrder * (10 ** tokenDecimals)) / tokenPrice) == 0) {
  > |            account[etherOrders[usedEtherOrders]].etherBalance -= account[etherOrders[usedEtherOrders]].etherOrder;
    |            account[etherOrders[usedEtherOrders]].etherOrder = 0;
    |        }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1592)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        if (((account[etherOrders[usedEtherOrders]].etherOrder * (10 ** tokenDecimals)) / tokenPrice) == 0) {
    |            account[etherOrders[usedEtherOrders]].etherBalance -= account[etherOrders[usedEtherOrders]].etherOrder;
  > |            account[etherOrders[usedEtherOrders]].etherOrder = 0;
    |        }
    |        if (account[etherOrders[usedEtherOrders]].etherOrder == 0) {
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1593)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        }
    |        if (account[etherOrders[usedEtherOrders]].etherOrder == 0) {
  > |            usedEtherOrders += 1;
    |        }
    |        updatePrice();
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1596)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        if (block.number >= (lastPriceUpdate + 40)) {
    |            bytes32 queryId = oraclize_query("URL", oraclePriceURL);
  > |            queryIsValid[queryId] = true;
    |            lastPriceUpdate = block.number;
    |        }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1616)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |            bytes32 queryId = oraclize_query("URL", oraclePriceURL);
    |            queryIsValid[queryId] = true;
  > |            lastPriceUpdate = block.number;
    |        }
    |    }
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1617)

[33mWarning[0m for UnrestrictedWrite in contract 'PAXTRExchange':
    |        require(msg.sender == oraclize_cbAddress());
    |        require(queryIsValid[queryID] == true);
  > |        tokenPrice = safeParseInt(result);
    |    }
    |    function setOraclePriceURL(string memory newURL) public onlyOwner {
  at /unique_chucks/15/0xc076f1a3357c3d3c133e24e73fbc169ef7af4df0.sol(1623)