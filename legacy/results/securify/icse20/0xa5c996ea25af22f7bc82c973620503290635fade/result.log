Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:AbstractENS
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:AbstractResolver
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:DutchAuction
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ERC20Detailed
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:Factory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:IERC20
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:IFactory
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ILiability
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:ILighthouse
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:IValidator
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:Liability
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:Lighthouse
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:MinterRole
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:Ownable
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SharedCode
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SignatureBouncer
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SignerRole
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:SingletonHash
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol:XRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'DutchAuction':
    |
    |        // Forward funding to ether wallet
  > |        (bool success,) = wallet.call.value(amount)("");
    |        require(success);
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(938)

[33mWarning[0m for DAOConstantGas in contract 'DutchAuction':
    |            amount = maxWei;
    |            // Send change back to receiver address.
  > |            receiver.transfer(msg.value - amount);
    |        }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(934)

[31mViolation[0m for RepeatedCall in contract 'DutchAuction':
    |
    |    function safeTransfer(IERC20 token, address to, uint256 value) internal {
  > |        require(token.transfer(to, value));
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(111)

[31mViolation[0m for RepeatedCall in contract 'DutchAuction':
    |        } else {
    |            // Auction contract burn all unsold tokens
  > |            token.burn(maxTokenSold - soldTokens);
    |        }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(998)

[33mWarning[0m for TODAmount in contract 'DutchAuction':
    |            amount = maxWei;
    |            // Send change back to receiver address.
  > |            receiver.transfer(msg.value - amount);
    |        }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(934)

[33mWarning[0m for TODAmount in contract 'DutchAuction':
    |
    |        // Forward funding to ether wallet
  > |        (bool success,) = wallet.call.value(amount)("");
    |        require(success);
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(938)

[33mWarning[0m for TODReceiver in contract 'DutchAuction':
    |
    |        // Forward funding to ether wallet
  > |        (bool success,) = wallet.call.value(amount)("");
    |        require(success);
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(938)

[33mWarning[0m for TODReceiver in contract 'DutchAuction':
    |            amount = maxWei;
    |            // Send change back to receiver address.
  > |            receiver.transfer(msg.value - amount);
    |        }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(934)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchAuction':
    |            finalizeAuction();
    |        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)
  > |            stage = Stages.TradingStarted;
    |        _;
    |    }
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(832)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(639)

[31mViolation[0m for LockedEther in contract 'Factory':
    |
    |
  > |contract Factory is IFactory, SingletonHash {
    |    constructor(
    |        address _liability,
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1867)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
  > |        require(token.transferFrom(from, to, value));
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(115)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // XRT emission with addition coefficient by gas utilzation epoch
  > |        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();
    |
    |        // Check to not permit emission decrease below wn=gas
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1931)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // Register subnode
  > |        ens.setSubnodeOwner(LIGHTHOUSE_NODE, hname, address(this));
    |
    |        // Register lighthouse address
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1974)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        // Register lighthouse address
    |        AbstractResolver resolver = AbstractResolver(ens.resolver(LIGHTHOUSE_NODE));
  > |        ens.setResolver(subnode, address(resolver));
    |        resolver.setAddr(subnode, address(lighthouse));
    |    }
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1978)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        AbstractResolver resolver = AbstractResolver(ens.resolver(LIGHTHOUSE_NODE));
    |        ens.setResolver(subnode, address(resolver));
  > |        resolver.setAddr(subnode, address(lighthouse));
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1979)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        require(success);
    |        singletonHash(liability.demandHash());
  > |        nonceOf[liability.promisee()] += 1;
    |
    |        (success, returnData)
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2001)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        (success, returnData)
  > |            = address(liability).call(abi.encodePacked(bytes4(0x413781d2), _offer)); // liability.offer(...)
    |        require(success);
    |        singletonHash(liability.offerHash());
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2004)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |            = address(liability).call(abi.encodePacked(bytes4(0x413781d2), _offer)); // liability.offer(...)
    |        require(success);
  > |        singletonHash(liability.offerHash());
    |        nonceOf[liability.promisor()] += 1;
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2006)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        require(success);
    |        singletonHash(liability.offerHash());
  > |        nonceOf[liability.promisor()] += 1;
    |
    |        // Check lighthouse
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2007)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // Check lighthouse
  > |        require(isLighthouse[liability.lighthouse()]);
    |
    |        // Transfer lighthouse fee to lighthouse worker directly
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2010)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // Transfer lighthouse fee to lighthouse worker directly
  > |        if (liability.lighthouseFee() > 0)
    |            xrt.safeTransferFrom(liability.promisor(),
    |                                 tx.origin,
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2013)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        // Transfer lighthouse fee to lighthouse worker directly
    |        if (liability.lighthouseFee() > 0)
  > |            xrt.safeTransferFrom(liability.promisor(),
    |                                 tx.origin,
    |                                 liability.lighthouseFee());
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2014)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |            xrt.safeTransferFrom(liability.promisor(),
    |                                 tx.origin,
  > |                                 liability.lighthouseFee());
    |
    |        // Transfer liability security and hold on contract
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2016)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // Transfer liability security and hold on contract
  > |        ERC20 token = ERC20(liability.token());
    |        if (liability.cost() > 0)
    |            token.safeTransferFrom(liability.promisee(),
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2019)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        // Transfer liability security and hold on contract
    |        ERC20 token = ERC20(liability.token());
  > |        if (liability.cost() > 0)
    |            token.safeTransferFrom(liability.promisee(),
    |                                   address(liability),
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2020)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        ERC20 token = ERC20(liability.token());
    |        if (liability.cost() > 0)
  > |            token.safeTransferFrom(liability.promisee(),
    |                                   address(liability),
    |                                   liability.cost());
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2021)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |            token.safeTransferFrom(liability.promisee(),
    |                                   address(liability),
  > |                                   liability.cost());
    |
    |        // Transfer validator fee and hold on contract
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2023)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |
    |        // Transfer validator fee and hold on contract
  > |        if (liability.validator() != address(0) && liability.validatorFee() > 0)
    |            xrt.safeTransferFrom(liability.promisee(),
    |                                 address(liability),
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2026)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |        // Transfer validator fee and hold on contract
    |        if (liability.validator() != address(0) && liability.validatorFee() > 0)
  > |            xrt.safeTransferFrom(liability.promisee(),
    |                                 address(liability),
    |                                 liability.validatorFee());
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2027)

[31mViolation[0m for RepeatedCall in contract 'Factory':
    |            xrt.safeTransferFrom(liability.promisee(),
    |                                 address(liability),
  > |                                 liability.validatorFee());
    |     }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2029)

[33mWarning[0m for RepeatedCall in contract 'Factory':
    |        // Parse messages
    |        (bool success, bytes memory returnData)
  > |            = address(liability).call(abi.encodePacked(bytes4(0x48a984e4), _demand)); // liability.demand(...)
    |        require(success);
    |        singletonHash(liability.demandHash());
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1998)

[31mViolation[0m for UnrestrictedWrite in contract 'Factory':
    |
    |    modifier gasPriceEstimate {
  > |        gasPrice = smma(gasPrice, tx.gasprice);
    |
    |        _;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1944)

[31mViolation[0m for UnrestrictedWrite in contract 'Factory':
    |    {
    |        address liability = address(_liability);
  > |        totalGasConsumed         += _gas;
    |        gasConsumedOf[liability] += _gas;
    |        return true;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2042)

[31mViolation[0m for UnrestrictedWrite in contract 'Factory':
    |        address liability = address(_liability);
    |        totalGasConsumed         += _gas;
  > |        gasConsumedOf[liability] += _gas;
    |        return true;
    |    }
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2043)

[31mViolation[0m for UnrestrictedWrite in contract 'Factory':
    |    {
    |        address liability = address(_liability);
  > |        totalGasConsumed         += _gas;
    |        gasConsumedOf[liability] += _gas;
    |        require(xrt.mint(tx.origin, wnFromGas(gasConsumedOf[liability])));
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2057)

[31mViolation[0m for UnrestrictedWrite in contract 'Factory':
    |        address liability = address(_liability);
    |        totalGasConsumed         += _gas;
  > |        gasConsumedOf[liability] += _gas;
    |        require(xrt.mint(tx.origin, wnFromGas(gasConsumedOf[liability])));
    |        return true;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2058)

[33mWarning[0m for UnrestrictedWrite in contract 'Factory':
    |    function singletonHash(bytes32 _hash) internal {
    |        require(!isHashConsumed[_hash]);
  > |        isHashConsumed[_hash] = true;
    |        emit HashConsumed(_hash);
    |    }
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(193)

[33mWarning[0m for UnrestrictedWrite in contract 'Factory':
    |
    |        emit NewLighthouse(address(lighthouse), _name);
  > |        isLighthouse[address(lighthouse)] = true;
    |
    |        // Register subnode
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1971)

[33mWarning[0m for UnrestrictedWrite in contract 'Factory':
    |        require(success);
    |        singletonHash(liability.demandHash());
  > |        nonceOf[liability.promisee()] += 1;
    |
    |        (success, returnData)
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2001)

[33mWarning[0m for UnrestrictedWrite in contract 'Factory':
    |        require(success);
    |        singletonHash(liability.offerHash());
  > |        nonceOf[liability.promisor()] += 1;
    |
    |        // Check lighthouse
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(2007)

[31mViolation[0m for LockedEther in contract 'Liability':
    |
    |
  > |contract Liability is ILiability {
    |    using ECDSA for bytes32;
    |    using SafeERC20 for XRT;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1699)

[31mViolation[0m for RepeatedCall in contract 'Liability':
    |
    |    function safeTransfer(IERC20 token, address to, uint256 value) internal {
  > |        require(token.transfer(to, value));
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(111)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |
    |
  > |contract Liability is ILiability {
    |    using ECDSA for bytes32;
    |    using SafeERC20 for XRT;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1699)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        require(factory == address(0));
    |
  > |        factory = msg.sender;
    |        xrt     = _xrt;
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1710)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |
    |        factory = msg.sender;
  > |        xrt     = _xrt;
    |
    |        return true;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1711)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        model        = _model;
    |        objective    = _objective;
  > |        token        = _token;
    |        cost         = _cost;
    |        lighthouse   = _lighthouse;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1740)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        objective    = _objective;
    |        token        = _token;
  > |        cost         = _cost;
    |        lighthouse   = _lighthouse;
    |        validator    = _validator;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1741)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        token        = _token;
    |        cost         = _cost;
  > |        lighthouse   = _lighthouse;
    |        validator    = _validator;
    |        validatorFee = _validator_fee;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1742)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        cost         = _cost;
    |        lighthouse   = _lighthouse;
  > |        validator    = _validator;
    |        validatorFee = _validator_fee;
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1743)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        lighthouse   = _lighthouse;
    |        validator    = _validator;
  > |        validatorFee = _validator_fee;
    |
    |        demandHash = keccak256(abi.encodePacked(
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1744)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        validatorFee = _validator_fee;
    |
  > |        demandHash = keccak256(abi.encodePacked(
    |            _model
    |          , _objective
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1746)

[31mViolation[0m for UnrestrictedWrite in contract 'Liability':
    |        isFinalized = true;
    |        result      = _result;
  > |        isSuccess   = _success;
    |
    |        address resultSender = keccak256(abi.encodePacked(this, _result, _success))
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1829)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |
    |
  > |contract Liability is ILiability {
    |    using ECDSA for bytes32;
    |    using SafeERC20 for XRT;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1699)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |        ));
    |
  > |        promisee = demandHash
    |            .toEthSignedMessageHash()
    |            .recover(_signature);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1759)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |        require(_validator == validator);
    |
  > |        lighthouseFee = _lighthouse_fee;
    |
    |        offerHash = keccak256(abi.encodePacked(
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1794)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |        lighthouseFee = _lighthouse_fee;
    |
  > |        offerHash = keccak256(abi.encodePacked(
    |            _model
    |          , _objective
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1796)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |        ));
    |
  > |        promisor = offerHash
    |            .toEthSignedMessageHash()
    |            .recover(_signature);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1809)

[33mWarning[0m for UnrestrictedWrite in contract 'Liability':
    |        require(!isFinalized);
    |
  > |        isFinalized = true;
    |        result      = _result;
    |        isSuccess   = _success;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1827)

[31mViolation[0m for RepeatedCall in contract 'Lighthouse':
    |
    |    function safeTransfer(IERC20 token, address to, uint256 value) internal {
  > |        require(token.transfer(to, value));
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
  > |// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |
    |
  > |contract Lighthouse is ILighthouse {
    |    using SafeERC20 for XRT;
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1515)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |        require(factory == IFactory(0) && _minimalStake > 0 && _timeoutInBlocks > 0);
    |
  > |        minimalStake    = _minimalStake;
    |        timeoutInBlocks = _timeoutInBlocks;
    |        factory         = IFactory(msg.sender);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1524)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |
    |        minimalStake    = _minimalStake;
  > |        timeoutInBlocks = _timeoutInBlocks;
    |        factory         = IFactory(msg.sender);
    |        xrt             = _xrt;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1525)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |        minimalStake    = _minimalStake;
    |        timeoutInBlocks = _timeoutInBlocks;
  > |        factory         = IFactory(msg.sender);
    |        xrt             = _xrt;
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1526)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |        timeoutInBlocks = _timeoutInBlocks;
    |        factory         = IFactory(msg.sender);
  > |        xrt             = _xrt;
    |
    |        return true;
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1527)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |        if (stakes[msg.sender] == 0) {
    |            require(_value >= minimalStake);
  > |            providers.push(msg.sender);
    |            indexOf[msg.sender] = providers.length;
    |            emit Online(msg.sender);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1542)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |        if (timeoutInBlocks < block.number - keepAliveBlock) {
    |            // Set up the marker according to provider index
  > |            marker = indexOf[msg.sender];
    |
    |            // Thransaction sender should be a registered provider
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1579)

[33mWarning[0m for UnrestrictedWrite in contract 'Lighthouse':
    |
    |        // Store transaction sending block
  > |        keepAliveBlock = block.number;
    |    }
    |
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1592)

[31mViolation[0m for MissingInputValidation in contract 'SingletonHash':
    |     * @dev Used hash accounting
    |     */
  > |    mapping(bytes32 => bool) public isHashConsumed;
    |
    |    /**
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(185)

[31mViolation[0m for LockedEther in contract 'XRT':
    |
    |
  > |contract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {
    |    constructor(uint256 _initial_supply) public ERC20Detailed("Robonomics", "XRT", 9) {
    |        _mint(msg.sender, _initial_supply);
  at /unique_chucks/42/0xa5c996ea25af22f7bc82c973620503290635fade.sol(1501)