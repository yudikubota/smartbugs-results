Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:CommonConstants
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:ERC1155
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:ERC1155TokenReceiver
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:ERC165
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:IERC1155
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:Ownable
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:RCContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol:Strings
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ERC1155':
    |
    |// A sample implementation of core ERC1155 function.
  > |contract ERC1155 is IERC1155, ERC165, CommonConstants
    |{
    |    using SafeMath for uint256;
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC1155':
    |        // SafeMath will throw with insuficient funds _from
    |        // or if _id is not valid (balance will be 0)
  > |        balances[_id][_from] = balances[_id][_from].sub(_value);
    |        balances[_id][_to]   = _value.add(balances[_id][_to]);
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(350)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC1155':
    |        // or if _id is not valid (balance will be 0)
    |        balances[_id][_from] = balances[_id][_from].sub(_value);
  > |        balances[_id][_to]   = _value.add(balances[_id][_to]);
    |
    |        // MUST emit event
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(351)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC1155':
    |            // SafeMath will throw with insuficient funds _from
    |            // or if _id is not valid (balance will be 0)
  > |            balances[id][_from] = balances[id][_from].sub(value);
    |            balances[id][_to]   = value.add(balances[id][_to]);
    |        }
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(392)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC1155':
    |            // or if _id is not valid (balance will be 0)
    |            balances[id][_from] = balances[id][_from].sub(value);
  > |            balances[id][_to]   = value.add(balances[id][_to]);
    |        }
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(393)

[31mViolation[0m for LockedEther in contract 'RCContract':
    |    Shows how easy it is to mint new items.
    |*/
  > |contract RCContract is ERC1155, Ownable {
    |
    |    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(633)

[31mViolation[0m for UnrestrictedWrite in contract 'RCContract':
    |    Shows how easy it is to mint new items.
    |*/
  > |contract RCContract is ERC1155, Ownable {
    |
    |    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(633)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |        // SafeMath will throw with insuficient funds _from
    |        // or if _id is not valid (balance will be 0)
  > |        balances[_id][_from] = balances[_id][_from].sub(_value);
    |        balances[_id][_to]   = _value.add(balances[_id][_to]);
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(350)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |        // or if _id is not valid (balance will be 0)
    |        balances[_id][_from] = balances[_id][_from].sub(_value);
  > |        balances[_id][_to]   = _value.add(balances[_id][_to]);
    |
    |        // MUST emit event
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(351)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |            // SafeMath will throw with insuficient funds _from
    |            // or if _id is not valid (balance will be 0)
  > |            balances[id][_from] = balances[id][_from].sub(value);
    |            balances[id][_to]   = value.add(balances[id][_to]);
    |        }
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(392)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |            // or if _id is not valid (balance will be 0)
    |            balances[id][_from] = balances[id][_from].sub(value);
  > |            balances[id][_to]   = value.add(balances[id][_to]);
    |        }
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(393)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(563)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |    Shows how easy it is to mint new items.
    |*/
  > |contract RCContract is ERC1155, Ownable {
    |
    |    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(633)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |    function create(uint256 _initialSupply, address _to, string calldata _name) external onlyOwner returns (uint256 _id) {
    |
  > |        _id = ++nonce;
    |        balances[_id][_to] = _initialSupply;
    |        _totalSupplies[_id] = _initialSupply;
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(675)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |
    |        _id = ++nonce;
  > |        balances[_id][_to] = _initialSupply;
    |        _totalSupplies[_id] = _initialSupply;
    |
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(676)

[33mWarning[0m for UnrestrictedWrite in contract 'RCContract':
    |        _id = ++nonce;
    |        balances[_id][_to] = _initialSupply;
  > |        _totalSupplies[_id] = _initialSupply;
    |
    |        // Transfer event with mint semantic
  at /unique_chucks/17/0xd6fbc588964e5a3d5caa56b69205ad1adbe9f438.sol(677)