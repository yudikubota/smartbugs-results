Processing contract: /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol:ERC20
Processing contract: /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol:KotowarsChallenge
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'KotowarsChallenge':
    |     
    |        ERC20 WCK = ERC20(WCKAddress);
  > |        require(WCK.transferFrom(msg.sender, address(this), (challenge.buy_in + fee) * (10**WCK.decimals())));
    |     
    |        challenge.acceptor = msg.sender;   
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(74)

[31mViolation[0m for RepeatedCall in contract 'KotowarsChallenge':
    |        uint256 reward = challenge.buy_in * 2;
    |        ERC20 WCK = ERC20(WCKAddress);
  > |        require(WCK.transferFrom(address(this), challenge.winner, reward * (10**WCK.decimals())));
    |     
    |        emit Resolved(challenge_id, challenge.winner, reward);
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(99)

[31mViolation[0m for RepeatedCall in contract 'KotowarsChallenge':
    |        if (challenge.status == ChallengeStatus.Created)
    |        {
  > |            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * (10**WCK.decimals())));
    |        }
    |        else if (challenge.status == ChallengeStatus.Accepted)
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(116)

[31mViolation[0m for RepeatedCall in contract 'KotowarsChallenge':
    |        else if (challenge.status == ChallengeStatus.Accepted)
    |        {
  > |            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * (10**WCK.decimals())));
    |            require(WCK.transferFrom(address(this), challenge.acceptor, challenge.buy_in * (10**WCK.decimals())));
    |        }
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(120)

[31mViolation[0m for RepeatedCall in contract 'KotowarsChallenge':
    |        {
    |            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * (10**WCK.decimals())));
  > |            require(WCK.transferFrom(address(this), challenge.acceptor, challenge.buy_in * (10**WCK.decimals())));
    |        }
    |        
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(121)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |pragma solidity ^0.5.0;
    |
  > |interface ERC20 {
    |    function totalSupply() external view returns (uint supply);
    |    function balanceOf(address _owner) external view returns (uint balance);
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |            accepted_at: 0
    |        });
  > |        uint256 challenge_id = challenges.push(challenge) - 1;
    |        
    |        emit Created(challenge_id, challenge.creator, challenge.buy_in);
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(61)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |        challenge.accepted_at = now;
    |        
  > |        challenges[challenge_id] = challenge;
    |        
    |        emit Accepted(challenge_id, challenge.acceptor);
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(80)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |        challenge.status = ChallengeStatus.Resolved;
    |        
  > |        challenges[challenge_id] = challenge;
    |        
    |        uint256 reward = challenge.buy_in * 2;
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function set_challenge_ttl(uint256 value) public adminsOnly
    |    {
  > |        challenge_ttl = value;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(131)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function set_min_buy_in(uint256 value) public adminsOnly
    |    {
  > |        min_buy_in = value;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(136)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function set_fee(uint256 value) public adminsOnly
    |    {
  > |        fee = value;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(141)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function set_wck_address(address value) public adminsOnly
    |    {
  > |        WCKAddress = value;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(146)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function add_admin(address admin) public adminsOnly
    |    {
  > |        admins[admin] = true;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(151)

[31mViolation[0m for UnrestrictedWrite in contract 'KotowarsChallenge':
    |    function remove_admin(address admin) public adminsOnly
    |    {
  > |        admins[admin] = false;
    |    }
    |    
  at /unique_chucks/28/0xd121e8cb8e32b3d53ce092aeee2d18a10ebd65fa.sol(156)