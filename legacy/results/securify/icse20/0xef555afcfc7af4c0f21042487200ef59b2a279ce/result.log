Processing contract: /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol:FSCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FSCToken':
    |}
    |
  > |contract FSCToken is owned {
    |    
    |    using SafeMath for uint256;
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(47)

[31mViolation[0m for UnrestrictedWrite in contract 'FSCToken':
    |        uint previousBalances = balanceOf[_from] + balanceOf[_to];
    |        balanceOf[_from] -= _value;
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        address from = recover(hashedTx, _signature);
    |        require(from != address(0));
  > |        balanceOf[from] = balanceOf[from].sub(_value).sub(_fee);
    |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(162)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        require(from != address(0));
    |        balanceOf[from] = balanceOf[from].sub(_value).sub(_fee);
  > |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
    |        signatures[_signature] = true;
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(163)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
  > |        signatures[_signature] = true;
    |        emit Transfer(from, _to, _value);
    |        emit Transfer(from, msg.sender, _fee);
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |    function mintToken(uint256 mintedAmount) onlyOwner public {
    |        uint mint=mintedAmount.mul(1e6);
  > |        balanceOf[owner] += mint;
    |        totalSupply += mint;
    |        emit Transfer(address(this), owner, mint);
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        uint mint=mintedAmount.mul(1e6);
    |        balanceOf[owner] += mint;
  > |        totalSupply += mint;
    |        emit Transfer(address(this), owner, mint);
    |    }
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        require(balanceOf[msg.sender] >= burnAmount);   
    |        uint burn=burnAmount.mul(1e6);
  > |        balanceOf[owner] -= burn;            
    |        totalSupply -= burn;                      
    |        emit Burn(owner, burnAmount);
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'FSCToken':
    |        uint burn=burnAmount.mul(1e6);
    |        balanceOf[owner] -= burn;            
  > |        totalSupply -= burn;                      
    |        emit Burn(owner, burnAmount);
    |        return true;
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(140)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |    }
    |
  > |    function transferOwnership(address newOwner) onlyOwner public {
    |        owner = newOwner;
    |    }
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xef555afcfc7af4c0f21042487200ef59b2a279ce.sol(43)