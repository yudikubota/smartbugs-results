Processing contract: /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol:AliorDurableMedium
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'AliorDurableMedium':
    |// File: contracts/AliorDurableMedium.sol
    |
  > |contract AliorDurableMedium {
    |
    |    // ------------------------------------------------------------------------------------------ //
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |        bytes memory _signature
    |    ) {
  > |        bytes memory abiEncodedParams = abi.encode(address(this), nonce++, _methodName, _methodArguments);
    |        verifySignature(abiEncodedParams, _signature);
    |        _;
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(99)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |        require(_newOwner != address(0), "Owner cannot be changed to a null address");
    |        require(_newOwner != owner, "Cannot change owner to be the same address");
  > |        owner = _newOwner;
    |        emit OwnershipChanged(_newOwner);
    |    }
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(215)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |        require(contentHashToDocumentId[_contentHash] == 0, "Document with given hash is already published");
    |        uint documentId = documentCount + 1;
  > |        contentHashToDocumentId[_contentHash] = documentId;
    |        emit DocumentAdded(documentId);
    |        documents[documentId] = Document(
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(237)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |        contentHashToDocumentId[_contentHash] = documentId;
    |        emit DocumentAdded(documentId);
  > |        documents[documentId] = Document(
    |            _fileName, 
    |            _contentHash,
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(239)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |            0
    |        );
  > |        documentCount++;
    |    }
    |
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |        require(_documentId <= documentCount && _documentId > 0, "Cannot cancel a non-existing document");
    |        require(documents[_documentId].canceled == 0, "Cannot cancel an already canceled document");
  > |        documents[_documentId].canceled = uint40(block.number);
    |        emit DocumentCanceled(_documentId);
    |    }
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(257)

[31mViolation[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |    ifCorrectlySignedWithNonce("retire", abi.encode(_upgradedVersion), _signature)
    |    {
  > |        upgradedVersion = _upgradedVersion;
    |        emit ContractRetired(upgradedVersion);
    |    }
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(266)

[33mWarning[0m for UnrestrictedWrite in contract 'AliorDurableMedium':
    |// File: contracts/AliorDurableMedium.sol
    |
  > |contract AliorDurableMedium {
    |
    |    // ------------------------------------------------------------------------------------------ //
  at /unique_contracts/0x45ce9f08b31e7d05cb648480531cf4c3c929904d.sol(73)