Processing contract: /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol:myEtherDate
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'myEtherDate':
    |            uint256 payout = SafeMath.mul(stake, 2);
    |            payout = SafeMath.mul(payout, successfulDate);
  > |            msg.sender.transfer(payout);
    |            updateMaxStake();
    |        }
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(125)

[31mViolation[0m for DAOConstantGas in contract 'myEtherDate':
    |        returns (bool success)
    |    {
  > |        msg.sender.transfer(ammount);
    |        updateMaxStake();
    |        return true;
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(174)

[33mWarning[0m for TODAmount in contract 'myEtherDate':
    |            uint256 payout = SafeMath.mul(stake, 2);
    |            payout = SafeMath.mul(payout, successfulDate);
  > |            msg.sender.transfer(payout);
    |            updateMaxStake();
    |        }
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(125)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'myEtherDate':
    |            uint256 payout = SafeMath.mul(stake, 2);
    |            payout = SafeMath.mul(payout, successfulDate);
  > |            msg.sender.transfer(payout);
    |            updateMaxStake();
    |        }
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(125)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'myEtherDate':
    |        returns (bool success)
    |    {
  > |        msg.sender.transfer(ammount);
    |        updateMaxStake();
    |        return true;
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'myEtherDate':
    |    {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/19/0xb44822a2bd88f68cc69c0a783517ce625cc0fb92.sol(184)