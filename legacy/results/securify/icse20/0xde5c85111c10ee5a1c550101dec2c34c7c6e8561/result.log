Processing contract: /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol:Exchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'Exchange':
    |        require(tokens[ETHER][msg.sender] >= _amount);
    |        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].sub(_amount);
  > |        msg.sender.transfer(_amount);
    |        emit Withdraw(ETHER, msg.sender, _amount, tokens[ETHER][msg.sender]);
    |    }
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |// JHE 20190617
  > |// File: openzeppelin-solidity\contracts\math\SafeMath.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |
    |
  > |contract Exchange {
    |    using SafeMath for uint;
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |
    |    function makeOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) public {
  > |        orderCount = orderCount.add(1);
    |        orders[orderCount] = _Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |    function makeOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) public {
    |        orderCount = orderCount.add(1);
  > |        orders[orderCount] = _Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);
    |
    |        ercToken = _getErcTokenAddress(_tokenGet, _tokenGive);
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |        _Order storage _order = orders[_id];
    |        _trade(_order.id, _order.user, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive);
  > |        orderFilled[_order.id] = true;
    |    }
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |
    |        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountGet.add(_feeAmount));
  > |        tokens[_tokenGet][_user] = tokens[_tokenGet][_user].add(_amountGet);
    |        tokens[_tokenGive][_user] = tokens[_tokenGive][_user].sub(_amountGive);
    |        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive);       
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountGet.add(_feeAmount));
    |        tokens[_tokenGet][_user] = tokens[_tokenGet][_user].add(_amountGet);
  > |        tokens[_tokenGive][_user] = tokens[_tokenGive][_user].sub(_amountGive);
    |        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive);       
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(290)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |            if (fees[i].active){
    |                uint feeValue = _amountGet.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
  > |                tokens[_tokenGet][fees[i].wallet] = tokens[_tokenGet][fees[i].wallet].add(feeValue);
    |            }
    |        }
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |            if (fees[i].wallet == _feeWallet){
    |                fees[i].name    = _name;
  > |                fees[i].percent = _percent;
    |                fees[i].active  = true;
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(371)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |                fees[i].name    = _name;
    |                fees[i].percent = _percent;
  > |                fees[i].active  = true;
    |
    |                feeExiste = true;
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(372)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |            fee.active = true;
    |
  > |            fees.push(fee);
    |        }
    |    }
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(389)

[33mWarning[0m for UnrestrictedWrite in contract 'Exchange':
    |        for (uint i = 0; i < feesCount; i++){
    |            if (fees[i].wallet == _feeWallet){
  > |                fees[i].active = false;
    |                break;
    |            }
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(401)

[31mViolation[0m for LockedEther in contract 'Token':
    |
    |
  > |contract Token {
    |    using SafeMath for uint;
    |
  at /unique_chucks/18/0xde5c85111c10ee5a1c550101dec2c34c7c6e8561.sol(75)