Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:ERC20
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:ERC20Basic
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:Freeze
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:Leasing
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:SingleToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(152)

[31mViolation[0m for LockedEther in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(295)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |/**
    | * @title Ownable
  > | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
    | */
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(295)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |  function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |    require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |    gofindAllowedAddresses.push(_newAddress);
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(341)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(415)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(417)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(40)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(295)

[31mViolation[0m for DAOConstantGas in contract 'Leasing':
    |        
    |        uint256 fee = msg.value * 10 / 110;
  > |        address(0x553654Ad7808625B36F6AB29DdB41140300E024F).transfer(fee);
    |        uint256 afterFee = msg.value - fee;
    |        
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(570)

[33mWarning[0m for TODAmount in contract 'Leasing':
    |        
    |        uint256 fee = msg.value * 10 / 110;
  > |        address(0x553654Ad7808625B36F6AB29DdB41140300E024F).transfer(fee);
    |        uint256 afterFee = msg.value - fee;
    |        
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(570)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Leasing':
    |        
    |        uint256 fee = msg.value * 10 / 110;
  > |        address(0x553654Ad7808625B36F6AB29DdB41140300E024F).transfer(fee);
    |        uint256 afterFee = msg.value - fee;
    |        
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'Leasing':
    |  }
    |}
  > |contract Leasing is Ownable {
    |    
    |    using SafeMath for uint256;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(40)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(48)

[31mViolation[0m for LockedEther in contract 'PausableToken':
    | * @notice Inherit from it at SingleToken, to make freezing functionality works
    |*/
  > |contract PausableToken is StandardToken, Freeze {
    |
    |  function transfer(
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(428)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |/**
    | * @title Ownable
  > | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
    | */
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |    require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |    gofindAllowedAddresses.push(_newAddress);
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(415)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(417)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    | * @notice Inherit from it at SingleToken, to make freezing functionality works
    |*/
  > |contract PausableToken is StandardToken, Freeze {
    |
    |  function transfer(
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(428)

[31mViolation[0m for LockedEther in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |  string  public constant name      = "Gofind XR"; 
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(488)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |/**
    | * @title Ownable
  > | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
    | */
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |  function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |    require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |    gofindAllowedAddresses.push(_newAddress);
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(415)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(417)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |  string  public constant name      = "Gofind XR"; 
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(488)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/13/0x57f8b4e4b30b756ae8720abc29cd1cd693ee9a9f.sol(200)