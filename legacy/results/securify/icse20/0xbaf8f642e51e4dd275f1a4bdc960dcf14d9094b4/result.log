Processing contract: /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol:AuthorisedContractBase
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol:ERC20Interface
Processing contract: /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol:HorizonContractBase
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol:VOXToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'AuthorisedContractBase':
    |     * @notice The list of addresses that are allowed restricted privileges.
    |     */
  > |    mapping(address => bool) public authorised;
    |
    |    /**
  at /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol(49)

[31mViolation[0m for MissingInputValidation in contract 'AuthorisedContractBase':
    |     * @param isAuthorised  Whether special privileges are allowed or not.
    |     */
  > |    function setAuthorised(address who, bool isAuthorised) public onlyOwner {
    |        authorised[who] = isAuthorised;
    |        emit AuthorisationChanged(who, isAuthorised);
  at /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol(70)

[31mViolation[0m for MissingInputValidation in contract 'AuthorisedContractBase':
    |     * @return True if address has special privileges, false otherwise.
    |     */
  > |    function isAuthorised(address who) public view returns (bool) {
    |        return authorised[who];
    |    }
  at /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'AuthorisedContractBase':
    |     */
    |    function setAuthorised(address who, bool isAuthorised) public onlyOwner {
  > |        authorised[who] = isAuthorised;
    |        emit AuthorisationChanged(who, isAuthorised);
    |    }
  at /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol(71)

[31mViolation[0m for LockedEther in contract 'VOXToken':
    |
    |
  > |contract VOXToken is ERC20Interface, AuthorisedContractBase {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/15/0xbaf8f642e51e4dd275f1a4bdc960dcf14d9094b4.sol(159)