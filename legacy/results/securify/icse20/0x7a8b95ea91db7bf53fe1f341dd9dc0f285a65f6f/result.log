Processing contract: /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol:JNS
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'JNS':
    |        addrToStr[_address] = _nickname;
    |
  > |        wallet.transfer(msg.value);
    |        return true;
    |    }
  at /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol(21)

[33mWarning[0m for TODReceiver in contract 'JNS':
    |        addrToStr[_address] = _nickname;
    |
  > |        wallet.transfer(msg.value);
    |        return true;
    |    }
  at /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol(21)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'JNS':
    |        addrToStr[_address] = _nickname;
    |
  > |        wallet.transfer(msg.value);
    |        return true;
    |    }
  at /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol(21)

[31mViolation[0m for UnrestrictedWrite in contract 'JNS':
    |pragma solidity 0.5.1;
    |
  > |contract JNS {
    |    mapping (string => address) strToAddr;
    |    mapping (address => string) addrToStr;
  at /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'JNS':
    |        require (keccak256(abi.encodePacked(addrToStr[_address])) == keccak256(abi.encodePacked("")), "Address already registered");
    |        
  > |        strToAddr[_nickname] = _address;
    |        addrToStr[_address] = _nickname;
    |
  at /unique_chucks/30/0x7a8b95ea91db7bf53fe1f341dd9dc0f285a65f6f.sol(18)