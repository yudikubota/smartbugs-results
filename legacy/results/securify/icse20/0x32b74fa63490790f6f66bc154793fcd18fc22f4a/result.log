Processing contract: /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol:GTXRecord
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol:Ownable
Processing contract: /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipTransferred(_owner, address(0));
  > |    _owner = address(0);
    |  }
    |
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(_owner, newOwner);
  > |    _owner = newOwner;
    |  }
    |}
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |        require(_conversionRate <= 1000); // maximum 10x conversion rate
    |        require(_conversionRate > 0); // minimum .01x conversion rate
  > |        conversionRate = _conversionRate;
    |    }
    |
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(192)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |    */
    |    function lock() public onlyOwner returns (bool) {
  > |        lockRecords = true;
    |        emit LockRecords();
    |        return true;
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |            afterConversionGTX = _finPointAmount;
    |        }
  > |        claimableGTX[_recordAddress] = claimableGTX[_recordAddress].add(afterConversionGTX);
    |        totalClaimableGTX = totalClaimableGTX.add(afterConversionGTX);
    |        require(totalClaimableGTX <= maxRecords, "total token record (contverted GTX) cannot exceed GTXRecord token limit");
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(222)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |        }
    |        claimableGTX[_recordAddress] = claimableGTX[_recordAddress].add(afterConversionGTX);
  > |        totalClaimableGTX = totalClaimableGTX.add(afterConversionGTX);
    |        require(totalClaimableGTX <= maxRecords, "total token record (contverted GTX) cannot exceed GTXRecord token limit");
    |        emit GTXRecordCreate(_recordAddress, _finPointAmount, claimableGTX[_recordAddress]);
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |        require(_finPointAmount >= 100000, "cannot be less than 100000 FIN (in WEI)"); // minimum allowed FIN 0.000000000001 (in base units) to avoid large rounding errors
    |        uint256 afterConversionGTX;
  > |        totalClaimableGTX = totalClaimableGTX.sub(claimableGTX[_recordAddress]);
    |        if(_applyConversionRate == true) {
    |            afterConversionGTX  = _finPointAmount.mul(conversionRate).div(100);
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |            afterConversionGTX  = _finPointAmount;
    |        }
  > |        claimableGTX[_recordAddress] = afterConversionGTX;
    |        totalClaimableGTX = totalClaimableGTX.add(claimableGTX[_recordAddress]);
    |        require(totalClaimableGTX <= maxRecords, "total token record (contverted GTX) cannot exceed GTXRecord token limit");
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |        }
    |        claimableGTX[_recordAddress] = afterConversionGTX;
  > |        totalClaimableGTX = totalClaimableGTX.add(claimableGTX[_recordAddress]);
    |        require(totalClaimableGTX <= maxRecords, "total token record (contverted GTX) cannot exceed GTXRecord token limit");
    |        emit GTXRecordUpdate(_recordAddress, _finPointAmount, claimableGTX[_recordAddress]);
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(247)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |        require(claimableGTX[_newAddress] == 0, "destination must not already have a claimable record");
    |
  > |        claimableGTX[_newAddress] = claimableGTX[_oldAddress];
    |        claimableGTX[_oldAddress] = 0;
    |
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'GTXRecord':
    |
    |        claimableGTX[_newAddress] = claimableGTX[_oldAddress];
  > |        claimableGTX[_oldAddress] = 0;
    |
    |        emit GTXRecordMove(_oldAddress, _newAddress, claimableGTX[_newAddress]);
  at /unique_chucks/6/0x32b74fa63490790f6f66bc154793fcd18fc22f4a.sol(262)