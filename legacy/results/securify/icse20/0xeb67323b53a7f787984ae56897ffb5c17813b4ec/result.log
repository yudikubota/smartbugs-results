Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:FrenchIco
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:FrenchIco_Corporate
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:FrenchIco_Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:FrenchIco_Gateway
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:FrenchIco_Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:IERC20
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:MinterRole
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:OwnablePayable
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'FrenchIco_Crowdsale':
    |         require (validAccess(msg.value), "Control Access Denied");
    |         require (now <= endTime,"ICO not running");
  > |         token.mint(msg.sender,msg.value);
    |         Investors[msg.sender].tokensBought = Investors[msg.sender].tokensBought.add(msg.value);
    |         fundsCollected = fundsCollected.add(msg.value);
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(539)

[31mViolation[0m for RepeatedCall in contract 'FrenchIco_Crowdsale':
    |        bool access;
    |        if (Fico.GetRole(msg.sender) <= 1 && Investors[msg.sender].tokensBought.add(value) <= Fico.GetMaxAmount()){access = true;}
  > |        else if (Fico.GetRole(msg.sender) > 1){access = true;}
    |        else {access = false;}
    |        return access;
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(556)

[31mViolation[0m for TODAmount in contract 'FrenchIco_Crowdsale':
    |         Investors[msg.sender].tokensBought = Investors[msg.sender].tokensBought.add(msg.value);
    |         fundsCollected = fundsCollected.add(msg.value);
  > |         _owner.transfer(address(this).balance);
    |
    |         emit TokensBuy(msg.sender, msg.value);
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(542)

[31mViolation[0m for TODReceiver in contract 'FrenchIco_Crowdsale':
    |         Investors[msg.sender].tokensBought = Investors[msg.sender].tokensBought.add(msg.value);
    |         fundsCollected = fundsCollected.add(msg.value);
  > |         _owner.transfer(address(this).balance);
    |
    |         emit TokensBuy(msg.sender, msg.value);
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(542)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FrenchIco_Crowdsale':
    |         Investors[msg.sender].tokensBought = Investors[msg.sender].tokensBought.add(msg.value);
    |         fundsCollected = fundsCollected.add(msg.value);
  > |         _owner.transfer(address(this).balance);
    |
    |         emit TokensBuy(msg.sender, msg.value);
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(542)

[33mWarning[0m for UnrestrictedWrite in contract 'FrenchIco_Crowdsale':
    |         token.mint(msg.sender,msg.value);
    |         Investors[msg.sender].tokensBought = Investors[msg.sender].tokensBought.add(msg.value);
  > |         fundsCollected = fundsCollected.add(msg.value);
    |         _owner.transfer(address(this).balance);
    |
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(541)

[33mWarning[0m for UnrestrictedWrite in contract 'FrenchIco_Crowdsale':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(418)

[31mViolation[0m for LockedEther in contract 'FrenchIco_Token':
    |/*@title FRENCHICO TOKEN - FRENCHICO*/
    |
  > |contract FrenchIco_Token is ERC20Mintable {
    |
    |    using SafeMath for uint256;
  at /unique_contracts/0xeb67323b53a7f787984ae56897ffb5c17813b4ec.sol(424)