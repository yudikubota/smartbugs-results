Processing contract: /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol:CryptoClassCertificate
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle6956504690580579373/mustExplicit -j 2 -F /tmp/souffle-76b4daf5-b788-4411-bd82-018b023d9c29 -D /tmp/souffle-76b4daf5-b788-4411-bd82-018b023d9c29_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol:CryptoClassCertificate
Processing contract: /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol:DataRegister
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol:Operations
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'DataRegister':
    |}
    |
  > |contract DataRegister is Operations {
    |    bytes32 Institute; 
    |    address owner;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'DataRegister':
    |}
    |
  > |contract DataRegister is Operations {
    |    bytes32 Institute; 
    |    address owner;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'DataRegister':
    |            InstructorCount++;
    |            Instructor[_instructorUId] = bytes(instructor);
  > |            InstructorUIds[InstructorCount]=_instructorUId;
    |            return(true);
    |    }
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(124)

[31mViolation[0m for UnrestrictedWrite in contract 'DataRegister':
    |            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));
    |            CourseUIds[CourseCount] = _courseUId;
  > |            Course[_courseUId] = _course;
    |            courseInstructor memory _courseInstructor;
    |            _courseInstructor.CourseId = CourseCount;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(140)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |pragma solidity ^0.5.1;
  > |contract Operations {
    |    function copyBytesNToBytes(bytes32 source, bytes memory destination, uint[1] memory pointer) internal pure {
    |        for (uint i=0; i < 32; i++) {
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |}
    |
  > |contract DataRegister is Operations {
    |    bytes32 Institute; 
    |    address owner;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |        ) public onlyOwner notEmpty(NationalId) notEmpty(instructor) uniqueInstructorUId(NationalId) returns(bool) {
    |            bytes10 _instructorUId = bytes10(stringToBytes32(NationalId));
  > |            InstructorCount++;
    |            Instructor[_instructorUId] = bytes(instructor);
    |            InstructorUIds[InstructorCount]=_instructorUId;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            isPositive(Hours) haveInstructor(InstructorId) uniqueCourseUId(CourseUId) {
    |            course memory _course = setCourseElements(CourseName, StartDate, EndDate, Hours);
  > |            CourseCount++;
    |            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));
    |            CourseUIds[CourseCount] = _courseUId;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            CourseCount++;
    |            bytes10 _courseUId = bytes10(stringToBytes32(CourseUId));
  > |            CourseUIds[CourseCount] = _courseUId;
    |            Course[_courseUId] = _course;
    |            courseInstructor memory _courseInstructor;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            _courseInstructor.CourseId = CourseCount;
    |            _courseInstructor.InstructorId = InstructorId;
  > |            CourseInstructor.push(_courseInstructor);
    |    }
    |    function AddCourseInstructor(
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            _courseInstructor.CourseId = CourseId;
    |            _courseInstructor.InstructorId = InstructorId;
  > |            CourseInstructor.push(_courseInstructor);
    |        }
    |    function setCourseElements(
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |        string memory Name
    |        ) public onlyOwner notEmpty(Name) notEmpty(NationalId) uniqueStudentUId(NationalId) returns(bool) {
  > |            StudentCount++;
    |            StudentUIds[StudentCount] = bytes10(stringToBytes32(NationalId));
    |            Student[StudentUIds[StudentCount]]=bytes(Name);
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(172)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |        ) public onlyOwner notEmpty(Name) notEmpty(NationalId) uniqueStudentUId(NationalId) returns(bool) {
    |            StudentCount++;
  > |            StudentUIds[StudentCount] = bytes10(stringToBytes32(NationalId));
    |            Student[StudentUIds[StudentCount]]=bytes(Name);
    |        return(true);
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            _certificate.Enabled = true;
    |            bytes10 cert_uid = bytes10(stringToBytes32(CertificateUId));
  > |            CertificateCount++;
    |            Certificate[cert_uid] = _certificate;
    |            CertificateUIds[CertificateCount] = cert_uid;
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(192)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            bytes10 cert_uid = bytes10(stringToBytes32(CertificateUId));
    |            CertificateCount++;
  > |            Certificate[cert_uid] = _certificate;
    |            CertificateUIds[CertificateCount] = cert_uid;
    |            return(true);
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(193)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |            CertificateCount++;
    |            Certificate[cert_uid] = _certificate;
  > |            CertificateUIds[CertificateCount] = cert_uid;
    |            return(true);
    |    }
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(194)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |        require(_certificate.Result != '');
    |        require(! _certificate.Enabled);
  > |        Certificate[_certificateId].Enabled = true;
    |        return(true);
    |    }
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(202)

[33mWarning[0m for UnrestrictedWrite in contract 'DataRegister':
    |        require(_certificate.Result != '');
    |        require(_certificate.Enabled);
  > |        Certificate[_certificateId].Enabled = false;
    |        return(true);
    |    }
  at /unique_chucks/12/0xa77478904205f29b028e04f66a6800648109ab41.sol(210)