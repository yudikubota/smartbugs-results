Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:CustodianUpgradeable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:LockRequestable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:TokenSettings
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:TokenSettingsInterface
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:_BurnAllowed
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:_MintAllowed
Processing contract: /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol:_TradeAllowed
[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |
    |        /// @dev  The map of lock ids to pending custodian changes.
  > |        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
    |
    |        constructor(address _custodian) public LockRequestable() {
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(46)

[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |            * @param  _lockId  The identifier of a pending change request.
    |            */
  > |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
    |                custodian = getCustodianChangeReq(_lockId);
    |
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(28)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(28)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(72)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({
    |           burnAllowed: _burnAllowed,
    |           set: true
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(166)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingMintAllowedMap[lockId] = PendingMintAllowed({
    |           mintAllowed: _mintAllowed,
    |           set: true
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(211)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({
    |           tradeAllowed: _tradeAllowed,
    |           set: true
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(90)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];
    |        require(value.set == true);
  > |        burnAllowed = value.burnAllowed;
    |        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);
    |        delete pendingBurnAllowedMap[_lockId];
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        burnAllowed = value.burnAllowed;
    |        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);
  > |        delete pendingBurnAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];
    |        require(value.set == true);
  > |        mintAllowed = value.mintAllowed;
    |        emit MintAllowedConfirmed(_lockId, value.mintAllowed);
    |        delete pendingMintAllowedMap[_lockId];
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(222)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        mintAllowed = value.mintAllowed;
    |        emit MintAllowedConfirmed(_lockId, value.mintAllowed);
  > |        delete pendingMintAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];
    |        require(value.set == true);
  > |        tradeAllowed = value.tradeAllowed;
    |        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);
    |        delete pendingTradeAllowedMap[_lockId];
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(267)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        tradeAllowed = value.tradeAllowed;
    |        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);
  > |        delete pendingTradeAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/25/0x5096f94bcf5f451dc48094772fe3384ccd3b5190.sol(269)