Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:AiraID
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:ERC20Detailed
Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:IERC20
Processing contract: /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'AiraID':
    |
    |
  > |contract AiraID is ERC20Burnable, ERC20Detailed {
    |    constructor(uint256 _initial_supply) public ERC20Detailed("AIRA ID", "AIRA ID", 0) {
    |        _mint(msg.sender, _initial_supply);
  at /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol(362)

[33mWarning[0m for UnrestrictedWrite in contract 'AiraID':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/22/0x2a3a07d241eda9d573a6b666e9fc359666cf7b39.sol(264)