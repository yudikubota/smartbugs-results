Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:BytesUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:Cosigner
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:DebtEngine
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle1708731174297768964/mustExplicit -j 1 -F /tmp/souffle-2aff1f67-29a3-49b8-b1c4-d22c053c19cf -D /tmp/souffle-2aff1f67-29a3-49b8-b1c4-d22c053c19cf_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:DebtEngine
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:ERC165
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:ERC721Base
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:IERC165
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:IERC173
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:IERC20
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:ImplementsInterface
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:IsContract
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:LoanApprover
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:LoanManager
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:Model
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:RateOracle
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol:URIProvider
[31mViolation[0m for LockedEther in contract 'ERC721Base':
    |
    |
  > |contract ERC721Base is ERC165 {
    |    using SafeMath for uint256;
    |    using IsContract for address;
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(522)

[31mViolation[0m for RepeatedCall in contract 'ERC721Base':
    |            let x := mload(0x40)
    |
  > |            success := call(
    |                            gas,                  // Send all gas
    |                            _contract,            // To addr
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC721Base':
    |
    |
  > |contract ERC721Base is ERC165 {
    |    using SafeMath for uint256;
    |    using IsContract for address;
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(522)

[31mViolation[0m for LockedEther in contract 'LoanManager':
    |
    |
  > |contract LoanManager is BytesUtils {
    |    using ImplementsInterface for address;
    |    using IsContract for address;
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2151)

[31mViolation[0m for RepeatedCall in contract 'LoanManager':
    |            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature
    |
  > |            success := staticcall(
    |                                30000,         // 30k gas
    |                                _contract,     // To addr
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(1932)

[31mViolation[0m for RepeatedCall in contract 'LoanManager':
    |        bytes calldata _data
    |    ) external view returns (bytes32) {
  > |        return debtEngine.buildId2(
    |            address(this),
    |            _model,
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2276)

[31mViolation[0m for RepeatedCall in contract 'LoanManager':
    |        // Generate the debt
    |        require(
  > |            debtEngine.create2(
    |                Model(request.model),
    |                msg.sender,
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2478)

[31mViolation[0m for RepeatedCall in contract 'LoanManager':
    |        );
    |
  > |        id = debtEngine.buildId2(
    |            address(this),
    |            _model,
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2605)

[31mViolation[0m for RepeatedCall in contract 'LoanManager':
    |        );
    |
  > |        id = debtEngine.buildId2(
    |            address(this),
    |            model,
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2797)

[33mWarning[0m for RepeatedCall in contract 'LoanManager':
    |        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);
    |        require(
  > |            token.transferFrom(
    |                msg.sender,
    |                request.borrower,
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2466)

[33mWarning[0m for RepeatedCall in contract 'LoanManager':
    |            request.salt = _cosignerLimit; // Risky ?
    |            require(
  > |                Cosigner(_cosigner).requestCosign(
    |                    address(this),
    |                    uint256(_id),
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2501)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |
    |
  > |interface IERC20 {
    |    function transfer(address _to, uint _value) external returns (bool success);
    |    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |
    |
  > |contract LoanManager is BytesUtils {
    |    using ImplementsInterface for address;
    |    using IsContract for address;
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2151)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |            if (_borrower.isContract() && _borrower.implementsMethod(0x76ba6009)) {
    |                approved = _requestContractApprove(id, _borrower);
  > |                requests[id].approved = approved;
    |            }
    |        }
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2373)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |
    |        if (approved) {
  > |            requests[id].position = uint64(directory.push(id) - 1);
    |            emit Approved(id);
    |        }
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2378)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |        // Check request.approved again, protect against reentrancy
    |        if (approved && !request.approved) {
  > |            request.position = uint64(directory.push(_id) - 1);
    |            request.approved = true;
    |            emit Approved(_id);
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2444)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |        if (approved && !request.approved) {
    |            request.position = uint64(directory.push(_id) - 1);
  > |            request.approved = true;
    |            emit Approved(_id);
    |        }
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2445)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |        require(request.expiration > now, "The request is expired");
    |
  > |        request.open = false;
    |
    |        uint256 tokens = _currencyToToken(request.oracle, request.amount, _oracleData);
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2462)

[33mWarning[0m for UnrestrictedWrite in contract 'LoanManager':
    |            );
    |            require(request.cosigner == _cosigner, "Cosigner didn't callback");
  > |            request.salt = auxSalt;
    |        }
    |
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(2510)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0), "0x0 Is not a valid owner");
    |        emit OwnershipTransferred(_owner, _newOwner);
  > |        _owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0x6b3e82ddc85710ed9c32c61b317ade1b2a80fc77.sol(1051)