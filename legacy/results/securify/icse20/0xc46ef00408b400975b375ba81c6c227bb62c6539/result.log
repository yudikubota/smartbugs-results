Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:ImpMine
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:Ownable
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:Pausable
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:PauserRole
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol:ValidationUtil
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'ImpMine':
    |
    |        // Делаем перевод получателю, в случае неудачи будет throws
  > |        _destinationWallet.transfer(msg.value);
    |
    |        _userUpgrades[validatingHash] = true;
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(330)

[33mWarning[0m for TODAmount in contract 'ImpMine':
    |
    |        // Делаем перевод получателю, в случае неудачи будет throws
  > |        _destinationWallet.transfer(msg.value);
    |
    |        _userUpgrades[validatingHash] = true;
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(330)

[31mViolation[0m for TODReceiver in contract 'ImpMine':
    |
    |        // Делаем перевод получателю, в случае неудачи будет throws
  > |        _destinationWallet.transfer(msg.value);
    |
    |        _userUpgrades[validatingHash] = true;
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(330)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(202)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |        require(price != 0);
    |
  > |        _upgradePrices[level] = price;
    |    }
    |
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(345)

[33mWarning[0m for UnrestrictedWrite in contract 'ImpMine':
    |        requireNotEmptyAddress(walletAddress);
    |
  > |        _destinationWallet = walletAddress;
    |    }
    |
  at /unique_chucks/13/0xc46ef00408b400975b375ba81c6c227bb62c6539.sol(355)