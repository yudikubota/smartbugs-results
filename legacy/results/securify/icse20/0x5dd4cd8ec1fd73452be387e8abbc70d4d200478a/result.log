Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:AccessDelegated
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:AccessDelegatedTokenStorage
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:ERC20
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:ERC20Basic
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:IReputationToken
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:IUniverse
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:StakeToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:StakingContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'AccessDelegated':
    |   */
    |
  > |    mapping(address => uint256) public accessLevel;
    |
    |    event AccessLevelSet(
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(71)

[31mViolation[0m for MissingInputValidation in contract 'AccessDelegated':
    |     * @param _access uint256 level of access to give 0, 1, 2, 3.
    |     */
  > |    function setAccessLevel(
    |        address _user,
    |        uint256 _access
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(164)

[31mViolation[0m for MissingInputValidation in contract 'AccessDelegated':
    |    }
    |
  > |    function revokeAccess(address _user) public adminAccessLevelOnly {
    |        /// admin cannot revoke own access
    |        require(
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(185)

[31mViolation[0m for MissingInputValidation in contract 'AccessDelegated':
    |     * @return uint256 access level of _user
    |     */
  > |    function getAccessLevel(address _user) public view returns (uint256) {
    |        return accessLevel[_user];
    |    }
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(202)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegated':
    |            revert("erroneous access level");
    |        } else {
  > |            accessLevel[_user] = _access;
    |        }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegated':
    |        );
    |        uint256 currentAccessLevel = accessLevel[_user];
  > |        accessLevel[_user] = 0;
    |
    |        emit AccessRevoked(_user, currentAccessLevel, msg.sender);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(192)

[31mViolation[0m for LockedEther in contract 'AccessDelegatedTokenStorage':
    |}
    |
  > |contract AccessDelegatedTokenStorage is AccessDelegated {
    |
    |    using SafeMath for *;
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(632)

[31mViolation[0m for RepeatedCall in contract 'AccessDelegatedTokenStorage':
    |        uint256 oldBalance = userTokenBalance[_user];
    |        uint256 newBalance = oldBalance.add(allowance);
  > |        require(StakeToken(token).transferFrom(_user, address(this), allowance), "transfer failed");
    |
    |        /// Update user balance
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(780)

[31mViolation[0m for RepeatedCall in contract 'AccessDelegatedTokenStorage':
    |        uint256 newBalance = currentBalance.sub(_amount);
    |
  > |        require(StakeToken(token).transfer(_user, _amount), "error during token transfer");
    |
    |        /// Update user balance
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(838)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |            revert("erroneous access level");
    |        } else {
  > |            accessLevel[_user] = _access;
    |        }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |        );
    |        uint256 currentAccessLevel = accessLevel[_user];
  > |        accessLevel[_user] = 0;
    |
    |        emit AccessRevoked(_user, currentAccessLevel, msg.sender);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(192)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |    function delegatedStake(uint256 _amount) public returns (bool) {
    |        require(StakingContract(tokenStakingContractAddress).stake(_amount), "staking must be successful");
  > |        stakedTokensReceivable += _amount;
    |        approvedTokensPayable -= _amount;
    |    }
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(716)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |        require(StakingContract(tokenStakingContractAddress).stake(_amount), "staking must be successful");
    |        stakedTokensReceivable += _amount;
  > |        approvedTokensPayable -= _amount;
    |    }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(717)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |    function delegatedApproveSpender(address _address, uint256 _amount) public returns (bool) {
    |        require(StakeToken(token).approve(_address, _amount), "approval must be successful");
  > |        approvedTokensPayable += _amount;
    |    }
    |    
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(722)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |    
    |    function setTokenContract(address _token) external {
  > |        token = _token;
    |    }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(759)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |
    |    function setTokenStakingContract(address _stakingContractAddress) external {
  > |        tokenStakingContractAddress = _stakingContractAddress;
    |    }
    |    
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(763)

[31mViolation[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |    
    |    function setAugurUniverse(address augurUniverse) external {
  > |        augurUniverseAddress = address(IUniverse(augurUniverse));
    |    }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(767)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |
    |        /// update the total balance for the token
  > |        totalTokenBalance = totalTokenBalance.add(allowance);
    |
    |        // assert(StakeToken(token).balanceOf(address(this)) == totalTokenBalance);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(786)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |
    |        /// update the total balance for the token
  > |        totalTokenBalance = totalTokenBalance.add(_amount);
    |        
    |        emit UserBalanceChange(_user, oldBalance, newBalance);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(802)

[33mWarning[0m for UnrestrictedWrite in contract 'AccessDelegatedTokenStorage':
    |
    |        /// update the total balance for the token
  > |        totalTokenBalance = SafeMath.sub(totalTokenBalance, _amount);
    |
    |        /// Fire event and return some goodies
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(844)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(315)

[31mViolation[0m for LockedEther in contract 'StakeToken':
    |     * @title StakeToken
    |     */
  > |contract StakeToken is Token {
    |
    |    string public constant NAME = "TestTokenERC20"; // solium-disable-line uppercase
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(474)

[31mViolation[0m for UnrestrictedWrite in contract 'StakeToken':
    |    function giveMeTokens() public {
    |        balances[msg.sender] += INITIAL_SUPPLY;
  > |        totalSupply_ += INITIAL_SUPPLY;
    |    }
    |}
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(496)

[33mWarning[0m for UnrestrictedWrite in contract 'StakeToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(315)

[33mWarning[0m for UnrestrictedWrite in contract 'StakeToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(382)

[33mWarning[0m for UnrestrictedWrite in contract 'StakeToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(383)

[31mViolation[0m for UnrestrictedWrite in contract 'StakingContract':
    |
    |    function initForTests(address _token) public {
  > |        stakingTokenAddress = _token;
    |        // StakeToken(stakingTokenAddress).giveMeTokens();
    |        // StakeToken(stakingTokenAddress).balanceOf(this);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(562)

[31mViolation[0m for UnrestrictedWrite in contract 'StakingContract':
    |        // StakeToken(stakingTokenAddress).giveMeTokens();
    |        // StakeToken(stakingTokenAddress).balanceOf(this);
  > |        stakingToken = StakeToken(stakingTokenAddress);
    |    }
    |
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(565)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(315)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(382)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/28/0x5dd4cd8ec1fd73452be387e8abbc70d4d200478a.sol(383)