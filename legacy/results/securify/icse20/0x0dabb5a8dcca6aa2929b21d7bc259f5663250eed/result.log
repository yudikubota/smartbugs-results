Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:AdminStuffs
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:Eth2DaiInterface
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:Helper
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:InstaSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle5116573033513368832/mustExplicit -j 1 -F /tmp/souffle-79c8fe1b-fa47-44fd-a0e1-ce0dbf74793f -D /tmp/souffle-79c8fe1b-fa47-44fd-a0e1-ce0dbf74793f_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:InstaSwap
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:KyberInterface
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:SplitHelper
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:SplitResolver
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:SplitSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle5116573033513368832/mustExplicit -j 1 -F /tmp/souffle-22d4ddcc-8401-4d80-9723-547f4f004bc6 -D /tmp/souffle-22d4ddcc-8401-4d80-9723-547f4f004bc6_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:SplitSwap
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:TokenInterface
Processing contract: /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol:UniswapExchange
[31mViolation[0m for TODAmount in contract 'AdminStuffs':
    |
    |    function withdrawEth() public payable isAdmin {
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(136)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function setSplitEth(uint amt) public isAdmin {
  > |        maxSplitAmtEth = amt;
    |    }
    |
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |
    |    function setSplitDai(uint amt) public isAdmin {
  > |        maxSplitAmtDai = amt;
    |    }
    |
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(127)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |    function changeFee(uint amt) public isAdmin {
    |        if (amt > 997000000000000000) {
  > |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
    |            cut = amt;
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'AdminStuffs':
    |            cut = 997000000000000000; // maximum fees can be 0.3%. Minimum 0%
    |        } else {
  > |            cut = amt;
    |        }
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(143)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(178)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(180)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(185)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |    function getRateUniswap(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(191)

[31mViolation[0m for RepeatedCall in contract 'SplitHelper':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(193)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |    function getRateEth2Dai(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(178)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(dest, wethAddr, srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = Eth2DaiInterface(eth2daiAddr).getBuyAmount(wethAddr, src, srcAmt);
    |        }
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(180)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |
    |    function getRateKyber(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
  > |        (uint kyberPrice,) = KyberInterface(kyberAddr).getExpectedRate(src, dest, srcAmt);
    |        destAmt = wmul(srcAmt, kyberPrice);
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(185)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |    function getRateUniswap(address src, address dest, uint srcAmt) public view returns (uint destAmt) {
    |        if (src == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
    |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(191)

[31mViolation[0m for RepeatedCall in contract 'SplitResolver':
    |            destAmt = UniswapExchange(uniswapAddr).getEthToTokenInputPrice(srcAmt);
    |        } else if (dest == ethAddr) {
  > |            destAmt = UniswapExchange(uniswapAddr).getTokenToEthInputPrice(srcAmt);
    |        }
    |    }
  at /unique_contracts/0x0dabb5a8dcca6aa2929b21d7bc259f5663250eed.sol(193)