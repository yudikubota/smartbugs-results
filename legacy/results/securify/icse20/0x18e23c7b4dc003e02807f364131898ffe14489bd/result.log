Processing contract: /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol:FSGToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FSGToken':
    |}
    |
  > |contract FSGToken is owned {
    |    
    |    using SafeMath for uint256;
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(47)

[31mViolation[0m for UnrestrictedWrite in contract 'FSGToken':
    |        uint previousBalances = balanceOf[_from] + balanceOf[_to];
    |        balanceOf[_from] -= _value;
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |        address from = recover(hashedTx, _signature);
    |        require(from != address(0));
  > |        balanceOf[from] = balanceOf[from].sub(_value).sub(_fee);
    |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |        require(from != address(0));
    |        balanceOf[from] = balanceOf[from].sub(_value).sub(_fee);
  > |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
    |        signatures[_signature] = true;
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        balanceOf[msg.sender] = balanceOf[msg.sender].add(_fee);
  > |        signatures[_signature] = true;
    |        emit Transfer(from, _to, _value);
    |        emit Transfer(from, msg.sender, _fee);
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |    //Mint&Burn Token
    |    function mintToken(uint256 mintedAmount) onlyOwner public {
  > |        balanceOf[owner] += mintedAmount.mul(1e6);
    |        totalSupply += mintedAmount.mul(1e6);
    |        emit Transfer(address(this), owner, mintedAmount);
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |    function mintToken(uint256 mintedAmount) onlyOwner public {
    |        balanceOf[owner] += mintedAmount.mul(1e6);
  > |        totalSupply += mintedAmount.mul(1e6);
    |        emit Transfer(address(this), owner, mintedAmount);
    |    }
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |    function burn(uint256 _value)onlyOwner public returns (bool success) {
    |        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
  > |        balanceOf[owner] -= _value.mul(1e6);            // Subtract from the sender
    |        totalSupply -= _value.mul(1e6);                      // Updates totalSupply
    |        emit Burn(owner, _value);
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'FSGToken':
    |        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |        balanceOf[owner] -= _value.mul(1e6);            // Subtract from the sender
  > |        totalSupply -= _value.mul(1e6);                      // Updates totalSupply
    |        emit Burn(owner, _value);
    |        return true;
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(138)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |    }
    |
  > |    function transferOwnership(address newOwner) onlyOwner public {
    |        owner = newOwner;
    |    }
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/15/0x18e23c7b4dc003e02807f364131898ffe14489bd.sol(43)