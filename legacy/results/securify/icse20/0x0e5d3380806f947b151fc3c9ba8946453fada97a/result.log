Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:ERC20
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:ERC20Basic
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:Gentrion
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(111)

[31mViolation[0m for LockedEther in contract 'Gentrion':
    |}
    |
  > |contract Gentrion is StandardToken, Ownable {
    |  string public name;                   // Token Name
    |  uint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'Gentrion':
    |}
    |
  > |contract Gentrion is StandardToken, Ownable {
    |  string public name;                   // Token Name
    |  uint8 public decimals;                // How many decimals to show. To be standard complicant keep it 18
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'Gentrion':
    |    if (transfer(_toAddress, amount)) {
    |      hisList[hisCount] = UserHistory(_toAddress, _word1, _word2);
  > |      hisCount++;
    |    }
    |  }
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'Gentrion':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'Gentrion':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(298)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_to != address(0));
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/9/0x0e5d3380806f947b151fc3c9ba8946453fada97a.sol(155)