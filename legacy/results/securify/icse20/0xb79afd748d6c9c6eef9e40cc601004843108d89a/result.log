Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:IERC20
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:ISwaps
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:Ownable
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:ReentrancyGuard
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:Swaps
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol:Vault
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'Swaps':
    |        if (_token == address(0)) {
    |            require(msg.value == _amount, "Payable value should be equals value");
  > |            address(vault).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "Payable not allowed here");
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(409)

[31mViolation[0m for RepeatedCall in contract 'Swaps':
    |                address user = investors[_id][token][u];
    |                uint userInvestment = investments[_id][token][user];
  > |                vault.withdraw(token, user, userInvestment);
    |            }
    |        }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(435)

[31mViolation[0m for RepeatedCall in contract 'Swaps':
    |        if (investment > 0) {
    |            raised[_id][_token] = raised[_id][_token].sub(investment);
  > |            vault.withdraw(_token, user, investment);
    |        }
    |
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(461)

[31mViolation[0m for RepeatedCall in contract 'Swaps':
    |            }
    |
  > |            vault.withdraw(_bSide, user, toPay);
    |            emit SwapSend(_id, _bSide, user, toPay);
    |        }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(594)

[31mViolation[0m for RepeatedCall in contract 'Swaps':
    |        if (raisedWithOverflow > limits[_id][_token]) {
    |            uint overflow = raisedWithOverflow.sub(limits[_id][_token]);
  > |            vault.withdraw(_token, _from, overflow);
    |            amount = amount.sub(overflow);
    |        }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(638)

[33mWarning[0m for TODAmount in contract 'Swaps':
    |        if (_token == address(0)) {
    |            require(msg.value == _amount, "Payable value should be equals value");
  > |            address(vault).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "Payable not allowed here");
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(409)

[31mViolation[0m for TODReceiver in contract 'Swaps':
    |        if (_token == address(0)) {
    |            require(msg.value == _amount, "Payable value should be equals value");
  > |            address(vault).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "Payable not allowed here");
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(409)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Swaps':
    |        if (_token == address(0)) {
    |            require(msg.value == _amount, "Payable value should be equals value");
  > |            address(vault).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "Payable not allowed here");
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(409)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |
    |
  > |contract Swaps is Ownable, ISwaps, ReentrancyGuard {
    |    using SafeMath for uint;
    |
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(267)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        require(_expirationTimestamp > now, "Expiration time must be in future");
    |
  > |        owners[_id] = msg.sender;
    |        baseAddresses[_id] = _baseAddress;
    |        quoteAddresses[_id] = _quoteAddress;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(372)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |
    |        owners[_id] = msg.sender;
  > |        baseAddresses[_id] = _baseAddress;
    |        quoteAddresses[_id] = _quoteAddress;
    |        expirationTimestamps[_id] = _expirationTimestamp;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(373)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        owners[_id] = msg.sender;
    |        baseAddresses[_id] = _baseAddress;
  > |        quoteAddresses[_id] = _quoteAddress;
    |        expirationTimestamps[_id] = _expirationTimestamp;
    |        limits[_id][_baseAddress] = _baseLimit;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(374)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        baseAddresses[_id] = _baseAddress;
    |        quoteAddresses[_id] = _quoteAddress;
  > |        expirationTimestamps[_id] = _expirationTimestamp;
    |        limits[_id][_baseAddress] = _baseLimit;
    |        limits[_id][_quoteAddress] = _quoteLimit;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(375)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        quoteAddresses[_id] = _quoteAddress;
    |        expirationTimestamps[_id] = _expirationTimestamp;
  > |        limits[_id][_baseAddress] = _baseLimit;
    |        limits[_id][_quoteAddress] = _quoteLimit;
    |        baseOnlyInvestor[_id] = _baseOnlyInvestor;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(376)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        expirationTimestamps[_id] = _expirationTimestamp;
    |        limits[_id][_baseAddress] = _baseLimit;
  > |        limits[_id][_quoteAddress] = _quoteLimit;
    |        baseOnlyInvestor[_id] = _baseOnlyInvestor;
    |        minInvestments[_id][_baseAddress] = _minBaseInvestment;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        limits[_id][_baseAddress] = _baseLimit;
    |        limits[_id][_quoteAddress] = _quoteLimit;
  > |        baseOnlyInvestor[_id] = _baseOnlyInvestor;
    |        minInvestments[_id][_baseAddress] = _minBaseInvestment;
    |        minInvestments[_id][_quoteAddress] = _minQuoteInvestment;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(378)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        limits[_id][_quoteAddress] = _quoteLimit;
    |        baseOnlyInvestor[_id] = _baseOnlyInvestor;
  > |        minInvestments[_id][_baseAddress] = _minBaseInvestment;
    |        minInvestments[_id][_quoteAddress] = _minQuoteInvestment;
    |
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(379)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        baseOnlyInvestor[_id] = _baseOnlyInvestor;
    |        minInvestments[_id][_baseAddress] = _minBaseInvestment;
  > |        minInvestments[_id][_quoteAddress] = _minQuoteInvestment;
    |
    |        emit OrderCreated(
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(380)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        }
    |
  > |        isCancelled[_id] = true;
    |        emit OrderCancelled(_id);
    |    }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(439)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        _distribute(_id, quoteAddresses[_id], baseAddresses[_id]);
    |
  > |        isSwapped[_id] = true;
    |        emit OrderSwapped(_id, msg.sender);
    |    }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(574)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |        }
    |
  > |        _array[idx] = _array[_array.length - 1];
    |        delete _array[_array.length - 1];
    |        _array.length--;
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(608)

[33mWarning[0m for UnrestrictedWrite in contract 'Swaps':
    |
    |        _array[idx] = _array[_array.length - 1];
  > |        delete _array[_array.length - 1];
    |        _array.length--;
    |    }
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(609)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Vault':
    |    function withdraw(address _token, address _receiver, uint _amount) public onlySwaps {
    |        if (_token == address(0)) {
  > |            address(uint160(_receiver)).transfer(_amount);
    |        } else {
    |            IERC20(_token).transfer(_receiver, _amount);
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(259)

[33mWarning[0m for UnrestrictedWrite in contract 'Vault':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'Vault':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'Vault':
    |
    |    function setSwaps(address _swaps) public onlyOwner {
  > |        swaps = _swaps;
    |    }
    |
  at /unique_chucks/15/0xb79afd748d6c9c6eef9e40cc601004843108d89a.sol(254)