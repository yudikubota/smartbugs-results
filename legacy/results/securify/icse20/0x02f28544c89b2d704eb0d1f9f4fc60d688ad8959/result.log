Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:ERC1404
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:ERC20Interface
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:Managed
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:SPTToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol:Whitelist
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Managed':
    |    }
    |
  > |    function transferOwnership(address _newOwner) external onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(75)

[31mViolation[0m for MissingInputValidation in contract 'Managed':
    |
    |contract Managed is Owned {
  > |    mapping (address => bool) public managers;
    |
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(88)

[31mViolation[0m for MissingInputValidation in contract 'Managed':
    |    }
    |
  > |    function addManager (address managerAddress) public onlyOwner {
    |        managers[managerAddress] = true;
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(96)

[31mViolation[0m for MissingInputValidation in contract 'Managed':
    |    }
    |
  > |    function removeManager (address managerAddress) external onlyOwner {
    |        managers[managerAddress] = false;
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Managed':
    |
    |    function transferOwnership(address _newOwner) external onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'Managed':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'Managed':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'Managed':
    |
    |    function addManager (address managerAddress) public onlyOwner {
  > |        managers[managerAddress] = true;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'Managed':
    |
    |    function removeManager (address managerAddress) external onlyOwner {
  > |        managers[managerAddress] = false;
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(101)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    }
    |
  > |    function transferOwnership(address _newOwner) external onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |
    |    function transferOwnership(address _newOwner) external onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(83)

[31mViolation[0m for LockedEther in contract 'SPTToken':
    |// ----------------------------------------------------------------------------
    |// ERC20 Token, with the addition of symbol, name and decimals and an initial fixed supply
  > |contract SPTToken is ERC1404, Owned, Whitelist {
    |    using SafeMath for uint;
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'SPTToken':
    |
    |    function addToSendAllowed(address _to) external onlyManager {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_TX_CODE; // just add the code 1
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(128)

[31mViolation[0m for UnrestrictedWrite in contract 'SPTToken':
    |
    |    function addToReceiveAllowed(address _to) external onlyManager {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_RX_CODE; // just add the code 2
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(132)

[31mViolation[0m for UnrestrictedWrite in contract 'SPTToken':
    |    function removeFromSendAllowed(address _to) public onlyManager {
    |        if (WHITELISTED_CAN_TX_CODE == (whiteList[_to] & WHITELISTED_CAN_TX_CODE))  { //check code 4 so it does toggle when recalled
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_CAN_TX_CODE; // xor the code to remove the flag
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(137)

[31mViolation[0m for UnrestrictedWrite in contract 'SPTToken':
    |    function removeFromReceiveAllowed(address _to) public onlyManager {
    |        if (WHITELISTED_CAN_RX_CODE == (whiteList[_to] & WHITELISTED_CAN_RX_CODE))  {
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_CAN_RX_CODE;
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |        require((_to != address(0)) && (_to != address(this))); // Do not allow transfer to 0x0 or the token contract itself
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |        // function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
    |        require((_to != address(0)) && (_to != address(this))); // Do not allow transfer to 0x0 or the token contract itself
  > |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(259)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |
    |    function transferOwnership(address _newOwner) external onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |
    |    function addManager (address managerAddress) public onlyOwner {
  > |        managers[managerAddress] = true;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |
    |    function removeManager (address managerAddress) external onlyOwner {
  > |        managers[managerAddress] = false;
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |    */
    |    function freeze(address _to) external onlyOwner {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_FREEZE_CODE; // 4 [0100]
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |    function unFreeze(address _to) external onlyOwner {
    |        if (WHITELISTED_FREEZE_CODE == (whiteList[_to] & WHITELISTED_FREEZE_CODE )) { //Already UnFrozen
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_FREEZE_CODE; // 4 [0100]
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'SPTToken':
    |    */
    |    function setWhitelistRule(byte _newRule) external onlyOwner {
  > |        listRule = _newRule;
    |    }
    |    function getWhitelistRule() external view returns (byte){
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(172)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelist':
    |
    |    function addToSendAllowed(address _to) external onlyManager {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_TX_CODE; // just add the code 1
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(128)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelist':
    |
    |    function addToReceiveAllowed(address _to) external onlyManager {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_CAN_RX_CODE; // just add the code 2
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(132)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelist':
    |    function removeFromSendAllowed(address _to) public onlyManager {
    |        if (WHITELISTED_CAN_TX_CODE == (whiteList[_to] & WHITELISTED_CAN_TX_CODE))  { //check code 4 so it does toggle when recalled
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_CAN_TX_CODE; // xor the code to remove the flag
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(137)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelist':
    |    function removeFromReceiveAllowed(address _to) public onlyManager {
    |        if (WHITELISTED_CAN_RX_CODE == (whiteList[_to] & WHITELISTED_CAN_RX_CODE))  {
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_CAN_RX_CODE;
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(143)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |
    |    function transferOwnership(address _newOwner) external onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |
    |    function addManager (address managerAddress) public onlyOwner {
  > |        managers[managerAddress] = true;
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |
    |    function removeManager (address managerAddress) external onlyOwner {
  > |        managers[managerAddress] = false;
    |    }
    |}
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |    */
    |    function freeze(address _to) external onlyOwner {
  > |        whiteList[_to] = whiteList[_to] | WHITELISTED_FREEZE_CODE; // 4 [0100]
    |    }
    |
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |    function unFreeze(address _to) external onlyOwner {
    |        if (WHITELISTED_FREEZE_CODE == (whiteList[_to] & WHITELISTED_FREEZE_CODE )) { //Already UnFrozen
  > |            whiteList[_to] = whiteList[_to] ^ WHITELISTED_FREEZE_CODE; // 4 [0100]
    |        }
    |    }
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelist':
    |    */
    |    function setWhitelistRule(byte _newRule) external onlyOwner {
  > |        listRule = _newRule;
    |    }
    |    function getWhitelistRule() external view returns (byte){
  at /unique_chucks/4/0x02f28544c89b2d704eb0d1f9f4fc60d688ad8959.sol(172)