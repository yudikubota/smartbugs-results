Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:AssetTokenCrowdsaleT001
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:AssignTokensOffChainPaymentFeature
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:BasicAssetTokenCrowdsaleNoFeature
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:ConditionalEscrow
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:CrowdsaleL
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:Escrow
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:EthVaultInterface
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:IBasicAssetToken
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:ICRWDControllerTokenSale
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:IERC20
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:IGlobalIndexControllerLocation
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:Ownable
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:RefundEscrow
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:Secondary
Processing contract: /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol:VaultGeneratorL
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'AssetTokenCrowdsaleT001':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'AssetTokenCrowdsaleT001':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'AssetTokenCrowdsaleT001':
    |        require(validStart(), "validStart");
    |        prepareStart();
  > |        crowdsaleData.state = CrowdsaleL.State.Started;
    |        emit Started();
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1143)

[33mWarning[0m for UnrestrictedWrite in contract 'AssetTokenCrowdsaleT001':
    |        updateFromAssetToken();
    |
  > |        crowdsaleData.state = CrowdsaleL.State.Ended;
    |
    |        emit Ended();
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1183)

[33mWarning[0m for UnrestrictedWrite in contract 'AssetTokenCrowdsaleT001':
    |        require(crowdsaleData.state == CrowdsaleL.State.Ended || crowdsaleData.state == CrowdsaleL.State.Started, "state");
    |        require(hasEnded(), "not ended");
  > |        crowdsaleData.state = CrowdsaleL.State.Finalized;
    |        
    |        finalization();
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1199)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicAssetTokenCrowdsaleNoFeature':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicAssetTokenCrowdsaleNoFeature':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicAssetTokenCrowdsaleNoFeature':
    |        require(validStart(), "validStart");
    |        prepareStart();
  > |        crowdsaleData.state = CrowdsaleL.State.Started;
    |        emit Started();
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1143)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicAssetTokenCrowdsaleNoFeature':
    |        updateFromAssetToken();
    |
  > |        crowdsaleData.state = CrowdsaleL.State.Ended;
    |
    |        emit Ended();
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1183)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicAssetTokenCrowdsaleNoFeature':
    |        require(crowdsaleData.state == CrowdsaleL.State.Ended || crowdsaleData.state == CrowdsaleL.State.Started, "state");
    |        require(hasEnded(), "not ended");
  > |        crowdsaleData.state = CrowdsaleL.State.Finalized;
    |        
    |        finalization();
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(1199)

[31mViolation[0m for LockedEther in contract 'CrowdsaleL':
    |
    |/** @title CrowdsaleL library. */
  > |library CrowdsaleL {
    |    using SafeMath for uint256;
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(601)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |    /// @param _assetToken The asset token being sold.
    |    function init(Data storage _self, address _assetToken) public {
  > |        _self.token = _assetToken;
    |        _self.state = State.Draft;
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(652)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |    function init(Data storage _self, address _assetToken) public {
    |        _self.token = _assetToken;
  > |        _self.state = State.Draft;
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(653)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |        require(_globalIndex != address(0), "globalIdx zero addr");
    |
  > |        _self.wallet = _wallet;
    |        _self.globalIndex = IGlobalIndexControllerLocation(_globalIndex);
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(669)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |
    |        _self.wallet = _wallet;
  > |        _self.globalIndex = IGlobalIndexControllerLocation(_globalIndex);
    |
    |        emit CrowdsaleConfigurationChanged(_wallet, _globalIndex);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(670)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |        require(_tokenRescueControl != address(0), "addr0");
    |        
  > |        _self.tokenAssignmentControl = _tokenAssignmentControl;
    |        _self.tokenRescueControl = _tokenRescueControl;
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(682)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |        
    |        _self.tokenAssignmentControl = _tokenAssignmentControl;
  > |        _self.tokenRescueControl = _tokenRescueControl;
    |
    |        emit RolesChanged(msg.sender, _tokenAssignmentControl, _tokenRescueControl);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(683)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |        // require(requireActiveOrDraftState(_self), "require active/draft"); // No! Could have been changed by AT owner...
    |        // require(_cap > 0, "cap 0"); // No! Decided by AssetToken owner...
  > |        _self.cap = _cap;
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(703)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |
    |        require(validPurchasePostCheck(_self, tokenAmount), "invalid purchase postcheck");
  > |        _self.tokensRaised = _self.tokensRaised.add(tokenAmount);
    |
    |        emit TokenPurchase(msg.sender, _beneficiary, tokenAmount, overpaidRefund, "ETH");
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(723)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |    function setTime(Data storage _self, uint256 _startTime, uint256 _endTime) public
    |    {
  > |        _self.startTime = _startTime;
    |        _self.endTime = _endTime;
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(754)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |    {
    |        _self.startTime = _startTime;
  > |        _self.endTime = _endTime;
    |
    |        emit CrowdsaleTimeChanged(_startTime, _endTime);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(755)

[31mViolation[0m for UnrestrictedWrite in contract 'CrowdsaleL':
    |        require((_self.state == State.Finalized) || (_self.state == State.Refunding), "state");
    |
  > |        _self.state = State.Closed;
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(775)

[33mWarning[0m for TODAmount in contract 'Escrow':
    |        _deposits[payee] = 0;
    |
  > |        payee.transfer(payment);
    |
    |        emit Withdrawn(payee, payment);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(458)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |    function transferPrimary(address recipient) public onlyPrimary {
    |        require(recipient != address(0));
  > |        _primary = recipient;
    |        emit PrimaryTransferred(_primary);
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |    function deposit(address payee) public onlyPrimary payable {
    |        uint256 amount = msg.value;
  > |        _deposits[payee] = _deposits[payee].add(amount);
    |
    |        emit Deposited(payee, amount);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(444)

[33mWarning[0m for UnrestrictedWrite in contract 'Escrow':
    |        uint256 payment = _deposits[payee];
    |
  > |        _deposits[payee] = 0;
    |
    |        payee.transfer(payment);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(456)

[31mViolation[0m for TODAmount in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed);
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(564)

[33mWarning[0m for TODAmount in contract 'RefundEscrow':
    |        _deposits[payee] = 0;
    |
  > |        payee.transfer(payment);
    |
    |        emit Withdrawn(payee, payment);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(458)

[31mViolation[0m for TODReceiver in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed);
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(564)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RefundEscrow':
    |    function beneficiaryWithdraw() public {
    |        require(_state == State.Closed);
  > |        _beneficiary.transfer(address(this).balance);
    |    }
    |
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(564)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function transferPrimary(address recipient) public onlyPrimary {
    |        require(recipient != address(0));
  > |        _primary = recipient;
    |        emit PrimaryTransferred(_primary);
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function deposit(address payee) public onlyPrimary payable {
    |        uint256 amount = msg.value;
  > |        _deposits[payee] = _deposits[payee].add(amount);
    |
    |        emit Deposited(payee, amount);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(444)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |        uint256 payment = _deposits[payee];
    |
  > |        _deposits[payee] = 0;
    |
    |        payee.transfer(payment);
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(456)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function close() public onlyPrimary {
    |        require(_state == State.Active);
  > |        _state = State.Closed;
    |        emit RefundsClosed();
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundEscrow':
    |    function enableRefunds() public onlyPrimary {
    |        require(_state == State.Active);
  > |        _state = State.Refunding;
    |        emit RefundsEnabled();
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(555)

[31mViolation[0m for LockedEther in contract 'VaultGeneratorL':
    |
    |/** @title VaultGeneratorL library. */
  > |library VaultGeneratorL {
    |
    |    /// @notice generate RefundEscrow vault.
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(861)

[31mViolation[0m for MissingInputValidation in contract 'VaultGeneratorL':
    |    /// @param _wallet beneficiary on success.
    |    /// @return vault address that can be casted to interface.
  > |    function generateEthVault(address payable _wallet) public returns (address ethVaultInterface) {
    |        return address(new RefundEscrow(_wallet));
    |    }
  at /unique_contracts/0x4ffadba9d6ab927d445af9933045a5110f78cff9.sol(866)