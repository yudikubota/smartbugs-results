Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:Ethos
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:IAOSetting
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:INameAccountRecovery
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:INameFactory
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:INamePublicKey
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:INameTAOLookup
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:INameTAOPosition
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:NameFactory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:Pathos
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:TAOCurrency
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:Voice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(589)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(601)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(610)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(639)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(172)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(182)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(191)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(229)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(230)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(248)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(259)

[31mViolation[0m for UnrestrictedWrite in contract 'Ethos':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(260)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(552)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |
    |		// Store the Advocate/Listener/Speaker information
  > |		require (_nameTAOPosition.initialize(nameId, nameId, nameId, nameId));
    |
    |		// Store the public key information
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1347)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |
    |		// Store the public key information
  > |		require (_namePublicKey.initialize(nameId, msg.sender, _writerKey));
    |
    |		names.push(nameId);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1350)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |
    |		// Need to mint Voice for this Name
  > |		require (_voice.mint(nameId));
    |
    |		// Reward primordial contributor Name with Pathos/Ethos
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1355)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			_name.name(),
    |			_name.originId(),
  > |			_name.datHash(),
    |			_name.database(),
    |			_name.keyValue(),
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1397)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			_name.originId(),
    |			_name.datHash(),
  > |			_name.database(),
    |			_name.keyValue(),
    |			_name.contentId(),
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1398)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			_name.datHash(),
    |			_name.database(),
  > |			_name.keyValue(),
    |			_name.contentId(),
    |			_name.typeId()
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1399)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			_name.database(),
    |			_name.keyValue(),
  > |			_name.contentId(),
    |			_name.typeId()
    |		);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1400)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			_name.keyValue(),
    |			_name.contentId(),
  > |			_name.typeId()
    |		);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1401)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |		if (settingTAOId != address(0)) {
    |			(,,,, string memory primordialContributorName) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorName');
  > |			(uint256 primordialContributorPathos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorPathos');
    |			(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');
    |			(uint256 primordialContributorEarning,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEarning');
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1492)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			(,,,, string memory primordialContributorName) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorName');
    |			(uint256 primordialContributorPathos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorPathos');
  > |			(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');
    |			(uint256 primordialContributorEarning,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEarning');
    |			address _primordialContributorNameId = _nameTAOLookup.getIdByName(primordialContributorName);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1493)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			(uint256 primordialContributorPathos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorPathos');
    |			(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');
  > |			(uint256 primordialContributorEarning,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEarning');
    |			address _primordialContributorNameId = _nameTAOLookup.getIdByName(primordialContributorName);
    |			if (_primordialContributorNameId == _nameId) {
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1494)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			if (_primordialContributorNameId == _nameId) {
    |				_pathos.mint(_nameId, primordialContributorPathos);
  > |				_ethos.mint(_nameId, primordialContributorEthos);
    |			} else if (_primordialContributorNameId != address(0)) {
    |				_pathos.mint(_primordialContributorNameId, primordialContributorEarning);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1498)

[31mViolation[0m for RepeatedCall in contract 'NameFactory':
    |			} else if (_primordialContributorNameId != address(0)) {
    |				_pathos.mint(_primordialContributorNameId, primordialContributorEarning);
  > |				_ethos.mint(_primordialContributorNameId, primordialContributorEarning);
    |				emit RewardContributor(_nameId, primordialContributorEarning, primordialContributorEarning);
    |			}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1501)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |	) public view returns (bool) {
    |		require (_nameTAOLookup.isExist(_name));
  > |		address _nameId = _nameTAOLookup.getIdByName(_name);
    |		require (_nameId != address(0));
    |		address _signatureAddress = _getValidateSignatureAddress(_data, _nonce, _signatureV, _signatureR, _signatureS);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1454)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |				_nonce == _nonces[_nameId].add(1) &&
    |				_signatureAddress == _validateAddress &&
  > |				_namePublicKey.isKeyExist(_nameId, _validateAddress)
    |			);
    |		} else {
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1461)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |			return (
    |				_nonce == _nonces[_nameId].add(1) &&
  > |				_signatureAddress == _namePublicKey.getDefaultKey(_nameId)
    |			);
    |		}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1466)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |	function _rewardContributor(address _nameId) internal {
    |		if (settingTAOId != address(0)) {
  > |			(,,,, string memory primordialContributorName) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorName');
    |			(uint256 primordialContributorPathos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorPathos');
    |			(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1491)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |			(uint256 primordialContributorEthos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEthos');
    |			(uint256 primordialContributorEarning,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'primordialContributorEarning');
  > |			address _primordialContributorNameId = _nameTAOLookup.getIdByName(primordialContributorName);
    |			if (_primordialContributorNameId == _nameId) {
    |				_pathos.mint(_nameId, primordialContributorPathos);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1495)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |			address _primordialContributorNameId = _nameTAOLookup.getIdByName(primordialContributorName);
    |			if (_primordialContributorNameId == _nameId) {
  > |				_pathos.mint(_nameId, primordialContributorPathos);
    |				_ethos.mint(_nameId, primordialContributorEthos);
    |			} else if (_primordialContributorNameId != address(0)) {
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1497)

[33mWarning[0m for RepeatedCall in contract 'NameFactory':
    |				_ethos.mint(_nameId, primordialContributorEthos);
    |			} else if (_primordialContributorNameId != address(0)) {
  > |				_pathos.mint(_primordialContributorNameId, primordialContributorEarning);
    |				_ethos.mint(_primordialContributorNameId, primordialContributorEarning);
    |				emit RewardContributor(_nameId, primordialContributorEarning, primordialContributorEarning);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1500)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |pragma solidity >=0.5.4 <0.6.0;
    |
  > |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1162)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1172)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setVoiceAddress(address _voiceAddress) public onlyTheAO {
    |		require (_voiceAddress != address(0));
  > |		voiceAddress = _voiceAddress;
    |		_voice = Voice(voiceAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1181)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_voiceAddress != address(0));
    |		voiceAddress = _voiceAddress;
  > |		_voice = Voice(voiceAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1182)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setNameTAOVaultAddress(address _nameTAOVaultAddress) public onlyTheAO {
    |		require (_nameTAOVaultAddress != address(0));
  > |		nameTAOVaultAddress = _nameTAOVaultAddress;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1191)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setNameTAOLookupAddress(address _nameTAOLookupAddress) public onlyTheAO {
    |		require (_nameTAOLookupAddress != address(0));
  > |		nameTAOLookupAddress = _nameTAOLookupAddress;
    |		_nameTAOLookup = INameTAOLookup(nameTAOLookupAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1200)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_nameTAOLookupAddress != address(0));
    |		nameTAOLookupAddress = _nameTAOLookupAddress;
  > |		_nameTAOLookup = INameTAOLookup(nameTAOLookupAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1201)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1210)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1211)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {
    |		require (_namePublicKeyAddress != address(0));
  > |		namePublicKeyAddress = _namePublicKeyAddress;
    |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1220)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_namePublicKeyAddress != address(0));
    |		namePublicKeyAddress = _namePublicKeyAddress;
  > |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1221)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1230)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1231)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setSettingTAOId(address _settingTAOId) public onlyTheAO {
    |		require (AOLibrary.isTAO(_settingTAOId));
  > |		settingTAOId = _settingTAOId;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1240)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1249)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1250)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setPathosAddress(address _pathosAddress) public onlyTheAO {
    |		require (_pathosAddress != address(0));
  > |		pathosAddress = _pathosAddress;
    |		_pathos = Pathos(_pathosAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1259)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_pathosAddress != address(0));
    |		pathosAddress = _pathosAddress;
  > |		_pathos = Pathos(_pathosAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1260)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |	function setEthosAddress(address _ethosAddress) public onlyTheAO {
    |		require (_ethosAddress != address(0));
  > |		ethosAddress = _ethosAddress;
    |		_ethos = Ethos(_ethosAddress);
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1269)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_ethosAddress != address(0));
    |		ethosAddress = _ethosAddress;
  > |		_ethos = Ethos(_ethosAddress);
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1270)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |
    |		// Increment the nonce
  > |		_nonces[nameId]++;
    |
    |		_ethAddressToNameId[msg.sender] = nameId;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1338)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |
    |		_ethAddressToNameId[msg.sender] = nameId;
  > |		_nameIdToEthAddress[nameId] = msg.sender;
    |
    |		// Store the name lookup information
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1341)

[33mWarning[0m for UnrestrictedWrite in contract 'NameFactory':
    |		require (_namePublicKey.initialize(nameId, msg.sender, _writerKey));
    |
  > |		names.push(nameId);
    |
    |		// Need to mint Voice for this Name
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1352)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(172)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(182)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(191)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(229)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(230)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(248)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(259)

[31mViolation[0m for UnrestrictedWrite in contract 'Pathos':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(260)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(552)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(172)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(182)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(191)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(229)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(230)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(248)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(259)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(260)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(12)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(41)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(44)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(336)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(384)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(460)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(476)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(478)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(972)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(982)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(991)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (hasReceived[_nameId] == false);
    |
  > |		hasReceived[_nameId] = true;
    |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
    |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1004)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |
    |		hasReceived[_nameId] = true;
  > |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
    |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
    |		emit Mint(_nameId, MAX_SUPPLY_PER_NAME);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1005)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		hasReceived[_nameId] = true;
    |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
  > |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
    |		emit Mint(_nameId, MAX_SUPPLY_PER_NAME);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1006)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (_value > 0 && _value <= MAX_SUPPLY_PER_NAME);
    |		require (balanceOf[_nameId] >= _value);							// Check if the targeted balance is enough
  > |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1030)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (balanceOf[_nameId] >= _value);							// Check if the targeted balance is enough
    |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
  > |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
    |		emit Stake(_nameId, _taoId, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1031)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
  > |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
    |		emit Stake(_nameId, _taoId, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1032)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (taoStakedBalance[_nameId][_taoId] >= _value);	// Check if the targeted staked balance is enough
    |		require (balanceOf[_taoId] >= _value);	// Check if the total targeted staked balance is enough
  > |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
    |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1048)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (balanceOf[_taoId] >= _value);	// Check if the total targeted staked balance is enough
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
  > |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
    |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
    |		emit Unstake(_nameId, _taoId, _value);
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1049)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
  > |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
    |		emit Unstake(_nameId, _taoId, _value);
    |		return true;
  at /unique_chucks/22/0x10fbf61e4cce57d72eed8b5d9728134ce374bd82.sol(1050)