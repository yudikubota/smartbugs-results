Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Coordinator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:DxMgnPool
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:GnosisMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:GnosisStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:IDutchExchange
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:IERC20
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:MinterRole
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:MockContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:MockInterface
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Ownable
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Proxied
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Proxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:StandardTokenData
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:Token
Processing contract: /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol:TokenFRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'DxMgnPool':
    |
    |
  > |contract DxMgnPool is Ownable {
    |    using SafeMath for uint;
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1548)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));
    |        // call return false when something wrong
    |        require(success);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1497)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        require(currentState == State.Pooling, "Pooling period is over.");
    |
  > |        uint auctionIndex = dx.getAuctionIndex(address(depositToken), address(secondaryToken));
    |        require(auctionIndex > lastParticipatedAuctionIndex, "Has to wait for new auction to start");
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1652)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |
    |        (address sellToken, address buyToken) = sellAndBuyToken();
  > |        uint depositAmount = depositToken.balanceOf(address(this));
    |        if (isDepositTokenTurn()) {
    |            totalPoolSharesCummulative += 2 * totalPoolShares;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1656)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |            if( depositAmount > 0){
    |                //depositing new tokens
  > |                depositToken.approve(address(dx), depositAmount);
    |                dx.deposit(address(depositToken), depositAmount);
    |            }
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1661)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |                //depositing new tokens
    |                depositToken.approve(address(dx), depositAmount);
  > |                dx.deposit(address(depositToken), depositAmount);
    |            }
    |        }
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1662)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        }
    |        // Don't revert if we can't claimSellerFunds
  > |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", buyToken, sellToken, address(this), lastParticipatedAuctionIndex));
    |
    |        uint amount = dx.balances(address(sellToken), address(this));
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1666)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", buyToken, sellToken, address(this), lastParticipatedAuctionIndex));
    |
  > |        uint amount = dx.balances(address(sellToken), address(this));
    |        if (isDepositTokenTurn()) {
    |            totalDeposit = amount;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1668)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        }
    |
  > |        (lastParticipatedAuctionIndex, ) = dx.postSellOrder(sellToken, buyToken, 0, amount);
    |        auctionCount += 1;
    |    }
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1673)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        // Don't revert if wen can't claimSellerFunds
    |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", secondaryToken, depositToken, address(this), lastParticipatedAuctionIndex));
  > |        mgnToken.unlockTokens();
    |
    |        uint amountOfFundsInDX = dx.balances(address(depositToken), address(this));
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1687)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |
    |        uint amountOfFundsInDX = dx.balances(address(depositToken), address(this));
  > |        totalDeposit = amountOfFundsInDX + depositToken.balanceOf(address(this));
    |        if(amountOfFundsInDX > 0){
    |            dx.withdraw(address(depositToken), amountOfFundsInDX);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1690)

[31mViolation[0m for RepeatedCall in contract 'DxMgnPool':
    |        totalDeposit = amountOfFundsInDX + depositToken.balanceOf(address(this));
    |        if(amountOfFundsInDX > 0){
  > |            dx.withdraw(address(depositToken), amountOfFundsInDX);
    |        }
    |        currentState = State.DepositWithdrawnFromDx;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1692)

[33mWarning[0m for RepeatedCall in contract 'DxMgnPool':
    |        (bool success, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));
    |        // call return false when something wrong
    |        require(success);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1511)

[33mWarning[0m for RepeatedCall in contract 'DxMgnPool':
    |        require(currentState == State.PoolingEnded, "Pooling period is not yet over.");
    |        require(
  > |            dx.getAuctionIndex(address(depositToken), address(secondaryToken)) > lastParticipatedAuctionIndex, 
    |            "Last auction is still running"
    |        );      
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1681)

[33mWarning[0m for RepeatedCall in contract 'DxMgnPool':
    |        
    |        // Don't revert if wen can't claimSellerFunds
  > |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", secondaryToken, depositToken, address(this), lastParticipatedAuctionIndex));
    |        mgnToken.unlockTokens();
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1686)

[33mWarning[0m for RepeatedCall in contract 'DxMgnPool':
    |        mgnToken.unlockTokens();
    |
  > |        uint amountOfFundsInDX = dx.balances(address(depositToken), address(this));
    |        totalDeposit = amountOfFundsInDX + depositToken.balanceOf(address(this));
    |        if(amountOfFundsInDX > 0){
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1689)

[31mViolation[0m for UnhandledException in contract 'DxMgnPool':
    |        }
    |        // Don't revert if we can't claimSellerFunds
  > |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", buyToken, sellToken, address(this), lastParticipatedAuctionIndex));
    |
    |        uint amount = dx.balances(address(sellToken), address(this));
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1666)

[31mViolation[0m for UnhandledException in contract 'DxMgnPool':
    |        
    |        // Don't revert if wen can't claimSellerFunds
  > |        address(dx).call(abi.encodeWithSignature("claimSellerFunds(address,address,address,uint256)", secondaryToken, depositToken, address(this), lastParticipatedAuctionIndex));
    |        mgnToken.unlockTokens();
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1686)

[33mWarning[0m for UnrestrictedWrite in contract 'DxMgnPool':
    |
    |
  > |contract DxMgnPool is Ownable {
    |    using SafeMath for uint;
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1548)

[33mWarning[0m for UnrestrictedWrite in contract 'DxMgnPool':
    |
    |        uint amountOfFundsInDX = dx.balances(address(depositToken), address(this));
  > |        totalDeposit = amountOfFundsInDX + depositToken.balanceOf(address(this));
    |        if(amountOfFundsInDX > 0){
    |            dx.withdraw(address(depositToken), amountOfFundsInDX);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1690)

[33mWarning[0m for UnrestrictedWrite in contract 'DxMgnPool':
    |            dx.withdraw(address(depositToken), amountOfFundsInDX);
    |        }
  > |        currentState = State.DepositWithdrawnFromDx;
    |    }
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1694)

[33mWarning[0m for UnrestrictedWrite in contract 'DxMgnPool':
    |
    |        mgnToken.withdrawUnlockedTokens();
  > |        totalMgn = mgnToken.balanceOf(address(this));
    |
    |        currentState = State.MgnUnlocked;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1704)

[33mWarning[0m for UnrestrictedWrite in contract 'DxMgnPool':
    |        totalMgn = mgnToken.balanceOf(address(this));
    |
  > |        currentState = State.MgnUnlocked;
    |    }
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1706)

[31mViolation[0m for LockedEther in contract 'GnosisMath':
    |/// @author Alan Lu - <alan.lu@gnosis.pm>
    |/// @author Stefan George - <stefan@gnosis.pm>
  > |library GnosisMath {
    |    /*
    |     *  Constants
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(944)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1242)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1258)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1260)

[31mViolation[0m for LockedEther in contract 'MockContract':
    | * Implementation of the MockInterface.
    | */
  > |contract MockContract is MockInterface {
    |	enum MockType { Return, Revert, OutOfGas }
    |	
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(443)

[31mViolation[0m for UnhandledException in contract 'MockContract':
    |
    |		// Record invocation as separate call so we don't rollback in case we are called with STATICCALL
  > |		(, bytes memory r) = address(this).call.gas(100000)(abi.encodeWithSignature("updateInvocationCount(bytes4,bytes)", methodId, msg.data));
    |		assert(r.length == 0);
    |		
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(730)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    | * Implementation of the MockInterface.
    | */
  > |contract MockContract is MockInterface {
    |	enum MockType { Return, Revert, OutOfGas }
    |	
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(443)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |	function trackMethodIdMock(bytes4 methodId) private {
    |		if (methodIdMocks[methodId] == 0x0) {
  > |			methodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];
    |			methodIdMocks[SENTINEL_ANY_MOCKS] = methodId;
    |		}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(485)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		if (methodIdMocks[methodId] == 0x0) {
    |			methodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];
  > |			methodIdMocks[SENTINEL_ANY_MOCKS] = methodId;
    |		}
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(486)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function _givenAnyReturn(bytes memory response) internal {
  > |		fallbackMockType = MockType.Return;
    |		fallbackExpectation = response;
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(491)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenAnyRevert() external {
  > |		fallbackMockType = MockType.Revert;
    |		fallbackRevertMessage = "";
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(513)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenAnyRevertWithMessage(string calldata message) external {
  > |		fallbackMockType = MockType.Revert;
    |		fallbackRevertMessage = message;
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(518)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenAnyRunOutOfGas() external {
  > |		fallbackMockType = MockType.OutOfGas;
    |	}
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(523)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function _givenCalldataReturn(bytes memory call, bytes memory response) private  {
  > |		calldataMockTypes[call] = MockType.Return;
    |		calldataExpectations[call] = response;
    |		trackCalldataMock(call);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(527)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |	function _givenMethodReturn(bytes memory call, bytes memory response) private {
    |		bytes4 method = bytesToBytes4(call);
  > |		methodIdMockTypes[method] = MockType.Return;
    |		methodIdExpectations[method] = response;
    |		trackMethodIdMock(method);		
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(551)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenCalldataRevert(bytes calldata call) external {
  > |		calldataMockTypes[call] = MockType.Revert;
    |		calldataRevertMessage[call] = "";
    |		trackCalldataMock(call);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(574)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |	function givenMethodRevert(bytes calldata call) external {
    |		bytes4 method = bytesToBytes4(call);
  > |		methodIdMockTypes[method] = MockType.Revert;
    |		trackMethodIdMock(method);		
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(581)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external {
  > |		calldataMockTypes[call] = MockType.Revert;
    |		calldataRevertMessage[call] = message;
    |		trackCalldataMock(call);
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(586)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |	function givenMethodRevertWithMessage(bytes calldata call, string calldata message) external {
    |		bytes4 method = bytesToBytes4(call);
  > |		methodIdMockTypes[method] = MockType.Revert;
    |		methodIdRevertMessages[method] = message;
    |		trackMethodIdMock(method);		
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(593)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |	function givenCalldataRunOutOfGas(bytes calldata call) external {
  > |		calldataMockTypes[call] = MockType.OutOfGas;
    |		trackCalldataMock(call);
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(599)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |	function givenMethodRunOutOfGas(bytes calldata call) external {
    |		bytes4 method = bytesToBytes4(call);
  > |		methodIdMockTypes[method] = MockType.OutOfGas;
    |		trackMethodIdMock(method);	
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(605)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		while(mockHash != MOCKS_LIST_END_HASH) {
    |			// Reset all mock maps
  > |			calldataMockTypes[nextMock] = MockType.Return;
    |			calldataExpectations[nextMock] = hex"";
    |			calldataRevertMessage[nextMock] = "";
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(629)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		while(nextAnyMock != SENTINEL_ANY_MOCKS) {
    |			bytes4 currentAnyMock = nextAnyMock;
  > |			methodIdMockTypes[currentAnyMock] = MockType.Return;
    |			methodIdExpectations[currentAnyMock] = hex"";
    |			methodIdRevertMessages[currentAnyMock] = "";
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(646)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |			nextAnyMock = methodIdMocks[currentAnyMock];
    |			// Remove from linked list
  > |			methodIdMocks[currentAnyMock] = 0x0;
    |		}
    |		// Clear list
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(651)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		}
    |		// Clear list
  > |		methodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;
    |
    |		fallbackExpectation = "";
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(654)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |
    |		fallbackExpectation = "";
  > |		fallbackMockType = MockType.Return;
    |		invocations = 0;
    |		resetCount += 1;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(657)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		fallbackExpectation = "";
    |		fallbackMockType = MockType.Return;
  > |		invocations = 0;
    |		resetCount += 1;
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(658)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		fallbackMockType = MockType.Return;
    |		invocations = 0;
  > |		resetCount += 1;
    |	}
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(659)

[31mViolation[0m for UnrestrictedWrite in contract 'MockContract':
    |		invocations += 1;
    |		methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;
  > |		calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;
    |	}
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(689)

[33mWarning[0m for UnrestrictedWrite in contract 'MockContract':
    |	function updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {
    |		require(msg.sender == address(this), "Can only be called from the contract itself");
  > |		invocations += 1;
    |		methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;
    |		calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(687)

[33mWarning[0m for UnrestrictedWrite in contract 'MockContract':
    |		require(msg.sender == address(this), "Can only be called from the contract itself");
    |		invocations += 1;
  > |		methodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;
    |		calldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;
    |	}
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(688)

[31mViolation[0m for LockedEther in contract 'TokenFRT':
    |
    |/// @title Standard token contract with overflow protection
  > |contract TokenFRT is Proxied, GnosisStandardToken {
    |    address public owner;
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1305)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1242)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1258)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1260)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(_minter != address(0), "The new minter must be a valid address");
    |
  > |        minter = _minter;
    |    }
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1338)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(msg.sender == owner, "Only the owner can update the owner");
    |        require(_owner != address(0), "The new owner must be a valid address");
  > |        owner = _owner;
    |    }
    |
  at /unique_chucks/16/0x9d536f27a9c4a36229295d5b21dad01aff47486d.sol(1346)