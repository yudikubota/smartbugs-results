Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:ERC20
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:ERC20Basic
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |      }
    |    
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(249)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |      function renounceOwnership() public onlyOwner {
    |        emit OwnershipRenounced(owner);
  > |        owner = address(0);
    |      }
    |    }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |      }
    |    
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(249)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |      function renounceOwnership() public onlyOwner {
    |        emit OwnershipRenounced(owner);
  > |        owner = address(0);
    |      }
    |    }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        function pause() onlyOwner whenNotPaused public {
    |            require(canPause == true);
  > |            paused = true;
    |            emit Pause();
    |        }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(294)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |      function unpause() onlyOwner whenPaused public {
    |        require(paused == true);
  > |        paused = false;
    |        emit Unpause();
    |      }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |         **/
    |        function notPausable() onlyOwner public{
  > |            paused = false;
    |            canPause = false;
    |            emit NotPausable();
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(311)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        function notPausable() onlyOwner public{
    |            paused = false;
  > |            canPause = false;
    |            emit NotPausable();
    |        }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(312)

[31mViolation[0m for LockedEther in contract 'PausableToken':
    |     * @dev StandardToken modified with pausable transfers.
    |     **/
  > |    contract PausableToken is StandardToken, Pausable {
    |        string public constant NAME = "KAKI TOKEN";
    |        string public constant SYMBOL = "KAKI";
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(321)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |    
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |      }
    |    
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(249)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |      function renounceOwnership() public onlyOwner {
    |        emit OwnershipRenounced(owner);
  > |        owner = address(0);
    |      }
    |    }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        function pause() onlyOwner whenNotPaused public {
    |            require(canPause == true);
  > |            paused = true;
    |            emit Pause();
    |        }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(294)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |      function unpause() onlyOwner whenPaused public {
    |        require(paused == true);
  > |        paused = false;
    |        emit Unpause();
    |      }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |         **/
    |        function notPausable() onlyOwner public{
  > |            paused = false;
    |            canPause = false;
    |            emit NotPausable();
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(311)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        function notPausable() onlyOwner public{
    |            paused = false;
  > |            canPause = false;
    |            emit NotPausable();
    |        }
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(312)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |    
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0x2b13bc5781357e12d05f3afb477bbed8a60c669d.sol(139)