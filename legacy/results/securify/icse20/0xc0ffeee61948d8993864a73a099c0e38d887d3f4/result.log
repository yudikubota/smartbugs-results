Processing contract: /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol:ERC20
Processing contract: /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol:MultiSigTokenWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'MultiSigTokenWallet':
    |            Transaction storage txx = transactions[transactionId];
    |            txx.executed = true;
  > |            if (txx.destination.call.value(txx.value)(txx.data)) {
    |                Execution(transactionId);
    |            } else {
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(333)

[31mViolation[0m for RepeatedCall in contract 'MultiSigTokenWallet':
    |            return;
    |        uint _nonce = nonce;
  > |        bool result = ERC20(_token).transferFrom(_from, this, _amount);
    |        assert(result);
    |        //ERC23 not executed _deposited tokenFallback by
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(145)

[31mViolation[0m for RepeatedCall in contract 'MultiSigTokenWallet':
    |            if (_amount > 0) {
    |                delete tokenBalances[_tokenAddr];
  > |                ERC20(_tokenAddr).transfer(_dest, _amount);
    |            }
    |        }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(376)

[31mViolation[0m for RepeatedCall in contract 'MultiSigTokenWallet':
    |        if (tokenBalances[_tokenAddr] == 0) {
    |            tokens.push(_tokenAddr);  
  > |            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);
    |        } else {
    |            tokenBalances[_tokenAddr] += _amount;
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(451)

[33mWarning[0m for RepeatedCall in contract 'MultiSigTokenWallet':
    |    {
    |        withdrawAllTokens(_dest);
  > |        _dest.transfer(this.balance);
    |    }
    |
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(352)

[31mViolation[0m for TODAmount in contract 'MultiSigTokenWallet':
    |    {
    |        withdrawAllTokens(_dest);
  > |        _dest.transfer(this.balance);
    |    }
    |
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(352)

[33mWarning[0m for TODAmount in contract 'MultiSigTokenWallet':
    |            Transaction storage txx = transactions[transactionId];
    |            txx.executed = true;
  > |            if (txx.destination.call.value(txx.value)(txx.data)) {
    |                Execution(transactionId);
    |            } else {
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(333)

[33mWarning[0m for TODReceiver in contract 'MultiSigTokenWallet':
    |            Transaction storage txx = transactions[transactionId];
    |            txx.executed = true;
  > |            if (txx.destination.call.value(txx.value)(txx.data)) {
    |                Execution(transactionId);
    |            } else {
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(333)

[33mWarning[0m for TODReceiver in contract 'MultiSigTokenWallet':
    |    {
    |        withdrawAllTokens(_dest);
  > |        _dest.transfer(this.balance);
    |    }
    |
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(352)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigTokenWallet':
    |            Transaction storage txx = transactions[transactionId];
    |            txx.executed = true;
  > |            if (txx.destination.call.value(txx.value)(txx.data)) {
    |                Execution(transactionId);
    |            } else {
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(333)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigTokenWallet':
    |    {
    |        withdrawAllTokens(_dest);
  > |        _dest.transfer(this.balance);
    |    }
    |
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(352)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |}
    |
  > |contract MultiSigTokenWallet {
    |
    |    address[] public owners;
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(14)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        for (uint i = 0; i < _owners.length; i++) {
    |            require(!isOwner[_owners[i]] && _owners[i] != 0);
  > |            isOwner[_owners[i]] = true;
    |        }
    |        owners = _owners;
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(115)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        }
    |        owners = _owners;
  > |        required = _required;
    |    }
    |
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(118)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        for (uint i = 0; i < owners.length; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |            }
    |        }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        OwnerRemoval(owner);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(251)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        OwnerRemoval(owner);
    |        OwnerAddition(newOwner);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(252)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |            uint _amount = tokenBalances[_tokenAddr];
    |            if (_amount > 0) {
  > |                delete tokenBalances[_tokenAddr];
    |                ERC20(_tokenAddr).transfer(_dest, _amount);
    |            }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |    {
    |        transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(431)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |}
    |
  > |contract MultiSigTokenWallet {
    |
    |    address[] public owners;
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(14)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        for (uint i = 0; i < _len; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(226)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        if (isConfirmed(transactionId)) {
    |            Transaction storage txx = transactions[transactionId];
  > |            txx.executed = true;
    |            if (txx.destination.call.value(txx.value)(txx.data)) {
    |                Execution(transactionId);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(332)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |            } else {
    |                ExecutionFailure(transactionId);
  > |                txx.executed = false;
    |            }
    |        }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(337)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |    {
    |        transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(431)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        Submission(transactionId);
    |    }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(437)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |pragma solidity ^0.4.15;
    |
  > |contract ERC20 {
    |    uint256 public totalSupply;
    |    function balanceOf(address who) constant returns (uint256 balance);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        validRequirement(owners.length + 1, required)
    |    {
  > |        isOwner[owner] = true;
    |        owners.push(owner);
    |        OwnerAddition(owner);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |    {
    |        isOwner[owner] = true;
  > |        owners.push(owner);
    |        OwnerAddition(owner);
    |    }
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(211)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigTokenWallet':
    |        uint _balance = tokenBalances[_tokenAddr];
    |        require(_amount <= _balance);
  > |        tokenBalances[_tokenAddr] = _balance - _amount;
    |        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);
    |        assert(result);
  at /unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol(395)