Processing contract: /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol:ERC20
Processing contract: /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol:ERC20Basic
Processing contract: /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol:HUBRISSTAKE
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol:HUBRISSTAKING
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'HUBRISSTAKE':
    |    assert(isReadyToClaim());
    |    token.transfer(owner, principle + totalReward);
  > |    isClaimed = true;
    |  }
    |
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKE':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(31)

[31mViolation[0m for LockedEther in contract 'HUBRISSTAKING':
    |}
    |
  > |contract HUBRISSTAKING is Ownable {
    |  ERC20 public token;
    |  mapping (uint => uint256) public threshold;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(79)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    uint256 result = 0;
    |    for (uint i = 0; i < stakes[_owner].length; i++) {
  > |      if (!stakes[_owner][i].isClaimed()) {
    |        result += stakes[_owner][i].principle();
    |      }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(124)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    for (uint i = 0; i < stakes[_owner].length; i++) {
    |      if (!stakes[_owner][i].isClaimed()) {
  > |        result += stakes[_owner][i].principle();
    |      }
    |    }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(125)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    uint256 result = 0;
    |    for (uint i = 0; i < stakes[_owner].length; i++) {
  > |      if (!stakes[_owner][i].isClaimed()) {
    |        result += stakes[_owner][i].accumulatedReward();
    |      }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(135)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    for (uint i = 0; i < stakes[_owner].length; i++) {
    |      if (!stakes[_owner][i].isClaimed()) {
  > |        result += stakes[_owner][i].accumulatedReward();
    |      }
    |    }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(136)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |  function isReadyToClaim(address _owner) public view returns (bool) {
    |    for (uint i = 0; i < stakes[_owner].length; i++) {
  > |      if (stakes[_owner][i].isReadyToClaim()) {
    |        return true;
    |      }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(144)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    bool isAtLeastOneClaimed = false;
    |    for (uint i = 0; i < stakes[msg.sender].length; i++) {
  > |      if (stakes[msg.sender][i].isReadyToClaim()) {
    |        stakes[msg.sender][i].claim();
    |        isAtLeastOneClaimed = true;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(154)

[31mViolation[0m for RepeatedCall in contract 'HUBRISSTAKING':
    |    for (uint i = 0; i < stakes[msg.sender].length; i++) {
    |      if (stakes[msg.sender][i].isReadyToClaim()) {
  > |        stakes[msg.sender][i].claim();
    |        isAtLeastOneClaimed = true;
    |      }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(31)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |
    |  function setThresholdAndReward(uint256 threshold_1Month, uint256 reward_1month, uint256 threshold_3Month, uint256 reward_3month, uint256 threshold_6Month, uint256 reward_6month, uint256 threshold_12Month, uint256 reward_12month) public onlyOwner {
  > |    threshold[1] = threshold_1Month;
    |    threshold[3] = threshold_3Month;
    |    threshold[6] = threshold_6Month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(98)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |  function setThresholdAndReward(uint256 threshold_1Month, uint256 reward_1month, uint256 threshold_3Month, uint256 reward_3month, uint256 threshold_6Month, uint256 reward_6month, uint256 threshold_12Month, uint256 reward_12month) public onlyOwner {
    |    threshold[1] = threshold_1Month;
  > |    threshold[3] = threshold_3Month;
    |    threshold[6] = threshold_6Month;
    |    threshold[12] = threshold_12Month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    threshold[1] = threshold_1Month;
    |    threshold[3] = threshold_3Month;
  > |    threshold[6] = threshold_6Month;
    |    threshold[12] = threshold_12Month;
    |    rewardPerTenThousand[1] = reward_1month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    threshold[3] = threshold_3Month;
    |    threshold[6] = threshold_6Month;
  > |    threshold[12] = threshold_12Month;
    |    rewardPerTenThousand[1] = reward_1month;
    |    rewardPerTenThousand[3] = reward_3month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    threshold[6] = threshold_6Month;
    |    threshold[12] = threshold_12Month;
  > |    rewardPerTenThousand[1] = reward_1month;
    |    rewardPerTenThousand[3] = reward_3month;
    |    rewardPerTenThousand[6] = reward_6month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(102)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    threshold[12] = threshold_12Month;
    |    rewardPerTenThousand[1] = reward_1month;
  > |    rewardPerTenThousand[3] = reward_3month;
    |    rewardPerTenThousand[6] = reward_6month;
    |    rewardPerTenThousand[12] = reward_12month;
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    rewardPerTenThousand[1] = reward_1month;
    |    rewardPerTenThousand[3] = reward_3month;
  > |    rewardPerTenThousand[6] = reward_6month;
    |    rewardPerTenThousand[12] = reward_12month;
    |  }
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'HUBRISSTAKING':
    |    rewardPerTenThousand[3] = reward_3month;
    |    rewardPerTenThousand[6] = reward_6month;
  > |    rewardPerTenThousand[12] = reward_12month;
    |  }
    |
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(105)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/24/0xc6fa9b2c0febcc1dee33e7050cf5a52ecc53022f.sol(31)