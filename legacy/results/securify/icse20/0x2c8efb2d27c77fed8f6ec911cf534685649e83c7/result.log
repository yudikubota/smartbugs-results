Processing contract: /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol:FactoryStorage
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FactoryStorage':
    | * @author Opyn, Aparna Krishnan and Zubin Koticha
    | */
  > |contract FactoryStorage {
    |
    |    //TODO: add more events
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(8)

[31mViolation[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |        //TODO: ensure userAddress has been added and ticker is valid.
    |        require(factoryLogicAddress == msg.sender);
  > |        positionContracts[ticker][userAddress] = newContractAddress;
    |        addUser(userAddress);
    |        //TODO: shouldn't the following event include the ticker?
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |
    |/**
  > | * @title Opyns's FactoryStorage Contract
    | * @notice Stores contract, user, exchange, and token data. Deploys FactoryLogic.
    | * @author Opyn, Aparna Krishnan and Zubin Koticha
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    | * @author Opyn, Aparna Krishnan and Zubin Koticha
    | */
  > |contract FactoryStorage {
    |
    |    //TODO: add more events
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(8)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |        if (!tickerSet[ticker]) {
    |            tickers.push(ticker);
  > |            tickerSet[ticker] = true;
    |            emit TickerAdded(ticker);
    |        }
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(142)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |    function updateTokenAddress(string memory ticker, address newAddress) public {
    |        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);
  > |        tokenAddresses[ticker] = newAddress;
    |    }
    |
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |    function updatecTokenAddress(string memory ticker, address newAddress) public {
    |        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);
  > |        ctokenAddresses[ticker] = newAddress;
    |    }
    |
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(163)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |    function updateExchangeAddress(string memory ticker, address newAddress) public {
    |        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);
  > |        exchangeAddresses[ticker] = newAddress;
    |    }
    |
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(172)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |        require(factoryLogicAddress == msg.sender|| ownerAddresses[0] == msg.sender || ownerAddresses[1] == msg.sender || ownerAddresses[2] == msg.sender);
    |        //TODO: do we want to first ensure ticker not already there?!
  > |        tokenAddresses[ticker] = tokenAddr;
    |        ctokenAddresses[ticker] = cTokenAddr;
    |        exchangeAddresses[ticker] = exchangeAddr;
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |        //TODO: do we want to first ensure ticker not already there?!
    |        tokenAddresses[ticker] = tokenAddr;
  > |        ctokenAddresses[ticker] = cTokenAddr;
    |        exchangeAddresses[ticker] = exchangeAddr;
    |        emit NewTokenAddedToPositionContract(ticker, tokenAddr, cTokenAddr, exchangeAddr);
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'FactoryStorage':
    |        tokenAddresses[ticker] = tokenAddr;
    |        ctokenAddresses[ticker] = cTokenAddr;
  > |        exchangeAddresses[ticker] = exchangeAddr;
    |        emit NewTokenAddedToPositionContract(ticker, tokenAddr, cTokenAddr, exchangeAddr);
    |    }
  at /unique_chucks/23/0x2c8efb2d27c77fed8f6ec911cf534685649e83c7.sol(188)