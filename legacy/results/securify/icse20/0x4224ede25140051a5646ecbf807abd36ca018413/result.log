Processing contract: /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol:ERC20
Processing contract: /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol:SEC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    address public owner;
    |    address public newOwner;
  > |    function changeOwner(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(10)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    address public newOwner;
    |    function changeOwner(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(11)

[31mViolation[0m for LockedEther in contract 'SEC':
    |}
    |
  > |contract SEC is Token{
    |    
    |    constructor() public{
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(74)

[31mViolation[0m for UnrestrictedWrite in contract 'SEC':
    |        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
    |        balances[msg.sender]-=_amount;
  > |        balances[_to]+=_amount;
    |        emit Transfer(msg.sender,_to,_amount);
    |        return true;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'SEC':
    |    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {
    |        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
  > |        balances[_from]-=_amount;
    |        allowed[_from][msg.sender]-=_amount;
    |        balances[_to]+=_amount;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(50)

[31mViolation[0m for UnrestrictedWrite in contract 'SEC':
    |        balances[_from]-=_amount;
    |        allowed[_from][msg.sender]-=_amount;
  > |        balances[_to]+=_amount;
    |        emit Transfer(_from, _to, _amount);
    |        return true;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'SEC':
    |    address public newOwner;
    |    function changeOwner(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'SEC':
    |    function mint(uint256 _amount) public onlyOwner returns (bool success) {
    |        require (_amount>0);
  > |        balances[owner]+=_amount;
    |        return true;
    |    }
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(69)

[31mViolation[0m for LockedEther in contract 'Token':
    |}
    |
  > |contract Token is Owned,  ERC20 {
    |    string public symbol;
    |    string public name;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(31)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
    |        balances[msg.sender]-=_amount;
  > |        balances[_to]+=_amount;
    |        emit Transfer(msg.sender,_to,_amount);
    |        return true;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {
    |        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);
  > |        balances[_from]-=_amount;
    |        allowed[_from][msg.sender]-=_amount;
    |        balances[_to]+=_amount;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(50)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        balances[_from]-=_amount;
    |        allowed[_from][msg.sender]-=_amount;
  > |        balances[_to]+=_amount;
    |        emit Transfer(_from, _to, _amount);
    |        return true;
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    address public newOwner;
    |    function changeOwner(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |    function mint(uint256 _amount) public onlyOwner returns (bool success) {
    |        require (_amount>0);
  > |        balances[owner]+=_amount;
    |        return true;
    |    }
  at /unique_contracts/0x4224ede25140051a5646ecbf807abd36ca018413.sol(69)