Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:CSCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:IERC20
Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:Ownable
Processing contract: /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'CSCToken':
    |}
    |
  > |contract CSCToken is ERC20, Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |        require(account != address(0), "ERC20: mint to the zero address");
    |
  > |        _totalSupply = _totalSupply.add(value);
    |        _balances[account] = _balances[account].add(value);
    |        emit Transfer(address(0), account, value);
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(258)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |    function addMinter(address _minter) external onlyOwner returns (bool) {
    |        require(_minter != address(0));
  > |        _minters[_minter] = true;
    |        return true;
    |    }
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(309)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |    function removeMinter(address _minter) external onlyOwner returns (bool) {
    |        require(_minter != address(0));
  > |        _minters[_minter] = false;
    |        return true;
    |    }
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(315)

[33mWarning[0m for UnrestrictedWrite in contract 'CSCToken':
    |    
    |    function finishMinting() onlyOwner canMint external returns (bool) {
  > |        mintingFinished = true;
    |        emit MintFinished();
    |        return true;
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(326)

[33mWarning[0m for TODAmount in contract 'Crowdsale':
    |        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);
    |
  > |        wallet.transfer(msg.value);
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(395)

[33mWarning[0m for TODReceiver in contract 'Crowdsale':
    |        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);
    |
  > |        wallet.transfer(msg.value);
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(395)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |
    |    function setFirstBonus(uint256 _newBonus) onlyOwner external {
  > |        firstBonus = _newBonus;
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(399)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |
    |    function setSecondBonus(uint256 _newBonus) onlyOwner external {
  > |        secondBonus = _newBonus;
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(403)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |    function changeEndTime(uint256 _newTime) onlyOwner external {
    |        require(endTime >= now);
  > |        endTime = _newTime;
    |    }
    |
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(408)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |        require(!isFinalized);
    |
  > |        endTime = now;
    |        isFinalized = true;
    |        emit Finalized();
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(415)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |
    |        endTime = now;
  > |        isFinalized = true;
    |        emit Finalized();
    |    }
  at /unique_chucks/45/0x5e36c3db072f72566eda02d7c8037924f39b1bac.sol(416)