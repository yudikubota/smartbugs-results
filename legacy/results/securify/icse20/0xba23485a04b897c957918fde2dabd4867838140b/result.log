Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:IERC20
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:MarketToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:Ownable
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:UpgradeableTarget
Processing contract: /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol:UpgradeableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'MarketToken':
    |/// as well as have a minimum balance of tokens to create new Market Contracts.
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketToken is UpgradeableToken {
    |
    |    string public constant name = "MARKET Protocol Token";
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(484)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketToken':
    |    /// @param upgradeAddress The address of the UpgradeableTarget contract.
    |    function setUpgradeableTarget(address upgradeAddress) external onlyOwner {
  > |        upgradeableTarget = upgradeAddress;
    |    }
    |
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(474)

[33mWarning[0m for UnrestrictedWrite in contract 'UpgradeableToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'UpgradeableToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'UpgradeableToken':
    |    /// @param upgradeAddress The address of the UpgradeableTarget contract.
    |    function setUpgradeableTarget(address upgradeAddress) external onlyOwner {
  > |        upgradeableTarget = upgradeAddress;
    |    }
    |
  at /unique_chucks/9/0xba23485a04b897c957918fde2dabd4867838140b.sol(474)