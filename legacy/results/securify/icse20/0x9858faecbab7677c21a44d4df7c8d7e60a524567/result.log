Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:Avatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:ControllerInterface
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:DAOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:DxLockMgnForRep
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:ExternalLocking4Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:GlobalConstraintInterface
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:IERC20
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:Locking4Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:Ownable
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(773)

[33mWarning[0m for TODReceiver in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(773)

[33mWarning[0m for UnhandledException in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(773)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(773)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(784)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(73)

[31mViolation[0m for LockedEther in contract 'DAOToken':
    | */
    |
  > |contract DAOToken is ERC20, ERC20Burnable, Ownable {
    |
    |    string public name;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(578)

[31mViolation[0m for LockedEther in contract 'DxLockMgnForRep':
    | * @title Scheme that allows to get GEN by locking MGN
    | */
  > |contract DxLockMgnForRep is ExternalLocking4Reputation {
    |    constructor() public {}
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1347)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        require(scores[_beneficiary] > 0, "score should be > 0");
    |        uint256 score = scores[_beneficiary];
  > |        scores[_beneficiary] = 0;
    |        uint256 repRelation = score.mul(reputationReward);
    |        reputation = repRelation.div(totalScore);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1128)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |
    |        //check that the reputation is sum zero
  > |        reputationRewardLeft = reputationRewardLeft.sub(reputation);
    |        require(
    |        ControllerInterface(
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1133)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |
    |        lockingId = keccak256(abi.encodePacked(address(this), lockingsCounter));
  > |        lockingsCounter = lockingsCounter.add(1);
    |
    |        Locker storage locker = lockers[_locker][lockingId];
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1187)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |
    |        Locker storage locker = lockers[_locker][lockingId];
  > |        locker.amount = _amount;
    |        // solhint-disable-next-line not-rely-on-time
    |        locker.releaseTime = now + _period;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1190)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        locker.amount = _amount;
    |        // solhint-disable-next-line not-rely-on-time
  > |        locker.releaseTime = now + _period;
    |        totalLocked = totalLocked.add(_amount);
    |        totalLockedLeft = totalLockedLeft.add(_amount);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1192)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        // solhint-disable-next-line not-rely-on-time
    |        locker.releaseTime = now + _period;
  > |        totalLocked = totalLocked.add(_amount);
    |        totalLockedLeft = totalLockedLeft.add(_amount);
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1193)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        locker.releaseTime = now + _period;
    |        totalLocked = totalLocked.add(_amount);
  > |        totalLockedLeft = totalLockedLeft.add(_amount);
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
    |        require(score > 0, "score must me > 0");
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1194)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
    |        require(score > 0, "score must me > 0");
  > |        scores[_locker] = scores[_locker].add(score);
    |        //verify that redeem will not overflow for this locker
    |        require((scores[_locker] * reputationReward)/scores[_locker] == reputationReward,
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1197)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        require((scores[_locker] * reputationReward)/scores[_locker] == reputationReward,
    |        "score is too high");
  > |        totalScore = totalScore.add(score);
    |
    |        emit Lock(_locker, lockingId, _amount, _period);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1201)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        require(_redeemEnableTime >= _lockingEndTime, "redeemEnableTime >= lockingEndTime");
    |
  > |        reputationReward = _reputationReward;
    |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1232)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |
    |        reputationReward = _reputationReward;
  > |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1233)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        reputationReward = _reputationReward;
    |        reputationRewardLeft = _reputationReward;
  > |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1234)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
  > |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1235)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
  > |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
    |        redeemEnableTime = _redeemEnableTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1236)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
  > |        lockingStartTime = _lockingStartTime;
    |        redeemEnableTime = _redeemEnableTime;
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1237)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
  > |        redeemEnableTime = _redeemEnableTime;
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1238)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |    {
    |        require(_claimingEndTime > _claimingStartTime, "_claimingEndTime should be greater than _claimingStartTime");
  > |        externalLockingContract = _externalLockingContract;
    |        getBalanceFuncSignature = _getBalanceFuncSignature;
    |        super._initialize(
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1289)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        }
    |        require(externalLockers[beneficiary] == false, "claiming twice for the same beneficiary is not allowed");
  > |        externalLockers[beneficiary] = true;
    |        (bool result, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-call-value,avoid-low-level-calls
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1316)

[31mViolation[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    | * @title Scheme that allows to get GEN by locking MGN
    | */
  > |contract DxLockMgnForRep is ExternalLocking4Reputation {
    |    constructor() public {}
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1347)

[33mWarning[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'DxLockMgnForRep':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(517)

[31mViolation[0m for LockedEther in contract 'ExternalLocking4Reputation':
    | */
    |
  > |contract ExternalLocking4Reputation is Locking4Reputation, Ownable {
    |
    |    event Register(address indexed _beneficiary);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1252)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        require(scores[_beneficiary] > 0, "score should be > 0");
    |        uint256 score = scores[_beneficiary];
  > |        scores[_beneficiary] = 0;
    |        uint256 repRelation = score.mul(reputationReward);
    |        reputation = repRelation.div(totalScore);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1128)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |
    |        //check that the reputation is sum zero
  > |        reputationRewardLeft = reputationRewardLeft.sub(reputation);
    |        require(
    |        ControllerInterface(
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1133)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |
    |        lockingId = keccak256(abi.encodePacked(address(this), lockingsCounter));
  > |        lockingsCounter = lockingsCounter.add(1);
    |
    |        Locker storage locker = lockers[_locker][lockingId];
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1187)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |
    |        Locker storage locker = lockers[_locker][lockingId];
  > |        locker.amount = _amount;
    |        // solhint-disable-next-line not-rely-on-time
    |        locker.releaseTime = now + _period;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1190)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        locker.amount = _amount;
    |        // solhint-disable-next-line not-rely-on-time
  > |        locker.releaseTime = now + _period;
    |        totalLocked = totalLocked.add(_amount);
    |        totalLockedLeft = totalLockedLeft.add(_amount);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1192)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        // solhint-disable-next-line not-rely-on-time
    |        locker.releaseTime = now + _period;
  > |        totalLocked = totalLocked.add(_amount);
    |        totalLockedLeft = totalLockedLeft.add(_amount);
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1193)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        locker.releaseTime = now + _period;
    |        totalLocked = totalLocked.add(_amount);
  > |        totalLockedLeft = totalLockedLeft.add(_amount);
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
    |        require(score > 0, "score must me > 0");
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1194)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);
    |        require(score > 0, "score must me > 0");
  > |        scores[_locker] = scores[_locker].add(score);
    |        //verify that redeem will not overflow for this locker
    |        require((scores[_locker] * reputationReward)/scores[_locker] == reputationReward,
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1197)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        require((scores[_locker] * reputationReward)/scores[_locker] == reputationReward,
    |        "score is too high");
  > |        totalScore = totalScore.add(score);
    |
    |        emit Lock(_locker, lockingId, _amount, _period);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1201)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        require(_redeemEnableTime >= _lockingEndTime, "redeemEnableTime >= lockingEndTime");
    |
  > |        reputationReward = _reputationReward;
    |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1232)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |
    |        reputationReward = _reputationReward;
  > |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1233)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        reputationReward = _reputationReward;
    |        reputationRewardLeft = _reputationReward;
  > |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1234)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        reputationRewardLeft = _reputationReward;
    |        lockingEndTime = _lockingEndTime;
  > |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1235)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        lockingEndTime = _lockingEndTime;
    |        maxLockingPeriod = _maxLockingPeriod;
  > |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
    |        redeemEnableTime = _redeemEnableTime;
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1236)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        maxLockingPeriod = _maxLockingPeriod;
    |        avatar = _avatar;
  > |        lockingStartTime = _lockingStartTime;
    |        redeemEnableTime = _redeemEnableTime;
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1237)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        avatar = _avatar;
    |        lockingStartTime = _lockingStartTime;
  > |        redeemEnableTime = _redeemEnableTime;
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1238)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    | */
    |
  > |contract ExternalLocking4Reputation is Locking4Reputation, Ownable {
    |
    |    event Register(address indexed _beneficiary);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1252)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |    {
    |        require(_claimingEndTime > _claimingStartTime, "_claimingEndTime should be greater than _claimingStartTime");
  > |        externalLockingContract = _externalLockingContract;
    |        getBalanceFuncSignature = _getBalanceFuncSignature;
    |        super._initialize(
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1289)

[31mViolation[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        }
    |        require(externalLockers[beneficiary] == false, "claiming twice for the same beneficiary is not allowed");
  > |        externalLockers[beneficiary] = true;
    |        (bool result, bytes memory returnValue) =
    |        // solhint-disable-next-line avoid-call-value,avoid-low-level-calls
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1316)

[33mWarning[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'ExternalLocking4Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'Locking4Reputation':
    |        require(scores[_beneficiary] > 0, "score should be > 0");
    |        uint256 score = scores[_beneficiary];
  > |        scores[_beneficiary] = 0;
    |        uint256 repRelation = score.mul(reputationReward);
    |        reputation = repRelation.div(totalScore);
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1128)

[31mViolation[0m for UnrestrictedWrite in contract 'Locking4Reputation':
    |
    |        //check that the reputation is sum zero
  > |        reputationRewardLeft = reputationRewardLeft.sub(reputation);
    |        require(
    |        ControllerInterface(
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(1133)

[31mViolation[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
  > |            newCheckPoint.fromBlock = uint128(block.number);
    |            newCheckPoint.value = uint128(_value);
    |        } else {
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(245)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
    |            newCheckPoint.fromBlock = uint128(block.number);
  > |            newCheckPoint.value = uint128(_value);
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  > |            oldCheckPoint.value = uint128(_value);
    |        }
    |    }
  at /unique_contracts/0x9858faecbab7677c21a44d4df7c8d7e60a524567.sol(249)