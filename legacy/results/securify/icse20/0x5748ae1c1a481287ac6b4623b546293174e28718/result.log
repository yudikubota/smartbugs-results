Processing contract: /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol:MultiSigWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'MultiSigWallet':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(248)

[33mWarning[0m for TODAmount in contract 'MultiSigWallet':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(248)

[33mWarning[0m for TODReceiver in contract 'MultiSigWallet':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(248)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigWallet':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(248)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
    |/// @author Stefan George - <stefan.george@consensys.net>
  > |contract MultiSigWallet {
    |
    |    /*
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(6)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        for (uint i=0; i<owners.length - 1; i++)
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(143)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        for (uint i=0; i<owners.length; i++)
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(163)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |                break;
    |            }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(166)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
    |        emit OwnerAddition(newOwner);
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(167)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    {
    |        transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(294)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |    }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        if (isConfirmed(transactionId)) {
    |            Transaction storage txn = transactions[transactionId];
  > |            txn.executed = true;
    |            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))
    |                emit Execution(transactionId);
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            else {
    |                emit ExecutionFailure(transactionId);
  > |                txn.executed = false;
    |            }
    |        }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(236)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |
    |
  > |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
    |/// @author Stefan George - <stefan.george@consensys.net>
    |contract MultiSigWallet {
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        validRequirement(owners.length + 1, required)
    |    {
  > |        isOwner[owner] = true;
    |        owners.push(owner);
    |        emit OwnerAddition(owner);
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    {
    |        isOwner[owner] = true;
  > |        owners.push(owner);
    |        emit OwnerAddition(owner);
    |    }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        ownerExists(owner)
    |    {
  > |        isOwner[owner] = false;
    |        for (uint i=0; i<owners.length - 1; i++)
    |            if (owners[i] == owner) {
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(140)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        validRequirement(owners.length, _required)
    |    {
  > |        required = _required;
    |        emit RequirementChange(_required);
    |    }
  at /unique_chucks/16/0x5748ae1c1a481287ac6b4623b546293174e28718.sol(179)