Processing contract: /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol:EthToErc20Swap
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol:IERC20
Processing contract: /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol:IMakerPriceFeed
[31mViolation[0m for MissingInputValidation in contract 'EthToErc20Swap':
    |    }
    |
  > |    function setOwner(address newOwner) public onlyOwner {
    |        owner = newOwner;
    |    }
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(55)

[31mViolation[0m for MissingInputValidation in contract 'EthToErc20Swap':
    |
    |    // withdraw all tokens owned by the contract to the given receiver
  > |    function withdrawErc20To(address receiver) external onlyOwner  {
    |        uint256 amount = erc20TokenContract.balanceOf(address(this));
    |        erc20TokenContract.transfer(receiver, amount);
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(65)

[31mViolation[0m for MissingInputValidation in contract 'EthToErc20Swap':
    |    }
    |
  > |    function withdrawEthTo(address payable receiver) external onlyOwner {
    |        receiver.transfer(address(this).balance);
    |    }
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(70)

[31mViolation[0m for TODAmount in contract 'EthToErc20Swap':
    |
    |    function withdrawEthTo(address payable receiver) external onlyOwner {
  > |        receiver.transfer(address(this).balance);
    |    }
    |}
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'EthToErc20Swap':
    |
    |    function setOwner(address newOwner) public onlyOwner {
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(56)

[33mWarning[0m for UnrestrictedWrite in contract 'EthToErc20Swap':
    |    function setPriceInmUSD(uint256 newPrice) public onlyOwner {
    |        require(newPrice > 0);
  > |        erc20mUSDPrice = newPrice;
    |    }
    |
  at /unique_contracts/0xcc1320a48c76385e17e4e1c759ce8ea1d11687c2.sol(61)