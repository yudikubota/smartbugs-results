Processing contract: /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol:ChimpDistribution
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol:ChimpToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol:IERC20
Processing contract: /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol:Ownable
Processing contract: /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'ChimpDistribution':
    |        if (!airdrops[_recipient[i]]) {
    |          airdrops[_recipient[i]] = true;
  > |          require(BNANA.transfer(_recipient[i], _airdropAmount[i] * decimalFactor));
    |          airdropped = airdropped.add(_airdropAmount[i] * decimalFactor);
    |        }
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(470)

[31mViolation[0m for RepeatedCall in contract 'ChimpDistribution':
    |    uint256 tokensToTransfer = newAmountClaimed.sub(allocations[_recipient].amountClaimed);
    |    allocations[_recipient].amountClaimed = newAmountClaimed;
  > |    require(BNANA.transfer(_recipient, tokensToTransfer));
    |    grandTotalClaimed = grandTotalClaimed.add(tokensToTransfer);
    |    emit LogBNANAClaimed(_recipient, allocations[_recipient].AllocationSupply, tokensToTransfer, newAmountClaimed, grandTotalClaimed);
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(497)

[33mWarning[0m for UnrestrictedWrite in contract 'ChimpDistribution':
    |    {
    |        if (!airdrops[_recipient[i]]) {
  > |          airdrops[_recipient[i]] = true;
    |          require(BNANA.transfer(_recipient[i], _airdropAmount[i] * decimalFactor));
    |          airdropped = airdropped.add(_airdropAmount[i] * decimalFactor);
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(469)

[31mViolation[0m for LockedEther in contract 'ChimpToken':
    | * @dev https://github.com/ethereum/EIPs/issues/20
    | */
  > |contract ChimpToken is IERC20 {
    |  using SafeMath for uint256;
    |
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'ChimpToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(185)

[33mWarning[0m for UnrestrictedWrite in contract 'ChimpToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'ChimpToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x07ef9e82721ac16809d24dafbe1792ce01654db4.sol(202)