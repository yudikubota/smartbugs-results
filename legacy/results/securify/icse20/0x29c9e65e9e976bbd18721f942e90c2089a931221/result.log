Processing contract: /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol:IERC20
Processing contract: /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol:IWAY
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'IWAY':
    |}
    |
  > |contract IWAY is IERC20, Owned {
    |    using SafeMath for uint256;
    |    
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |        require(to != address(this));
    |        _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |        require(value <= balanceOf(from));
    |        require(value <= allowance(from, to));
  > |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][to] = _allowed[from][to].sub(value);
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |        require(value <= allowance(from, to));
    |        _balances[from] = _balances[from].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][to] = _allowed[from][to].sub(value);
    |        emit Transfer(from, to, value);
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(168)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
  > |        _allowed[from][to] = _allowed[from][to].sub(value);
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |    // Mint
    |    function mint(address to, uint256 value) public onlyOwner {
  > |        _balances[to] = _balances[to].add(value);
    |        supply = supply.add(value);
    |        emit Transfer(address(0), to, value);
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |    function mint(address to, uint256 value) public onlyOwner {
    |        _balances[to] = _balances[to].add(value);
  > |        supply = supply.add(value);
    |        emit Transfer(address(0), to, value);
    |    }
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |    function burn(address from, uint256 value) public onlyOwner {
    |        require(_balances[from] <= value);
  > |        _balances[from] = _balances[from].sub(value);
    |        supply = supply.sub(value);
    |        emit Transfer(from, address(0), value);
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'IWAY':
    |        require(_balances[from] <= value);
    |        _balances[from] = _balances[from].sub(value);
  > |        supply = supply.sub(value);
    |        emit Transfer(from, address(0), value);
    |    }
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(190)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |        _;
    |    }
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0x29c9e65e9e976bbd18721f942e90c2089a931221.sol(104)