Processing contract: /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol:CSOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'CSOToken':
    |/******************************************/
    |
  > |contract CSOToken is owned, TokenERC20 {
    |
    |    mapping (address => bool) public frozenAccount;
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(138)

[31mViolation[0m for UnrestrictedWrite in contract 'CSOToken':
    |        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |        balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |        totalSupply -= _value;                      // Updates totalSupply
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(128)

[31mViolation[0m for UnrestrictedWrite in contract 'CSOToken':
    |        require(!frozenAccount[_to]);                       // Check if recipient is frozen
    |        balanceOf[_from] -= _value;                         // Subtract from the sender
  > |        balanceOf[_to] += _value;                           // Add the same to the recipient
    |        emit Transfer(_from, _to, _value);
    |    }
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'CSOToken':
    |    /// @param mintedAmount the amount of tokens it will receive
    |    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
  > |        balanceOf[target] += mintedAmount;
    |        totalSupply += mintedAmount;
    |        emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(168)

[33mWarning[0m for UnrestrictedWrite in contract 'CSOToken':
    |    function mintToken(address target, uint256 mintedAmount) onlyOwner public {
    |        balanceOf[target] += mintedAmount;
  > |        totalSupply += mintedAmount;
    |        emit Transfer(address(0), address(this), mintedAmount);
    |        emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'CSOToken':
    |    /// @param freeze either to freeze it or not
    |    function freezeAccount(address target, bool freeze) onlyOwner public {
  > |        frozenAccount[target] = freeze;
    |        emit FrozenFunds(target, freeze);
    |    }
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(178)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |}
    |
  > |contract TokenERC20 {
    |    // Public variables of the token
    |    string public name;
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(16)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(68)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |        balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |        totalSupply -= _value;                      // Updates totalSupply
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/36/0x92c1559f2c60e90b5ca9ac8067b64b650c2c8be6.sol(128)