Processing contract: /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol:ERC20
Processing contract: /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol:MultiSigWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol:MultiSigWalletCreator
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'MultiSigWallet':
    |        transactions[_txId].done = true;
    |        if ( transactions[_txId].tokenAddress == address(0)) {
  > |            transactions[_txId].to.transfer(transactions[_txId].amount);
    |        } else {
    |            ERC20 token = ERC20(transactions[_txId].tokenAddress);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(249)

[33mWarning[0m for TODReceiver in contract 'MultiSigWallet':
    |        transactions[_txId].done = true;
    |        if ( transactions[_txId].tokenAddress == address(0)) {
  > |            transactions[_txId].to.transfer(transactions[_txId].amount);
    |        } else {
    |            ERC20 token = ERC20(transactions[_txId].tokenAddress);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(249)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigWallet':
    |        transactions[_txId].done = true;
    |        if ( transactions[_txId].tokenAddress == address(0)) {
  > |            transactions[_txId].to.transfer(transactions[_txId].amount);
    |        } else {
    |            ERC20 token = ERC20(transactions[_txId].tokenAddress);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(249)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    public 
    |    onlySigners {
  > |        txCount++;
    |        transactions[txCount] = Transcation(
    |            _to,
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(168)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    onlySigners {
    |        txCount++;
  > |        transactions[txCount] = Transcation(
    |            _to,
    |            _tokenAddress,
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        require(!transactions[_txId].confirmed[msg.sender] && _txId <= txCount, "must be a valid unsigned tx");
    |        transactions[_txId].confirmed[msg.sender] = true;
  > |        transactions[_txId].confirmations++;
    |        emit TranscationSigned(_txId, now, msg.sender);
    |        if (transactions[_txId].confirmations >= requiredConfirmations) {
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(186)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        );
    |        transactions[_txId].confirmed[msg.sender] = false;
  > |        transactions[_txId].confirmations--;
    |        emit TranscationUnsigned(_txId, now, msg.sender);
    |    }
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    function _sendTransaction(uint _txId) private {
    |        require(!transactions[_txId].done, "transaction must not be done");
  > |        transactions[_txId].done = true;
    |        if ( transactions[_txId].tokenAddress == address(0)) {
    |            transactions[_txId].to.transfer(transactions[_txId].amount);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(247)

[31mViolation[0m for LockedEther in contract 'MultiSigWalletCreator':
    |
    |/// @title Multisignature wallet factory
  > |contract MultiSigWalletCreator is Ownable() {
    |
    |    // wallets
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(261)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
  > |// Multi-signature wallet for easily transfers of ETH and ERC20 tokens
    |// Developed by Phenom.Team <info@phenom.team>
    |pragma solidity ^0.4.24;
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(1)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |
    |/// @title Multisignature wallet factory
  > |contract MultiSigWalletCreator is Ownable() {
    |
    |    // wallets
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(261)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |    {
    |        wallet = new MultiSigWallet(_signers, _requiredConfirmations, _name);
  > |        isMultiSigWallet[wallet] = true;    
    |        for (uint i = 0; i < _signers.length; i++) {
    |            wallets[_signers[i]].push(wallet);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(284)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |        isMultiSigWallet[wallet] = true;    
    |        for (uint i = 0; i < _signers.length; i++) {
  > |            wallets[_signers[i]].push(wallet);
    |            numberOfWallets[_signers[i]]++;
    |        }
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(286)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |        for (uint i = 0; i < _signers.length; i++) {
    |            wallets[_signers[i]].push(wallet);
  > |            numberOfWallets[_signers[i]]++;
    |        }
    |        emit walletCreated(msg.sender, wallet);
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |        require(newOwner != address(0), "Owner must not be zero-address");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(49)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipRenounced(owner);
  > |        owner = address(0);
    |    }
    |}
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWalletCreator':
    |
    |/// @title Multisignature wallet factory
  > |contract MultiSigWalletCreator is Ownable() {
    |
    |    // wallets
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0), "Owner must not be zero-address");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(49)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipRenounced(owner);
  > |        owner = address(0);
    |    }
    |}
  at /unique_contracts/0xba95be962235de79436057a0987bd8dfea87cbd3.sol(57)