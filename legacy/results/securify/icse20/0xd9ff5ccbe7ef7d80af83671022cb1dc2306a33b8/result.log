Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:AddressRegistry
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:GlobalVar
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:IERC20
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:InstaBank
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:LeverageCDP
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:LoopNewCDP
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:MakerCDP
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:PriceInterface
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:Registry
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:Swap
Processing contract: /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol:WETHFace
[33mWarning[0m for TODAmount in contract 'GlobalVar':
    |    function approveERC20() public {
    |        IERC20 wethTkn = IERC20(getAddress("weth"));
  > |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(87)

[33mWarning[0m for TODAmount in contract 'GlobalVar':
    |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
  > |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(89)

[33mWarning[0m for TODAmount in contract 'GlobalVar':
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
  > |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
    |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(91)

[33mWarning[0m for TODAmount in contract 'GlobalVar':
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(93)

[33mWarning[0m for TODReceiver in contract 'GlobalVar':
    |    function approveERC20() public {
    |        IERC20 wethTkn = IERC20(getAddress("weth"));
  > |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(87)

[33mWarning[0m for TODReceiver in contract 'GlobalVar':
    |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
  > |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(89)

[33mWarning[0m for TODReceiver in contract 'GlobalVar':
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
  > |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
    |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(91)

[33mWarning[0m for TODReceiver in contract 'GlobalVar':
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(93)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GlobalVar':
    |    function approveERC20() public {
    |        IERC20 wethTkn = IERC20(getAddress("weth"));
  > |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(87)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GlobalVar':
    |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
  > |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(89)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GlobalVar':
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
  > |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
    |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(91)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GlobalVar':
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(93)

[33mWarning[0m for DAO in contract 'LeverageCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for DAOConstantGas in contract 'LeverageCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |    function getAddress(string memory name) internal view returns (address) {
    |        AddressRegistry addrReg = AddressRegistry(addressRegistry);
  > |        return addrReg.getAddr(name);
    |    }
    |}
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(66)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        PriceInterface ethRate = PriceInterface(getAddress("ethfeed"));
    |        bytes32 ethrate;
  > |        (ethrate, ) = ethRate.peek();
    |        return uint(ethrate);
    |    }
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(81)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |    function approveERC20() public {
    |        IERC20 wethTkn = IERC20(getAddress("weth"));
  > |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(87)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
  > |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(89)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
  > |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
    |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(91)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |    function pethPEReth(uint ethNum) public view returns (uint rPETH) {
    |        MakerCDP loanMaster = MakerCDP(cdpAddr);
  > |        rPETH = (ethNum.mul(10 ** 27)).div(loanMaster.per());
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(104)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
  > |        loanMaster.join(pethToLock); // WETH to PETH
    |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(119)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  > |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
    |        loanMaster.draw(cup, dai2Mint);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(120)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
  > |        loanMaster.draw(cup, dai2Mint);
    |        address dai2ethContract = getAddress("dai2eth");
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(122)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        address dai2ethContract = getAddress("dai2eth");
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.transfer(dai2ethContract, dai2Mint); // DAI >>> dai2eth
    |        Swap resolveSwap = Swap(dai2ethContract);
    |        resolveSwap.dai2eth(dai2Mint); // DAI >>> ETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(125)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        daiTkn.transfer(dai2ethContract, dai2Mint); // DAI >>> dai2eth
    |        Swap resolveSwap = Swap(dai2ethContract);
  > |        resolveSwap.dai2eth(dai2Mint); // DAI >>> ETH
    |
    |        uint nowBal = address(this).balance;
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(127)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |        if (isCDP2Sender) {
    |            // CDP >>> msg.sender
  > |            loanMaster.give(cup, msg.sender);
    |        } else {
    |            // CDP >>> InstaBank
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(137)

[31mViolation[0m for RepeatedCall in contract 'LeverageCDP':
    |            InstaBank resolveBank = InstaBank(getAddress("bankv2"));
    |            resolveBank.claimCDP(uint(cup));
  > |            resolveBank.transferCDPInternal(uint(cup), msg.sender);
    |        }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(142)

[33mWarning[0m for RepeatedCall in contract 'LeverageCDP':
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(93)

[33mWarning[0m for RepeatedCall in contract 'LeverageCDP':
    |            // CDP >>> InstaBank
    |            InstaBank resolveBank = InstaBank(getAddress("bankv2"));
  > |            resolveBank.claimCDP(uint(cup));
    |            resolveBank.transferCDPInternal(uint(cup), msg.sender);
    |        }
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(141)

[33mWarning[0m for RepeatedCall in contract 'LeverageCDP':
    |
    |    function collectETH(uint ethQty) public onlyAdmin {
  > |        msg.sender.transfer(ethQty);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(161)

[31mViolation[0m for TODAmount in contract 'LeverageCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[33mWarning[0m for TODAmount in contract 'LeverageCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for TODAmount in contract 'LeverageCDP':
    |
    |    function collectETH(uint ethQty) public onlyAdmin {
  > |        msg.sender.transfer(ethQty);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(161)

[33mWarning[0m for TODReceiver in contract 'LeverageCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'LeverageCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'LeverageCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'LeverageCDP':
    |
    |    function freeze(bool stop) public onlyAdmin {
  > |        freezed = stop;
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(165)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |    function getAddress(string memory name) internal view returns (address) {
    |        AddressRegistry addrReg = AddressRegistry(addressRegistry);
  > |        return addrReg.getAddr(name);
    |    }
    |}
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(66)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        PriceInterface ethRate = PriceInterface(getAddress("ethfeed"));
    |        bytes32 ethrate;
  > |        (ethrate, ) = ethRate.peek();
    |        return uint(ethrate);
    |    }
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(81)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |    function approveERC20() public {
    |        IERC20 wethTkn = IERC20(getAddress("weth"));
  > |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(87)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        wethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 pethTkn = IERC20(getAddress("peth"));
  > |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(89)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        pethTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 mkrTkn = IERC20(getAddress("mkr"));
  > |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
    |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(91)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |    function pethPEReth(uint ethNum) public view returns (uint rPETH) {
    |        MakerCDP loanMaster = MakerCDP(cdpAddr);
  > |        rPETH = (ethNum.mul(10 ** 27)).div(loanMaster.per());
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(104)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
  > |        loanMaster.join(pethToLock); // WETH to PETH
    |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(119)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  > |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
    |        loanMaster.draw(cup, dai2Mint);
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(120)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        loanMaster.lock(cup, pethToLock); // PETH to CDP
    |
  > |        loanMaster.draw(cup, dai2Mint);
    |        address dai2ethContract = getAddress("dai2eth");
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(122)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        address dai2ethContract = getAddress("dai2eth");
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.transfer(dai2ethContract, dai2Mint); // DAI >>> dai2eth
    |        Swap resolveSwap = Swap(dai2ethContract);
    |        resolveSwap.dai2eth(dai2Mint); // DAI >>> ETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(125)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        daiTkn.transfer(dai2ethContract, dai2Mint); // DAI >>> dai2eth
    |        Swap resolveSwap = Swap(dai2ethContract);
  > |        resolveSwap.dai2eth(dai2Mint); // DAI >>> ETH
    |
    |        uint nowBal = address(this).balance;
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(127)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |        if (isCDP2Sender) {
    |            // CDP >>> msg.sender
  > |            loanMaster.give(cup, msg.sender);
    |        } else {
    |            // CDP >>> InstaBank
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(137)

[31mViolation[0m for RepeatedCall in contract 'LoopNewCDP':
    |            InstaBank resolveBank = InstaBank(getAddress("bankv2"));
    |            resolveBank.claimCDP(uint(cup));
  > |            resolveBank.transferCDPInternal(uint(cup), msg.sender);
    |        }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(142)

[33mWarning[0m for RepeatedCall in contract 'LoopNewCDP':
    |        mkrTkn.approve(cdpAddr, 2 ** 256 - 1);
    |        IERC20 daiTkn = IERC20(getAddress("dai"));
  > |        daiTkn.approve(cdpAddr, 2 ** 256 - 1);
    |    }
    |
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(93)

[33mWarning[0m for RepeatedCall in contract 'LoopNewCDP':
    |            // CDP >>> InstaBank
    |            InstaBank resolveBank = InstaBank(getAddress("bankv2"));
  > |            resolveBank.claimCDP(uint(cup));
    |            resolveBank.transferCDPInternal(uint(cup), msg.sender);
    |        }
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(141)

[31mViolation[0m for TODAmount in contract 'LoopNewCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)

[33mWarning[0m for TODAmount in contract 'LoopNewCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for TODReceiver in contract 'LoopNewCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'LoopNewCDP':
    |
    |        WETHFace wethTkn = WETHFace(getAddress("weth"));
  > |        wethTkn.deposit.value(eth2Lock)(); // ETH to WETH
    |        uint pethToLock = pethPEReth(eth2Lock); // PETH : ETH
    |        loanMaster.join(pethToLock); // WETH to PETH
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(117)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'LoopNewCDP':
    |        uint nowBal = address(this).balance;
    |        if (nowBal > contractETHBal) {
  > |            msg.sender.transfer(nowBal - contractETHBal);
    |        }
    |        require(contractETHBal == address(this).balance, "No Refund of Contract ETH");
  at /unique_chucks/11/0xd9ff5ccbe7ef7d80af83671022cb1dc2306a33b8.sol(131)