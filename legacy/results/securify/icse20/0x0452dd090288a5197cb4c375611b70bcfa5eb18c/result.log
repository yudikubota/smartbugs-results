Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:ANASH
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:ERC20
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:ERC20Basic
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:TokenBasic
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:TokenStandard
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'ANASH':
    |            pdat_[msg.sender] = pnr_;
    |            if (div1 > 0) {
  > |                msg.sender.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(123)

[33mWarning[0m for TODAmount in contract 'ANASH':
    |            pdat_[_from] = pnr_;
    |            if (div1 > 0) {
  > |                _from.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(172)

[33mWarning[0m for TODAmount in contract 'ANASH':
    |            div1 = div1.add(msg.value);
    |            if (div1 > 0) {
  > |                msg.sender.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(228)

[33mWarning[0m for UnrestrictedWrite in contract 'ANASH':
    |    function changeOwner(address payable _owner) onlyOwner public {
    |        require(_owner != address(0));
  > |        newOwner = _owner;
    |    }
    |
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'ANASH':
    |    function confirmOwner() public {
    |        require(newOwner == msg.sender);
  > |        owner = newOwner;
    |        delete newOwner;
    |    }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'ANASH':
    |        require(newOwner == msg.sender);
    |        owner = newOwner;
  > |        delete newOwner;
    |    }
    |}
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(53)

[33mWarning[0m for TODAmount in contract 'TokenBasic':
    |            pdat_[msg.sender] = pnr_;
    |            if (div1 > 0) {
  > |                msg.sender.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(123)

[33mWarning[0m for TODAmount in contract 'TokenStandard':
    |            pdat_[msg.sender] = pnr_;
    |            if (div1 > 0) {
  > |                msg.sender.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(123)

[33mWarning[0m for TODAmount in contract 'TokenStandard':
    |            pdat_[_from] = pnr_;
    |            if (div1 > 0) {
  > |                _from.transfer(div1);
    |            }
    |        }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(172)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |    function changeOwner(address payable _owner) onlyOwner public {
    |        require(_owner != address(0));
  > |        newOwner = _owner;
    |    }
    |
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |    function confirmOwner() public {
    |        require(newOwner == msg.sender);
  > |        owner = newOwner;
    |        delete newOwner;
    |    }
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |        require(newOwner == msg.sender);
    |        owner = newOwner;
  > |        delete newOwner;
    |    }
    |}
  at /unique_chucks/17/0x0452dd090288a5197cb4c375611b70bcfa5eb18c.sol(53)