Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:ERC20
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:ERC20Basic
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:MSTToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        require(newOwner != address(0), "Owner must be different");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol(80)

[33mWarning[0m for LockedEther in contract 'MSTToken':
    | * @dev Contract to create the Kimera Token
    | **/
  > |contract MSTToken is StandardToken {
    |    string public constant name = "Mega Science Tech";
    |    string public constant symbol = "MST";
  at /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol(293)

[33mWarning[0m for TODAmount in contract 'MSTToken':
    |        require(owner.balance > amount.mul(sellPrice_), "The contract does not have enough ether to buy your tokens");
    |        transferFrom(msg.sender, owner, amount);              // makes the transfers
  > |        msg.sender.transfer(amount.mul(sellPrice_));    // sends ether to the seller. It's important to do this last to avoid recursion attacks
    |    }
    |    
  at /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0), "Owner must be different");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(newOwner != address(0), "Owner must be different");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/13/0x6eaa66453b4b8d21be737891e1056a1e801ac264.sol(80)