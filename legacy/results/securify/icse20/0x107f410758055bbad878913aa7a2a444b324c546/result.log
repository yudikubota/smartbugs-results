Processing contract: /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol:CustodianUpgradeable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol:KnowYourCustomer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol:LockRequestable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |
    |        /// @dev  The map of lock ids to pending custodian changes.
  > |        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
    |
    |        constructor(address _custodian) public LockRequestable() {
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(46)

[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |            * @param  _lockId  The identifier of a pending change request.
    |            */
  > |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
    |                custodian = getCustodianChangeReq(_lockId);
    |
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(28)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(90)

[31mViolation[0m for LockedEther in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(117)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(28)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(72)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(90)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {
    |        require(providers[_provider] == false, "provider must not exist");
  > |        providers[_provider] = true;
    |        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;
    |        emit ProviderAuthorized(_provider, name);
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |    function providerRemove(address _provider, string calldata name) external onlyCustodian {
    |        require(providers[_provider] == true, "provider must exist");
  > |        delete providers[_provider];
    |        emit ProviderRemoved(_provider, name);
    |    }
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        Status status = customers[_customer].status;
    |        require(status != Status.passed, "customer must not be approved before");
  > |        customers[_customer].status = Status.passed;
    |        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;
    |        emit CustomerApproved(_customer, msg.sender);
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        Status status = customers[_customer].status;
    |        require(status != Status.suspended, "customer must be not suspended");
  > |        customers[_customer].status = Status.suspended;
    |        emit CustomerSuspended(_customer, msg.sender);
    |    }
  at /unique_chucks/25/0x107f410758055bbad878913aa7a2a444b324c546.sol(189)