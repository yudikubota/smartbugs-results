Processing contract: /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol:BIP
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol:ERC20Standard
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BIP':
    |}
    |
  > |contract BIP is ERC20Standard {
    |	constructor() public {
    |		totalSupply = 200000000000000000000000000;
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(104)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |	    require(balances[msg.sender] >= _value && _value > 0);
    |	    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |	    balances[_recipient] = balances[_recipient].add(_value);
    |	    emit Transfer(msg.sender, _recipient, _value);
    |    }
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(68)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |	function transferFrom(address _from, address _to, uint _value) public {
    |	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
  > |            balances[_to] = balances[_to].add(_value);
    |            balances[_from] = balances[_from].sub(_value);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(74)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
    |            balances[_to] = balances[_to].add(_value);
  > |            balances[_from] = balances[_from].sub(_value);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |            emit Transfer(_from, _to, _value);
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(75)

[31mViolation[0m for LockedEther in contract 'ERC20Standard':
    |}
    |
  > |contract ERC20Standard {
    |	using SafeMath for uint256;
    |	uint public totalSupply;
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Standard':
    |	    require(balances[msg.sender] >= _value && _value > 0);
    |	    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |	    balances[_recipient] = balances[_recipient].add(_value);
    |	    emit Transfer(msg.sender, _recipient, _value);
    |    }
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(68)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Standard':
    |	function transferFrom(address _from, address _to, uint _value) public {
    |	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
  > |            balances[_to] = balances[_to].add(_value);
    |            balances[_from] = balances[_from].sub(_value);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(74)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Standard':
    |	    require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);
    |            balances[_to] = balances[_to].add(_value);
  > |            balances[_from] = balances[_from].sub(_value);
    |            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |            emit Transfer(_from, _to, _value);
  at /unique_chucks/46/0x311118596fe611e3ffe0be3b616f60e891c6877e.sol(75)