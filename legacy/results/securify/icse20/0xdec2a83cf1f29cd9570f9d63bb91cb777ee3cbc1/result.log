Processing contract: /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol:ERC223ReceivingContract
Processing contract: /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol:UmbrellaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'UmbrellaToken':
    |
    |
  > |contract UmbrellaToken is ERC20 {
    |    using SafeMath for uint;
    |    uint8 constant public decimals = 18;
  at /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'UmbrellaToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        if(codeLength>0) {
    |            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);
  at /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'UmbrellaToken':
    |
    |    function transferFrom(address from, address to, uint amount) public returns (bool success) {
  > |        balances[from] = balances[from].sub(amount);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
    |        balances[to] = balances[to].add(amount);
  at /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol(64)

[33mWarning[0m for UnrestrictedWrite in contract 'UmbrellaToken':
    |        balances[from] = balances[from].sub(amount);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
  > |        balances[to] = balances[to].add(amount);
    |        emit Transfer(from, to, amount);
    |        return true;
  at /unique_chucks/13/0xdec2a83cf1f29cd9570f9d63bb91cb777ee3cbc1.sol(66)