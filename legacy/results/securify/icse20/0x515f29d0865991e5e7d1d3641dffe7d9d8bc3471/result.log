Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:Adminstrator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:FiftyContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:OraclizeAddrResolverI
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:OraclizeI
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:solcChecker
Processing contract: /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Adminstrator':
    |  }
    |
  > |  function transferAdminstrator(address newAdmin) public onlyAdmin {
    |    admin = newAdmin; 
    |  }
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1353)

[33mWarning[0m for UnrestrictedWrite in contract 'Adminstrator':
    |
    |  function transferAdminstrator(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1354)

[33mWarning[0m for DAO in contract 'FiftyContract':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(361)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		} 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1496)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1500)

[31mViolation[0m for RepeatedCall in contract 'FiftyContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(277)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |
    |    function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource);
    |        if (price > 1 ether + tx.gasprice * 200000) {
    |            return 0; // Unexpectedly high price
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(357)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(361)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		} 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1496)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1500)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(361)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		} 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1496)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1500)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(361)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		} 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1496)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1500)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(0, _datasource, _arg);
    |    }
    |
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(361)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		} 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1496)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |		}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1500)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |        return true;
    |    } 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1434)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		currentNodes[msg.sender][msg.value] = true;
    |		nodeIDIndex[msg.sender][msg.value] += 1;
  > |		receivedAmount += msg.value;
    |		emit startTree(msg.sender, nodeIDIndex[msg.sender][msg.value] - 1, msg.value);
    |		//Now there are two remaining problems, where should the money goes and whose tree deserves this node as children
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1455)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(305)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(310)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(315)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(320)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(325)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(333)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |
    |
  > |contract FiftyContract is Adminstrator,usingOraclize {
    |	//About the membership
    |    uint public mRate = 150 finney; //membership fee
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1360)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		string memory queryStr = strConcating(website,addressToString(msg.sender));
    |		bytes32 queryId=oraclize_query("URL", queryStr);
  > |        oraclizeCallbacks[queryId] = treeNode(msg.sender,msg.value,nodeIDIndex[msg.sender][msg.value]);
    |		//https://medium.com/coinmonks/a-really-simple-smart-contract-on-how-to-insert-value-into-the-ethereum-blockchain-and-display-it-62c455610e98
    |		//https://github.com/Alonski/MultiSendEthereum/blob/master/contracts/MultiSend.sol
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1463)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		address payable treeRoot = o.ethAddress;
    |		uint treeNodeID = o.nodeID;
  > |		temporaryDirectReferral[treeRoot] = firstUpline;
    |		
    |		//Now check its parent, if its parent has a tree of this type with empty place, place it there
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1482)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.first != address(0)){
    |			rewardResult.first.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |		} 
    |		if(rewardResult.second != address(0)){
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1497)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.second != address(0)){
    |			rewardResult.second.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |		}
    |		emit assignTreeNode(treeRoot,treeNodeID,treeType);
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1501)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |				if(treeChildren[firstUpline][treeType][cNodeID][i].nodeType == 0){
    |					//firstUpline has a place for the node, so place it there
  > |					treeChildren[firstUpline][treeType][cNodeID][i]
    |						= treeNode(treeRoot,treeType,treeNodeID);
    |					//Set parent of this node to be that node
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1557)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |						= treeNode(treeRoot,treeType,treeNodeID);
    |					//Set parent of this node to be that node
  > |					treeParent[treeRoot][treeType][treeNodeID] 
    |						= treeNode(firstUpline,treeType,cNodeID);
    |					//Now we need to check if the tree is completed 
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1560)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(!_isCompleted) return;
    |		//The tree is completed, set the current node to be 0 so root can start over again
  > |		currentNodes[_root][_treeType] = false;
    |		if(_isDirectRefCount < minimumTreeNodeReferred){
    |			//The tree is completed mostly by someone not referred by root nor someone referred by someone referred by root
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1607)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			//The tree is completed mostly by someone not referred by root nor someone referred by someone referred by root
    |			//Ban this user from further starting the same type of tree
  > |			nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
    |		}
    |	}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1611)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |
    |  function transferAdminstrator(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1354)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newMrate > 0, "new rate must be positive");
    |		require(newTime > 0, "new membership time must be positive");
  > |		mRate = newMrate * 10 ** uint256(15); //The amount is in finney
    |		membershiptime = newTime * 86400; //The amount is in days
    |	}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1412)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTime > 0, "new membership time must be positive");
    |		mRate = newMrate * 10 ** uint256(15); //The amount is in finney
  > |		membershiptime = newTime * 86400; //The amount is in days
    |	}
    |	function setTreeSpec(uint newSpread, uint newLevel, uint newTreeNodeReferred) public onlyAdmin{
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1413)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newLevel > 1, "new level must be larger than 1");
    |		require(newTreeNodeReferred > 1, "new minimum tree nodes referred by root must be larger than 1");
  > |		spread = newSpread;
    |		level = newLevel;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1419)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTreeNodeReferred > 1, "new minimum tree nodes referred by root must be larger than 1");
    |		spread = newSpread;
  > |		level = newLevel;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1420)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		spread = newSpread;
    |		level = newLevel;
  > |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
    |	function setWebsite(string memory web) public onlyAdmin{
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1421)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  > |		paused = isPause;
    |		if(isPause) emit Paused(msg.sender);
    |		else emit Unpaused(msg.sender);
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1427)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	function banMember(address member) public onlyAdmin {
    |		require(member != address(0));
  > |		membership[member] = 0;
    |	}
    |	function checkMemberShip(address member) public view returns(uint) {
  at /unique_contracts/0x515f29d0865991e5e7d1d3641dffe7d9d8bc3471.sol(1517)