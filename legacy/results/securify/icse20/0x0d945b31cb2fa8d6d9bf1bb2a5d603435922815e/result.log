Processing contract: /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol:Operator
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle2492102753821085985/mustExplicit -j 1 -F /tmp/souffle-ff7db5c2-ccf0-482b-bea7-a2533f6ea612 -D /tmp/souffle-ff7db5c2-ccf0-482b-bea7-a2533f6ea612_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol:Operator
Processing contract: /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol:Querier
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Querier':
    |
    |
  > |contract Querier {
    |    Operator public operator;
    |    address public querierAdmin;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(745)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        ats = new uint256[] (length);
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.maxOutIds(i);
    |            address investor;
    |            uint256 time;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(780)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256 time;
    |            uint256 at;
  > |            (id, investor, time, at) = operator.maxOuts(id);
    |            ids[i] = id;
    |            times[i] = time;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(784)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |
    |    function getInvestmentById(bytes32 investmentId) public view returns (bytes32 id, uint256 at, uint256 amount, address investor, address nextInvestor, bool nextBranch) {
  > |        return operator.investments(investmentId);
    |    }
    |    
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(794)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    
    |    function getWithdrawalById(bytes32 withdrawalId) public view returns (bytes32 id, uint256 at, uint256 amount, address investor, address presentee, uint256 reason, uint256 times) {
  > |        return operator.withdrawals(withdrawalId);
    |    }
    |    
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(798)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        investors = new address[](baseArrayLength);
    |        for (uint256 i = 0; i < baseArrayLength; i++) {
  > |            address investorAddress = operator.investorAddresses(i + from);
    |            address[] memory oneAddresses;
    |            uint256[] memory oneNumbers;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(811)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            uint256[] memory oneNumbers;
    |            bool isDisabled;
  > |            (oneAddresses, isDisabled, oneNumbers) = operator.getInvestor(investorAddress);
    |            for (uint256 a = 0; a < oneAddresses.length; a++) {
    |                addresses[i * 5 + a] = oneAddresses[a];
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(815)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |        nextInvestors = new address[](arrayLength);
    |        for (uint256 i = 0; i < arrayLength; i++) {
  > |            bytes32 id = operator.investmentIds(i + from);
    |            uint256 at;
    |            uint256 amount;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(840)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function putWithdrawalsPart1(uint256 from, uint256 length, bytes32[] memory ids, uint256[] memory ats, uint256[] memory amounts, address[] memory investors) internal view {
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.withdrawalIds(i + from);
    |            uint256 at;
    |            uint256 amount;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(874)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function putWithdrawalsPart2(uint256 from, uint256 length, address[] memory presentees, uint256[] memory reasons, uint256[] memory times) internal view {
    |        for (uint256 i = 0; i < length; i++) {
  > |            bytes32 id = operator.withdrawalIds(i + from);
    |            uint256 reason;
    |            uint256 time;
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(888)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |            address[] memory adds = splitAddresses(addresses, index * 5, index * 5 + 4);
    |            uint256[] memory nums = splitNumbers(numbers, index * 13, index * 13 + 12);
  > |            operator.importInvestor(adds, isDisableds[index], nums);
    |        }
    |    }
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(909)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function importMoreInvestments(bytes32[] memory ids, uint256[] memory ats, uint256[] memory amounts, address[] memory investorAddresses) public mustBeAdmin {
    |        for (uint256 index = 0; index < ids.length; index++) {
  > |            operator.importInvestments(ids[index], ats[index], amounts[index], investorAddresses[index]);
    |        }
    |    }
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(915)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function importMoreWithdrawals(bytes32[] memory ids, uint256[] memory ats, uint256[] memory amounts, address[] memory investorAddresses, address[] memory presentees, uint256[] memory reasons, uint256[] memory times) public mustBeAdmin {
    |        for (uint256 index = 0; index < ids.length; index++) {
  > |            operator.importWithdrawals(ids[index], ats[index], amounts[index], investorAddresses[index], presentees[index], reasons[index], times[index]);
    |        }
    |    }
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(921)

[31mViolation[0m for RepeatedCall in contract 'Querier':
    |    function disableInvestors(address[] memory investorAddresses) public mustBeAdmin {
    |        for (uint256 i = 0; i < investorAddresses.length; i++) {
  > |            operator.disableInvestor(investorAddresses[i]);
    |        }
    |    }
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(943)

[33mWarning[0m for UnrestrictedWrite in contract 'Querier':
    |    }
    |    function setOperator(address payable operatorAddress) public mustBeAdmin {
  > |        operator = Operator(operatorAddress);
    |    }
    |    
  at /unique_contracts/0x0d945b31cb2fa8d6d9bf1bb2a5d603435922815e.sol(756)