Processing contract: /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol:ApproveAndCallFallBack
Processing contract: /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol:ERC20Interface
Processing contract: /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol:RNBW2
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    }
    |
  > |    function transferOwnership(address payable newOwner) public onlyOwner {
    |        _newOwner = newOwner;
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |
    |    function transferOwnership(address payable newOwner) public onlyOwner {
  > |        _newOwner = newOwner;
    |    }
    |
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == _newOwner);
    |        emit OwnershipTransferred(_owner, _newOwner);
  > |        _owner = _newOwner;
    |        _newOwner = address(0);
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        emit OwnershipTransferred(_owner, _newOwner);
    |        _owner = _newOwner;
  > |        _newOwner = address(0);
    |    }
    |}
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(85)

[31mViolation[0m for TODAmount in contract 'RNBW2':
    |
    |    function withdraw() public onlyOwner returns (bool success) {
  > |        _owner.transfer(address(this).balance);
    |        return true;
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(260)

[31mViolation[0m for TODReceiver in contract 'RNBW2':
    |
    |    function withdraw() public onlyOwner returns (bool success) {
  > |        _owner.transfer(address(this).balance);
    |        return true;
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(260)

[31mViolation[0m for UnrestrictedWrite in contract 'RNBW2':
    |        
    |        _balances[msg.sender] = safeSub(_balances[msg.sender], tokens);
  > |        _balances[to] = safeAdd(_balances[to], tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(170)

[31mViolation[0m for UnrestrictedWrite in contract 'RNBW2':
    |        require( _freezeState[from] == false && _freezeState[to] == false);
    |        
  > |        _balances[from] = safeSub(_balances[from], tokens);
    |        _allowed[from][msg.sender] = safeSub(_allowed[from][msg.sender], tokens);
    |        _balances[to] = safeAdd(_balances[to], tokens);
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(202)

[31mViolation[0m for UnrestrictedWrite in contract 'RNBW2':
    |        _balances[from] = safeSub(_balances[from], tokens);
    |        _allowed[from][msg.sender] = safeSub(_allowed[from][msg.sender], tokens);
  > |        _balances[to] = safeAdd(_balances[to], tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(204)

[31mViolation[0m for UnrestrictedWrite in contract 'RNBW2':
    |        _freezeState[msg.sender] = false;
    |        _balances[msg.sender] = safeAdd(_balances[msg.sender], tokens);
  > |        _totalSupply = safeAdd(_totalSupply, tokens);
    |        emit Transfer(address(0), msg.sender, tokens);
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'RNBW2':
    |
    |    function transferOwnership(address payable newOwner) public onlyOwner {
  > |        _newOwner = newOwner;
    |    }
    |
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'RNBW2':
    |        require(msg.sender == _newOwner);
    |        emit OwnershipTransferred(_owner, _newOwner);
  > |        _owner = _newOwner;
    |        _newOwner = address(0);
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'RNBW2':
    |        emit OwnershipTransferred(_owner, _newOwner);
    |        _owner = _newOwner;
  > |        _newOwner = address(0);
    |    }
    |}
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'RNBW2':
    |    function freeze(address account) public onlyOwner returns (bool success) {
    |        require(account != _owner && account != address(0));
  > |        _freezeState[account] = true;
    |        return true;
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(266)

[33mWarning[0m for UnrestrictedWrite in contract 'RNBW2':
    |    function unfreeze(address account) public onlyOwner returns (bool success) {
    |        require(account != _owner && account != address(0));
  > |        _freezeState[account] = false;
    |        return true;
    |    }
  at /unique_contracts/0x7c8b1dc41b611c533787e1d6a498ca7ac5eba6f7.sol(272)