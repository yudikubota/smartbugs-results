Processing contract: /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol:ERC20
Processing contract: /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol:Ownable
Processing contract: /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol:Pausable
Processing contract: /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol:SalePO8
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'SalePO8':
    |        uint256 balance = address(this).balance;
    |
  > |        owner.transfer(balance);
    |    }
    |    
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(256)

[31mViolation[0m for TODReceiver in contract 'SalePO8':
    |        
    |        po8Token.transferFrom(owner, msg.sender, totalTokenTransfer);
  > |        captain.transfer(msg.value*cut/1e4); // cut by captain
    |        
    |        emit PO8Bought(msg.sender, msg.value, totalTokenTransfer);
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(247)

[31mViolation[0m for TODReceiver in contract 'SalePO8':
    |        uint256 balance = address(this).balance;
    |
  > |        owner.transfer(balance);
    |    }
    |    
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(256)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SalePO8':
    |        
    |        po8Token.transferFrom(owner, msg.sender, totalTokenTransfer);
  > |        captain.transfer(msg.value*cut/1e4); // cut by captain
    |        
    |        emit PO8Bought(msg.sender, msg.value, totalTokenTransfer);
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(247)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |    
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |        require(newUpdater != address(0));
    |        emit UpdaterTransferred(updater, newUpdater);
  > |        updater = newUpdater;
    |    }
    |    
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |        require(_newCaptain != address(0));
    |
  > |        captain = _newCaptain;
    |    }
    |}
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |     */
    |    function pause() public onlyOwner whenNotPaused returns (bool) {
  > |        _paused = true;
    |        emit Pause();
    |        return true;
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(180)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |     */
    |    function unpause() public onlyOwner whenPaused returns (bool) {
  > |        _paused = false;
    |        emit Unpause();
    |        return true;
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |    function setPO8TokenContractAdress(address po8Address) external onlyOwner returns (bool) {
    |        ERC20 po8 = ERC20(po8Address);
  > |        po8Token = po8;
    |        return true;
    |    }
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(228)

[33mWarning[0m for UnrestrictedWrite in contract 'SalePO8':
    |    // @dev The Owner can set the new exchange rate between ETH and PO8 token.
    |    function setExchangeRate(uint256 _newExchangeRate) external onlyUpdater returns (uint256) {
  > |        exchangeRate = _newExchangeRate;
    |
    |        emit ExchangeRateUpdated(_newExchangeRate);
  at /unique_chucks/40/0xec785e6e80537c509e779deb23d956a5b125ae55.sol(234)