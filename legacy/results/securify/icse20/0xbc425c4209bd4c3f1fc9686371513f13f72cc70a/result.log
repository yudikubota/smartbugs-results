Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:Dividend
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:ERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:ERC20Interface
Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:ToAddress
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:URA
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle7549098717060384352/mustExplicit -j 2 -F /tmp/souffle-0b21d3b2-b6d8-49a5-a241-8ab9598ada4d -D /tmp/souffle-0b21d3b2-b6d8-49a5-a241-8ab9598ada4d_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol:URA
[33mWarning[0m for LockedEther in contract 'Dividend':
    |// Bookeeper contract that holds the amount of dividents in Ether.
    |// ----------------------------------------------------------------------------
  > |contract Dividend is ERC20 {
    |
    |    uint8 public constant dividendsCosts = 10; // Dividends 10%.
  at /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol(163)

[33mWarning[0m for TODAmount in contract 'Dividend':
    |        dividendes = dividendes.sub(_dividendesAmount);
    |
  > |        msg.sender.transfer(_dividendesAmount);
    |
    |        emit WithdrawDividendes(msg.sender, _dividendesAmount);
  at /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol(198)

[31mViolation[0m for LockedEther in contract 'ERC20':
    |// ERC20 Token, with the addition of symbol.
    |// ----------------------------------------------------------------------------
  > |contract ERC20 is ERC20Interface {
    |    using SafeMath for uint;
    |    using ToAddress for *;
  at /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol(122)

[31mViolation[0m for MissingInputValidation in contract 'ERC20':
    |    // Get the token balance for account `tokenOwner`
    |    // ------------------------------------------------------------------------
  > |    function balanceOf(address _tokenOwner) public view returns (uint256 balanceOwner) {
    |        return balances[_tokenOwner];
    |    }
  at /unique_chucks/8/0xbc425c4209bd4c3f1fc9686371513f13f72cc70a.sol(145)