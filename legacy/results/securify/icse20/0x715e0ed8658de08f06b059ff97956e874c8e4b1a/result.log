Processing contract: /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol:CoinvaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol:ERC20Interface
Processing contract: /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol:MultiOwned
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'CoinvaToken':
    |// fixed supply
    |// ----------------------------------------------------------------------------
  > |contract CoinvaToken is ERC20Interface, MultiOwned {
    |    using SafeMath for uint;
    |
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |pragma solidity ^0.5.0;
    |
  > |// ----------------------------------------------------------------------------
    |// 'FIXED' 'Example Fixed Supply Token' token contract
    |//
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |
    |    function addOwner(address _newOwner) public onlyOwners {
  > |        isOwner[_newOwner] = true;
    |        owners.push(_newOwner);
    |        emit OwnershipAdded(_newOwner);
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |    function addOwner(address _newOwner) public onlyOwners {
    |        isOwner[_newOwner] = true;
  > |        owners.push(_newOwner);
    |        emit OwnershipAdded(_newOwner);
    |    }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(91)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |        for (uint i=0; i < owners.length - 1; i++)
    |            if (owners[i] == _removedOwner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(98)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |            }
    |        owners.length -= 1;
  > |        isOwner[_removedOwner] = false;
    |        emit OwnershipRemoved(_removedOwner);
    |    }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(102)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |// fixed supply
    |// ----------------------------------------------------------------------------
  > |contract CoinvaToken is ERC20Interface, MultiOwned {
    |    using SafeMath for uint;
    |
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |            revert("already received allocation");
    |        
  > |        hasReceivedAllocation[to] = true;
    |        uint allocation = balances[address(this)].div(100); // 1%
    |        balances[address(this)] = balances[address(this)].sub(allocation);
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(172)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |        hasReceivedAllocation[to] = true;
    |        uint allocation = balances[address(this)].div(100); // 1%
  > |        balances[address(this)] = balances[address(this)].sub(allocation);
    |        balances[to] = balances[to].add(allocation);
    |        emit Transfer(address(this), to, allocation);
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(174)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |        uint allocation = balances[address(this)].div(100); // 1%
    |        balances[address(this)] = balances[address(this)].sub(allocation);
  > |        balances[to] = balances[to].add(allocation);
    |        emit Transfer(address(this), to, allocation);
    |        return true;
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(175)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'CoinvaToken':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(207)

[31mViolation[0m for LockedEther in contract 'MultiOwned':
    |// Owned contract
    |// ----------------------------------------------------------------------------
  > |contract MultiOwned {
    |    address[] public owners;
    |    mapping (address => bool) public isOwner;
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(70)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |pragma solidity ^0.5.0;
    |
  > |// ----------------------------------------------------------------------------
    |// 'FIXED' 'Example Fixed Supply Token' token contract
    |//
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |// Owned contract
    |// ----------------------------------------------------------------------------
  > |contract MultiOwned {
    |    address[] public owners;
    |    mapping (address => bool) public isOwner;
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(70)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |
    |    function addOwner(address _newOwner) public onlyOwners {
  > |        isOwner[_newOwner] = true;
    |        owners.push(_newOwner);
    |        emit OwnershipAdded(_newOwner);
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |    function addOwner(address _newOwner) public onlyOwners {
    |        isOwner[_newOwner] = true;
  > |        owners.push(_newOwner);
    |        emit OwnershipAdded(_newOwner);
    |    }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(91)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |        for (uint i=0; i < owners.length - 1; i++)
    |            if (owners[i] == _removedOwner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(98)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiOwned':
    |            }
    |        owners.length -= 1;
  > |        isOwner[_removedOwner] = false;
    |        emit OwnershipRemoved(_removedOwner);
    |    }
  at /unique_chucks/14/0x715e0ed8658de08f06b059ff97956e874c8e4b1a.sol(102)