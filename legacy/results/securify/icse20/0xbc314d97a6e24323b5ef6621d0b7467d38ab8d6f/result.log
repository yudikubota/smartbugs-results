Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol:ZBMegaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(222)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(115)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(222)

[31mViolation[0m for LockedEther in contract 'ZBMegaToken':
    | * @dev Initialize the basic information of ZBMegaToken.
    | */
  > |contract ZBMegaToken is PausableToken, BurnableToken {
    |    string public constant name = "ZB Mega"; // name of Token
    |    string public constant symbol = "ZM"; // symbol of Token
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'ZBMegaToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'ZBMegaToken':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'ZBMegaToken':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0xbc314d97a6e24323b5ef6621d0b7467d38ab8d6f.sol(115)