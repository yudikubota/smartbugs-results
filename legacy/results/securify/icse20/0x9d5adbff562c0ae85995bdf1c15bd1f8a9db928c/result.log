Processing contract: /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol:AceDice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol:CryptoTycoonsConstants
Processing contract: /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol:CryptoTycoonsVIPLib
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |    function handleVIPPaybackAndExp(CryptoTycoonsVIPLib vipLib, address payable gambler, uint amount) internal returns(uint vipPayback) {
    |        // CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  > |        vipLib.addUserExp(gambler, amount);
    |
    |        uint rate = vipLib.getVIPBounusRate(gambler);
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(278)

[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |        vipLib.addUserExp(gambler, amount);
    |
  > |        uint rate = vipLib.getVIPBounusRate(gambler);
    |
    |        if (rate <= 0)
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(280)

[31mViolation[0m for TODAmount in contract 'AceDice':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(294)

[31mViolation[0m for TODAmount in contract 'AceDice':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * INVITER_BENEFIT_PERCENT /100);
    |        }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(430)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(409)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |        
    |        if(payAmount > 0){
  > |            if (gambler.send(payAmount)) {
    |                emit Payment(gambler, payAmount, dice, betMask, amount);
    |            } else {
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(440)

[31mViolation[0m for TODReceiver in contract 'AceDice':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(294)

[31mViolation[0m for TODReceiver in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(409)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * INVITER_BENEFIT_PERCENT /100);
    |        }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(430)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |        
    |        if(payAmount > 0){
  > |            if (gambler.send(payAmount)) {
    |                emit Payment(gambler, payAmount, dice, betMask, amount);
    |            } else {
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(440)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        uint rankingFunds = uint128(amount * HOUSE_EDGE_PERCENT / 100 * RANK_FUNDS_PERCENT /100);
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(rankingFunds);
    |        vipLib.increaseRankingReward(rankingFunds);
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(294)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |                        
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(409)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        if(inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * INVITER_BENEFIT_PERCENT /100);
    |        }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(430)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        
    |        if(payAmount > 0){
  > |            if (gambler.send(payAmount)) {
    |                emit Payment(gambler, payAmount, dice, betMask, amount);
    |            } else {
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(440)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |    function withdrawFunds(address payable beneficiary, uint withdrawAmount) external onlyOwner {
    |        require (withdrawAmount <= address(this).balance, "Increase amount larger than balance.");
  > |        if (beneficiary.send(withdrawAmount)){
    |            emit WithdrawFunds(beneficiary, withdrawAmount);
    |        }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function approveNextOwner(address payable _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function acceptNextOwner() external {
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
  > |        owner = nextOwner;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    // See comment for "secretSigner" variable.
    |    function setSecretSigner(address newSecretSigner) external onlyOwner {
  > |        secretSigner = newSecretSigner;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == false) {
  > |            croupierMap[newCroupier] = true;
    |        }
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(228)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == true) {
  > |            croupierMap[newCroupier] = false;
    |        }
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |    function setVIPLibraryAddress(address payable addr) external onlyOwner{
  > |        VIPLibraryAddress = addr;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function setMaxProfit(uint _maxProfit) public onlyOwner {
    |        require (_maxProfit < MAX_AMOUNT, "maxProfit should be a sane number.");
  > |        maxProfit = _maxProfit;
    |    }
    |    
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(246)

[31mViolation[0m for DAOConstantGas in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(109)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(109)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(126)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(109)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(126)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        uint exp = userExpPool[addr];
    |        exp = exp + amount;
  > |        userExpPool[addr] = exp;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(59)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (increaseAmount <= address(this).balance, "Increase amount larger than balance.");
    |        require (jackpotSize + increaseAmount <= address(this).balance, "Not enough funds.");
  > |        jackpotSize += uint128(increaseAmount);
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(105)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payJackpotReward(address payable to) external onlyCaller{
    |        to.transfer(jackpotSize);
  > |        jackpotSize = 0;
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(110)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (amount <= address(this).balance, "Increase amount larger than balance.");
    |        require (rankingRewardSize + amount <= address(this).balance, "Not enough funds.");
  > |        rankingRewardSize += uint128(amount);
    |    }
    |
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payRankingReward(address payable to) external onlyCaller {
    |        uint128 prize = rankingRewardSize / 2;
  > |        rankingRewardSize = rankingRewardSize - prize;
    |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == false){
  > |            callerMap[caller] = true;
    |        }
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(45)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == true) {
  > |            callerMap[caller] = false;
    |        }
    |    }
  at /unique_chucks/21/0x9d5adbff562c0ae85995bdf1c15bd1f8a9db928c.sol(52)