Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:AdminUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:BaseAdminUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:BaseUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:Proxy
Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:UpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol:ZOSLibAddress
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |      // Call the implementation.
    |      // out and outsize are 0 because we don't know the size yet.
  > |      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)
    |
    |      // Copy the returned data.
  at /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol(43)

[33mWarning[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
    |    _upgradeTo(newImplementation);
  > |    (bool success,) = newImplementation.delegatecall(data);
    |    require(success);
    |  }
  at /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol(283)

[31mViolation[0m for RepeatedCall in contract 'BaseAdminUpgradeabilityProxy':
    |      // Call the implementation.
    |      // out and outsize are 0 because we don't know the size yet.
  > |      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)
    |
    |      // Copy the returned data.
  at /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol(43)

[33mWarning[0m for RepeatedCall in contract 'BaseAdminUpgradeabilityProxy':
    |  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
    |    _upgradeTo(newImplementation);
  > |    (bool success,) = newImplementation.delegatecall(data);
    |    require(success);
    |  }
  at /unique_contracts/0xcb4d78dff1c3079d5a62314e28fe2f53c0dcd0ee.sol(283)