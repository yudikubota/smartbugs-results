Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20Capped
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20Detailed
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20Extended
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:HasAdmin
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:HasMinters
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:IERC20
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:IERC20Burnable
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:IERC20Detailed
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:IERC20Receiver
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:LUNA
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |contract ERC20Burnable is ERC20, IERC20Burnable {
    |  function burn(uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
    |    emit Transfer(msg.sender, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(113)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
    |    totalSupply = totalSupply.sub(_value);
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(121)

[31mViolation[0m for LockedEther in contract 'ERC20Capped':
    |// File: contracts/token/erc20/ERC20Capped.sol
    |
  > |contract ERC20Capped is ERC20Mintable, ERC20Burnable {
    |  uint256 public cappedSupply;
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(227)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |pragma solidity ^0.5.2;
    |
  > |// File: contracts/math/SafeMath.sol
    |
    |library SafeMath {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |contract ERC20Burnable is ERC20, IERC20Burnable {
    |  function burn(uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
    |    emit Transfer(msg.sender, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(113)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
    |    totalSupply = totalSupply.sub(_value);
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(121)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |      if (!minter[_minter]) {
  > |        minters.push(_minter);
    |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |      if (!minter[_minter]) {
    |        minters.push(_minter);
  > |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |      if (minter[_minter]) {
  > |        minter[_minter] = false;
    |        emit MinterRemoved(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(193)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |      if (!minter[_minter]) {
  > |        minters[i] = minters[minters.length - 1];
    |        delete minters[minters.length - 1];
    |        minters.length--;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(204)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |      if (!minter[_minter]) {
    |        minters[i] = minters[minters.length - 1];
  > |        delete minters[minters.length - 1];
    |        minters.length--;
    |      } else {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |contract ERC20Mintable is HasMinters, ERC20 {
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
  > |    totalSupply = totalSupply.add(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(218)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
    |    totalSupply = totalSupply.add(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(219)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |// File: contracts/token/erc20/ERC20Capped.sol
    |
  > |contract ERC20Capped is ERC20Mintable, ERC20Burnable {
    |  uint256 public cappedSupply;
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(227)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |  function burn(uint256 _value) public returns (bool _success) {
  > |    cappedSupply = cappedSupply.sub(_value);
    |    return super.burn(_value);
    |  }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(240)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
  > |    cappedSupply = cappedSupply.sub(_value);
    |    return super.burnFrom(_from, _value);
    |  }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(245)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |    require(_newAdmin != address(0));
    |    emit AdminChanged(admin, _newAdmin);
  > |    admin = _newAdmin;
    |  }
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Capped':
    |  function removeAdmin() external onlyAdmin {
    |    emit AdminRemoved(admin);
  > |    admin = address(0);
    |  }
    |}
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(154)

[31mViolation[0m for LockedEther in contract 'ERC20Detailed':
    |// File: contracts/token/erc20/ERC20Detailed.sol
    |
  > |contract ERC20Detailed is ERC20, IERC20Detailed {
    |  string public name;
    |  string public symbol;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(260)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Detailed':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Detailed':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Detailed':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Extended':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Extended':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Extended':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for LockedEther in contract 'ERC20Mintable':
    |// File: contracts/token/erc20/ERC20Mintable.sol
    |
  > |contract ERC20Mintable is HasMinters, ERC20 {
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
    |    totalSupply = totalSupply.add(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(216)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |pragma solidity ^0.5.2;
    |
  > |// File: contracts/math/SafeMath.sol
    |
    |library SafeMath {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |
    |      if (!minter[_minter]) {
  > |        minters.push(_minter);
    |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |      if (!minter[_minter]) {
    |        minters.push(_minter);
  > |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |
    |      if (minter[_minter]) {
  > |        minter[_minter] = false;
    |        emit MinterRemoved(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(193)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |
    |      if (!minter[_minter]) {
  > |        minters[i] = minters[minters.length - 1];
    |        delete minters[minters.length - 1];
    |        minters.length--;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(204)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |      if (!minter[_minter]) {
    |        minters[i] = minters[minters.length - 1];
  > |        delete minters[minters.length - 1];
    |        minters.length--;
    |      } else {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |// File: contracts/token/erc20/ERC20Mintable.sol
    |
  > |contract ERC20Mintable is HasMinters, ERC20 {
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
    |    totalSupply = totalSupply.add(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(216)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |contract ERC20Mintable is HasMinters, ERC20 {
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
  > |    totalSupply = totalSupply.add(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(218)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
    |    totalSupply = totalSupply.add(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |    require(_newAdmin != address(0));
    |    emit AdminChanged(admin, _newAdmin);
  > |    admin = _newAdmin;
    |  }
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Mintable':
    |  function removeAdmin() external onlyAdmin {
    |    emit AdminRemoved(admin);
  > |    admin = address(0);
    |  }
    |}
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(154)

[31mViolation[0m for LockedEther in contract 'HasMinters':
    |// File: contracts/access/HasMinters.sol
    |
  > |contract HasMinters is HasAdmin {
    |  event MinterAdded(address indexed _minter);
    |  event MinterRemoved(address indexed _minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |pragma solidity ^0.5.2;
    |
  > |// File: contracts/math/SafeMath.sol
    |
    |library SafeMath {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |// File: contracts/access/HasMinters.sol
    |
  > |contract HasMinters is HasAdmin {
    |  event MinterAdded(address indexed _minter);
    |  event MinterRemoved(address indexed _minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |
    |      if (!minter[_minter]) {
  > |        minters.push(_minter);
    |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |      if (!minter[_minter]) {
    |        minters.push(_minter);
  > |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |
    |      if (minter[_minter]) {
  > |        minter[_minter] = false;
    |        emit MinterRemoved(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(193)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |
    |      if (!minter[_minter]) {
  > |        minters[i] = minters[minters.length - 1];
    |        delete minters[minters.length - 1];
    |        minters.length--;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(204)

[31mViolation[0m for UnrestrictedWrite in contract 'HasMinters':
    |      if (!minter[_minter]) {
    |        minters[i] = minters[minters.length - 1];
  > |        delete minters[minters.length - 1];
    |        minters.length--;
    |      } else {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(205)

[33mWarning[0m for UnrestrictedWrite in contract 'HasMinters':
    |    require(_newAdmin != address(0));
    |    emit AdminChanged(admin, _newAdmin);
  > |    admin = _newAdmin;
    |  }
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'HasMinters':
    |  function removeAdmin() external onlyAdmin {
    |    emit AdminRemoved(admin);
  > |    admin = address(0);
    |  }
    |}
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(154)

[31mViolation[0m for LockedEther in contract 'LUNA':
    |// File: contracts/token/erc20/ERC20Full.sol
    |
  > |contract LUNA is ERC20Detailed, ERC20Extended, ERC20Capped {
    |  constructor(
    |    string memory _name,
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(303)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |pragma solidity ^0.5.2;
    |
  > |// File: contracts/math/SafeMath.sol
    |
    |library SafeMath {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |    require(_to != address(0));
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |  function transferFrom(address _from, address _to, uint256 _value) public returns (bool _success) {
    |    require(_to != address(0));
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |    require(_to != address(0));
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |contract ERC20Burnable is ERC20, IERC20Burnable {
    |  function burn(uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);
    |    emit Transfer(msg.sender, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(113)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
  > |    totalSupply = totalSupply.sub(_value);
    |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
    |    totalSupply = totalSupply.sub(_value);
  > |    balanceOf[_from] = balanceOf[_from].sub(_value);
    |    allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, address(0), _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(121)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |      if (!minter[_minter]) {
  > |        minters.push(_minter);
    |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |      if (!minter[_minter]) {
    |        minters.push(_minter);
  > |        minter[_minter] = true;
    |        emit MinterAdded(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |      if (minter[_minter]) {
  > |        minter[_minter] = false;
    |        emit MinterRemoved(_minter);
    |      }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(193)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |      if (!minter[_minter]) {
  > |        minters[i] = minters[minters.length - 1];
    |        delete minters[minters.length - 1];
    |        minters.length--;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(204)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |      if (!minter[_minter]) {
    |        minters[i] = minters[minters.length - 1];
  > |        delete minters[minters.length - 1];
    |        minters.length--;
    |      } else {
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |contract ERC20Mintable is HasMinters, ERC20 {
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
  > |    totalSupply = totalSupply.add(_value);
    |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(218)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |  function mint(address _to, uint256 _value) public onlyMinter returns (bool _success) {
    |    totalSupply = totalSupply.add(_value);
  > |    balanceOf[_to] = balanceOf[_to].add(_value);
    |    emit Transfer(address(0), _to, _value);
    |    return true;
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(219)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |  function burn(uint256 _value) public returns (bool _success) {
  > |    cappedSupply = cappedSupply.sub(_value);
    |    return super.burn(_value);
    |  }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(240)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |
    |  function burnFrom(address _from, uint256 _value) public returns (bool _success) {
  > |    cappedSupply = cappedSupply.sub(_value);
    |    return super.burnFrom(_from, _value);
    |  }
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(245)

[31mViolation[0m for UnrestrictedWrite in contract 'LUNA':
    |// File: contracts/token/erc20/ERC20Full.sol
    |
  > |contract LUNA is ERC20Detailed, ERC20Extended, ERC20Capped {
    |  constructor(
    |    string memory _name,
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'LUNA':
    |    require(_newAdmin != address(0));
    |    emit AdminChanged(admin, _newAdmin);
  > |    admin = _newAdmin;
    |  }
    |
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'LUNA':
    |  function removeAdmin() external onlyAdmin {
    |    emit AdminRemoved(admin);
  > |    admin = address(0);
    |  }
    |}
  at /unique_chucks/6/0x92bf969865c80eda082fd5d8b4e28da4d58e1c3a.sol(154)