Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:AuctioneerManaged
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:BadToken
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSAuth
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSAuthEvents
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSAuthority
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSNote
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSThing
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DSValue
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DutchExchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Decompilation failed.
Error in Securify
java.lang.ArrayIndexOutOfBoundsException: -1
	at java.util.Vector.elementData(Vector.java:737)
	at java.util.Vector.get(Vector.java:753)
	at ch.securify.decompiler.InstructionFactory.createInstance(InstructionFactory.java:209)
	at ch.securify.decompiler.InstructionFactory.createAndApply(InstructionFactory.java:75)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:165)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:206)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:136)
	at ch.securify.decompiler.DecompilerFallback.decompile(DecompilerFallback.java:73)
	at ch.securify.Main.decompileContract(Main.java:310)
	at ch.securify.Main.processHexFile(Main.java:163)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DutchExchange
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DxMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:DxUpgrade
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:EthOracle
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:GnosisMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:GnosisStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:Medianizer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:PriceFeed
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:PriceOracleInterface
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:Proxied
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:Proxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:SafeTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:StandardTokenData
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:Token
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:TokenFRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:TokenOWL
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol:TokenWhitelist
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'AuctioneerManaged':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(679)

[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setOwner(address owner_) public auth {
    |        owner = owner_;
    |        emit LogSetOwner(owner);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(983)

[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setAuthority(DSAuthority authority_) public auth {
    |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(988)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(989)

[33mWarning[0m for MissingInputValidation in contract 'DSThing':
    |    }
    |
  > |    function setOwner(address owner_) public auth {
    |        owner = owner_;
    |        emit LogSetOwner(owner);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(983)

[33mWarning[0m for MissingInputValidation in contract 'DSThing':
    |    }
    |
  > |    function setAuthority(DSAuthority authority_) public auth {
    |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(988)

[33mWarning[0m for UnrestrictedWrite in contract 'DSThing':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'DSThing':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(989)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(989)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function poke(bytes32 wut) public payable note auth {
  > |        val = wut;
    |        has = true;
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1106)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |    function poke(bytes32 wut) public payable note auth {
    |        val = wut;
  > |        has = true;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1107)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |    function void() public payable note auth {
    |        // unset the value
  > |        has = false;
    |    }
    |}
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1112)

[31mViolation[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |
    |        // Update masterCopy
  > |        masterCopy = newMasterCopy;
    |        newMasterCopy = address(0);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1332)

[31mViolation[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |        // Update masterCopy
    |        masterCopy = newMasterCopy;
  > |        newMasterCopy = address(0);
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1333)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(679)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |
    |        // Update masterCopyCountdown
  > |        newMasterCopy = _masterCopy;
    |        masterCopyCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_MASTERCOPY);
    |        emit NewMasterCopyProposal(_masterCopy);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1322)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |        // Update masterCopyCountdown
    |        newMasterCopy = _masterCopy;
  > |        masterCopyCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_MASTERCOPY);
    |        emit NewMasterCopyProposal(_masterCopy);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1323)

[31mViolation[0m for UnrestrictedWrite in contract 'EthOracle':
    |            "It's not possible to update the oracle during the waiting period"
    |        );
  > |        ethUSDOracle = newProposalEthUSDOracle;
    |        newProposalEthUSDOracle = PriceOracleInterface(0);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1302)

[31mViolation[0m for UnrestrictedWrite in contract 'EthOracle':
    |        );
    |        ethUSDOracle = newProposalEthUSDOracle;
  > |        newProposalEthUSDOracle = PriceOracleInterface(0);
    |    }
    |}
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1303)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(679)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |    function initiateEthUsdOracleUpdate(PriceOracleInterface _ethUSDOracle) public onlyAuctioneer {
    |        require(address(_ethUSDOracle) != address(0), "The oracle address must be valid");
  > |        newProposalEthUSDOracle = _ethUSDOracle;
    |        oracleInterfaceCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_ORACLE);
    |        emit NewOracleProposal(_ethUSDOracle);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1291)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |        require(address(_ethUSDOracle) != address(0), "The oracle address must be valid");
    |        newProposalEthUSDOracle = _ethUSDOracle;
  > |        oracleInterfaceCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_ORACLE);
    |        emit NewOracleProposal(_ethUSDOracle);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1292)

[31mViolation[0m for LockedEther in contract 'GnosisMath':
    |/// @author Alan Lu - <alan.lu@gnosis.pm>
    |/// @author Stefan George - <stefan@gnosis.pm>
  > |library GnosisMath {
    |    /*
    |     *  Constants
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(379)

[31mViolation[0m for LockedEther in contract 'Medianizer':
    |// File: contracts/Oracle/Medianizer.sol
    |
  > |contract Medianizer is DSValue {
    |    mapping(bytes12 => address) public values;
    |    mapping(address => bytes12) public indexes;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1118)

[31mViolation[0m for RepeatedCall in contract 'Medianizer':
    |            return false;
    |        } else {
  > |            return authority.canCall(src, address(this), sig);
    |        }
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1006)

[31mViolation[0m for RepeatedCall in contract 'Medianizer':
    |        for (uint96 i = 1; i < uint96(next); i++) {
    |            if (values[bytes12(i)] != address(0)) {
  > |                (bytes32 wut, bool wuz) = DSValue(values[bytes12(i)]).peek();
    |                if (wuz) {
    |                    if (ctr == 0 || wut >= wuts[ctr - 1]) {
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1175)

[33mWarning[0m for UnrestrictedWrite in contract 'Medianizer':
    |
    |    function poke(bytes32) public payable note {
  > |        (val, has) = compute();
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1167)

[31mViolation[0m for LockedEther in contract 'PriceFeed':
    |
    |
  > |contract PriceFeed is DSThing {
    |    uint128 val;
    |    uint32 public zzz;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1064)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(989)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function post(uint128 val_, uint32 zzz_, address med_) public payable note auth {
  > |        val = val_;
    |        zzz = zzz_;
    |        (bool success, ) = med_.call(abi.encodeWithSignature("poke()"));
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1078)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |    function post(uint128 val_, uint32 zzz_, address med_) public payable note auth {
    |        val = val_;
  > |        zzz = zzz_;
    |        (bool success, ) = med_.call(abi.encodeWithSignature("poke()"));
    |        require(success, "The poke must succeed");
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1079)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function void() public payable note auth {
  > |        zzz = 0;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1085)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceOracleInterface':
    |    /// output always a price of 600 USD. This gives everyone time to set up a new pricefeed.
    |    function raiseEmergency(bool _emergencyMode) public onlyOwner {
  > |        emergencyMode = _emergencyMode;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1240)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceOracleInterface':
    |    /// @param _owner address of owner
    |    function updateCurator(address _owner) public onlyOwner {
  > |        owner = _owner;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(1246)

[31mViolation[0m for LockedEther in contract 'TokenFRT':
    |
    |/// @title Standard token contract with overflow protection
  > |contract TokenFRT is Proxied, GnosisStandardToken {
    |    address public owner;
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(419)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(379)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(_minter != address(0), "The new minter must be a valid address");
    |
  > |        minter = _minter;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(452)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(msg.sender == owner, "Only the owner can update the owner");
    |        require(_owner != address(0), "The new owner must be a valid address");
  > |        owner = _owner;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(460)

[31mViolation[0m for LockedEther in contract 'TokenOWL':
    |// File: @gnosis.pm/owl-token/contracts/TokenOWL.sol
    |
  > |contract TokenOWL is Proxied, GnosisStandardToken {
    |    using GnosisMath for *;
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(550)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(379)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    function burnOWL(address user, uint amount) public {
    |        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);
  > |        balances[user] = balances[user].sub(amount);
    |        totalTokens = totalTokens.sub(amount);
    |        emit Burnt(msg.sender, user, amount);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(629)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);
    |        balances[user] = balances[user].sub(amount);
  > |        totalTokens = totalTokens.sub(amount);
    |        emit Burnt(msg.sender, user, amount);
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        // Update masterCopyCountdown
  > |        masterCopyCountdown.masterCopy = _masterCopy;
    |        masterCopyCountdown.timeWhenAvailable = now + 30 days;
    |    }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(581)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        // Update masterCopyCountdown
    |        masterCopyCountdown.masterCopy = _masterCopy;
  > |        masterCopyCountdown.timeWhenAvailable = now + 30 days;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(582)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        // Update masterCopy
  > |        masterCopy = masterCopyCountdown.masterCopy;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(594)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    /// @param newMinter The new address authorized to mint this token
    |    function setMinter(address newMinter) public onlyCreator {
  > |        minter = newMinter;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(604)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    /// @param newOwner The new address, which should become the owner
    |    function setNewOwner(address newOwner) public onlyCreator {
  > |        creator = newOwner;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(610)

[31mViolation[0m for LockedEther in contract 'TokenWhitelist':
    |// File: contracts/base/TokenWhitelist.sol
    |
  > |contract TokenWhitelist is AuctioneerManaged {
    |    // Mapping that stores the tokens, which are approved
    |    // Only tokens approved by auctioneer generate frtToken tokens
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(694)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    // Only tokens approved by auctioneer generate frtToken tokens
    |    // addressToken => boolApproved
  > |    mapping(address => bool) public approvedTokens;
    |
    |    event Approval(address indexed token, bool approved);
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(698)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    /// @dev for quick overview of approved Tokens
    |    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved
  > |    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {
    |        uint length = addressesToCheck.length;
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(704)

[33mWarning[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    }
    |    
  > |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
    |            approvedTokens[token[i]] = approved;
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(716)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
  > |            approvedTokens[token[i]] = approved;
    |            emit Approval(token[i], approved);
    |        }
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(718)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_contracts/0x2bae491b065032a76be1db9e9ecf5738afae203e.sol(679)