Processing contract: /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol:Bussiness
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol:ERC20BasicInterface
Processing contract: /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol:IERC721
Processing contract: /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |    function removePrice(uint256 tokenId) public returns (uint256){
    |        require(erc721Address.ownerOf(tokenId) == msg.sender);
  > |        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);
    |        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);
    |        resetPrice(tokenId);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(255)

[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(341)

[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(348)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |     */
    |    function _withdraw(address payable _address, uint256 amount, uint256 _amountHB) internal {
  > |        require(_address != address(0) && amount >= 0 && address(this).balance >= amount && _amountHB >= 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);
    |        if(amount > 0) {
    |            _address.transfer(amount);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(280)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |    function cancelBussiness() public onlyCeoAddress {
    |        for (uint i = 0; i < arrayTokenIdSale.length; i++) {
  > |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0) {
    |                    uint256 eth = prices[arrayTokenIdSale[i]].fee;
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(293)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |                    uint256 hb = prices[arrayTokenIdSale[i]].hbfee;
    |                    if(prices[arrayTokenIdSale[i]].isHightlight == true) hb += hightLightFee * HBWALLETExchange / 2 / (10 ** 16);
  > |                    if(hbwalletToken.balanceOf(address(this)) >= hb) {
    |                        hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, hb);
    |                    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(304)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |                    if(prices[arrayTokenIdSale[i]].isHightlight == true) hb += hightLightFee * HBWALLETExchange / 2 / (10 ** 16);
    |                    if(hbwalletToken.balanceOf(address(this)) >= hb) {
  > |                        hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, hb);
    |                    }
    |                }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(305)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |        uint256 hbfee = 0;
    |        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {
  > |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0) {
    |                    ethfee += prices[arrayTokenIdSale[i]].fee;
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(317)

[33mWarning[0m for RepeatedCall in contract 'Bussiness':
    |            }
    |        }
  > |        _withdraw(msg.sender, address(this).balance, hbwalletToken.balanceOf(address(this)));
    |    }
    |    
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(310)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |    function removePrice(uint256 tokenId) public returns (uint256){
    |        require(erc721Address.ownerOf(tokenId) == msg.sender);
  > |        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);
    |        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);
    |        resetPrice(tokenId);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(255)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |                    if(prices[arrayTokenIdSale[i]].isHightlight == true) eth += hightLightFee;
    |                    if(address(this).balance >= eth) {
  > |                        prices[arrayTokenIdSale[i]].tokenOwner.transfer(eth);
    |                    } 
    |                }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(298)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(341)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(348)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |        require(_address != address(0) && amount >= 0 && address(this).balance >= amount && _amountHB >= 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);
    |        if(amount > 0) {
  > |            _address.transfer(amount);
    |        }
    |        if(_amountHB > 0) {
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(282)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |                    if(prices[arrayTokenIdSale[i]].isHightlight == true) eth += hightLightFee;
    |                    if(address(this).balance >= eth) {
  > |                        prices[arrayTokenIdSale[i]].tokenOwner.transfer(eth);
    |                    } 
    |                }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(298)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(341)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(348)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |                    if(prices[arrayTokenIdSale[i]].isHightlight == true) eth += hightLightFee;
    |                    if(address(this).balance >= eth) {
  > |                        prices[arrayTokenIdSale[i]].tokenOwner.transfer(eth);
    |                    } 
    |                }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(298)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(341)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(348)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |        require(_address != address(0) && amount >= 0 && address(this).balance >= amount && _amountHB >= 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);
    |        if(amount > 0) {
  > |            _address.transfer(amount);
    |        }
    |        if(_amountHB > 0) {
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |}
    |
  > |contract Bussiness is Ownable {
    |    address public ceoAddress = address(0xFce92D4163AA532AA096DE8a3C4fEf9f875Bc55F);
    |    IERC721 public erc721Address = IERC721(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(93)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |        for (uint i = index; i<arrayTokenIdSale.length-1; i++){
  > |            arrayTokenIdSale[i] = arrayTokenIdSale[i+1];
    |        }
    |        delete arrayTokenIdSale[arrayTokenIdSale.length-1];
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(130)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |            arrayTokenIdSale[i] = arrayTokenIdSale[i+1];
    |        }
  > |        delete arrayTokenIdSale[arrayTokenIdSale.length-1];
    |        arrayTokenIdSale.length--;
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |/**
  > | * Source Code first verified at https://etherscan.io on Wednesday, May 15, 2019
    | (UTC) */
    |
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(46)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {
  > |        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);
    |        arrayTokenIdSale.push(_tokenId);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {
    |        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);
  > |        arrayTokenIdSale.push(_tokenId);
    |    }
    |
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setFee(uint256 _ethFee, uint256 _HBWALLETExchange, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256){
    |        require(_ethFee >= 0 && _HBWALLETExchange >= 1 && _hightLightFee >= 0);
  > |        ETHFee = _ethFee;
    |        HBWALLETExchange = _HBWALLETExchange;
    |        hightLightFee = _hightLightFee;
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(263)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(_ethFee >= 0 && _HBWALLETExchange >= 1 && _hightLightFee >= 0);
    |        ETHFee = _ethFee;
  > |        HBWALLETExchange = _HBWALLETExchange;
    |        hightLightFee = _hightLightFee;
    |        return (ETHFee, HBWALLETExchange, hightLightFee);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        ETHFee = _ethFee;
    |        HBWALLETExchange = _HBWALLETExchange;
  > |        hightLightFee = _hightLightFee;
    |        return (ETHFee, HBWALLETExchange, hightLightFee);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(265)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setLimitFee(uint256 _ethlimitFee, uint256 _hbWalletlimitFee) public onlyOwner returns (uint256, uint256){
    |        require(_ethlimitFee >= 0 && _hbWalletlimitFee >= 0);
  > |        limitETHFee = _ethlimitFee;
    |        limitHBWALLETFee = _hbWalletlimitFee;
    |        return (limitETHFee, limitHBWALLETFee);
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(271)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(_ethlimitFee >= 0 && _hbWalletlimitFee >= 0);
    |        limitETHFee = _ethlimitFee;
  > |        limitHBWALLETFee = _hbWalletlimitFee;
    |        return (limitETHFee, limitHBWALLETFee);
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function changeCeo(address _address) public onlyCeoAddress {
    |        require(_address != address(0));
  > |        ceoAddress = _address;
    |
    |    }
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(333)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |    function resetPrice(uint256 tokenId) private {
  > |        prices[tokenId] = Price(address(0), 0, 0, 0, false);
    |        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {
    |            if (arrayTokenIdSale[i] == tokenId) {
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(353)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/23/0xf8670a791e547184ac9833799bb4de9de8670d84.sol(46)