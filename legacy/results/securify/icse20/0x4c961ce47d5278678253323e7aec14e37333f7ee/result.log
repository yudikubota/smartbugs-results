Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle1889027268874377859/mustExplicit -j 1 -F /tmp/souffle-decc0a5c-215a-4683-8eb2-0d19eb82c537 -D /tmp/souffle-decc0a5c-215a-4683-8eb2-0d19eb82c537_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:AOLibrary
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:INameAccountRecovery
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:INameFactory
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:INameTAOPosition
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:ITAOAncestry
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:ITAOFactory
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:TAOAncestry
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:TAOController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol:tokenRecipient
[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(328)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(328)

[31mViolation[0m for RepeatedCall in contract 'TAOAncestry':
    |	 */
    |	modifier senderNameNotCompromised() {
  > |		require (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |		_;
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(796)

[31mViolation[0m for RepeatedCall in contract 'TAOAncestry':
    |		// Otherwise, child TAO needs parent TAO approval
    |		address _taoAdvocate = _nameTAOPosition.getAdvocate(_taoId);
  > |		address _childAdvocate = _nameTAOPosition.getAdvocate(_childId);
    |		emit AddChild(_taoId, _taoAdvocate, _childId, _childAdvocate, _child.approved, _child.connected);
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1050)

[31mViolation[0m for RepeatedCall in contract 'TAOAncestry':
    |		require (_nonce > 0);
    |
  > |		address _taoAdvocate = _nameTAOPosition.getAdvocate(_taoId);
    |		address _childAdvocate = _nameTAOPosition.getAdvocate(_childId);
    |		emit ApproveChild(_taoId, _taoAdvocate, _childId, _childAdvocate, _nonce);
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1148)

[31mViolation[0m for RepeatedCall in contract 'TAOAncestry':
    |
    |		address _taoAdvocate = _nameTAOPosition.getAdvocate(_taoId);
  > |		address _childAdvocate = _nameTAOPosition.getAdvocate(_childId);
    |		emit ApproveChild(_taoId, _taoAdvocate, _childId, _childAdvocate, _nonce);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1149)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(807)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(817)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(826)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(827)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(836)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(837)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(846)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(847)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |	function setTAOFactoryAddress(address _taoFactoryAddress) public onlyTheAO {
    |		require (_taoFactoryAddress != address(0));
  > |		taoFactoryAddress = _taoFactoryAddress;
    |		_taoFactory = ITAOFactory(_taoFactoryAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(918)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |		require (_taoFactoryAddress != address(0));
    |		taoFactoryAddress = _taoFactoryAddress;
  > |		_taoFactory = ITAOFactory(_taoFactoryAddress);
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(919)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |
    |		Ancestry storage _ancestry = ancestries[_taoId];
  > |		_ancestry.totalChildren--;
    |
    |		Child storage _child = _ancestry.children[_ancestry.childInternalIdLookup[_childId]];
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1091)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |
    |		Child storage _child = _ancestry.children[_ancestry.childInternalIdLookup[_childId]];
  > |		_child.connected = false;
    |		_ancestry.childInternalIdLookup[_childId] = 0;
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1094)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |		Child storage _child = _ancestry.children[_ancestry.childInternalIdLookup[_childId]];
    |		_child.connected = false;
  > |		_ancestry.childInternalIdLookup[_childId] = 0;
    |
    |		Ancestry storage _childAncestry = ancestries[_childId];
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1095)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOAncestry':
    |
    |		Ancestry storage _childAncestry = ancestries[_childId];
  > |		_childAncestry.parentId = address(0);
    |
    |		uint256 _nonce = _taoFactory.incrementNonce(_taoId);
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(1098)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(807)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(817)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(826)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(827)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(836)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(837)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(846)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(847)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(683)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(712)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(704)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(715)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(236)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(252)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_contracts/0x4c961ce47d5278678253323e7aec14e37333f7ee.sol(254)