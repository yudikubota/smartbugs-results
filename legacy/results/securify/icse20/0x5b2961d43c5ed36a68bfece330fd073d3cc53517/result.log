Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Authorizable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Bank
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle2411759321113622411/mustExplicit -j 2 -F /tmp/souffle-c32d5c0b-94e5-4ddc-81ac-23b3d8d75723 -D /tmp/souffle-c32d5c0b-94e5-4ddc-81ac-23b3d8d75723_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Bank
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Bears
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Bulls
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:CBCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:CryptoTeam
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:ERC20
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:ERC20Basic
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:ExchangeRate
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:MainSale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'Authorizable':
    | * [{"constant":true,"inputs":[{"name":"authorizerIndex","type":"uint256"}],"name":"getAuthorizer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"addAuthorized","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"inputs":[],"payable":false,"type":"constructor"}]
    | */
  > |contract Authorizable {
    |
    |    address[] authorizers;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(396)

[31mViolation[0m for UnrestrictedWrite in contract 'Authorizable':
    |     */
    |    function addAuthorized(address _addr) external onlyAuthorized {
  > |        authorizerIndex[_addr] = authorizers.length;
    |        authorizers.length++;
    |        authorizers[authorizers.length - 1] = _addr;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(441)

[31mViolation[0m for UnrestrictedWrite in contract 'Authorizable':
    |        authorizerIndex[_addr] = authorizers.length;
    |        authorizers.length++;
  > |        authorizers[authorizers.length - 1] = _addr;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(443)

[31mViolation[0m for UnrestrictedWrite in contract 'BasicToken':
    |    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(615)

[31mViolation[0m for RepeatedCall in contract 'Bears':
    |        require(BankContract.getState() && msg.value >= 0.05 ether);
    |
  > |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(25)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bears':
    |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
  > |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(27)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bears':
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  > |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(28)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bears':
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
  > |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(29)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bears':
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  > |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(30)

[31mViolation[0m for RepeatedCall in contract 'Bulls':
    |        require(BankContract.getState() && msg.value >= 0.05 ether);
    |
  > |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(25)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bulls':
    |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
  > |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(27)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bulls':
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  > |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(28)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bulls':
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
  > |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(29)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bulls':
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  > |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(30)

[31mViolation[0m for LockedEther in contract 'CBCToken':
    | * [{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"startTrading","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"tradingStarted","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]
    | */
  > |contract CBCToken is MintableToken {
    |
    |    string public name = "Crypto Boss Coin";
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(766)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(615)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |        // if (_value > _allowance) throw;
    |
  > |        balances[_to] = balances[_to].add(_value);
    |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(657)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |
    |        balances[_to] = balances[_to].add(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(658)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |     */
    |    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {
  > |        totalSupply = totalSupply.add(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(721)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {
    |        totalSupply = totalSupply.add(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
    |        return true;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(722)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |     */
    |    function finishMinting() onlyOwner public returns (bool) {
  > |        mintingFinished = true;
    |        emit MintFinished();
    |        return true;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(732)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |        // sender's balance is greater than the totalSupply, which *should* be an assertion failure
    |
  > |        balances[_who] = balances[_who].sub(_value);
    |        totalSupply = totalSupply.sub(_value);
    |        emit Burn(_who, _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(751)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |
    |        balances[_who] = balances[_who].sub(_value);
  > |        totalSupply = totalSupply.sub(_value);
    |        emit Burn(_who, _value);
    |        emit Transfer(_who, address(0), _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(752)

[33mWarning[0m for UnrestrictedWrite in contract 'CBCToken':
    |     */
    |    function startTrading() onlyOwner public {
  > |        tradingStarted = true;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(786)

[31mViolation[0m for RepeatedCall in contract 'CryptoTeam':
    |        require(BankContract.getState() && msg.value >= 0.05 ether);
    |
  > |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(25)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTeam':
    |        BankContract.setInfo(msg.sender, msg.value.mul(90).div(100));
    |
  > |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(27)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTeam':
    |
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
  > |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(28)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTeam':
    |        teamAddressOne.transfer(msg.value.mul(4).div(100));
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
  > |        teamAddressThree.transfer(msg.value.mul(2).div(100));
    |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(29)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTeam':
    |        teamAddressTwo.transfer(msg.value.mul(4).div(100));
    |        teamAddressThree.transfer(msg.value.mul(2).div(100));
  > |        address(BankContract).transfer(msg.value.mul(90).div(100));
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(30)

[31mViolation[0m for MissingInputValidation in contract 'ExchangeRate':
    |    event RateUpdated(uint timestamp, bytes32 symbol, uint rate);
    |
  > |    mapping(bytes32 => uint) public rates;
    |
    |    /**
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(459)

[33mWarning[0m for MissingInputValidation in contract 'ExchangeRate':
    |     * @param _rate the rate for the symbol.
    |     */
  > |    function updateRate(string memory _symbol, uint _rate) public onlyOwner {
    |        rates[keccak256(abi.encodePacked(_symbol))] = _rate;
    |        emit RateUpdated(now, keccak256(bytes(_symbol)), _rate);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(466)

[31mViolation[0m for UnrestrictedWrite in contract 'ExchangeRate':
    |     */
    |    function updateRate(string memory _symbol, uint _rate) public onlyOwner {
  > |        rates[keccak256(abi.encodePacked(_symbol))] = _rate;
    |        emit RateUpdated(now, keccak256(bytes(_symbol)), _rate);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(467)

[31mViolation[0m for UnrestrictedWrite in contract 'ExchangeRate':
    |            bytes32 symbol = bytes32(data[i * 2]);
    |            uint rate = data[i * 2 + 1];
  > |            rates[symbol] = rate;
    |            emit RateUpdated(now, symbol, rate);
    |            i++;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(481)

[33mWarning[0m for UnrestrictedWrite in contract 'ExchangeRate':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(383)

[33mWarning[0m for TODAmount in contract 'MainSale':
    |        uint tokens = rate.mul(msg.value).div(1 ether);
    |        token.mint(recipient, tokens);
  > |        require(multisigVault.send(msg.value));
    |        emit TokenSold(recipient, msg.value, tokens, rate);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(858)

[31mViolation[0m for TODReceiver in contract 'MainSale':
    |        uint tokens = rate.mul(msg.value).div(1 ether);
    |        token.mint(recipient, tokens);
  > |        require(multisigVault.send(msg.value));
    |        emit TokenSold(recipient, msg.value, tokens, rate);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(858)

[31mViolation[0m for UnrestrictedWrite in contract 'MainSale':
    |     */
    |    function addAuthorized(address _addr) external onlyAuthorized {
  > |        authorizerIndex[_addr] = authorizers.length;
    |        authorizers.length++;
    |        authorizers[authorizers.length - 1] = _addr;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(441)

[31mViolation[0m for UnrestrictedWrite in contract 'MainSale':
    |        authorizerIndex[_addr] = authorizers.length;
    |        authorizers.length++;
  > |        authorizers[authorizers.length - 1] = _addr;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(443)

[31mViolation[0m for UnrestrictedWrite in contract 'MainSale':
    | * [{"constant":false,"inputs":[{"name":"_multisigVault","type":"address"}],"name":"setMultisigVault","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"authorizerIndex","type":"uint256"}],"name":"getAuthorizer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"exchangeRate","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"altDeposits","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"tokens","type":"uint256"}],"name":"authorizedCreateTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_exchangeRate","type":"address"}],"name":"setExchangeRate","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"retrieveTokens","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"totalAltDeposits","type":"uint256"}],"name":"setAltDeposit","outputs":[],"payable":false,"type":"function"},{"constant":!1,"inputs":[{"name":"victim","type":"address"},{"name":"amount","type":"uint256"}],"name":"burnTokens","outputs":[],"payable":!1,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"start","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"}],"name":"createTokens","outputs":[],"payable":true,"type":"function"},{"constant":false,"inputs":[{"name":"_addr","type":"address"}],"name":"addAuthorized","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"multisigVault","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_hardcap","type":"uint256"}],"name":"setHardCap","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_start","type":"uint256"}],"name":"setStart","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_addr","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"ether_amount","type":"uint256"},{"indexed":false,"name":"pay_amount","type":"uint256"},{"indexed":false,"name":"exchangerate","type":"uint256"}],"name":"TokenSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"pay_amount","type":"uint256"}],"name":"AuthorizedCreate","type":"event"},{"anonymous":false,"inputs":[],"name":"MainSaleClosed","type":"event"}]
    | */
  > |contract MainSale is Ownable, Authorizable {
    |    using SafeMath for uint;
    |    event TokenSold(address recipient, uint ether_amount, uint pay_amount, uint exchangerate);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(817)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |     */
    |    function setAltDeposit(uint totalAltDeposits) public onlyOwner {
  > |        altDeposits = totalAltDeposits;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(867)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |     */
    |    function setHardCap(uint _hardcap) public onlyOwner {
  > |        hardcap = _hardcap;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(900)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |     */
    |    function setStart(uint _start) public onlyOwner {
  > |        start = _start;
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(908)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |    function setMultisigVault(address payable _multisigVault) public onlyOwner {
    |        if (_multisigVault != address(0)) {
  > |            multisigVault = _multisigVault;
    |        }
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(917)

[33mWarning[0m for UnrestrictedWrite in contract 'MainSale':
    |     */
    |    function setExchangeRate(address _exchangeRate) public onlyOwner {
  > |        exchangeRate = ExchangeRate(_exchangeRate);
    |    }
    |
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(926)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(383)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(615)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |        // if (_value > _allowance) throw;
    |
  > |        balances[_to] = balances[_to].add(_value);
    |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(657)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |
    |        balances[_to] = balances[_to].add(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(658)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |     */
    |    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {
  > |        totalSupply = totalSupply.add(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(721)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {
    |        totalSupply = totalSupply.add(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
    |        return true;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(722)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |     */
    |    function finishMinting() onlyOwner public returns (bool) {
  > |        mintingFinished = true;
    |        emit MintFinished();
    |        return true;
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(732)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |        // sender's balance is greater than the totalSupply, which *should* be an assertion failure
    |
  > |        balances[_who] = balances[_who].sub(_value);
    |        totalSupply = totalSupply.sub(_value);
    |        emit Burn(_who, _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(751)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |
    |        balances[_who] = balances[_who].sub(_value);
  > |        totalSupply = totalSupply.sub(_value);
    |        emit Burn(_who, _value);
    |        emit Transfer(_who, address(0), _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(752)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(383)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |    }
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(615)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // if (_value > _allowance) throw;
    |
  > |        balances[_to] = balances[_to].add(_value);
    |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(657)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_to] = balances[_to].add(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/28/0x5b2961d43c5ed36a68bfece330fd073d3cc53517.sol(658)