Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:MinterWithCivic
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:OraclizeI
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:PAXTRInterface
Processing contract: /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'MinterWithCivic':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(382)

[31mViolation[0m for RepeatedCall in contract 'MinterWithCivic':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(273)

[31mViolation[0m for RepeatedCall in contract 'MinterWithCivic':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(274)

[31mViolation[0m for RepeatedCall in contract 'MinterWithCivic':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
  > |        return oraclize.cbAddress();
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(815)

[31mViolation[0m for RepeatedCall in contract 'MinterWithCivic':
    |        }
    |        
  > |        PAXTRInterface(PAXTRContract).mint(accountCheck[myid].wallet, _reff);
    |        owner.transfer(address(this).balance);
    |        
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1394)

[31mViolation[0m for RepeatedCall in contract 'MinterWithCivic':
    |        
    |        PAXTRInterface(PAXTRContract).mint(accountCheck[myid].wallet, _reff);
  > |        owner.transfer(address(this).balance);
    |        
    |        emit Return(myid, result);
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1395)

[33mWarning[0m for RepeatedCall in contract 'MinterWithCivic':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(273)

[33mWarning[0m for RepeatedCall in contract 'MinterWithCivic':
    |
    |    function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource, _gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |           return 0; // Unexpectedly high price
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(378)

[33mWarning[0m for RepeatedCall in contract 'MinterWithCivic':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(382)

[31mViolation[0m for TODAmount in contract 'MinterWithCivic':
    |        
    |        PAXTRInterface(PAXTRContract).mint(accountCheck[myid].wallet, _reff);
  > |        owner.transfer(address(this).balance);
    |        
    |        emit Return(myid, result);
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1395)

[31mViolation[0m for TODAmount in contract 'MinterWithCivic':
    |    
    |    function withdrawEth() public onlyOwner {
  > |        owner.transfer(address(this).balance);
    |    }
    |        
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1412)

[33mWarning[0m for TODAmount in contract 'MinterWithCivic':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(382)

[31mViolation[0m for TODReceiver in contract 'MinterWithCivic':
    |        
    |        PAXTRInterface(PAXTRContract).mint(accountCheck[myid].wallet, _reff);
  > |        owner.transfer(address(this).balance);
    |        
    |        emit Return(myid, result);
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1395)

[31mViolation[0m for TODReceiver in contract 'MinterWithCivic':
    |    
    |    function withdrawEth() public onlyOwner {
  > |        owner.transfer(address(this).balance);
    |    }
    |        
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1412)

[33mWarning[0m for TODReceiver in contract 'MinterWithCivic':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(382)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MinterWithCivic':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(382)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(274)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(302)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(307)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(312)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(317)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(322)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(326)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(330)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |}
    |
  > |contract MinterWithCivic is Owned, usingOraclize {
    |    constructor() public {
    |        owner = 0x7645Ad8D4a2cD5b07D8Bc4ea1690d5c1F765aabC;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1333)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        string memory _url = strConcat("https://paxco.in:10101/verify?wallet=", addressString);
    |        bytes32 queryId = oraclize_query("URL", _url, 1000000);
  > |        accountCheck[queryId].wallet = account;
    |        accountCheck[queryId].uniqueId = id;
    |        accountCheck[queryId].reff = refferer;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1367)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        bytes32 queryId = oraclize_query("URL", _url, 1000000);
    |        accountCheck[queryId].wallet = account;
  > |        accountCheck[queryId].uniqueId = id;
    |        accountCheck[queryId].reff = refferer;
    |        emit Return(queryId, addressString);
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1368)

[31mViolation[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        accountCheck[queryId].wallet = account;
    |        accountCheck[queryId].uniqueId = id;
  > |        accountCheck[queryId].reff = refferer;
    |        emit Return(queryId, addressString);
    |    }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1369)

[33mWarning[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |    }
    |    function transferContractOwnership(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptContractOwnership() public returns(bool successful) {
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1317)

[33mWarning[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |    
    |    function setClaimPrice(uint256 priceInWei) public onlyOwner {
  > |        claimPriceInWei = priceInWei;
    |    }
    |    
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1353)

[33mWarning[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |    
    |    function setContractActiveState(bool state) public onlyOwner {
  > |        contractPaused = state;
    |    }
    |    
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1357)

[33mWarning[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |        require(accountCheck[myid].uniqueId == __id);
    |       
  > |        accountId[accountCheck[myid].uniqueId] = true;
    |        accountWallet[accountCheck[myid].wallet] = true;
    |        
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1384)

[33mWarning[0m for UnrestrictedWrite in contract 'MinterWithCivic':
    |       
    |        accountId[accountCheck[myid].uniqueId] = true;
  > |        accountWallet[accountCheck[myid].wallet] = true;
    |        
    |        address _reff;
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1385)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |        _;
    |    }
  > |    function transferContractOwnership(address payable _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1316)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    }
    |    function transferContractOwnership(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptContractOwnership() public returns(bool successful) {
  at /unique_chucks/14/0x1f54e79798400ff0b467ff81f78b9a51ceca2ab5.sol(1317)