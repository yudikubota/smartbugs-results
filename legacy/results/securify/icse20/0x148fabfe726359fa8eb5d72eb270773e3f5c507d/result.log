Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:AbcInterface
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:BDR
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BDR':
    |}
    |
  > |contract BDR is Token {
    |    struct Trx {
    |        bool executed;
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |
    |
  > |library SafeMath {
    |
    |    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |}
    |
  > |contract BDR is Token {
    |    struct Trx {
    |        bool executed;
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |        for(uint256 i = 0;i< _signers.length;i++){
    |            require(_signers[i] != address(0));
  > |            isSigner[_signers[i]] = _addSigner;
    |            emit SetSigner(_signers[i],_addSigner);
    |        }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(402)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |        require(exchangeTrx[trxSeq].from == address(0),"trxSeq already exist");
    |        require(balances[msg.sender] >= _value);
  > |        exchangeTrx[trxSeq].executed = false;
    |        exchangeTrx[trxSeq].from = msg.sender;
    |        exchangeTrx[trxSeq].value = _value;
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(455)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |        require(balances[msg.sender] >= _value);
    |        exchangeTrx[trxSeq].executed = false;
  > |        exchangeTrx[trxSeq].from = msg.sender;
    |        exchangeTrx[trxSeq].value = _value;
    |        applyCounts = applyCounts.add(1);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(456)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |        exchangeTrx[trxSeq].executed = false;
    |        exchangeTrx[trxSeq].from = msg.sender;
  > |        exchangeTrx[trxSeq].value = _value;
    |        applyCounts = applyCounts.add(1);
    |        balances[address(this)] = balances[address(this)].add(_value);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(457)

[33mWarning[0m for UnrestrictedWrite in contract 'BDR':
    |        require(exchangeTrx[_trxSeq].executed == false,"trx already executed");
    |        require(isConfirmer(_trxSeq, msg.sender) == false,"signer already confirmed");
  > |        exchangeTrx[_trxSeq].signers.push(msg.sender);
    |        emit ConfirmTrx(msg.sender, _trxSeq);
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(476)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[31mViolation[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(178)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(178)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(210)

[31mViolation[0m for LockedEther in contract 'Token':
    |}
    |
  > |contract Token is PausableToken, BurnableToken {
    |    string public name; // name of Token
    |    string public symbol; // symbol of Token
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_contracts/0x148fabfe726359fa8eb5d72eb270773e3f5c507d.sol(130)