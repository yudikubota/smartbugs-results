Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:ERC20
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:ERC20Basic
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:SunRich
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:SunRichAccounts
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:SunRichConfig
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol:SunRichController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |
    |    function pause() onlyOwner whenNotPaused public {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |
    |    function unpause() onlyOwner whenPaused public {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(53)

[31mViolation[0m for LockedEther in contract 'SunRich':
    |}
    |
  > |contract SunRich is ERC20, Ownable {
    |    string public constant version = "0.4";
    |    string public name = "Sunrich (RUB)";
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(423)

[31mViolation[0m for UnrestrictedWrite in contract 'SunRich':
    |}
    |
  > |contract SunRich is ERC20, Ownable {
    |    string public constant version = "0.4";
    |    string public name = "Sunrich (RUB)";
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(423)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRich':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRich':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRich':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRich':
    |}
    |
  > |contract SunRich is ERC20, Ownable {
    |    string public constant version = "0.4";
    |    string public name = "Sunrich (RUB)";
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(423)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRich':
    |
    |    function setController(address payable _ctrl) public onlyOwner {
  > |        ctrl = SunRichController(_ctrl);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(448)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    | 
    |    function setController(address payable _ctrl) public onlyOwner {
  > |        ctrl = SunRichController(_ctrl);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |    function addTo(address _to, uint256 _value) public onlyController returns (uint256) {
    |        require(_to != address(0));
  > |        balances[_to] = balances[_to].add(_value);
    |        return balances[_to];
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |    function subFrom(address _from, uint256 _value) public onlyController returns (uint256) {
    |        require(_value <= balances[_from]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        return balances[_from];
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function addAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {
  > |        allowed[_owner][_spender] = allowed[_owner][_spender].add(_value);
    |        return allowed[_owner][_spender];
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(175)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |    function subAllowance(address _owner, address _spender, uint256 _value) public onlyController returns (uint256) {
    |        require(_value <= allowed[_owner][_spender]);
  > |        allowed[_owner][_spender] = allowed[_owner][_spender].sub(_value);
    |        return allowed[_owner][_spender];
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function addTotalSupply(uint256 _value) public onlyController returns (uint256) {
  > |        totalSupply = totalSupply.add(_value);
    |        return totalSupply;
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(190)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function subTotalSupply(uint256 _value) public onlyController returns (uint256) {
  > |        totalSupply = totalSupply.sub(_value);
    |        return totalSupply;
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(195)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function setBusiness(address _owner, bool _value) public onlyController {
  > |        businessAccounts[_owner] = _value;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function setSystem(address _owner, bool _value) public onlyController {
  > |        systemAccounts[_owner] = _value;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(208)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichAccounts':
    |
    |    function setPremium(address _owner, uint256 _value) public onlyController {
  > |        premiumAccounts[_owner] = _value;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(216)

[33mWarning[0m for MissingInputValidation in contract 'SunRichConfig':
    |    mapping(string => uint256) private data;
    |
  > |    function set(string memory _key, uint256 _value) onlyOwner public {
    |        data[_key] = _value;
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(102)

[31mViolation[0m for UnrestrictedWrite in contract 'SunRichConfig':
    |
    |    function set(string memory _key, uint256 _value) onlyOwner public {
  > |        data[_key] = _value;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichConfig':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichConfig':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichConfig':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for DAOConstantGas in contract 'SunRichController':
    |    function setMaster(address _master) public onlyOwner {
    |        if(_master == address(0x0)){
  > |            owner.transfer(address(this).balance);
    |        }
    |        master = SunRich(_master);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(242)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |
    |            _transfer(_from, _to, _value);
  > |            master.emitTransfer(_from, _to, _value);
    |
    |            _topup(_from);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(282)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |
    |        _transfer(_from, _to, _value);
  > |        master.emitTransfer(_from, _to, _value);
    |
    |        accounts.subAllowance(_from, _to, _value);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(297)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |        master.emitTransfer(_from, _to, _value);
    |
  > |        accounts.subAllowance(_from, _to, _value);
    |
    |        _topup(_from);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(299)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |
    |    function _transfer(address _from, address _to, uint256 _value) internal {
  > |        accounts.subFrom(_from, _value);
    |        accounts.addTo(_to, _value);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(321)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |    function _transfer(address _from, address _to, uint256 _value) internal {
    |        accounts.subFrom(_from, _value);
  > |        accounts.addTo(_to, _value);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(322)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |            feeReceiver = config.get('fee.a2a_receiver');
    |        }
  > |        if (!accounts.isBusiness(_from) && accounts.isBusiness(_to)) {
    |            feeSender = config.get('fee.a2b_sender');
    |            feeReceiver = config.get('fee.a2b_receiver');
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(336)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |            feeReceiver = config.get('fee.a2b_receiver');
    |        }
  > |        if (accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {
    |            feeSender = config.get('fee.b2a_sender');
    |            feeReceiver = config.get('fee.b2a_receiver');
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(340)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |            feeReceiver = config.get('fee.b2a_receiver');
    |        }
  > |        if (accounts.isBusiness(_from) && accounts.isBusiness(_to)) {
    |            feeSender = config.get('fee.b2b_sender');
    |            feeReceiver = config.get('fee.b2b_receiver');
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(344)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |            if(feeValue > 0) {
    |                _transfer(feeSpender, feeCollector, feeValue);
  > |                master.emitTransfer(feeSpender, feeCollector, feeValue);
    |            }
    |        }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(366)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |                feeSpender = _to;
    |                _transfer(feeSpender, feeCollector, feeValue);
  > |                master.emitTransfer(feeSpender, feeCollector, feeValue);
    |            }
    |        }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(375)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |
    |    function _topup(address payable _address) internal {
  > |        uint256 topupEnabled = config.get('eth.topup');
    |        if(topupEnabled > 0){
    |            uint256 minBalance = config.get('eth.minBalance') * 1 finney;
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(382)

[31mViolation[0m for RepeatedCall in contract 'SunRichController':
    |        uint256 topupEnabled = config.get('eth.topup');
    |        if(topupEnabled > 0){
  > |            uint256 minBalance = config.get('eth.minBalance') * 1 finney;
    |            if(address(this).balance > minBalance){
    |                if(_address.balance < minBalance){
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(384)

[33mWarning[0m for RepeatedCall in contract 'SunRichController':
    |            feeReceiver = config.get('fee.a2b_receiver');
    |        }
  > |        if (accounts.isBusiness(_from) && !accounts.isBusiness(_to)) {
    |            feeSender = config.get('fee.b2a_sender');
    |            feeReceiver = config.get('fee.b2a_receiver');
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(340)

[31mViolation[0m for TODAmount in contract 'SunRichController':
    |    function setMaster(address _master) public onlyOwner {
    |        if(_master == address(0x0)){
  > |            owner.transfer(address(this).balance);
    |        }
    |        master = SunRich(_master);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(242)

[33mWarning[0m for TODAmount in contract 'SunRichController':
    |            if(address(this).balance > minBalance){
    |                if(_address.balance < minBalance){
  > |                    _address.transfer(minBalance.sub(_address.balance));
    |                }
    |            }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(387)

[31mViolation[0m for TODReceiver in contract 'SunRichController':
    |    function setMaster(address _master) public onlyOwner {
    |        if(_master == address(0x0)){
  > |            owner.transfer(address(this).balance);
    |        }
    |        master = SunRich(_master);
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(242)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SunRichController':
    |            if(address(this).balance > minBalance){
    |                if(_address.balance < minBalance){
  > |                    _address.transfer(minBalance.sub(_address.balance));
    |                }
    |            }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(387)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |    function transferOwnership(address payable otherOwner) onlyOwner public {
    |        require(otherOwner != address(0));
  > |        newOwner = otherOwner;
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(20)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(27)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |
    |    function pause() onlyOwner whenNotPaused public {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |
    |    function unpause() onlyOwner whenPaused public {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |            owner.transfer(address(this).balance);
    |        }
  > |        master = SunRich(_master);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(244)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |
    |    function setConfig(address _config) public onlyOwner {
  > |        config = SunRichConfig(_config);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(248)

[33mWarning[0m for UnrestrictedWrite in contract 'SunRichController':
    |
    |    function setAccounts(address _accounts) public onlyOwner {
  > |        accounts = SunRichAccounts(_accounts);
    |    }
    |
  at /unique_chucks/44/0x830afc4c0897a8f84bbf77f15ba35951278e4634.sol(252)