Processing contract: /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol:IERC20
Processing contract: /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol:easyExchangeCoins
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |        _;
    |    }
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(104)

[31mViolation[0m for DAOConstantGas in contract 'easyExchangeCoins':
    |                _balances[msg.sender] = _balances[msg.sender].add(buyAmount);
    |                emit Transfer(contractAddress, msg.sender, buyAmount);
  > |                msg.sender.transfer(msg.value - cost);
    |                ICOActive = false;
    |            }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(147)

[31mViolation[0m for DAOConstantGas in contract 'easyExchangeCoins':
    |    
    |    function endICO() public onlyOwner {
  > |        msg.sender.transfer(contractAddress.balance);
    |        ICOActive = false;
    |        uint256 _amount = _balances[contractAddress];
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(166)

[31mViolation[0m for TODAmount in contract 'easyExchangeCoins':
    |    // Token owner can claim ETH from ICO sales
    |    function withdrawETH() public onlyOwner {
  > |        msg.sender.transfer(contractAddress.balance);
    |    }
    |    
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(162)

[31mViolation[0m for TODAmount in contract 'easyExchangeCoins':
    |    
    |    function endICO() public onlyOwner {
  > |        msg.sender.transfer(contractAddress.balance);
    |        ICOActive = false;
    |        uint256 _amount = _balances[contractAddress];
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(166)

[33mWarning[0m for TODAmount in contract 'easyExchangeCoins':
    |                _balances[msg.sender] = _balances[msg.sender].add(buyAmount);
    |                emit Transfer(contractAddress, msg.sender, buyAmount);
  > |                msg.sender.transfer(msg.value - cost);
    |                ICOActive = false;
    |            }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(147)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'easyExchangeCoins':
    |                _balances[msg.sender] = _balances[msg.sender].add(buyAmount);
    |                emit Transfer(contractAddress, msg.sender, buyAmount);
  > |                msg.sender.transfer(msg.value - cost);
    |                ICOActive = false;
    |            }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(147)

[31mViolation[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |            revert();
    |        } else if (ICOBalance() == 0) {
  > |            ICOActive = false;
    |            revert();
    |        } else {
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(133)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |            uint256 affordAmount = msg.value / ICOPrice;
    |            if (affordAmount <= _balances[contractAddress]) {
  > |                _balances[contractAddress] = _balances[contractAddress].sub(affordAmount);
    |                _balances[msg.sender] = _balances[msg.sender].add(affordAmount);
    |                emit Transfer(contractAddress, msg.sender, affordAmount);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |                uint256 buyAmount = _balances[contractAddress];
    |                uint256 cost = buyAmount * ICOPrice;
  > |                _balances[contractAddress] = _balances[contractAddress].sub(buyAmount);
    |                _balances[msg.sender] = _balances[msg.sender].add(buyAmount);
    |                emit Transfer(contractAddress, msg.sender, buyAmount);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |                emit Transfer(contractAddress, msg.sender, buyAmount);
    |                msg.sender.transfer(msg.value - cost);
  > |                ICOActive = false;
    |            }
    |        }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |    function changeICOPrice(uint256 newPrice) public onlyOwner {
    |        uint256 _newPrice = newPrice * 10 ** decimals;
  > |        ICOPrice = _newPrice;
    |    }
    |    
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |    function endICO() public onlyOwner {
    |        msg.sender.transfer(contractAddress.balance);
  > |        ICOActive = false;
    |        uint256 _amount = _balances[contractAddress];
    |        _balances[owner] = _balances[owner].add(_amount);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        ICOActive = false;
    |        uint256 _amount = _balances[contractAddress];
  > |        _balances[owner] = _balances[owner].add(_amount);
    |        _balances[contractAddress] = 0;
    |        emit Transfer(contractAddress, owner, _amount);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        uint256 _amount = _balances[contractAddress];
    |        _balances[owner] = _balances[owner].add(_amount);
  > |        _balances[contractAddress] = 0;
    |        emit Transfer(contractAddress, owner, _amount);
    |    }
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        require(_balances[msg.sender] >= value);
    |        _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(206)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        require(value <= balanceOf(from));
    |        require(value <= allowance(from, to));
  > |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][to] = _allowed[from][to].sub(value);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(222)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        require(value <= allowance(from, to));
    |        _balances[from] = _balances[from].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][to] = _allowed[from][to].sub(value);
    |        emit Transfer(from, to, value);
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'easyExchangeCoins':
    |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
  > |        _allowed[from][to] = _allowed[from][to].sub(value);
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/44/0x6bda305342951fe0f7b5dae40e341d9894a8bd22.sol(224)