Processing contract: /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol:MultiSigWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'MultiSigWallet':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);
    |            if (success)
    |                emit Execution(transactionId);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(233)

[33mWarning[0m for TODAmount in contract 'MultiSigWallet':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);
    |            if (success)
    |                emit Execution(transactionId);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(233)

[33mWarning[0m for TODReceiver in contract 'MultiSigWallet':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);
    |            if (success)
    |                emit Execution(transactionId);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(233)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigWallet':
    |            Transaction storage txn = transactions[transactionId];
    |            txn.executed = true;
  > |            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);
    |            if (success)
    |                emit Execution(transactionId);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(233)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
    |/// @author Stefan George - <stefan.george@consensys.net>
  > |contract MultiSigWallet {
    |
    |    /*
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(5)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        for (uint i=0; i<owners.length - 1; i++)
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(144)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        for (uint i=0; i<owners.length; i++)
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(164)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |                break;
    |            }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(167)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
    |        emit OwnerAddition(newOwner);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(168)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    {
    |        transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(274)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |    }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        if (isConfirmed(transactionId)) {
    |            Transaction storage txn = transactions[transactionId];
  > |            txn.executed = true;
    |            (bool success, ) = txn.destination.call.value(txn.value)(txn.data);
    |            if (success)
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(232)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |            else {
    |                emit ExecutionFailure(transactionId);
  > |                txn.executed = false;
    |            }
    |        }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |pragma solidity >=0.5.0 <0.6.0;
    |
  > |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
    |/// @author Stefan George - <stefan.george@consensys.net>
    |contract MultiSigWallet {
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        validRequirement(owners.length + 1, required)
    |    {
  > |        isOwner[owner] = true;
    |        owners.push(owner);
    |        emit OwnerAddition(owner);
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |    {
    |        isOwner[owner] = true;
  > |        owners.push(owner);
    |        emit OwnerAddition(owner);
    |    }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        ownerExists(owner)
    |    {
  > |        isOwner[owner] = false;
    |        for (uint i=0; i<owners.length - 1; i++)
    |            if (owners[i] == owner) {
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |        validRequirement(owners.length, _required)
    |    {
  > |        required = _required;
    |        emit RequirementChange(_required);
    |    }
  at /unique_chucks/47/0x2cecf8f9f328d80d34cd456cc7dd15e20e45638a.sol(180)