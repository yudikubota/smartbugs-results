Processing contract: /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol:SmartLocker
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol:SmartLockerRegistrar
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'SmartLocker':
    |
    |        // execute the transaction
  > |        (bool success, bytes memory result) = to.call.value(value)(data);
    |
    |        // calculate gas used
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(194)

[33mWarning[0m for LockedEther in contract 'SmartLocker':
    |}
    |
  > |contract SmartLocker {
    |
    |    // use ECDSA library for recovering signatures of hashes
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(62)

[33mWarning[0m for RepeatedCall in contract 'SmartLocker':
    |
    |        // refund the gas used plus overhead of 40,000 and 68 for each input byte
  > |        msg.sender.transfer((gasUsed + 40000 + (msg.data.length * 68)) * gasPrice);
    |
    |        // return the result
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(212)

[33mWarning[0m for TODAmount in contract 'SmartLocker':
    |
    |        // execute the transaction
  > |        (bool success, bytes memory result) = to.call.value(value)(data);
    |
    |        // calculate gas used
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(194)

[33mWarning[0m for TODAmount in contract 'SmartLocker':
    |
    |        // refund the gas used plus overhead of 40,000 and 68 for each input byte
  > |        msg.sender.transfer((gasUsed + 40000 + (msg.data.length * 68)) * gasPrice);
    |
    |        // return the result
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(212)

[33mWarning[0m for TODReceiver in contract 'SmartLocker':
    |
    |        // execute the transaction
  > |        (bool success, bytes memory result) = to.call.value(value)(data);
    |
    |        // calculate gas used
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(194)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SmartLocker':
    |
    |        // execute the transaction
  > |        (bool success, bytes memory result) = to.call.value(value)(data);
    |
    |        // calculate gas used
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(194)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SmartLocker':
    |
    |        // refund the gas used plus overhead of 40,000 and 68 for each input byte
  > |        msg.sender.transfer((gasUsed + 40000 + (msg.data.length * 68)) * gasPrice);
    |
    |        // return the result
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(212)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |pragma solidity >=0.5.7 <0.6.0;
    |
  > |contract SmartLockerRegistrar {
    |
    |    // forward registrar
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // add the key as an authorised key
  > |        keys[key].index = keyList.length;
    |        keys[key].authorised = true;
    |        keys[key].keyname = keyname;
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(137)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |        // add the key as an authorised key
    |        keys[key].index = keyList.length;
  > |        keys[key].authorised = true;
    |        keys[key].keyname = keyname;
    |        authorisedKeyCount++;
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(138)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |        keys[key].index = keyList.length;
    |        keys[key].authorised = true;
  > |        keys[key].keyname = keyname;
    |        authorisedKeyCount++;
    |
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(139)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |        keys[key].authorised = true;
    |        keys[key].keyname = keyname;
  > |        authorisedKeyCount++;
    |
    |        // add to the key list
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(140)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // add to the key list
  > |        keyList.push(key);
    |
    |        // emit event
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(143)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // remove the key as an authorised key
  > |        keys[key].authorised = false;
    |        authorisedKeyCount--;
    |
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |        // remove the key as an authorised key
    |        keys[key].authorised = false;
  > |        authorisedKeyCount--;
    |
    |        // delete from the key list
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(161)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // delete from the key list
  > |        delete keyList[keys[key].index];
    |
    |        // emit event
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(164)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // update the key
  > |        keys[key].keyname = keyname;
    |        // TODO: other attributes here, e.g. management flag, threshold
    |
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(178)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLocker':
    |
    |        // update the nonce
  > |        nextNonce++;
    |
    |        // refund the gas used plus overhead of 40,000 and 68 for each input byte
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(209)

[31mViolation[0m for LockedEther in contract 'SmartLockerRegistrar':
    |pragma solidity >=0.5.7 <0.6.0;
    |
  > |contract SmartLockerRegistrar {
    |
    |    // forward registrar
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(3)

[31mViolation[0m for MissingInputValidation in contract 'SmartLockerRegistrar':
    |
    |    // get the name of the smart locker with given address (external view)
  > |    function getName(address smartLockerAddress) external view
    |        returns (bytes32) {
    |
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(48)

[31mViolation[0m for MissingInputValidation in contract 'SmartLockerRegistrar':
    |
    |    // get the address of the smart locker with given name (external view)
  > |    function getAddress(bytes32 name) external view
    |        returns (address) {
    |
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(55)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLockerRegistrar':
    |        // register the smart locker address with the given name
    |        address smartLockerAddress = address(smartLocker);
  > |        registrar[smartLockerAddress] = name;
    |
    |        // add corresponding entry to the reverse registrar
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(35)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartLockerRegistrar':
    |
    |        // add corresponding entry to the reverse registrar
  > |        reverseRegistrar[name] = smartLockerAddress;
    |
    |        // emit event
  at /unique_chucks/45/0x529aeee973f044e8c5d9a1f8e0097460642caf4f.sol(38)