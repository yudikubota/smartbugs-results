Processing contract: /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol:SecToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol:StandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol:Token
Processing contract: /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol:TokenRecipient
[31mViolation[0m for LockedEther in contract 'SecToken':
    |.*/
    |
  > |contract SecToken is StandardToken {
    |
    |    function () external {
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(133)

[33mWarning[0m for UnrestrictedWrite in contract 'SecToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            emit Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'SecToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'SecToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            emit Transfer(_from, _to, _value);
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(93)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) public returns (bool success) {
    |        //Default assumes totalSupply can't be over max (2^256 - 1).
    |        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(73)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    |        //same as above. Replace this line with the following if you want to protect against wrapping uints.
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(88)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function balanceOf(address _owner) public view returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(102)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) public returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        emit Approval(msg.sender, _spender, _value);
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(106)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
    |        return allowed[_owner][_spender];
    |    }
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[msg.sender] >= _value && _value > 0) {
    |            balances[msg.sender] -= _value;
  > |            balances[_to] += _value;
    |            emit Transfer(msg.sender, _to, _value);
    |            return true;
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |            balances[_to] += _value;
    |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |            balances[_to] += _value;
  > |            balances[_from] -= _value;
    |            allowed[_from][msg.sender] -= _value;
    |            emit Transfer(_from, _to, _value);
  at /unique_contracts/0xdee6c61630e8363f96f4fe4085b66795b79cefc7.sol(93)