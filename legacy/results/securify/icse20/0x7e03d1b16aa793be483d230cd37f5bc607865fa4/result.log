Processing contract: /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol:ERC20TokenInterface
Processing contract: /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol:TwoYearDreamTokensVesting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'TwoYearDreamTokensVesting':
    |        uint256 tokensToSend = getAvailableTokensToWithdraw();
    |        sendTokens(tokensToSend);
  > |        if (dreamToken.balanceOf(address(this)) == 0) { // When all tokens were sent, destroy this smart contract
    |            selfdestruct(withdrawalAddress);
    |        }
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(184)

[31mViolation[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |            return;
    |        }
  > |        tokensSent = tokensSent.add(tokensToSend); // Update tokensSent variable to send correct amount later
    |        dreamToken.transfer(withdrawalAddress, tokensToSend); // Send allowed number of tokens
    |        emit Withdraw(tokensToSend, now); // Emitting a notification that tokens were withdrawn
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(197)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        uint256 year = halfOfYear * 2;
    |                                                                        // Token availability stages:
  > |        stages[0].date = vestingStartUnixTimestamp;                     // Right after initialization
    |        stages[1].date = vestingStartUnixTimestamp + halfOfYear;        // 1/2 years after initialization
    |        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(64)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |                                                                        // Token availability stages:
    |        stages[0].date = vestingStartUnixTimestamp;                     // Right after initialization
  > |        stages[1].date = vestingStartUnixTimestamp + halfOfYear;        // 1/2 years after initialization
    |        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization
    |        stages[3].date = vestingStartUnixTimestamp + year + halfOfYear; // 1 + 1/2 years after initialization
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(65)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[0].date = vestingStartUnixTimestamp;                     // Right after initialization
    |        stages[1].date = vestingStartUnixTimestamp + halfOfYear;        // 1/2 years after initialization
  > |        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization
    |        stages[3].date = vestingStartUnixTimestamp + year + halfOfYear; // 1 + 1/2 years after initialization
    |        stages[4].date = vestingStartUnixTimestamp + (year * 2);        // 2 years after initialization
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(66)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[1].date = vestingStartUnixTimestamp + halfOfYear;        // 1/2 years after initialization
    |        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization
  > |        stages[3].date = vestingStartUnixTimestamp + year + halfOfYear; // 1 + 1/2 years after initialization
    |        stages[4].date = vestingStartUnixTimestamp + (year * 2);        // 2 years after initialization
    |                                                    // Token availability values:
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(67)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[2].date = vestingStartUnixTimestamp + year;              // 1 year after initialization
    |        stages[3].date = vestingStartUnixTimestamp + year + halfOfYear; // 1 + 1/2 years after initialization
  > |        stages[4].date = vestingStartUnixTimestamp + (year * 2);        // 2 years after initialization
    |                                                    // Token availability values:
    |        stages[0].tokensUnlockedPercentage = 10;    // 0.1%
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[4].date = vestingStartUnixTimestamp + (year * 2);        // 2 years after initialization
    |                                                    // Token availability values:
  > |        stages[0].tokensUnlockedPercentage = 10;    // 0.1%
    |        stages[1].tokensUnlockedPercentage = 2500;  // 25%
    |        stages[2].tokensUnlockedPercentage = 5000;  // 50%
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |                                                    // Token availability values:
    |        stages[0].tokensUnlockedPercentage = 10;    // 0.1%
  > |        stages[1].tokensUnlockedPercentage = 2500;  // 25%
    |        stages[2].tokensUnlockedPercentage = 5000;  // 50%
    |        stages[3].tokensUnlockedPercentage = 7500;  // 75%
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[0].tokensUnlockedPercentage = 10;    // 0.1%
    |        stages[1].tokensUnlockedPercentage = 2500;  // 25%
  > |        stages[2].tokensUnlockedPercentage = 5000;  // 50%
    |        stages[3].tokensUnlockedPercentage = 7500;  // 75%
    |        stages[4].tokensUnlockedPercentage = 10000; // 100%
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[1].tokensUnlockedPercentage = 2500;  // 25%
    |        stages[2].tokensUnlockedPercentage = 5000;  // 50%
  > |        stages[3].tokensUnlockedPercentage = 7500;  // 75%
    |        stages[4].tokensUnlockedPercentage = 10000; // 100%
    |
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        stages[2].tokensUnlockedPercentage = 5000;  // 50%
    |        stages[3].tokensUnlockedPercentage = 7500;  // 75%
  > |        stages[4].tokensUnlockedPercentage = 10000; // 100%
    |
    |    }
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |     */
    |    function initializeVestingFor (address payable account) external deployerOnly whenNotInitialized {
  > |        initialTokensBalance = dreamToken.balanceOf(address(this));
    |        require(initialTokensBalance != 0);
    |        withdrawalAddress = account;
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        initialTokensBalance = dreamToken.balanceOf(address(this));
    |        require(initialTokensBalance != 0);
  > |        withdrawalAddress = account;
    |        vestingStartUnixTimestamp = block.timestamp;
    |        vestingRules();
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'TwoYearDreamTokensVesting':
    |        require(initialTokensBalance != 0);
    |        withdrawalAddress = account;
  > |        vestingStartUnixTimestamp = block.timestamp;
    |        vestingRules();
    |    }
  at /unique_chucks/37/0x7e03d1b16aa793be483d230cd37f5bc607865fa4.sol(159)