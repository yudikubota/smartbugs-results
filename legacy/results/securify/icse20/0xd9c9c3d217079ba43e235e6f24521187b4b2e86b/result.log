Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:ECRecovery
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:ERC20Interface
Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:LavaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:RelayAuthorityInterface
Processing contract: /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'LavaToken':
    |
    |
  > |contract LavaToken is ECRecovery{
    |
    |    using SafeMath for uint;
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(135)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |        require( ERC20Interface( masterToken ).transferFrom( from, address(this), amount) );
    |
  > |        balances[from] = balances[from].add(amount);
    |        _totalSupply = _totalSupply.add(amount);
    |
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(222)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |
    |        balances[from] = balances[from].add(amount);
  > |        _totalSupply = _totalSupply.add(amount);
    |
    |        return true;
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |
    |        balances[from] = balances[from].sub(amount);
  > |        _totalSupply = _totalSupply.sub(amount);
    |
    |        require( ERC20Interface( masterToken ).transfer( from, amount) );
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(243)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |   function transfer(address to,  uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |   //standard ERC20 method
    |   function transferFrom( address from, address to,  uint tokens) public returns (bool success) {
  > |       balances[from] = balances[from].sub(tokens);
    |       allowance[from][to] = allowance[from][to].sub(tokens);
    |       balances[to] = balances[to].add(tokens);
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |   function transferFrom( address from, address to,  uint tokens) public returns (bool success) {
    |       balances[from] = balances[from].sub(tokens);
  > |       allowance[from][to] = allowance[from][to].sub(tokens);
    |       balances[to] = balances[to].add(tokens);
    |       emit Transfer( from, to, tokens);
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(288)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |       balances[from] = balances[from].sub(tokens);
    |       allowance[from][to] = allowance[from][to].sub(tokens);
  > |       balances[to] = balances[to].add(tokens);
    |       emit Transfer( from, to, tokens);
    |       return true;
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'LavaToken':
    |         //make sure this signature has never been used
    |         uint burnedSignature = burnedSignatures[sigHash];
  > |         burnedSignatures[sigHash] = 0x2; //invalidated
    |         require(burnedSignature == 0x0);
    |
  at /unique_chucks/35/0xd9c9c3d217079ba43e235e6f24521187b4b2e86b.sol(452)