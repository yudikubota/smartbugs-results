Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOETH
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOIon
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle3653928047492362890/mustExplicit -j 1 -F /tmp/souffle-36fb18f7-5fa4-444d-97e2-8e1b1448e9c1 -D /tmp/souffle-36fb18f7-5fa4-444d-97e2-8e1b1448e9c1_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOIon
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOIonInterface
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle3653928047492362890/mustExplicit -j 1 -F /tmp/souffle-89010fed-7875-470c-ad4c-4e5d2f0cb00a -D /tmp/souffle-89010fed-7875-470c-ad4c-4e5d2f0cb00a_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:AOLibrary
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:IAOIonLot
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:IAOSetting
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:INameAccountRecovery
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:INamePublicKey
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:INameTAOPosition
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:ionRecipient
Processing contract: /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol:tokenRecipient
[31mViolation[0m for RepeatedCall in contract 'AOETH':
    |			_tokenExchange.tokenAddress,
    |			TokenERC20(_tokenExchange.tokenAddress).name(),
  > |			TokenERC20(_tokenExchange.tokenAddress).symbol(),
    |			_tokenExchange.price,
    |			_tokenExchange.sentAmount,
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2170)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(130)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(206)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(222)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(224)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    | * @title AOETH
    | */
  > |contract AOETH is TheAO, TokenERC20, tokenRecipient {
    |	using SafeMath for uint256;
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1867)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1945)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1955)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |	function setAOIonAddress(address _aoIonAddress) public onlyTheAO {
    |		require (_aoIonAddress != address(0));
  > |		aoIonAddress = _aoIonAddress;
    |		_aoIon = AOIon(_aoIonAddress);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1964)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		require (_aoIonAddress != address(0));
    |		aoIonAddress = _aoIonAddress;
  > |		_aoIon = AOIon(_aoIonAddress);
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1965)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1974)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		require (erc20TokenIdLookup[_tokenAddress] == 0);
    |
  > |		totalERC20Tokens++;
    |		erc20TokenIdLookup[_tokenAddress] = totalERC20Tokens;
    |		ERC20Token storage _erc20Token = erc20Tokens[totalERC20Tokens];
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1999)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		totalERC20Tokens++;
  > |		erc20TokenIdLookup[_tokenAddress] = totalERC20Tokens;
    |		ERC20Token storage _erc20Token = erc20Tokens[totalERC20Tokens];
    |		_erc20Token.tokenAddress = _tokenAddress;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2000)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		erc20TokenIdLookup[_tokenAddress] = totalERC20Tokens;
    |		ERC20Token storage _erc20Token = erc20Tokens[totalERC20Tokens];
  > |		_erc20Token.tokenAddress = _tokenAddress;
    |		_erc20Token.price = _price;
    |		_erc20Token.maxQuantity = _maxQuantity;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2002)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		ERC20Token storage _erc20Token = erc20Tokens[totalERC20Tokens];
    |		_erc20Token.tokenAddress = _tokenAddress;
  > |		_erc20Token.price = _price;
    |		_erc20Token.maxQuantity = _maxQuantity;
    |		_erc20Token.active = true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2003)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_erc20Token.tokenAddress = _tokenAddress;
    |		_erc20Token.price = _price;
  > |		_erc20Token.maxQuantity = _maxQuantity;
    |		_erc20Token.active = true;
    |		emit AddERC20Token(_erc20Token.tokenAddress, _erc20Token.price, _erc20Token.maxQuantity);
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2004)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_erc20Token.price = _price;
    |		_erc20Token.maxQuantity = _maxQuantity;
  > |		_erc20Token.active = true;
    |		emit AddERC20Token(_erc20Token.tokenAddress, _erc20Token.price, _erc20Token.maxQuantity);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2005)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		ERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];
  > |		_erc20Token.price = _price;
    |		emit SetPrice(_erc20Token.tokenAddress, _erc20Token.price);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2019)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		ERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];
    |		require (_maxQuantity > _erc20Token.exchangedQuantity);
  > |		_erc20Token.maxQuantity = _maxQuantity;
    |		emit SetMaxQuantity(_erc20Token.tokenAddress, _erc20Token.maxQuantity);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2033)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		ERC20Token storage _erc20Token = erc20Tokens[erc20TokenIdLookup[_tokenAddress]];
  > |		_erc20Token.active = _active;
    |		emit SetActive(_erc20Token.tokenAddress, _erc20Token.active);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2046)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		require (TokenERC20(_token).transferFrom(_from, address(this), _value));
    |
  > |		_erc20Token.exchangedQuantity = _erc20Token.exchangedQuantity.add(amountToTransfer);
    |		balanceOf[_from] = balanceOf[_from].add(amountToTransfer);
    |		totalSupply = totalSupply.add(amountToTransfer);
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2129)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		_erc20Token.exchangedQuantity = _erc20Token.exchangedQuantity.add(amountToTransfer);
  > |		balanceOf[_from] = balanceOf[_from].add(amountToTransfer);
    |		totalSupply = totalSupply.add(amountToTransfer);
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2130)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_erc20Token.exchangedQuantity = _erc20Token.exchangedQuantity.add(amountToTransfer);
    |		balanceOf[_from] = balanceOf[_from].add(amountToTransfer);
  > |		totalSupply = totalSupply.add(amountToTransfer);
    |
    |		// Store the TokenExchange information
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2131)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		// Store the TokenExchange information
  > |		totalTokenExchanges++;
    |		totalAddressTokenExchanges[_from]++;
    |		bytes32 _exchangeId = keccak256(abi.encodePacked(this, _from, totalTokenExchanges));
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2134)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		// Store the TokenExchange information
    |		totalTokenExchanges++;
  > |		totalAddressTokenExchanges[_from]++;
    |		bytes32 _exchangeId = keccak256(abi.encodePacked(this, _from, totalTokenExchanges));
    |		tokenExchangeIdLookup[_exchangeId] = totalTokenExchanges;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2135)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		totalAddressTokenExchanges[_from]++;
    |		bytes32 _exchangeId = keccak256(abi.encodePacked(this, _from, totalTokenExchanges));
  > |		tokenExchangeIdLookup[_exchangeId] = totalTokenExchanges;
    |
    |		TokenExchange storage _tokenExchange = tokenExchanges[totalTokenExchanges];
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2137)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |
    |		TokenExchange storage _tokenExchange = tokenExchanges[totalTokenExchanges];
  > |		_tokenExchange.exchangeId = _exchangeId;
    |		_tokenExchange.buyer = _from;
    |		_tokenExchange.tokenAddress = _token;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2140)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		TokenExchange storage _tokenExchange = tokenExchanges[totalTokenExchanges];
    |		_tokenExchange.exchangeId = _exchangeId;
  > |		_tokenExchange.buyer = _from;
    |		_tokenExchange.tokenAddress = _token;
    |		_tokenExchange.price = _erc20Token.price;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2141)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_tokenExchange.exchangeId = _exchangeId;
    |		_tokenExchange.buyer = _from;
  > |		_tokenExchange.tokenAddress = _token;
    |		_tokenExchange.price = _erc20Token.price;
    |		_tokenExchange.sentAmount = _value;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2142)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_tokenExchange.buyer = _from;
    |		_tokenExchange.tokenAddress = _token;
  > |		_tokenExchange.price = _erc20Token.price;
    |		_tokenExchange.sentAmount = _value;
    |		_tokenExchange.receivedAmount = amountToTransfer;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2143)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_tokenExchange.tokenAddress = _token;
    |		_tokenExchange.price = _erc20Token.price;
  > |		_tokenExchange.sentAmount = _value;
    |		_tokenExchange.receivedAmount = amountToTransfer;
    |		_tokenExchange.extraData = _extraData;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2144)

[31mViolation[0m for UnrestrictedWrite in contract 'AOETH':
    |		_tokenExchange.price = _erc20Token.price;
    |		_tokenExchange.sentAmount = _value;
  > |		_tokenExchange.receivedAmount = amountToTransfer;
    |		_tokenExchange.extraData = _extraData;
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(2145)

[33mWarning[0m for TODAmount in contract 'AOIonInterface':
    |		require (myAddress.balance >= amount.mul(sellPrice));
    |		_transfer(msg.sender, address(this), amount);
  > |		msg.sender.transfer(amount.mul(sellPrice));
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1130)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'AOIonInterface':
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyTheAO {
    |		require (_recipient != address(0));
  > |		_recipient.transfer(_amount);
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(866)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(816)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(826)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(835)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(836)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {
    |		require (_namePublicKeyAddress != address(0));
  > |		namePublicKeyAddress = _namePublicKeyAddress;
    |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(845)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_namePublicKeyAddress != address(0));
    |		namePublicKeyAddress = _namePublicKeyAddress;
  > |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(846)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(855)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(856)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	 */
    |	function freezeAccount(address target, bool freeze) public onlyTheAO {
  > |		frozenAccount[target] = freeze;
    |		emit FrozenFunds(target, freeze);
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(875)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	 */
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
  > |		sellPrice = newSellPrice;
    |		buyPrice = newBuyPrice;
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(885)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
    |		sellPrice = newSellPrice;
  > |		buyPrice = newBuyPrice;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(886)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1089)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1105)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(1107)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(379)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(379)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(237)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(266)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(258)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(269)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(82)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(130)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(206)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(222)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_contracts/0x7fea965a502f3f17851a57bcc57e95e03d83e98a.sol(224)