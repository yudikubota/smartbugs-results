Processing contract: /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol:CliffTokenVesting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol:ERC20TokenInterface
Processing contract: /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'CliffTokenVesting':
    |        uint256 unreleased = releasableAmount(account);
    |        require(unreleased > 0);
  > |        beneficiary[account].releasedAmount = beneficiary[account].releasedAmount.add(unreleased);
    |        token.transfer(account, unreleased);
    |        emit Released(account, unreleased);
  at /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol(101)

[31mViolation[0m for UnrestrictedWrite in contract 'CliffTokenVesting':
    |        emit Released(account, unreleased);
    |        if (beneficiary[account].releasedAmount == beneficiary[account].totalAmount) { // When done, clean beneficiary info
  > |            delete beneficiary[account];
    |        }
    |    }
  at /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol(105)

[31mViolation[0m for UnrestrictedWrite in contract 'CliffTokenVesting':
    |        require(amount != 0 && start != 0 && account != address(0x0) && cliff < duration && beneficiary[account].start == 0);
    |        require(token.transferFrom(msg.sender, address(this), amount));
  > |        beneficiary[account] = Beneficiary({
    |            start: start,
    |            duration: duration,
  at /unique_chucks/32/0xe32c04fdf507a2666657935c0cd38cb6038d1c93.sol(128)