Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:ERC20Detailed
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:IERC20
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:MinterRole
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol:XRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol(264)

[31mViolation[0m for LockedEther in contract 'XRT':
    |pragma solidity ^0.5.0;
    |
  > |contract XRT is ERC20Mintable, ERC20Burnable, ERC20Detailed {
    |    constructor(uint256 _initial_supply) public ERC20Detailed("Robonomics", "XRT", 9) {
    |        _mint(msg.sender, _initial_supply);
  at /unique_contracts/0x7de91b204c1c737bcee6f000aaa6569cf7061cb7.sol(471)