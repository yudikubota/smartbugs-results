Processing contract: /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol:BitDogToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol:Ownable
Processing contract: /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BitDogToken':
    |}
    |
  > |contract BitDogToken is Ownable, SafeMath{
    |    string public name;
    |    string public symbol;
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'BitDogToken':
    |		uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];		
    |        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);
  > |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
    |        emit Transfer(msg.sender, _to, _value);
    |		assert(balanceOf[msg.sender]+balanceOf[_to]==previousBalances);
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'BitDogToken':
    |        require (balanceOf[_to] + _value > balanceOf[_to]);
    |        require (_value <= allowance[_from][msg.sender]);
  > |        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);
    |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
    |        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'BitDogToken':
    |        require (_value <= allowance[_from][msg.sender]);
    |        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);
  > |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);
    |        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'BitDogToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |    
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(26)

[33mWarning[0m for UnrestrictedWrite in contract 'BitDogToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/32/0xc60db0775bcad8bfe243ac53d06b66061518e372.sol(36)