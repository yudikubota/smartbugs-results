Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:AssignOperator
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:Authorizable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:Betalist
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:EmergencyToggle
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:SilaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol:Token
[31mViolation[0m for LockedEther in contract 'AssignOperator':
    |}
    |
  > |contract AssignOperator is StandardToken{
    |    
    |    //mappings
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(483)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(!blacklisted[_toBetalist]);
    |        require(!betalisted[_toBetalist]);
  > |        betalisted[_toBetalist]=true;
    |        emit BetalistedAddress(_toBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_toRemoveBetalist != address(0));
    |        require(betalisted[_toRemoveBetalist]);
  > |        betalisted[_toRemoveBetalist]=false;
    |        emit RemovedFromBetalist(_toRemoveBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(293)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_toBlacklist != address(0));
    |        require(!blacklisted[_toBlacklist]);
  > |        blacklisted[_toBlacklist]=true;
    |        emit RemovedFromBlacklist(_toBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(308)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_toRemoveBlacklist != address(0));
    |        require(blacklisted[_toRemoveBlacklist]);
  > |        blacklisted[_toRemoveBlacklist]=false;
    |        emit RemovedFromBlacklist(_toRemoveBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(322)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |    require(!blacklisted[_to]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(423)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |    require(!blacklisted[_from]);
    |    require(!blacklisted[msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(473)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |    require(!blacklisted[msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(474)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(!blacklisted[_developer]);
    |        require(!blacklisted[_user]);
  > |        isOperator[_developer][_user]=true;
    |        emit AssignedOperator(_developer,_user);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(513)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_user != address(0));
    |        require(isOperator[_developer][_user]);
  > |        isOperator[_developer][_user]=false;
    |        emit RemovedOperator(_developer,_user);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(528)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(!blacklisted[_from]);
    |        require(!blacklisted[msg.sender]);
  > |        balances[_from] = balances[_from].sub(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit OperatorTransfer(msg.sender,_from, _to, _amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(555)

[31mViolation[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(!blacklisted[msg.sender]);
    |        balances[_from] = balances[_from].sub(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit OperatorTransfer(msg.sender,_from, _to, _amount);
    |        emit Transfer(_from,_to,_amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |
    |
  > |/** @title A contract for issuing, redeeming and transfering Sila StableCoins
    |  *
    |  * @author www.silamoney.com
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_toAdd != address(0));
    |        require(!authorized[_toAdd]);
  > |        authorized[_toAdd] = true;
    |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(!authorized[_toAdd]);
    |        authorized[_toAdd] = true;
  > |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(_toRemove != address(0));
    |        require(authorized[_toRemove]);
  > |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        require(authorized[_toRemove]);
    |        authorized[_toRemove] = false;
  > |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
  > |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'AssignOperator':
    |    
    |    function emergencyToggle() external onlyHotOwner{
  > |      emergencyFlag = !emergencyFlag;
    |    }
    |
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(237)

[31mViolation[0m for LockedEther in contract 'Authorizable':
    | */
    |
  > |contract Authorizable is Ownable {
    |    
    |    //map to check if the address is authorized to issue, redeem sila
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |
    |
  > |/** @title A contract for issuing, redeeming and transfering Sila StableCoins
    |  *
    |  * @author www.silamoney.com
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(_toAdd != address(0));
    |        require(!authorized[_toAdd]);
  > |        authorized[_toAdd] = true;
    |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(!authorized[_toAdd]);
    |        authorized[_toAdd] = true;
  > |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(_toRemove != address(0));
    |        require(authorized[_toRemove]);
  > |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        require(authorized[_toRemove]);
    |        authorized[_toRemove] = false;
  > |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
  > |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(189)

[31mViolation[0m for LockedEther in contract 'Betalist':
    | * @title  Token is Betalist,Blacklist
    | */
  > | contract Betalist is Authorizable,EmergencyToggle{
    |     
    |    //maps for betalisted and blacklisted addresses
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(!blacklisted[_toBetalist]);
    |        require(!betalisted[_toBetalist]);
  > |        betalisted[_toBetalist]=true;
    |        emit BetalistedAddress(_toBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_toRemoveBetalist != address(0));
    |        require(betalisted[_toRemoveBetalist]);
  > |        betalisted[_toRemoveBetalist]=false;
    |        emit RemovedFromBetalist(_toRemoveBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(293)

[31mViolation[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_toBlacklist != address(0));
    |        require(!blacklisted[_toBlacklist]);
  > |        blacklisted[_toBlacklist]=true;
    |        emit RemovedFromBlacklist(_toBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(308)

[31mViolation[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_toRemoveBlacklist != address(0));
    |        require(blacklisted[_toRemoveBlacklist]);
  > |        blacklisted[_toRemoveBlacklist]=false;
    |        emit RemovedFromBlacklist(_toRemoveBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |
    |
  > |/** @title A contract for issuing, redeeming and transfering Sila StableCoins
    |  *
    |  * @author www.silamoney.com
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_toAdd != address(0));
    |        require(!authorized[_toAdd]);
  > |        authorized[_toAdd] = true;
    |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(!authorized[_toAdd]);
    |        authorized[_toAdd] = true;
  > |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(_toRemove != address(0));
    |        require(authorized[_toRemove]);
  > |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        require(authorized[_toRemove]);
    |        authorized[_toRemove] = false;
  > |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
  > |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'Betalist':
    |    
    |    function emergencyToggle() external onlyHotOwner{
  > |      emergencyFlag = !emergencyFlag;
    |    }
    |
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(237)

[33mWarning[0m for UnrestrictedWrite in contract 'EmergencyToggle':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'EmergencyToggle':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'EmergencyToggle':
    |    
    |    function emergencyToggle() external onlyHotOwner{
  > |      emergencyFlag = !emergencyFlag;
    |    }
    |
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(237)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[31mViolation[0m for LockedEther in contract 'SilaToken':
    | */
    |
  > |contract SilaToken is AssignOperator{
    |    using SafeMath for uint256;
    |    
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(584)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_toBetalist]);
    |        require(!betalisted[_toBetalist]);
  > |        betalisted[_toBetalist]=true;
    |        emit BetalistedAddress(_toBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(_toRemoveBetalist != address(0));
    |        require(betalisted[_toRemoveBetalist]);
  > |        betalisted[_toRemoveBetalist]=false;
    |        emit RemovedFromBetalist(_toRemoveBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(293)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(_toBlacklist != address(0));
    |        require(!blacklisted[_toBlacklist]);
  > |        blacklisted[_toBlacklist]=true;
    |        emit RemovedFromBlacklist(_toBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(308)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(_toRemoveBlacklist != address(0));
    |        require(blacklisted[_toRemoveBlacklist]);
  > |        blacklisted[_toRemoveBlacklist]=false;
    |        emit RemovedFromBlacklist(_toRemoveBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |    require(!blacklisted[_to]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(423)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |    require(!blacklisted[_from]);
    |    require(!blacklisted[msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(473)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |    require(!blacklisted[msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(474)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_developer]);
    |        require(!blacklisted[_user]);
  > |        isOperator[_developer][_user]=true;
    |        emit AssignedOperator(_developer,_user);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(513)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(_user != address(0));
    |        require(isOperator[_developer][_user]);
  > |        isOperator[_developer][_user]=false;
    |        emit RemovedOperator(_developer,_user);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(528)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_from]);
    |        require(!blacklisted[msg.sender]);
  > |        balances[_from] = balances[_from].sub(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit OperatorTransfer(msg.sender,_from, _to, _amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(555)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[msg.sender]);
    |        balances[_from] = balances[_from].sub(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit OperatorTransfer(msg.sender,_from, _to, _amount);
    |        emit Transfer(_from,_to,_amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        }
    |        require(!blacklisted[_to]);
  > |        totalSupply = totalSupply.add(_amount);
    |        balances[_to] = balances[_to].add(_amount);                 
    |        emit Issued(_to, _amount);                     
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(617)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_to]);
    |        totalSupply = totalSupply.add(_amount);
  > |        balances[_to] = balances[_to].add(_amount);                 
    |        emit Issued(_to, _amount);                     
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(618)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        }
    |        require(!blacklisted[_from]);
  > |        balances[_from] = balances[_from].sub(_amount);   
    |        totalSupply = totalSupply.sub(_amount);
    |        emit Redeemed(_from,_amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(640)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_from]);
    |        balances[_from] = balances[_from].sub(_amount);   
  > |        totalSupply = totalSupply.sub(_amount);
    |        emit Redeemed(_from,_amount);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(641)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_to]);
    |        require(!blacklisted[_from]);
  > |        balances[_from] = balances[_from].sub(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit ProtectedTransfer(_from, _to, _amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(668)

[33mWarning[0m for UnrestrictedWrite in contract 'SilaToken':
    |        require(!blacklisted[_from]);
    |        balances[_from] = balances[_from].sub(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit ProtectedTransfer(_from, _to, _amount);
    |        emit Transfer(_from,_to,_amount);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(669)

[31mViolation[0m for LockedEther in contract 'StandardToken':
    | */
    |
  > |contract StandardToken is Token,Betalist{
    |  using SafeMath for uint256;
    |
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(370)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(!blacklisted[_toBetalist]);
    |        require(!betalisted[_toBetalist]);
  > |        betalisted[_toBetalist]=true;
    |        emit BetalistedAddress(_toBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_toRemoveBetalist != address(0));
    |        require(betalisted[_toRemoveBetalist]);
  > |        betalisted[_toRemoveBetalist]=false;
    |        emit RemovedFromBetalist(_toRemoveBetalist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(293)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_toBlacklist != address(0));
    |        require(!blacklisted[_toBlacklist]);
  > |        blacklisted[_toBlacklist]=true;
    |        emit RemovedFromBlacklist(_toBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(308)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_toRemoveBlacklist != address(0));
    |        require(blacklisted[_toRemoveBlacklist]);
  > |        blacklisted[_toRemoveBlacklist]=false;
    |        emit RemovedFromBlacklist(_toRemoveBlacklist);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(322)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(!blacklisted[_to]);
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(423)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(!blacklisted[_from]);
    |    require(!blacklisted[msg.sender]);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(473)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(!blacklisted[msg.sender]);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(474)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |
  > |/** @title A contract for issuing, redeeming and transfering Sila StableCoins
    |  *
    |  * @author www.silamoney.com
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_newHotOwner != address(0));
    |        require(_newColdOwner!= address(0));
  > |        hotOwner = _newHotOwner;
    |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_newColdOwner!= address(0));
    |        hotOwner = _newHotOwner;
  > |        coldOwner = _newColdOwner;
    |        emit OwnershipTransferred(_newHotOwner,_newColdOwner,msg.sender);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_toAdd != address(0));
    |        require(!authorized[_toAdd]);
  > |        authorized[_toAdd] = true;
    |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(!authorized[_toAdd]);
    |        authorized[_toAdd] = true;
  > |        authorizedAddresses.push(_toAdd);
    |        emit AuthorityAdded(_toAdd);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_toRemove != address(0));
    |        require(authorized[_toRemove]);
  > |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(authorized[_toRemove]);
    |        authorized[_toRemove] = false;
  > |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
    |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        authorized[_toRemove] = false;
    |        authorizedAddresses[_toRemoveIndex] = authorizedAddresses[authorizedAddresses.length-1];
  > |        authorizedAddresses.pop();
    |        emit AuthorityRemoved(_toRemove);
    |        return true;
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    
    |    function emergencyToggle() external onlyHotOwner{
  > |      emergencyFlag = !emergencyFlag;
    |    }
    |
  at /unique_chucks/11/0xbfdd08e0347416ea02ed2731f145f9b4cf6d2346.sol(237)