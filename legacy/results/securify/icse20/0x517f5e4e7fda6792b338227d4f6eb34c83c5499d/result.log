Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:BaseSwap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:CompatibleERC20
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:CompatibleERC20Functions
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:ERC20Swap
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:Math
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol:SwapInterface
[31mViolation[0m for LockedEther in contract 'BaseSwap':
    |}
    |
  > |contract BaseSwap is SwapInterface {
    |    string public VERSION; // Passed in as a constructor parameter.
    |
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(106)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |            secretKey: 0x0
    |        });
  > |        swaps[_swapID] = swap;
    |        _swapStates[_swapID] = States.OPEN;
    |
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(245)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        });
    |        swaps[_swapID] = swap;
  > |        _swapStates[_swapID] = States.OPEN;
    |
    |        // Logs open event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(246)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(285)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSwap':
    |    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {
    |        // Expire the swap.
  > |        _swapStates[_swapID] = States.EXPIRED;
    |
    |        // Logs expire event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(296)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSwap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(267)

[31mViolation[0m for LockedEther in contract 'ERC20Swap':
    |
    |/// @notice ERC20Swap implements the ERC20Swap interface.
  > |contract ERC20Swap is SwapInterface, BaseSwap {
    |    using CompatibleERC20Functions for CompatibleERC20;
    |
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(561)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |    function redeemToSpender(bytes32 _swapID, bytes32 _secretKey) public onlyOpenSwaps(_swapID) onlyWithSecretKey(_swapID, _secretKey) {
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(279)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(285)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |    function refund(bytes32 _swapID) public onlyOpenSwaps(_swapID) onlyExpirableSwaps(_swapID) {
    |        // Expire the swap.
  > |        _swapStates[_swapID] = States.EXPIRED;
    |
    |        // Logs expire event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(296)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |
    |        // Close the swap.
  > |        swaps[_swapID].secretKey = _secretKey;
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(261)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |        // Close the swap.
    |        swaps[_swapID].secretKey = _secretKey;
  > |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
    |        _redeemedAt[_swapID] = now;
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |        _swapStates[_swapID] = States.CLOSED;
    |        /* solium-disable-next-line security/no-block-members */
  > |        _redeemedAt[_swapID] = now;
    |
    |        // Update the broker fees to the broker.
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Swap':
    |
    |        // Update the broker fees to the broker.
  > |        _brokerFees[swaps[_swapID].broker] += swaps[_swapID].brokerFee;
    |
    |        // Logs close event
  at /unique_chucks/23/0x517f5e4e7fda6792b338227d4f6eb34c83c5499d.sol(267)