Processing contract: /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol:ERC20Interface
Processing contract: /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol:FletaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FletaToken':
    |// fixed supply
    |// ----------------------------------------------------------------------------
  > |contract FletaToken is ERC20Interface, Owned {
    |	using SafeMath for uint;
    |
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'FletaToken':
    |
    |		balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |		balances[to] = balances[to].add(tokens);
    |		emit Transfer(msg.sender, to, tokens);
    |		return true;
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(159)

[33mWarning[0m for UnrestrictedWrite in contract 'FletaToken':
    |		require(to > address(0));
    |
  > |		balances[from] = balances[from].sub(tokens);
    |		if(from != to && from != msg.sender) {
    |			allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'FletaToken':
    |			allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |		}
  > |		balances[to] = balances[to].add(tokens);
    |		emit Transfer(from, to, tokens);
    |		return true;
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'FletaToken':
    |	function stopTrade() public onlyOwner {
    |		require(_stopTrade != true);
  > |		_stopTrade = true;
    |	}
    |
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'FletaToken':
    |	function startTrade() public onlyOwner {
    |		require(_stopTrade == true);
  > |		_stopTrade = false;
    |	}
    |
  at /unique_chucks/2/0x7788d759f21f53533051a9ae657fa05a1e068fc6.sol(137)