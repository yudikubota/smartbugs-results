Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:Dex
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:IERC20
Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:Ownable
Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:Remote
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol:VeriDex
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'Dex':
    |        uint256 dexWeiBalance = _dexAddress.balance;
    |
  > |        uint256 dexTokenBalance = _remoteToken.balanceOf(_dexAddress);
    |
    |        require(dexWeiBalance >= amountOfWei, "Dex balance must be equal or more than your allowance");
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(397)

[31mViolation[0m for TODAmount in contract 'Dex':
    |     */
    |    function withdrawBalance() public onlyOwner returns (bool success) {
  > |        msg.sender.transfer(_dexAddress.balance);
    |        success = true;
    |    }
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(425)

[33mWarning[0m for TODAmount in contract 'Dex':
    | 
    |        // Send Ether back to user
  > |        msg.sender.transfer(amountOfWei);
    |
    |        emit TokensSold(msg.sender, amountAllowed, amountOfWei);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(406)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Dex':
    | 
    |        // Send Ether back to user
  > |        msg.sender.transfer(amountOfWei);
    |
    |        emit TokensSold(msg.sender, amountAllowed, amountOfWei);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(406)

[31mViolation[0m for UnrestrictedWrite in contract 'Dex':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(236)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |        require(newOwner != address(0),"You can't transfer the ownership to this account");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |    function setRemoteContractAddress (address remoteContractAddress)
    |        external onlyOwner returns (bool success) {
  > |        _remoteContractAddress = remoteContractAddress;        
    |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |        external onlyOwner returns (bool success) {
    |        _remoteContractAddress = remoteContractAddress;        
  > |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
    |    }
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(286)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |    /// @param newBuyPrice Price users can buy from the contract
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner returns (bool success) {
  > |        sellPrice = newSellPrice;
    |        buyPrice = newBuyPrice;
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'Dex':
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner returns (bool success) {
    |        sellPrice = newSellPrice;
  > |        buyPrice = newBuyPrice;
    |
    |        emit TokenPricesSet(sellPrice, buyPrice);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(350)

[31mViolation[0m for UnrestrictedWrite in contract 'Remote':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'Remote':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(236)

[31mViolation[0m for UnrestrictedWrite in contract 'Remote':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'Remote':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'Remote':
    |        require(newOwner != address(0),"You can't transfer the ownership to this account");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'Remote':
    |    function setRemoteContractAddress (address remoteContractAddress)
    |        external onlyOwner returns (bool success) {
  > |        _remoteContractAddress = remoteContractAddress;        
    |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'Remote':
    |        external onlyOwner returns (bool success) {
    |        _remoteContractAddress = remoteContractAddress;        
  > |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
    |    }
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(286)

[31mViolation[0m for RepeatedCall in contract 'VeriDex':
    |        uint256 amountOfTokens = buyTokenExchangeAmount(amountOfWei);
    |        
  > |        uint256 dexTokenBalance = _remoteToken.balanceOf(_dexAddress);
    |        require(dexTokenBalance >= amountOfTokens, "The VeriDex does not have enough tokens for this purchase.");
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(365)

[31mViolation[0m for RepeatedCall in contract 'VeriDex':
    |        uint256 dexWeiBalance = _dexAddress.balance;
    |
  > |        uint256 dexTokenBalance = _remoteToken.balanceOf(_dexAddress);
    |
    |        require(dexWeiBalance >= amountOfWei, "Dex balance must be equal or more than your allowance");
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(397)

[31mViolation[0m for TODAmount in contract 'VeriDex':
    |     */
    |    function withdrawBalance() public onlyOwner returns (bool success) {
  > |        msg.sender.transfer(_dexAddress.balance);
    |        success = true;
    |    }
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(425)

[33mWarning[0m for TODAmount in contract 'VeriDex':
    | 
    |        // Send Ether back to user
  > |        msg.sender.transfer(amountOfWei);
    |
    |        emit TokensSold(msg.sender, amountAllowed, amountOfWei);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(406)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'VeriDex':
    | 
    |        // Send Ether back to user
  > |        msg.sender.transfer(amountOfWei);
    |
    |        emit TokensSold(msg.sender, amountAllowed, amountOfWei);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(406)

[31mViolation[0m for UnrestrictedWrite in contract 'VeriDex':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(236)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |        require(newOwner != address(0),"You can't transfer the ownership to this account");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |    function setRemoteContractAddress (address remoteContractAddress)
    |        external onlyOwner returns (bool success) {
  > |        _remoteContractAddress = remoteContractAddress;        
    |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |        external onlyOwner returns (bool success) {
    |        _remoteContractAddress = remoteContractAddress;        
  > |        _remoteToken = IERC20(_remoteContractAddress);
    |        success = true;
    |    }
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(286)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |    /// @param newBuyPrice Price users can buy from the contract
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner returns (bool success) {
  > |        sellPrice = newSellPrice;
    |        buyPrice = newBuyPrice;
    |
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'VeriDex':
    |    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyOwner returns (bool success) {
    |        sellPrice = newSellPrice;
  > |        buyPrice = newBuyPrice;
    |
    |        emit TokenPricesSet(sellPrice, buyPrice);
  at /unique_contracts/0x6a1dfdbd527c826711de2906bb6641249aae61d2.sol(350)