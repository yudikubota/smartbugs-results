Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:DragoRegistry
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:Inflation
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:Pool
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:ProofOfPerformance
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:ProofOfPerformanceFace
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:ReentrancyGuard
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:RigoToken
Processing contract: /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'ProofOfPerformance':
    |    {
    |        ( , address group) = addressFromIdInternal(_ofPool);
  > |        return Inflation(getMinter()).getInflationFactor(group);
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(466)

[31mViolation[0m for RepeatedCall in contract 'ProofOfPerformance':
    |    {
    |        RigoToken token = RigoToken(RIGOTOKENADDRESS);
  > |        return token.minter();
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(489)

[31mViolation[0m for RepeatedCall in contract 'ProofOfPerformance':
    |    {
    |        DragoRegistry registry = DragoRegistry(dragoRegistry);
  > |        (pool, , , , , group) = registry.fromId(_ofPool);
    |        return (pool, group);
    |    }
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(581)

[31mViolation[0m for RepeatedCall in contract 'ProofOfPerformance':
    |        (address poolAddress, ) = addressFromIdInternal(_ofPool);
    |        Pool pool = Pool(poolAddress);
  > |        thePoolPrice = pool.calcSharePrice();
    |        totalTokens = pool.totalSupply();
    |    }
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(599)

[31mViolation[0m for RepeatedCall in contract 'ProofOfPerformance':
    |        Pool pool = Pool(poolAddress);
    |        thePoolPrice = pool.calcSharePrice();
  > |        totalTokens = pool.totalSupply();
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(600)

[31mViolation[0m for UnrestrictedWrite in contract 'ProofOfPerformance':
    |
    |        // Lock mutex before function call
  > |        locked = true;
    |
    |        // Perform function call
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'ProofOfPerformance':
    |        onlyRigoblockDao
    |    {
  > |        dragoRegistry = _dragoRegistry;
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'ProofOfPerformance':
    |        onlyRigoblockDao
    |    {
  > |        rigoblockDao = _rigoblockDao;
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(281)

[33mWarning[0m for UnrestrictedWrite in contract 'ProofOfPerformance':
    |            "RATIO_BIGGER_THAN_10000"
    |        ); //(from 0 to 10000)
  > |        groups[_ofGroup].rewardRatio = _ratio;
    |    }
    |
  at /unique_chucks/33/0x8cdd0cd56ae24422382c4a6ffef382732f43fe4c.sol(298)