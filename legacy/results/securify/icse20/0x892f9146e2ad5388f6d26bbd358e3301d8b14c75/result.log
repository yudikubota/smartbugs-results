Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:BaRA
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:BaseSecurityToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:CustodianUpgradeable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:IERC20
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:KnowYourCustomer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:LockRequestable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:ServiceDiscovery
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:ServiceRegistry
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:TokenController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:TokenSettings
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:TokenSettingsInterface
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:_BurnAllowed
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:_MintAllowed
Processing contract: /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol:_TradeAllowed
[31mViolation[0m for LockedEther in contract 'BaRA':
    |}
    |
  > |contract BaRA is BaseSecurityToken, CustodianUpgradeable, ServiceDiscovery {
    |    
    |    uint public limit = 400 * 1e6;
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(776)

[31mViolation[0m for UnrestrictedWrite in contract 'BaRA':
    |        require(_contentHash.length > 0, "content hash is required, use SHA-256 when in doubt");
    |        require(documents[_name].name.length == 0, "document must not be existing under the same name");
  > |        documents[_name] = Document(_name, _uri, _contentHash);
    |    }
    |   
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(321)

[31mViolation[0m for UnrestrictedWrite in contract 'BaRA':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'BaRA':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(419)

[31mViolation[0m for UnrestrictedWrite in contract 'BaRA':
    |}
    |
  > |contract BaRA is BaseSecurityToken, CustodianUpgradeable, ServiceDiscovery {
    |    
    |    uint public limit = 400 * 1e6;
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(776)

[33mWarning[0m for UnrestrictedWrite in contract 'BaRA':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'BaRA':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(437)

[31mViolation[0m for LockedEther in contract 'BaseSecurityToken':
    | * @dev see https://eips.ethereum.org/EIPS/eip-1462
    | */
  > |contract BaseSecurityToken is ERC20 {
    |    
    |    struct Document {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(286)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSecurityToken':
    |
    |        _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(140)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSecurityToken':
    |        require(to != address(0), "");
    |
  > |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSecurityToken':
    |
    |        _balances[from] = _balances[from].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    |        emit Transfer(from, to, value);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSecurityToken':
    | * @dev see https://eips.ethereum.org/EIPS/eip-1462
    | */
  > |contract BaseSecurityToken is ERC20 {
    |    
    |    struct Document {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(286)

[31mViolation[0m for UnrestrictedWrite in contract 'BaseSecurityToken':
    |        require(_contentHash.length > 0, "content hash is required, use SHA-256 when in doubt");
    |        require(documents[_name].name.length == 0, "document must not be existing under the same name");
  > |        documents[_name] = Document(_name, _uri, _contentHash);
    |    }
    |   
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(321)

[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |
    |        /// @dev  The map of lock ids to pending custodian changes.
  > |        mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
    |
    |        constructor(address _custodian) public LockRequestable() {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(393)

[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |            * @param  _lockId  The identifier of a pending change request.
    |            */
  > |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
    |                custodian = getCustodianChangeReq(_lockId);
    |
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(434)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(419)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(437)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |        _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(140)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |        require(to != address(0), "");
    |
  > |        _balances[from] = _balances[from].sub(value);
    |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(180)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |        _balances[from] = _balances[from].sub(value);
  > |        _balances[to] = _balances[to].add(value);
    |        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    |        emit Transfer(from, to, value);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(181)

[31mViolation[0m for LockedEther in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(476)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(419)

[31mViolation[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(476)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(437)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |}
    |
  > |contract KnowYourCustomer is CustodianUpgradeable {
    |
    |    enum Status {
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(476)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |    function providerAuthorize(address _provider, string calldata name) external onlyCustodian {
    |        require(providers[_provider] == false, "provider must not exist");
  > |        providers[_provider] = true;
    |        // cc:II. Manage Providers#2;Provider becomes authorized in contract;1;
    |        emit ProviderAuthorized(_provider, name);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(507)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |    function providerRemove(address _provider, string calldata name) external onlyCustodian {
    |        require(providers[_provider] == true, "provider must exist");
  > |        delete providers[_provider];
    |        emit ProviderRemoved(_provider, name);
    |    }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(514)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        Status status = customers[_customer].status;
    |        require(status != Status.passed, "customer must not be approved before");
  > |        customers[_customer].status = Status.passed;
    |        // cc:III. Manage Customers#2;Customer becomes approved in contract;1;
    |        emit CustomerApproved(_customer, msg.sender);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(533)

[33mWarning[0m for UnrestrictedWrite in contract 'KnowYourCustomer':
    |        Status status = customers[_customer].status;
    |        require(status != Status.suspended, "customer must be not suspended");
  > |        customers[_customer].status = Status.suspended;
    |        emit CustomerSuspended(_customer, msg.sender);
    |    }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(548)

[31mViolation[0m for RepeatedCall in contract 'TokenController':
    |
    |    function _kyc() private view returns (KnowYourCustomer) {
  > |        return KnowYourCustomer(services.getService("validators/kyc"));
    |    }
    |}
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(772)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenController':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenController':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(419)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenController':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenController':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(437)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        function generateLockId() internal returns (bytes32 lockId) {
    |                return keccak256(
  > |                abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |                );
    |        }
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(375)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |                lockId = generateLockId();
    |
  > |                custodianChangeReqs[lockId] = CustodianChangeRequest({
    |                        proposedNew: _proposedCustodian
    |                });
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(419)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingBurnAllowedMap[lockId] = PendingBurnAllowed({
    |           burnAllowed: _burnAllowed,
    |           set: true
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(607)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingMintAllowedMap[lockId] = PendingMintAllowed({
    |           mintAllowed: _mintAllowed,
    |           set: true
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(652)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenSettings':
    |       
    |       lockId = generateLockId();
  > |       pendingTradeAllowedMap[lockId] = PendingTradeAllowed({
    |           tradeAllowed: _tradeAllowed,
    |           set: true
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(697)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |            */
    |        function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |                custodian = getCustodianChangeReq(_lockId);
    |
    |                delete custodianChangeReqs[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |                custodian = getCustodianChangeReq(_lockId);
    |
  > |                delete custodianChangeReqs[_lockId];
    |
    |                emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(437)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingBurnAllowed storage value = pendingBurnAllowedMap[_lockId];
    |        require(value.set == true);
  > |        burnAllowed = value.burnAllowed;
    |        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);
    |        delete pendingBurnAllowedMap[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(618)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        burnAllowed = value.burnAllowed;
    |        emit BurnAllowedConfirmed(_lockId, value.burnAllowed);
  > |        delete pendingBurnAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(620)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingMintAllowed storage value = pendingMintAllowedMap[_lockId];
    |        require(value.set == true);
  > |        mintAllowed = value.mintAllowed;
    |        emit MintAllowedConfirmed(_lockId, value.mintAllowed);
    |        delete pendingMintAllowedMap[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(663)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        mintAllowed = value.mintAllowed;
    |        emit MintAllowedConfirmed(_lockId, value.mintAllowed);
  > |        delete pendingMintAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(665)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        PendingTradeAllowed storage value = pendingTradeAllowedMap[_lockId];
    |        require(value.set == true);
  > |        tradeAllowed = value.tradeAllowed;
    |        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);
    |        delete pendingTradeAllowedMap[_lockId];
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(708)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSettings':
    |        tradeAllowed = value.tradeAllowed;
    |        emit TradeAllowedConfirmed(_lockId, value.tradeAllowed);
  > |        delete pendingTradeAllowedMap[_lockId];
    |    }
    |}
  at /unique_chucks/36/0x892f9146e2ad5388f6d26bbd358e3301d8b14c75.sol(710)