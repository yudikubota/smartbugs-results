Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:Avatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:Controller
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:ControllerInterface
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:DAOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:DxController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:GlobalConstraintInterface
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:IERC20
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:Ownable
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnhandledException in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-low-level-calls
  > |        (success, returnValue) = _contract.call(_data);
    |        emit GenericCall(_contract, _data, success);
    |    }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(739)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(750)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(72)

[31mViolation[0m for LockedEther in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1025)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1123)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1129)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  > |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1370)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
  > |            require(nativeToken.owner() == _newController);
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1372)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |            require(nativeToken.owner() == _newController);
    |        }
  > |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1374)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  > |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1375)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
  > |            require(nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1376)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |pragma solidity ^0.5.2;
    |
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |/**
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1025)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |
    |    // Add or change the scheme:
  > |        schemes[_scheme].paramsHash = _paramsHash;
    |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1217)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |    // Add or change the scheme:
    |        schemes[_scheme].paramsHash = _paramsHash;
  > |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
    |        return true;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1218)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1277)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1278)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  > |                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1281)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1287)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1288)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  > |                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1291)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
  > |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1321)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
    |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPre.length--;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1322)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPre.length--;
  > |                delete globalConstraintsRegisterPre[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1325)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
  > |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1335)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
    |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPost.length--;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1336)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPost.length--;
  > |                delete globalConstraintsRegisterPost[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1339)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |        require(newController == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newController = _newController;
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1367)

[33mWarning[0m for UnrestrictedWrite in contract 'Controller':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme);
  > |        delete schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1244)

[31mViolation[0m for LockedEther in contract 'DAOToken':
    | */
    |
  > |contract DAOToken is ERC20, ERC20Burnable, Ownable {
    |
    |    string public name;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(556)

[31mViolation[0m for LockedEther in contract 'DxController':
    |// File: contracts/DxController.sol
    |
  > |contract DxController is Controller {
    |    constructor(Avatar _avatar) public Controller(_avatar) {}
    |}
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1553)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1123)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1129)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  > |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1370)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        require(avatar.owner() == _newController);
    |        if (nativeToken.owner() == address(this)) {
  > |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1371)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
  > |            require(nativeToken.owner() == _newController);
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1372)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |            require(nativeToken.owner() == _newController);
    |        }
  > |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1374)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
  > |            require(nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1376)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |pragma solidity ^0.5.2;
    |
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |/**
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |
    |    // Add or change the scheme:
  > |        schemes[_scheme].paramsHash = _paramsHash;
    |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1217)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |    // Add or change the scheme:
    |        schemes[_scheme].paramsHash = _paramsHash;
  > |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
    |        return true;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1218)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1277)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1278)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  > |                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1281)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1287)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1288)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  > |                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1291)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
  > |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1321)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
    |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPre.length--;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1322)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                }
    |                globalConstraintsPre.length--;
  > |                delete globalConstraintsRegisterPre[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1325)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
  > |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1335)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
    |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPost.length--;
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1336)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                }
    |                globalConstraintsPost.length--;
  > |                delete globalConstraintsRegisterPost[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1339)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |        require(newController == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newController = _newController;
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1367)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |// File: contracts/DxController.sol
    |
  > |contract DxController is Controller {
    |    constructor(Avatar _avatar) public Controller(_avatar) {}
    |}
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1553)

[33mWarning[0m for UnrestrictedWrite in contract 'DxController':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme);
  > |        delete schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(1244)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(504)

[31mViolation[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
  > |            newCheckPoint.fromBlock = uint128(block.number);
    |            newCheckPoint.value = uint128(_value);
    |        } else {
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
    |            newCheckPoint.fromBlock = uint128(block.number);
  > |            newCheckPoint.value = uint128(_value);
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(241)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  > |            oldCheckPoint.value = uint128(_value);
    |        }
    |    }
  at /unique_chucks/24/0xf49f402da062c2fc17c3df8093db4c2138aa3140.sol(244)