Processing contract: /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol:EtomicSwap
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol:IERC20
[33mWarning[0m for LockedEther in contract 'EtomicSwap':
    |}
    |
  > |contract EtomicSwap {
    |    enum PaymentState {
    |        Uninitialized,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(25)

[31mViolation[0m for MissingInputValidation in contract 'EtomicSwap':
    |    }
    |
  > |    mapping (bytes32 => Payment) public payments;
    |
    |    event PaymentSent(bytes32 id);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(39)

[31mViolation[0m for MissingInputValidation in contract 'EtomicSwap':
    |    constructor() public { }
    |
  > |    function ethPayment(
    |        bytes32 _id,
    |        address _receiver,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(47)

[31mViolation[0m for MissingInputValidation in contract 'EtomicSwap':
    |    }
    |
  > |    function erc20Payment(
    |        bytes32 _id,
    |        uint256 _amount,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(72)

[31mViolation[0m for MissingInputValidation in contract 'EtomicSwap':
    |    }
    |
  > |    function receiverSpend(
    |        bytes32 _id,
    |        uint256 _amount,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(101)

[31mViolation[0m for MissingInputValidation in contract 'EtomicSwap':
    |    }
    |
  > |    function senderRefund(
    |        bytes32 _id,
    |        uint256 _amount,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(130)

[33mWarning[0m for TODAmount in contract 'EtomicSwap':
    |        payments[_id].state = PaymentState.ReceivedSpent;
    |        if (_tokenAddress == address(0)) {
  > |            msg.sender.transfer(_amount);
    |        } else {
    |            IERC20 token = IERC20(_tokenAddress);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(121)

[33mWarning[0m for TODAmount in contract 'EtomicSwap':
    |
    |        if (_tokenAddress == address(0)) {
  > |            msg.sender.transfer(_amount);
    |        } else {
    |            IERC20 token = IERC20(_tokenAddress);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(152)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtomicSwap':
    |        payments[_id].state = PaymentState.ReceivedSpent;
    |        if (_tokenAddress == address(0)) {
  > |            msg.sender.transfer(_amount);
    |        } else {
    |            IERC20 token = IERC20(_tokenAddress);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(121)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtomicSwap':
    |
    |        if (_tokenAddress == address(0)) {
  > |            msg.sender.transfer(_amount);
    |        } else {
    |            IERC20 token = IERC20(_tokenAddress);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(152)

[31mViolation[0m for UnrestrictedWrite in contract 'EtomicSwap':
    |            ));
    |
  > |        payments[_id] = Payment(
    |            paymentHash,
    |            _lockTime,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(63)

[31mViolation[0m for UnrestrictedWrite in contract 'EtomicSwap':
    |            ));
    |
  > |        payments[_id] = Payment(
    |            paymentHash,
    |            _lockTime,
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'EtomicSwap':
    |
    |        require(paymentHash == payments[_id].paymentHash && now < payments[_id].lockTime);
  > |        payments[_id].state = PaymentState.ReceivedSpent;
    |        if (_tokenAddress == address(0)) {
    |            msg.sender.transfer(_amount);
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(119)

[31mViolation[0m for UnrestrictedWrite in contract 'EtomicSwap':
    |        require(paymentHash == payments[_id].paymentHash && now >= payments[_id].lockTime);
    |
  > |        payments[_id].state = PaymentState.SenderRefunded;
    |
    |        if (_tokenAddress == address(0)) {
  at /unique_chucks/8/0x8500afc0bc5214728082163326c2ff0c73f4a871.sol(149)