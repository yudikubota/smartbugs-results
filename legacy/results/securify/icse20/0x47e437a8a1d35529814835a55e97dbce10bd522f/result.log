Processing contract: /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol:Oracle
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Oracle':
    | * Kryptium Oracle Smart Contract.  
    | */
  > |contract Oracle is SafeMath, Owned {
    |
    |    enum EventOutputType { stringarray, numeric }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    | * Kryptium Oracle Smart Contract.  
    | */
  > |contract Oracle is SafeMath, Owned {
    |
    |    enum EventOutputType { stringarray, numeric }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        subcategories[id].name = name;
    |        subcategories[id].country = country;
  > |        subcategories[id].hidden = hidden;
    |        emit OracleSubcategoryAdded(id);
    |    }  
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(222)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].id = id;
    |        events[id].title = title;
  > |        events[id].startDateTime = startDateTime;
    |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(249)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].title = title;
    |        events[id].startDateTime = startDateTime;
  > |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(250)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].startDateTime = startDateTime;
    |        events[id].endDateTime = endDateTime;
  > |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(251)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
  > |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
    |        events[id].freezeDateTime = freezeDateTime;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(252)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
  > |        events[id].closeDateTime = closeDateTime;
    |        events[id].freezeDateTime = freezeDateTime;
    |        eventOutputs[id][0].title = outputTitle;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(253)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
  > |        events[id].freezeDateTime = freezeDateTime;
    |        eventOutputs[id][0].title = outputTitle;
    |        eventOutputs[id][0].possibleResultsCount = _possibleResults.length;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(254)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].freezeDateTime = freezeDateTime;
    |        eventOutputs[id][0].title = outputTitle;
  > |        eventOutputs[id][0].possibleResultsCount = _possibleResults.length;
    |        eventOutputs[id][0].eventOutputType = eventOutputType;
    |        eventOutputs[id][0].decimals = decimals;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(256)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][0].title = outputTitle;
    |        eventOutputs[id][0].possibleResultsCount = _possibleResults.length;
  > |        eventOutputs[id][0].eventOutputType = eventOutputType;
    |        eventOutputs[id][0].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(257)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][0].possibleResultsCount = _possibleResults.length;
    |        eventOutputs[id][0].eventOutputType = eventOutputType;
  > |        eventOutputs[id][0].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
    |            eventOutputPossibleResults[id][0][j] = _possibleResults[j];            
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(258)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][0].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
  > |            eventOutputPossibleResults[id][0][j] = _possibleResults[j];            
    |        }
    |        if (events[id].totalAvailableOutputs < 1) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(260)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        }
    |        if (events[id].totalAvailableOutputs < 1) {
  > |            events[id].totalAvailableOutputs = 1;
    |        }      
    |        emit UpcomingEventUpdated(id,closeDateTime);
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(263)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(events[id].closeDateTime >= now,"Close time should be greater than now");
    |        eventOutputs[id][events[id].totalAvailableOutputs].title = outputTitle;
  > |        eventOutputs[id][events[id].totalAvailableOutputs].possibleResultsCount = _possibleResults.length;
    |        eventOutputs[id][events[id].totalAvailableOutputs].eventOutputType = eventOutputType;
    |        eventOutputs[id][events[id].totalAvailableOutputs].decimals = decimals;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(274)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][events[id].totalAvailableOutputs].title = outputTitle;
    |        eventOutputs[id][events[id].totalAvailableOutputs].possibleResultsCount = _possibleResults.length;
  > |        eventOutputs[id][events[id].totalAvailableOutputs].eventOutputType = eventOutputType;
    |        eventOutputs[id][events[id].totalAvailableOutputs].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(275)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][events[id].totalAvailableOutputs].possibleResultsCount = _possibleResults.length;
    |        eventOutputs[id][events[id].totalAvailableOutputs].eventOutputType = eventOutputType;
  > |        eventOutputs[id][events[id].totalAvailableOutputs].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
    |            eventOutputPossibleResults[id][events[id].totalAvailableOutputs][j] = _possibleResults[j];
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(276)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventOutputs[id][events[id].totalAvailableOutputs].decimals = decimals;
    |        for (uint j = 0; j<_possibleResults.length; j++) {
  > |            eventOutputPossibleResults[id][events[id].totalAvailableOutputs][j] = _possibleResults[j];
    |        }  
    |        events[id].totalAvailableOutputs += 1;             
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(278)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |            eventOutputPossibleResults[id][events[id].totalAvailableOutputs][j] = _possibleResults[j];
    |        }  
  > |        events[id].totalAvailableOutputs += 1;             
    |        emit UpcomingEventUpdated(id,events[id].closeDateTime);
    |    }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        uint freezeDateTime = endDateTime + oracleData.closeEventOutcomeTime * 1 minutes;
    |        events[id].title = title;
  > |        events[id].startDateTime = startDateTime;
    |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(291)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].title = title;
    |        events[id].startDateTime = startDateTime;
  > |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(292)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].startDateTime = startDateTime;
    |        events[id].endDateTime = endDateTime;
  > |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(293)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].endDateTime = endDateTime;
    |        events[id].subcategoryId = subcategoryId;
  > |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
    |        events[id].freezeDateTime = freezeDateTime;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(294)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].subcategoryId = subcategoryId;
    |        events[id].categoryId = categoryId;
  > |        events[id].closeDateTime = closeDateTime;
    |        events[id].freezeDateTime = freezeDateTime;
    |        if (closeDateTime < now) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(295)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].categoryId = categoryId;
    |        events[id].closeDateTime = closeDateTime;
  > |        events[id].freezeDateTime = freezeDateTime;
    |        if (closeDateTime < now) {
    |            events[id].isCancelled = true;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(296)

[31mViolation[0m for UnrestrictedWrite in contract 'Oracle':
    |        events[id].freezeDateTime = freezeDateTime;
    |        if (closeDateTime < now) {
  > |            events[id].isCancelled = true;
    |        }  
    |        emit UpcomingEventUpdated(id,closeDateTime); 
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |    function transferOwnership(address newOwner) onlyOwner public {
    |        require(newOwner != address(0x0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    | * Kryptium Oracle Smart Contract.  
    | */
  > |contract Oracle is SafeMath, Owned {
    |
    |    enum EventOutputType { stringarray, numeric }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |     */
    |    function setTimeConstants(uint closeBeforeStartTime, uint closeEventOutcomeTime) onlyOwner public {
  > |        oracleData.closeBeforeStartTime = closeBeforeStartTime;
    |        oracleData.closeEventOutcomeTime = closeEventOutcomeTime;
    |        emit OraclePropertiesUpdated();
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(204)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |    function setTimeConstants(uint closeBeforeStartTime, uint closeEventOutcomeTime) onlyOwner public {
    |        oracleData.closeBeforeStartTime = closeBeforeStartTime;
  > |        oracleData.closeEventOutcomeTime = closeEventOutcomeTime;
    |        emit OraclePropertiesUpdated();
    |    }      
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(205)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |    function setSubcategory(uint id, uint categoryId, string memory name,string memory country,bool hidden) onlyOwner public {
    |        if (id==0) {
  > |            subcategoryNextId += 1;
    |            id = subcategoryNextId;
    |        }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(215)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |            id = subcategoryNextId;
    |        }
  > |        subcategories[id].id = id;
    |        subcategories[id].categoryId = categoryId;
    |        subcategories[id].name = name;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        }
    |        subcategories[id].id = id;
  > |        subcategories[id].categoryId = categoryId;
    |        subcategories[id].name = name;
    |        subcategories[id].country = country;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |     */
    |    function hideSubcategory(uint id) onlyOwner public {
  > |        subcategories[id].hidden = true;
    |        emit OracleSubcategoryUpdated(id);
    |    }   
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |    function addUpcomingEvent(uint id, string memory title, uint startDateTime, uint endDateTime, uint subcategoryId, uint categoryId, string memory outputTitle, EventOutputType eventOutputType, bytes32[] memory _possibleResults,uint decimals) onlyOwner public {        
    |        if (id==0) {
  > |            eventNextId += 1;
    |            id = eventNextId;
    |        }
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        uint freezeDateTime = endDateTime + oracleData.closeEventOutcomeTime * 1 minutes;
    |        require(closeDateTime >= now,"Close time should be greater than now");
  > |        events[id].id = id;
    |        events[id].title = title;
    |        events[id].startDateTime = startDateTime;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(247)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |    function cancelUpcomingEvent(uint id) onlyOwner public {
    |        require(events[id].freezeDateTime >= now,"Freeze time should be greater than now");
  > |        events[id].isCancelled = true;
    |        emit UpcomingEventUpdated(id,events[id].closeDateTime); 
    |    }  
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(308)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(!events[eventId].isCancelled,"Cancelled Event");
    |        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.numeric,"Required numeric Event type");
  > |        eventNumericOutcomes[eventId][outputId].outcome1 = outcome1;
    |        eventNumericOutcomes[eventId][outputId].outcome2 = outcome2;
    |        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(320)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.numeric,"Required numeric Event type");
    |        eventNumericOutcomes[eventId][outputId].outcome1 = outcome1;
  > |        eventNumericOutcomes[eventId][outputId].outcome2 = outcome2;
    |        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;
    |        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(321)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventNumericOutcomes[eventId][outputId].outcome1 = outcome1;
    |        eventNumericOutcomes[eventId][outputId].outcome2 = outcome2;
  > |        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;
    |        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;
    |        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventNumericOutcomes[eventId][outputId].outcome2 = outcome2;
    |        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;
  > |        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;
    |        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;
    |        eventNumericOutcomes[eventId][outputId].outcome6 = outcome6;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(323)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventNumericOutcomes[eventId][outputId].outcome3 = outcome3;
    |        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;
  > |        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;
    |        eventNumericOutcomes[eventId][outputId].outcome6 = outcome6;
    |        eventOutputs[eventId][outputId].isSet = true;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventNumericOutcomes[eventId][outputId].outcome4 = outcome4;
    |        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;
  > |        eventNumericOutcomes[eventId][outputId].outcome6 = outcome6;
    |        eventOutputs[eventId][outputId].isSet = true;
    |        eventOutputs[eventId][outputId].announcement = announcement;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(325)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        eventNumericOutcomes[eventId][outputId].outcome5 = outcome5;
    |        eventNumericOutcomes[eventId][outputId].outcome6 = outcome6;
  > |        eventOutputs[eventId][outputId].isSet = true;
    |        eventOutputs[eventId][outputId].announcement = announcement;
    |        if (setEventAnnouncement) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(!events[eventId].isCancelled,"Cancelled Event");
    |        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.stringarray,"Required array of options Event type");
  > |        eventOutputs[eventId][outputId].isSet = true;
    |        eventOutcome[eventId][outputId] = _eventOutcome;
    |        eventOutputs[eventId][outputId].announcement = announcement;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(eventOutputs[eventId][outputId].eventOutputType == EventOutputType.stringarray,"Required array of options Event type");
    |        eventOutputs[eventId][outputId].isSet = true;
  > |        eventOutcome[eventId][outputId] = _eventOutcome;
    |        eventOutputs[eventId][outputId].announcement = announcement;
    |        if (setEventAnnouncement) {
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |        require(!events[id].isCancelled,"Cancelled Event");
    |        if (newFreezeDateTime > now) {
  > |            events[id].freezeDateTime = newFreezeDateTime;
    |        } else {
    |            events[id].freezeDateTime = now;
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(357)

[33mWarning[0m for UnrestrictedWrite in contract 'Oracle':
    |            events[id].freezeDateTime = newFreezeDateTime;
    |        } else {
  > |            events[id].freezeDateTime = now;
    |        }
    |        emit UpcomingEventUpdated(id,events[id].closeDateTime);
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function transferOwnership(address newOwner) onlyOwner public {
    |        require(newOwner != address(0x0));
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x47e437a8a1d35529814835a55e97dbce10bd522f.sol(70)