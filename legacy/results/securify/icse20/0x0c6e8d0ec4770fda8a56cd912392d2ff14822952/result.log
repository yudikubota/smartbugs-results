Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:BytesUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:DnsUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:IERC20
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:Marketplace
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:Ownable
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:Pausable
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:PauserRole
Processing contract: /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'Marketplace':
    |    // Check if offer is active, sender has enough balance and approved the transform
    |    require(token.balanceOf(msg.sender) >= offer.price, ERR_PURCHASE_TOKEN_BALANCE);
  > |    require(token.allowance(msg.sender, address(this)) >= offer.price, ERR_PURCHASE_TOKEN_APPROVE);
    |
    |    // Transfer the token from sender to service owner
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(578)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |pragma solidity >=0.5.0 <0.6.0;
    |
  > |interface IERC20 {
    |    function transfer(address to, uint256 value) external returns (bool);
    |
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |}
    |
  > |contract Marketplace is Ownable, Pausable {
    |  using BytesUtils for bytes;
    |  using DnsUtils for bytes;
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    bytes32 sidHash = keccak256(sid);
    |    require(!_isServiceExist(sidHash), ERR_SERVICE_EXIST);
  > |    services[sidHash].owner = msg.sender;
    |    services[sidHash].sid = sid;
    |    services[sidHash].createTime = now;
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(476)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    services[sidHash].owner = msg.sender;
    |    services[sidHash].sid = sid;
  > |    services[sidHash].createTime = now;
    |    servicesList.push(sidHash);
    |    emit ServiceCreated(sid, msg.sender);
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(478)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    services[sidHash].sid = sid;
    |    services[sidHash].createTime = now;
  > |    servicesList.push(sidHash);
    |    emit ServiceCreated(sid, msg.sender);
    |  }
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(479)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    version.manifest = manifest;
    |    version.manifestProtocol = manifestProtocol;
  > |    version.createTime = now;
    |    services[sidHash].versionsList.push(versionHash);
    |    versionHashToService[versionHash] = sidHash;
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    version.manifestProtocol = manifestProtocol;
    |    version.createTime = now;
  > |    services[sidHash].versionsList.push(versionHash);
    |    versionHashToService[versionHash] = sidHash;
    |    emit ServiceVersionCreated(sid, versionHash, manifest, manifestProtocol);
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(512)

[33mWarning[0m for UnrestrictedWrite in contract 'Marketplace':
    |    version.createTime = now;
    |    services[sidHash].versionsList.push(versionHash);
  > |    versionHashToService[versionHash] = sidHash;
    |    emit ServiceVersionCreated(sid, versionHash, manifest, manifestProtocol);
    |  }
  at /unique_chucks/15/0x0c6e8d0ec4770fda8a56cd912392d2ff14822952.sol(513)