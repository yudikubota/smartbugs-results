Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:EasyToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:IERC20
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:OraclizeI
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:Ownable
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:solcChecker
Processing contract: /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'EasyToken':
    |			
    |			// return funds
  > |			buyer.transfer(bValue);
    |			delete buyQueueValue[i];
    |			delete buyQueueSender[i];
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1734)

[31mViolation[0m for RepeatedCall in contract 'EasyToken':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(430)

[33mWarning[0m for RepeatedCall in contract 'EasyToken':
    |
    |    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource);
    |        if (price > 1 ether + tx.gasprice * 200000) {
    |            return 0; // Unexpectedly high price
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(510)

[33mWarning[0m for RepeatedCall in contract 'EasyToken':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(_timestamp, _datasource, _arg);
    |    }
    |
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(514)

[31mViolation[0m for TODAmount in contract 'EasyToken':
    |			
    |			// return funds
  > |			buyer.transfer(bValue);
    |			delete buyQueueValue[i];
    |			delete buyQueueSender[i];
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1734)

[33mWarning[0m for TODAmount in contract 'EasyToken':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(_timestamp, _datasource, _arg);
    |    }
    |
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(514)

[31mViolation[0m for TODReceiver in contract 'EasyToken':
    |			
    |			// return funds
  > |			buyer.transfer(bValue);
    |			delete buyQueueValue[i];
    |			delete buyQueueSender[i];
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1734)

[33mWarning[0m for TODReceiver in contract 'EasyToken':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(_timestamp, _datasource, _arg);
    |    }
    |
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(514)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EasyToken':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query.value(price)(_timestamp, _datasource, _arg);
    |    }
    |
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(514)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EasyToken':
    |			
    |			// return funds
  > |			buyer.transfer(bValue);
    |			delete buyQueueValue[i];
    |			delete buyQueueSender[i];
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1734)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(430)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(455)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(460)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(465)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(470)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(474)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(478)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |}
    |
  > |contract EasyToken is ERC20, Ownable, usingOraclize {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1502)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		require( approvedAccounts[msg.sender] ); // only verified users can take part in the ICO
    |		
  > |		buyLast += 1;
    |		buyQueueValue[buyLast] = msg.value;
    |		buyQueueSender[buyLast] = msg.sender;
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1594)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		
    |		buyLast += 1;
  > |		buyQueueValue[buyLast] = msg.value;
    |		buyQueueSender[buyLast] = msg.sender;
    |		
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1595)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		buyLast += 1;
    |		buyQueueValue[buyLast] = msg.value;
  > |		buyQueueSender[buyLast] = msg.sender;
    |		
    |		// Exchange rate is up to date
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1596)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		}
    |		if( !queryRunning ) { // Need to update exchange rate first
  > |			queryRunning = true;
    |			oraclize_query(60, "URL", "json(https://api.pro.coinbase.com/products/ETH-EUR/ticker).price");
    |		}
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1604)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		
    |        // Calculating rate
  > |		ethEaxRate = parseInt(result) * 1000;
    |		int dot = indexOf(result, ".");
    |		if( dot == -1 ) { // dot not found. Bad query!
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1656)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		int dot = indexOf(result, ".");
    |		if( dot == -1 ) { // dot not found. Bad query!
  > |			queryRunning = false;
    |			return;
    |		}
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1659)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		uint udot = uint(dot);
    |		string memory cents = substring(result, udot+1, udot+4); // end is not included
  > |		ethEaxRate = (ethEaxRate + parseInt(cents)) / 3; // 0.003 Euro pro Token
    |		emit EthRateUpdate(result, ethEaxRate);
    |		
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1664)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		emit EthRateUpdate(result, ethEaxRate);
    |		
  > |		last_rate_update = now;
    |		queryRunning = false;
    |		executeBuyQueue(); 
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1667)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		
    |		last_rate_update = now;
  > |		queryRunning = false;
    |		executeBuyQueue(); 
    |    }
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1668)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |			// return funds
    |			buyer.transfer(bValue);
  > |			delete buyQueueValue[i];
    |			delete buyQueueSender[i];
    |		}
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1735)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |			buyer.transfer(bValue);
    |			delete buyQueueValue[i];
  > |			delete buyQueueSender[i];
    |		}
    |		
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1736)

[33mWarning[0m for UnrestrictedWrite in contract 'EasyToken':
    |		}
    |		
  > |		buyLast  = 0;
    |	}
    |}
  at /unique_chucks/20/0xd7ce0742fd67a171d1dff89cf89760465c1c9a15.sol(1739)