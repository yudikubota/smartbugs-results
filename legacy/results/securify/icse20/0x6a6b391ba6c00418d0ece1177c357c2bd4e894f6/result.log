Processing contract: /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol:IMultiSigManager
Processing contract: /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol:Magi
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol:Managed
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		require(currentTime - lastOperationTime >= operationCoolDown);
    |		_;
  > |		lastOperationTime = currentTime;
    |	}
    |
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |	returns (bool) {
    |		require(roleManager.passedContract(newManagerAddr));
  > |		roleManagerAddress = newManagerAddr;
    |		roleManager = IMultiSigManager(roleManagerAddress);
    |		require(roleManager.moderator() != address(0));
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		require(roleManager.passedContract(newManagerAddr));
    |		roleManagerAddress = newManagerAddr;
  > |		roleManager = IMultiSigManager(roleManagerAddress);
    |		require(roleManager.moderator() != address(0));
    |		emit UpdateRoleManager(newManagerAddr);
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |	function updateOperator() public inUpdateWindow() returns (bool) {	
    |		address updater = msg.sender;	
  > |		operator = roleManager.provideAddress(updater, 0);
    |		emit UpdateOperator(updater, operator);	
    |		return true;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |	{
    |		require(!started && timeInSecond <= getNowTimestamp());
  > |		lastPrice.timeInSecond = timeInSecond;
    |		lastPrice.priceInWei = priceInWei;
    |		lastPrice.source = msg.sender;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(185)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		require(!started && timeInSecond <= getNowTimestamp());
    |		lastPrice.timeInSecond = timeInSecond;
  > |		lastPrice.priceInWei = priceInWei;
    |		lastPrice.source = msg.sender;
    |		started = true;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		lastPrice.timeInSecond = timeInSecond;
    |		lastPrice.priceInWei = priceInWei;
  > |		lastPrice.source = msg.sender;
    |		started = true;
    |		emit AcceptPrice(priceInWei, timeInSecond, msg.sender);
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		lastPrice.priceInWei = priceInWei;
    |		lastPrice.source = msg.sender;
  > |		started = true;
    |		emit AcceptPrice(priceInWei, timeInSecond, msg.sender);
    |		return true;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |			} else {
    |				// wait for the second price
  > |				firstPrice = Price(priceInWei, timeInSecond, msg.sender);
    |				emit CommitPrice(priceInWei, timeInSecond, msg.sender, 0);
    |				numOfPrices++;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(212)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |				firstPrice = Price(priceInWei, timeInSecond, msg.sender);
    |				emit CommitPrice(priceInWei, timeInSecond, msg.sender, 0);
  > |				numOfPrices++;
    |			}
    |		} else if (numOfPrices == 1) {
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |					} else {
    |						// wait for the third price
  > |						secondPrice = Price(priceInWei, timeInSecond, msg.sender);
    |						emit CommitPrice(priceInWei, timeInSecond, msg.sender, 1);
    |						numOfPrices++;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |						secondPrice = Price(priceInWei, timeInSecond, msg.sender);
    |						emit CommitPrice(priceInWei, timeInSecond, msg.sender, 1);
  > |						numOfPrices++;
    |					} 
    |				}
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(236)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |     */
    |	function acceptPrice(uint priceInWei, uint timeInSecond, address source) internal {
  > |		lastPrice.priceInWei = priceInWei;
    |		lastPrice.timeInSecond = timeInSecond;
    |		lastPrice.source = source;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(275)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |	function acceptPrice(uint priceInWei, uint timeInSecond, address source) internal {
    |		lastPrice.priceInWei = priceInWei;
  > |		lastPrice.timeInSecond = timeInSecond;
    |		lastPrice.source = source;
    |		numOfPrices = 0;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(276)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		lastPrice.priceInWei = priceInWei;
    |		lastPrice.timeInSecond = timeInSecond;
  > |		lastPrice.source = source;
    |		numOfPrices = 0;
    |		emit AcceptPrice(priceInWei, timeInSecond, source);
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		lastPrice.timeInSecond = timeInSecond;
    |		lastPrice.source = source;
  > |		numOfPrices = 0;
    |		emit AcceptPrice(priceInWei, timeInSecond, source);
    |	}
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		address newAddr = roleManager.provideAddress(updater, 1);
    |		if(index == 0) 
  > |			priceFeed1 = newAddr;
    |		else if (index == 1)
    |			priceFeed2 = newAddr;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |			priceFeed1 = newAddr;
    |		else if (index == 1)
  > |			priceFeed2 = newAddr;
    |		else // index == 2
    |			priceFeed3 = newAddr;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |			priceFeed2 = newAddr;
    |		else // index == 2
  > |			priceFeed3 = newAddr;
    |		
    |		emit UpdatePriceFeed(updater, newAddr);
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(306)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		if (idx == 0) {
    |			oldValue = priceTolInBP;
  > |			priceTolInBP = newValue;
    |		} else if (idx == 1) {
    |			oldValue = priceFeedTolInBP;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(323)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		} else if (idx == 1) {
    |			oldValue = priceFeedTolInBP;
  > |			priceFeedTolInBP = newValue;
    |		} else if (idx == 2) {
    |			oldValue = priceFeedTimeTol;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		} else if (idx == 2) {
    |			oldValue = priceFeedTimeTol;
  > |			priceFeedTimeTol = newValue;
    |		} else if (idx == 3) {
    |			oldValue = priceUpdateCoolDown;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'Magi':
    |		} else if (idx == 3) {
    |			oldValue = priceUpdateCoolDown;
  > |			priceUpdateCoolDown = newValue;
    |		} else {
    |			revert();
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(332)

[31mViolation[0m for MissingInputValidation in contract 'Managed':
    |	}
    |
  > |	function updateRoleManager(address newManagerAddr) 
    |		inUpdateWindow() 
    |		public 
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(82)

[31mViolation[0m for UnrestrictedWrite in contract 'Managed':
    |		require(currentTime - lastOperationTime >= operationCoolDown);
    |		_;
  > |		lastOperationTime = currentTime;
    |	}
    |
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(68)

[31mViolation[0m for UnrestrictedWrite in contract 'Managed':
    |	returns (bool) {
    |		require(roleManager.passedContract(newManagerAddr));
  > |		roleManagerAddress = newManagerAddr;
    |		roleManager = IMultiSigManager(roleManagerAddress);
    |		require(roleManager.moderator() != address(0));
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(87)

[31mViolation[0m for UnrestrictedWrite in contract 'Managed':
    |		require(roleManager.passedContract(newManagerAddr));
    |		roleManagerAddress = newManagerAddr;
  > |		roleManager = IMultiSigManager(roleManagerAddress);
    |		require(roleManager.moderator() != address(0));
    |		emit UpdateRoleManager(newManagerAddr);
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(88)

[31mViolation[0m for UnrestrictedWrite in contract 'Managed':
    |	function updateOperator() public inUpdateWindow() returns (bool) {	
    |		address updater = msg.sender;	
  > |		operator = roleManager.provideAddress(updater, 0);
    |		emit UpdateOperator(updater, operator);	
    |		return true;
  at /unique_chucks/3/0x6a6b391ba6c00418d0ece1177c357c2bd4e894f6.sol(96)