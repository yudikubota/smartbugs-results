Processing contract: /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol:BAToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol:BatLimitAsk
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol:SafeMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol:StandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol:Token
[31mViolation[0m for MissingInputValidation in contract 'BAToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |      if (balances[msg.sender] >= _value && _value > 0) {
    |        balances[msg.sender] -= _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(81)

[31mViolation[0m for MissingInputValidation in contract 'BAToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |        balances[_to] += _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(92)

[31mViolation[0m for MissingInputValidation in contract 'BAToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(104)

[31mViolation[0m for MissingInputValidation in contract 'BAToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(108)

[31mViolation[0m for MissingInputValidation in contract 'BAToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(114)

[31mViolation[0m for TODAmount in contract 'BAToken':
    |      // move to operational
    |      isFinalized = true;
  > |      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Brave International
    |    }
    |
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(191)

[33mWarning[0m for TODAmount in contract 'BAToken':
    |      uint256 ethVal = batVal / tokenExchangeRate;     // should be safe; previous throws covers edges
    |      LogRefund(msg.sender, ethVal);               // log it 
  > |      if (!msg.sender.send(ethVal)) throw;       // if you're using a contract; make sure it works with .send gas limits
    |    }
    |
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(206)

[31mViolation[0m for UnrestrictedWrite in contract 'BAToken':
    |      if (tokenCreationCap < checkedSupply) throw;  // odd fractions won't be found
    |
  > |      totalSupply = checkedSupply;
    |      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here
    |      CreateBAT(msg.sender, tokens);  // logs token creation
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(178)

[33mWarning[0m for UnrestrictedWrite in contract 'BAToken':
    |      if (balances[msg.sender] >= _value && _value > 0) {
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value;
    |        Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'BAToken':
    |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |        balances[_to] += _value;
    |        balances[_from] -= _value;
    |        allowed[_from][msg.sender] -= _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'BAToken':
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |        balances[_to] += _value;
  > |        balances[_from] -= _value;
    |        allowed[_from][msg.sender] -= _value;
    |        Transfer(_from, _to, _value);
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'BAToken':
    |      if(block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;
    |      // move to operational
  > |      isFinalized = true;
    |      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Brave International
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(190)

[31mViolation[0m for MissingInputValidation in contract 'BatLimitAsk':
    |    modifier onlyOwner(){ if(msg.sender == owner) _; }
    |    
  > |    function changeRate(uint _BATsPerEth) onlyOwner{
    |        pausedUntil = now + 10; //no new bids for 5 minutes (protects taker)
    |        BATsPerEth = _BATsPerEth;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(19)

[31mViolation[0m for MissingInputValidation in contract 'BatLimitAsk':
    |        if(!msg.sender.send(this.balance)){ throw; }
    |    }
  > |    function withdrawBAT(uint _amount) onlyOwner{
    |        if(!bat.transfer(msg.sender, _amount)){ throw; }
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(27)

[31mViolation[0m for TODAmount in contract 'BatLimitAsk':
    |
    |    function withdrawETH() onlyOwner{
  > |        if(!msg.sender.send(this.balance)){ throw; }
    |    }
    |    function withdrawBAT(uint _amount) onlyOwner{
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(25)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |contract StandardToken is Token {
    |
  > |    function transfer(address _to, uint256 _value) returns (bool success) {
    |      if (balances[msg.sender] >= _value && _value > 0) {
    |        balances[msg.sender] -= _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(81)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |        balances[_to] += _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(92)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function balanceOf(address _owner) constant returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(104)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function approve(address _spender, uint256 _value) returns (bool success) {
    |        allowed[msg.sender][_spender] = _value;
    |        Approval(msg.sender, _spender, _value);
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(108)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |
  > |    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |      if (balances[msg.sender] >= _value && _value > 0) {
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value;
    |        Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
  > |        balances[_to] += _value;
    |        balances[_from] -= _value;
    |        allowed[_from][msg.sender] -= _value;
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
    |        balances[_to] += _value;
  > |        balances[_from] -= _value;
    |        allowed[_from][msg.sender] -= _value;
    |        Transfer(_from, _to, _value);
  at /unique_chucks/24/0xfbc23099a8bd0ce4227920dc559fcfe9c7fa3ce3.sol(95)