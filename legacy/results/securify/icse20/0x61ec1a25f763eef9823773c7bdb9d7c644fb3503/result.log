Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:Freeze
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:IERC20
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol:SingleToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ERC20 {
    |  
    |    using SafeMath for uint256;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(336)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ERC20 {
    |  
    |    using SafeMath for uint256;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(336)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |    function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |        require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |        gofindAllowedAddresses.push(_newAddress);
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(400)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |    function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |        lockup[groups].holders = _holders;
  > |        lockup[groups].until   = _until;
    |        
    |        groups++;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(505)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |        lockup[groups].until   = _until;
    |        
  > |        groups++;
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(507)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(50)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ERC20 {
    |  
    |    using SafeMath for uint256;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(336)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |    */
    |    function changeEndOfIco (uint256 _date) public onlyOwner returns (bool) {
  > |        endOfIco = _date;
    |    }
    |    
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(395)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(42)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(50)

[31mViolation[0m for LockedEther in contract 'PausableToken':
    | * @notice Inherit from it at ERC20, to make freezing functionality works
    |*/
  > |contract PausableToken is Freeze {
    |
    |    function transfer(address _to, uint256 _value) public lockupEnded(msg.sender, _to, _value) returns (bool) {
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(518)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |        require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |        gofindAllowedAddresses.push(_newAddress);
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(400)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |        lockup[groups].holders = _holders;
  > |        lockup[groups].until   = _until;
    |        
    |        groups++;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(505)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        lockup[groups].until   = _until;
    |        
  > |        groups++;
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(507)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    | * @notice Inherit from it at ERC20, to make freezing functionality works
    |*/
  > |contract PausableToken is Freeze {
    |
    |    function transfer(address _to, uint256 _value) public lockupEnded(msg.sender, _to, _value) returns (bool) {
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(518)

[31mViolation[0m for LockedEther in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |    using SafeMath for uint256;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    function addGofindAllowedAddress (address _newAddress) public onlyOwner returns (bool) {
    |        require(indexOf(_newAddress, gofindAllowedAddresses) == 0, "that address already exists");
  > |        gofindAllowedAddresses.push(_newAddress);
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(400)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |        lockup[groups].holders = _holders;
  > |        lockup[groups].until   = _until;
    |        
    |        groups++;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(505)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |        lockup[groups].until   = _until;
    |        
  > |        groups++;
    |        return true;
    |    }
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(507)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |    using SafeMath for uint256;
  at /unique_chucks/8/0x61ec1a25f763eef9823773c7bdb9d7c644fb3503.sol(546)