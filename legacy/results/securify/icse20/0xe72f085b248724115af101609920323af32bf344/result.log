Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:IERC20
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:MBMLockBuilder
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:MBMTimelock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:Ownable
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:TokenRecover
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol:TokenTimelock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'MBMLockBuilder':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(79)

[33mWarning[0m for UnrestrictedWrite in contract 'MBMLockBuilder':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(97)

[31mViolation[0m for LockedEther in contract 'MBMTimelock':
    | *  beneficiary to extract the tokens after a given release time
    | */
  > |contract MBMTimelock is TokenTimelock {
    |
    |    // A text string to add a note
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(350)

[31mViolation[0m for MissingInputValidation in contract 'TokenRecover':
    |     * @param tokenAmount Number of tokens to be sent
    |     */
  > |    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {
    |        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    |    }
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(115)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenRecover':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecover':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(79)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecover':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(97)

[31mViolation[0m for LockedEther in contract 'TokenTimelock':
    | * beneficiary to extract the tokens after a given release time
    | */
  > |contract TokenTimelock {
    |    using SafeERC20 for IERC20;
    |
  at /unique_chucks/24/0xe72f085b248724115af101609920323af32bf344.sol(288)