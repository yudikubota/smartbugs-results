Processing contract: /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol:Asset
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol:ERC20Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol:ERC20TokenInterface
Processing contract: /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol:token
[31mViolation[0m for LockedEther in contract 'Asset':
    | * @dev Initial supply creation
    | */
  > |contract Asset is ERC20Token {
    |
    |    string public name = 'Cycle';
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(135)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        require(_to != address(0)); //If you dont want that people destroy token
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        require(_to != address(0)); //If you dont want that people destroy token
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        require(msg.sender == owner);
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |        require(_to != address(0)); //If you dont want that people destroy token
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |        require(_to != address(0)); //If you dont want that people destroy token
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_from, _to, _value);
    |        return true;
  at /unique_chucks/33/0x8c1e0e4bfeecd856bebbe7e0a6740df849bbb9a8.sol(97)