Processing contract: /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol:Bitway
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol:ERC20
Processing contract: /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Bitway':
    |}
    |
  > |contract Bitway is ERC20, Owned {
    |    using SafeMath for uint;
    |
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(61)

[31mViolation[0m for UnrestrictedWrite in contract 'Bitway':
    |
    |    function transferFrom(address from, address to, uint tokens) public validDestination(to) returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'Bitway':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'Bitway':
    |        require(!completed);
    |        balances[msg.sender] = balances[msg.sender].add(tokens);
  > |        _totalSupply = _totalSupply.add(tokens);
    |        emit Transfer(address(0), msg.sender, tokens);
    |        if (_totalSupply >= _maxSupply)
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Bitway':
    |        emit Transfer(address(0), msg.sender, tokens);
    |        if (_totalSupply >= _maxSupply)
  > |        completed = true;
    |    }
    |
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'Bitway':
    |    function transfer(address to, uint tokens) public validDestination(to) returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'Bitway':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(126)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xac9a100c4630ce43a36fcad161462faff933933d.sol(57)