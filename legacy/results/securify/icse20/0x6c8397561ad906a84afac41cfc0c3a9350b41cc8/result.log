Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20Detailed
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20MultiDividend
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:IERC20
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:MinterRole
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:MultiTokenDividend
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:Ownable
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:Pausable
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:PauserRole
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:ReitBZ
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:TokenWhitelist
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol:TrustedRole
[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(380)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(622)

[31mViolation[0m for DAOConstantGas in contract 'MultiTokenDividend':
    |        if (account.tokenAddress == address(0)) {
    |            // ETH disbursement
  > |            bool success = beneficiary.send(amount);
    |            if (!success) {
    |                account.amount = amount;
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(956)

[31mViolation[0m for RepeatedCall in contract 'MultiTokenDividend':
    |        Account storage account = accounts[beneficiary];
    |        uint256 newDividendPoints = tokenDividends[account.tokenAddress].totalDividendPoints.sub(account.lastTotalDividendPoints);
  > |        return _sharesToken.balanceOf(beneficiary).mul(newDividendPoints).div(X);
    |    }
    |
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(878)

[31mViolation[0m for RepeatedCall in contract 'MultiTokenDividend':
    |            else {
    |                // ERC20
  > |                tokenAmount = IERC20(token).balanceOf(address(this));
    |            }
    |
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(911)

[31mViolation[0m for TODAmount in contract 'MultiTokenDividend':
    |    function collect(address tokenAddress) public onlyOwner {
    |        if (tokenAddress == address(0)) {
  > |            address(uint160(owner())).transfer(address(this).balance);
    |        }
    |        else {
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(851)

[33mWarning[0m for TODAmount in contract 'MultiTokenDividend':
    |        if (account.tokenAddress == address(0)) {
    |            // ETH disbursement
  > |            bool success = beneficiary.send(amount);
    |            if (!success) {
    |                account.amount = amount;
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(956)

[31mViolation[0m for TODReceiver in contract 'MultiTokenDividend':
    |    function collect(address tokenAddress) public onlyOwner {
    |        if (tokenAddress == address(0)) {
  > |            address(uint160(owner())).transfer(address(this).balance);
    |        }
    |        else {
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(851)

[31mViolation[0m for LockedEther in contract 'ReitBZ':
    |}
    |
  > |contract ReitBZ is Ownable, ERC20MultiDividend, ERC20Burnable, ERC20Mintable, ERC20Pausable, ERC20Detailed {
    |
    |    TokenWhitelist public whitelist;
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(1023)

[31mViolation[0m for RepeatedCall in contract 'ReitBZ':
    |    }
    |    function _transfer(address from, address to, uint256 value) internal {
  > |        _dividend._registerTransfer(from, to, value);
    |        super._transfer(from, to, value);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(1018)

[31mViolation[0m for RepeatedCall in contract 'ReitBZ':
    |        require(whitelist.checkWhitelisted(msg.sender), "Transaction sender is not whitelisted.");
    |        require(whitelist.checkWhitelisted(from), "Token sender is not whitelisted.");
  > |        require(whitelist.checkWhitelisted(to), "Receiver is not whitelisted.");
    |        return super.transferFrom(from, to, value);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(1090)

[31mViolation[0m for RepeatedCall in contract 'ReitBZ':
    |    function increaseAllowance(address spender, uint addedValue) public returns (bool success) {
    |        require(whitelist.checkWhitelisted(msg.sender), "Sender is not whitelisted.");
  > |        require(whitelist.checkWhitelisted(spender), "Spender is not whitelisted.");
    |        return super.increaseAllowance(spender, addedValue);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(1102)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.add(value);
    |        _balances[account] = _balances[account].add(value);
    |        emit Transfer(address(0), account, value);
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(366)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(380)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(495)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(513)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(622)

[33mWarning[0m for UnrestrictedWrite in contract 'ReitBZ':
    |
    |    function setDividendContract(MultiTokenDividend dividend) external onlyOwner {
  > |        _dividend = dividend;
    |    }
    |
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(1003)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(495)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(513)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function enableWallet(address _wallet) public onlyOwner {
    |        require(_wallet != address(0), "Invalid wallet");
  > |        whitelist[_wallet] = true;
    |        emit Whitelisted(_wallet);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(710)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function disableWallet(address _wallet) public onlyOwner {
    |        require(_wallet != address(0), "Invalid wallet");
  > |        whitelist[_wallet] = false;
    |        emit Dewhitelisted(_wallet);
    |    }
  at /unique_chucks/18/0x6c8397561ad906a84afac41cfc0c3a9350b41cc8.sol(723)