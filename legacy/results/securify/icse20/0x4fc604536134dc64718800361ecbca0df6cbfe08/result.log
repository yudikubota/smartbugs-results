Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:FixidityLib
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:ICErc20
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:IERC20
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:Initializable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:Pool
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:SortitionSumTreeFactory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol:UniformRandomNumber
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FixidityLib':
    | * overflow.
    | */
  > |library FixidityLib {
    |
    |    /**
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(502)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |     * account.
    |     */
  > |    function initialize(address sender) public initializer {
    |        _owner = sender;
    |        emit OwnershipTransferred(address(0), _owner);
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(198)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |    bool wasInitializing = initializing;
  > |    initializing = true;
    |    initialized = true;
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(159)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    bool wasInitializing = initializing;
    |    initializing = true;
  > |    initialized = true;
    |
    |    _;
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    _;
    |
  > |    initializing = wasInitializing;
    |  }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(164)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |     */
    |    function initialize(address sender) public initializer {
  > |        _owner = sender;
    |        emit OwnershipTransferred(address(0), _owner);
    |    }
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(199)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(233)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(251)

[31mViolation[0m for RepeatedCall in contract 'Pool':
    |    }
    |
  > |    uint256 balance = moneyMarket.balanceOfUnderlying(address(this));
    |
    |    if (balance > 0) {
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1112)

[31mViolation[0m for RepeatedCall in contract 'Pool':
    |
    |    if (balance > 0) {
  > |      require(moneyMarket.redeemUnderlying(balance) == 0, "could not redeem from compound");
    |      finalAmount = FixidityLib.newFixed(int256(balance));
    |    }
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1115)

[31mViolation[0m for RepeatedCall in contract 'Pool':
    |    uint256 fee = feeAmount();
    |    if (fee > 0) {
  > |      require(token.transfer(owner(), fee), "could not transfer winnings");
    |    }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1140)

[31mViolation[0m for RepeatedCall in contract 'Pool':
    |   */
    |  function netWinnings() public view returns (int256) {
  > |    return FixidityLib.fromFixed(netWinningsFixedPoint24());
    |  }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1207)

[31mViolation[0m for RepeatedCall in contract 'Pool':
    |   */
    |  function feeAmount() public view returns (uint256) {
  > |    return uint256(FixidityLib.fromFixed(feeAmountFixedPoint24()));
    |  }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1232)

[33mWarning[0m for RepeatedCall in contract 'Pool':
    |    int256 winningTotal = entry.amount;
    |    if (state == State.COMPLETE && _addr == winnerAddress()) {
  > |      winningTotal = FixidityLib.add(winningTotal, netWinningsFixedPoint24());
    |    }
    |    return FixidityLib.fromFixed(winningTotal);
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1175)

[33mWarning[0m for RepeatedCall in contract 'Pool':
    |   */
    |  function feeAmountFixedPoint24() internal view returns (int256) {
  > |    return FixidityLib.multiply(grossWinningsFixedPoint24(), feeFraction);
    |  }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(1240)

[33mWarning[0m for UnrestrictedWrite in contract 'Pool':
    |
    |    bool wasInitializing = initializing;
  > |    initializing = true;
    |    initialized = true;
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(159)

[33mWarning[0m for UnrestrictedWrite in contract 'Pool':
    |    bool wasInitializing = initializing;
    |    initializing = true;
  > |    initialized = true;
    |
    |    _;
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(160)

[33mWarning[0m for UnrestrictedWrite in contract 'Pool':
    |    _;
    |
  > |    initializing = wasInitializing;
    |  }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'Pool':
    |     */
    |    function initialize(address sender) public initializer {
  > |        _owner = sender;
    |        emit OwnershipTransferred(address(0), _owner);
    |    }
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(199)

[31mViolation[0m for LockedEther in contract 'SortitionSumTreeFactory':
    | *  @dev A factory of trees that keep track of staked values for sortition.
    | */
  > |library SortitionSumTreeFactory {
    |    /* Structs */
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(271)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |pragma solidity 0.5.0;
    |
  > |library UniformRandomNumber {
    |  /// @author Brendan Asselstine
    |  /// @notice Select a random number without modulo bias using a random seed and upper bound
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    | *  @dev A factory of trees that keep track of staked values for sortition.
    | */
  > |library SortitionSumTreeFactory {
    |    /* Structs */
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(271)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |        require(tree.K == 0, "Tree already exists.");
    |        require(_K > 1, "K must be greater than one.");
  > |        tree.K = _K;
    |        tree.stack.length = 0;
    |        tree.nodes.length = 0;
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(301)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |        tree.stack.length = 0;
    |        tree.nodes.length = 0;
  > |        tree.nodes.push(0);
    |    }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(304)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                    // Get the index and append the value.
    |                    treeIndex = tree.nodes.length;
  > |                    tree.nodes.push(_value);
    |
    |                    // Potentially append a new node and make the parent a sum node.
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(327)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                        bytes32 parentID = tree.nodeIndexesToIDs[parentIndex];
    |                        uint newIndex = treeIndex + 1;
  > |                        tree.nodes.push(tree.nodes[parentIndex]);
    |                        delete tree.nodeIndexesToIDs[parentIndex];
    |                        tree.IDsToNodeIndexes[parentID] = newIndex;
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(334)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                        uint newIndex = treeIndex + 1;
    |                        tree.nodes.push(tree.nodes[parentIndex]);
  > |                        delete tree.nodeIndexesToIDs[parentIndex];
    |                        tree.IDsToNodeIndexes[parentID] = newIndex;
    |                        tree.nodeIndexesToIDs[newIndex] = parentID;
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(335)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                        tree.nodes.push(tree.nodes[parentIndex]);
    |                        delete tree.nodeIndexesToIDs[parentIndex];
  > |                        tree.IDsToNodeIndexes[parentID] = newIndex;
    |                        tree.nodeIndexesToIDs[newIndex] = parentID;
    |                    }
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(336)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                        delete tree.nodeIndexesToIDs[parentIndex];
    |                        tree.IDsToNodeIndexes[parentID] = newIndex;
  > |                        tree.nodeIndexesToIDs[newIndex] = parentID;
    |                    }
    |                } else { // Some vacant spot.
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(337)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                    treeIndex = tree.stack[tree.stack.length - 1];
    |                    tree.stack.length--;
  > |                    tree.nodes[treeIndex] = _value;
    |                }
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(343)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |
    |                // Add label.
  > |                tree.IDsToNodeIndexes[_ID] = treeIndex;
    |                tree.nodeIndexesToIDs[treeIndex] = _ID;
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(347)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                // Add label.
    |                tree.IDsToNodeIndexes[_ID] = treeIndex;
  > |                tree.nodeIndexesToIDs[treeIndex] = _ID;
    |
    |                updateParents(self, _key, treeIndex, true, _value);
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(348)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                // Remember value and set to 0.
    |                uint value = tree.nodes[treeIndex];
  > |                tree.nodes[treeIndex] = 0;
    |
    |                // Push to stack.
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(357)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |
    |                // Push to stack.
  > |                tree.stack.push(treeIndex);
    |
    |                // Clear label.
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(360)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |
    |                // Clear label.
  > |                delete tree.IDsToNodeIndexes[_ID];
    |                delete tree.nodeIndexesToIDs[treeIndex];
    |
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(363)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                // Clear label.
    |                delete tree.IDsToNodeIndexes[_ID];
  > |                delete tree.nodeIndexesToIDs[treeIndex];
    |
    |                updateParents(self, _key, treeIndex, false, value);
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(364)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |                bool plusOrMinus = tree.nodes[treeIndex] <= _value;
    |                uint plusOrMinusValue = plusOrMinus ? _value - tree.nodes[treeIndex] : tree.nodes[treeIndex] - _value;
  > |                tree.nodes[treeIndex] = _value;
    |
    |                updateParents(self, _key, treeIndex, plusOrMinus, plusOrMinusValue);
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(371)

[31mViolation[0m for UnrestrictedWrite in contract 'SortitionSumTreeFactory':
    |        while (parentIndex != 0) {
    |            parentIndex = (parentIndex - 1) / tree.K;
  > |            tree.nodes[parentIndex] = _plusOrMinus ? tree.nodes[parentIndex] + _value : tree.nodes[parentIndex] - _value;
    |        }
    |    }
  at /unique_chucks/8/0x4fc604536134dc64718800361ecbca0df6cbfe08.sol(480)