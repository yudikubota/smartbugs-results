Processing contract: /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol:Toqqn
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol:ToqqnInterface
[31mViolation[0m for LockedEther in contract 'Toqqn':
    |// token transfers
    |// ----------------------------------------------------------------------------
  > |contract Toqqn is ToqqnInterface {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Toqqn':
    |    function transfer(address to, uint256 tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'Toqqn':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'Toqqn':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/5/0x6613876533bc69b9dd628611a4d5dd2ccd8c7638.sol(146)