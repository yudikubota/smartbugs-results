Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:ERC20
Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:ERC20Basic
Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:LukaToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:SafeMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(101)

[31mViolation[0m for LockedEther in contract 'LukaToken':
    |}
    |
  > |contract LukaToken is StandardToken(){
    |  string public constant name = "LukaToken"; // solium-disable-line uppercase
    |  string public constant symbol = "LUKA"; // solium-disable-line uppercase
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(212)

[33mWarning[0m for UnrestrictedWrite in contract 'LukaToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'LukaToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(140)

[33mWarning[0m for UnrestrictedWrite in contract 'LukaToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(101)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(140)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/46/0x3833cb00b3acbe75f7beab31ea88a88d384c2687.sol(141)