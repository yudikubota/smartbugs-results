Processing contract: /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol:SC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'SC':
    |
    |    function sendEther(uint amount, address payable to) public onlyOwner {
  > |        to.transfer(amount);
    |    }
    |
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(137)

[31mViolation[0m for UnrestrictedWrite in contract 'SC':
    |        }
    |
  > |        tokenSupply = ts;
    |        balances[owner] = safeAdd(balances[owner], toMint);
    |        emit Mint(toMint);
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(90)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |    function burn(uint amount) public onlyOwner {
    |        if (balances[owner] < amount) revert();
  > |        balances[owner] = safeSub(balances[owner], amount);
    |        tokenSupply = safeSub(tokenSupply, amount);
    |        emit Burn(amount);
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(61)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |        if (balances[owner] < amount) revert();
    |        balances[owner] = safeSub(balances[owner], amount);
  > |        tokenSupply = safeSub(tokenSupply, amount);
    |        emit Burn(amount);
    |    }
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(62)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |
    |        tokenSupply = ts;
  > |        balances[owner] = safeAdd(balances[owner], toMint);
    |        emit Mint(toMint);
    |
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |        if (to == address(0)) revert();
    |        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |
    |    function transferFrom(address from, address to, uint tokens) public notPaused returns (bool success) {
  > |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
    |        balances[to] = safeAdd(balances[to], tokens);
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |
    |    function pause() public notPaused onlyOwner {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'SC':
    |    function unPause() public onlyOwner {
    |        if (paused == false) revert();
  > |        paused = false;
    |        emit UnPause();
    |    }
  at /unique_contracts/0xc224dfe42a5332a497334fadb8fed7e7aa4bdf13.sol(147)