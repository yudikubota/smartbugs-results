Processing contract: /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol:ERC20Interface
Processing contract: /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol:EthereumChain
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'EthereumChain':
    |}
    |
  > |contract EthereumChain is ERC20Interface {
    |    using SafeMath for uint256;
    |    string public symbol;
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(34)

[31mViolation[0m for UnrestrictedWrite in contract 'EthereumChain':
    |        }
    |        balances[msg.sender] = balances[msg.sender].sub(value);
  > |        balances[to] = balances[to].add(value);
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(116)

[31mViolation[0m for UnrestrictedWrite in contract 'EthereumChain':
    |            revert();
    |        }
  > |        balances[from] = balances[from].sub(value);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);
    |        balances[to] = balances[to].add(value);
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(143)

[31mViolation[0m for UnrestrictedWrite in contract 'EthereumChain':
    |        balances[from] = balances[from].sub(value);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);
  > |        balances[to] = balances[to].add(value);
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(145)

[31mViolation[0m for UnrestrictedWrite in contract 'EthereumChain':
    |		}
    |        balances[msg.sender] = balances[msg.sender].sub(value);
  > |        _totalSupply = _totalSupply.sub(value);
    |        emit Burn(msg.sender, value);
    |        return true;
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'EthereumChain':
    |
    |    function activeMode() public onlyOwner {
  > |        activeStatus = true;
    |        emit Active(msg.sender);
    |    }
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(84)

[33mWarning[0m for UnrestrictedWrite in contract 'EthereumChain':
    |
    |    function resetMode() public onlyOwner {
  > |        activeStatus = false;
    |        emit Reset(msg.sender);
    |    }
  at /unique_contracts/0x0a68ec61ef82932698198081bf3a0fdaa2817f13.sol(89)