Processing contract: /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol:ERC223Handler
Processing contract: /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol:ICOStickers
Processing contract: /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol:ICOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'ICOToken':
    |        if (_amount >= stash){
    |            beneficiaryWithdrawAmount[msg.sender] = beneficiaryPayoutPerShare * beneficiaryShares[msg.sender];
  > |            msg.sender.transfer(stash);
    |        }else{
    |            if (beneficiaryWithdrawAmount[msg.sender] == MAX_UINT256){
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(102)

[33mWarning[0m for TODAmount in contract 'ICOToken':
    |        if (msgValue != msg.value){
    |            // Finally return any extra ETH sent.
  > |            msg.sender.transfer(msg.value - msgValue); 
    |        }
    |    }
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(165)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ICOToken':
    |        if (_amount >= stash){
    |            beneficiaryWithdrawAmount[msg.sender] = beneficiaryPayoutPerShare * beneficiaryShares[msg.sender];
  > |            msg.sender.transfer(stash);
    |        }else{
    |            if (beneficiaryWithdrawAmount[msg.sender] == MAX_UINT256){
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(102)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ICOToken':
    |                beneficiaryWithdrawAmount[msg.sender] += _amount;
    |            }
  > |            msg.sender.transfer(_amount);
    |        }
    |    }
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(109)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ICOToken':
    |        if (msgValue != msg.value){
    |            // Finally return any extra ETH sent.
  > |            msg.sender.transfer(msg.value - msgValue); 
    |        }
    |    }
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'ICOToken':
    |        if (icoFunding == 0){
    |            require(address(this).balance >= fundingCap || block.timestamp >= IcoEndTime, "ICO hasn't ended");
  > |            icoFunding = address(this).balance;
    |        }
    |        require(beneficiaryWithdrawAmount[msg.sender] > 0, "You're not a beneficiary");
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'ICOToken':
    |        tokensToGive += bonusTokens;
    |        balanceOf[msg.sender] += tokensToGive;
  > |        totalSupply += tokensToGive;
    |        
    |        if (address(stickers) != address(0)){
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'ICOToken':
    |        emit Transfer(address(this), msg.sender, tokensToGive);
    |        
  > |        beneficiaryPayoutPerShare = thisBalance / beneficiaryTotalShares;
    |        etherSpent[msg.sender] += msgValue;
    |        if (msgValue != msg.value){
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'ICOToken':
    |        // Throwing an exception undos all changes. Otherwise changing the balance now would be a shitshow
    |        balanceOf[_from] = balanceOf[_from].sub(_value);
  > |        balanceOf[_to] = balanceOf[_to].add(_value);
    |        
    |        if(_careAboutHumanity && isContract(_to)) {
  at /unique_contracts/0x236149288602c07b84387d0d75784d73f133142b.sol(229)