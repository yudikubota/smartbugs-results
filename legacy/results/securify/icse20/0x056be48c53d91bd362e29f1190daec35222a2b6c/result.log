Processing contract: /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol:ERC20Vanilla
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol:IRC20Vanilla
[31mViolation[0m for LockedEther in contract 'ERC20Vanilla':
    |}
    |
  > |contract ERC20Vanilla is IRC20Vanilla {
    |
    |    uint256 constant private MAX_UINT256 = 2**256 - 1;
  at /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol(68)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Vanilla':
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value;
    |        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars
    |        return true;
  at /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol(95)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Vanilla':
    |        uint256 allowance = allowed[_from][msg.sender];
    |        require(balances[_from] >= _value && allowance >= _value);
  > |        balances[_to] += _value;
    |        balances[_from] -= _value;
    |        if (allowance < MAX_UINT256) {
  at /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol(103)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Vanilla':
    |        require(balances[_from] >= _value && allowance >= _value);
    |        balances[_to] += _value;
  > |        balances[_from] -= _value;
    |        if (allowance < MAX_UINT256) {
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/34/0x056be48c53d91bd362e29f1190daec35222a2b6c.sol(104)