Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:Avatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:Controller
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:ControllerCreator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:ControllerInterface
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:DAOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:DaoCreator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:GlobalConstraintInterface
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:IERC20
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:Ownable
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:UController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:UniversalScheme
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol:UniversalSchemeInterface
[33mWarning[0m for TODAmount in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(773)

[33mWarning[0m for TODReceiver in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(773)

[33mWarning[0m for UnhandledException in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(773)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(773)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(784)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(73)

[31mViolation[0m for LockedEther in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1714)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1817)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1823)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  > |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2064)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        require(avatar.owner() == _newController);
    |        if (nativeToken.owner() == address(this)) {
  > |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2065)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
  > |            require(nativeToken.owner() == _newController);
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2066)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |            require(nativeToken.owner() == _newController);
    |        }
  > |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2068)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
  > |            require(nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2070)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1714)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |
    |    // Add or change the scheme:
  > |        schemes[_scheme].paramsHash = _paramsHash;
    |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1911)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |    // Add or change the scheme:
    |        schemes[_scheme].paramsHash = _paramsHash;
  > |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
    |        return true;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1912)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1971)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1972)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  > |                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1975)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1981)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1982)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  > |                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1985)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
  > |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2015)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
    |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPre.length--;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2016)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPre.length--;
  > |                delete globalConstraintsRegisterPre[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2019)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
  > |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2029)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
    |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPost.length--;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2030)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPost.length--;
  > |                delete globalConstraintsRegisterPost[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2033)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |        require(newController == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newController = _newController;
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2061)

[33mWarning[0m for UnrestrictedWrite in contract 'Controller':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme);
  > |        delete schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1938)

[31mViolation[0m for MissingInputValidation in contract 'ControllerCreator':
    |contract ControllerCreator {
    |
  > |    function create(Avatar _avatar) public returns(address) {
    |        Controller controller = new Controller(_avatar);
    |        controller.registerScheme(msg.sender, bytes32(0), bytes4(0x0000001f), address(_avatar));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2275)

[31mViolation[0m for LockedEther in contract 'DAOToken':
    | */
    |
  > |contract DAOToken is ERC20, ERC20Burnable, Ownable {
    |
    |    string public name;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(578)

[33mWarning[0m for DAO in contract 'DaoCreator':
    |        } else {
    |            controller = _uController;
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2468)

[33mWarning[0m for DAO in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[33mWarning[0m for DAO in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[33mWarning[0m for DAO in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[31mViolation[0m for MissingInputValidation in contract 'DaoCreator':
    |contract DaoCreator {
    |
  > |    mapping(address=>address) public locks;
    |
    |    event NewOrg (address _avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2290)

[31mViolation[0m for MissingInputValidation in contract 'DaoCreator':
    |      * @return bool true or false
    |      */
  > |    function addFounders (
    |        Avatar _avatar,
    |        address[] calldata _founders,
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2312)

[31mViolation[0m for MissingInputValidation in contract 'DaoCreator':
    |    * @return The address of the avatar of the controller
    |    */
  > |    function forgeOrg (
    |        string calldata _orgName,
    |        string calldata _tokenName,
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2355)

[31mViolation[0m for MissingInputValidation in contract 'DaoCreator':
    |      * @param _metaData dao meta data hash
    |      */
  > |    function setSchemes (
    |        Avatar _avatar,
    |        address[] calldata _schemes,
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2388)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            if (_foundersTokenAmount[i] > 0) {
    |                ControllerInterface(
  > |                _avatar.owner()).mintTokens(_foundersTokenAmount[i], _founders[i], address(_avatar));
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2330)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            if (_foundersReputationAmount[i] > 0) {
    |                ControllerInterface(
  > |                _avatar.owner()).mintReputation(_foundersReputationAmount[i], _founders[i], address(_avatar));
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2334)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            require(_founders[i] != address(0));
    |            if (_foundersTokenAmount[i] > 0) {
  > |                nativeToken.mint(_founders[i], _foundersTokenAmount[i]);
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2452)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  > |                nativeReputation.mint(_founders[i], _foundersReputationAmount[i]);
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2455)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |        if (UController(0) == _uController) {
    |            controller = ControllerInterface(controllerCreator.create(avatar));
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2462)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2464)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |        } else {
    |            controller = _uController;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2465)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[31mViolation[0m for RepeatedCall in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |        // Create Controller:
    |        if (UController(0) == _uController) {
  > |            controller = ControllerInterface(controllerCreator.create(avatar));
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2461)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |        if (UController(0) == _uController) {
    |            controller = ControllerInterface(controllerCreator.create(avatar));
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2462)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2464)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |        } else {
    |            controller = _uController;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2465)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |        } else {
    |            controller = _uController;
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2468)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[33mWarning[0m for RepeatedCall in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            require(_founders[i] != address(0));
    |            if (_foundersTokenAmount[i] > 0) {
  > |                nativeToken.mint(_founders[i], _foundersTokenAmount[i]);
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2452)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  > |                nativeReputation.mint(_founders[i], _foundersReputationAmount[i]);
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2455)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |        // Create Controller:
    |        if (UController(0) == _uController) {
  > |            controller = ControllerInterface(controllerCreator.create(avatar));
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2461)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |        if (UController(0) == _uController) {
    |            controller = ControllerInterface(controllerCreator.create(avatar));
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2462)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2464)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |        } else {
    |            controller = _uController;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2465)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |        } else {
    |            controller = _uController;
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2468)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[33mWarning[0m for TODAmount in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            require(_founders[i] != address(0));
    |            if (_foundersTokenAmount[i] > 0) {
  > |                nativeToken.mint(_founders[i], _foundersTokenAmount[i]);
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2452)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  > |                nativeReputation.mint(_founders[i], _foundersReputationAmount[i]);
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2455)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |        // Create Controller:
    |        if (UController(0) == _uController) {
  > |            controller = ControllerInterface(controllerCreator.create(avatar));
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2461)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |        if (UController(0) == _uController) {
    |            controller = ControllerInterface(controllerCreator.create(avatar));
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2462)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2464)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |        } else {
    |            controller = _uController;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2465)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |        } else {
    |            controller = _uController;
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2468)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[33mWarning[0m for TODReceiver in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            require(_founders[i] != address(0));
    |            if (_foundersTokenAmount[i] > 0) {
  > |                nativeToken.mint(_founders[i], _foundersTokenAmount[i]);
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2452)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            }
    |            if (_foundersReputationAmount[i] > 0) {
  > |                nativeReputation.mint(_founders[i], _foundersReputationAmount[i]);
    |            }
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2455)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |        // Create Controller:
    |        if (UController(0) == _uController) {
  > |            controller = ControllerInterface(controllerCreator.create(avatar));
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2461)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |        if (UController(0) == _uController) {
    |            controller = ControllerInterface(controllerCreator.create(avatar));
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2462)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2464)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |        } else {
    |            controller = _uController;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2465)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |        } else {
    |            controller = _uController;
  > |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2468)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            avatar.transferOwnership(address(controller));
    |            // Transfer ownership:
  > |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2470)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            // Transfer ownership:
    |            nativeToken.transferOwnership(address(controller));
  > |            nativeReputation.transferOwnership(address(controller));
    |            _uController.newOrganization(avatar);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2471)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DaoCreator':
    |            nativeToken.transferOwnership(address(controller));
    |            nativeReputation.transferOwnership(address(controller));
  > |            _uController.newOrganization(avatar);
    |        }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2472)

[31mViolation[0m for UnrestrictedWrite in contract 'DaoCreator':
    |        controller.unregisterScheme(address(this), address(_avatar));
    |        // Remove lock:
  > |        delete locks[address(_avatar)];
    |        emit InitialSchemesSet(address(_avatar));
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2409)

[31mViolation[0m for UnrestrictedWrite in contract 'DaoCreator':
    |        }
    |
  > |        locks[address(avatar)] = msg.sender;
    |
    |        emit NewOrg (address(avatar));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2475)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(517)

[31mViolation[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(55)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
  > |            newCheckPoint.fromBlock = uint128(block.number);
    |            newCheckPoint.value = uint128(_value);
    |        } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(245)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
    |            newCheckPoint.fromBlock = uint128(block.number);
  > |            newCheckPoint.value = uint128(_value);
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  > |            oldCheckPoint.value = uint128(_value);
    |        }
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(249)

[31mViolation[0m for LockedEther in contract 'UController':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract UController is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1123)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1254)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1260)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    {
    |        emit MintReputation(msg.sender, _to, _amount, _avatar);
  > |        return organizations[_avatar].nativeReputation.mint(_to, _amount);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1279)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    {
    |        emit BurnReputation(msg.sender, _from, _amount, _avatar);
  > |        return organizations[_avatar].nativeReputation.burn(_from, _amount);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1295)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    {
    |        emit MintTokens(msg.sender, _beneficiary, _amount, _avatar);
  > |        return organizations[_avatar].nativeToken.mint(_beneficiary, _amount);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1312)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        _avatar.transferOwnership(_newController);
    |        require(_avatar.owner() == _newController);
  > |        if (organizations[address(_avatar)].nativeToken.owner() == address(this)) {
    |            organizations[address(_avatar)].nativeToken.transferOwnership(_newController);
    |            require(organizations[address(_avatar)].nativeToken.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1465)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        require(_avatar.owner() == _newController);
    |        if (organizations[address(_avatar)].nativeToken.owner() == address(this)) {
  > |            organizations[address(_avatar)].nativeToken.transferOwnership(_newController);
    |            require(organizations[address(_avatar)].nativeToken.owner() == _newController);
    |        }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1466)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        if (organizations[address(_avatar)].nativeToken.owner() == address(this)) {
    |            organizations[address(_avatar)].nativeToken.transferOwnership(_newController);
  > |            require(organizations[address(_avatar)].nativeToken.owner() == _newController);
    |        }
    |        if (organizations[address(_avatar)].nativeReputation.owner() == address(this)) {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1467)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |            require(organizations[address(_avatar)].nativeToken.owner() == _newController);
    |        }
  > |        if (organizations[address(_avatar)].nativeReputation.owner() == address(this)) {
    |            organizations[address(_avatar)].nativeReputation.transferOwnership(_newController);
    |            require(organizations[address(_avatar)].nativeReputation.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1469)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |        if (organizations[address(_avatar)].nativeReputation.owner() == address(this)) {
    |            organizations[address(_avatar)].nativeReputation.transferOwnership(_newController);
  > |            require(organizations[address(_avatar)].nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), _newController, address(_avatar));
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1471)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    returns (bool, bytes memory)
    |    {
  > |        return _avatar.genericCall(_contract, _data, _value);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1492)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    returns(bool)
    |    {
  > |        return _avatar.sendEther(_amountInWei, _to);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1508)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    returns(bool)
    |    {
  > |        return _avatar.externalTokenTransfer(_externalToken, _to, _value);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1525)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    returns(bool)
    |    {
  > |        return _avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1550)

[31mViolation[0m for RepeatedCall in contract 'UController':
    |    returns(bool)
    |    {
  > |        return _avatar.externalTokenApproval(_externalToken, _spender, _value);
    |    }
    |
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1567)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(2)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract UController is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1123)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |    {
    |        require(!actors[address(_avatar)]);
  > |        actors[address(_avatar)] = true;
    |        require(_avatar.owner() == address(this));
    |        DAOToken nativeToken = _avatar.nativeToken();
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1198)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |        //To guaranty uniqueness for the reputation systems.
    |        require(!actors[address(nativeReputation)]);
  > |        actors[address(nativeReputation)] = true;
    |        //To guaranty uniqueness for the nativeToken.
    |        require(!actors[address(nativeToken)]);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1206)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |        //To guaranty uniqueness for the nativeToken.
    |        require(!actors[address(nativeToken)]);
  > |        actors[address(nativeToken)] = true;
    |        organizations[address(_avatar)].nativeToken = nativeToken;
    |        organizations[address(_avatar)].nativeReputation = nativeReputation;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1209)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |        require(!actors[address(nativeToken)]);
    |        actors[address(nativeToken)] = true;
  > |        organizations[address(_avatar)].nativeToken = nativeToken;
    |        organizations[address(_avatar)].nativeReputation = nativeReputation;
    |        organizations[address(_avatar)].schemes[msg.sender] =
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1210)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |        actors[address(nativeToken)] = true;
    |        organizations[address(_avatar)].nativeToken = nativeToken;
  > |        organizations[address(_avatar)].nativeReputation = nativeReputation;
    |        organizations[address(_avatar)].schemes[msg.sender] =
    |        Scheme({paramsHash: bytes32(0), permissions: bytes4(0x0000001f)});
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1211)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!organization.globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                organization.globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                organization.globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, organization.globalConstraintsPre.length-1);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1403)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            if (!organization.globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                organization.globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                organization.globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, organization.globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1404)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |                GlobalConstraintRegister(true, organization.globalConstraintsPre.length-1);
    |            }else {
  > |                organization
    |                .globalConstraintsPre[organization.globalConstraintsRegisterPre[_globalConstraint].index]
    |                .params = _params;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1407)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!organization.globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                organization.globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                organization.globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, organization.globalConstraintsPost.length-1);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1416)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            if (!organization.globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                organization.globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                organization.globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, organization.globalConstraintsPost.length-1);
    |            } else {
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1417)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |                GlobalConstraintRegister(true, organization.globalConstraintsPost.length-1);
    |            } else {
  > |                organization
    |                .globalConstraintsPost[organization.globalConstraintsRegisterPost[_globalConstraint].index]
    |                .params = _params;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1420)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |        require(newControllers[address(_avatar)] == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newControllers[address(_avatar)] = _newController;
    |        _avatar.transferOwnership(_newController);
    |        require(_avatar.owner() == _newController);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1462)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            if (globalConstraintRegister.index < globalConstraints.length-1) {
    |                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];
  > |                globalConstraints[globalConstraintRegister.index] = globalConstraint;
    |                organizations[_avatar].globalConstraintsRegisterPre[globalConstraint.gcAddress].index =
    |                globalConstraintRegister.index;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1655)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];
    |                globalConstraints[globalConstraintRegister.index] = globalConstraint;
  > |                organizations[_avatar].globalConstraintsRegisterPre[globalConstraint.gcAddress].index =
    |                globalConstraintRegister.index;
    |            }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1656)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            }
    |            globalConstraints.length--;
  > |            delete organizations[_avatar].globalConstraintsRegisterPre[_globalConstraint];
    |            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, true, _avatar);
    |            return true;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1660)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            if (globalConstraintRegister.index < globalConstraints.length-1) {
    |                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];
  > |                globalConstraints[globalConstraintRegister.index] = globalConstraint;
    |                organizations[_avatar].globalConstraintsRegisterPost[globalConstraint.gcAddress].index =
    |                globalConstraintRegister.index;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1683)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |                GlobalConstraint memory globalConstraint = globalConstraints[globalConstraints.length-1];
    |                globalConstraints[globalConstraintRegister.index] = globalConstraint;
  > |                organizations[_avatar].globalConstraintsRegisterPost[globalConstraint.gcAddress].index =
    |                globalConstraintRegister.index;
    |            }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1684)

[31mViolation[0m for UnrestrictedWrite in contract 'UController':
    |            }
    |            globalConstraints.length--;
  > |            delete organizations[_avatar].globalConstraintsRegisterPost[_globalConstraint];
    |            emit RemoveGlobalConstraint(_globalConstraint, globalConstraintRegister.index, false, _avatar);
    |            return true;
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1688)

[33mWarning[0m for UnrestrictedWrite in contract 'UController':
    |
    |    // Add or change the scheme:
  > |        organizations[_avatar].schemes[_scheme] =
    |        Scheme({paramsHash:_paramsHash, permissions:_permissions|bytes4(0x00000001)});
    |        emit RegisterScheme(msg.sender, _scheme, _avatar);
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1341)

[33mWarning[0m for UnrestrictedWrite in contract 'UController':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme, _avatar);
  > |        delete organizations[_avatar].schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/12/0xdf3d4cafe943982eb4aedd110e1a2dee330fb898.sol(1370)