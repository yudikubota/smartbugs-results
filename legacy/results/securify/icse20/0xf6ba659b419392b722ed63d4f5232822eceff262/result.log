Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:DACXToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:ERC20
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:ERC20Basic
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(112)

[31mViolation[0m for LockedEther in contract 'BurnableToken':
    |}
    |
  > |contract BurnableToken is BasicToken {
    |
    |  event Burn(address indexed burner, uint256 value, string reason);
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    address burner = msg.sender;
    |    balances[burner] = balances[burner].sub(_value);
  > |    totalTokenSupply = totalTokenSupply.sub(_value);
    |    emit Burn(burner, _value, _reason);
    |  }
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(142)

[33mWarning[0m for TODAmount in contract 'DACXToken':
    |	    require(msg.data.length == 0);
    |        require(msg.value >= 1e16);
  > |        owner.transfer(msg.value);
    |    }
    |
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(335)

[31mViolation[0m for TODReceiver in contract 'DACXToken':
    |	    require(msg.data.length == 0);
    |        require(msg.value >= 1e16);
  > |        owner.transfer(msg.value);
    |    }
    |
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(335)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DACXToken':
    |	    require(msg.data.length == 0);
    |        require(msg.value >= 1e16);
  > |        owner.transfer(msg.value);
    |    }
    |
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(335)

[33mWarning[0m for UnrestrictedWrite in contract 'DACXToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/25/0xf6ba659b419392b722ed63d4f5232822eceff262.sol(172)