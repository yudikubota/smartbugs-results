Processing contract: /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol:EthToSmthSwaps
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][msg.sender].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(83)

[31mViolation[0m for DAOConstantGas in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[msg.sender][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(99)

[31mViolation[0m for DAOConstantGas in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(115)

[31mViolation[0m for DAOConstantGas in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) < now);
    |
  > |    msg.sender.transfer(swap.balance);
    |
    |    clean(msg.sender, _participantAddress);
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(142)

[33mWarning[0m for TODAmount in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][msg.sender].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(83)

[33mWarning[0m for TODAmount in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[msg.sender][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(99)

[33mWarning[0m for TODAmount in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(115)

[33mWarning[0m for TODAmount in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) < now);
    |
  > |    msg.sender.transfer(swap.balance);
    |
    |    clean(msg.sender, _participantAddress);
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(142)

[33mWarning[0m for TODReceiver in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][msg.sender].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(83)

[33mWarning[0m for TODReceiver in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[msg.sender][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(99)

[33mWarning[0m for TODReceiver in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(115)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][msg.sender].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(83)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[msg.sender][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(99)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) > now);
    |
  > |    swap.targetWallet.transfer(swap.balance);
    |
    |    swaps[_ownerAddress][participantAddress].balance = 0;
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(115)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthToSmthSwaps':
    |    require(swap.createdAt.add(SafeTime) < now);
    |
  > |    msg.sender.transfer(swap.balance);
    |
    |    clean(msg.sender, _participantAddress);
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(142)

[31mViolation[0m for UnrestrictedWrite in contract 'EthToSmthSwaps':
    |    swap.targetWallet.transfer(swap.balance);
    |
  > |    swaps[_ownerAddress][participantAddress].balance = 0;
    |    swaps[_ownerAddress][participantAddress].secret = _secret;
    |
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(117)

[31mViolation[0m for UnrestrictedWrite in contract 'EthToSmthSwaps':
    |
    |    swaps[_ownerAddress][participantAddress].balance = 0;
  > |    swaps[_ownerAddress][participantAddress].secret = _secret;
    |
    |    emit Withdraw(participantAddress, _ownerAddress, swap.secretHash, now);
  at /unique_chucks/5/0xc4d43af0518c4ac875b01848f1087c435c42659b.sol(118)