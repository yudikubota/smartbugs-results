Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:AurusToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:ERC20
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:ERC20Basic
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'AurusToken':
    | * @dev Main token ganeration contract 
    | */
  > |contract AurusToken is BurnableToken{
    |
    |    string public constant name = "Aurus";
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(400)

[33mWarning[0m for UnrestrictedWrite in contract 'AurusToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'AurusToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'AurusToken':
    |   */
    |  function finishMinting() onlyOwner canMint public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(358)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |   */
    |  function finishMinting() onlyOwner canMint public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(358)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |   */
    |  function finishMinting() onlyOwner canMint public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(358)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(174)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(220)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/35/0xc5b85f054ad1aba4b4eb08c2efcacaf631bcf6c9.sol(221)