Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:Burnable
Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:EIP20Token
Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:LeaxToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:Mintable
Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'LeaxToken':
    | * @dev ERC20 Token implementation with burning capabilities
    | */
  > |contract LeaxToken is StandardToken {
    |
    |    string public constant name = "LEAXEX";
  at /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transfer(address to, uint value) public returns (bool success) {
    |    balances[msg.sender] = balances[msg.sender].sub(value);
  > |    balances[to] = balances[to].add(value);
    |    emit Transfer(msg.sender, to, value);
    |    return true;
  at /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath uses assert instead of require though, beware when using an analysis tool
    |
  > |    balances[from] = balances[from].sub(value);
    |    balances[to] = balances[to].add(value);
    |    allowed[from][msg.sender] = allowance.sub(value);
  at /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[from] = balances[from].sub(value);
  > |    balances[to] = balances[to].add(value);
    |    allowed[from][msg.sender] = allowance.sub(value);
    |    emit Transfer(from, to, value);
  at /unique_chucks/34/0x133db2e37d8676e425eca72d3ffc3b97855d31d3.sol(166)