Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:ApproveAndCallFallBack
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:IERC20
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:NexxoToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:Ownable
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:Pausable
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:PauserRole
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol:TokenVesting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'NexxoToken':
    |
    |        //Transfer ether to fundsWallet
  > |        fundsWallet.transfer(msg.value); 
    |    }
    |
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(979)

[31mViolation[0m for UnrestrictedWrite in contract 'NexxoToken':
    |    // ------------------------------------------------------------------------
    |    function () external payable {
  > |        totalEthInWei = totalEthInWei + msg.value;
    |        uint256 amount = msg.value * unitsOneEthCanBuy;
    |        require(balances[fundsWallet] >= amount, "NexxoToken : amount more than balance");
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(969)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(321)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |        require(_balances[account] >= value, "ERC20: burn overflow from address");
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(508)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(730)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(747)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |        require(balances[fundsWallet] >= amount, "NexxoToken : amount more than balance");
    |
  > |        balances[fundsWallet] = balances[fundsWallet].sub(amount);
    |        balances[msg.sender] = balances[msg.sender].add(amount);
    |
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(973)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(1005)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(1036)

[33mWarning[0m for UnrestrictedWrite in contract 'NexxoToken':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(1038)

[31mViolation[0m for LockedEther in contract 'TokenVesting':
    | * owner.
    | */
  > |contract TokenVesting is Ownable {
    |    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is
    |    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(767)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(730)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(747)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        require(unreleased > 0, "TokenVesting: no tokens are due");
    |
  > |        _released[address(token)] = _released[address(token)].add(unreleased);
    |
    |        token.safeTransfer(_beneficiary, unreleased);
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(876)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        uint256 refund = balance.sub(unreleased);
    |
  > |        _revoked[address(token)] = true;
    |
    |        token.safeTransfer(owner(), refund);
  at /unique_contracts/0x278a83b64c3e3e1139f8e8a52d96360ca3c69a3d.sol(897)