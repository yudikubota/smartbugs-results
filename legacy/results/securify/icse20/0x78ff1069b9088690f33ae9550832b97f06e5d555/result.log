Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:INameAccountRecovery
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:INameFactory
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:INameTAOPosition
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:TAOController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:TAOVoice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:Voice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(397)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(409)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(418)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(447)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(356)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(356)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(788)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(798)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(807)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(808)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(817)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(818)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(827)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(828)

[31mViolation[0m for RepeatedCall in contract 'TAOVoice':
    |	 */
    |	modifier senderNameNotCompromised() {
  > |		require (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |		_;
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(777)

[31mViolation[0m for RepeatedCall in contract 'TAOVoice':
    |	 */
    |	function stakeVoice(address _taoId, uint256 _voiceAmount) public isTAO(_taoId) senderIsName senderNameNotCompromised {
  > |		require (_voice.stake(_nameFactory.ethAddressToNameId(msg.sender), _taoId, _voiceAmount));
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(1030)

[31mViolation[0m for RepeatedCall in contract 'TAOVoice':
    |	 */
    |	function unstakeVoice(address _taoId, uint256 _voiceAmount) public isTAO(_taoId) senderIsName senderNameNotCompromised {
  > |		require (_voice.unstake(_nameFactory.ethAddressToNameId(msg.sender), _taoId, _voiceAmount));
    |	}
    |}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(1039)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(788)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(798)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(807)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(808)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(817)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(818)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(827)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(828)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |	function setVoiceAddress(address _voiceAddress) public onlyTheAO {
    |		require (_voiceAddress != address(0));
  > |		voiceAddress = _voiceAddress;
    |		_voice = Voice(_voiceAddress);
    |	}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(1019)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOVoice':
    |		require (_voiceAddress != address(0));
    |		voiceAddress = _voiceAddress;
  > |		_voice = Voice(_voiceAddress);
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(1020)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(76)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(105)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(97)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(108)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(140)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(188)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(264)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(908)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(918)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(927)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (hasReceived[_nameId] == false);
    |
  > |		hasReceived[_nameId] = true;
    |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
    |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(940)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |
    |		hasReceived[_nameId] = true;
  > |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
    |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
    |		emit Mint(_nameId, MAX_SUPPLY_PER_NAME);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(941)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		hasReceived[_nameId] = true;
    |		balanceOf[_nameId] = balanceOf[_nameId].add(MAX_SUPPLY_PER_NAME);
  > |		totalSupply = totalSupply.add(MAX_SUPPLY_PER_NAME);
    |		emit Mint(_nameId, MAX_SUPPLY_PER_NAME);
    |		return true;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(942)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (_value > 0 && _value <= MAX_SUPPLY_PER_NAME);
    |		require (balanceOf[_nameId] >= _value);							// Check if the targeted balance is enough
  > |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(966)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (balanceOf[_nameId] >= _value);							// Check if the targeted balance is enough
    |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
  > |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
    |		emit Stake(_nameId, _taoId, _value);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(967)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		balanceOf[_nameId] = balanceOf[_nameId].sub(_value);			// Subtract from the targeted balance
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].add(_value);	// Add to the targeted staked balance
  > |		balanceOf[_taoId] = balanceOf[_taoId].add(_value);
    |		emit Stake(_nameId, _taoId, _value);
    |		return true;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(968)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (taoStakedBalance[_nameId][_taoId] >= _value);	// Check if the targeted staked balance is enough
    |		require (balanceOf[_taoId] >= _value);	// Check if the total targeted staked balance is enough
  > |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
    |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(984)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		require (balanceOf[_taoId] >= _value);	// Check if the total targeted staked balance is enough
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
  > |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
    |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
    |		emit Unstake(_nameId, _taoId, _value);
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(985)

[31mViolation[0m for UnrestrictedWrite in contract 'Voice':
    |		taoStakedBalance[_nameId][_taoId] = taoStakedBalance[_nameId][_taoId].sub(_value);	// Subtract from the targeted staked balance
    |		balanceOf[_taoId] = balanceOf[_taoId].sub(_value);
  > |		balanceOf[_nameId] = balanceOf[_nameId].add(_value);			// Add to the targeted balance
    |		emit Unstake(_nameId, _taoId, _value);
    |		return true;
  at /unique_chucks/37/0x78ff1069b9088690f33ae9550832b97f06e5d555.sol(986)