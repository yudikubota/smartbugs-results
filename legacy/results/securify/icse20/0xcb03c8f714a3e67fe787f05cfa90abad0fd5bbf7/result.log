Processing contract: /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol:Bussiness
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol:ERC20BasicInterface
Processing contract: /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol:IERC721
Processing contract: /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |    function removePrice(uint256 tokenId) public returns (uint256){
    |        require(erc721Address.ownerOf(tokenId) == msg.sender);
  > |        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);
    |        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);
    |        resetPrice(tokenId);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(197)

[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(251)

[31mViolation[0m for DAOConstantGas in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(258)

[33mWarning[0m for DAOConstantGas in contract 'Bussiness':
    |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0 && address(this).balance >= prices[arrayTokenIdSale[i]].fee) {
  > |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
    |                }
    |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(231)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |    function cancelBussiness() public onlyCeoAddress {
    |        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {
  > |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0 && address(this).balance >= prices[arrayTokenIdSale[i]].fee) {
    |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(229)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
    |                }
  > |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
    |                    hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, prices[arrayTokenIdSale[i]].hbfee);
    |                }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(233)

[31mViolation[0m for RepeatedCall in contract 'Bussiness':
    |                }
    |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
  > |                    hbwalletToken.transfer(prices[arrayTokenIdSale[i]].tokenOwner, prices[arrayTokenIdSale[i]].hbfee);
    |                }
    |            }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(234)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |    function removePrice(uint256 tokenId) public returns (uint256){
    |        require(erc721Address.ownerOf(tokenId) == msg.sender);
  > |        if (prices[tokenId].fee > 0) msg.sender.transfer(prices[tokenId].fee);
    |        else if (prices[tokenId].hbfee > 0) hbwalletToken.transfer(msg.sender, prices[tokenId].hbfee);
    |        resetPrice(tokenId);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(197)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0 && address(this).balance >= prices[arrayTokenIdSale[i]].fee) {
  > |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
    |                }
    |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(231)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(251)

[33mWarning[0m for TODAmount in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(258)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0 && address(this).balance >= prices[arrayTokenIdSale[i]].fee) {
  > |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
    |                }
    |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(231)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(251)

[33mWarning[0m for TODReceiver in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(258)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |            if (prices[arrayTokenIdSale[i]].tokenOwner == erc721Address.ownerOf(arrayTokenIdSale[i])) {
    |                if (prices[arrayTokenIdSale[i]].fee > 0 && address(this).balance >= prices[arrayTokenIdSale[i]].fee) {
  > |                    prices[arrayTokenIdSale[i]].tokenOwner.transfer(prices[arrayTokenIdSale[i]].fee);
    |                }
    |                else if (prices[arrayTokenIdSale[i]].hbfee > 0 && hbwalletToken.balanceOf(address(this)) >= prices[arrayTokenIdSale[i]].hbfee) {
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(231)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(251)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |        require(prices[tokenId].price > 0 && prices[tokenId].price == msg.value);
    |        erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);
  > |        prices[tokenId].tokenOwner.transfer(msg.value);
    |        resetPrice(tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(258)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Bussiness':
    |    function withdraw(address payable _address, uint256 amount, uint256 _amountHB) public onlyCeoAddress {
    |        require(_address != address(0) && amount > 0 && address(this).balance >= amount && _amountHB > 0 && hbwalletToken.balanceOf(address(this)) >= _amountHB);
  > |        _address.transfer(amount);
    |        hbwalletToken.transferFrom(address(this), _address, _amountHB);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(223)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |}
    |
  > |contract Bussiness is Ownable {
    |    address public ceoAddress = address(0x6C3E879BDD20e9686cfD9BBD1bfD4B2Dd6d47079);
    |    IERC721 public erc721Address = IERC721(0x06012c8cf97BEaD5deAe237070F9587f8E7A266d);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(85)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function _burnArrayTokenIdSale(uint index) internal {
    |        require(index < arrayTokenIdSale.length);
  > |        arrayTokenIdSale[index] = arrayTokenIdSale[arrayTokenIdSale.length - 1];
    |        delete arrayTokenIdSale[arrayTokenIdSale.length - 1];
    |        arrayTokenIdSale.length--;
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(index < arrayTokenIdSale.length);
    |        arrayTokenIdSale[index] = arrayTokenIdSale[arrayTokenIdSale.length - 1];
  > |        delete arrayTokenIdSale[arrayTokenIdSale.length - 1];
    |        arrayTokenIdSale.length--;
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(38)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {
  > |        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);
    |        arrayTokenIdSale.push(_tokenId);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _ethfee, uint256 _hbfee, bool _isHightLight) internal {
    |        prices[_tokenId] = Price(msg.sender, _ethPrice, _ethfee, _hbfee, _isHightLight);
  > |        arrayTokenIdSale.push(_tokenId);
    |    }
    |
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setFee(uint256 _ethFee, uint256 _HBWALLETExchange, uint256 _hightLightFee) public onlyOwner returns (uint256, uint256, uint256){
    |        require(_ethFee > 0 && _HBWALLETExchange > 0 && _hightLightFee > 0);
  > |        ETHFee = _ethFee;
    |        HBWALLETExchange = _HBWALLETExchange;
    |        hightLightFee = _hightLightFee;
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(205)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(_ethFee > 0 && _HBWALLETExchange > 0 && _hightLightFee > 0);
    |        ETHFee = _ethFee;
  > |        HBWALLETExchange = _HBWALLETExchange;
    |        hightLightFee = _hightLightFee;
    |        return (ETHFee, HBWALLETExchange, hightLightFee);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(206)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        ETHFee = _ethFee;
    |        HBWALLETExchange = _HBWALLETExchange;
  > |        hightLightFee = _hightLightFee;
    |        return (ETHFee, HBWALLETExchange, hightLightFee);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function setLimitFee(uint256 _ethlimitFee, uint256 _hbWalletlimitFee) public onlyOwner returns (uint256, uint256){
    |        require(_ethlimitFee > 0 && _hbWalletlimitFee > 0);
  > |        limitETHFee = _ethlimitFee;
    |        limitHBWALLETFee = _hbWalletlimitFee;
    |        return (limitETHFee, limitHBWALLETFee);
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |        require(_ethlimitFee > 0 && _hbWalletlimitFee > 0);
    |        limitETHFee = _ethlimitFee;
  > |        limitHBWALLETFee = _hbWalletlimitFee;
    |        return (limitETHFee, limitHBWALLETFee);
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |    function changeCeo(address _address) public onlyCeoAddress {
    |        require(_address != address(0));
  > |        ceoAddress = _address;
    |
    |    }
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(243)

[33mWarning[0m for UnrestrictedWrite in contract 'Bussiness':
    |
    |    function resetPrice(uint256 tokenId) private {
  > |        prices[tokenId] = Price(address(0), 0, 0, 0, false);
    |        for (uint256 i = 0; i < arrayTokenIdSale.length; i++) {
    |            if (arrayTokenIdSale[i] == tokenId) {
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(263)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/22/0xcb03c8f714a3e67fe787f05cfa90abad0fd5bbf7.sol(38)