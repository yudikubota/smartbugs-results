Processing contract: /unique_contracts/0xa0562477af9d02c20e9e94280d50022c350ca0a2.sol:BIP
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BIP':
    |pragma solidity ^0.5.0;
    |
  > |contract BIP
    |{
    |    mapping(address => uint256) balances;
  at /unique_contracts/0xa0562477af9d02c20e9e94280d50022c350ca0a2.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |        require(numTokens <= balances[msg.sender]);
    |        balances[msg.sender] = balances[msg.sender] - numTokens;
  > |        balances[receiver] = balances[receiver] + numTokens;
    |        emit Transfer(msg.sender, receiver, numTokens);
    |        return true;
  at /unique_contracts/0xa0562477af9d02c20e9e94280d50022c350ca0a2.sol(60)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |        require(numTokens <= balances[owner]);
    |        require(numTokens <= allowed[owner][msg.sender]);
  > |        balances[owner] = balances[owner] - numTokens;
    |        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;
    |        balances[buyer] = balances[buyer] + numTokens;
  at /unique_contracts/0xa0562477af9d02c20e9e94280d50022c350ca0a2.sol(82)

[31mViolation[0m for UnrestrictedWrite in contract 'BIP':
    |        balances[owner] = balances[owner] - numTokens;
    |        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;
  > |        balances[buyer] = balances[buyer] + numTokens;
    |        emit Transfer(owner, buyer, numTokens); 
    |        return true;
  at /unique_contracts/0xa0562477af9d02c20e9e94280d50022c350ca0a2.sol(84)