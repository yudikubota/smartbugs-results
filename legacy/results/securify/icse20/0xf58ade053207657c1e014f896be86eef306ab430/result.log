Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:ERC20Interface
Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:GenTech
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:MockOracle
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:OracleInterface
Processing contract: /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ERC20':
    |// token transfers
    |// ----------------------------------------------------------------------------
  > |contract ERC20 is ERC20Interface {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |    function transfer(address to, uint256 tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(127)

[31mViolation[0m for RepeatedCall in contract 'GenTech':
    |  function withdraw(uint256 amountCent) public returns (uint256 amountWei){
    |    require(amountCent <= balanceOf(msg.sender));
  > |    amountWei = (amountCent.mul(1 ether)).div(oracle.price());
    |
    |    // If we don't have enough Ether in the contract to pay out the full amount
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(222)

[31mViolation[0m for RepeatedCall in contract 'GenTech':
    |    if(balanceOf(msg.sender) <= amountWei) {
    |      amountWei = amountWei.mul(balanceOf(msg.sender));
  > |      amountWei = amountWei.mul(oracle.price());
    |      amountWei = amountWei.div(1 ether);
    |      amountWei = amountWei.mul(totalSupply());
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(239)

[33mWarning[0m for TODAmount in contract 'GenTech':
    |    }
    |    _burn(msg.sender,amountCent);
  > |    msg.sender.transfer(amountWei);
    |  }
    |}
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(244)

[31mViolation[0m for MissingInputValidation in contract 'MockOracle':
    |    }
    |
  > |    function setPrice(uint256 price) public onlyOwner {
    |    
    |      price_ = price;
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(270)

[33mWarning[0m for UnrestrictedWrite in contract 'MockOracle':
    |    function setPrice(uint256 price) public onlyOwner {
    |    
  > |      price_ = price;
    |
    |    }
  at /unique_chucks/39/0xf58ade053207657c1e014f896be86eef306ab430.sol(272)