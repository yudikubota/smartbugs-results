Processing contract: /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol:ERC20
Processing contract: /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol:HuaShengToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'HuaShengToken':
    |}
    |
  > |contract HuaShengToken is StandardToken {
    |  string public constant name = "HuaShengToken";
    |  string public constant symbol = "HSL";
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'HuaShengToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'HuaShengToken':
    |    require(_to != address(0));
    |    require (_value <= _allowance);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'HuaShengToken':
    |    require (_value <= _allowance);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_to != address(0));
    |    require (_value <= _allowance);
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require (_value <= _allowance);
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0x44f903884941b591ba1359d62c4cd04f3feb2235.sol(96)