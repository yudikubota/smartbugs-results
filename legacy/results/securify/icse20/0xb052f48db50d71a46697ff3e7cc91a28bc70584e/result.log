Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:BZRxToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:BZRxTokenConvert
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:DetailedERC20
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:ERC20
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:ERC20Basic
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:UnlimitedAllowanceToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol:WETHInterface
[31mViolation[0m for LockedEther in contract 'BZRxToken':
    |}
    |
  > |contract BZRxToken is UnlimitedAllowanceToken, DetailedERC20, Ownable {
    |
    |    event Mint(address indexed to, uint256 amount);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(381)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        require(_to != address(0), "token burn not allowed");
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(353)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
    |            allowed[_from][msg.sender] = allowance.sub(_value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(354)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(375)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |
    |        uint256 allowance = allowed[_from][_spender];
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(486)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        uint256 allowance = allowed[_from][_spender];
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
    |            allowed[_from][_spender] = allowance.sub(_value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(487)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
  > |            allowed[_from][_spender] = allowance.sub(_value);
    |        }
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(489)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |    {
    |        require(_to != address(0), "token burn not allowed");
  > |        totalSupply_ = totalSupply_.add(_amount);
    |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(510)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        require(_to != address(0), "token burn not allowed");
    |        totalSupply_ = totalSupply_.add(_amount);
  > |        balances[_to] = balances[_to].add(_amount);
    |        emit Mint(_to, _amount);
    |        emit Transfer(address(0), _to, _amount);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        canMint 
    |    {
  > |        mintingFinished = true;
    |        emit MintFinished();
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(526)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        isLocked 
    |    {
  > |        lockingFinished = true;
    |        emit LockingFinished();
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(539)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        canMint 
    |    {
  > |        minters[_minter] = true;
    |    }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(553)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxToken':
    |        canMint 
    |    {
  > |        minters[_minter] = false;
    |    }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(566)

[31mViolation[0m for UnhandledException in contract 'BZRxTokenConvert':
    |        }
    |
  > |        return (_to.send(amount));
    |    }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(746)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'BZRxTokenConvert':
    |        }
    |
  > |        return (_to.send(amount));
    |    }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(746)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |            ), "weth transfer failed");
    |
  > |            ethCollected += wethValue;
    |
    |            return BZRxToken(bZRxTokenContractAddress).mint(
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(658)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |        returns (bool)
    |    {
  > |        conversionAllowed = _conversionAllowed;
    |        return true;
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(677)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |        returns (bool)
    |    {
  > |        tokenPrice = _tokenPrice;
    |        return true;
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(687)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |        returns (bool)
    |    {
  > |        bZRxTokenContractAddress = _bZRxTokenContractAddress;
    |        return true;
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(697)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |        returns (bool)
    |    {
  > |        bZxVaultAddress = _bZxVaultAddress;
    |        return true;
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(707)

[33mWarning[0m for UnrestrictedWrite in contract 'BZRxTokenConvert':
    |        returns (bool)
    |    {
  > |        wethContractAddress = _wethContractAddress;
    |        return true;
    |    }
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(717)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(198)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(198)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_to != address(0));
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(243)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(244)

[33mWarning[0m for UnrestrictedWrite in contract 'UnlimitedAllowanceToken':
    |        require(_to != address(0), "token burn not allowed");
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(353)

[33mWarning[0m for UnrestrictedWrite in contract 'UnlimitedAllowanceToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        if (allowance < MAX_UINT) {
    |            allowed[_from][msg.sender] = allowance.sub(_value);
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(354)

[33mWarning[0m for UnrestrictedWrite in contract 'UnlimitedAllowanceToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xb052f48db50d71a46697ff3e7cc91a28bc70584e.sol(375)