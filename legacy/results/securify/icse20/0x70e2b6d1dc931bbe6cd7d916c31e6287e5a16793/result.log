Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:IERC20
Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:Ownable
Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol:TokenVesting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'TokenVesting':
    | * owner.
    | */
  > |contract TokenVesting is Ownable {
    |    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is
    |    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,
  at /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol(388)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol(354)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol(371)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        require(unreleased > 0, "TokenVesting: no tokens are due");
    |
  > |        _released[address(token)] = _released[address(token)].add(unreleased);
    |
    |        token.safeTransfer(_beneficiary, unreleased);
  at /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol(497)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        uint256 refund = balance.sub(unreleased);
    |
  > |        _revoked[address(token)] = true;
    |
    |        token.safeTransfer(owner(), refund);
  at /unique_chucks/33/0x70e2b6d1dc931bbe6cd7d916c31e6287e5a16793.sol(518)