Processing contract: /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol:ENS
Processing contract: /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol:PublicResolver
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol:Registrar
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol:RegistrarInterface
Processing contract: /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol:SignatureValidator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'PublicResolver':
    | * address.
    | */
  > |contract PublicResolver {
    |
    |    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(76)

[31mViolation[0m for UnrestrictedWrite in contract 'PublicResolver':
    | * address.
    | */
  > |contract PublicResolver {
    |
    |    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'PublicResolver':
    | * address.
    | */
  > |contract PublicResolver {
    |
    |    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'PublicResolver':
    |     */
    |    function setAddr(bytes32 node, address addr) external onlyOwner(node) {
  > |        records[node].addr = addr;
    |        emit AddrChanged(node, addr);
    |    }
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'PublicResolver':
    |     */
    |    function setPubkey(bytes32 node, bytes32 x, bytes32 y) external onlyOwner(node) {
  > |        records[node].pubkey = PublicKey(x, y);
    |        emit PubkeyChanged(node, x, y);
    |    }
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(180)

[31mViolation[0m for MissingInputValidation in contract 'Registrar':
    |    }
    |
  > |    function register(string calldata name, address owner, bytes calldata signature) external {
    |        address token = SignatureValidator.recover(_hash(name, owner), signature);
    |
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(301)

[31mViolation[0m for MissingInputValidation in contract 'Registrar':
    |    }
    |
  > |    function hash(string calldata name, address owner) external pure returns (bytes32) {
    |        return _hash(name, owner);
    |    }
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(322)

[31mViolation[0m for RepeatedCall in contract 'Registrar':
    |
    |        // Set a resolver
  > |        ens.setResolver(subnode, address(resolver));
    |
    |        // Set the resolver's addr record to the new owner
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(311)

[31mViolation[0m for RepeatedCall in contract 'Registrar':
    |
    |        // Set the resolver's addr record to the new owner
  > |        resolver.setAddr(subnode, owner);
    |
    |        // Transfer ownership of the subdomain to the new owner.
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(314)

[31mViolation[0m for RepeatedCall in contract 'Registrar':
    |
    |        // Transfer ownership of the subdomain to the new owner.
  > |        ens.setOwner(subnode, owner);
    |
    |        emit Registration(name, owner, token);
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(317)

[33mWarning[0m for TODAmount in contract 'Registrar':
    |
    |        // Create the subdomain and assign it to us.
  > |        ens.setSubnodeOwner(node, label, address(this));
    |
    |        // Set a resolver
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(308)

[33mWarning[0m for TODAmount in contract 'Registrar':
    |
    |        // Set a resolver
  > |        ens.setResolver(subnode, address(resolver));
    |
    |        // Set the resolver's addr record to the new owner
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(311)

[33mWarning[0m for TODAmount in contract 'Registrar':
    |
    |        // Set the resolver's addr record to the new owner
  > |        resolver.setAddr(subnode, owner);
    |
    |        // Transfer ownership of the subdomain to the new owner.
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(314)

[33mWarning[0m for TODAmount in contract 'Registrar':
    |
    |        // Transfer ownership of the subdomain to the new owner.
  > |        ens.setOwner(subnode, owner);
    |
    |        emit Registration(name, owner, token);
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(317)

[33mWarning[0m for TODReceiver in contract 'Registrar':
    |
    |        // Create the subdomain and assign it to us.
  > |        ens.setSubnodeOwner(node, label, address(this));
    |
    |        // Set a resolver
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(308)

[33mWarning[0m for TODReceiver in contract 'Registrar':
    |
    |        // Set a resolver
  > |        ens.setResolver(subnode, address(resolver));
    |
    |        // Set the resolver's addr record to the new owner
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(311)

[33mWarning[0m for TODReceiver in contract 'Registrar':
    |
    |        // Set the resolver's addr record to the new owner
  > |        resolver.setAddr(subnode, owner);
    |
    |        // Transfer ownership of the subdomain to the new owner.
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(314)

[33mWarning[0m for TODReceiver in contract 'Registrar':
    |
    |        // Transfer ownership of the subdomain to the new owner.
  > |        ens.setOwner(subnode, owner);
    |
    |        emit Registration(name, owner, token);
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(317)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Registrar':
    |
    |        // Create the subdomain and assign it to us.
  > |        ens.setSubnodeOwner(node, label, address(this));
    |
    |        // Set a resolver
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(308)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Registrar':
    |
    |        // Set a resolver
  > |        ens.setResolver(subnode, address(resolver));
    |
    |        // Set the resolver's addr record to the new owner
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(311)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Registrar':
    |
    |        // Set the resolver's addr record to the new owner
  > |        resolver.setAddr(subnode, owner);
    |
    |        // Transfer ownership of the subdomain to the new owner.
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(314)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Registrar':
    |
    |        // Transfer ownership of the subdomain to the new owner.
  > |        ens.setOwner(subnode, owner);
    |
    |        emit Registration(name, owner, token);
  at /unique_chucks/13/0xa964ed4077ad3ba1946d118ce90544657bb4003b.sol(317)