Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle9082879379528738535/mustExplicit -j 2 -F /tmp/souffle-b18db3ee-2e98-4cc8-82c5-b23e54cfddc4 -D /tmp/souffle-b18db3ee-2e98-4cc8-82c5-b23e54cfddc4_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Crowdsale
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Dayta
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:DaytaCrowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:ERC20
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:ERC20Basic
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:RefundVault
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:RefundableCrowdsale
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Whitelist
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol:Whitelisted
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    require(_to != address(0));
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(46)

[31mViolation[0m for LockedEther in contract 'Dayta':
    |// File: contracts/Dayta.sol
    |
  > |contract Dayta is MintableToken {
    |  string public constant name = "DAYTA";
    |  string public constant symbol = "DAYTA";
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(576)

[33mWarning[0m for UnrestrictedWrite in contract 'Dayta':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'Dayta':
    |  }
    |  function finishMinting() onlyOwner public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(141)

[31mViolation[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |      if (publicSupply >= values[i]) {
    |        publicSupply = publicSupply.sub(values[i]);
  > |        token.mint(recipients[i], values[i]);
    |      }
    |    }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(479)

[31mViolation[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |      if (bountySupply >= values[i]) {
    |        bountySupply = bountySupply.sub(values[i]);
  > |        token.mint(recipients[i], values[i]);
    |      }
    |    }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(491)

[31mViolation[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |      if (partnershipsSupply >= values[i]) {
    |        partnershipsSupply = partnershipsSupply.sub(values[i]);
  > |        token.mint(recipients[i], values[i]);
    |      }
    |    }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(501)

[31mViolation[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |      if (reserveSupply >= values[i]) {
    |        reserveSupply = reserveSupply.sub(values[i]);
  > |        token.mint(recipients[i], values[i]);
    |      }
    |    }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(511)

[31mViolation[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |      if (teamSupply >= values[i]) {
    |        teamSupply = teamSupply.sub(values[i]);
  > |        token.mint(recipients[i], values[i]);
    |      }
    |    }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(521)

[33mWarning[0m for RepeatedCall in contract 'DaytaCrowdsale':
    |    weiRaised = weiRaised.add(weiAmount);
    |    vault.deposit.value(weiAmount)(beneficiary);
  > |    token.mint(beneficiary, tokens);
    |    emit TokenPurchase(beneficiary, beneficiary, weiAmount, tokens);
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(409)

[31mViolation[0m for TODReceiver in contract 'DaytaCrowdsale':
    |    }
    |    weiRaised = weiRaised.add(weiAmount);
  > |    vault.deposit.value(weiAmount)(beneficiary);
    |    token.mint(beneficiary, tokens);
    |    emit TokenPurchase(beneficiary, beneficiary, weiAmount, tokens);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(408)

[31mViolation[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function add(List storage list, address beneficiary) internal {
  > |    list.registry[beneficiary] = true;
    |  }
    |  function remove(List storage list, address beneficiary) internal {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function remove(List storage list, address beneficiary) internal {
  > |    list.registry[beneficiary] = false;
    |  }
    |  function check(List storage list, address beneficiary) view internal returns (bool) {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(169)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    require(_ICOstartTime > _preEndTime);
    |    require(_ICOEndTime > _ICOstartTime);
  > |    preEndTime = _preEndTime;
    |    preStartTime = _preStartTime;
    |    ICOstartTime = _ICOstartTime;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(447)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    require(_ICOEndTime > _ICOstartTime);
    |    preEndTime = _preEndTime;
  > |    preStartTime = _preStartTime;
    |    ICOstartTime = _ICOstartTime;
    |    ICOEndTime = _ICOEndTime;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(448)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    preEndTime = _preEndTime;
    |    preStartTime = _preStartTime;
  > |    ICOstartTime = _ICOstartTime;
    |    ICOEndTime = _ICOEndTime;
    |    weekOne = ICOstartTime.add(6 days);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(449)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    preStartTime = _preStartTime;
    |    ICOstartTime = _ICOstartTime;
  > |    ICOEndTime = _ICOEndTime;
    |    weekOne = ICOstartTime.add(6 days);
    |    weekTwo = weekOne.add(6 days);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function flashSale(uint256 _flashSaleStartTime, uint256 _flashSaleEndTime, uint256 _flashSaleBonus) onlyOwner external {
  > |    flashSaleStartTime = _flashSaleStartTime;
    |    flashSaleEndTime = _flashSaleEndTime;
    |    flashSaleBonus = _flashSaleBonus;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(460)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  function flashSale(uint256 _flashSaleStartTime, uint256 _flashSaleEndTime, uint256 _flashSaleBonus) onlyOwner external {
    |    flashSaleStartTime = _flashSaleStartTime;
  > |    flashSaleEndTime = _flashSaleEndTime;
    |    flashSaleBonus = _flashSaleBonus;
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(461)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    flashSaleStartTime = _flashSaleStartTime;
    |    flashSaleEndTime = _flashSaleEndTime;
  > |    flashSaleBonus = _flashSaleBonus;
    |  }
    |  function updateInvestorDates(uint256 _investorStartTime, uint256 _investorEndTime) onlyOwner external {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(462)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  }
    |  function updateInvestorDates(uint256 _investorStartTime, uint256 _investorEndTime) onlyOwner external {
  > |    investorStartTime = _investorStartTime;
    |    investorEndTime = _investorEndTime;
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(465)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |  function updateInvestorDates(uint256 _investorStartTime, uint256 _investorEndTime) onlyOwner external {
    |    investorStartTime = _investorStartTime;
  > |    investorEndTime = _investorEndTime;
    |  }
    |  function updateMinMaxInvestment(uint256 _minPurchase, uint256 _maxPurchase) onlyOwner external {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(466)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    require(_maxPurchase > _minPurchase);
    |    require(_minPurchase > 0);
  > |    minPurchase = _minPurchase;
    |    maxPurchase = _maxPurchase;
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(471)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    require(_minPurchase > 0);
    |    minPurchase = _minPurchase;
  > |    maxPurchase = _maxPurchase;
    |  }
    |  function transferFunds(address[] calldata recipients, uint256[] calldata values) onlyOwner external {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(472)

[33mWarning[0m for UnrestrictedWrite in contract 'DaytaCrowdsale':
    |    }
    |
  > |    isFinalized = true;
    |    emit Finalized();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(546)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  }
    |  function finishMinting() onlyOwner public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |  }
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |  }
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(169)

[33mWarning[0m for TODAmount in contract 'RefundVault':
    |    deposited[_beneficiary] = 0;
    |    emit Refunded(_beneficiary, depositedValue);
  > |    msg.sender.transfer(depositedValue);
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(259)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RefundVault':
    |    deposited[_beneficiary] = 0;
    |    emit Refunded(_beneficiary, depositedValue);
  > |    msg.sender.transfer(depositedValue);
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(259)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RefundVault':
    |  function withdrawFunds(uint256 _amount) onlyOwner external {
    |     require(state == State.Closed);
  > |     msg.sender.transfer(_amount);
    |  }
    |  function enableRefunds() onlyOwner external {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(247)

[31mViolation[0m for UnrestrictedWrite in contract 'RefundVault':
    |    require(state == State.Refunding);
    |    uint256 depositedValue = deposited[_beneficiary];
  > |    deposited[_beneficiary] = 0;
    |    emit Refunded(_beneficiary, depositedValue);
    |    msg.sender.transfer(depositedValue);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundVault':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundVault':
    |  function deposit(address _beneficiary) onlyOwner external payable {
    |    require(state == State.Active);
  > |    deposited[_beneficiary] = deposited[_beneficiary].add(msg.value);
    |  }
    |  function close() onlyOwner external {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(238)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundVault':
    |  function close() onlyOwner external {
    |    require(state == State.Active);
  > |    state = State.Closed;
    |    emit Closed();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(242)

[33mWarning[0m for UnrestrictedWrite in contract 'RefundVault':
    |  function enableRefunds() onlyOwner external {
    |    require(state == State.Active);
  > |    state = State.Refunding;
    |    emit RefundsEnabled();
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(251)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_to != address(0));
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(46)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_to != address(0));
    |    uint256 _allowance = allowed[_from][msg.sender];
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    uint256 _allowance = allowed[_from][msg.sender];
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(72)

[31mViolation[0m for MissingInputValidation in contract 'Whitelisted':
    |    emit AddressRemoved(_beneficiary);
    |  }
  > |  function isListed(address _beneficiary) external view returns (bool){
    |    return Whitelist.check(_list, _beneficiary);
    |  }
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(217)

[33mWarning[0m for MissingInputValidation in contract 'Whitelisted':
    |    Whitelist.add(_list, msg.sender);
    |  }
  > |  function enable(address[] calldata _beneficiary) external onlyOwner {
    |    for (uint256 i = 0; i < _beneficiary.length; i++) {
    |      Whitelist.add(_list, _beneficiary[i]);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(205)

[33mWarning[0m for MissingInputValidation in contract 'Whitelisted':
    |    emit AddressAdded(_beneficiary);
    |  }
  > |  function disable(address[] calldata _beneficiary) external onlyOwner {
    |    for (uint256 i = 0; i < _beneficiary.length; i++) {
    |      Whitelist.remove(_list, _beneficiary[i]);
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(211)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelisted':
    |  }
    |  function add(List storage list, address beneficiary) internal {
  > |    list.registry[beneficiary] = true;
    |  }
    |  function remove(List storage list, address beneficiary) internal {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'Whitelisted':
    |  }
    |  function remove(List storage list, address beneficiary) internal {
  > |    list.registry[beneficiary] = false;
    |  }
    |  function check(List storage list, address beneficiary) view internal returns (bool) {
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'Whitelisted':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |}
  at /unique_chucks/20/0x05b08e91a4071a2a5edcd5f750b0b7f2da0f70b6.sol(119)