Processing contract: /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol:ERC20Interface
Processing contract: /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol:ErgoPostToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'ErgoPostToken':
    |        uint wi = 1000000000000000000;
    |        uint finalamt = value_in_eth * wi;
  > |        to.transfer(finalamt);
    |        return true;
    |    }   
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(292)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |pragma solidity ^0.5.0;
    |
  > |//SafeMath library for calculations.
    |contract SafeMath {
    |    function safeAdd(uint a, uint b) internal pure returns (uint c){
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            }
    |            presale memory p= presale(_startdate,_enddate,token_for_presale*decimal_price,price);
  > |            presale_detail.push(p);
    |            total_presale_token += token_for_presale*decimal_price;
    |            balances[owner] -= token_for_presale*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(139)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            presale memory p= presale(_startdate,_enddate,token_for_presale*decimal_price,price);
    |            presale_detail.push(p);
  > |            total_presale_token += token_for_presale*decimal_price;
    |            balances[owner] -= token_for_presale*decimal_price;
    |            total_crowdsale_token = ico-total_presale_token;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(140)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            presale_detail.push(p);
    |            total_presale_token += token_for_presale*decimal_price;
  > |            balances[owner] -= token_for_presale*decimal_price;
    |            total_crowdsale_token = ico-total_presale_token;
    |            crowdsale_detail.crowd_token = total_crowdsale_token;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(141)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            total_presale_token += token_for_presale*decimal_price;
    |            balances[owner] -= token_for_presale*decimal_price;
  > |            total_crowdsale_token = ico-total_presale_token;
    |            crowdsale_detail.crowd_token = total_crowdsale_token;
    |        }
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(142)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            balances[owner] -= token_for_presale*decimal_price;
    |            total_crowdsale_token = ico-total_presale_token;
  > |            crowdsale_detail.crowd_token = total_crowdsale_token;
    |        }
    |        else{
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(143)

[31mViolation[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                    uint256 payment= _token * presale_detail[i].price;
    |                    if(payment == amount){
  > |                        presale_detail[i].pretoken -= _token*decimal_price;
    |                        balances[_account] = safeAdd(balances[_account], _token*decimal_price);
    |                        total_earning += payment;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        uint _value = balances[msg.sender];
    |        balances[msg.sender] -= _value;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        uint _value = balances[msg.sender];
    |        balances[msg.sender] -= _value;
  > |        balances[newOwner] += _value;
    |        emit Transfer(msg.sender, newOwner, _value);
    |    }
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    function start_crowdsale(uint _startdate,uint _enddate,uint _price) public onlyOwner{
    |        if(_startdate <= _enddate && _startdate > now){
  > |            crowdsale_detail.crowd_startdate = _startdate;
    |            crowdsale_detail.crowd_enddate = _enddate;
    |            crowdsale_detail.price = _price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        if(_startdate <= _enddate && _startdate > now){
    |            crowdsale_detail.crowd_startdate = _startdate;
  > |            crowdsale_detail.crowd_enddate = _enddate;
    |            crowdsale_detail.price = _price;
    |            balances[owner] -= total_crowdsale_token;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            crowdsale_detail.crowd_startdate = _startdate;
    |            crowdsale_detail.crowd_enddate = _enddate;
  > |            crowdsale_detail.price = _price;
    |            balances[owner] -= total_crowdsale_token;
    |        }
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            crowdsale_detail.crowd_enddate = _enddate;
    |            crowdsale_detail.price = _price;
  > |            balances[owner] -= total_crowdsale_token;
    |        }
    |        else{
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    function transfer(address to, uint tokens) public onlyOwner returns (bool success){
    |        balances[msg.sender] = safeSub(balances[msg.sender], tokens*decimal_price);
  > |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |        total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender, to, tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        balances[msg.sender] = safeSub(balances[msg.sender], tokens*decimal_price);
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  > |        total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender, to, tokens*decimal_price);
    |        return true;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    //Fucntion to transfer token from address.
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success){
  > |        balances[from] = safeSub(balances[from], tokens*decimal_price);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens*decimal_price);
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(191)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        balances[from] = safeSub(balances[from], tokens*decimal_price);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens*decimal_price);
  > |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |        emit Transfer(from, to, tokens*decimal_price);
    |        return true;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(193)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                    if(payment == amount){
    |                        presale_detail[i].pretoken -= _token*decimal_price;
  > |                        balances[_account] = safeAdd(balances[_account], _token*decimal_price);
    |                        total_earning += payment;
    |                        total_purchase_token += _token*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                        presale_detail[i].pretoken -= _token*decimal_price;
    |                        balances[_account] = safeAdd(balances[_account], _token*decimal_price);
  > |                        total_earning += payment;
    |                        total_purchase_token += _token*decimal_price;
    |                        total_sale_token += _token*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(211)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                        balances[_account] = safeAdd(balances[_account], _token*decimal_price);
    |                        total_earning += payment;
  > |                        total_purchase_token += _token*decimal_price;
    |                        total_sale_token += _token*decimal_price;
    |                    }
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(212)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                        total_earning += payment;
    |                        total_purchase_token += _token*decimal_price;
  > |                        total_sale_token += _token*decimal_price;
    |                    }
    |                    else{
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |            uint256 payment_for_crowdsale= _token * crowdsale_detail.price;
    |            if(payment_for_crowdsale == amount){
  > |                balances[_account] = safeAdd(balances[_account], _token*decimal_price);
    |                if(crowdsale_detail.crowd_token > 0 ){
    |                    crowdsale_detail.crowd_token -= _token*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                balances[_account] = safeAdd(balances[_account], _token*decimal_price);
    |                if(crowdsale_detail.crowd_token > 0 ){
  > |                    crowdsale_detail.crowd_token -= _token*decimal_price;
    |                    total_earning += payment_for_crowdsale;
    |                    total_purchase_token += _token*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(232)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                if(crowdsale_detail.crowd_token > 0 ){
    |                    crowdsale_detail.crowd_token -= _token*decimal_price;
  > |                    total_earning += payment_for_crowdsale;
    |                    total_purchase_token += _token*decimal_price;
    |                    total_sale_token += _token*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(233)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                    crowdsale_detail.crowd_token -= _token*decimal_price;
    |                    total_earning += payment_for_crowdsale;
  > |                    total_purchase_token += _token*decimal_price;
    |                    total_sale_token += _token*decimal_price;
    |                }
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |                    total_earning += payment_for_crowdsale;
    |                    total_purchase_token += _token*decimal_price;
  > |                    total_sale_token += _token*decimal_price;
    |                }
    |                else{
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    //Function to pay from bounty.
    |    function  pay_from_bounty(uint tokens, address to) public onlyOwner returns (bool success){
  > |        bounty = safeSub(bounty, tokens*decimal_price);
    |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    function  pay_from_bounty(uint tokens, address to) public onlyOwner returns (bool success){
    |        bounty = safeSub(bounty, tokens*decimal_price);
  > |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |        total_sale_token += tokens*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        bounty = safeSub(bounty, tokens*decimal_price);
    |        balances[owner] -= tokens*decimal_price;
  > |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |        total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender, to, tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  > |        total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender, to, tokens*decimal_price);
    |        return true;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    //Function to pay from reserved.
    |    function pay_from_reserved(uint tokens, address to) public onlyOwner returns(bool success){
  > |        reserved = safeSub(reserved,tokens*decimal_price);
    |        balances[owner] -= tokens*decimal_price;
    |         balances[to] = safeAdd(balances[to], tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(263)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    function pay_from_reserved(uint tokens, address to) public onlyOwner returns(bool success){
    |        reserved = safeSub(reserved,tokens*decimal_price);
  > |        balances[owner] -= tokens*decimal_price;
    |         balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |         total_sale_token += tokens*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        reserved = safeSub(reserved,tokens*decimal_price);
    |        balances[owner] -= tokens*decimal_price;
  > |         balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |         total_sale_token += tokens*decimal_price;
    |         emit Transfer(msg.sender, to, tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(265)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        balances[owner] -= tokens*decimal_price;
    |         balances[to] = safeAdd(balances[to], tokens*decimal_price);
  > |         total_sale_token += tokens*decimal_price;
    |         emit Transfer(msg.sender, to, tokens*decimal_price);
    |        return true;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(266)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    //Function to pay from team.
    |    function pay_from_team(uint tokens , address to) public onlyOwner returns(bool success){
  > |        team = safeSub(team,tokens*decimal_price); 
    |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(273)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |    function pay_from_team(uint tokens , address to) public onlyOwner returns(bool success){
    |        team = safeSub(team,tokens*decimal_price); 
  > |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |         total_sale_token += tokens*decimal_price;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(274)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        team = safeSub(team,tokens*decimal_price); 
    |        balances[owner] -= tokens*decimal_price;
  > |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
    |         total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender,to,tokens*decimal_price);
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(275)

[33mWarning[0m for UnrestrictedWrite in contract 'ErgoPostToken':
    |        balances[owner] -= tokens*decimal_price;
    |        balances[to] = safeAdd(balances[to], tokens*decimal_price);
  > |         total_sale_token += tokens*decimal_price;
    |        emit Transfer(msg.sender,to,tokens*decimal_price);
    |        return true;
  at /unique_chucks/40/0xf07426acc1c52061f786e8efe820704350513cf8.sol(276)