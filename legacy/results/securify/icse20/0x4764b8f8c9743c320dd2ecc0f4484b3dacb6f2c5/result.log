Processing contract: /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol:RewardsToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol:RewardsTokenDistribution
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol:VestingVault
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(36)

[31mViolation[0m for LockedEther in contract 'RewardsToken':
    | */
    |
  > |contract RewardsToken is Ownable {
    |    using SafeMath for uint;
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(110)

[31mViolation[0m for LockedEther in contract 'RewardsTokenDistribution':
    | * Copyright 2018, Rewards Blockchain Systems (Rewards.com)
    | */
  > |contract RewardsTokenDistribution is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(590)

[31mViolation[0m for RepeatedCall in contract 'RewardsTokenDistribution':
    |        uint[] memory _scheduleValues, uint _level) public onlyOwner isAllowed {
    |        _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
  > |        token.mint(address(vestingVault), _value);
    |        emit TokenMinted(_to, _value, "Allocated Vested Tokens To User");
    |    }
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(649)

[31mViolation[0m for RepeatedCall in contract 'RewardsTokenDistribution':
    |        require(_holders.length == _amounts.length, "Invalid arguments");
    |        for (uint i = 0; i < _holders.length; i++) {
  > |            token.mint(_holders[i], _amounts[i]);
    |            emit TokenMinted(_holders[i], _amounts[i], "Allocated Tokens To Users");
    |        }
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(662)

[33mWarning[0m for UnrestrictedWrite in contract 'RewardsTokenDistribution':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(36)

[33mWarning[0m for UnrestrictedWrite in contract 'RewardsTokenDistribution':
    |    function finalize() public onlyOwner {
    |        token.finishMinting();
  > |        finished = true;
    |        emit MintingFinished();
    |    }
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(694)

[31mViolation[0m for LockedEther in contract 'VestingVault':
    | * Copyright 2018, Rewards Blockchain Systems (Rewards.com)
    | */
  > |contract VestingVault is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(343)

[31mViolation[0m for RepeatedCall in contract 'VestingVault':
    |        uint256 transferable = vested.sub(grantInfo.transferred);
    |        require(transferable > 0, "There is no remaining balance for this address");
  > |        require(token.balanceOf(address(this)) >= transferable, "Contract Balance is insufficient");
    |
    |        grantInfo.transferred = grantInfo.transferred.add(transferable);
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(524)

[31mViolation[0m for RepeatedCall in contract 'VestingVault':
    |        require(revocable > 0, "There is no remaining balance for this address");
    |        require(revocable >= _amount, "Revocable balance is insufficient");
  > |        require(token.balanceOf(address(this)) >= _amount, "Contract Balance is insufficient");
    |
    |        grantInfo.value = grantInfo.value.sub(_amount);
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(544)

[33mWarning[0m for UnrestrictedWrite in contract 'VestingVault':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'VestingVault':
    | * Copyright 2018, Rewards Blockchain Systems (Rewards.com)
    | */
  > |contract VestingVault is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(343)

[33mWarning[0m for UnrestrictedWrite in contract 'VestingVault':
    |        require(_value > 0, "Vested amount should be greater than zero");
    |
  > |        grants[_to] = Grant({
    |            value : _value,
    |            vestingStart : _start,
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(439)

[33mWarning[0m for UnrestrictedWrite in contract 'VestingVault':
    |            });
    |
  > |        vestedAddresses.push(_to);
    |        totalVestedTokens = totalVestedTokens.add(_value);
    |
  at /unique_chucks/16/0x4764b8f8c9743c320dd2ecc0f4484b3dacb6f2c5.sol(450)