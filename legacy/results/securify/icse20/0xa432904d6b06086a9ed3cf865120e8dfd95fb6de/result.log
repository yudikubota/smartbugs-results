Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:Beneficiary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:Citizen
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:ERC721
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:IERC20
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:IERC721
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:LockableToken
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:Manageable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol:Strings
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Beneficiary':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[31mViolation[0m for TODReceiver in contract 'Beneficiary':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Beneficiary':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Beneficiary':
    |        require(newOwner != address(0), "Transfer to null address is not allowed");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'Beneficiary':
    |
    |    function setSecondary(address _secondary) public onlyOwner {
  > |        secondary = _secondary;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'Beneficiary':
    |
    |    function setBeneficiary(address payable _beneficiary) public onlyOwner {
  > |        beneficiary = _beneficiary;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(167)

[33mWarning[0m for TODAmount in contract 'Citizen':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[31mViolation[0m for TODReceiver in contract 'Citizen':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |pragma solidity 0.5.4;
    |
  > |interface IERC20 {
    |    function totalSupply() external view returns (uint);
    |    function balanceOf(address tokenOwner) external view returns (uint balance);
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |    function setMaintenanceStatus(bool _status) public onlyManager {
  > |        maintenance = _status;
    |        emit Maintenance(_status);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(225)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |    function lockToken(uint256 _tokenId) public onlyManager {
  > |        locks[_tokenId] = true;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |    function unlockToken(uint256 _tokenId) public onlyManager {
  > |        locks[_tokenId] = false;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(260)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |
  > |contract Citizen is Manageable, ERC721 {
    |
    |    struct Token {
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(395)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |    function mint(address _owner, uint8[7] memory _special, uint8 _generation, bytes32 _look) public onlyManager returns (uint256){
  > |        tokens.push(Token(_special, _generation, _look));
    |        _mint(tokens.length - 1, _owner);
    |        return tokens.length - 1;
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(408)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |        require(_specId < 8 && tokens[_tokenId].special[_specId] > 0);
    |
  > |        tokens[_tokenId].special[_specId]--;
    |        emit SpecChanged(_tokenId, _specId, tokens[_tokenId].special[_specId]);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(422)

[33mWarning[0m for UnrestrictedWrite in contract 'Citizen':
    |
    |    function setLook(uint256 _tokenId, bytes32 _look) public onlyManager {
  > |        tokens[_tokenId].look = _look;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(431)

[33mWarning[0m for TODAmount in contract 'Manageable':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[31mViolation[0m for TODReceiver in contract 'Manageable':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Manageable':
    |
    |    function beneficiaryPayout(uint256 value) internal {
  > |        beneficiary.transfer(value);
    |        emit BeneficiaryPayout(value);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(188)

[31mViolation[0m for UnrestrictedWrite in contract 'Manageable':
    |
    |    function setMaintenanceStatus(bool _status) public onlyManager {
  > |        maintenance = _status;
    |        emit Maintenance(_status);
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(225)

[33mWarning[0m for UnrestrictedWrite in contract 'Manageable':
    |        require(newOwner != address(0), "Transfer to null address is not allowed");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'Manageable':
    |
    |    function setSecondary(address _secondary) public onlyOwner {
  > |        secondary = _secondary;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'Manageable':
    |
    |    function setBeneficiary(address payable _beneficiary) public onlyOwner {
  > |        beneficiary = _beneficiary;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'Manageable':
    |
    |    function setManager(address _manager) public onlyOwnerOrSecondary {
  > |        managers[_manager] = true;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'Manageable':
    |
    |    function deleteManager(address _manager) public onlyOwnerOrSecondary {
  > |        delete managers[_manager];
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(234)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |    }
    |
  > |    function setSecondary(address _secondary) public onlyOwner {
    |        secondary = _secondary;
    |    }
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0), "Transfer to null address is not allowed");
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |
    |    function setSecondary(address _secondary) public onlyOwner {
  > |        secondary = _secondary;
    |    }
    |
  at /unique_contracts/0xa432904d6b06086a9ed3cf865120e8dfd95fb6de.sol(153)