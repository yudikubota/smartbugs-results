Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:CustodialContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:Deed
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:DeedImplementation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:ENS
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:HashRegistrar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:Registrar
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol:WhitelistAdminRole
[33mWarning[0m for LockedEther in contract 'CustodialContract':
    |
    |
  > |contract CustodialContract is WhitelistAdminRole {
    |    HashRegistrar registrar;
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(833)

[31mViolation[0m for RepeatedCall in contract 'CustodialContract':
    |        Deed deed = Deed(deedAddress);
    |
  > |        return (deed.owner() == address(this));
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(867)

[31mViolation[0m for RepeatedCall in contract 'CustodialContract':
    |
    |    function isPrimaryOwner(bytes32 _labelHash, address _address) public view returns (bool) {
  > |        (, address deedAddress, , , ) = registrar.entries(_labelHash);
    |        Deed deed = Deed(deedAddress);
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(875)

[31mViolation[0m for RepeatedCall in contract 'CustodialContract':
    |        if (
    |            domains[_labelHash].primary == address(0) &&
  > |            deed.previousOwner() == _address
    |        ) {
    |            return true;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(880)

[33mWarning[0m for TODAmount in contract 'CustodialContract':
    |    function call(address _to, bytes memory _data) public payable onlyWhitelistAdmin {
    |        require(_to != address(registrar));
  > |        (bool success,) = _to.call.value(msg.value)(_data);
    |        require(success);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(927)

[33mWarning[0m for TODReceiver in contract 'CustodialContract':
    |    function call(address _to, bytes memory _data) public payable onlyWhitelistAdmin {
    |        require(_to != address(registrar));
  > |        (bool success,) = _to.call.value(msg.value)(_data);
    |        require(success);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(927)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CustodialContract':
    |    function call(address _to, bytes memory _data) public payable onlyWhitelistAdmin {
    |        require(_to != address(registrar));
  > |        (bool success,) = _to.call.value(msg.value)(_data);
    |        require(success);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(927)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodialContract':
    |
    |    function setPrimaryOwner(bytes32 _labelHash, address _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {
  > |        domains[_labelHash].primary = _address;
    |        emit NewPrimaryOwner(_labelHash, _address);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(904)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodialContract':
    |
    |    function setSecondaryOwner(bytes32 _labelHash, address _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {
  > |        domains[_labelHash].secondary = _address;
    |        emit NewSecondaryOwner(_labelHash, _address);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(909)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodialContract':
    |
    |    function withdrawDomain(bytes32 _labelHash, address payable _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {
  > |        domains[_labelHash].primary = address(0);
    |        domains[_labelHash].secondary = address(0);
    |        registrar.transfer(_labelHash, _address);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(919)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodialContract':
    |    function withdrawDomain(bytes32 _labelHash, address payable _address) public onlyTransferred(_labelHash) onlyOwner(_labelHash) {
    |        domains[_labelHash].primary = address(0);
  > |        domains[_labelHash].secondary = address(0);
    |        registrar.transfer(_labelHash, _address);
    |        emit DomainWithdrawal(_labelHash, _address);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(920)

[31mViolation[0m for TODAmount in contract 'DeedImplementation':
    |        // owner to log an event if desired; but owner should also be aware that
    |        // its fallback function can also be invoked by setBalance
  > |        if (_owner.send(address(this).balance)) {
    |            selfdestruct(burn);
    |        }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(244)

[33mWarning[0m for TODAmount in contract 'DeedImplementation':
    |        _value = newValue;
    |        // Send the difference to the owner
  > |        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(200)

[33mWarning[0m for TODAmount in contract 'DeedImplementation':
    |    function closeDeed(uint refundRatio) external onlyRegistrar onlyActive {
    |        active = false;
  > |        require(burn.send(((1000 - refundRatio) * address(this).balance)/1000));
    |        emit DeedClosed();
    |        _destroyDeed();
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(210)

[31mViolation[0m for TODReceiver in contract 'DeedImplementation':
    |        _value = newValue;
    |        // Send the difference to the owner
  > |        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(200)

[31mViolation[0m for TODReceiver in contract 'DeedImplementation':
    |        // owner to log an event if desired; but owner should also be aware that
    |        // its fallback function can also be invoked by setBalance
  > |        if (_owner.send(address(this).balance)) {
    |            selfdestruct(burn);
    |        }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(244)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DeedImplementation':
    |        _value = newValue;
    |        // Send the difference to the owner
  > |        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(200)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DeedImplementation':
    |    function closeDeed(uint refundRatio) external onlyRegistrar onlyActive {
    |        active = false;
  > |        require(burn.send(((1000 - refundRatio) * address(this).balance)/1000));
    |        emit DeedClosed();
    |        _destroyDeed();
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'DeedImplementation':
    |    function setOwner(address payable newOwner) external onlyRegistrar {
    |        require(newOwner != address(0x0));
  > |        _previousOwner = _owner;  // This allows contracts to check who sent them the ownership
    |        _owner = newOwner;
    |        emit OwnerChanged(newOwner);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'DeedImplementation':
    |        require(newOwner != address(0x0));
    |        _previousOwner = _owner;  // This allows contracts to check who sent them the ownership
  > |        _owner = newOwner;
    |        emit OwnerChanged(newOwner);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'DeedImplementation':
    |
    |    function setRegistrar(address newRegistrar) external onlyRegistrar {
  > |        _registrar = newRegistrar;
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(192)

[33mWarning[0m for UnrestrictedWrite in contract 'DeedImplementation':
    |        // Check if it has enough balance to set the value
    |        require(_value >= newValue);
  > |        _value = newValue;
    |        // Send the difference to the owner
    |        require(_owner.send(address(this).balance - newValue) || !throwOnFailure);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(198)

[33mWarning[0m for UnrestrictedWrite in contract 'DeedImplementation':
    |     */
    |    function closeDeed(uint refundRatio) external onlyRegistrar onlyActive {
  > |        active = false;
    |        require(burn.send(((1000 - refundRatio) * address(this).balance)/1000));
    |        emit DeedClosed();
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(209)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |    modifier registryOpen() {
  > |        require(now >= registryStarted && now <= registryStarted + (365 * 4) * 1 days && ens.owner(rootNode) == address(this));
    |        _;
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(338)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |        h.deed.setBalance(h.value, true);
    |
  > |        trySetSubnodeOwner(_hash, h.deed.owner());
    |        emit HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(499)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |        trySetSubnodeOwner(_hash, h.deed.owner());
  > |        emit HashRegistered(_hash, h.deed.owner(), h.value, h.registrationDate);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(500)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |            h.value = max(h.value, minPrice);
    |            h.deed.setBalance(h.value/2, false);
  > |            h.deed.setOwner(msg.sender);
    |            h.deed.closeDeed(1000);
    |        }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(563)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |            h.deed.setBalance(h.value/2, false);
    |            h.deed.setOwner(msg.sender);
  > |            h.deed.closeDeed(1000);
    |        }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(564)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |        // Call the new registrar to accept the transfer
  > |        Registrar(registrar).acceptRegistrarTransfer(_hash, h.deed, h.registrationDate);
    |
    |        // Zero out the Entry
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(607)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |            ens.setSubnodeOwner(rootNode, label, address(this));
    |            bytes32 node = keccak256(abi.encodePacked(rootNode, label));
  > |            ens.setResolver(node, address(0x0));
    |            ens.setOwner(node, address(0x0));
    |        }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(701)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |            bytes32 node = keccak256(abi.encodePacked(rootNode, label));
    |            ens.setResolver(node, address(0x0));
  > |            ens.setOwner(node, address(0x0));
    |        }
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(702)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |    function _eraseNodeHierarchy(uint idx, bytes32[] memory labels, bytes32 node) internal {
    |        // Take ownership of the node
  > |        ens.setSubnodeOwner(node, labels[idx], address(this));
    |        node = keccak256(abi.encodePacked(node, labels[idx]));
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(736)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |        // Erase the resolver and owner records
  > |        ens.setResolver(node, address(0x0));
    |        ens.setOwner(node, address(0x0));
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(745)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |        // Erase the resolver and owner records
    |        ens.setResolver(node, address(0x0));
  > |        ens.setOwner(node, address(0x0));
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(746)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |     */
    |    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {
  > |        if (ens.owner(rootNode) == address(this))
    |            ens.setSubnodeOwner(rootNode, _hash, _newOwner);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(756)

[31mViolation[0m for RepeatedCall in contract 'HashRegistrar':
    |    function trySetSubnodeOwner(bytes32 _hash, address _newOwner) internal {
    |        if (ens.owner(rootNode) == address(this))
  > |            ens.setSubnodeOwner(rootNode, _hash, _newOwner);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(757)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |    modifier onlyOwner(bytes32 _hash) {
  > |        require(state(_hash) == Mode.Owned && msg.sender == _entries[_hash].deed.owner());
    |        _;
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(333)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |            // Invalid phase
    |            revert();
  > |        } else if (value < minPrice || bid.creationDate() > h.registrationDate - revealPeriod) {
    |            // Bid too low or too late, refund 99.5%
    |            bid.closeDeed(995);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(434)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |        // Handles the case when there's only a single bidder (h.value is zero)
    |        h.value = max(h.value, minPrice);
  > |        h.deed.setBalance(h.value, true);
    |
    |        trySetSubnodeOwner(_hash, h.deed.owner());
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(497)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |        Deed deedContract = h.deed;
    |
  > |        require(now >= h.registrationDate + 365 days || ens.owner(rootNode) != address(this));
    |
    |        h.value = 0;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(527)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |        _tryEraseSingleNode(_hash);
  > |        deedContract.closeDeed(1000);
    |        emit HashReleased(_hash, h.value);        
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(534)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |            // The previous owner gets 50%
    |            h.value = max(h.value, minPrice);
  > |            h.deed.setBalance(h.value/2, false);
    |            h.deed.setOwner(msg.sender);
    |            h.deed.closeDeed(1000);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(562)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |     */
    |    function transferRegistrars(bytes32 _hash) external onlyOwner(_hash) {
  > |        address registrar = ens.owner(rootNode);
    |        require(registrar != address(this));
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(599)

[33mWarning[0m for RepeatedCall in contract 'HashRegistrar':
    |
    |    function _tryEraseSingleNode(bytes32 label) internal {
  > |        if (ens.owner(rootNode) == address(this)) {
    |            ens.setSubnodeOwner(rootNode, label, address(this));
    |            bytes32 node = keccak256(abi.encodePacked(rootNode, label));
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(698)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |            // Set new winner
    |            // Per the rules of a vickery auction, the value becomes the previous highestBid
  > |            h.value = h.highestBid;  // will be zero if there's only 1 bidder
    |            h.highestBid = value;
    |            h.deed = bid;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(448)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |            // Per the rules of a vickery auction, the value becomes the previous highestBid
    |            h.value = h.highestBid;  // will be zero if there's only 1 bidder
  > |            h.highestBid = value;
    |            h.deed = bid;
    |            emit BidRevealed(_hash, msg.sender, value, 2);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(449)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |            h.value = h.highestBid;  // will be zero if there's only 1 bidder
    |            h.highestBid = value;
  > |            h.deed = bid;
    |            emit BidRevealed(_hash, msg.sender, value, 2);
    |        } else if (value > h.value) {
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        } else if (value > h.value) {
    |            // Not winner, but affects second place
  > |            h.value = value;
    |            bid.closeDeed(995);
    |            emit BidRevealed(_hash, msg.sender, value, 3);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(454)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        bid.setOwner(msg.sender);
    |        bid.closeDeed(5);
  > |        sealedBids[bidder][seal] = Deed(0);
    |        emit BidRevealed(seal, bidder, 0, 5);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(483)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        
    |        // Handles the case when there's only a single bidder (h.value is zero)
  > |        h.value = max(h.value, minPrice);
    |        h.deed.setBalance(h.value, true);
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(496)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        require(now >= h.registrationDate + 365 days || ens.owner(rootNode) != address(this));
    |
  > |        h.value = 0;
    |        h.highestBid = 0;
    |        h.deed = Deed(0);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(529)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |
    |        h.value = 0;
  > |        h.highestBid = 0;
    |        h.deed = Deed(0);
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(530)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        h.value = 0;
    |        h.highestBid = 0;
  > |        h.deed = Deed(0);
    |
    |        _tryEraseSingleNode(_hash);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(531)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |            // Reward the discoverer with 50% of the deed
    |            // The previous owner gets 50%
  > |            h.value = max(h.value, minPrice);
    |            h.deed.setBalance(h.value/2, false);
    |            h.deed.setOwner(msg.sender);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(561)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        emit HashInvalidated(hash, unhashedName, h.value, h.registrationDate);
    |
  > |        h.value = 0;
    |        h.highestBid = 0;
    |        h.deed = Deed(0);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(569)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |
    |        h.value = 0;
  > |        h.highestBid = 0;
    |        h.deed = Deed(0);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        h.value = 0;
    |        h.highestBid = 0;
  > |        h.deed = Deed(0);
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(571)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |
    |        // Zero out the Entry
  > |        h.deed = Deed(0);
    |        h.registrationDate = 0;
    |        h.value = 0;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(610)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        // Zero out the Entry
    |        h.deed = Deed(0);
  > |        h.registrationDate = 0;
    |        h.value = 0;
    |        h.highestBid = 0;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(611)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        h.deed = Deed(0);
    |        h.registrationDate = 0;
  > |        h.value = 0;
    |        h.highestBid = 0;
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(612)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        h.registrationDate = 0;
    |        h.value = 0;
  > |        h.highestBid = 0;
    |    }
    |
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(613)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |
    |        Entry storage newAuction = _entries[_hash];
  > |        newAuction.registrationDate = now + totalAuctionLength;
    |        newAuction.value = 0;
    |        newAuction.highestBid = 0;
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(712)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        Entry storage newAuction = _entries[_hash];
    |        newAuction.registrationDate = now + totalAuctionLength;
  > |        newAuction.value = 0;
    |        newAuction.highestBid = 0;
    |        emit AuctionStarted(_hash, newAuction.registrationDate);
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(713)

[33mWarning[0m for UnrestrictedWrite in contract 'HashRegistrar':
    |        newAuction.registrationDate = now + totalAuctionLength;
    |        newAuction.value = 0;
  > |        newAuction.highestBid = 0;
    |        emit AuctionStarted(_hash, newAuction.registrationDate);
    |    }
  at /unique_chucks/46/0x4604cdff97109b74fe292804702e54e4bd22992c.sol(714)