Processing contract: /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol:CharityChallenge
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol:IMarket
[31mViolation[0m for DAOConstantGas in contract 'CharityChallenge':
    |        uint256 claimedAmount = balanceOf(msg.sender);
    |        donorBalances[msg.sender] = 0;
  > |        msg.sender.transfer(claimedAmount);
    |        emit Claimed(msg.sender, claimedAmount);
    |    }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(157)

[33mWarning[0m for DAOConstantGas in contract 'CharityChallenge':
    |                    uint256 amount = totalContractBalance * ratio / sumRatio;
    |                    donatedAmount += amount;
  > |                    npo.transfer(amount);
    |                    emit Donated(npo, amount);
    |                }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(129)

[33mWarning[0m for DAOConstantGas in contract 'CharityChallenge':
    |                uint256 remainingAmount = totalContractBalance - donatedAmount;
    |                address payable npo = npoAddresses[length - 1];
  > |                npo.transfer(remainingAmount);
    |                emit Donated(npo, remainingAmount);
    |            }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(135)

[31mViolation[0m for TODAmount in contract 'CharityChallenge':
    |        uint totalContractBalance = address(this).balance;
    |        safetyHatchClaimSucceeded = true;
  > |        contractOwner.transfer(address(this).balance);
    |        emit SafetyHatchClaimed(contractOwner, totalContractBalance);
    |    }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(167)

[33mWarning[0m for TODAmount in contract 'CharityChallenge':
    |                    uint256 amount = totalContractBalance * ratio / sumRatio;
    |                    donatedAmount += amount;
  > |                    npo.transfer(amount);
    |                    emit Donated(npo, amount);
    |                }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(129)

[33mWarning[0m for TODAmount in contract 'CharityChallenge':
    |                uint256 remainingAmount = totalContractBalance - donatedAmount;
    |                address payable npo = npoAddresses[length - 1];
  > |                npo.transfer(remainingAmount);
    |                emit Donated(npo, remainingAmount);
    |            }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(135)

[33mWarning[0m for TODAmount in contract 'CharityChallenge':
    |        uint256 claimedAmount = balanceOf(msg.sender);
    |        donorBalances[msg.sender] = 0;
  > |        msg.sender.transfer(claimedAmount);
    |        emit Claimed(msg.sender, claimedAmount);
    |    }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(157)

[33mWarning[0m for TODReceiver in contract 'CharityChallenge':
    |                    uint256 amount = totalContractBalance * ratio / sumRatio;
    |                    donatedAmount += amount;
  > |                    npo.transfer(amount);
    |                    emit Donated(npo, amount);
    |                }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(129)

[33mWarning[0m for TODReceiver in contract 'CharityChallenge':
    |                uint256 remainingAmount = totalContractBalance - donatedAmount;
    |                address payable npo = npoAddresses[length - 1];
  > |                npo.transfer(remainingAmount);
    |                emit Donated(npo, remainingAmount);
    |            }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(135)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CharityChallenge':
    |                    uint256 amount = totalContractBalance * ratio / sumRatio;
    |                    donatedAmount += amount;
  > |                    npo.transfer(amount);
    |                    emit Donated(npo, amount);
    |                }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(129)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CharityChallenge':
    |                uint256 remainingAmount = totalContractBalance - donatedAmount;
    |                address payable npo = npoAddresses[length - 1];
  > |                npo.transfer(remainingAmount);
    |                emit Donated(npo, remainingAmount);
    |            }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(135)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CharityChallenge':
    |        uint256 claimedAmount = balanceOf(msg.sender);
    |        donorBalances[msg.sender] = 0;
  > |        msg.sender.transfer(claimedAmount);
    |        emit Claimed(msg.sender, claimedAmount);
    |    }
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(157)

[31mViolation[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |    modifier nonReentrant() {
    |        require(!mReentrancyLock);
  > |        mReentrancyLock = true;
    |        _;
    |        mReentrancyLock = false;
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |        mReentrancyLock = true;
    |        _;
  > |        mReentrancyLock = false;
    |    }
    |
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(60)

[31mViolation[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |    function doFinalize() private {
    |        bool hasError;
  > |        (hasChallengeAccomplished, hasError) = checkAugur();
    |        if (!hasError) {
    |            isEventFinalized = true;
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(117)

[31mViolation[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |        (hasChallengeAccomplished, hasError) = checkAugur();
    |        if (!hasError) {
  > |            isEventFinalized = true;
    |            if (hasChallengeAccomplished) {
    |                uint256 totalContractBalance = address(this).balance;
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |        require(msg.value > 0);
    |        if (donorBalances[msg.sender] == 0 && msg.value > 0) {
  > |            donorCount++;
    |        }
    |        donorBalances[msg.sender] += msg.value;
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'CharityChallenge':
    |
    |        uint totalContractBalance = address(this).balance;
  > |        safetyHatchClaimSucceeded = true;
    |        contractOwner.transfer(address(this).balance);
    |        emit SafetyHatchClaimed(contractOwner, totalContractBalance);
  at /unique_chucks/22/0x23091dbb58a2953449246bac6245b3c1802236e8.sol(166)