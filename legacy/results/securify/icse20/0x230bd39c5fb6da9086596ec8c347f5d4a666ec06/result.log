Processing contract: /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol:LGB
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'LGB':
    |	function withdrawEther(uint256 amount) public {
    |		require(msg.sender == owner);
  > |		owner.transfer(amount);
    |	}
    |	
  at /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'LGB':
    |        require (balanceOf[_to] + _value >= balanceOf[_to]) ; // Check for overflows
    |        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     // Subtract from the sender
  > |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            // Add the same to the recipient
    |        emit Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
    |        return true;
  at /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'LGB':
    |        require (balanceOf[_to] + _value >= balanceOf[_to]) ;  // Check for overflows
    |        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance
  > |        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender
    |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient
    |        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
  at /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'LGB':
    |        require (_value <= allowance[_from][msg.sender]) ;     // Check allowance
    |        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                           // Subtract from the sender
  > |        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                             // Add the same to the recipient
    |        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'LGB':
    |		require (_value > 0) ; 
    |        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      // Subtract from the sender
  > |        totalSupply = SafeMath.safeSub(totalSupply,_value);                                // Updates totalSupply
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/25/0x230bd39c5fb6da9086596ec8c347f5d4a666ec06.sol(103)