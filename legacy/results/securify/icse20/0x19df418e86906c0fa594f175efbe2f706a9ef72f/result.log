Processing contract: /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol:EthPixel
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'EthPixel':
    |        putPlayer(msg.sender, players[msg.sender].holding, 0, one_pixel_value);
    |        withdrawals += amount;
  > |        msg.sender.transfer(amount);
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(303)

[31mViolation[0m for TODAmount in contract 'EthPixel':
    |        require(now > expiration + 365 days, "revert11");
    |        require(msg.sender == dev_account);
  > |        dev_account.transfer(address(this).balance);
    |    }
    |    /*------------------------------------------------------------------------------------------------------
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(320)

[31mViolation[0m for TODAmount in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        last_buyer.transfer(half_award);
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(340)

[31mViolation[0m for TODAmount in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        biggest_holder.transfer(half_award);
    |    }
    |}
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(352)

[31mViolation[0m for TODReceiver in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        last_buyer.transfer(half_award);
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(340)

[31mViolation[0m for TODReceiver in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        biggest_holder.transfer(half_award);
    |    }
    |}
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(352)

[33mWarning[0m for TODReceiver in contract 'EthPixel':
    |        uint max = ether_paid - ether_used;
    |        require(_amount <= max, "revert10");
  > |        dev_account.transfer(_amount);
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(314)

[33mWarning[0m for TODReceiver in contract 'EthPixel':
    |        require(now > expiration + 365 days, "revert11");
    |        require(msg.sender == dev_account);
  > |        dev_account.transfer(address(this).balance);
    |    }
    |    /*------------------------------------------------------------------------------------------------------
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(320)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        last_buyer.transfer(half_award);
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(340)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EthPixel':
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  > |        biggest_holder.transfer(half_award);
    |    }
    |}
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(352)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |    /* Update pixel information */
    |    function putPixel(uint _index, address _owner, uint8 _color, uint88 _price) private {
  > |        canvas[_index].owner = _owner;
    |        canvas[_index].color = _color;
    |        canvas[_index].price = _price;
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |    function putPixel(uint _index, address _owner, uint8 _color, uint88 _price) private {
    |        canvas[_index].owner = _owner;
  > |        canvas[_index].color = _color;
    |        canvas[_index].price = _price;
    |    }
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |        canvas[_index].owner = _owner;
    |        canvas[_index].color = _color;
  > |        canvas[_index].price = _price;
    |    }
    |    
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |    function update_biggest_holder(address payable _address) public notFinalDeadline returns(address _biggest_holder) {
    |        require(biggest_holder != address(0));
  > |        if (players[_address].holding > players[biggest_holder].holding) biggest_holder = _address;
    |        return biggest_holder;
    |    }
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(328)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |        require(last_buyer_cashed_out == false);
    |        
  > |        last_buyer_cashed_out = true;
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(337)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |        last_buyer_cashed_out = true;
    |        uint96 half_award = pot / 2;
  > |        withdrawals += half_award;
    |        last_buyer.transfer(half_award);
    |    }
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(339)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |        require(biggest_holder_cashed_out == false);
    |
  > |        biggest_holder_cashed_out = true;
    |        uint96 half_award = pot / 2;
    |        withdrawals += half_award;
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'EthPixel':
    |        biggest_holder_cashed_out = true;
    |        uint96 half_award = pot / 2;
  > |        withdrawals += half_award;
    |        biggest_holder.transfer(half_award);
    |    }
  at /unique_chucks/11/0x19df418e86906c0fa594f175efbe2f706a9ef72f.sol(351)