Processing contract: /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol:MerkleTree
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol:MiMC
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol:Mixer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol:Pairing
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol:Verifier
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for LockedEther in contract 'Mixer':
    |
    |
  > |contract Mixer
    |{
    |    using MerkleTree for MerkleTree.Data;
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(624)

[31mViolation[0m for RepeatedCall in contract 'Mixer':
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
    |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
  > |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
    |
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(753)

[33mWarning[0m for TODAmount in contract 'Mixer':
    |        uint relayerRefund = gasUsed * tx.gasprice;
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
  > |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
    |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(752)

[33mWarning[0m for TODAmount in contract 'Mixer':
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
    |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
  > |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
    |
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(753)

[33mWarning[0m for TODReceiver in contract 'Mixer':
    |        uint relayerRefund = gasUsed * tx.gasprice;
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
  > |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
    |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(752)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Mixer':
    |        uint relayerRefund = gasUsed * tx.gasprice;
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
  > |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
    |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(752)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Mixer':
    |        if(relayerRefund > AMOUNT/20) relayerRefund = AMOUNT/20;
    |        in_withdraw_address.transfer(AMOUNT - relayerRefund); // leaf withdrawal
  > |        msg.sender.transfer(relayerRefund); // relayer refund
    |    }
    |
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(753)

[31mViolation[0m for UnrestrictedWrite in contract 'Mixer':
    |
    |
  > |library Pairing {
    |    struct G1Point {
    |        uint X;
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'Mixer':
    |    {
    |        require(leaf > 0, "null leaf");
  > |        pendingDeposits[fundingWallet].push(leaf);
    |        emit CommitmentAdded(fundingWallet, leaf);
    |        if (msg.value > 0) fundCommitment();
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(664)

[31mViolation[0m for UnrestrictedWrite in contract 'Mixer':
    |        require(verifyProof(getRoot(), in_withdraw_address, in_nullifier, proof), "Proof verification failed");
    |
  > |        nullifiers[in_nullifier] = true;
    |
    |        uint gasUsed = startGas - gasleft() + 82775;
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(747)

[33mWarning[0m for UnrestrictedWrite in contract 'Mixer':
    |        require(offset != MAX_LEAF_COUNT - 1);
    |
  > |        self.nodes[0][offset] = leaf;
    |
    |        new_root = updateTree(self, IVs);
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(491)

[33mWarning[0m for UnrestrictedWrite in contract 'Mixer':
    |        new_root = updateTree(self, IVs);
    |
  > |        self.cur = offset + 1;
    |    }
    |
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(495)

[33mWarning[0m for UnrestrictedWrite in contract 'Mixer':
    |            uint nextIndex = uint(currentIndex/2);
    |
  > |            self.nodes[depth+1][nextIndex] = hashImpl(leaf1, leaf2, IVs[depth]);
    |
    |            currentIndex = nextIndex;
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(597)

[33mWarning[0m for UnrestrictedWrite in contract 'Mixer':
    |
    |
  > |contract Mixer
    |{
    |    using MerkleTree for MerkleTree.Data;
  at /unique_chucks/24/0xa09e52b269aa4947a4a4ee12708b98516dcc77f6.sol(624)