Processing contract: /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol:MultiSigWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'MultiSigWallet':
    |			bool success;
    |			bytes memory _returnData;
  > |			(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);
    |			if (success)
    |				emit Execution(transactionId);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(234)

[33mWarning[0m for TODAmount in contract 'MultiSigWallet':
    |			bool success;
    |			bytes memory _returnData;
  > |			(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);
    |			if (success)
    |				emit Execution(transactionId);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(234)

[33mWarning[0m for TODReceiver in contract 'MultiSigWallet':
    |			bool success;
    |			bytes memory _returnData;
  > |			(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);
    |			if (success)
    |				emit Execution(transactionId);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(234)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSigWallet':
    |			bool success;
    |			bytes memory _returnData;
  > |			(success, _returnData) = transaction.destination.call.value(transaction.value)(transaction.data);
    |			if (success)
    |				emit Execution(transactionId);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(234)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
    |/// @author Stefan George - <stefan.george@consensys.net>
  > |contract MultiSigWallet {
    |
    |	uint constant public MAX_OWNER_COUNT = 50;
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(7)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |		for (uint i=0; i<owners.length - 1; i++)
    |		if (owners[i] == owner) {
  > |			owners[i] = owners[owners.length - 1];
    |			break;
    |		}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(144)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |		for (uint i=0; i<owners.length; i++)
    |		if (owners[i] == owner) {
  > |			owners[i] = newOwner;
    |			break;
    |		}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(164)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |			break;
    |		}
  > |		isOwner[owner] = false;
    |		isOwner[newOwner] = true;
    |		emit OwnerRemoval(owner);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(167)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |		}
    |		isOwner[owner] = false;
  > |		isOwner[newOwner] = true;
    |		emit OwnerRemoval(owner);
    |		emit OwnerAddition(newOwner);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(168)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |	{
    |		transactionId = transactionCount;
  > |		transactions[transactionId] = Transaction({
    |			destination: destination,
    |			value: value,
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(275)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |			executed: false
    |		});
  > |		transactionCount += 1;
    |		emit Submission(transactionId);
    |	}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(281)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |		if (isConfirmed(transactionId)) {
    |			Transaction storage transaction = transactions[transactionId];
  > |			transaction.executed = true;
    |
    |			bool success;
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |			else {
    |				emit ExecutionFailure(transactionId);
  > |				transaction.executed = false;
    |			}
    |		}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(239)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |pragma solidity 0.5.2;
    |
  > |// File: contracts/MultiSigWallet.sol
    |
    |/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |	validRequirement(owners.length + 1, required)
    |	{
  > |		isOwner[owner] = true;
    |		owners.push(owner);
    |		emit OwnerAddition(owner);
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |	{
    |		isOwner[owner] = true;
  > |		owners.push(owner);
    |		emit OwnerAddition(owner);
    |	}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(130)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |	ownerExists(owner)
    |	{
  > |		isOwner[owner] = false;
    |		for (uint i=0; i<owners.length - 1; i++)
    |		if (owners[i] == owner) {
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSigWallet':
    |	validRequirement(owners.length, _required)
    |	{
  > |		required = _required;
    |		emit RequirementChange(_required);
    |	}
  at /unique_chucks/15/0x539da201f33a25e4a782d3b42eb0f0a83c0fd753.sol(180)