Processing contract: /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol:AceDice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol:CryptoTycoonsVIPLib
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAOConstantGas in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(481)

[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |            
    |            VIPLibraryAddress.transfer(_jackpotFee);
  > |            vipLib.increaseJackpot(_jackpotFee);
    |
    |            // The second modulo, statistically independent from the "main" dice roll.
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(561)

[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |            if ((uint(entropy) / 100) % JACKPOT_MODULO == 0) {
    |                jackpotWin = vipLib.getJackpotSize();
  > |                vipLib.payJackpotReward(gambler);
    |            }
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(570)

[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
    |        VIPLibraryAddress.transfer(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
  > |        vipLib.increaseRankingReward(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |
    |        // Send the funds to gambler.
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(586)

[31mViolation[0m for RepeatedCall in contract 'AceDice':
    |    // Helper routine to process the payment.
    |    function sendFunds(address payable beneficiary, uint amount, uint successLogAmount, uint dice, uint rollUnder, uint betAmount) private {
  > |        if (beneficiary.send(amount)) {
    |            emit Payment(beneficiary, successLogAmount, dice, rollUnder, betAmount);
    |        } else {
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(638)

[33mWarning[0m for RepeatedCall in contract 'AceDice':
    |        if(bet.inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(581)

[33mWarning[0m for RepeatedCall in contract 'AceDice':
    |
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |        vipLib.increaseRankingReward(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(585)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(481)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |            
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(560)

[31mViolation[0m for TODReceiver in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |            
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(560)

[31mViolation[0m for TODReceiver in contract 'AceDice':
    |
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |        vipLib.increaseRankingReward(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(585)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(481)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |        if(bet.inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(581)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(481)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        if (amount >= MIN_JACKPOT_BET) {
    |            
  > |            VIPLibraryAddress.transfer(_jackpotFee);
    |            vipLib.increaseJackpot(_jackpotFee);
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(560)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |        if(bet.inviter != address(0)){
    |            // pay 10% of house edge to inviter
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100);
    |        }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(581)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |
    |        // uint128 rankingRewardFee = uint128(amount * HOUSE_EDGE_PERCENT / 100 * 9 /100);
  > |        VIPLibraryAddress.transfer(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |        vipLib.increaseRankingReward(uint128(amount * HOUSE_EDGE_PERCENT / 100 * 7 /100));
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(585)

[31mViolation[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Move bet into 'processed' state, release funds.
  > |        bet.amount = 0;
    |
    |        uint diceWinAmount;
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(608)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Lock funds.
  > |        lockedInBets += uint128(possibleWinAmount);
    |
    |        // Check whether contract has enough funds to process this bet.
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(389)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Store bet parameters on blockchain.
  > |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(398)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
  > |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(400)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  > |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(401)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
  > |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(402)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  > |        bet.gambler = msg.sender;
    |
    |        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(403)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Lock funds.
  > |        lockedInBets += uint128(possibleWinAmount);
    |        // jackpotSize += uint128(jackpotFee);
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(451)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Store bet parameters on blockchain.
  > |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(461)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
  > |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(463)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  > |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(464)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
  > |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
    |        bet.inviter = inviter;
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(465)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  > |        bet.gambler = msg.sender;
    |        bet.inviter = inviter;
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(466)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  > |        bet.inviter = inviter;
    |
    |        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(467)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Move bet into 'processed' state already.
  > |        bet.amount = 0;
    |
    |        // The RNG - combine "reveal" and blockhash of placeBet using Keccak256. Miners
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(529)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Unlock the bet amount, regardless of the outcome.
  > |        lockedInBets -= uint128(diceWinAmount);
    |        
    |        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(553)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.rollUnder);
    |
  > |        lockedInBets -= uint128(diceWinAmount);
    |
    |        // Send the refund.
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function approveNextOwner(address payable _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(276)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function acceptNextOwner() external {
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
  > |        owner = nextOwner;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(281)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    // See comment for "secretSigner" variable.
    |    function setSecretSigner(address newSecretSigner) external onlyOwner {
  > |        secretSigner = newSecretSigner;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(291)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == false) {
  > |            croupierMap[newCroupier] = true;
    |        }
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(301)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == true) {
  > |            croupierMap[newCroupier] = false;
    |        }
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(308)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |    function setVIPLibraryAddress(address payable addr) external onlyOwner{
  > |        VIPLibraryAddress = addr;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(313)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function setMaxProfit(uint _maxProfit) public onlyOwner {
    |        require (_maxProfit < MAX_AMOUNT, "maxProfit should be a sane number.");
  > |        maxProfit = _maxProfit;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(319)

[31mViolation[0m for DAOConstantGas in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(109)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(109)

[31mViolation[0m for TODAmount in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(126)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |
    |    function payJackpotReward(address payable to) external onlyCaller{
  > |        to.transfer(jackpotSize);
    |        jackpotSize = 0;
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(109)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'CryptoTycoonsVIPLib':
    |        uint128 prize = rankingRewardSize / 2;
    |        rankingRewardSize = rankingRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
    |        }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(126)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        uint exp = userExpPool[addr];
    |        exp = exp + amount;
  > |        userExpPool[addr] = exp;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(59)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (increaseAmount <= address(this).balance, "Increase amount larger than balance.");
    |        require (jackpotSize + increaseAmount <= address(this).balance, "Not enough funds.");
  > |        jackpotSize += uint128(increaseAmount);
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(105)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payJackpotReward(address payable to) external onlyCaller{
    |        to.transfer(jackpotSize);
  > |        jackpotSize = 0;
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(110)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        require (amount <= address(this).balance, "Increase amount larger than balance.");
    |        require (rankingRewardSize + amount <= address(this).balance, "Not enough funds.");
  > |        rankingRewardSize += uint128(amount);
    |    }
    |
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |    function payRankingReward(address payable to) external onlyCaller {
    |        uint128 prize = rankingRewardSize / 2;
  > |        rankingRewardSize = rankingRewardSize - prize;
    |        if(to.send(prize)){
    |            emit RankingRewardPayment(to, prize);
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(125)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == false){
  > |            callerMap[caller] = true;
    |        }
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(45)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == true) {
  > |            callerMap[caller] = false;
    |        }
    |    }
  at /unique_chucks/8/0x8027add04029e6bccd5efe2109cd2be7bd169ba8.sol(52)