Processing contract: /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol:Operable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol:TokenStore
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Operable':
    |     * @param _newOwner The address to transfer ownership to.
    |     */
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        _pendingOwner = _newOwner;
    |    }
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'Operable':
    |     */
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        _pendingOwner = _newOwner;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'Operable':
    |    function claimOwnership() public onlyPendingOwner {
    |        emit OwnershipTransferred(_owner, _pendingOwner);
  > |        _owner = _pendingOwner;
    |        _pendingOwner = address(0); 
    |    }
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Operable':
    |        emit OwnershipTransferred(_owner, _pendingOwner);
    |        _owner = _pendingOwner;
  > |        _pendingOwner = address(0); 
    |    }
    |    
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'Operable':
    |        require(_newOperator != address(0), "Cannot change the newOperator to the zero address");
    |        emit OperatorChanged(_operator, _newOperator);
  > |        _operator = _newOperator;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(117)

[31mViolation[0m for MissingInputValidation in contract 'Ownable':
    |     * @param _newOwner The address to transfer ownership to.
    |     */
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        _pendingOwner = _newOwner;
    |    }
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |     */
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        _pendingOwner = _newOwner;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function claimOwnership() public onlyPendingOwner {
    |        emit OwnershipTransferred(_owner, _pendingOwner);
  > |        _owner = _pendingOwner;
    |        _pendingOwner = address(0); 
    |    }
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        emit OwnershipTransferred(_owner, _pendingOwner);
    |        _owner = _pendingOwner;
  > |        _pendingOwner = address(0); 
    |    }
    |    
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(78)

[31mViolation[0m for LockedEther in contract 'TokenStore':
    |
    |
  > |contract TokenStore is Operable {
    |
    |    using SafeMath for uint256;
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |
  > |contract TokenStore is Operable {
    |
    |    using SafeMath for uint256;
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |     */
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        _pendingOwner = _newOwner;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |    function claimOwnership() public onlyPendingOwner {
    |        emit OwnershipTransferred(_owner, _pendingOwner);
  > |        _owner = _pendingOwner;
    |        _pendingOwner = address(0); 
    |    }
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |        emit OwnershipTransferred(_owner, _pendingOwner);
    |        _owner = _pendingOwner;
  > |        _pendingOwner = address(0); 
    |    }
    |    
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(78)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |        require(_newOperator != address(0), "Cannot change the newOperator to the zero address");
    |        emit OperatorChanged(_operator, _newOperator);
  > |        _operator = _newOperator;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function addBalance(address _holder, uint256 _value) public onlyOperator {
  > |        balances[_holder] = balances[_holder].add(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(215)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function subBalance(address _holder, uint256 _value) public onlyOperator {
  > |        balances[_holder] = balances[_holder].sub(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function setBalance(address _holder, uint256 _value) public onlyOperator {
  > |        balances[_holder] = _value;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function addAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {
  > |        allowed[_holder][_spender] = allowed[_holder][_spender].add(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(227)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function subAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {
  > |        allowed[_holder][_spender] = allowed[_holder][_spender].sub(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function setAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {
  > |        allowed[_holder][_spender] = _value;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function addTotalSupply(uint256 _value) public onlyOperator {
  > |        totalSupply = totalSupply.add(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(239)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function subTotalSupply(uint256 _value) public onlyOperator {
  > |        totalSupply = totalSupply.sub(_value);
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(243)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenStore':
    |
    |    function setTotalSupply(uint256 _value) public onlyOperator {
  > |        totalSupply = _value;
    |    }
    |
  at /unique_chucks/33/0x8563d2d776f649fc55a96cab46176d5683b9d0d8.sol(247)