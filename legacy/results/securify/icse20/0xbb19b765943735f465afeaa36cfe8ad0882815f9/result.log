Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:AddressUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:ERC165
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:ERC721
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:ERC721Enumerable
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:ERC721Metadata
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:ERC721TokenReceiver
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenEnumerable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenEnumerableMock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenMetadata
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenMetadataEnumerableMock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenMetadataMock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:NFTokenMock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:SupportsInterface
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol:Unchain
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |    require(_approved != tokenOwner);
    |
  > |    idToApprovals[_tokenId] = _approved;
    |    emit Approval(tokenOwner, _approved, _tokenId);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |    require(idToOwner[_tokenId] == _from);
    |    assert(ownerToNFTokenCount[_from] > 0);
  > |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
    |    delete idToOwner[_tokenId];
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |    assert(ownerToNFTokenCount[_from] > 0);
    |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
  > |    delete idToOwner[_tokenId];
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |    require(idToOwner[_tokenId] == address(0));
    |
  > |    idToOwner[_tokenId] = _to;
    |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(809)

[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |
    |    idToOwner[_tokenId] = _to;
  > |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(810)

[33mWarning[0m for UnrestrictedWrite in contract 'NFToken':
    |    if (idToApprovals[_tokenId] != address(0))
    |    {
  > |      delete idToApprovals[_tokenId];
    |    }
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(868)

[31mViolation[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    | * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.
    | */
  > |contract NFTokenEnumerable is
    |  NFToken,
    |  ERC721Enumerable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(924)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |pragma solidity 0.5.1;
    |
  > |// File: src/contracts/tokens/erc721.sol
    |
    |/**
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |    require(_approved != tokenOwner);
    |
  > |    idToApprovals[_tokenId] = _approved;
    |    emit Approval(tokenOwner, _approved, _tokenId);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |    if (idToApprovals[_tokenId] != address(0))
    |    {
  > |      delete idToApprovals[_tokenId];
    |    }
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(868)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    | * @dev Optional enumeration implementation for ERC-721 non-fungible token standard.
    | */
  > |contract NFTokenEnumerable is
    |  NFToken,
    |  ERC721Enumerable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(924)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |  {
    |    require(idToOwner[_tokenId] == _from);
  > |    delete idToOwner[_tokenId];
    |    assert(ownerToIds[_from].length > 0);
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1064)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |    {
    |      uint256 lastToken = ownerToIds[_from][lastTokenIndex];
  > |      ownerToIds[_from][tokenToRemoveIndex] = lastToken;
    |      idToOwnerIndex[lastToken] = tokenToRemoveIndex;
    |    }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1073)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |      uint256 lastToken = ownerToIds[_from][lastTokenIndex];
    |      ownerToIds[_from][tokenToRemoveIndex] = lastToken;
  > |      idToOwnerIndex[lastToken] = tokenToRemoveIndex;
    |    }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1074)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |  {
    |    require(idToOwner[_tokenId] == address(0));
  > |    idToOwner[_tokenId] = _to;
    |
    |    uint256 length = ownerToIds[_to].push(_tokenId);
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1093)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |    idToOwner[_tokenId] = _to;
    |
  > |    uint256 length = ownerToIds[_to].push(_tokenId);
    |    idToOwnerIndex[_tokenId] = length - 1;
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1095)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerable':
    |
    |    uint256 length = ownerToIds[_to].push(_tokenId);
  > |    idToOwnerIndex[_tokenId] = length - 1;
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1096)

[31mViolation[0m for LockedEther in contract 'NFTokenEnumerableMock':
    | * @dev This is an example contract implementation of NFToken with enumerable extension.
    | */
  > |contract NFTokenEnumerableMock is
    |  NFTokenEnumerable,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1181)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenEnumerableMock':
    | * @dev This is an example contract implementation of NFToken with enumerable extension.
    | */
  > |contract NFTokenEnumerableMock is
    |  NFTokenEnumerable,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1181)

[31mViolation[0m for LockedEther in contract 'NFTokenMetadata':
    | * @dev Optional metadata implementation for ERC-721 non-fungible token standard.
    | */
  > |contract NFTokenMetadata is
    |  NFToken,
    |  ERC721Metadata
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1257)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |    require(_approved != tokenOwner);
    |
  > |    idToApprovals[_tokenId] = _approved;
    |    emit Approval(tokenOwner, _approved, _tokenId);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |    require(idToOwner[_tokenId] == _from);
    |    assert(ownerToNFTokenCount[_from] > 0);
  > |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
    |    delete idToOwner[_tokenId];
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |    assert(ownerToNFTokenCount[_from] > 0);
    |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
  > |    delete idToOwner[_tokenId];
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |    require(idToOwner[_tokenId] == address(0));
    |
  > |    idToOwner[_tokenId] = _to;
    |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(809)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |
    |    idToOwner[_tokenId] = _to;
  > |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(810)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadata':
    |    if (idToApprovals[_tokenId] != address(0))
    |    {
  > |      delete idToApprovals[_tokenId];
    |    }
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(868)

[31mViolation[0m for LockedEther in contract 'NFTokenMetadataEnumerableMock':
    | * extensions.
    | */
  > |contract NFTokenMetadataEnumerableMock is
    |  NFTokenEnumerable,
    |  NFTokenMetadata,
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1369)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataEnumerableMock':
    | * extensions.
    | */
  > |contract NFTokenMetadataEnumerableMock is
    |  NFTokenEnumerable,
    |  NFTokenMetadata,
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1369)

[31mViolation[0m for LockedEther in contract 'NFTokenMetadataMock':
    | * @dev This is an example contract implementation of NFToken with metadata extension.
    | */
  > |contract NFTokenMetadataMock is
    |  NFTokenMetadata,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1428)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    | * @dev This is an example contract implementation of NFToken with metadata extension.
    | */
  > |contract NFTokenMetadataMock is
    |  NFTokenMetadata,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1428)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    require(_approved != tokenOwner);
    |
  > |    idToApprovals[_tokenId] = _approved;
    |    emit Approval(tokenOwner, _approved, _tokenId);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    require(idToOwner[_tokenId] == _from);
    |    assert(ownerToNFTokenCount[_from] > 0);
  > |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
    |    delete idToOwner[_tokenId];
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    assert(ownerToNFTokenCount[_from] > 0);
    |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
  > |    delete idToOwner[_tokenId];
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    require(idToOwner[_tokenId] == address(0));
    |
  > |    idToOwner[_tokenId] = _to;
    |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(809)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |
    |    idToOwner[_tokenId] = _to;
  > |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(810)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    if (idToApprovals[_tokenId] != address(0))
    |    {
  > |      delete idToApprovals[_tokenId];
    |    }
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(868)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    |    require(_newOwner != address(0), ZERO_ADDRESS);
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1171)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMetadataMock':
    | * @dev This is an example contract implementation of NFToken with metadata extension.
    | */
  > |contract NFTokenMetadataMock is
    |  NFTokenMetadata,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1428)

[31mViolation[0m for LockedEther in contract 'NFTokenMock':
    | * @dev This is an example contract implementation of NFToken.
    | */
  > |contract NFTokenMock is
    |  NFToken,
    |  Ownable
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1486)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    require(_approved != tokenOwner);
    |
  > |    idToApprovals[_tokenId] = _approved;
    |    emit Approval(tokenOwner, _approved, _tokenId);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    require(idToOwner[_tokenId] == _from);
    |    assert(ownerToNFTokenCount[_from] > 0);
  > |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
    |    delete idToOwner[_tokenId];
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(791)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    assert(ownerToNFTokenCount[_from] > 0);
    |    ownerToNFTokenCount[_from] = ownerToNFTokenCount[_from] - 1;
  > |    delete idToOwner[_tokenId];
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(792)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    require(idToOwner[_tokenId] == address(0));
    |
  > |    idToOwner[_tokenId] = _to;
    |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(809)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |
    |    idToOwner[_tokenId] = _to;
  > |    ownerToNFTokenCount[_to] = ownerToNFTokenCount[_to].add(1);
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(810)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    if (idToApprovals[_tokenId] != address(0))
    |    {
  > |      delete idToApprovals[_tokenId];
    |    }
    |  }
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(868)

[33mWarning[0m for UnrestrictedWrite in contract 'NFTokenMock':
    |    require(_newOwner != address(0), ZERO_ADDRESS);
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1171)

[31mViolation[0m for LockedEther in contract 'Ownable':
    | * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol
    | */
  > |contract Ownable {
    |  
    |  /**
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1122)

[33mWarning[0m for MissingInputValidation in contract 'Ownable':
    |   * @param _newOwner The address to transfer ownership to.
    |   */
  > |  function transferOwnership(
    |    address _newOwner
    |  )
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1163)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0), ZERO_ADDRESS);
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1171)

[31mViolation[0m for MissingInputValidation in contract 'SupportsInterface':
    |   * @param _interfaceID Id of the interface.
    |   */
  > |  function supportsInterface(
    |    bytes4 _interfaceID
    |  )
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(366)

[31mViolation[0m for LockedEther in contract 'Unchain':
    |// File: src/contracts/tokens/unchain.sol
    |
  > |contract Unchain is
    |  NFTokenMetadata,
    |  NFTokenEnumerable,
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1523)

[33mWarning[0m for UnrestrictedWrite in contract 'Unchain':
    |// File: src/contracts/tokens/unchain.sol
    |
  > |contract Unchain is
    |  NFTokenMetadata,
    |  NFTokenEnumerable,
  at /unique_chucks/36/0xbb19b765943735f465afeaa36cfe8ad0882815f9.sol(1523)