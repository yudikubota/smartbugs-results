Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:AOIonInterface
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:AOKilo
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:INameAccountRecovery
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:INamePublicKey
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:INameTAOPosition
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:ionRecipient
Processing contract: /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol:tokenRecipient
[33mWarning[0m for TODAmount in contract 'AOIonInterface':
    |		require (myAddress.balance >= amount.mul(sellPrice));
    |		_transfer(msg.sender, address(this), amount);
  > |		msg.sender.transfer(amount.mul(sellPrice));
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1105)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'AOIonInterface':
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyTheAO {
    |		require (_recipient != address(0));
  > |		_recipient.transfer(_amount);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(841)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(791)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(801)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(810)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(811)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {
    |		require (_namePublicKeyAddress != address(0));
  > |		namePublicKeyAddress = _namePublicKeyAddress;
    |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(820)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_namePublicKeyAddress != address(0));
    |		namePublicKeyAddress = _namePublicKeyAddress;
  > |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(821)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(830)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(831)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	 */
    |	function freezeAccount(address target, bool freeze) public onlyTheAO {
  > |		frozenAccount[target] = freeze;
    |		emit FrozenFunds(target, freeze);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(850)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	 */
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
  > |		sellPrice = newSellPrice;
    |		buyPrice = newBuyPrice;
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(860)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
    |		sellPrice = newSellPrice;
  > |		buyPrice = newBuyPrice;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(861)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1064)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1080)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonInterface':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1082)

[33mWarning[0m for TODAmount in contract 'AOKilo':
    |		require (myAddress.balance >= amount.mul(sellPrice));
    |		_transfer(msg.sender, address(this), amount);
  > |		msg.sender.transfer(amount.mul(sellPrice));
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1105)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'AOKilo':
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyTheAO {
    |		require (_recipient != address(0));
  > |		_recipient.transfer(_amount);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(841)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(791)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(801)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(810)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(811)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {
    |		require (_namePublicKeyAddress != address(0));
  > |		namePublicKeyAddress = _namePublicKeyAddress;
    |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(820)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		require (_namePublicKeyAddress != address(0));
    |		namePublicKeyAddress = _namePublicKeyAddress;
  > |		_namePublicKey = INamePublicKey(namePublicKeyAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(821)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(830)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(831)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	 */
    |	function freezeAccount(address target, bool freeze) public onlyTheAO {
  > |		frozenAccount[target] = freeze;
    |		emit FrozenFunds(target, freeze);
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(850)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	 */
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
  > |		sellPrice = newSellPrice;
    |		buyPrice = newBuyPrice;
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(860)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |	function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public onlyTheAO {
    |		sellPrice = newSellPrice;
  > |		buyPrice = newBuyPrice;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(861)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1064)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1080)

[31mViolation[0m for UnrestrictedWrite in contract 'AOKilo':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(1082)

[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(356)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(368)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(377)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(406)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(315)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(315)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(668)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(697)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(689)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(700)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(99)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(147)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(223)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(239)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/36/0xaced1e7a912d69710d05ff855dc5a0024fe8922b.sol(241)