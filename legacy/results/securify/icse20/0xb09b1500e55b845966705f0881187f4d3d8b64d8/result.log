Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:ERC20
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:ERC20Basic
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:MountableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol:TokenTimelock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(63)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(63)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    address burner = msg.sender;
    |    balances[burner] = balances[burner].sub(_value);
  > |    totalSupply = totalSupply.sub(_value);
    |    emit Burn(burner, _value);
    |  }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(253)

[31mViolation[0m for TODAmount in contract 'MountableToken':
    |
    |        doIssueTokens(_beneficiary, tokens);
  > |        owner.transfer(address(this).balance);
    |
    |    }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(342)

[31mViolation[0m for TODAmount in contract 'MountableToken':
    |        tokenSaleClosed = true;
    |
  > |        owner.transfer(address(this).balance);
    |        
    |    }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(421)

[31mViolation[0m for TODReceiver in contract 'MountableToken':
    |
    |        doIssueTokens(_beneficiary, tokens);
  > |        owner.transfer(address(this).balance);
    |
    |    }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(342)

[31mViolation[0m for TODReceiver in contract 'MountableToken':
    |        tokenSaleClosed = true;
    |
  > |        owner.transfer(address(this).balance);
    |        
    |    }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(421)

[31mViolation[0m for UnrestrictedWrite in contract 'MountableToken':
    |
    |    function owned() public {
  > |        owner = msg.sender;
    |    }
    |
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'MountableToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'MountableToken':
    |        TokenTimelock lockedTeamTokens = new TokenTimelock();
    |        lockedTeamTokens.tokenTimelock(this, owner, dateTeamTokensLockedTill);
  > |        timelockContractAddress = address(lockedTeamTokens);
    |        balances[timelockContractAddress] = balances[timelockContractAddress].add(lockedTokens);
    |        /// fire event when tokens issued
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(434)

[31mViolation[0m for UnrestrictedWrite in contract 'Owned':
    |
    |    function owned() public {
  > |        owner = msg.sender;
    |    }
    |
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |    }
    |
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(234)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(63)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(164)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(165)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenTimelock':
    |    function tokenTimelock(ERC20Basic _token, address _beneficiary, uint64 _releaseTime) public {
    |        require(_releaseTime > uint64(block.timestamp));
  > |        token = _token;
    |        beneficiary = _beneficiary;
    |        releaseTime = _releaseTime;
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(124)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenTimelock':
    |        require(_releaseTime > uint64(block.timestamp));
    |        token = _token;
  > |        beneficiary = _beneficiary;
    |        releaseTime = _releaseTime;
    |    }
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(125)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenTimelock':
    |        token = _token;
    |        beneficiary = _beneficiary;
  > |        releaseTime = _releaseTime;
    |    }
    |
  at /unique_chucks/26/0xb09b1500e55b845966705f0881187f4d3d8b64d8.sol(126)