Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:AbstractAmbix
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:IERC20
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:Ownable
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:PublicAmbix
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'AbstractAmbix':
    |  part of equation and send (transfer) right part.
    |*/
  > |contract AbstractAmbix is Ownable {
    |    using SafeERC20 for ERC20Burnable;
    |    using SafeERC20 for ERC20;
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(454)

[31mViolation[0m for UnrestrictedWrite in contract 'AbstractAmbix':
  > |// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(1)

[31mViolation[0m for UnrestrictedWrite in contract 'AbstractAmbix':
    |  part of equation and send (transfer) right part.
    |*/
  > |contract AbstractAmbix is Ownable {
    |    using SafeERC20 for ERC20Burnable;
    |    using SafeERC20 for ERC20;
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(454)

[33mWarning[0m for UnrestrictedWrite in contract 'AbstractAmbix':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'AbstractAmbix':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(425)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(264)

[31mViolation[0m for LockedEther in contract 'PublicAmbix':
    |
    |
  > |contract PublicAmbix is AbstractAmbix {
    |    /**
    |     * @dev Run distillation process
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(557)

[31mViolation[0m for RepeatedCall in contract 'PublicAmbix':
    |
    |    function safeTransfer(IERC20 token, address to, uint256 value) internal {
  > |        require(token.transfer(to, value));
    |    }
    |
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(328)

[31mViolation[0m for RepeatedCall in contract 'PublicAmbix':
    |            // Burning run
    |            for (i = 0; i < A[_ix].length; ++i)
  > |                ERC20Burnable(A[_ix][i]).burnFrom(msg.sender, mux * N[_ix][i]);
    |
    |            // Transfer up
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(521)

[31mViolation[0m for UnrestrictedWrite in contract 'PublicAmbix':
  > |// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(1)

[31mViolation[0m for UnrestrictedWrite in contract 'PublicAmbix':
    |
    |
  > |contract PublicAmbix is AbstractAmbix {
    |    /**
    |     * @dev Run distillation process
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(557)

[33mWarning[0m for UnrestrictedWrite in contract 'PublicAmbix':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'PublicAmbix':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/21/0x06d77d039a6bd049fc9e651b7ecbb2694ac1f96f.sol(425)