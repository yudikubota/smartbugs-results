Processing contract: /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol:ERC20Interface
Processing contract: /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol:Forwarder
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol:MultiSignWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Forwarder':
    |    * @param _value the amount of token.
    |    */
  > |    function flushToken(address _from, uint _value) external{
    |        require(ERC20Interface(_from).transfer(parentAddress, _value), "instance error");
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(68)

[31mViolation[0m for TODAmount in contract 'Forwarder':
    |    */
    |    function flush() public {
  > |        parentAddress.transfer(address(this).balance);
    |    }
    |}
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(77)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Forwarder':
    |    */
    |    function flush() public {
  > |        parentAddress.transfer(address(this).balance);
    |    }
    |}
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(77)

[33mWarning[0m for LockedEther in contract 'MultiSignWallet':
    |* @title MultiSignWallet
    |*/
  > |contract MultiSignWallet {
    |    
    |    address[] public signers;
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(84)

[33mWarning[0m for TODAmount in contract 'MultiSignWallet':
    |        bytes32 operationHash = keccak256(abi.encodePacked("ETHER", toAddress, value, data, expireTime, sequenceId));
    |        address otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);
  > |        toAddress.transfer(value);
    |        emit Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(223)

[33mWarning[0m for TODReceiver in contract 'MultiSignWallet':
    |        bytes32 operationHash = keccak256(abi.encodePacked("ETHER", toAddress, value, data, expireTime, sequenceId));
    |        address otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);
  > |        toAddress.transfer(value);
    |        emit Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(223)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSignWallet':
    |        bytes32 operationHash = keccak256(abi.encodePacked("ETHER", toAddress, value, data, expireTime, sequenceId));
    |        address otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);
  > |        toAddress.transfer(value);
    |        emit Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSignWallet':
    |    function activateSafeMode() public onlySigner {
    |        require(!safeMode);
  > |        safeMode = true;
    |        emit SafeModeActivated(msg.sender);
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSignWallet':
    |    function turnOffSafeMode() public onlySigner {
    |        require(safeMode);
  > |        safeMode = false;
    |        emit SafeModeInActivated(msg.sender);
    |    }
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSignWallet':
    |    function createForwarder() public returns (address) {
    |        Forwarder f = new Forwarder();
  > |        forwarderCount += 1;
    |        emit ForwarderCreated(address(f));
    |        return(address(f));
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(167)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSignWallet':
    |    function tryInsertSequenceId(uint sequenceId) private onlySigner {
    |        require(sequenceId > lastsequenceId && sequenceId <= (lastsequenceId+1000), "Enter Valid sequenceId");
  > |        lastsequenceId=sequenceId;
    |    }
    |
  at /unique_chucks/33/0x5075be995f1bf3f8039087be65c731fcf750cfc6.sol(285)