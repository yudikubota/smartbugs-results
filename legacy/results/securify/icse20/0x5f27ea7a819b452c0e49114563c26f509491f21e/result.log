Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:CustodianUpgradeable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:ERC20Impl
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:ERC20ImplUpgradeable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:ERC20Interface
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:ERC20Proxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:ERC20Store
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:LockRequestable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol:TokenRecipient
[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |
    |    
  > |    mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
    |
    |    constructor(address _custodian) public LockRequestable() {
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(57)

[31mViolation[0m for MissingInputValidation in contract 'CustodianUpgradeable':
    |    }
    |
  > |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
    |        custodian = getCustodianChangeReq(_lockId);
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(80)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |    function generateLockId() internal returns (bytes32 lockId) {
    |        return keccak256(
  > |        abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |        );
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |        lockId = generateLockId();
    |
  > |        custodianChangeReqs[lockId] = CustodianChangeRequest({
    |            proposedNew: _proposedCustodian
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(73)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |
    |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |        custodian = getCustodianChangeReq(_lockId);
    |
    |        delete custodianChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'CustodianUpgradeable':
    |        custodian = getCustodianChangeReq(_lockId);
    |
  > |        delete custodianChangeReqs[_lockId];
    |
    |        emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(83)

[31mViolation[0m for LockedEther in contract 'ERC20Impl':
    |}
    |
  > |contract ERC20Impl is CustodianUpgradeable {
    |
    |    struct PendingPrint {
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(105)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |        require(_spender != address(0)); 
    |        erc20Store.setAllowance(_sender, _spender, _value);
  > |        erc20Proxy.emitApproval(_sender, _spender, _value);
    |        return true;
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(168)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |
    |        erc20Store.setBalance(_burner, balanceOfSender - _value);
  > |        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
    |
    |        erc20Proxy.emitBurn(_burner, _value, _note);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(315)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |
    |        erc20Proxy.emitBurn(_burner, _value, _note);
  > |        erc20Proxy.emitTransfer(_burner, address(0), _value);
    |        return true;
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(318)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |            if (msg.sender != to) {
    |                senderBalance -= v;
  > |                erc20Store.addBalance(to, v);
    |            }
    |            erc20Proxy.emitTransfer(msg.sender, to, v);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(336)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                erc20Store.addBalance(to, v);
    |            }
  > |            erc20Proxy.emitTransfer(msg.sender, to, v);
    |        }
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(338)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |        }
    |
  > |        erc20Store.setBalance(msg.sender, senderBalance);
    |
    |        return true;
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(341)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                sweptSet[from] = true;
    |               
  > |                uint256 fromBalance = erc20Store.balances(from);
    |
    |                if (fromBalance > 0) {
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(361)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                if (fromBalance > 0) {
    |                    sweptBalance += fromBalance;
  > |                    erc20Store.setBalance(from, 0);
    |                    erc20Proxy.emitTransfer(from, _to, fromBalance);
    |                }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(365)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                    sweptBalance += fromBalance;
    |                    erc20Store.setBalance(from, 0);
  > |                    erc20Proxy.emitTransfer(from, _to, fromBalance);
    |                }
    |            }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(366)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |
    |            if (sweptSet[from]) {
  > |                uint256 fromBalance = erc20Store.balances(from);
    |
    |                if (fromBalance > 0) {
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(385)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                    sweptBalance += fromBalance;
    |
  > |                    erc20Store.setBalance(from, 0);
    |
    |                    erc20Proxy.emitTransfer(from, _to, fromBalance);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(390)

[31mViolation[0m for RepeatedCall in contract 'ERC20Impl':
    |                    erc20Store.setBalance(from, 0);
    |
  > |                    erc20Proxy.emitTransfer(from, _to, fromBalance);
    |                }
    |            }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(392)

[33mWarning[0m for RepeatedCall in contract 'ERC20Impl':
    |        TokenRecipient spender = TokenRecipient(_spender);
    |        if (approveWithSender(_sender, _spender, _value)) {
  > |            spender.receiveApproval(_sender, _value, msg.sender, _extraData);
    |            return true;
    |        }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(185)

[33mWarning[0m for RepeatedCall in contract 'ERC20Impl':
    |        erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
    |
  > |        erc20Proxy.emitBurn(_burner, _value, _note);
    |        erc20Proxy.emitTransfer(_burner, address(0), _value);
    |        return true;
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(317)

[33mWarning[0m for RepeatedCall in contract 'ERC20Impl':
    |
    |        if (sweptBalance > 0) {
  > |            erc20Store.addBalance(_to, sweptBalance);
    |        }
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(372)

[33mWarning[0m for RepeatedCall in contract 'ERC20Impl':
    |
    |        if (sweptBalance > 0) {
  > |            erc20Store.addBalance(_to, sweptBalance);
    |        }
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(398)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |    function generateLockId() internal returns (bytes32 lockId) {
    |        return keccak256(
  > |        abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |        );
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        lockId = generateLockId();
    |
  > |        custodianChangeReqs[lockId] = CustodianChangeRequest({
    |            proposedNew: _proposedCustodian
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        lockId = generateLockId();
    |
  > |        pendingPrintMap[lockId] = PendingPrint({
    |            receiver: _receiver,
    |            value: _value
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(235)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |
    |        lockId = generateLockId();
  > |        pendingBurnLimitsMap[lockId] = PendingBurnLimits({
    |            min: _newMin,
    |            max: _newMax,
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(280)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |            
    |            if (from != address(0)) {
  > |                sweptSet[from] = true;
    |               
    |                uint256 fromBalance = erc20Store.balances(from);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |
    |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |        custodian = getCustodianChangeReq(_lockId);
    |
    |        delete custodianChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        custodian = getCustodianChangeReq(_lockId);
    |
  > |        delete custodianChangeReqs[_lockId];
    |
    |        emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        uint256 value = print.value;
    |
  > |        delete pendingPrintMap[_lockId];
    |
    |        uint256 supply = erc20Store.totalSupply();
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        bool isSet = limits.isSet;
    |        require(isSet == true, "not such lockId");
  > |        delete pendingBurnLimitsMap[_lockId];
    |
    |        emit BurnLimitsChangeConfirmed(_lockId, limits.min, limits.max);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(296)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |
    |        emit BurnLimitsChangeConfirmed(_lockId, limits.min, limits.max);
  > |        burnMin = limits.min;
    |        burnMax = limits.max;   
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(299)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Impl':
    |        emit BurnLimitsChangeConfirmed(_lockId, limits.min, limits.max);
    |        burnMin = limits.min;
  > |        burnMax = limits.max;   
    |    }
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(300)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |    function generateLockId() internal returns (bytes32 lockId) {
    |        return keccak256(
  > |        abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |        );
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |        lockId = generateLockId();
    |
  > |        custodianChangeReqs[lockId] = CustodianChangeRequest({
    |            proposedNew: _proposedCustodian
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |        lockId = generateLockId();
    |
  > |        implChangeReqs[lockId] = ImplChangeRequest({
    |            proposedNew: _proposedImpl
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(497)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |
    |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |        custodian = getCustodianChangeReq(_lockId);
    |
    |        delete custodianChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |        custodian = getCustodianChangeReq(_lockId);
    |
  > |        delete custodianChangeReqs[_lockId];
    |
    |        emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |
    |    function confirmImplChange(bytes32 _lockId) public onlyCustodian {
  > |        erc20Impl = getImplChangeReq(_lockId);
    |
    |        delete implChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(505)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20ImplUpgradeable':
    |        erc20Impl = getImplChangeReq(_lockId);
    |
  > |        delete implChangeReqs[_lockId];
    |
    |        emit ImplChangeConfirmed(_lockId, address(erc20Impl));
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(507)

[31mViolation[0m for LockedEther in contract 'ERC20Proxy':
    |}
    |
  > |contract ERC20Proxy is ERC20Interface, ERC20ImplUpgradeable {
    |
    |    string public name;
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(529)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |    function generateLockId() internal returns (bytes32 lockId) {
    |        return keccak256(
  > |        abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |        );
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |        lockId = generateLockId();
    |
  > |        custodianChangeReqs[lockId] = CustodianChangeRequest({
    |            proposedNew: _proposedCustodian
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |        lockId = generateLockId();
    |
  > |        implChangeReqs[lockId] = ImplChangeRequest({
    |            proposedNew: _proposedImpl
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(497)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |
    |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |        custodian = getCustodianChangeReq(_lockId);
    |
    |        delete custodianChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |        custodian = getCustodianChangeReq(_lockId);
    |
  > |        delete custodianChangeReqs[_lockId];
    |
    |        emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |
    |    function confirmImplChange(bytes32 _lockId) public onlyCustodian {
  > |        erc20Impl = getImplChangeReq(_lockId);
    |
    |        delete implChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(505)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Proxy':
    |        erc20Impl = getImplChangeReq(_lockId);
    |
  > |        delete implChangeReqs[_lockId];
    |
    |        emit ImplChangeConfirmed(_lockId, address(erc20Impl));
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(507)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Store':
    |    function generateLockId() internal returns (bytes32 lockId) {
    |        return keccak256(
  > |        abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount)
    |        );
    |    }
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(43)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        lockId = generateLockId();
    |
  > |        custodianChangeReqs[lockId] = CustodianChangeRequest({
    |            proposedNew: _proposedCustodian
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(73)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        lockId = generateLockId();
    |
  > |        implChangeReqs[lockId] = ImplChangeRequest({
    |            proposedNew: _proposedImpl
    |        });
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(497)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |
    |    function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
  > |        custodian = getCustodianChangeReq(_lockId);
    |
    |        delete custodianChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        custodian = getCustodianChangeReq(_lockId);
    |
  > |        delete custodianChangeReqs[_lockId];
    |
    |        emit CustodianChangeConfirmed(_lockId, custodian);
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |
    |    function confirmImplChange(bytes32 _lockId) public onlyCustodian {
  > |        erc20Impl = getImplChangeReq(_lockId);
    |
    |        delete implChangeReqs[_lockId];
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(505)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        erc20Impl = getImplChangeReq(_lockId);
    |
  > |        delete implChangeReqs[_lockId];
    |
    |        emit ImplChangeConfirmed(_lockId, address(erc20Impl));
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(507)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        onlyImpl
    |    {
  > |        totalSupply = _newTotalSupply;
    |    }
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(617)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        onlyImpl
    |    {
  > |        allowed[_owner][_spender] = _value;
    |    }
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(628)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        onlyImpl
    |    {
  > |        balances[_owner] = _newBalance;
    |    }
    |
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(638)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Store':
    |        onlyImpl
    |    {
  > |        balances[_owner] = balances[_owner] + _balanceIncrease;
    |    }
    |}
  at /unique_chucks/33/0x5f27ea7a819b452c0e49114563c26f509491f21e.sol(648)