Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:DebtEngine
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:ERC165
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:ERC721Base
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:IERC165
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:IERC173
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:IERC20
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:IsContract
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:Model
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:RateOracle
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol:URIProvider
[31mViolation[0m for LockedEther in contract 'DebtEngine':
    |
    |
  > |contract DebtEngine is ERC721Base, Ownable {
    |    using IsContract for address;
    |
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1070)

[31mViolation[0m for RepeatedCall in contract 'DebtEngine':
    |            let x := mload(0x40)
    |
  > |            success := call(
    |                            gas,                  // Send all gas
    |                            _contract,            // To addr
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(988)

[31mViolation[0m for RepeatedCall in contract 'DebtEngine':
    |        if (address(oracle) != address(0)) {
    |            // Convert
  > |            (uint256 tokens, uint256 equivalent) = oracle.readSample(_oracleData);
    |            emit ReadedOracle(_id, tokens, equivalent);
    |            paidToken = _toToken(paid, tokens, equivalent);
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1338)

[31mViolation[0m for RepeatedCall in contract 'DebtEngine':
    |
    |        // Pull tokens from payer
  > |        require(token.transferFrom(msg.sender, address(this), paidToken), "Error pulling payment tokens");
    |
    |        // Add balance to the debt
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1346)

[31mViolation[0m for RepeatedCall in contract 'DebtEngine':
    |
    |        // Pull tokens from payer
  > |        require(token.transferFrom(msg.sender, address(this), paidToken), "Error pulling tokens");
    |
    |        // Add balance to the debt
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1401)

[31mViolation[0m for RepeatedCall in contract 'DebtEngine':
    |
    |        // Pull tokens from payer
  > |        require(token.transferFrom(msg.sender, address(this), paidToken), "Error pulling payment tokens");
    |
    |        // Add balance to debt
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1535)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |    function _addAssetTo(address _to, uint256 _assetId) internal {
    |        // Store asset owner
  > |        _holderOf[_assetId] = _to;
    |
    |        // Store index of the asset
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(783)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |
    |
  > |contract DebtEngine is ERC721Base, Ownable {
    |    using IsContract for address;
    |
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1070)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        );
    |
  > |        debts[id] = Debt({
    |            error: false,
    |            balance: 0,
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1187)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        );
    |
  > |        debts[id] = Debt({
    |            error: false,
    |            balance: 0,
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1224)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        );
    |
  > |        debts[id] = Debt({
    |            error: false,
    |            balance: 0,
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1258)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        uint256 newBalance = paidToken.add(debt.balance);
    |        require(newBalance < 340282366920938463463374607431768211456, "uint128 Overflow");
  > |        debt.balance = uint128(newBalance);
    |
    |        // Emit pay event
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1351)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        available = paidToken.add(debt.balance);
    |        require(available < 340282366920938463463374607431768211456, "uint128 Overflow");
  > |        debt.balance = uint128(available);
    |
    |        // Emit pay event
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1407)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |        uint256 newBalance = paidToken.add(debt.balance);
    |        require(newBalance < 340282366920938463463374607431768211456, "uint128 Overflow");
  > |        debt.balance = uint128(newBalance);
    |    }
    |
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1540)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |                });
    |
  > |                delete debts[_id].error;
    |            }
    |
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1571)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |                _callData: msg.data
    |            });
  > |            debts[_id].error = true;
    |        }
    |    }
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1584)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |                });
    |
  > |                delete debt.error;
    |            }
    |
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1652)

[33mWarning[0m for UnrestrictedWrite in contract 'DebtEngine':
    |                _callData: msg.data
    |            });
  > |            debt.error = true;
    |        }
    |    }
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1665)

[31mViolation[0m for LockedEther in contract 'ERC721Base':
    |
    |
  > |contract ERC721Base is ERC165 {
    |    using SafeMath for uint256;
    |    using IsContract for address;
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(526)

[31mViolation[0m for RepeatedCall in contract 'ERC721Base':
    |            let x := mload(0x40)
    |
  > |            success := call(
    |                            gas,                  // Send all gas
    |                            _contract,            // To addr
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(988)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC721Base':
    |
    |
  > |contract ERC721Base is ERC165 {
    |    using SafeMath for uint256;
    |    using IsContract for address;
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(526)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0), "0x0 Is not a valid owner");
    |        emit OwnershipTransferred(_owner, _newOwner);
  > |        _owner = _newOwner;
    |    }
    |}
  at /unique_chucks/41/0xc1b4f53ab978de0bbc347c6d85cef40226f85758.sol(1055)