Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:ERC20
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:ERC20Basic
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:ERC223Mixin
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:ERC223ReceiverMixin
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:ProductProtocolToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:RBACERC223TokenFinalization
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:RBACMintableTokenMixin
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:RBACMixin
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:StandardBurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |
    |    balances[_who] = balances[_who].sub(_value);
  > |    totalSupply_ = totalSupply_.sub(_value);
    |    emit Burn(_who, _value);
    |    emit Transfer(_who, address(0), _value);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(606)

[31mViolation[0m for LockedEther in contract 'ERC223Mixin':
    |
    |/// @title Custom implementation of ERC223 
  > |contract ERC223Mixin is StandardToken {
    |  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);
    |
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(255)

[31mViolation[0m for LockedEther in contract 'ProductProtocolToken':
    |/// @title Product Protocol token implementation
    |/// @dev Implements ERC20, ERC223 and MintableToken interfaces
  > |contract ProductProtocolToken is StandardBurnableToken, ERC223Mixin, RBACERC223TokenFinalization, RBACMintableTokenMixin {
    |  /// @notice Constant field with token full name
    |  // solium-disable-next-line uppercase
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(634)

[31mViolation[0m for LockedEther in contract 'RBACERC223TokenFinalization':
    |
    |/// @title Role based token finalization mixin
  > |contract RBACERC223TokenFinalization is ERC223Mixin, RBACMixin {
    |  event Finalize();
    |  /// @notice Public field inicates the finalization state of smart-contract
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(521)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACERC223TokenFinalization':
    |  function _setOwner(address _who) private returns (bool) {
    |    require(owner != _who, DUPLICATE);
  > |    owner = _who;
    |    emit SetOwner(_who);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(451)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACERC223TokenFinalization':
    |  function _setMinter(address _who, bool _flag) private returns (bool) {
    |    require(minters[_who] != _flag, DUPLICATE);
  > |    minters[_who] = _flag;
    |    if (_flag) {
    |      emit AddMinter(_who);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(462)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACERC223TokenFinalization':
    |  /// @return A boolean that indicates if the operation was successful.
    |  function finalize() public notFinalized onlyOwner returns (bool) {
  > |    finalized = true;
    |    emit Finalize();
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(542)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(159)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |    returns (bool)
    |  {
  > |    totalIssued_ = totalIssued_.add(_amount);
    |    totalSupply_ = totalSupply_.add(_amount);
    |    balances[_to] = balances[_to].add(_amount);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(501)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |  {
    |    totalIssued_ = totalIssued_.add(_amount);
  > |    totalSupply_ = totalSupply_.add(_amount);
    |    balances[_to] = balances[_to].add(_amount);
    |    emit Mint(_to, _amount);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(502)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |    totalIssued_ = totalIssued_.add(_amount);
    |    totalSupply_ = totalSupply_.add(_amount);
  > |    balances[_to] = balances[_to].add(_amount);
    |    emit Mint(_to, _amount);
    |    emit Transfer(address(0), _to, _amount);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(503)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |  function _setOwner(address _who) private returns (bool) {
    |    require(owner != _who, DUPLICATE);
  > |    owner = _who;
    |    emit SetOwner(_who);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(451)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMintableTokenMixin':
    |  function _setMinter(address _who, bool _flag) private returns (bool) {
    |    require(minters[_who] != _flag, DUPLICATE);
  > |    minters[_who] = _flag;
    |    if (_flag) {
    |      emit AddMinter(_who);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(462)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMixin':
    |  function _setOwner(address _who) private returns (bool) {
    |    require(owner != _who, DUPLICATE);
  > |    owner = _who;
    |    emit SetOwner(_who);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(451)

[33mWarning[0m for UnrestrictedWrite in contract 'RBACMixin':
    |  function _setMinter(address _who, bool _flag) private returns (bool) {
    |    require(minters[_who] != _flag, DUPLICATE);
  > |    minters[_who] = _flag;
    |    if (_flag) {
    |      emit AddMinter(_who);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(462)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/43/0x928e25e5cfa7efafa9b3908685016fcd0c21989d.sol(159)