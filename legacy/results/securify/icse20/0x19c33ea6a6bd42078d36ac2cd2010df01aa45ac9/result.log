Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:IERC20
Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:Ownable
Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:PetGold
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |    require(value <= _balances[account]);
    |
  > |    _totalSupply = _totalSupply.sub(value);
    |    _balances[account] = _balances[account].sub(value);
    |    emit Transfer(account, address(0), value);
  at /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol(362)

[31mViolation[0m for LockedEther in contract 'PetGold':
    | * @dev Custom ERC20 token
    | */
  > |contract PetGold is ERC20Burnable, Ownable {
    |
    |  string public constant name = "PetGold";
  at /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol(416)

[33mWarning[0m for UnrestrictedWrite in contract 'PetGold':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipTransferred(_owner, address(0));
  > |    _owner = address(0);
    |  }
    |
  at /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'PetGold':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(_owner, newOwner);
  > |    _owner = newOwner;
    |  }
    |}
  at /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol(139)

[33mWarning[0m for UnrestrictedWrite in contract 'PetGold':
    |    require(value <= _balances[account]);
    |
  > |    _totalSupply = _totalSupply.sub(value);
    |    _balances[account] = _balances[account].sub(value);
    |    emit Transfer(account, address(0), value);
  at /unique_contracts/0x19c33ea6a6bd42078d36ac2cd2010df01aa45ac9.sol(362)