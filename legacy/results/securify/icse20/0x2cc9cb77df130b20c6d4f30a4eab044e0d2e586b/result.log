Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:Batcher
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:IERC20
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:Ownable
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:Pausable
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:PauserRole
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:RevShare
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Batcher':
    |    }
    |
  > |    function setBatcher (address newBatcher) external onlyOwner {
    |        batcher = newBatcher;
    |        emit NewBatcher(batcher);
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(477)

[31mViolation[0m for UnrestrictedWrite in contract 'Batcher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'Batcher':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(165)

[33mWarning[0m for UnrestrictedWrite in contract 'Batcher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'Batcher':
    |
    |    function setBatcher (address newBatcher) external onlyOwner {
  > |        batcher = newBatcher;
    |        emit NewBatcher(batcher);
    |    }
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(478)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(453)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(461)

[33mWarning[0m for TODAmount in contract 'RevShare':
    |        uint value = bookedRevenueDue[msg.sender][address(0)];
    |        bookedRevenueDue[msg.sender][address(0)] = 0;
  > |        toWhom.transfer(value);
    |    }
    |
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(589)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RevShare':
    |        uint value = bookedRevenueDue[msg.sender][address(0)];
    |        bookedRevenueDue[msg.sender][address(0)] = 0;
  > |        toWhom.transfer(value);
    |    }
    |
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(589)

[33mWarning[0m for UnrestrictedWrite in contract 'RevShare':
    |            require(senderBalance >= value,"Not enough balance");        
    |            senderBalance = senderBalance - value;
  > |            _balances[to] += value;
    |            emit Transfer(msg.sender, to, value);
    |        }
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(368)

[33mWarning[0m for UnrestrictedWrite in contract 'RevShare':
    |            }
    |        }
  > |        lastUpdated[whom] = allocations.length;
    |    }
    |
  at /unique_contracts/0x2cc9cb77df130b20c6d4f30a4eab044e0d2e586b.sol(541)