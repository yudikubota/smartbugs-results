Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:ERC20
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:ERC20Basic
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol:TopTenCoinToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |  function transfer(address _to, uint256 _value) public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |   */
    |  function finishMinting() public onlyOwner returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(203)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transfer(address _to, uint256 _value) public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    uint256 _allowance = allowed[_from][msg.sender];
    |
  > |    balances[_to] = balances[_to].add(_value);
    |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_to] = balances[_to].add(_value);
  > |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(105)

[31mViolation[0m for LockedEther in contract 'TopTenCoinToken':
    |}
    |
  > |contract TopTenCoinToken is MintableToken {
    |
    |    string public constant name = "Top Ten Coin";
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(210)

[33mWarning[0m for UnrestrictedWrite in contract 'TopTenCoinToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(166)

[33mWarning[0m for UnrestrictedWrite in contract 'TopTenCoinToken':
    |   */
    |  function finishMinting() public onlyOwner returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/21/0x9869ff129b436929e5957fb85af22c42e1d1c740.sol(203)