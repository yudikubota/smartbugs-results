Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:ERC20
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:ERC20SafeTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:ExchangeHandler
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:Ownable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:Partner
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:TokenTransferProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:TotlePrimary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle7266790677865819173/mustExplicit -j 2 -F /tmp/souffle-e0591c63-77e4-45b4-b4bb-c3ec35e76512 -D /tmp/souffle-e0591c63-77e4-45b4-b4bb-c3ec35e76512_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:TotlePrimary
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:Utils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol:Withdrawable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(62)

[31mViolation[0m for DAOConstantGas in contract 'Partner':
    |            uint256 companyAmount = balance - partnerAmount;
    |            if(tokens[index] == Utils.eth_address()){
  > |                partnerBeneficiary.transfer(partnerAmount);
    |                companyBeneficiary.transfer(companyAmount);
    |            } else {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(568)

[31mViolation[0m for DAOConstantGas in contract 'Partner':
    |            if(tokens[index] == Utils.eth_address()){
    |                partnerBeneficiary.transfer(partnerAmount);
  > |                companyBeneficiary.transfer(companyAmount);
    |            } else {
    |                ERC20SafeTransfer.safeTransfer(tokens[index], partnerBeneficiary, partnerAmount);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(569)

[31mViolation[0m for RepeatedCall in contract 'Partner':
    |library ERC20SafeTransfer {
    |    function safeTransfer(address _tokenAddress, address _to, uint256 _value) internal returns (bool success) {
  > |        (success,) = _tokenAddress.call(abi.encodeWithSignature("transfer(address,uint256)", _to, _value));
    |        require(success, "Transfer failed");
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(68)

[31mViolation[0m for RepeatedCall in contract 'Partner':
    |        // Payout both the partner and the company at the same time
    |        for(uint256 index = 0; index<tokens.length; index++){
  > |            uint256 balance = tokens[index] == Utils.eth_address()? address(this).balance : ERC20(tokens[index]).balanceOf(address(this));
    |            uint256 partnerAmount = SafeMath.div(SafeMath.mul(balance, partnerPercentage), getTotalFeePercentage());
    |            uint256 companyAmount = balance - partnerAmount;
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(564)

[31mViolation[0m for RepeatedCall in contract 'Partner':
    |            uint256 companyAmount = balance - partnerAmount;
    |            if(tokens[index] == Utils.eth_address()){
  > |                partnerBeneficiary.transfer(partnerAmount);
    |                companyBeneficiary.transfer(companyAmount);
    |            } else {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(568)

[31mViolation[0m for RepeatedCall in contract 'Partner':
    |            if(tokens[index] == Utils.eth_address()){
    |                partnerBeneficiary.transfer(partnerAmount);
  > |                companyBeneficiary.transfer(companyAmount);
    |            } else {
    |                ERC20SafeTransfer.safeTransfer(tokens[index], partnerBeneficiary, partnerAmount);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(569)

[33mWarning[0m for TODAmount in contract 'Partner':
    |            uint256 companyAmount = balance - partnerAmount;
    |            if(tokens[index] == Utils.eth_address()){
  > |                partnerBeneficiary.transfer(partnerAmount);
    |                companyBeneficiary.transfer(companyAmount);
    |            } else {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(568)

[33mWarning[0m for TODAmount in contract 'Partner':
    |            if(tokens[index] == Utils.eth_address()){
    |                partnerBeneficiary.transfer(partnerAmount);
  > |                companyBeneficiary.transfer(companyAmount);
    |            } else {
    |                ERC20SafeTransfer.safeTransfer(tokens[index], partnerBeneficiary, partnerAmount);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(569)

[31mViolation[0m for TODReceiver in contract 'Partner':
    |            uint256 companyAmount = balance - partnerAmount;
    |            if(tokens[index] == Utils.eth_address()){
  > |                partnerBeneficiary.transfer(partnerAmount);
    |                companyBeneficiary.transfer(companyAmount);
    |            } else {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(568)

[31mViolation[0m for TODReceiver in contract 'Partner':
    |            if(tokens[index] == Utils.eth_address()){
    |                partnerBeneficiary.transfer(partnerAmount);
  > |                companyBeneficiary.transfer(companyAmount);
    |            } else {
    |                ERC20SafeTransfer.safeTransfer(tokens[index], partnerBeneficiary, partnerAmount);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(569)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Partner':
    |            uint256 companyAmount = balance - partnerAmount;
    |            if(tokens[index] == Utils.eth_address()){
  > |                partnerBeneficiary.transfer(partnerAmount);
    |                companyBeneficiary.transfer(companyAmount);
    |            } else {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(568)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Partner':
    |            if(tokens[index] == Utils.eth_address()){
    |                partnerBeneficiary.transfer(partnerAmount);
  > |                companyBeneficiary.transfer(companyAmount);
    |            } else {
    |                ERC20SafeTransfer.safeTransfer(tokens[index], partnerBeneficiary, partnerAmount);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(569)

[31mViolation[0m for UnrestrictedWrite in contract 'Partner':
    |    ) public {
    |        require(companyBeneficiary == address(0x0) && partnerBeneficiary == address(0x0));
  > |        companyBeneficiary = _companyBeneficiary;
    |        companyPercentage = _companyPercentage;
    |        partnerBeneficiary = _partnerBeneficiary;
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(553)

[31mViolation[0m for UnrestrictedWrite in contract 'Partner':
    |        require(companyBeneficiary == address(0x0) && partnerBeneficiary == address(0x0));
    |        companyBeneficiary = _companyBeneficiary;
  > |        companyPercentage = _companyPercentage;
    |        partnerBeneficiary = _partnerBeneficiary;
    |        partnerPercentage = _partnerPercentage;
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(554)

[31mViolation[0m for UnrestrictedWrite in contract 'Partner':
    |        companyBeneficiary = _companyBeneficiary;
    |        companyPercentage = _companyPercentage;
  > |        partnerBeneficiary = _partnerBeneficiary;
    |        partnerPercentage = _partnerPercentage;
    |    }
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(555)

[31mViolation[0m for UnrestrictedWrite in contract 'Partner':
    |        companyPercentage = _companyPercentage;
    |        partnerBeneficiary = _partnerBeneficiary;
  > |        partnerPercentage = _partnerPercentage;
    |    }
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(62)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() public onlyOwner whenNotPaused {
  > |    _paused = true;
    |    emit Paused();
    |  }
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(312)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() public onlyOwner whenPaused {
  > |    _paused = false;
    |    emit Unpaused();
    |  }
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(320)

[31mViolation[0m for LockedEther in contract 'TokenTransferProxy':
    |/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.
    |/// @author Amir Bandeali - <amir@0xProject.com>, Will Warren - <will@0xProject.com>
  > |contract TokenTransferProxy is Ownable {
    |
    |    /// @dev Only authorized addresses can invoke functions with this modifier.
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(183)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |/// @title TokenTransferProxy - Transfers tokens on behalf of contracts that have been approved via decentralized governance.
    |/// @author Amir Bandeali - <amir@0xProject.com>, Will Warren - <will@0xProject.com>
  > |contract TokenTransferProxy is Ownable {
    |
    |    /// @dev Only authorized addresses can invoke functions with this modifier.
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(183)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |        for (uint i = 0; i < authorities.length; i++) {
    |            if (authorities[i] == target) {
  > |                authorities[i] = authorities[authorities.length - 1];
    |                authorities.length -= 1;
    |                break;
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(233)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |pragma solidity 0.5.7;
  > |pragma experimental ABIEncoderV2;
    |
    |/**
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(62)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |        targetNotAuthorized(target)
    |    {
  > |        authorized[target] = true;
    |        authorities.push(target);
    |        emit LogAuthorizedAddressAdded(target, msg.sender);
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |    {
    |        authorized[target] = true;
  > |        authorities.push(target);
    |        emit LogAuthorizedAddressAdded(target, msg.sender);
    |    }
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(219)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenTransferProxy':
    |        targetAuthorized(target)
    |    {
  > |        delete authorized[target];
    |        for (uint i = 0; i < authorities.length; i++) {
    |            if (authorities[i] == target) {
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(230)

[31mViolation[0m for TODReceiver in contract 'Withdrawable':
    |    /// @param _amount The amount of ether that the caller wants to withdraw
    |    function withdrawETH(uint256 _amount) external onlyOwner {
  > |        owner.transfer(_amount);
    |    }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(122)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Withdrawable':
    |    /// @param _amount The amount of ether that the caller wants to withdraw
    |    function withdrawETH(uint256 _amount) external onlyOwner {
  > |        owner.transfer(_amount);
    |    }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |    require(_newOwner != address(0));
    |    emit OwnershipTransferred(owner, _newOwner);
  > |    owner = _newOwner;
    |  }
    |}
  at /unique_chucks/12/0x623520377f092c1c70bd57d17ae9ede6a288412c.sol(62)