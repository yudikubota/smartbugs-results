Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:BaseERC20Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20Capped
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20Detailed
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:ERC20Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:IERC20
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:MinterRole
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:OperatorRole
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:Ownable
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol:TokenRecover
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BaseERC20Token':
    | * @dev Implementation of the BaseERC20Token
    | */
  > |contract BaseERC20Token is ERC20Detailed, ERC20Capped, ERC20Burnable, OperatorRole, TokenRecover {
    |
    |    event MintFinished();
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(299)

[31mViolation[0m for LockedEther in contract 'ERC20Token':
    | * @dev Implementation of a BaseERC20Token
    | */
  > |contract ERC20Token is BaseERC20Token {
    |
    |    string public builtOn = "https://vittominacori.github.io/erc20-generator";
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(734)

[31mViolation[0m for MissingInputValidation in contract 'TokenRecover':
    |     * @param tokenAmount Number of tokens to be sent
    |     */
  > |    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {
    |        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    |    }
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(560)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenRecover':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(542)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecover':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(524)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenRecover':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/3/0x187c4b0e3819017a5cf07af81a4e2b16166aabc6.sol(542)