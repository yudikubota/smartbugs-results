Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:ERC20
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:ERC20Basic
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:ERC20Wallet
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:MegaWallet
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance. 
    |    balances[msg.sender] = balances[msg.sender].sub(_value); 
  > |    balances[_to] = balances[_to].add(_value); 
    |    emit Transfer(msg.sender, _to, _value); 
    |    return true; 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Wallet':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    | 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(209)

[31mViolation[0m for LockedEther in contract 'MegaWallet':
    |}
    |
  > |contract MegaWallet is Ownable {
    |
    |    address[] public wallets;
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(284)

[31mViolation[0m for UnrestrictedWrite in contract 'MegaWallet':
    |
    |/**
  > | * @title ERC20Basic
    | * @dev Simpler version of ERC20 interface
    | * @dev see https://github.com/ethereum/EIPs/issues/179
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'MegaWallet':
    |    function createWallet(address payable _token, address PFA) public {
    |        ERC20Wallet wallet = new ERC20Wallet(StandardToken(_token), owner);
  > |        wallets.push(address(wallet));
    |        associations[address(wallet)] = PFA;
    |        revertassociations[PFA] = address(wallet);
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(302)

[31mViolation[0m for UnrestrictedWrite in contract 'MegaWallet':
    |        ERC20Wallet wallet = new ERC20Wallet(StandardToken(_token), owner);
    |        wallets.push(address(wallet));
  > |        associations[address(wallet)] = PFA;
    |        revertassociations[PFA] = address(wallet);
    |        emit WalletEvent(address(wallet), "Create", 0);
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(303)

[31mViolation[0m for UnrestrictedWrite in contract 'MegaWallet':
    |        wallets.push(address(wallet));
    |        associations[address(wallet)] = PFA;
  > |        revertassociations[PFA] = address(wallet);
    |        emit WalletEvent(address(wallet), "Create", 0);
    |    }
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'MegaWallet':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    | 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    | 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function setSaleAgent(address newSaleAgnet) public {
    |    require(msg.sender == saleAgent || msg.sender == owner);
  > |    saleAgent = newSaleAgnet;
    |  }
    | 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(233)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function finishMinting() public returns (bool) {
    |    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    | 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(209)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance. 
    |    balances[msg.sender] = balances[msg.sender].sub(_value); 
  > |    balances[_to] = balances[_to].add(_value); 
    |    emit Transfer(msg.sender, _to, _value); 
    |    return true; 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= balances[_from]);
    |    require(_value <= allowed[_from][msg.sender]); 
  > |    balances[_from] = balances[_from].sub(_value); 
    |    balances[_to] = balances[_to].add(_value); 
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]); 
    |    balances[_from] = balances[_from].sub(_value); 
  > |    balances[_to] = balances[_to].add(_value); 
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); 
    |    emit Transfer(_from, _to, _value); 
  at /unique_chucks/37/0x84ccbafee39df1a5c2b2da857246c861b9275bd9.sol(112)