Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:CappedCrowdsale
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:Crowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:IERC20
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:JarvisPlusTokenCrowdsale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:Ownable
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:PostDeliveryCrowdsale
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:ReentrancyGuard
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:Secondary
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:TimedCrowdsale
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:WhitelistAdminRole
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:WhitelistCrowdsale
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:WhitelistedRole
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol:__unstable__TokenVault
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Crowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(612)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Crowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(612)

[31mViolation[0m for UnrestrictedWrite in contract 'Crowdsale':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(409)

[33mWarning[0m for UnrestrictedWrite in contract 'Crowdsale':
    |
    |        // update state
  > |        _weiRaised = _weiRaised.add(weiAmount);
    |
    |        _processPurchase(beneficiary, tokens);
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(534)

[31mViolation[0m for RepeatedCall in contract 'JarvisPlusTokenCrowdsale':
    |
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        (bool success, bytes memory returndata) = address(token).call(data);
    |        require(success, "SafeERC20: low-level call failed");
    |
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(365)

[33mWarning[0m for TODAmount in contract 'JarvisPlusTokenCrowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(612)

[33mWarning[0m for TODReceiver in contract 'JarvisPlusTokenCrowdsale':
    |     */
    |    function _forwardFunds() internal {
  > |        _wallet.transfer(msg.value);
    |    }
    |}
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(612)

[31mViolation[0m for UnrestrictedWrite in contract 'JarvisPlusTokenCrowdsale':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(409)

[31mViolation[0m for UnrestrictedWrite in contract 'JarvisPlusTokenCrowdsale':
    |        require(amount > 0, "PostDeliveryCrowdsale: beneficiary is not due any tokens");
    |
  > |        _balances[beneficiary] = 0;
    |        _vault.transfer(token(), beneficiary, amount);
    |    }
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(1012)

[33mWarning[0m for UnrestrictedWrite in contract 'JarvisPlusTokenCrowdsale':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(58)

[33mWarning[0m for UnrestrictedWrite in contract 'JarvisPlusTokenCrowdsale':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(75)

[31mViolation[0m for MissingInputValidation in contract '__unstable__TokenVault':
    |// solhint-disable-next-line contract-name-camelcase
    |contract __unstable__TokenVault is Secondary {
  > |    function transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {
    |        token.transfer(to, amount);
    |    }
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(1043)

[33mWarning[0m for UnrestrictedWrite in contract '__unstable__TokenVault':
    |    function transferPrimary(address recipient) public onlyPrimary {
    |        require(recipient != address(0), "Secondary: new primary is the zero address");
  > |        _primary = recipient;
    |        emit PrimaryTransferred(_primary);
    |    }
  at /unique_chucks/9/0x86971497d67ec19d0037fceb7a605a1d7d43aaf2.sol(976)