Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:BaseSafe
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:Enum
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:EtherPaymentFallback
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:Executor
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:GnosisSafe
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:ISignatureValidator
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:MasterCopy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:Module
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:ModuleManager
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:OwnerManager
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:SecuredTokenTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:SelfAuthorized
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol:SignatureDecoder
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnhandledException in contract 'BaseSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'BaseSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(320)

[31mViolation[0m for LockedEther in contract 'EtherPaymentFallback':
    |}
    |
  > |contract EtherPaymentFallback {
    |
    |    /// @dev Fallback function accepts Ether transactions.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(11)

[31mViolation[0m for LockedEther in contract 'Executor':
    |}
    |
  > |contract Executor is EtherPaymentFallback {
    |
    |    event ContractCreation(address newContract);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(22)

[33mWarning[0m for DAO in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(57)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            let success := call(sub(gas, 10000), token, 0, add(data, 0x20), mload(data), 0, 0)
    |            let ptr := mload(0x40)
    |            returndatacopy(ptr, 0, returndatasize)
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(89)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        if (gasToken == address(0)) {
    |            // solium-disable-next-line security/no-send
  > |            require(receiver.send(amount), "Could not pay gas costs with ether");
    |        } else {
    |            require(transferToken(gasToken, receiver, amount), "Could not pay gas costs with token");
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(659)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |                    contractSignature := add(add(signatures, s), 0x20)
    |                }
  > |                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, "Invalid contract signature provided");
    |            // If v is 1 then it is an approved hash
    |            } else if (v == 1) {
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(714)

[33mWarning[0m for TODAmount in contract 'GnosisSafe':
    |        if (gasToken == address(0)) {
    |            // solium-disable-next-line security/no-send
  > |            require(receiver.send(amount), "Could not pay gas costs with ether");
    |        } else {
    |            require(transferToken(gasToken, receiver, amount), "Could not pay gas costs with token");
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(659)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |    {
    |        require(modules[SENTINEL_MODULES] == address(0), "Modules have already been initialized");
  > |        modules[SENTINEL_MODULES] = SENTINEL_MODULES;
    |        if (to != address(0))
    |            // Setup has to complete successfully or transaction fails.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |            // No duplicate owners allowed.
    |            require(owners[owner] == address(0), "Duplicate owner address provided");
  > |            owners[currentOwner] = owner;
    |            currentOwner = owner;
    |        }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(234)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |            currentOwner = owner;
    |        }
  > |        owners[currentOwner] = SENTINEL_OWNERS;
    |        ownerCount = _owners.length;
    |        threshold = _threshold;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(237)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        }
    |        owners[currentOwner] = SENTINEL_OWNERS;
  > |        ownerCount = _owners.length;
    |        threshold = _threshold;
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(238)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[currentOwner] = SENTINEL_OWNERS;
    |        ownerCount = _owners.length;
  > |        threshold = _threshold;
    |    }
    |
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(239)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |    {
    |        require(domainSeparator == 0, "Domain Separator already set!");
  > |        domainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));
    |        setupSafe(_owners, _threshold, to, data);
    |        
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(585)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        );
    |        // Increase nonce and execute transaction.
  > |        nonce++;
    |        checkSignatures(keccak256(txHashData), txHashData, signatures, true);
    |        require(gasleft() >= safeTxGas, "Not enough gas to execute safe transaction");
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(628)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(320)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        authorized
    |    {
  > |        signedMessages[getMessageHash(_data)] = 1;
    |    }
    |
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(778)

[33mWarning[0m for UnrestrictedWrite in contract 'MasterCopy':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'Module':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(390)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param prevModule Module that pointed to the module to be removed in the linked list
    |    /// @param module Module to be removed.
  > |    function disableModule(Module prevModule, Module module)
    |        public
    |        authorized
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(146)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param data Data payload of module transaction.
    |    /// @param operation Operation type of module transaction.
  > |    function execTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation)
    |        public
    |        returns (bool success)
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(163)

[33mWarning[0m for TODAmount in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for TODReceiver in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[31mViolation[0m for UnhandledException in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(154)

[31mViolation[0m for LockedEther in contract 'OwnerManager':
    |}
    |
  > |contract OwnerManager is SelfAuthorized {
    |
    |    event AddedOwner(address owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol(320)