Processing contract: /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol:IERC20
Processing contract: /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol:MultiBeneficiariesTokenTimelock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'MultiBeneficiariesTokenTimelock':
    | * beneficiaries to extract the tokens after a given release time
    | */
  > |contract MultiBeneficiariesTokenTimelock {
    |    using SafeERC20 for IERC20;
    |
  at /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol(94)

[31mViolation[0m for RepeatedCall in contract 'MultiBeneficiariesTokenTimelock':
    |
    |    function safeTransfer(IERC20 token, address to, uint256 value) internal {
  > |        require(token.transfer(to, value));
    |    }
    |}
  at /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'MultiBeneficiariesTokenTimelock':
    |        }
    |        
  > |        distributed = true;
    |    }
    |    
  at /unique_contracts/0x8f57f10c71093b624351efd82d88a19b63ec2403.sol(143)