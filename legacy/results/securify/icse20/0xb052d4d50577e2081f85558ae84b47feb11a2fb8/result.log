Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:AOIonLot
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:IAOIonLot
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:INameTAOPosition
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol:tokenRecipient
[31mViolation[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(804)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(814)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	function setAOIonAddress(address _aoIonAddress) public onlyTheAO {
    |		require (_aoIonAddress != address(0));
  > |		aoIonAddress = _aoIonAddress;
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(823)

[31mViolation[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(832)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |pragma solidity >=0.5.4 <0.6.0;
    |
  > |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	 */
    |	function createBurnLot(address _account, uint256 _amount, uint256 _multiplierAfterBurn) external onlyAOIon returns (bool) {
  > |		totalBurnLots++;
    |
    |		// Generate burn lot Id
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(916)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |
    |		BurnLot storage burnLot = burnLots[burnLotId];
  > |		burnLot.burnLotId = burnLotId;
    |		burnLot.lotOwner = _account;
    |		burnLot.amount = _amount;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(925)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		BurnLot storage burnLot = burnLots[burnLotId];
    |		burnLot.burnLotId = burnLotId;
  > |		burnLot.lotOwner = _account;
    |		burnLot.amount = _amount;
    |		ownedBurnLots[_account].push(burnLotId);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(926)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		burnLot.burnLotId = burnLotId;
    |		burnLot.lotOwner = _account;
  > |		burnLot.amount = _amount;
    |		ownedBurnLots[_account].push(burnLotId);
    |		emit BurnLotCreation(burnLot.lotOwner, burnLot.burnLotId, burnLot.amount, _multiplierAfterBurn);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(927)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		burnLot.lotOwner = _account;
    |		burnLot.amount = _amount;
  > |		ownedBurnLots[_account].push(burnLotId);
    |		emit BurnLotCreation(burnLot.lotOwner, burnLot.burnLotId, burnLot.amount, _multiplierAfterBurn);
    |		return true;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(928)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	function createConvertLot(address _account, uint256 _amount, uint256 _multiplierAfterConversion) external onlyAOIon returns (bool) {
    |		// Store convert lot info
  > |		totalConvertLots++;
    |
    |		// Generate convert lot Id
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(972)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |
    |		ConvertLot storage convertLot = convertLots[convertLotId];
  > |		convertLot.convertLotId = convertLotId;
    |		convertLot.lotOwner = _account;
    |		convertLot.amount = _amount;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(981)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		ConvertLot storage convertLot = convertLots[convertLotId];
    |		convertLot.convertLotId = convertLotId;
  > |		convertLot.lotOwner = _account;
    |		convertLot.amount = _amount;
    |		ownedConvertLots[_account].push(convertLotId);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(982)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		convertLot.convertLotId = convertLotId;
    |		convertLot.lotOwner = _account;
  > |		convertLot.amount = _amount;
    |		ownedConvertLots[_account].push(convertLotId);
    |		emit ConvertLotCreation(convertLot.lotOwner, convertLot.convertLotId, convertLot.amount, _multiplierAfterConversion);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(983)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		convertLot.lotOwner = _account;
    |		convertLot.amount = _amount;
  > |		ownedConvertLots[_account].push(convertLotId);
    |		emit ConvertLotCreation(convertLot.lotOwner, convertLot.convertLotId, convertLot.amount, _multiplierAfterConversion);
    |		return true;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |	 */
    |	function _createWeightedMultiplierLot(address _account, uint256 _amount, uint256 _weightedMultiplier, uint256 _networkBonusAmount) internal returns (bytes32) {
  > |		totalLots++;
    |
    |		// Generate lotId
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1029)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |
    |		Lot storage lot = lots[lotId];
  > |		lot.lotId = lotId;
    |		lot.multiplier = _weightedMultiplier;
    |		lot.lotOwner = _account;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1038)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		Lot storage lot = lots[lotId];
    |		lot.lotId = lotId;
  > |		lot.multiplier = _weightedMultiplier;
    |		lot.lotOwner = _account;
    |		lot.amount = _amount;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1039)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		lot.lotId = lotId;
    |		lot.multiplier = _weightedMultiplier;
  > |		lot.lotOwner = _account;
    |		lot.amount = _amount;
    |		ownedLots[_account].push(lotId);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1040)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		lot.multiplier = _weightedMultiplier;
    |		lot.lotOwner = _account;
  > |		lot.amount = _amount;
    |		ownedLots[_account].push(lotId);
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1041)

[33mWarning[0m for UnrestrictedWrite in contract 'AOIonLot':
    |		lot.lotOwner = _account;
    |		lot.amount = _amount;
  > |		ownedLots[_account].push(lotId);
    |
    |		emit LotCreation(lot.lotOwner, lot.lotId, lot.multiplier, lot.amount, _networkBonusAmount);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(1042)

[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(353)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(365)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(374)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(403)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(312)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(312)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(665)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(694)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(686)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(697)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(96)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(144)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(220)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(236)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/42/0xb052d4d50577e2081f85558ae84b47feb11a2fb8.sol(238)