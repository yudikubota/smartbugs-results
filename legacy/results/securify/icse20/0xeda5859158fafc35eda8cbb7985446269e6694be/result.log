Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:INameTAOPosition
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:LogosTera
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:TAOCurrency
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(340)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(352)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(361)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(390)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(757)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(767)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(776)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(814)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(815)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(832)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(833)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(844)

[31mViolation[0m for UnrestrictedWrite in contract 'LogosTera':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(845)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(299)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(299)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(757)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(767)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(776)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(814)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(815)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(832)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(833)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(844)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(845)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(652)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(681)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(673)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(684)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(83)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(131)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(207)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(223)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/35/0xeda5859158fafc35eda8cbb7985446269e6694be.sol(225)