Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:BasicToken
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:ERC20
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:ERC20Basic
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:REALT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol:StandardToken
[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(254)

[31mViolation[0m for LockedEther in contract 'REALT':
    |}
    |
  > |contract REALT is Pausable, StandardToken {
    |
    |    string public name;
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(259)

[31mViolation[0m for UnrestrictedWrite in contract 'REALT':
    |        require(_address != address(0), "Provided address is invalid.");
    |        require(!blacklisted[_address], "The provided address is already blacklisted");
  > |        blacklisted[_address] = true;
    |        
    |        emit BlacklistAdded(_address);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(317)

[31mViolation[0m for UnrestrictedWrite in contract 'REALT':
    |        require(_address != address(0), "Provided address is invalid.");
    |        require(blacklisted[_address], "The provided address is already not blacklisted");
  > |        blacklisted[_address] = false;
    |        
    |        emit BlacklistRemoved(_address);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |        }
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(179)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |    // @param _amount Number of tokens to be issued
    |    function issue(uint amount) public onlyAuthorized {
  > |        _totalSupply = _totalSupply.add(amount);
    |        balances[msg.sender] = balances[msg.sender].add(amount);
    |        
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(361)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |        require(balances[msg.sender] >= amount, "Redeem amount is greater than sender's balance.");
    |
  > |        _totalSupply = _totalSupply.sub(amount);
    |        balances[msg.sender] = balances[msg.sender].sub(amount);
    |        emit Redeem(amount);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(376)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |    function transferOwnership(address newOwner) public onlyOwner {
    |        if (newOwner != address(0)) {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |    */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(246)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |    */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |        require(!authorized[_address], "Address is already authorized.");
    |        
  > |        authorized[_address] = true;
    |
    |        emit AuthorizationSet(_address);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(293)

[33mWarning[0m for UnrestrictedWrite in contract 'REALT':
    |        require(authorized[_address], "Address is already unauthorized.");
    |
  > |        authorized[_address] = false;
    |
    |        emit AuthorizationRevoked(_address);
  at /unique_chucks/10/0x46cc7ec70746f4cbd56ce5fa9bb7d648398eaa5c.sol(303)