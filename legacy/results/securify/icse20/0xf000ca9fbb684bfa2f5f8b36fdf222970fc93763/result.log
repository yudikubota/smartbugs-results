Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:ERC20
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:ERC20Basic
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:HaronToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |  function transfer(address _to, uint256 _value) public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(77)

[31mViolation[0m for LockedEther in contract 'HaronToken':
    |}
    |
  > |contract HaronToken is MintableToken {
    |
    |    string public constant name = "Haron";
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'HaronToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'HaronToken':
    |   */
    |  function finishMinting() public onlyOwner returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |   */
    |  function finishMinting() public onlyOwner returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transfer(address _to, uint256 _value) public returns (bool) {
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // require (_value <= _allowance);
    |
  > |    balances[_to] = balances[_to].add(_value);
    |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_to] = balances[_to].add(_value);
  > |    balances[_from] = balances[_from].sub(_value);
    |    allowed[_from][msg.sender] = _allowance.sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/12/0xf000ca9fbb684bfa2f5f8b36fdf222970fc93763.sol(117)