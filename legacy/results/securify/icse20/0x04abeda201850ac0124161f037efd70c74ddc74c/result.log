Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:ERC20
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:ERC20Basic
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:IBNEST
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:IterableMapping
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'IterableMapping':
    |pragma solidity ^0.5.1;
    |
  > |library IterableMapping {
    |  struct itmap
    |  {
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |pragma solidity ^0.5.1;
    |
  > |library IterableMapping {
    |  struct itmap
    |  {
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(3)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |  {
    |    uint keyIndex = self.data[key].keyIndex;
  > |    self.data[key].value = value;
    |    if (keyIndex > 0)
    |      return true;
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(15)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |    {
    |      keyIndex = self.keys.length++;
  > |      self.data[key].keyIndex = keyIndex + 1;
    |      self.keys[keyIndex].key = key;
    |      self.size++;
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(21)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |      keyIndex = self.keys.length++;
    |      self.data[key].keyIndex = keyIndex + 1;
  > |      self.keys[keyIndex].key = key;
    |      self.size++;
    |      return false;
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(22)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |      self.data[key].keyIndex = keyIndex + 1;
    |      self.keys[keyIndex].key = key;
  > |      self.size++;
    |      return false;
    |    }
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(23)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |    if (keyIndex == 0)
    |      return false;
  > |    delete self.data[key];
    |    self.keys[keyIndex - 1].deleted = true;
    |    self.size --;
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(32)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |      return false;
    |    delete self.data[key];
  > |    self.keys[keyIndex - 1].deleted = true;
    |    self.size --;
    |  }
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(33)

[31mViolation[0m for UnrestrictedWrite in contract 'IterableMapping':
    |    delete self.data[key];
    |    self.keys[keyIndex - 1].deleted = true;
  > |    self.size --;
    |  }
    |  function contains(itmap storage self, address key) public view returns (bool)
  at /unique_chucks/2/0x04abeda201850ac0124161f037efd70c74ddc74c.sol(34)