Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:ERC20
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:ERC20Basic
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:Lock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:SLGCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle5078324868467051039/mustExplicit -j 2 -F /tmp/souffle-637f1968-fe80-4639-a38c-9f2c494abd10 -D /tmp/souffle-637f1968-fe80-4639-a38c-9f2c494abd10_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:SLGCToken
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer (msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'Lock':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer (msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'Lock':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'Lock':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'Lock':
    |     */
    |    function pause() onlyOwner whenNotPaused public {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'Lock':
    |     */
    |    function unpause() onlyOwner whenPaused public {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(293)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function pause() onlyOwner whenNotPaused public {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function unpause() onlyOwner whenPaused public {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(293)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer (msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function pause() onlyOwner whenNotPaused public {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(285)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function unpause() onlyOwner whenPaused public {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(293)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer (msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(141)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/44/0x7eb4688da9e1d0b17e49fd6d313eb5b415d5ee61.sol(182)