Processing contract: /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol:Caste
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol:Countdown3D
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol:HourglassInterface
Processing contract: /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol:Math
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'Countdown3D':
    |
    |        // 5% buys hourglass token
  > |        hourglass.buy.value((round.pot * 5) / 100)(msg.sender);
    |
    |        // 20% of round pot claimed from 15% to next round and 5% investment in hourglass token
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(555)

[33mWarning[0m for TODAmount in contract 'Countdown3D':
    |        // Last but not least, send ticket winnings
    |        if (total > 0) {
  > |            msg.sender.transfer(total);
    |        }
    |    }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(273)

[33mWarning[0m for TODAmount in contract 'Countdown3D':
    |        // Transfer rewards to player
    |        if (total > 0) {
  > |            msg.sender.transfer(total);
    |        }
    |    }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(311)

[33mWarning[0m for TODAmount in contract 'Countdown3D':
    |
    |        // 5% buys hourglass token
  > |        hourglass.buy.value((round.pot * 5) / 100)(msg.sender);
    |
    |        // 20% of round pot claimed from 15% to next round and 5% investment in hourglass token
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(555)

[33mWarning[0m for TODReceiver in contract 'Countdown3D':
    |
    |        // 5% buys hourglass token
  > |        hourglass.buy.value((round.pot * 5) / 100)(msg.sender);
    |
    |        // 20% of round pot claimed from 15% to next round and 5% investment in hourglass token
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(555)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Countdown3D':
    |    {
    |        // Buys investment tokens from hourglass contract
  > |        hourglass.buy.value(msg.value)(msg.sender);
    |    }
    |
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(170)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Countdown3D':
    |        // Last but not least, send ticket winnings
    |        if (total > 0) {
  > |            msg.sender.transfer(total);
    |        }
    |    }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(273)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Countdown3D':
    |        // Transfer rewards to player
    |        if (total > 0) {
  > |            msg.sender.transfer(total);
    |        }
    |    }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(311)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Countdown3D':
    |
    |        // 5% buys hourglass token
  > |        hourglass.buy.value((round.pot * 5) / 100)(msg.sender);
    |
    |        // 20% of round pot claimed from 15% to next round and 5% investment in hourglass token
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(555)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |            } else {
    |                // Cap round again
  > |                round.blockCap = block.number;
    |                emit OnRoundCap(currentRoundId);
    |            }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(221)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |    {
    |        // 75% to winning Castes
  > |        (round.caste[0], round.caste[1], round.caste[2]) = Caste.values((round.tickets - 1), round.pot, COST);
    |
    |        // 15% to next generation
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(533)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // 15% to next generation
  > |        rounds[currentRoundId + 1].pot = (round.pot * 15) / 100;
    |
    |        // 2% to each dev
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(536)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |        // 2% to each dev
    |        uint256 percent2 = (round.pot * 2) / 100;
  > |        round.reward[dev1] = percent2;
    |        round.reward[dev2] = percent2;
    |
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(540)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |        uint256 percent2 = (round.pot * 2) / 100;
    |        round.reward[dev1] = percent2;
  > |        round.reward[dev2] = percent2;
    |
    |        // Cleanup unclaimed dev rewards
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(541)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |    {
    |        // Balance is seed pot combined with total tickets
  > |        round.balance = round.pot + (round.tickets * COST);
    |
    |        // Bottom tiers to the pot
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(566)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // Bottom tiers to the pot
  > |        round.pot = round.pot + Caste.pool(round.tickets - 1, COST);
    |
    |        // Check investment dividends accrued
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(569)

[31mViolation[0m for UnrestrictedWrite in contract 'Countdown3D':
    |            hourglass.withdraw();
    |            // Allocate dividends to the round pot
  > |            round.pot = round.pot + dividends;
    |        }
    |    }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(578)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |/*
  > |* In Contracts We Trust
    |*
    |* Countdown3D is a provably-fair multi tier lottery played using Ether
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |
  > |contract Countdown3D {
    |
    |    /* ==== INTERFACE ==== */
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |            // Set blockcap
  > |            round.blockCap = block.number;
    |            emit OnRoundCap(currentRoundId);
    |        } else {
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |                // Subtract tickets from account
  > |                account.tickets = account.tickets - totalTickets;
    |
    |                // Delete round from player's account
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |                if (amount > 0) {
    |                    // Increment amount claimed
  > |                    rounds[roundId].claimed = rounds[roundId].claimed + amount;
    |                    // Add to total withdraw
    |                    total = total + amount;
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(258)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |            if (amount > 0) {
    |                // Increment amount claimed
  > |                rounds[roundId].claimed = rounds[roundId].claimed + amount;
    |                // Add to total withdraw
    |                total = total + amount;
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |        }
    |        // Store round with reward
  > |        accounts[dev1].rewards.push(currentRoundId);
    |        accounts[dev2].rewards.push(currentRoundId);
    |
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(551)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |        // Store round with reward
    |        accounts[dev1].rewards.push(currentRoundId);
  > |        accounts[dev2].rewards.push(currentRoundId);
    |
    |        // 5% buys hourglass token
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(552)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // 20% of round pot claimed from 15% to next round and 5% investment in hourglass token
  > |        round.claimed = (round.pot * 20) / 100;
    |    }
    |
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(558)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // Set random number
  > |        round.random = Math.random(blockhash_, round.tickets);
    |
    |        // Set current round id
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(599)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // Set current round id
  > |        currentRoundId = currentRoundId + 1;
    |
    |        // New Round
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(602)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |
    |        // Set next round start time
  > |        newRound.startTime = now;
    |
    |        // Start expiring rounds at Round 5
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(608)

[33mWarning[0m for UnrestrictedWrite in contract 'Countdown3D':
    |            if (expired.balance > expired.claimed) {
    |                // Allocate expired funds to next round
  > |                newRound.pot = newRound.pot + (expired.balance - expired.claimed);
    |            }
    |        }
  at /unique_chucks/7/0xc735000293cb6790d8b9cc978f4dcce7018d8f7f.sol(617)