Processing contract: /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol:DelayedMultiSig
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol:MultiSig
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol:PartiallyDelayedMultiSig
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'DelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[31mViolation[0m for RepeatedCall in contract 'DelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODAmount in contract 'DelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODReceiver in contract 'DelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |        for (uint256 i = 0; i < owners.length - 1; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |        for (uint256 i = 0; i < owners.length; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |            }
    |        }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |        }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
    |        emit OwnerAddition(newOwner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |    {
    |        uint256 transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |        return transactionId;
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(576)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    | *  - Added function to execute multiple transactions within the same Ethereum transaction
    | */
  > |contract DelayedMultiSig is
    |    MultiSig
    |{
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(597)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |    {
    |        Transaction storage txn = transactions[transactionId];
  > |        txn.executed = true;
    |        bool success = externalCall(
    |            txn.destination,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(721)

[33mWarning[0m for UnrestrictedWrite in contract 'DelayedMultiSig':
    |        internal
    |    {
  > |        confirmationTimes[transactionId] = confirmationTime;
    |        emit ConfirmationTimeSet(transactionId, confirmationTime);
    |    }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(762)

[31mViolation[0m for DAO in contract 'MultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODAmount in contract 'MultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODReceiver in contract 'MultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    | *  - external_call => externalCall
    | */
  > |contract MultiSig {
    |
    |    // ============ Events ============
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(45)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |        for (uint256 i = 0; i < owners.length - 1; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |        for (uint256 i = 0; i < owners.length; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |            }
    |        }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |        }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
    |        emit OwnerAddition(newOwner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |        if (isConfirmed(transactionId)) {
    |            Transaction storage txn = transactions[transactionId];
  > |            txn.executed = true;
    |            if (externalCall(
    |                txn.destination,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |            } else {
    |                emit ExecutionFailure(transactionId);
  > |                txn.executed = false;
    |            }
    |        }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(359)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |    {
    |        uint256 transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSig':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |        return transactionId;
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(576)

[33mWarning[0m for DAO in contract 'PartiallyDelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[31mViolation[0m for RepeatedCall in contract 'PartiallyDelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODAmount in contract 'PartiallyDelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for TODReceiver in contract 'PartiallyDelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PartiallyDelayedMultiSig':
    |            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)
    |            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that
  > |            result := call(
    |                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting
    |                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(537)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |        for (uint256 i = 0; i < owners.length - 1; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = owners[owners.length - 1];
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |        for (uint256 i = 0; i < owners.length; i++) {
    |            if (owners[i] == owner) {
  > |                owners[i] = newOwner;
    |                break;
    |            }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(250)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |            }
    |        }
  > |        isOwner[owner] = false;
    |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |        }
    |        isOwner[owner] = false;
  > |        isOwner[newOwner] = true;
    |        emit OwnerRemoval(owner);
    |        emit OwnerAddition(newOwner);
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |    {
    |        uint256 transactionId = transactionCount;
  > |        transactions[transactionId] = Transaction({
    |            destination: destination,
    |            value: value,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(570)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |            executed: false
    |        });
  > |        transactionCount += 1;
    |        emit Submission(transactionId);
    |        return transactionId;
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(576)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |    {
    |        Transaction storage txn = transactions[transactionId];
  > |        txn.executed = true;
    |        bool success = externalCall(
    |            txn.destination,
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(721)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    |        internal
    |    {
  > |        confirmationTimes[transactionId] = confirmationTime;
    |        emit ConfirmationTimeSet(transactionId, confirmationTime);
    |    }
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(762)

[33mWarning[0m for UnrestrictedWrite in contract 'PartiallyDelayedMultiSig':
    | * Multi-Signature Wallet with delay in execution except for some function selectors.
    | */
  > |contract PartiallyDelayedMultiSig is
    |    DelayedMultiSig
    |{
  at /unique_chucks/21/0xba2906b18b069b40c6d2cafd392e76ad479b1b53.sol(775)