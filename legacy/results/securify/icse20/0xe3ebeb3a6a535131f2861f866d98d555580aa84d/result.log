Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:BaseSafe
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:DutchXBaseModule
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:DutchXInterface
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:DutchXSellerModule
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:DutchXTokenInterface
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:Enum
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:EtherPaymentFallback
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:Executor
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:GnosisSafe
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:ISignatureValidator
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:MasterCopy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:Module
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:ModuleManager
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:OwnerManager
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:SecuredTokenTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:SelfAuthorized
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol:SignatureDecoder
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnhandledException in contract 'BaseSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'BaseSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'BaseSafe':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(320)

[31mViolation[0m for LockedEther in contract 'DutchXSellerModule':
    |//  differs from the Complete module in the allowed functions, it doesn't allow to perform buy operations.
    |/// @author Denis Granha - <denis@gnosis.pm>
  > |contract DutchXSellerModule is DutchXBaseModule {
    |
    |    string public constant NAME = "DutchX Seller Module";
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(1046)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        require(address(manager) == address(0), "Manager has already been set");
    |        if (_manager == address(0)){
  > |            manager = ModuleManager(msg.sender);
    |        }
    |        else{
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(885)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        }
    |        else{
  > |            manager = ModuleManager(_manager);
    |        }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(888)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        }
    |
  > |        dutchXAddress = dx;
    |
    |        for (uint256 i = 0; i < tokens.length; i++) {
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(891)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |            address token = tokens[i];
    |            require(token != address(0), "Invalid token provided");
  > |            isWhitelistedToken[token] = true;
    |        }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(896)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |            address operator = operators[i];
    |            require(operator != address(0), "Invalid operator address provided");
  > |            isOperator[operator] = true;
    |        }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(904)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        for (uint i = 0; i<whitelistedTokens.length - 1; i++)
    |            if(whitelistedTokens[i] == token){
  > |                whitelistedTokens[i] = whitelistedTokens[whitelistedTokens.length-1];
    |                break;
    |            }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(933)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        for (uint i = 0; i<whitelistedOperators.length - 1; i++)
    |            if(whitelistedOperators[i] == operator){
  > |                whitelistedOperators[i] = whitelistedOperators[whitelistedOperators.length-1];
    |                break;
    |            }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(962)

[31mViolation[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |//  differs from the Complete module in the allowed functions, it doesn't allow to perform buy operations.
    |/// @author Denis Granha - <denis@gnosis.pm>
  > |contract DutchXSellerModule is DutchXBaseModule {
    |
    |    string public constant NAME = "DutchX Seller Module";
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(1046)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |//  differs from the Complete module in the allowed functions, it doesn't allow to perform buy operations.
    |/// @author Denis Granha - <denis@gnosis.pm>
  > |contract DutchXSellerModule is DutchXBaseModule {
    |
    |    string public constant NAME = "DutchX Seller Module";
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(1046)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |
    |contract Enum {
  > |    enum Operation {
    |        Call,
    |        DelegateCall,
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        require(token != address(0), "Invalid token provided");
    |        require(!isWhitelistedToken[token], "Token is already whitelisted");
  > |        isWhitelistedToken[token] = true;
    |        whitelistedTokens.push(token);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(918)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        require(!isWhitelistedToken[token], "Token is already whitelisted");
    |        isWhitelistedToken[token] = true;
  > |        whitelistedTokens.push(token);
    |    }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(919)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |    {
    |        require(isWhitelistedToken[token], "Token is not whitelisted");
  > |        isWhitelistedToken[token] = false;
    |
    |        for (uint i = 0; i<whitelistedTokens.length - 1; i++)
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(929)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        require(operator != address(0), "Invalid address provided");
    |        require(!isOperator[operator], "Operator is already whitelisted");
  > |        isOperator[operator] = true;
    |        whitelistedOperators.push(operator);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(947)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |        require(!isOperator[operator], "Operator is already whitelisted");
    |        isOperator[operator] = true;
  > |        whitelistedOperators.push(operator);
    |    }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(948)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |    {
    |        require(isOperator[operator], "Operator is not whitelisted");
  > |        isOperator[operator] = false;
    |
    |        for (uint i = 0; i<whitelistedOperators.length - 1; i++)
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(958)

[33mWarning[0m for UnrestrictedWrite in contract 'DutchXSellerModule':
    |    {
    |        require(dx != address(0), "Invalid address provided");
  > |        dutchXAddress = dx;
    |    }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(976)

[31mViolation[0m for LockedEther in contract 'EtherPaymentFallback':
    |}
    |
  > |contract EtherPaymentFallback {
    |
    |    /// @dev Fallback function accepts Ether transactions.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(11)

[31mViolation[0m for LockedEther in contract 'Executor':
    |}
    |
  > |contract Executor is EtherPaymentFallback {
    |
    |    event ContractCreation(address newContract);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(22)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            let success := call(sub(gas, 10000), token, 0, add(data, 0x20), mload(data), 0, 0)
    |            let ptr := mload(0x40)
    |            returndatacopy(ptr, 0, returndatasize)
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(89)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |        if (gasToken == address(0)) {
    |            // solium-disable-next-line security/no-send
  > |            require(receiver.send(amount), "Could not pay gas costs with ether");
    |        } else {
    |            require(transferToken(gasToken, receiver, amount), "Could not pay gas costs with token");
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(644)

[31mViolation[0m for RepeatedCall in contract 'GnosisSafe':
    |                    contractSignature := add(add(signatures, s), 0x20)
    |                }
  > |                if (!ISignatureValidator(currentOwner).isValidSignature(data, contractSignature)) {
    |                    return false;
    |                }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(685)

[33mWarning[0m for TODAmount in contract 'GnosisSafe':
    |        if (gasToken == address(0)) {
    |            // solium-disable-next-line security/no-send
  > |            require(receiver.send(amount), "Could not pay gas costs with ether");
    |        } else {
    |            require(transferToken(gasToken, receiver, amount), "Could not pay gas costs with token");
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(644)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |    {
    |        require(modules[SENTINEL_MODULES] == address(0), "Modules have already been initialized");
  > |        modules[SENTINEL_MODULES] = SENTINEL_MODULES;
    |        if (to != address(0))
    |            // Setup has to complete successfully or transaction fails.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(120)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |            // No duplicate owners allowed.
    |            require(owners[owner] == address(0), "Duplicate owner address provided");
  > |            owners[currentOwner] = owner;
    |            currentOwner = owner;
    |        }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(234)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |            currentOwner = owner;
    |        }
  > |        owners[currentOwner] = SENTINEL_OWNERS;
    |        ownerCount = _owners.length;
    |        threshold = _threshold;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(237)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        }
    |        owners[currentOwner] = SENTINEL_OWNERS;
  > |        ownerCount = _owners.length;
    |        threshold = _threshold;
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(238)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[currentOwner] = SENTINEL_OWNERS;
    |        ownerCount = _owners.length;
  > |        threshold = _threshold;
    |    }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(239)

[31mViolation[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |    {
    |        require(domainSeparator == 0, "Domain Separator already set!");
  > |        domainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));
    |        setupSafe(_owners, _threshold, to, data);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(577)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(320)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisSafe':
    |        authorized
    |    {
  > |        signedMessages[getMessageHash(_data)] = 1;
    |    }
    |
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(756)

[33mWarning[0m for UnrestrictedWrite in contract 'MasterCopy':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'Module':
    |        // Master copy address cannot be null.
    |        require(_masterCopy != address(0), "Invalid master copy address provided");
  > |        masterCopy = _masterCopy;
    |    }
    |}
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(390)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param prevModule Module that pointed to the module to be removed in the linked list
    |    /// @param module Module to be removed.
  > |    function disableModule(Module prevModule, Module module)
    |        public
    |        authorized
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(146)

[31mViolation[0m for MissingInputValidation in contract 'ModuleManager':
    |    /// @param data Data payload of module transaction.
    |    /// @param operation Operation type of module transaction.
  > |    function execTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation)
    |        public
    |        returns (bool success)
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(163)

[33mWarning[0m for TODAmount in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[33mWarning[0m for TODReceiver in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[31mViolation[0m for UnhandledException in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ModuleManager':
    |        // solium-disable-next-line security/no-inline-assembly
    |        assembly {
  > |            success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)
    |        }
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        // Module cannot be added twice.
    |        require(modules[address(module)] == address(0), "Module has already been added");
  > |        modules[address(module)] = modules[SENTINEL_MODULES];
    |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(module)] == address(0), "Module has already been added");
    |        modules[address(module)] = modules[SENTINEL_MODULES];
  > |        modules[SENTINEL_MODULES] = address(module);
    |        emit EnabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(address(module) != address(0) && address(module) != SENTINEL_MODULES, "Invalid module address provided");
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
  > |        modules[address(prevModule)] = modules[address(module)];
    |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'ModuleManager':
    |        require(modules[address(prevModule)] == address(module), "Invalid prevModule, module pair provided");
    |        modules[address(prevModule)] = modules[address(module)];
  > |        modules[address(module)] = address(0);
    |        emit DisabledModule(module);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(154)

[31mViolation[0m for LockedEther in contract 'OwnerManager':
    |}
    |
  > |contract OwnerManager is SelfAuthorized {
    |
    |    event AddedOwner(address owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // No duplicate owners allowed.
    |        require(owners[owner] == address(0), "Address is already an owner");
  > |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(254)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[owner] == address(0), "Address is already an owner");
    |        owners[owner] = owners[SENTINEL_OWNERS];
  > |        owners[SENTINEL_OWNERS] = owner;
    |        ownerCount++;
    |        emit AddedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[owner] = owners[SENTINEL_OWNERS];
    |        owners[SENTINEL_OWNERS] = owner;
  > |        ownerCount++;
    |        emit AddedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(256)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owner != address(0) && owner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
  > |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
    |        ownerCount--;
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == owner, "Invalid prevOwner, owner pair provided");
    |        owners[prevOwner] = owners[owner];
  > |        owners[owner] = address(0);
    |        ownerCount--;
    |        emit RemovedOwner(owner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[prevOwner] = owners[owner];
    |        owners[owner] = address(0);
  > |        ownerCount--;
    |        emit RemovedOwner(owner);
    |        // Change threshold if threshold was changed.
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, "Invalid owner address provided");
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
  > |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        require(owners[prevOwner] == oldOwner, "Invalid prevOwner, owner pair provided");
    |        owners[newOwner] = owners[oldOwner];
  > |        owners[prevOwner] = newOwner;
    |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(303)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        owners[newOwner] = owners[oldOwner];
    |        owners[prevOwner] = newOwner;
  > |        owners[oldOwner] = address(0);
    |        emit RemovedOwner(oldOwner);
    |        emit AddedOwner(newOwner);
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(304)

[33mWarning[0m for UnrestrictedWrite in contract 'OwnerManager':
    |        // There has to be at least one Safe owner.
    |        require(_threshold >= 1, "Threshold needs to be greater than 0");
  > |        threshold = _threshold;
    |        emit ChangedThreshold(threshold);
    |    }
  at /unique_chucks/40/0xe3ebeb3a6a535131f2861f866d98d555580aa84d.sol(320)