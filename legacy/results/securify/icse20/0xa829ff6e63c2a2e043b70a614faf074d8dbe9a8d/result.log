Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:IAOSetting
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:INameAccountRecovery
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:INameFactory
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:INamePublicKey
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:INameTAOPosition
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:NameAccountRecovery
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(371)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(383)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(392)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(421)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(330)

[31mViolation[0m for RepeatedCall in contract 'NameAccountRecovery':
    |
    |		// Make sure Speaker is not currenty compromised
  > |		require (!this.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |
    |		// Make sure this Name is currently compromised and needs action
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(939)

[31mViolation[0m for RepeatedCall in contract 'NameAccountRecovery':
    |		require (_nonce > 0);
    |
  > |		emit SetNameNewAddress(_id, _nameFactory.ethAddressToNameId(msg.sender), _newAddress, now, 1);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(963)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(808)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(818)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(827)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(828)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(837)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(838)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setNamePublicKeyAddress(address _namePublicKeyAddress) public onlyTheAO {
    |		require (_namePublicKeyAddress != address(0));
  > |		namePublicKeyAddress = _namePublicKeyAddress;
    |		_namePublicKey = INamePublicKey(_namePublicKeyAddress);
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(847)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		require (_namePublicKeyAddress != address(0));
    |		namePublicKeyAddress = _namePublicKeyAddress;
  > |		_namePublicKey = INamePublicKey(_namePublicKeyAddress);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(848)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setSettingTAOId(address _settingTAOId) public onlyTheAO {
    |		require (AOLibrary.isTAO(_settingTAOId));
  > |		settingTAOId = _settingTAOId;
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(857)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(866)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(867)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		require (now > _accountRecovery.lockedUntilTimestamp);
    |
  > |		_accountRecovery.submitted = true;
    |		_accountRecovery.submittedTimestamp = now;
    |		_accountRecovery.lockedUntilTimestamp = _accountRecovery.submittedTimestamp.add(_getAccountRecoveryLockDuration());
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(905)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |
    |		_accountRecovery.submitted = true;
  > |		_accountRecovery.submittedTimestamp = now;
    |		_accountRecovery.lockedUntilTimestamp = _accountRecovery.submittedTimestamp.add(_getAccountRecoveryLockDuration());
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(906)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		_accountRecovery.submitted = true;
    |		_accountRecovery.submittedTimestamp = now;
  > |		_accountRecovery.lockedUntilTimestamp = _accountRecovery.submittedTimestamp.add(_getAccountRecoveryLockDuration());
    |
    |		uint256 _nonce = _nameFactory.incrementNonce(_id);
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(907)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |
    |		AccountRecovery storage _accountRecovery = accountRecoveries[_id];
  > |		_accountRecovery.submitted = false;
    |		_accountRecovery.submittedTimestamp = 0;
    |		_accountRecovery.lockedUntilTimestamp = 0;
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(948)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		AccountRecovery storage _accountRecovery = accountRecoveries[_id];
    |		_accountRecovery.submitted = false;
  > |		_accountRecovery.submittedTimestamp = 0;
    |		_accountRecovery.lockedUntilTimestamp = 0;
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(949)

[31mViolation[0m for UnrestrictedWrite in contract 'NameAccountRecovery':
    |		_accountRecovery.submitted = false;
    |		_accountRecovery.submittedTimestamp = 0;
  > |		_accountRecovery.lockedUntilTimestamp = 0;
    |
    |		// Replace the existing eth address with new address
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(950)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(330)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(683)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(712)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(704)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(715)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(114)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(162)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(238)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(254)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/30/0xa829ff6e63c2a2e043b70a614faf074d8dbe9a8d.sol(256)