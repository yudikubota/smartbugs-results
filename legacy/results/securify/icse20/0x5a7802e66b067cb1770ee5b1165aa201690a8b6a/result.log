Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Claimable
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:CompatibleERC20Functions
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:DarknodePayment
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:DarknodePaymentStore
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:DarknodeRegistry
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:DarknodeRegistryStore
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:DarknodeSlasher
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:ERC20Detailed
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:ERC20Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:IERC20
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:LinkedList
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Math
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Ownable
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Pausable
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:PauserRole
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:RenToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'DarknodePayment':
    |    /// @param _token Which token to transfer
    |    function withdraw(address _darknode, address _token) public {
  > |        address payable darknodeOwner = darknodeRegistry.getDarknodeOwner(_darknode);
    |        require(darknodeOwner != address(0x0), "invalid darknode owner");
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1978)

[31mViolation[0m for RepeatedCall in contract 'DarknodePayment':
    |        require(darknodeOwner != address(0x0), "invalid darknode owner");
    |
  > |        uint256 amount = store.darknodeBalances(_darknode, _token);
    |        require(amount > 0, "nothing to withdraw");
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1981)

[31mViolation[0m for RepeatedCall in contract 'DarknodePayment':
    |        require(amount > 0, "nothing to withdraw");
    |
  > |        store.transfer(_darknode, _token, amount, darknodeOwner);
    |        emit LogDarknodeWithdrew(_darknode, amount, _token);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1984)

[31mViolation[0m for RepeatedCall in contract 'DarknodePayment':
    |            if (previousCycleRewardShare[token] > 0) {
    |                unclaimedRewards[token] = unclaimedRewards[token].sub(previousCycleRewardShare[token]);
  > |                store.incrementDarknodeBalance(_darknode, token, previousCycleRewardShare[token]);
    |            }
    |        }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2156)

[31mViolation[0m for RepeatedCall in contract 'DarknodePayment':
    |        } else {
    |            // Lock up the current balance for darknode reward allocation
  > |            unclaimedRewards[_token] = store.availableBalance(_token);
    |            previousCycleRewardShare[_token] = unclaimedRewards[_token].div(shareCount);
    |        }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2171)

[33mWarning[0m for TODAmount in contract 'DarknodePayment':
    |    /// @notice Forward all payments to the DarknodePaymentStore.
    |    function () external payable {
  > |        address(store).transfer(msg.value);
    |        emit LogPaymentReceived(msg.sender, msg.value, ETHEREUM);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1996)

[33mWarning[0m for TODAmount in contract 'DarknodePayment':
    |            require(_value == msg.value, "mismatched deposit value");
    |            receivedValue = msg.value;
  > |            address(store).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "unexpected ether transfer");
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2045)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DarknodePayment':
    |    /// @notice Forward all payments to the DarknodePaymentStore.
    |    function () external payable {
  > |        address(store).transfer(msg.value);
    |        emit LogPaymentReceived(msg.sender, msg.value, ETHEREUM);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1996)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DarknodePayment':
    |            require(_value == msg.value, "mismatched deposit value");
    |            receivedValue = msg.value;
  > |            address(store).transfer(msg.value);
    |        } else {
    |            require(msg.value == 0, "unexpected ether transfer");
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2045)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |
    |        // Start a new cycle
  > |        previousCycle = currentCycle;
    |        currentCycle = block.number;
    |        cycleStartTime = now;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2022)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        // Start a new cycle
    |        previousCycle = currentCycle;
  > |        currentCycle = block.number;
    |        cycleStartTime = now;
    |        cycleTimeout = cycleStartTime.add(cycleDuration);
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2023)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        previousCycle = currentCycle;
    |        currentCycle = block.number;
  > |        cycleStartTime = now;
    |        cycleTimeout = cycleStartTime.add(cycleDuration);
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2024)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        currentCycle = block.number;
    |        cycleStartTime = now;
  > |        cycleTimeout = cycleStartTime.add(cycleDuration);
    |
    |        // Update the share size for next cycle
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2025)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |
    |        // Update the share size for next cycle
  > |        shareCount = store.darknodeWhitelistLength();
    |        // Update the list of registeredTokens
    |        _updateTokenList();
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2028)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |            require(pendingTokens[i] != _token, "token already pending registration");
    |        }
  > |        pendingTokens.push(_token);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2095)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |    function _claimDarknodeReward(address _darknode) private {
    |        require(!rewardClaimed[_darknode][previousCycle], "reward already claimed");
  > |        rewardClaimed[_darknode][previousCycle] = true;
    |        uint arrayLength = registeredTokens.length;
    |        for (uint i = 0; i < arrayLength; i++) {
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2148)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |    function _snapshotBalance(address _token) private {
    |        if (shareCount == 0) {
  > |            unclaimedRewards[_token] = 0;
    |            previousCycleRewardShare[_token] = 0;
    |        } else {
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2167)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        if (shareCount == 0) {
    |            unclaimedRewards[_token] = 0;
  > |            previousCycleRewardShare[_token] = 0;
    |        } else {
    |            // Lock up the current balance for darknode reward allocation
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2168)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        } else {
    |            // Lock up the current balance for darknode reward allocation
  > |            unclaimedRewards[_token] = store.availableBalance(_token);
    |            previousCycleRewardShare[_token] = unclaimedRewards[_token].div(shareCount);
    |        }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2171)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |            // Lock up the current balance for darknode reward allocation
    |            unclaimedRewards[_token] = store.availableBalance(_token);
  > |            previousCycleRewardShare[_token] = unclaimedRewards[_token].div(shareCount);
    |        }
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2172)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        for (uint i = 0; i < arrayLength; i++) {
    |            address token = pendingTokens[i];
  > |            registeredTokens.push(token);
    |            registeredTokenIndex[token] = registeredTokens.length;
    |            emit LogTokenRegistered(token);
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2201)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |            address token = pendingTokens[i];
    |            registeredTokens.push(token);
  > |            registeredTokenIndex[token] = registeredTokens.length;
    |            emit LogTokenRegistered(token);
    |        }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2202)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |/// @notice DarknodePayment is responsible for paying off darknodes for their
    |///         computation.
  > |contract DarknodePayment is Ownable {
    |    using SafeMath for uint256;
    |    using CompatibleERC20Functions for ERC20;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1816)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |        require(_addr != address(0), "invalid contract address");
    |        emit LogBlacklisterChanged(_addr, blacklister);
  > |        blacklister = _addr;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2113)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePayment':
    |    function updateCycleDuration(uint256 _durationSeconds) external onlyOwner {
    |        uint256 oldDuration = cycleDuration;
  > |        cycleDuration = _durationSeconds;
    |        emit LogCycleDurationChanged(cycleDuration, oldDuration);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(2122)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DarknodePaymentStore':
    |
    |        if (_token == ETHEREUM) {
  > |            _recipient.transfer(_amount);
    |        } else {
    |            ERC20(_token).safeTransfer(_recipient, _amount);
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1806)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(839)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    */
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |      _pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(847)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function claimOwnership() onlyPendingOwner public {
    |      emit OwnershipTransferred(_owner, _pendingOwner);
  > |      _owner = _pendingOwner;
    |      _pendingOwner = address(0);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(855)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |      emit OwnershipTransferred(_owner, _pendingOwner);
    |      _owner = _pendingOwner;
  > |      _pendingOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(856)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function blacklist(address _darknode) external onlyOwner {
    |        require(!isBlacklisted(_darknode), "darknode already blacklisted");
  > |        darknodeBlacklist[_darknode] = now;
    |
    |        // Unwhitelist if necessary
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1758)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        // Unwhitelist if necessary
    |        if (isWhitelisted(_darknode)) {
  > |            darknodeWhitelist[_darknode] = 0;
    |            // Use SafeMath when subtracting to avoid underflows
    |            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1762)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |            darknodeWhitelist[_darknode] = 0;
    |            // Use SafeMath when subtracting to avoid underflows
  > |            darknodeWhitelistLength = darknodeWhitelistLength.sub(1);
    |        }
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1764)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(!isWhitelisted(_darknode), "darknode already whitelisted");
    |
  > |        darknodeWhitelist[_darknode] = now;
    |        darknodeWhitelistLength++;
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1776)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |
    |        darknodeWhitelist[_darknode] = now;
  > |        darknodeWhitelistLength++;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1777)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(availableBalance(_token) >= _amount, "insufficient contract balance");
    |
  > |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);
    |        lockedBalances[_token] = lockedBalances[_token].add(_amount);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1790)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |
    |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].add(_amount);
  > |        lockedBalances[_token] = lockedBalances[_token].add(_amount);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1791)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |    function transfer(address _darknode, address _token, uint256 _amount, address payable _recipient) external onlyOwner {
    |        require(darknodeBalances[_darknode][_token] >= _amount, "insufficient darknode balance");
  > |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);
    |        lockedBalances[_token] = lockedBalances[_token].sub(_amount);
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1802)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodePaymentStore':
    |        require(darknodeBalances[_darknode][_token] >= _amount, "insufficient darknode balance");
    |        darknodeBalances[_darknode][_token] = darknodeBalances[_darknode][_token].sub(_amount);
  > |        lockedBalances[_token] = lockedBalances[_token].sub(_amount);
    |
    |        if (_token == ETHEREUM) {
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1803)

[31mViolation[0m for LockedEther in contract 'DarknodeRegistry':
    |/// @notice DarknodeRegistry is responsible for the registration and
    |/// deregistration of Darknodes.
  > |contract DarknodeRegistry is Ownable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1180)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |
    |        // Flag this darknode for registration
  > |        store.appendDarknode(
    |            _darknodeID,
    |            msg.sender,
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1335)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |        // worth challenging yourself
    |        require(ren.transfer(store.darknodeOwner(_challenger1), reward), "reward transfer failed");
  > |        require(ren.transfer(store.darknodeOwner(_challenger2), reward), "reward transfer failed");
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1477)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |    /// @param _epoch One of currentEpoch, previousEpoch
    |    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {
  > |        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
    |        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
    |        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1609)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |    function isRegisteredInEpoch(address _darknodeID, Epoch memory _epoch) private view returns (bool) {
    |        uint256 registeredAt = store.darknodeRegisteredAt(_darknodeID);
  > |        uint256 deregisteredAt = store.darknodeDeregisteredAt(_darknodeID);
    |        bool registered = registeredAt != 0 && registeredAt <= _epoch.blocknumber;
    |        bool notDeregistered = deregisteredAt == 0 || deregisteredAt > _epoch.blocknumber;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1610)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |            }
    |            if (!includeNext) {
  > |                next = store.next(next);
    |                continue;
    |            }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1651)

[31mViolation[0m for RepeatedCall in contract 'DarknodeRegistry':
    |            }
    |            nodes[n] = next;
  > |            next = store.next(next);
    |            n += 1;
    |        }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1655)

[31mViolation[0m for LockedEther in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1036)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1036)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(839)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    */
    |    function transferOwnership(address newOwner) onlyOwner public {
  > |      _pendingOwner = newOwner;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(847)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function claimOwnership() onlyPendingOwner public {
    |      emit OwnershipTransferred(_owner, _pendingOwner);
  > |      _owner = _pendingOwner;
    |      _pendingOwner = address(0);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(855)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |      emit OwnershipTransferred(_owner, _pendingOwner);
    |      _owner = _pendingOwner;
  > |      _pendingOwner = address(0);
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(856)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        address n = self.list[target].next;
    |
  > |        self.list[newNode].previous = target;
    |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(926)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |
    |        self.list[newNode].previous = target;
  > |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
    |        self.list[n].previous = newNode;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(927)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[newNode].previous = target;
    |        self.list[newNode].next = n;
  > |        self.list[target].next = newNode;
    |        self.list[n].previous = newNode;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(928)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[newNode].next = n;
    |        self.list[target].next = newNode;
  > |        self.list[n].previous = newNode;
    |
    |        self.list[newNode].inList = true;
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(929)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        self.list[n].previous = newNode;
    |
  > |        self.list[newNode].inList = true;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(931)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        address n = self.list[node].next;
    |
  > |        self.list[p].next = n;
    |        self.list[n].previous = p;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(950)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |
    |        self.list[p].next = n;
  > |        self.list[n].previous = p;
    |
    |        // Deleting the node should set this value to false, but we set it here for
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(951)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        // Deleting the node should set this value to false, but we set it here for
    |        // explicitness.
  > |        self.list[node].inList = false;
    |        delete self.list[node];
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(955)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        // explicitness.
    |        self.list[node].inList = false;
  > |        delete self.list[node];
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(956)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |/// contract. The data / fund logic and storage have been separated to improve
    |/// upgradability.
  > |contract DarknodeRegistryStore is Claimable {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1036)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |            deregisteredAt: _deregisteredAt
    |        });
  > |        darknodeRegistry[_darknodeID] = darknode;
    |        LinkedList.append(darknodes, _darknodeID);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1114)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    function removeDarknode(address darknodeID) external onlyOwner {
    |        uint256 bond = darknodeRegistry[darknodeID].bond;
  > |        delete darknodeRegistry[darknodeID];
    |        LinkedList.remove(darknodes, darknodeID);
    |        require(ren.transfer(owner(), bond), "bond transfer failed");
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1133)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |        uint256 previousBond = darknodeRegistry[darknodeID].bond;
    |        require(decreasedBond < previousBond, "bond not decreased");
  > |        darknodeRegistry[darknodeID].bond = decreasedBond;
    |        require(ren.transfer(owner(), previousBond.sub(decreasedBond)), "bond transfer failed");
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1143)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeRegistryStore':
    |    /// @notice Updates the deregistration timestamp of a darknode.
    |    function updateDarknodeDeregisteredAt(address darknodeID, uint256 deregisteredAt) external onlyOwner {
  > |        darknodeRegistry[darknodeID].deregisteredAt = deregisteredAt;
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(1149)

[31mViolation[0m for MissingInputValidation in contract 'DarknodeSlasher':
    |    }
    |
  > |    function slash(address _prover, address _challenger1, address _challenger2)
    |        external
    |        onlyOwner
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(772)

[31mViolation[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'DarknodeSlasher':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(675)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Pausable':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(683)

[31mViolation[0m for LockedEther in contract 'LinkedList':
    | * @notice LinkedList is a library for a circular double linked list.
    | */
  > |library LinkedList {
    |
    |    /*
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(863)

[31mViolation[0m for LockedEther in contract 'RenToken':
    |}
    |
  > |contract RenToken is Ownable, ERC20Detailed, ERC20Pausable, ERC20Burnable {
    |
    |    string private constant _name = "Republic Token";
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(737)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(71)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(675)

[33mWarning[0m for UnrestrictedWrite in contract 'RenToken':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/4/0x5a7802e66b067cb1770ee5b1165aa201690a8b6a.sol(683)