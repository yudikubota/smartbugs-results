Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:IAOSetting
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:INameAccountRecovery
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:INameFactory
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:INameTAOLookup
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:INameTAOPosition
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:ITAOAncestry
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:ITAOFactory
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:ITAOPool
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:Logos
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TAOController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TAOCurrency
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TAOFactory
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(437)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(449)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(458)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(487)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(953)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(963)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1010)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1011)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1028)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1029)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1040)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1041)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1143)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1144)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1153)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1154)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1163)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1164)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (positionFromOthers[_to].add(_value) >= positionFromOthers[_to]); // check for overflows
    |
  > |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);
    |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);
    |		positionFromOthers[_to] = positionFromOthers[_to].add(_value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1199)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |
    |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);
  > |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);
    |		positionFromOthers[_to] = positionFromOthers[_to].add(_value);
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1200)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].add(_value);
    |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].add(_value);
  > |		positionFromOthers[_to] = positionFromOthers[_to].add(_value);
    |
    |		emit PositionFrom(_from, _to, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1201)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		require (positionOnOthers[_from][_to] >= _value);
    |
  > |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);
    |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);
    |		positionFromOthers[_to] = positionFromOthers[_to].sub(_value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1219)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |
    |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);
  > |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);
    |		positionFromOthers[_to] = positionFromOthers[_to].sub(_value);
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1220)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		positionOnOthers[_from][_to] = positionOnOthers[_from][_to].sub(_value);
    |		totalPositionOnOthers[_from] = totalPositionOnOthers[_from].sub(_value);
  > |		positionFromOthers[_to] = positionFromOthers[_to].sub(_value);
    |
    |		emit UnpositionFrom(_from, _to, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1221)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		address _nameId = _nameTAOPosition.getAdvocate(_taoId);
    |
  > |		advocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);
    |		totalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1237)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |
    |		advocatedTAOLogos[_nameId][_taoId] = advocatedTAOLogos[_nameId][_taoId].add(_amount);
  > |		totalAdvocatedTAOLogos[_nameId] = totalAdvocatedTAOLogos[_nameId].add(_amount);
    |
    |		emit AddAdvocatedTAOLogos(_nameId, _taoId, _amount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1238)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |
    |		uint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];
  > |		advocatedTAOLogos[_fromNameId][_taoId] = 0;
    |		totalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);
    |		advocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1256)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		uint256 _amount = advocatedTAOLogos[_fromNameId][_taoId];
    |		advocatedTAOLogos[_fromNameId][_taoId] = 0;
  > |		totalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);
    |		advocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);
    |		totalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1257)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		advocatedTAOLogos[_fromNameId][_taoId] = 0;
    |		totalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);
  > |		advocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);
    |		totalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1258)

[31mViolation[0m for UnrestrictedWrite in contract 'Logos':
    |		totalAdvocatedTAOLogos[_fromNameId] = totalAdvocatedTAOLogos[_fromNameId].sub(_amount);
    |		advocatedTAOLogos[_toNameId][_taoId] = advocatedTAOLogos[_toNameId][_taoId].add(_amount);
  > |		totalAdvocatedTAOLogos[_toNameId] = totalAdvocatedTAOLogos[_toNameId].add(_amount);
    |
    |		emit TransferAdvocatedTAOLogos(_fromNameId, _toNameId, _taoId, _amount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1259)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(399)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(399)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(828)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(838)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(847)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(848)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(857)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(858)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(867)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOController':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(868)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(953)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(963)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(972)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function whitelistBurnFrom(address _from, uint256 _value) public inWhitelist isNameOrTAO(_from) returns (bool success) {
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
    |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1010)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the targeted balance
  > |		totalSupply = totalSupply.sub(_value);              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1011)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
  > |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
    |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1028)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |		uint256 previousBalances = balanceOf[_from].add(balanceOf[_to]);
    |		balanceOf[_from] = balanceOf[_from].sub(_value);        // Subtract from the sender
  > |		balanceOf[_to] = balanceOf[_to].add(_value);            // Add the same to the recipient
    |		emit Transfer(_from, _to, _value);
    |		assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1029)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	 */
    |	function _mint(address target, uint256 mintedAmount) internal {
  > |		balanceOf[target] = balanceOf[target].add(mintedAmount);
    |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1040)

[31mViolation[0m for UnrestrictedWrite in contract 'TAOCurrency':
    |	function _mint(address target, uint256 mintedAmount) internal {
    |		balanceOf[target] = balanceOf[target].add(mintedAmount);
  > |		totalSupply = totalSupply.add(mintedAmount);
    |		emit Transfer(address(0), address(this), mintedAmount);
    |		emit Transfer(address(this), target, mintedAmount);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1041)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |	 */
    |	modifier senderNameNotCompromised() {
  > |		require (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |		_;
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(817)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |		require (!_nameTAOLookup.isExist(_name));
    |
  > |		uint256 _nameSumLogos = _logos.sumBalanceOf(_nameFactory.ethAddressToNameId(msg.sender));
    |		if (AOLibrary.isTAO(_parentId)) {
    |			(, uint256 _parentCreateChildTAOMinLogos,) = _taoAncestry.getAncestryById(_parentId);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1426)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |		uint256 _nameSumLogos = _logos.sumBalanceOf(_nameFactory.ethAddressToNameId(msg.sender));
    |		if (AOLibrary.isTAO(_parentId)) {
  > |			(, uint256 _parentCreateChildTAOMinLogos,) = _taoAncestry.getAncestryById(_parentId);
    |			require (_nameSumLogos >= _parentCreateChildTAOMinLogos);
    |		} else {
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1428)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Create the TAO
  > |		require (_createTAO(_name, _nameFactory.ethAddressToNameId(msg.sender), _datHash, _database, _keyValue, _contentId, _parentId, _childMinLogos, _ethosCapStatus, _ethosCapAmount));
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1435)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			_tao.name(),
    |			_tao.originId(),
  > |			Name(address(uint160(_tao.originId()))).name(),
    |			_tao.datHash(),
    |			_tao.database(),
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1455)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			_tao.originId(),
    |			Name(address(uint160(_tao.originId()))).name(),
  > |			_tao.datHash(),
    |			_tao.database(),
    |			_tao.keyValue(),
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1456)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			Name(address(uint160(_tao.originId()))).name(),
    |			_tao.datHash(),
  > |			_tao.database(),
    |			_tao.keyValue(),
    |			_tao.contentId(),
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1457)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			_tao.datHash(),
    |			_tao.database(),
  > |			_tao.keyValue(),
    |			_tao.contentId(),
    |			_tao.typeId()
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1458)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			_tao.database(),
    |			_tao.keyValue(),
  > |			_tao.contentId(),
    |			_tao.typeId()
    |		);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1459)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			_tao.keyValue(),
    |			_tao.contentId(),
  > |			_tao.typeId()
    |		);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1460)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |		address _signatureAddress = _getValidateSignatureAddress(_data, _nonce, _signatureV, _signatureR, _signatureS);
    |		if (_isTAOSignatureAddressValid(_validateAddress, _signatureAddress, _getTAOIdByName(_name), _nonce)) {
  > |			return (true, Name(address(uint160(_nameFactory.ethAddressToNameId(_signatureAddress)))).name(), _nameTAOPosition.determinePosition(_signatureAddress, _getTAOIdByName(_name)));
    |		} else {
    |			return (false, "", 0);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1517)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Store the name lookup information
  > |		require (_nameTAOLookup.initialize(_name, taoId, 0, TAO(address(uint160(_parentId))).name(), _parentId, uint256(TAO(address(uint160(_parentId))).typeId())));
    |
    |		// Store the Advocate/Listener/Speaker information
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1555)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Store the Advocate/Listener/Speaker information
  > |		require (_nameTAOPosition.initialize(taoId, _nameId, _nameId, _nameId));
    |
    |		// Store the "Ancestry" info of this TAO
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1558)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Store the "Ancestry" info of this TAO
  > |		require (_taoAncestry.initialize(taoId, _parentId, _childMinLogos));
    |
    |		// Creat a Pool so that public can stake Ethos/Pathos on it
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1561)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Creat a Pool so that public can stake Ethos/Pathos on it
  > |		require (_taoPool.createPool(taoId, _ethosCapStatus, _ethosCapAmount));
    |
    |		taos.push(taoId);
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1564)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |		taos.push(taoId);
    |
  > |		emit CreateTAO(_nameId, taoId, taos.length.sub(1), _name, _parentId, TAO(address(uint160(_parentId))).typeId());
    |
    |		if (AOLibrary.isTAO(_parentId)) {
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1568)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			return (_nonce == _nonces[_taoId].add(1) &&
    |				_signatureAddress == _validateAddress &&
  > |				_nameTAOPosition.senderIsPosition(_validateAddress, _taoId)
    |			);
    |		} else {
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1593)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |			return (
    |				_nonce == _nonces[_taoId].add(1) &&
  > |				_nameTAOPosition.senderIsPosition(_signatureAddress, _taoId)
    |			);
    |		}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1598)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |	 */
    |	function _getTAOIdByName(string memory _name) internal view returns (address) {
  > |		return _nameTAOLookup.getIdByName(_name);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1609)

[31mViolation[0m for RepeatedCall in contract 'TAOFactory':
    |	 */
    |	function _getCreateChildTAOMinLogos() internal view returns (uint256) {
  > |		(uint256 createChildTAOMinLogos,,,,) = _aoSetting.getSettingValuesByTAOName(settingTAOId, 'createChildTAOMinLogos');
    |		return createChildTAOMinLogos;
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1617)

[33mWarning[0m for RepeatedCall in contract 'TAOFactory':
    |	) public senderIsName senderNameNotCompromised isNameOrTAO(_parentId) {
    |		require (bytes(_name).length > 0);
  > |		require (!_nameTAOLookup.isExist(_name));
    |
    |		uint256 _nameSumLogos = _logos.sumBalanceOf(_nameFactory.ethAddressToNameId(msg.sender));
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1424)

[33mWarning[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		// Store the name lookup information
  > |		require (_nameTAOLookup.initialize(_name, taoId, 0, TAO(address(uint160(_parentId))).name(), _parentId, uint256(TAO(address(uint160(_parentId))).typeId())));
    |
    |		// Store the Advocate/Listener/Speaker information
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1555)

[33mWarning[0m for RepeatedCall in contract 'TAOFactory':
    |
    |		if (AOLibrary.isTAO(_parentId)) {
  > |			require (_taoAncestry.addChild(_parentId, taoId));
    |		}
    |		return true;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1571)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |pragma solidity >=0.5.4 <0.6.0;
    |
  > |interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external; }
    |
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(828)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(838)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(847)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(848)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(857)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(858)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(867)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(868)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setNameTAOLookupAddress(address _nameTAOLookupAddress) public onlyTheAO {
    |		require (_nameTAOLookupAddress != address(0));
  > |		nameTAOLookupAddress = _nameTAOLookupAddress;
    |		_nameTAOLookup = INameTAOLookup(_nameTAOLookupAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1319)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_nameTAOLookupAddress != address(0));
    |		nameTAOLookupAddress = _nameTAOLookupAddress;
  > |		_nameTAOLookup = INameTAOLookup(_nameTAOLookupAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1320)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1329)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1330)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setLogosAddress(address _logosAddress) public onlyTheAO {
    |		require (_logosAddress != address(0));
  > |		logosAddress = _logosAddress;
    |		_logos = Logos(_logosAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1339)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_logosAddress != address(0));
    |		logosAddress = _logosAddress;
  > |		_logos = Logos(_logosAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1340)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setNameTAOVaultAddress(address _nameTAOVaultAddress) public onlyTheAO {
    |		require (_nameTAOVaultAddress != address(0));
  > |		nameTAOVaultAddress = _nameTAOVaultAddress;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1349)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setTAOAncestryAddress(address _taoAncestryAddress) public onlyTheAO {
    |		require (_taoAncestryAddress != address(0));
  > |		taoAncestryAddress = _taoAncestryAddress;
    |		_taoAncestry = ITAOAncestry(taoAncestryAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1358)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_taoAncestryAddress != address(0));
    |		taoAncestryAddress = _taoAncestryAddress;
  > |		_taoAncestry = ITAOAncestry(taoAncestryAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1359)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	 */
    |	function setSettingTAOId(address _settingTAOId) public onlyTheAO isTAO(_settingTAOId) {
  > |		settingTAOId = _settingTAOId;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1367)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |	function setTAOPoolAddress(address _taoPoolAddress) public onlyTheAO {
    |		require (_taoPoolAddress != address(0));
  > |		taoPoolAddress = _taoPoolAddress;
    |		_taoPool = ITAOPool(taoPoolAddress);
    |	}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1376)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_taoPoolAddress != address(0));
    |		taoPoolAddress = _taoPoolAddress;
  > |		_taoPool = ITAOPool(taoPoolAddress);
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1377)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |
    |		// Increment the nonce
  > |		_nonces[taoId]++;
    |
    |		// Store the name lookup information
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1552)

[33mWarning[0m for UnrestrictedWrite in contract 'TAOFactory':
    |		require (_taoPool.createPool(taoId, _ethosCapStatus, _ethosCapAmount));
    |
  > |		taos.push(taoId);
    |
    |		emit CreateTAO(_nameId, taoId, taos.length.sub(1), _name, _parentId, TAO(address(uint160(_parentId))).typeId());
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(1566)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(12)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(41)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(44)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(115)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(163)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(239)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(255)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/20/0x02a9bb92365b72fb735364af2af55ebfa9eb02c2.sol(257)