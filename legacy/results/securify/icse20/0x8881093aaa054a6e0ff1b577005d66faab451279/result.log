Processing contract: /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol:AddressWhitelist
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol:Ownable
[31mViolation[0m for LockedEther in contract 'AddressWhitelist':
    |}
    |
  > |contract AddressWhitelist is Ownable {
    |    enum Status { None, In, Out }
    |    mapping(address => Status) private whitelist;
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |
    |/**
  > | * @title Ownable
    | * @dev The Ownable contract has an owner address, and provides basic authorization control
    | * functions, this simplifies the implementation of "user permissions".
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |        // Only append new addresses to the array, never a duplicate
    |        if (whitelist[newElement] == Status.None) {
  > |            whitelistIndices.push(newElement);
    |        }
    |
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |        }
    |
  > |        whitelist[newElement] = Status.In;
    |
    |        emit AddToWhitelist(newElement);
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'AddressWhitelist':
    |    function removeFromWhitelist(address elementToRemove) external onlyOwner {
    |        if (whitelist[elementToRemove] != Status.Out) {
  > |            whitelist[elementToRemove] = Status.Out;
    |            emit RemoveFromWhitelist(elementToRemove);
    |        }
  at /unique_chucks/33/0x8881093aaa054a6e0ff1b577005d66faab451279.sol(100)