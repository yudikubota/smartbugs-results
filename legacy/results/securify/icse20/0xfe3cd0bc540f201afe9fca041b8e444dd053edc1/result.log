Processing contract: /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol:ERC20Interface
Processing contract: /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol:FucksToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'FucksToken':
    |// token transfers
    |// ----------------------------------------------------------------------------
  > |contract FucksToken is ERC20Interface, Owned, SafeMath {
    |    string public symbol;
    |    string public  name;
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(102)

[31mViolation[0m for UnrestrictedWrite in contract 'FucksToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(148)

[31mViolation[0m for UnrestrictedWrite in contract 'FucksToken':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
    |        balances[to] = safeAdd(balances[to], tokens);
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'FucksToken':
    |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(181)

[33mWarning[0m for UnrestrictedWrite in contract 'FucksToken':
    |
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'FucksToken':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'FucksToken':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(93)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    }
    |
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/34/0xfe3cd0bc540f201afe9fca041b8e444dd053edc1.sol(93)