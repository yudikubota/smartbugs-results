Processing contract: /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol:BitbattleExchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol:EIP20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol:EIP20Interface
Processing contract: /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedEtherFlow in contract 'BitbattleExchange':
    |        // Available at any phase.
    |        if (address(this).balance > 0) {
  > |            _to.transfer(_amount);
    |        }
    |    }
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(_escrow != address(0));
  > |        escrow = _escrow;
    |    }
    |
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(275)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(_minWithdraw != 0);
  > |        minWithdraw = _minWithdraw;
    |    }
    |
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(282)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(_maxNac != 0);
  > |        maxWithdraw = _maxNac;
    |    }
    |
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(!isController[_controller]);
  > |        isController[_controller] = true;
    |    }
    |
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(314)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(isController[_controller]);
  > |        isController[_controller] = false;
    |    }
    |    
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(327)

[33mWarning[0m for UnrestrictedWrite in contract 'BitbattleExchange':
    |    {
    |        require(_tokenAddress != address(0));
  > |        TokenAddress[_tokenIndex] = _tokenAddress;
    |    }
    |
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(337)

[31mViolation[0m for LockedEther in contract 'EIP20':
    |
    |
  > |contract EIP20 is EIP20Interface {
    |
    |    uint256 constant private MAX_UINT256 = 2**256 - 1;
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(96)

[31mViolation[0m for UnrestrictedWrite in contract 'EIP20':
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value;
    |        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars
    |        return true;
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(127)

[31mViolation[0m for UnrestrictedWrite in contract 'EIP20':
    |        uint256 allowance = allowed[_from][msg.sender];
    |        require(balances[_from] >= _value && allowance >= _value);
  > |        balances[_to] += _value;
    |        balances[_from] -= _value;
    |        if (allowance < MAX_UINT256) {
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(135)

[31mViolation[0m for UnrestrictedWrite in contract 'EIP20':
    |        require(balances[_from] >= _value && allowance >= _value);
    |        balances[_to] += _value;
  > |        balances[_from] -= _value;
    |        if (allowance < MAX_UINT256) {
    |            allowed[_from][msg.sender] -= _value;
  at /unique_chucks/20/0x123fa65a35f4587380cebe69cba3d21c12c99982.sol(136)