Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:AOPurchaseReceipt
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOContent
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOContentHost
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOEarning
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOPurchaseReceipt
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOStakedContent
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:IAOTreasury
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:INameFactory
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:INameTAOPosition
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(404)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(416)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(425)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(454)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |		require (_canBuy(_buyerNameId, _contentHostId, _publicKey, _publicAddress));
    |
  > |		(bytes32 _stakedContentId, bytes32 _contentId,,,) = _aoContentHost.getById(_contentHostId);
    |
    |		// Make sure the ion amount can pay for the content price
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(964)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |
    |		// Make sure the ion amount can pay for the content price
  > |		if (_aoContent.isAOContentUsageType(_contentId)) {
    |			require (_canBuyAOContent(_aoContentHost.contentHostPrice(_contentHostId), _networkIntegerAmount, _networkFractionAmount, _denomination));
    |		}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(967)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |		// Make sure the ion amount can pay for the content price
    |		if (_aoContent.isAOContentUsageType(_contentId)) {
  > |			require (_canBuyAOContent(_aoContentHost.contentHostPrice(_contentHostId), _networkIntegerAmount, _networkFractionAmount, _denomination));
    |		}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(968)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.buyer = _buyerNameId;
    |		// Update the receipt with the correct network amount
  > |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
    |		_purchaseReceipt.amountPaidByAO = _aoContentHost.contentHostPaidByAO(_contentHostId);
    |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(987)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |		// Update the receipt with the correct network amount
    |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
  > |		_purchaseReceipt.amountPaidByAO = _aoContentHost.contentHostPaidByAO(_contentHostId);
    |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
    |		_purchaseReceipt.publicKey = _publicKey;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(988)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |		address _publicAddress
    |	) internal view returns (bool) {
  > |		(bytes32 _stakedContentId,,address _host,,) = _aoContentHost.getById(_contentHostId);
    |
    |		// Make sure the content host exist
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(1083)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |
    |		// Make sure the content host exist
  > |		return (_aoContentHost.isExist(_contentHostId) &&
    |			_buyer != address(0) &&
    |			_buyer != _host &&
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(1086)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |			bytes(_publicKey).length > 0 &&
    |			_publicAddress != address(0) &&
  > |			_aoStakedContent.isActive(_stakedContentId) &&
    |			buyerPurchaseReceipts[_buyer][_contentHostId][0] == 0
    |		);
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(1092)

[31mViolation[0m for RepeatedCall in contract 'AOPurchaseReceipt':
    |	 */
    |	function _canBuyAOContent(uint256 _price, uint256 _networkIntegerAmount, uint256 _networkFractionAmount, bytes8 _denomination) internal view returns (bool) {
  > |		return _aoTreasury.toBase(_networkIntegerAmount, _networkFractionAmount, _denomination) >= _price;
    |	}
    |}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(1106)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(861)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(871)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setAOContentAddress(address _aoContentAddress) public onlyTheAO {
    |		require (_aoContentAddress != address(0));
  > |		aoContentAddress = _aoContentAddress;
    |		_aoContent = IAOContent(_aoContentAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(880)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_aoContentAddress != address(0));
    |		aoContentAddress = _aoContentAddress;
  > |		_aoContent = IAOContent(_aoContentAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(881)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setAOStakedContentAddress(address _aoStakedContentAddress) public onlyTheAO {
    |		require (_aoStakedContentAddress != address(0));
  > |		aoStakedContentAddress = _aoStakedContentAddress;
    |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(890)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_aoStakedContentAddress != address(0));
    |		aoStakedContentAddress = _aoStakedContentAddress;
  > |		_aoStakedContent = IAOStakedContent(_aoStakedContentAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(891)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setAOContentHostAddress(address _aoContentHostAddress) public onlyTheAO {
    |		require (_aoContentHostAddress != address(0));
  > |		aoContentHostAddress = _aoContentHostAddress;
    |		_aoContentHost = IAOContentHost(_aoContentHostAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(900)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_aoContentHostAddress != address(0));
    |		aoContentHostAddress = _aoContentHostAddress;
  > |		_aoContentHost = IAOContentHost(_aoContentHostAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(901)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setAOTreasuryAddress(address _aoTreasuryAddress) public onlyTheAO {
    |		require (_aoTreasuryAddress != address(0));
  > |		aoTreasuryAddress = _aoTreasuryAddress;
    |		_aoTreasury = IAOTreasury(_aoTreasuryAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(910)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_aoTreasuryAddress != address(0));
    |		aoTreasuryAddress = _aoTreasuryAddress;
  > |		_aoTreasury = IAOTreasury(_aoTreasuryAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(911)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setAOEarningAddress(address _aoEarningAddress) public onlyTheAO {
    |		require (_aoEarningAddress != address(0));
  > |		aoEarningAddress = _aoEarningAddress;
    |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(920)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_aoEarningAddress != address(0));
    |		aoEarningAddress = _aoEarningAddress;
  > |		_aoEarning = IAOEarning(_aoEarningAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(921)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(930)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(931)

[31mViolation[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(940)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    | * @title AOPurchaseReceipt
    | */
  > |contract AOPurchaseReceipt is TheAO, IAOPurchaseReceipt {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(763)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |
    |		// Increment totalPurchaseReceipts;
  > |		totalPurchaseReceipts++;
    |
    |		// Generate purchaseReceiptId
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(972)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		require (_purchaseReceipt.buyer == address(0));
    |
  > |		_purchaseReceipt.purchaseReceiptId = _purchaseReceiptId;
    |		_purchaseReceipt.contentHostId = _contentHostId;
    |		_purchaseReceipt.stakedContentId = _stakedContentId;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(981)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |
    |		_purchaseReceipt.purchaseReceiptId = _purchaseReceiptId;
  > |		_purchaseReceipt.contentHostId = _contentHostId;
    |		_purchaseReceipt.stakedContentId = _stakedContentId;
    |		_purchaseReceipt.contentId = _contentId;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(982)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.purchaseReceiptId = _purchaseReceiptId;
    |		_purchaseReceipt.contentHostId = _contentHostId;
  > |		_purchaseReceipt.stakedContentId = _stakedContentId;
    |		_purchaseReceipt.contentId = _contentId;
    |		_purchaseReceipt.buyer = _buyerNameId;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(983)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.contentHostId = _contentHostId;
    |		_purchaseReceipt.stakedContentId = _stakedContentId;
  > |		_purchaseReceipt.contentId = _contentId;
    |		_purchaseReceipt.buyer = _buyerNameId;
    |		// Update the receipt with the correct network amount
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(984)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.stakedContentId = _stakedContentId;
    |		_purchaseReceipt.contentId = _contentId;
  > |		_purchaseReceipt.buyer = _buyerNameId;
    |		// Update the receipt with the correct network amount
    |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(985)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.buyer = _buyerNameId;
    |		// Update the receipt with the correct network amount
  > |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
    |		_purchaseReceipt.amountPaidByAO = _aoContentHost.contentHostPaidByAO(_contentHostId);
    |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(987)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		// Update the receipt with the correct network amount
    |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
  > |		_purchaseReceipt.amountPaidByAO = _aoContentHost.contentHostPaidByAO(_contentHostId);
    |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
    |		_purchaseReceipt.publicKey = _publicKey;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(988)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.price = _aoContentHost.contentHostPrice(_contentHostId);
    |		_purchaseReceipt.amountPaidByAO = _aoContentHost.contentHostPaidByAO(_contentHostId);
  > |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
    |		_purchaseReceipt.publicKey = _publicKey;
    |		_purchaseReceipt.publicAddress = _publicAddress;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(989)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.amountPaidByBuyer = _purchaseReceipt.price.sub(_purchaseReceipt.amountPaidByAO);
    |		_purchaseReceipt.publicKey = _publicKey;
  > |		_purchaseReceipt.publicAddress = _publicAddress;
    |		_purchaseReceipt.createdOnTimestamp = now;
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(991)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.publicKey = _publicKey;
    |		_purchaseReceipt.publicAddress = _publicAddress;
  > |		_purchaseReceipt.createdOnTimestamp = now;
    |
    |		purchaseReceiptIndex[_purchaseReceiptId] = totalPurchaseReceipts;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(992)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |		_purchaseReceipt.createdOnTimestamp = now;
    |
  > |		purchaseReceiptIndex[_purchaseReceiptId] = totalPurchaseReceipts;
    |		buyerPurchaseReceipts[_buyerNameId][_contentHostId] = _purchaseReceiptId;
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(994)

[33mWarning[0m for UnrestrictedWrite in contract 'AOPurchaseReceipt':
    |
    |		purchaseReceiptIndex[_purchaseReceiptId] = totalPurchaseReceipts;
  > |		buyerPurchaseReceipts[_buyerNameId][_contentHostId] = _purchaseReceiptId;
    |
    |		// Calculate content creator/host/The AO earning from this purchase and store them in escrow
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(995)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(363)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(363)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(716)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(745)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(737)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(748)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(147)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(195)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(271)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(287)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/32/0xd7ddc00eaa2574efe36f966de97c4b869ca8dc2d.sol(289)