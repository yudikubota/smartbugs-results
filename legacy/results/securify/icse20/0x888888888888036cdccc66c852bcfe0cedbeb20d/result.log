Processing contract: /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol:AddressUtils
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol:AdminUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol:Proxy
Processing contract: /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol:UpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |            // Call the implementation.
    |            // out and outsize are 0 because we don't know the size yet.
  > |            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)
    |
    |            // Copy the returned data.
  at /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol(41)

[33mWarning[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |    function upgradeToAndCall(address _newImplementation, bytes calldata _data) external payable ifAdmin {
    |        _upgradeTo(_newImplementation);
  > |        (bool success, ) = _newImplementation.delegatecall(_data); 
    |        require(success);
    |    }
  at /unique_chucks/15/0x888888888888036cdccc66c852bcfe0cedbeb20d.sol(321)