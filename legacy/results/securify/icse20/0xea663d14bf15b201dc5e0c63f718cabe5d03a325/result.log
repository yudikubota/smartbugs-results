Processing contract: /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol:AceDice
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol:CryptoTycoonsVIPLib
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAOConstantGas in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(426)

[33mWarning[0m for DAOConstantGas in contract 'AceDice':
    |            // ì¹œêµ¬ ì´ˆëŒ€í•˜ë©´ ì¹œêµ¬í•œëŒ€ 15% ë•Œì–´ì¤Œ
    |            // uint inviterFee = amount * HOUSE_EDGE_PERCENT / 100 * 15 /100;
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);
    |        }
    |        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(591)

[33mWarning[0m for RepeatedCall in contract 'AceDice':
    |    // Helper routine to process the payment.
    |    function sendFunds(address payable beneficiary, uint amount, uint successLogAmount, uint dice, uint rollUnder, uint betAmount) private {
  > |        if (beneficiary.send(amount)) {
    |            emit Payment(beneficiary, successLogAmount, dice, rollUnder, betAmount);
    |        } else {
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(645)

[31mViolation[0m for TODAmount in contract 'AceDice':
    |        uint prize = todaysRewardSize / 2;
    |        todaysRewardSize = todaysRewardSize - prize;
  > |        if(to.send(prize)){
    |            emit TodaysRankingPayment(to, prize);
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(675)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(426)

[33mWarning[0m for TODAmount in contract 'AceDice':
    |            // ì¹œêµ¬ ì´ˆëŒ€í•˜ë©´ ì¹œêµ¬í•œëŒ€ 15% ë•Œì–´ì¤Œ
    |            // uint inviterFee = amount * HOUSE_EDGE_PERCENT / 100 * 15 /100;
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);
    |        }
    |        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(591)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(426)

[33mWarning[0m for TODReceiver in contract 'AceDice':
    |            // ì¹œêµ¬ ì´ˆëŒ€í•˜ë©´ ì¹œêµ¬í•œëŒ€ 15% ë•Œì–´ì¤Œ
    |            // uint inviterFee = amount * HOUSE_EDGE_PERCENT / 100 * 15 /100;
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);
    |        }
    |        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(591)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |
    |        uint vipPayback = amount * rate / 10000;
  > |        if(gambler.send(vipPayback)){
    |            emit VIPPayback(gambler, vipPayback);
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(426)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'AceDice':
    |            // ì¹œêµ¬ ì´ˆëŒ€í•˜ë©´ ì¹œêµ¬í•œëŒ€ 15% ë•Œì–´ì¤Œ
    |            // uint inviterFee = amount * HOUSE_EDGE_PERCENT / 100 * 15 /100;
  > |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);
    |        }
    |        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(591)

[31mViolation[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Move bet into 'processed' state, release funds.
  > |        bet.amount = 0;
    |
    |        uint diceWinAmount;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Lock funds.
  > |        lockedInBets += uint128(possibleWinAmount);
    |        jackpotSize += uint128(jackpotFee);
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(377)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // Lock funds.
    |        lockedInBets += uint128(possibleWinAmount);
  > |        jackpotSize += uint128(jackpotFee);
    |
    |        // Check whether contract has enough funds to process this bet.
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(378)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Store bet parameters on blockchain.
  > |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(387)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
  > |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(389)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  > |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(390)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
  > |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(391)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  > |        bet.gambler = msg.sender;
    |
    |        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(392)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Lock funds.
  > |        lockedInBets += uint128(possibleWinAmount);
    |        jackpotSize += uint128(jackpotFee);
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(473)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // Lock funds.
    |        lockedInBets += uint128(possibleWinAmount);
  > |        jackpotSize += uint128(jackpotFee);
    |
    |        // Check whether contract has enough funds to process this bet.
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(474)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Store bet parameters on blockchain.
  > |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(483)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.amount = amount;
    |        // bet.modulo = uint8(modulo);
  > |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(485)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        // bet.modulo = uint8(modulo);
    |        bet.rollUnder = uint8(betMask);
  > |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(486)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.rollUnder = uint8(betMask);
    |        bet.placeBlockNumber = uint40(block.number);
  > |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
    |        bet.inviter = inviter;
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(487)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.placeBlockNumber = uint40(block.number);
    |        bet.mask = uint40(mask);
  > |        bet.gambler = msg.sender;
    |        bet.inviter = inviter;
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(488)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bet.mask = uint40(mask);
    |        bet.gambler = msg.sender;
  > |        bet.inviter = inviter;
    |
    |        CryptoTycoonsVIPLib vipLib = CryptoTycoonsVIPLib(VIPLibraryAddress);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(489)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Move bet into 'processed' state already.
  > |        bet.amount = 0;
    |
    |        // The RNG - combine "reveal" and blockhash of placeBet using Keccak256. Miners
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(533)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        // Unlock the bet amount, regardless of the outcome.
  > |        lockedInBets -= uint128(diceWinAmount);
    |
    |        // Roll for a jackpot (if eligible).
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(568)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |            if ((uint(entropy) / modulo) % JACKPOT_MODULO == 0) {
    |                jackpotWin = jackpotSize;
  > |                jackpotSize = 0;
    |            }
    |        }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(579)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |            bet.inviter.transfer(amount * HOUSE_EDGE_PERCENT / 100 * 10 /100);
    |        }
  > |        todaysRewardSize += amount * HOUSE_EDGE_PERCENT / 100 * 9 /100;
    |        // Send the funds to gambler.
    |        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin, dice, rollUnder, amount);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(593)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.rollUnder);
    |
  > |        lockedInBets -= uint128(diceWinAmount);
    |        jackpotSize -= uint128(jackpotFee);
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(620)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |        lockedInBets -= uint128(diceWinAmount);
  > |        jackpotSize -= uint128(jackpotFee);
    |
    |        // Send the refund.
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(621)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function approveNextOwner(address payable _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(257)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function acceptNextOwner() external {
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
  > |        owner = nextOwner;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    // See comment for "secretSigner" variable.
    |    function setSecretSigner(address newSecretSigner) external onlyOwner {
  > |        secretSigner = newSecretSigner;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == false) {
  > |            croupierMap[newCroupier] = true;
    |        }
    |    }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(282)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        bool isCroupier = croupierMap[newCroupier];
    |        if (isCroupier == true) {
  > |            croupierMap[newCroupier] = false;
    |        }
    |    }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(289)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |
    |    function setVIPLibraryAddress(address addr) external onlyOwner{
  > |        VIPLibraryAddress = addr;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(294)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function setMaxProfit(uint _maxProfit) public onlyOwner {
    |        require (_maxProfit < MAX_AMOUNT, "maxProfit should be a sane number.");
  > |        maxProfit = _maxProfit;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |        require (increaseAmount <= address(this).balance, "Increase amount larger than balance.");
    |        require (jackpotSize + lockedInBets + increaseAmount <= address(this).balance, "Not enough funds.");
  > |        jackpotSize += uint128(increaseAmount);
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(307)

[33mWarning[0m for UnrestrictedWrite in contract 'AceDice':
    |    function payTodayReward(address payable to) external onlyOwner {
    |        uint prize = todaysRewardSize / 2;
  > |        todaysRewardSize = todaysRewardSize - prize;
    |        if(to.send(prize)){
    |            emit TodaysRankingPayment(to, prize);
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(674)

[31mViolation[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        uint exp = userExpPool[addr];
    |        exp = exp + amount;
  > |        userExpPool[addr] = exp;
    |    }
    |
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == false){
  > |            callerMap[caller] = true;
    |        }
    |    }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(33)

[33mWarning[0m for UnrestrictedWrite in contract 'CryptoTycoonsVIPLib':
    |        bool isCaller = callerMap[caller];
    |        if (isCaller == true) {
  > |            callerMap[caller] = false;
    |        }
    |    }
  at /unique_chucks/13/0xea663d14bf15b201dc5e0c63f718cabe5d03a325.sol(40)