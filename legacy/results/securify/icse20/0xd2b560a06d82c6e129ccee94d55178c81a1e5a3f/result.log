Processing contract: /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol:IERC20
Processing contract: /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol:Kyber
Processing contract: /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol:KyberSwap
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol:PayDApp
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol:PayModel
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'KyberSwap':
    |    }
    |
  > |    function getExpectedPrice(
    |        address src,
    |        address dest,
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(41)

[31mViolation[0m for TODAmount in contract 'PayDApp':
    |        
    |        // maxDestAmt usecase implementated (only works with ETH)
  > |        msg.sender.transfer(address(this).balance);
    |
    |        emit Paid(
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(91)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PayDApp':
    |        );
    |        
  > |        destAmt = kyberFunctions.trade.value(msg.value)(
    |            ethAddress, // src is ETH
    |            msg.value, // srcAmt
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(76)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PayDApp':
    |        
    |        // maxDestAmt usecase implementated (only works with ETH)
  > |        msg.sender.transfer(address(this).balance);
    |
    |        emit Paid(
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'PayDApp':
    |
    |    function setFees(uint newFee) public onlyAdmin {
  > |        fees = newFee;
    |    }
    |
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(121)

[33mWarning[0m for UnrestrictedWrite in contract 'PayDApp':
    |
    |    function setAdmin(address newAdmin) public onlyAdmin {
  > |        admin = newAdmin;
    |    }
    |
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(130)

[31mViolation[0m for TODAmount in contract 'PayModel':
    |        
    |        // maxDestAmt usecase implementated (only works with ETH)
  > |        msg.sender.transfer(address(this).balance);
    |
    |        emit Paid(
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(91)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PayModel':
    |        );
    |        
  > |        destAmt = kyberFunctions.trade.value(msg.value)(
    |            ethAddress, // src is ETH
    |            msg.value, // srcAmt
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(76)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PayModel':
    |        
    |        // maxDestAmt usecase implementated (only works with ETH)
  > |        msg.sender.transfer(address(this).balance);
    |
    |        emit Paid(
  at /unique_contracts/0xd2b560a06d82c6e129ccee94d55178c81a1e5a3f.sol(91)