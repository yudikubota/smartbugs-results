Processing contract: /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol:EdosTokenSender
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol:IERC20
Processing contract: /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for MissingInputValidation in contract 'EdosTokenSender':
    |    using SafeMath for uint;
    |
  > |    function send(ERC20 _token, address[] calldata _beneficiary, uint256[] calldata _amount, uint256 _totalAmount) external {
    |        require(_beneficiary.length == _amount.length, "beneficiary and amount length do not match");
    |        require(_token.allowance(msg.sender, address(this)) >= _totalAmount, "not enough allowance");
  at /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol(7)

[31mViolation[0m for RepeatedCall in contract 'EdosTokenSender':
    |        for(uint256 i = 0; i < _beneficiary.length; i++){
    |            require(_beneficiary[i] != address(0), "beneficiary address is 0x0");
  > |            require(_token.transferFrom(msg.sender,_beneficiary[i],_amount[i]), "transfer from failed");
    |            distributedTokens += _amount[i];
    |        }
  at /unique_chucks/42/0xa48711840b4ce07800b06ea4860d73ca55a836ec.sol(14)