Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:AOSettingAttribute
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:IAOSettingAttribute
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:INameTAOPosition
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(368)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(380)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(389)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(418)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    | * This contract stores all AO setting data/state
    | */
  > |contract AOSettingAttribute is TheAO, IAOSettingAttribute {
    |	INameTAOPosition internal _nameTAOPosition;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(724)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(852)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(862)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(871)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(872)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		if (_approved) {
    |			// Unlock the setting so that advocate of creatorTAOId can finalize the creation
  > |			_settingData.locked = false;
    |		} else {
    |			// Reject the setting
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(963)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		} else {
    |			// Reject the setting
  > |			_settingData.pendingCreate = false;
    |			_settingData.rejected = true;
    |		}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(966)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |			// Reject the setting
    |			_settingData.pendingCreate = false;
  > |			_settingData.rejected = true;
    |		}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(967)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		// Update the setting data
  > |		_settingData.pendingCreate = false;
    |		_settingData.locked = true;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(991)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Update the setting data
    |		_settingData.pendingCreate = false;
  > |		_settingData.locked = true;
    |
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(992)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		// Store the SettingState data
  > |		_settingState.pendingUpdate = true;
    |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
    |		_settingState.proposalTAOId = _proposalTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1027)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Store the SettingState data
    |		_settingState.pendingUpdate = true;
  > |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
    |		_settingState.proposalTAOId = _proposalTAOId;
    |		_settingState.settingStateJSON = _extraData;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1028)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingState.pendingUpdate = true;
    |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
  > |		_settingState.proposalTAOId = _proposalTAOId;
    |		_settingState.settingStateJSON = _extraData;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1029)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		if (_approved) {
    |			// Unlock the setting so that advocate of associatedTAOId can finalize the update
  > |			_settingData.locked = false;
    |		} else {
    |			// Set pendingUpdate to false
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1073)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		} else {
    |			// Set pendingUpdate to false
  > |			_settingState.pendingUpdate = false;
    |			_settingState.proposalTAOId = address(0);
    |		}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1076)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |			// Set pendingUpdate to false
    |			_settingState.pendingUpdate = false;
  > |			_settingState.proposalTAOId = address(0);
    |		}
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1077)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		// Update the setting data
  > |		_settingData.locked = true;
    |
    |		// Update the setting state
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1104)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		// Update the setting state
  > |		_settingState.pendingUpdate = false;
    |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
    |		address _proposalTAOId = _settingState.proposalTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1107)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Update the setting state
    |		_settingState.pendingUpdate = false;
  > |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
    |		address _proposalTAOId = _settingState.proposalTAOId;
    |		_settingState.proposalTAOId = address(0);
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1108)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingState.updateAdvocateNameId = _associatedTAOAdvocate;
    |		address _proposalTAOId = _settingState.proposalTAOId;
  > |		_settingState.proposalTAOId = address(0);
    |		_settingState.lastUpdateTAOId = _proposalTAOId;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1110)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		address _proposalTAOId = _settingState.proposalTAOId;
    |		_settingState.proposalTAOId = address(0);
  > |		_settingState.lastUpdateTAOId = _proposalTAOId;
    |
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1111)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		bytes32 _associatedTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));
    |		AssociatedTAOSettingDeprecation storage _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];
  > |		_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId = _associatedTAOSettingDeprecationId;
    |		_associatedTAOSettingDeprecation.associatedTAOId = _associatedTAOId;
    |		_associatedTAOSettingDeprecation.settingId = _settingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1133)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		AssociatedTAOSettingDeprecation storage _associatedTAOSettingDeprecation = associatedTAOSettingDeprecations[_associatedTAOSettingDeprecationId];
    |		_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId = _associatedTAOSettingDeprecationId;
  > |		_associatedTAOSettingDeprecation.associatedTAOId = _associatedTAOId;
    |		_associatedTAOSettingDeprecation.settingId = _settingId;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1134)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_associatedTAOSettingDeprecation.associatedTAOSettingDeprecationId = _associatedTAOSettingDeprecationId;
    |		_associatedTAOSettingDeprecation.associatedTAOId = _associatedTAOId;
  > |		_associatedTAOSettingDeprecation.settingId = _settingId;
    |
    |		// Store the creatorTAOSettingDeprecation info
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1135)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		bytes32 _creatorTAOSettingDeprecationId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));
    |		CreatorTAOSettingDeprecation storage _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];
  > |		_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId = _creatorTAOSettingDeprecationId;
    |		_creatorTAOSettingDeprecation.creatorTAOId = _creatorTAOId;
    |		_creatorTAOSettingDeprecation.settingId = _settingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1140)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		CreatorTAOSettingDeprecation storage _creatorTAOSettingDeprecation = creatorTAOSettingDeprecations[_creatorTAOSettingDeprecationId];
    |		_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId = _creatorTAOSettingDeprecationId;
  > |		_creatorTAOSettingDeprecation.creatorTAOId = _creatorTAOId;
    |		_creatorTAOSettingDeprecation.settingId = _settingId;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1141)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_creatorTAOSettingDeprecation.creatorTAOSettingDeprecationId = _creatorTAOSettingDeprecationId;
    |		_creatorTAOSettingDeprecation.creatorTAOId = _creatorTAOId;
  > |		_creatorTAOSettingDeprecation.settingId = _settingId;
    |
    |		return (_associatedTAOSettingDeprecationId, _creatorTAOSettingDeprecationId);
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1142)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		if (_approved) {
    |			// Unlock the setting so that advocate of creatorTAOId can finalize the creation
  > |			_settingDeprecation.locked = false;
    |		} else {
    |			// Reject the setting
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1216)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		} else {
    |			// Reject the setting
  > |			_settingDeprecation.pendingDeprecated = false;
    |			_settingDeprecation.rejected = true;
    |		}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1219)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |			// Reject the setting
    |			_settingDeprecation.pendingDeprecated = false;
  > |			_settingDeprecation.rejected = true;
    |		}
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1220)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		// Update the setting data
  > |		_settingDeprecation.pendingDeprecated = false;
    |		_settingDeprecation.locked = true;
    |		_settingDeprecation.migrated = true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1244)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Update the setting data
    |		_settingDeprecation.pendingDeprecated = false;
  > |		_settingDeprecation.locked = true;
    |		_settingDeprecation.migrated = true;
    |		uint256 _newSettingId = _settingDeprecation.pendingNewSettingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1245)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.pendingDeprecated = false;
    |		_settingDeprecation.locked = true;
  > |		_settingDeprecation.migrated = true;
    |		uint256 _newSettingId = _settingDeprecation.pendingNewSettingId;
    |		_settingDeprecation.pendingNewSettingId = 0;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1246)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.migrated = true;
    |		uint256 _newSettingId = _settingDeprecation.pendingNewSettingId;
  > |		_settingDeprecation.pendingNewSettingId = 0;
    |		_settingDeprecation.newSettingId = _newSettingId;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1248)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		uint256 _newSettingId = _settingDeprecation.pendingNewSettingId;
    |		_settingDeprecation.pendingNewSettingId = 0;
  > |		_settingDeprecation.newSettingId = _newSettingId;
    |
    |		address _newSettingContractAddress = _settingDeprecation.pendingNewSettingContractAddress;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1249)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |
    |		address _newSettingContractAddress = _settingDeprecation.pendingNewSettingContractAddress;
  > |		_settingDeprecation.pendingNewSettingContractAddress = address(0);
    |		_settingDeprecation.newSettingContractAddress = _newSettingContractAddress;
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1252)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		address _newSettingContractAddress = _settingDeprecation.pendingNewSettingContractAddress;
    |		_settingDeprecation.pendingNewSettingContractAddress = address(0);
  > |		_settingDeprecation.newSettingContractAddress = _newSettingContractAddress;
    |		return true;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1253)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Store setting data
    |		SettingData storage _settingData = settingDatas[_settingId];
  > |		_settingData.settingId = _settingId;
    |		_settingData.creatorNameId = _creatorNameId;
    |		_settingData.creatorTAOId = _creatorTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1296)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		SettingData storage _settingData = settingDatas[_settingId];
    |		_settingData.settingId = _settingId;
  > |		_settingData.creatorNameId = _creatorNameId;
    |		_settingData.creatorTAOId = _creatorTAOId;
    |		_settingData.associatedTAOId = _associatedTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1297)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingData.settingId = _settingId;
    |		_settingData.creatorNameId = _creatorNameId;
  > |		_settingData.creatorTAOId = _creatorTAOId;
    |		_settingData.associatedTAOId = _associatedTAOId;
    |		_settingData.settingName = _settingName;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1298)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingData.creatorNameId = _creatorNameId;
    |		_settingData.creatorTAOId = _creatorTAOId;
  > |		_settingData.associatedTAOId = _associatedTAOId;
    |		_settingData.settingName = _settingName;
    |		_settingData.pendingCreate = true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1299)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingData.associatedTAOId = _associatedTAOId;
    |		_settingData.settingName = _settingName;
  > |		_settingData.pendingCreate = true;
    |		_settingData.locked = true;
    |		_settingData.settingDataJSON = _extraData;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1301)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingData.settingName = _settingName;
    |		_settingData.pendingCreate = true;
  > |		_settingData.locked = true;
    |		_settingData.settingDataJSON = _extraData;
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1302)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Store setting state
    |		SettingState storage _settingState = settingStates[_settingId];
  > |		_settingState.settingId = _settingId;
    |		return true;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1307)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		// Store setting deprecation info
    |		SettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];
  > |		_settingDeprecation.settingId = _settingId;
    |		_settingDeprecation.creatorNameId = _creatorNameId;
    |		_settingDeprecation.creatorTAOId = _creatorTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1333)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		SettingDeprecation storage _settingDeprecation = settingDeprecations[_settingId];
    |		_settingDeprecation.settingId = _settingId;
  > |		_settingDeprecation.creatorNameId = _creatorNameId;
    |		_settingDeprecation.creatorTAOId = _creatorTAOId;
    |		_settingDeprecation.associatedTAOId = _associatedTAOId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1334)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.settingId = _settingId;
    |		_settingDeprecation.creatorNameId = _creatorNameId;
  > |		_settingDeprecation.creatorTAOId = _creatorTAOId;
    |		_settingDeprecation.associatedTAOId = _associatedTAOId;
    |		_settingDeprecation.pendingDeprecated = true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1335)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.creatorNameId = _creatorNameId;
    |		_settingDeprecation.creatorTAOId = _creatorTAOId;
  > |		_settingDeprecation.associatedTAOId = _associatedTAOId;
    |		_settingDeprecation.pendingDeprecated = true;
    |		_settingDeprecation.locked = true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1336)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.creatorTAOId = _creatorTAOId;
    |		_settingDeprecation.associatedTAOId = _associatedTAOId;
  > |		_settingDeprecation.pendingDeprecated = true;
    |		_settingDeprecation.locked = true;
    |		_settingDeprecation.pendingNewSettingId = _newSettingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1337)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.associatedTAOId = _associatedTAOId;
    |		_settingDeprecation.pendingDeprecated = true;
  > |		_settingDeprecation.locked = true;
    |		_settingDeprecation.pendingNewSettingId = _newSettingId;
    |		_settingDeprecation.pendingNewSettingContractAddress = _newSettingContractAddress;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1338)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.pendingDeprecated = true;
    |		_settingDeprecation.locked = true;
  > |		_settingDeprecation.pendingNewSettingId = _newSettingId;
    |		_settingDeprecation.pendingNewSettingContractAddress = _newSettingContractAddress;
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1339)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_settingDeprecation.locked = true;
    |		_settingDeprecation.pendingNewSettingId = _newSettingId;
  > |		_settingDeprecation.pendingNewSettingContractAddress = _newSettingContractAddress;
    |		return true;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1340)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		bytes32 _associatedTAOSettingId = keccak256(abi.encodePacked(this, _associatedTAOId, _settingId));
    |		AssociatedTAOSetting storage _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];
  > |		_associatedTAOSetting.associatedTAOSettingId = _associatedTAOSettingId;
    |		_associatedTAOSetting.associatedTAOId = _associatedTAOId;
    |		_associatedTAOSetting.settingId = _settingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1354)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		AssociatedTAOSetting storage _associatedTAOSetting = associatedTAOSettings[_associatedTAOSettingId];
    |		_associatedTAOSetting.associatedTAOSettingId = _associatedTAOSettingId;
  > |		_associatedTAOSetting.associatedTAOId = _associatedTAOId;
    |		_associatedTAOSetting.settingId = _settingId;
    |		return _associatedTAOSettingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1355)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_associatedTAOSetting.associatedTAOSettingId = _associatedTAOSettingId;
    |		_associatedTAOSetting.associatedTAOId = _associatedTAOId;
  > |		_associatedTAOSetting.settingId = _settingId;
    |		return _associatedTAOSettingId;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1356)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		bytes32 _creatorTAOSettingId = keccak256(abi.encodePacked(this, _creatorTAOId, _settingId));
    |		CreatorTAOSetting storage _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];
  > |		_creatorTAOSetting.creatorTAOSettingId = _creatorTAOSettingId;
    |		_creatorTAOSetting.creatorTAOId = _creatorTAOId;
    |		_creatorTAOSetting.settingId = _settingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1370)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		CreatorTAOSetting storage _creatorTAOSetting = creatorTAOSettings[_creatorTAOSettingId];
    |		_creatorTAOSetting.creatorTAOSettingId = _creatorTAOSettingId;
  > |		_creatorTAOSetting.creatorTAOId = _creatorTAOId;
    |		_creatorTAOSetting.settingId = _settingId;
    |		return _creatorTAOSettingId;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1371)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingAttribute':
    |		_creatorTAOSetting.creatorTAOSettingId = _creatorTAOSettingId;
    |		_creatorTAOSetting.creatorTAOId = _creatorTAOId;
  > |		_creatorTAOSetting.settingId = _settingId;
    |		return _creatorTAOSettingId;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(1372)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(327)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(327)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(680)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(709)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(701)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(712)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(111)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(159)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(235)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(251)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/30/0x9e083eb1c302e2fbf7cb50536608902c0b38743e.sol(253)