Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:Asset
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:ERC20Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:ERC20TokenInterface
Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:admined
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol:extToken
[31mViolation[0m for LockedEther in contract 'Asset':
    | * @dev Initial supply creation
    | */
  > |contract Asset is ERC20Token {
    |    string public name = 'ORIGIN Foundation Token';
    |    uint8 public decimals = 18;
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(248)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |     */
    |    function setAllowedAddress(address _to) onlyAdmin(2) public {
  > |        allowedAddress = _to;
    |        emit AllowedSet(_to);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |    function transferOwnership(address _newOwner) onlyAdmin(2) public { //owner can be transfered
    |        require(_newOwner != address(0));
  > |        owner = _newOwner;
    |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |        require(_newOwner != address(0));
    |        owner = _newOwner;
  > |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |
    |    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {
  > |        level[_target] = _level;
    |        emit AdminLevelSet(_target, _level);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |     */
    |    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply
  > |        lockSupply = _set;
    |        emit SetSupplyLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |     */
    |    function setTransferLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on transfers
  > |        lockTransfer = _set;
    |        emit SetTransferLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'Asset':
    |     */
    |    function setFrozen(address _target, bool _flag) onlyAdmin(2) public {
  > |        frozen[_target] = _flag;
    |        emit FrozenStatus(_target, _flag);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |     */
    |    function setAllowedAddress(address _to) onlyAdmin(2) public {
  > |        allowedAddress = _to;
    |        emit AllowedSet(_to);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |    function transferOwnership(address _newOwner) onlyAdmin(2) public { //owner can be transfered
    |        require(_newOwner != address(0));
  > |        owner = _newOwner;
    |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |        require(_newOwner != address(0));
    |        owner = _newOwner;
  > |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |
    |    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {
  > |        level[_target] = _level;
    |        emit AdminLevelSet(_target, _level);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |     */
    |    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply
  > |        lockSupply = _set;
    |        emit SetSupplyLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |     */
    |    function setTransferLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on transfers
  > |        lockTransfer = _set;
    |        emit SetTransferLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(132)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Token':
    |     */
    |    function setFrozen(address _target, bool _flag) onlyAdmin(2) public {
  > |        frozen[_target] = _flag;
    |        emit FrozenStatus(_target, _flag);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |     */
    |    function setAllowedAddress(address _to) onlyAdmin(2) public {
  > |        allowedAddress = _to;
    |        emit AllowedSet(_to);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |    function transferOwnership(address _newOwner) onlyAdmin(2) public { //owner can be transfered
    |        require(_newOwner != address(0));
  > |        owner = _newOwner;
    |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |        require(_newOwner != address(0));
    |        owner = _newOwner;
  > |        level[_newOwner] = 2;
    |        emit TransferAdminship(owner);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |
    |    function setAdminLevel(address _target, uint8 _level) onlyAdmin(2) public {
  > |        level[_target] = _level;
    |        emit AdminLevelSet(_target, _level);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(114)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |     */
    |    function setSupplyLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on supply
  > |        lockSupply = _set;
    |        emit SetSupplyLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'admined':
    |     */
    |    function setTransferLock(bool _set) onlyAdmin(2) public { //Only the admin can set a lock on transfers
  > |        lockTransfer = _set;
    |        emit SetTransferLock(_set);
    |    }
  at /unique_chucks/15/0x65b8588e098a97d3a0a80a8c8c07e79465353fb5.sol(132)