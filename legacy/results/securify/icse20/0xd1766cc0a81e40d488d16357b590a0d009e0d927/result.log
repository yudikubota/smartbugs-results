Processing contract: /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol:Boxroi
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol:IERC20
Processing contract: /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Boxroi':
    |}
    |
  > |contract Boxroi is IERC20, Owned {
    |    using SafeMath for uint256;
    |    
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        if (to == BXIT || to == address(this)) {
    |            _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |            supply = supply.sub(value);
    |            emit Transfer(msg.sender, address(0), value);
    |            burn(msg.sender, value);
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        } else {
    |            _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |            _balances[to] = _balances[to].add(value);
    |            emit Transfer(msg.sender, to, value);
    |            return true;
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(158)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        require(value <= allowance(from, to));
    |        if (to == BXIT || to == address(this)) {
  > |            _balances[from] = _balances[from].sub(value);
    |            supply = supply.sub(value);
    |            emit Transfer(from, address(0), value);
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        if (to == BXIT || to == address(this)) {
    |            _balances[from] = _balances[from].sub(value);
  > |            supply = supply.sub(value);
    |            emit Transfer(from, address(0), value);
    |            burn(from, value);
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(177)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |            return true;
    |        } else {
  > |            _balances[from] = _balances[from].sub(value);
    |            _balances[to] = _balances[to].add(value);
    |            _allowed[from][to] = _allowed[from][to].sub(value);
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(182)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        } else {
    |            _balances[from] = _balances[from].sub(value);
  > |            _balances[to] = _balances[to].add(value);
    |            _allowed[from][to] = _allowed[from][to].sub(value);
    |            emit Transfer(from, to, value);
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |            _balances[from] = _balances[from].sub(value);
    |            _balances[to] = _balances[to].add(value);
  > |            _allowed[from][to] = _allowed[from][to].sub(value);
    |            emit Transfer(from, to, value);
    |            return true;
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |        require(amount <= (89000000 * 10 ** decimals) - supply);
    |        _balances[msg.sender] = _balances[msg.sender].add(amount);
  > |        supply = supply.add(amount);
    |        emit Transfer(address(0), msg.sender, amount);
    |    }
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |    function burn(address burner, uint256 amount) internal {
    |        uint256 random = uint(keccak256(abi.encodePacked(block.difficulty,now,block.number, nonce))) % 999;
  > |        nonce++;
    |        if (random > 983) {
    |            uint256 _amount = amount / 100;
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'Boxroi':
    |    // Owner should initially set the BXIT contract address
    |    function setBXITAddress(address _address) public onlyOwner {
  > |        BXIT = _address;
    |    }
    |}
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(216)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |        _;
    |    }
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    }
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(100)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  > |        owner = newOwner;
    |    }
    |}
  at /unique_chucks/35/0xd1766cc0a81e40d488d16357b590a0d009e0d927.sol(104)