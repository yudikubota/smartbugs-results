Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:ERC20
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:ERC20Basic
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:IERC20
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:PDTDistribution
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:ParadiseToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:ParadiseTokenSale
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(52)

[33mWarning[0m for MissingInputValidation in contract 'PDTDistribution':
    |contract PDTDistribution is Ownable {
    |  
  > |  function drop(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {
    |    for (uint256 i = 0; i < recipients.length; i++) {
    |      token.transfer(recipients[i], values[i]);
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(659)

[31mViolation[0m for RepeatedCall in contract 'PDTDistribution':
    |  function drop(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {
    |    for (uint256 i = 0; i < recipients.length; i++) {
  > |      token.transfer(recipients[i], values[i]);
    |    }
    |  }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(661)

[33mWarning[0m for UnrestrictedWrite in contract 'PDTDistribution':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(52)

[31mViolation[0m for LockedEther in contract 'ParadiseToken':
    | */
    |    
  > |contract ParadiseToken is StandardToken, Ownable {
    |    
    |    // Constants
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(290)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(214)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |
    |        approve(offeringAddr, amount);
  > |        tokenAllowanceAddr = offeringAddr;
    |        
    |    }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(369)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseToken':
    |     */
    |    function enableTransfer() external onlyOwner {
  > |        transferEnabled = true;
    |
    |        // End the offering
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(377)

[31mViolation[0m for TODAmount in contract 'ParadiseTokenSale':
    |    function ownerSafeWithdrawal() external onlyOwner  {
    |        uint balanceToSend = address(this).balance;
  > |        address(0x1Bb7390407F7987BD160993dE44d6f2737945436).transfer(balanceToSend);
    |        emit FundTransfer(beneficiary, balanceToSend, false);
    |    }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(602)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseTokenSale':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseTokenSale':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseTokenSale':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseTokenSale':
    |    function setRate(uint _rate) public onlyOwner {
    |        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);
  > |        rate = _rate;
    |    }
    |    
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(555)

[33mWarning[0m for UnrestrictedWrite in contract 'ParadiseTokenSale':
    |     */
    |    function terminate() external onlyOwner {
  > |        saleClosed = true;
    |    }
    |    
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(562)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(52)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function pause() onlyOwner whenNotPaused public {
  > |    paused = true;
    |    emit Pause();
    |  }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(88)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |   */
    |  function unpause() onlyOwner whenPaused public {
  > |    paused = false;
    |    emit Unpause();
    |  }
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(176)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/8/0xfa2b9e5f4b60767d4c3ca6e316d8599311419b3e.sol(214)