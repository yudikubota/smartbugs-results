Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:IERC20
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:OraclizeAddrResolverI
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:OraclizeI
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:Ownable
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:PriceProvider
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:PriceReceiver
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:solcChecker
Processing contract: /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'PriceProvider':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(396)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(290)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(291)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |
    |    function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
  > |        return oraclize.getPrice(_datasource);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(368)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
  > |        return oraclize.cbAddress();
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(837)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |
    |    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
  > |        return oraclize.setCustomGasPrice(_gasPrice);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(847)

[31mViolation[0m for RepeatedCall in contract 'PriceProvider':
    |
    |        if (state == State.Active && validId == myid) {
  > |            priceReceiver.receiveEthPrice(newPrice);
    |            _update();
    |        } else if (state == State.Stopped) {
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1529)

[33mWarning[0m for RepeatedCall in contract 'PriceProvider':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(290)

[33mWarning[0m for RepeatedCall in contract 'PriceProvider':
    |
    |    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource,_gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |            return 0; // Unexpectedly high price
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(392)

[33mWarning[0m for RepeatedCall in contract 'PriceProvider':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(396)

[31mViolation[0m for TODAmount in contract 'PriceProvider':
    |    function withdraw(address payable receiver) external onlyOwner {
    |        require(receiver != address(0));
  > |        receiver.transfer(address(this).balance);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1548)

[33mWarning[0m for TODAmount in contract 'PriceProvider':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(396)

[33mWarning[0m for TODReceiver in contract 'PriceProvider':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(396)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'PriceProvider':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(396)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(291)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    | * @author https://grox.solutions
    | */
  > |contract PriceProvider is Ownable, usingOraclize {
    |    using SafeMath for uint256;
    |
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1438)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    |            _update();
    |        } else if (state == State.Stopped) {
  > |            delete validId;
    |        }
    |    }
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1532)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    |    function _update() internal {
    |        if (oraclize_getPrice("URL") <= address(this).balance) {
  > |            validId = oraclize_query(updateInterval, "URL", url, gasLimit);
    |        } else {
    |            state = State.Stopped;
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1538)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    |            validId = oraclize_query(updateInterval, "URL", url, gasLimit);
    |        } else {
  > |            state = State.Stopped;
    |            delete validId;
    |            emit InsufficientFunds();
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1540)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceProvider':
    |        } else {
    |            state = State.Stopped;
  > |            delete validId;
    |            emit InsufficientFunds();
    |        }
  at /unique_contracts/0x1d83a0313fb1cd7d8b0826c30725c63f0df85722.sol(1541)