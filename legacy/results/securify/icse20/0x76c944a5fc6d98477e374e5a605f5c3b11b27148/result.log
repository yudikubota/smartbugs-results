Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:Adminstrator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:OraclizeI
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:TokenERC20
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:TokenSales
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:solcChecker
Processing contract: /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'TokenSales':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(409)

[31mViolation[0m for DAOConstantGas in contract 'TokenSales':
    |		if(AUPC.balanceOf(dad) >0){
    |    		require(AUPC.transferFrom(owner, dad, aupcRate)); //Pay out AUPC
  > |    		dad.transfer(ethRate); //Pay out ETH
    |    		//We have settled this amount of ETH to AUPC and sent out
    |    		gainedETH[dad] += ethRate;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1593)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(300)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(301)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |
    |    function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource, _gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |           return 0; // Unexpectedly high price
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(405)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(409)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
  > |        return oraclize.cbAddress();
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(842)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		require((amount * (10 ** uint256(18)) - (amountAUPC * currentPrice)) >=0);
    |		
  > |		uint oldBalance = AUPC.allowance(owner,address(this));
    |		require(AUPC.transferFrom(owner, buyer, amountAUPC)); //Pay out AUPC
    |		//We have settled this amount of ETH to AUPC and sent out
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1536)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		
    |		uint oldBalance = AUPC.allowance(owner,address(this));
  > |		require(AUPC.transferFrom(owner, buyer, amountAUPC)); //Pay out AUPC
    |		//We have settled this amount of ETH to AUPC and sent out
    |		payedETHSettled[buyer] += amount;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1537)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		sentAUPC += amountAUPC;
    |		emit distributeAUPC(buyer, owner, amountAUPC);
  > |		assert(oldBalance == (AUPC.allowance(owner,address(this)) + amountAUPC)); //It should never fail
    |		
    |		if(levels ==0) return true; //There is no upline
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1543)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		require(ethRate < address(this).balance, "No ETH for award");
    |		
  > |		uint oldBalance = AUPC.allowance(owner,address(this));
    |		uint oldETHBalance = address(this).balance;
    |		
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1588)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		uint oldETHBalance = address(this).balance;
    |		
  > |		if(AUPC.balanceOf(dad) >0){
    |    		require(AUPC.transferFrom(owner, dad, aupcRate)); //Pay out AUPC
    |    		dad.transfer(ethRate); //Pay out ETH
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1591)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |		
    |		if(AUPC.balanceOf(dad) >0){
  > |    		require(AUPC.transferFrom(owner, dad, aupcRate)); //Pay out AUPC
    |    		dad.transfer(ethRate); //Pay out ETH
    |    		//We have settled this amount of ETH to AUPC and sent out
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1592)

[31mViolation[0m for RepeatedCall in contract 'TokenSales':
    |    		emit distributeAUPC(dad, owner, aupcRate);
    |    		emit distributeETH(dad, owner, ethRate);
  > |    		assert(oldBalance == (AUPC.allowance(owner,address(this)) + aupcRate)); //It should never fail
    |    		assert(oldETHBalance == (address(this).balance + ethRate)); //It should never fail
    |		}
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1603)

[31mViolation[0m for TODAmount in contract 'TokenSales':
    |    function withdrawAll() public onlyAdmin returns(bool) {
    |        uint balanceOld = address(this).balance;
  > |        owner.transfer(balanceOld);
    |		emit MasterWithdraw(balanceOld);
    |        return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1458)

[33mWarning[0m for TODAmount in contract 'TokenSales':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(409)

[33mWarning[0m for TODAmount in contract 'TokenSales':
    |			//Send back the money
    |			if(msg.value < address(this).balance)
  > |				msg.sender.transfer(msg.value);
    |			//Problem: How to make sure all pending ETH and AUPC are sent out before burning all AUPC?
    |			//AUPC.burnFrom(owner,AUPC.allowance(address(this)));
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1475)

[33mWarning[0m for TODAmount in contract 'TokenSales':
    |		if(AUPC.balanceOf(dad) >0){
    |    		require(AUPC.transferFrom(owner, dad, aupcRate)); //Pay out AUPC
  > |    		dad.transfer(ethRate); //Pay out ETH
    |    		//We have settled this amount of ETH to AUPC and sent out
    |    		gainedETH[dad] += ethRate;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1593)

[33mWarning[0m for TODReceiver in contract 'TokenSales':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(409)

[33mWarning[0m for TODReceiver in contract 'TokenSales':
    |		if(AUPC.balanceOf(dad) >0){
    |    		require(AUPC.transferFrom(owner, dad, aupcRate)); //Pay out AUPC
  > |    		dad.transfer(ethRate); //Pay out ETH
    |    		//We have settled this amount of ETH to AUPC and sent out
    |    		gainedETH[dad] += ethRate;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1593)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TokenSales':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(409)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TokenSales':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |		emit MasterWithdraw(amount);
    |        return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1452)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(301)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(334)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(339)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(344)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(349)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(353)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(357)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |	mapping (address => uint256) public balanceOf;
    |}
  > |contract TokenSales is Adminstrator,usingOraclize {
    |	uint public oneDayTime = 86400;
    |	//GMT - 12, Make sure anywhere in the world is 16 Aug 2019
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1362)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |		emit makeQuery(msg.sender,"Oraclize level query sent",queryStr);
    |		bytes32 queryId=oraclize_query("URL", queryStr, 600000);
  > |        oraclizeCallbacks[queryId] = rewardNode(msg.sender,msg.value,0,address(0),0,queryType.checkLevels);
    |	}
    |	function __callback(bytes32 myid, string memory result) public {
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1493)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |			//Checking the number of levels for an address, notice that the AUPC is not sent out yet
    |			uint levels = stringToUint(result);
  > |			savedLevels[o.baseAddress] = tempLevel(levels, now);
    |			require(purchaseAUPC(o.baseAddress,o.purchasedETH,levels));
    |		}
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1503)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |		if(o.qtype == queryType.findParents){
    |			address payable parentAddr = parseAddrFromStr(result);
  > |			savedParents[o.lastParent] = tempAddress(parentAddr, now);
    |			require(sendUpline(o.baseAddress,o.purchasedETH,o.receivedAUPC,parentAddr,o.levels));
    |		}
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1508)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |			emit makeQuery(msg.sender,"Check parent query sent",queryStr);
    |			bytes32 queryId=oraclize_query("URL", queryStr, 600000);
  > |			oraclizeCallbacks[queryId] = rewardNode(buyer,amount,amountAUPC,buyer,1,queryType.findParents);
    |		}
    |		return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1554)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |			emit makeQuery(msg.sender,"Check parent query sent", queryStr);
    |			bytes32 queryId=oraclize_query("URL", queryStr, 600000);
  > |			oraclizeCallbacks[queryId] = rewardNode(buyer,amount,amountAUPC,dad,levels+1,queryType.findParents);
    |		}
    |		return true;
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1615)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |		require(newMinPurchase > 0, "new minipurchase must be positive");
    |		require(newMinPurchase >= 10*newPrice, "minipurchase not 10 larger than price");
  > |		basePrice = newPrice * (10 ** uint256(15)); //In finney
    |		minPurchase = newMinPurchase * (10 ** uint256(15)); //In finney
    |	}
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1442)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |		require(newMinPurchase >= 10*newPrice, "minipurchase not 10 larger than price");
    |		basePrice = newPrice * (10 ** uint256(15)); //In finney
  > |		minPurchase = newMinPurchase * (10 ** uint256(15)); //In finney
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1443)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenSales':
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  > |		paused = isPause;
    |		if(isPause) emit Paused(msg.sender);
    |		else emit Unpaused(msg.sender);
  at /unique_chucks/17/0x76c944a5fc6d98477e374e5a605f5c3b11b27148.sol(1446)