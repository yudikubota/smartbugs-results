Processing contract: /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol:Regatta
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Regatta':
    |        uint balance = bank[msg.sender];
    |        bank[msg.sender] = 0;
  > |        msg.sender.transfer( balance );
    |    }
    |    //  -> set and pay
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(112)

[33mWarning[0m for TODAmount in contract 'Regatta':
    |            require(balance > 0, "finished");
    |            bank[msg.sender] = 0;
  > |            msg.sender.transfer( balance );
    |            emit CashOut( msg.sender );
    |            return;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(135)

[33mWarning[0m for TODAmount in contract 'Regatta':
    |        uint balance = bank[msg.sender];
    |        bank[msg.sender] = 0;
  > |        msg.sender.transfer( balance );
    |    }
    |    //  -> set and pay
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(144)

[33mWarning[0m for TODAmount in contract 'Regatta':
    |
    |
  > |        msg.sender.transfer( balance );
    |        emit CashOut(msg.sender);
    |    }
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(338)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Regatta':
    |        uint balance = bank[msg.sender];
    |        bank[msg.sender] = 0;
  > |        msg.sender.transfer( balance );
    |    }
    |    //  -> set and pay
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(112)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Regatta':
    |            require(balance > 0, "finished");
    |            bank[msg.sender] = 0;
  > |            msg.sender.transfer( balance );
    |            emit CashOut( msg.sender );
    |            return;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(135)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Regatta':
    |        uint balance = bank[msg.sender];
    |        bank[msg.sender] = 0;
  > |        msg.sender.transfer( balance );
    |    }
    |    //  -> set and pay
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(144)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Regatta':
    |
    |
  > |        msg.sender.transfer( balance );
    |        emit CashOut(msg.sender);
    |    }
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(338)

[31mViolation[0m for UnrestrictedWrite in contract 'Regatta':
    |    //  -> set and pay
    |    function do_declare_void() internal {
  > |        races[race_number].block_finish = races[race_number].block_start;
    |
    |        bank[ blackbeard ] += races[race_number].pool * 99/100;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(116)

[31mViolation[0m for UnrestrictedWrite in contract 'Regatta':
    |        races[race_number].block_finish = races[race_number].block_start;
    |
  > |        bank[ blackbeard ] += races[race_number].pool * 99/100;
    |        bank[ msg.sender ] += races[race_number].pool /100;
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(118)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |
    |        require(finished,"unfinished");
  > |        races[race_number].block_finish = block_finish;
    |
    |        uint paid = 0;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        for( uint boat = 0; boat < races[race_number].boat_count; boat++){
    |            if(progress[boat] >= COURSE_LENGTH){
  > |                bank[
    |                races[race_number].boats[boat].owner
    |                ] += reward;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(194)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        paid += races[race_number].pool /100;
    |
  > |        bank[ blackbeard ] += races[race_number].pool - paid;
    |
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(204)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        require(variant < 3,"variant");
    |
  > |        race_number++;
    |
    |        races[race_number].boat_count = 2;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(221)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        race_number++;
    |
  > |        races[race_number].boat_count = 2;
    |        races[race_number].boats[0] = Boat(msg.sender,class,variant,repellent);
    |        races[race_number].pool += contribution;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |
    |        races[race_number].boat_count = 2;
  > |        races[race_number].boats[0] = Boat(msg.sender,class,variant,repellent);
    |        races[race_number].pool += contribution;
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        races[race_number].boat_count = 2;
    |        races[race_number].boats[0] = Boat(msg.sender,class,variant,repellent);
  > |        races[race_number].pool += contribution;
    |
    |        if(fee > contribution){
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(225)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |
    |        if(fee > contribution){
  > |            bank[blackbeard] += fee - contribution;
    |        }
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(228)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |
    |        if(races[race_number].block_start == 0){
  > |            races[race_number].block_start = block.number + TIME_WAIT;
    |            races[race_number].boats[1] = Boat(msg.sender,class,variant,repellent);
    |        }else{
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        if(races[race_number].block_start == 0){
    |            races[race_number].block_start = block.number + TIME_WAIT;
  > |            races[race_number].boats[1] = Boat(msg.sender,class,variant,repellent);
    |        }else{
    |            races[race_number].boats[
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |            races[race_number].boats[1] = Boat(msg.sender,class,variant,repellent);
    |        }else{
  > |            races[race_number].boats[
    |            races[race_number].boat_count
    |            ] = Boat(msg.sender,class,variant,repellent);
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(255)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |            races[race_number].boat_count
    |            ] = Boat(msg.sender,class,variant,repellent);
  > |            races[race_number].boat_count++;
    |        }
    |        races[race_number].pool += contribution;
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(258)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |            races[race_number].boat_count++;
    |        }
  > |        races[race_number].pool += contribution;
    |
    |        if(fee > contribution){
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(260)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |
    |        if(fee > contribution){
  > |            bank[blackbeard] += fee - contribution;
    |        }
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(263)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |    function mutiny(address new_beard) external{
    |        require(msg.sender == blackbeard,"impostor");
  > |        blackbeard = new_beard;
    |    }
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(39)

[33mWarning[0m for UnrestrictedWrite in contract 'Regatta':
    |        require(msg.sender == blackbeard,"permission");
    |        require(class < 3,"class");
  > |        PRICE_CLASS[class] = PRICE;
    |    }
    |
  at /unique_chucks/14/0x246c1fcb82fead8e67a364c13c5e410923f42369.sol(73)