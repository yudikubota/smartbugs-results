Processing contract: /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |}
    |
  > |contract TokenERC20 {
    |    // Public variables of the token
    |    string public name;
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(7)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |        balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |        totalSupply -= _value;                      // Updates totalSupply
    |        emit Burn(msg.sender, _value);
    |        return true;
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(143)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |        require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |        totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(159)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |        totalSupply -= _value;                              // Update totalSupply
    |        emit Burn(_from, _value);
    |        return true;
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(161)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |        balanceOf[_from] -= _value;
    |        // Add the same to the recipient
  > |        balanceOf[_to] += _value;
    |        emit Transfer(_from, _to, _value);
    |        // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(59)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |    if (balanceOf[msg.sender] >= _value && _value > 0) {
    |        balanceOf[msg.sender] -= _value;
  > |        balanceOf[_to] += _value;
    |        _transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/38/0x2922e01939c5e257bd791c670944ad895da80356.sol(77)