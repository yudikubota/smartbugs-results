Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:Adminstrator
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:FiftyContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:OraclizeI
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:solcChecker
Processing contract: /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Adminstrator':
    |  }
    |
  > |  function transferAdmin(address newAdmin) public onlyAdmin {
    |    admin = newAdmin; 
    |  }
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1328)

[33mWarning[0m for UnrestrictedWrite in contract 'Adminstrator':
    |
    |  function transferAdmin(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1329)

[33mWarning[0m for DAO in contract 'FiftyContract':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(387)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1464)

[31mViolation[0m for DAOConstantGas in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1469)

[31mViolation[0m for RepeatedCall in contract 'FiftyContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(279)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |
    |    function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource, _gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |           return 0; // Unexpectedly high price
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(383)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(387)

[33mWarning[0m for RepeatedCall in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1469)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(387)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1464)

[33mWarning[0m for TODAmount in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1469)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(387)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |        return true;
    |    }	
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1404)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1464)

[33mWarning[0m for TODReceiver in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1469)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |           return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(387)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		uint previousBalances = address(this).balance;
    |		if(rewardResult.first != address(0)){
  > |			rewardResult.first.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1464)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |		} 
    |		if(rewardResult.second != address(0)){
  > |			rewardResult.second.transfer(moneyToDistribute);
    |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1469)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'FiftyContract':
    |	function withdraw(uint amount) public onlyAdmin returns(bool) {
    |        require(amount < address(this).balance);
  > |        owner.transfer(amount);
    |        return true;
    |    }	
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1404)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		currentNodes[msg.sender][msg.value] = true;
    |		nodeIDIndex[msg.sender][msg.value] += 1;
  > |		receivedAmount += msg.value;
    |		emit startTree(msg.sender, nodeIDIndex[msg.sender][msg.value] - 1, msg.value);
    |		//Make web call to find its uplines
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1422)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		//If this has been searched before
    |		if(tempSearchRefer[treeRoot] == firstUpline) return;
  > |		tempDirRefer[treeRoot][treeType][treeNodeID] = firstUpline;
    |		//Now check its parent for a place for node
    |		rewardDistribution memory rewardResult = _placeChildTree(firstUpline,treeType,treeRoot,treeNodeID);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1444)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.first == address(0)){
    |			//Search not successful, find upline
  > |			tempSearchRefer[treeRoot] = firstUpline;
    |			string memory queryStr = strConcating(website,result);
    |			emit makeQuery(msg.sender,"Oraclize query sent");
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1449)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			return;
    |		}
  > |		tempSearchRefer[treeRoot] = address(0);
    |		emit assignTreeNode(treeRoot,treeNodeID,treeType,rewardResult.first);
    |		//Distribute the award
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1456)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.first != address(0)){
    |			rewardResult.first.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.first, treeRoot, moneyToDistribute);
    |		} 
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1465)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(rewardResult.second != address(0)){
    |			rewardResult.second.transfer(moneyToDistribute);
  > |			sentAmount += moneyToDistribute;
    |			emit distributeETH(rewardResult.second, treeRoot, moneyToDistribute);
    |		}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1470)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |				if(treeChildren[firstUpline][treeType][cNodeID][i].nodeType == 0){
    |					//firstUpline has a place
  > |					treeChildren[firstUpline][treeType][cNodeID][i]
    |						= treeNode(treeRoot,treeType,treeNodeID);
    |					//Set parent
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1531)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |						= treeNode(treeRoot,treeType,treeNodeID);
    |					//Set parent
  > |					treeParent[treeRoot][treeType][treeNodeID] 
    |						= treeNode(firstUpline,treeType,cNodeID);
    |					_checkTreeComplete(firstUpline,treeType,cNodeID);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1534)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		if(!_isCompleted) return;
    |		//The tree is completed, root can start over again
  > |		currentNodes[_root][_treeType] = false;
    |		//Ban this user
    |		if(_isDirectRefCount < minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1575)

[31mViolation[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		currentNodes[_root][_treeType] = false;
    |		//Ban this user
  > |		if(_isDirectRefCount < minimumTreeNodeReferred) nodeIDIndex[_root][_treeType] = (2 ** 32) -1;
    |	}
    |    function strConcating(string memory _a, string memory _b) internal pure returns (string memory){
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1577)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(307)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(312)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(317)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(322)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(327)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(331)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(335)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |  }
    |}
  > |contract FiftyContract is Adminstrator,usingOraclize {
    |    uint public mRate = 150 finney; //membership fee
    |	uint public membershiptime = 183 * 86400; //183 days, around 0.5 year
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1332)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		emit makeQuery(msg.sender,"Oraclize query sent");
    |		bytes32 queryId=oraclize_query("URL", queryStr, 600000);
  > |        oraclizeCallbacks[queryId] = treeNode(msg.sender,msg.value,nodeIDIndex[msg.sender][msg.value] - 1);
    |	}
    |	function __callback(bytes32 myid, string memory result) public {
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1429)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |			emit makeQuery(msg.sender,"Oraclize query sent");
    |			bytes32 queryId=oraclize_query("URL", queryStr, 600000);
  > |            oraclizeCallbacks[queryId] = treeNode(treeRoot,treeType,treeNodeID);            
    |			return;
    |		}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1453)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |
    |  function transferAdmin(address newAdmin) public onlyAdmin {
  > |    admin = newAdmin; 
    |  }
    |}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1329)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newMrate > 0, "new rate must be positive");
    |		require(newTime > 0, "new membership time must be positive");
  > |		mRate = newMrate * 10 ** uint256(15); //In finney
    |		membershiptime = newTime * 86400; //In days
    |	}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1383)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTime > 0, "new membership time must be positive");
    |		mRate = newMrate * 10 ** uint256(15); //In finney
  > |		membershiptime = newTime * 86400; //In days
    |	}
    |	function setTreeSpec(uint newSpread, uint newLevel, uint newTreeNodeReferred) public onlyAdmin{
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1384)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newLevel > 1, "new level must > 1");
    |		require(newTreeNodeReferred > 1, "new min tree nodes referred by root must > 1");
  > |		spread = newSpread;
    |		level = newLevel;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1390)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		require(newTreeNodeReferred > 1, "new min tree nodes referred by root must > 1");
    |		spread = newSpread;
  > |		level = newLevel;
    |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1391)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |		spread = newSpread;
    |		level = newLevel;
  > |		minimumTreeNodeReferred = newTreeNodeReferred;
    |	}
    |	function setWebsite(string memory web) public onlyAdmin{
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1392)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	}
    |	function pause(bool isPause) public onlyAdmin{
  > |		paused = isPause;
    |		if(isPause) emit Paused(msg.sender);
    |		else emit Unpaused(msg.sender);
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1398)

[33mWarning[0m for UnrestrictedWrite in contract 'FiftyContract':
    |	function banMember(address member) public onlyAdmin {
    |		require(member != address(0));
  > |		membership[member] = 0;
    |	}
    |	function checkMemberShip(address member) public view returns(uint) {
  at /unique_chucks/31/0x0957535e68df0f8840112542e96fb6e7f6599806.sol(1487)