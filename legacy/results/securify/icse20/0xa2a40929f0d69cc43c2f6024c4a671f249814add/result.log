Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:ERC20
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:ERC20Basic
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:Freeze
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:ReentrancyGuard
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:SingleToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'BasicToken':
    |  modifier nonReentrant() {
    |    require(!reentrancyLock);
  > |    reentrancyLock = true;
    |    _;
    |    reentrancyLock = false;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(66)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    reentrancyLock = true;
    |    _;
  > |    reentrancyLock = false;
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(183)

[31mViolation[0m for LockedEther in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ReentrancyGuard {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(326)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ReentrancyGuard {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(326)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(433)

[31mViolation[0m for UnrestrictedWrite in contract 'Freeze':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'Freeze':
    |}
    |
  > |contract Freeze is Ownable, ReentrancyGuard {
    |  
    |  using SafeMath for uint256;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(120)

[31mViolation[0m for LockedEther in contract 'PausableToken':
    | * @notice Inherit from it at SingleToken, to make freezing functionality works
    |*/
  > |contract PausableToken is StandardToken, Freeze {
    |
    |  function transfer(
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(446)

[31mViolation[0m for UnrestrictedWrite in contract 'PausableToken':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(433)

[31mViolation[0m for UnrestrictedWrite in contract 'PausableToken':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(435)

[31mViolation[0m for UnrestrictedWrite in contract 'PausableToken':
    | * @notice Inherit from it at SingleToken, to make freezing functionality works
    |*/
  > |contract PausableToken is StandardToken, Freeze {
    |
    |  function transfer(
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(446)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  modifier nonReentrant() {
    |    require(!reentrancyLock);
  > |    reentrancyLock = true;
    |    _;
    |    reentrancyLock = false;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(66)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    reentrancyLock = true;
    |    _;
  > |    reentrancyLock = false;
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    | * @notice Inherit from it at SingleToken, to make freezing functionality works
    |*/
  > |contract PausableToken is StandardToken, Freeze {
    |
    |  function transfer(
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(446)

[31mViolation[0m for LockedEther in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |  string  public constant name      = "Gofind XR"; 
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(506)

[31mViolation[0m for UnrestrictedWrite in contract 'SingleToken':
    |  function setGroup (address[] memory _holders, uint _until) public onlyOwner returns (bool) {
    |    lockup[groups].holders = _holders;
  > |    lockup[groups].until   = _until;
    |    
    |    groups++;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(433)

[31mViolation[0m for UnrestrictedWrite in contract 'SingleToken':
    |    lockup[groups].until   = _until;
    |    
  > |    groups++;
    |    return true;
    |  }
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(435)

[31mViolation[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |  string  public constant name      = "Gofind XR"; 
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(506)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |  modifier nonReentrant() {
    |    require(!reentrancyLock);
  > |    reentrancyLock = true;
    |    _;
    |    reentrancyLock = false;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(66)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    reentrancyLock = true;
    |    _;
  > |    reentrancyLock = false;
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |    require(newOwner != address(0));
    |    emit OwnershipTransferred(owner, newOwner);
  > |    owner = newOwner;
    |  }
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |  function renounceOwnership() public onlyOwner {
    |    emit OwnershipRenounced(owner);
  > |    owner = address(0);
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'SingleToken':
    |
    |
  > |contract SingleToken is PausableToken {
    |
    |  string  public constant name      = "Gofind XR"; 
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(506)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |  modifier nonReentrant() {
    |    require(!reentrancyLock);
  > |    reentrancyLock = true;
    |    _;
    |    reentrancyLock = false;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(66)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    reentrancyLock = true;
    |    _;
  > |    reentrancyLock = false;
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    reentrancyLock = true;
    |    _;
  > |    reentrancyLock = false;
    |  }
    |}
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(68)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(183)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/18/0xa2a40929f0d69cc43c2f6024c4a671f249814add.sol(231)