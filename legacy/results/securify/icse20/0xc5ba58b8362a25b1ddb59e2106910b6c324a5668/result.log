Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC165
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC20
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC721
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC721Enumerable
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC721Full
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC721Metadata
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:IERC721Receiver
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:Last100PricingStrategy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:OnChainShop
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:OracleRequest
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:PricingStrategy
Processing contract: /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'OnChainShop':
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
    |        // Transfer the actual price to the beneficiary
  > |        beneficiary.transfer(curPriceWei);
    |        // Find the next stamp and transfer it.
    |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(458)

[31mViolation[0m for RepeatedCall in contract 'OnChainShop':
    |        uint256 curPriceWei = priceWei();
    |        //update the price according to the strategy for the following buyer.
  > |        uint256 remaining = cryptostamp.balanceOf(address(this));
    |        priceEurCent = pricingStrategy.adjustPrice(priceEurCent, remaining);
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(453)

[31mViolation[0m for RepeatedCall in contract 'OnChainShop':
    |        //update the price according to the strategy for the following buyer.
    |        uint256 remaining = cryptostamp.balanceOf(address(this));
  > |        priceEurCent = pricingStrategy.adjustPrice(priceEurCent, remaining);
    |
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(454)

[31mViolation[0m for RepeatedCall in contract 'OnChainShop':
    |        beneficiary.transfer(curPriceWei);
    |        // Find the next stamp and transfer it.
  > |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
    |        cryptostamp.safeTransferFrom(address(this), msg.sender, tokenId);
    |        emit AssetSold(msg.sender, tokenId, curPriceWei);
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(460)

[31mViolation[0m for RepeatedCall in contract 'OnChainShop':
    |        // Find the next stamp and transfer it.
    |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
  > |        cryptostamp.safeTransferFrom(address(this), msg.sender, tokenId);
    |        emit AssetSold(msg.sender, tokenId, curPriceWei);
    |        deliveryStatus[tokenId] = Status.Sold;
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(461)

[31mViolation[0m for RepeatedCall in contract 'OnChainShop':
    |        /*send back change money. last */
    |        if (msg.value > curPriceWei) {
  > |            msg.sender.transfer(msg.value.sub(curPriceWei));
    |        }
    |    }
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(467)

[33mWarning[0m for TODAmount in contract 'OnChainShop':
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
    |        // Transfer the actual price to the beneficiary
  > |        beneficiary.transfer(curPriceWei);
    |        // Find the next stamp and transfer it.
    |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(458)

[33mWarning[0m for TODAmount in contract 'OnChainShop':
    |        /*send back change money. last */
    |        if (msg.value > curPriceWei) {
  > |            msg.sender.transfer(msg.value.sub(curPriceWei));
    |        }
    |    }
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(467)

[31mViolation[0m for TODReceiver in contract 'OnChainShop':
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
    |        // Transfer the actual price to the beneficiary
  > |        beneficiary.transfer(curPriceWei);
    |        // Find the next stamp and transfer it.
    |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(458)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'OnChainShop':
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
    |        // Transfer the actual price to the beneficiary
  > |        beneficiary.transfer(curPriceWei);
    |        // Find the next stamp and transfer it.
    |        uint256 tokenId = cryptostamp.tokenOfOwnerByIndex(address(this), 0);
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(458)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'OnChainShop':
    |        /*send back change money. last */
    |        if (msg.value > curPriceWei) {
  > |            msg.sender.transfer(msg.value.sub(curPriceWei));
    |        }
    |    }
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(467)

[31mViolation[0m for UnrestrictedWrite in contract 'OnChainShop':
    |        //update the price according to the strategy for the following buyer.
    |        uint256 remaining = cryptostamp.balanceOf(address(this));
  > |        priceEurCent = pricingStrategy.adjustPrice(priceEurCent, remaining);
    |
    |        require(msg.value >= curPriceWei, "You need to send enough currency to actually pay the item.");
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(454)

[31mViolation[0m for UnrestrictedWrite in contract 'OnChainShop':
    |        cryptostamp.safeTransferFrom(address(this), msg.sender, tokenId);
    |        emit AssetSold(msg.sender, tokenId, curPriceWei);
  > |        deliveryStatus[tokenId] = Status.Sold;
    |
    |        /*send back change money. last */
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(463)

[31mViolation[0m for UnrestrictedWrite in contract 'OnChainShop':
    |        require(deliveryStatus[_tokenId] == Status.Sold, "Shipping was already requested for this token or it was not sold by this shop.");
    |        emit ShippingSubmitted(msg.sender, _tokenId, _deliveryInfo);
  > |        deliveryStatus[_tokenId] = Status.ShippingSubmitted;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(482)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    {
    |        require(address(_newCryptostamp) != address(0x0), "You need to provide an actual Cryptostamp contract.");
  > |        cryptostamp = _newCryptostamp;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(376)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    {
    |        require(_newPriceEurCent > 0, "You need to provide a non-zero price.");
  > |        priceEurCent = _newPriceEurCent;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(384)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    onlyBeneficiary
    |    {
  > |        beneficiary = _newBeneficiary;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(391)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    {
    |        require(address(_newOracle) != address(0x0), "You need to provide an actual Oracle contract.");
  > |        oracle = _newOracle;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(399)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    {
    |        require(address(_newPricingStrategy) != address(0x0), "You need to provide an actual PricingStrategy contract.");
  > |        pricingStrategy = _newPricingStrategy;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(407)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    requireCryptostamp
    |    {
  > |        _isOpen = true;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(415)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    onlyBeneficiary
    |    {
  > |        _isOpen = false;
    |    }
    |
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(422)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    requireCryptostamp
    |    {
  > |        deliveryStatus[_tokenId] = Status.ShippingConfirmed;
    |        emit ShippingConfirmed(cryptostamp.ownerOf(_tokenId), _tokenId);
    |    }
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(491)

[33mWarning[0m for UnrestrictedWrite in contract 'OnChainShop':
    |    requireCryptostamp
    |    {
  > |        deliveryStatus[_tokenId] = Status.Sold;
    |        emit ShippingFailed(cryptostamp.ownerOf(_tokenId), _tokenId, _reason);
    |    }
  at /unique_contracts/0xc5ba58b8362a25b1ddb59e2106910b6c324a5668.sol(501)