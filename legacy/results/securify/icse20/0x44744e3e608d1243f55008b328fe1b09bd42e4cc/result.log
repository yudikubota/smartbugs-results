Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:Authorizable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:BurnToken
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:Changable
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:ERC20
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:ERC20Basic
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:ERC223TokenCompatible
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:HumanStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:StartToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:Startable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Authorizable':
    |
    |contract Authorizable is Ownable {
  > |    mapping(address => bool) public authorized;
    |  
    |    event AuthorizationSet(address indexed addressAuthorized, bool indexed authorization);
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(59)

[31mViolation[0m for MissingInputValidation in contract 'Authorizable':
    |    }
    |
  > |    function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {
    |        emit AuthorizationSet(addressAuthorized, authorization);
    |        authorized[addressAuthorized] = authorization;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |	function transferOwnership(address _newOwner) public onlyOwner {
    |		require(address(0) != _newOwner, "address(0) != _newOwner");
  > |		newOwner = _newOwner;
    |	}
    |
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |		require(msg.sender == newOwner, "msg.sender == newOwner");
    |		emit OwnershipTransferred(owner, msg.sender);
  > |		owner = msg.sender;
    |		newOwner = address(0);
    |	}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |		emit OwnershipTransferred(owner, msg.sender);
    |		owner = msg.sender;
  > |		newOwner = address(0);
    |	}
    |}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Authorizable':
    |    function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {
    |        emit AuthorizationSet(addressAuthorized, authorization);
  > |        authorized[addressAuthorized] = authorization;
    |    }
    |  
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(74)

[31mViolation[0m for LockedEther in contract 'BasicToken':
    |}
    |
  > |contract BasicToken is ERC20Basic {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(96)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |
    |        balances[_sender] = balances[_sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_sender, _to, _value);
    |        return true;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(107)

[31mViolation[0m for LockedEther in contract 'ERC223TokenCompatible':
    |}
    |
  > |contract ERC223TokenCompatible is BasicToken {
    |  using SafeMath for uint256;
    |  
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(121)

[31mViolation[0m for LockedEther in contract 'HumanStandardToken':
    |}
    |
  > |contract HumanStandardToken is StandardToken {
    |    /* Approves and then calls the receiving contract */
    |    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(203)

[33mWarning[0m for UnrestrictedWrite in contract 'HumanStandardToken':
    |
    |        balances[_sender] = balances[_sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_sender, _to, _value);
    |        return true;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'HumanStandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(168)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |	function transferOwnership(address _newOwner) public onlyOwner {
    |		require(address(0) != _newOwner, "address(0) != _newOwner");
  > |		newOwner = _newOwner;
    |	}
    |
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |		require(msg.sender == newOwner, "msg.sender == newOwner");
    |		emit OwnershipTransferred(owner, msg.sender);
  > |		owner = msg.sender;
    |		newOwner = address(0);
    |	}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |		emit OwnershipTransferred(owner, msg.sender);
    |		owner = msg.sender;
  > |		newOwner = address(0);
    |	}
    |}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(54)

[31mViolation[0m for LockedEther in contract 'StandardToken':
    |}
    |
  > |contract StandardToken is ERC20, BasicToken {
    |
    |    mapping (address => mapping (address => uint256)) internal allowed;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(157)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_sender] = balances[_sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(_sender, _to, _value);
    |        return true;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(168)

[31mViolation[0m for LockedEther in contract 'StartToken':
    |}
    |
  > |contract StartToken is Startable, ERC223TokenCompatible, StandardToken {
    |
    |    function transfer(address _to, uint256 _value) public whenStarted returns (bool) {
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'StartToken':
    |	function transferOwnership(address _newOwner) public onlyOwner {
    |		require(address(0) != _newOwner, "address(0) != _newOwner");
  > |		newOwner = _newOwner;
    |	}
    |
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'StartToken':
    |		require(msg.sender == newOwner, "msg.sender == newOwner");
    |		emit OwnershipTransferred(owner, msg.sender);
  > |		owner = msg.sender;
    |		newOwner = address(0);
    |	}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'StartToken':
    |		emit OwnershipTransferred(owner, msg.sender);
    |		owner = msg.sender;
  > |		newOwner = address(0);
    |	}
    |}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'StartToken':
    |    function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {
    |        emit AuthorizationSet(addressAuthorized, authorization);
  > |        authorized[addressAuthorized] = authorization;
    |    }
    |  
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'StartToken':
    |
    |    function start() onlyOwner public {
  > |        started = true;
    |        emit Start();
    |    }
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(230)

[33mWarning[0m for UnrestrictedWrite in contract 'Startable':
    |	function transferOwnership(address _newOwner) public onlyOwner {
    |		require(address(0) != _newOwner, "address(0) != _newOwner");
  > |		newOwner = _newOwner;
    |	}
    |
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(47)

[33mWarning[0m for UnrestrictedWrite in contract 'Startable':
    |		require(msg.sender == newOwner, "msg.sender == newOwner");
    |		emit OwnershipTransferred(owner, msg.sender);
  > |		owner = msg.sender;
    |		newOwner = address(0);
    |	}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(53)

[33mWarning[0m for UnrestrictedWrite in contract 'Startable':
    |		emit OwnershipTransferred(owner, msg.sender);
    |		owner = msg.sender;
  > |		newOwner = address(0);
    |	}
    |}
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Startable':
    |    function setAuthorized(address addressAuthorized, bool authorization) onlyOwner public {
    |        emit AuthorizationSet(addressAuthorized, authorization);
  > |        authorized[addressAuthorized] = authorization;
    |    }
    |  
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'Startable':
    |
    |    function start() onlyOwner public {
  > |        started = true;
    |        emit Start();
    |    }
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(230)

[31mViolation[0m for LockedEther in contract 'Token':
    |}
    |
  > |contract Token is ERC20Basic, ERC223TokenCompatible, StandardToken, HumanStandardToken, StartToken, BurnToken, Changable {
    |    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public BurnToken(_totalSupply) {
    |        name = _name;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(306)

[33mWarning[0m for UnrestrictedWrite in contract 'Token':
    |}
    |
  > |contract Token is ERC20Basic, ERC223TokenCompatible, StandardToken, HumanStandardToken, StartToken, BurnToken, Changable {
    |    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public BurnToken(_totalSupply) {
    |        name = _name;
  at /unique_chucks/17/0x44744e3e608d1243f55008b328fe1b09bd42e4cc.sol(306)