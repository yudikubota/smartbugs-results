Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:AOSettingUpdate
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:IAOSetting
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:IAOSettingAttribute
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:IAOSettingValue
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:INameAccountRecovery
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:INameFactory
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:INameTAOPosition
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(399)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(411)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(420)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(449)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier senderNameNotCompromised() {
  > |		require (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(834)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |			AOLibrary.isTAO(_proposalTAOId) &&
    |			_nameFactory.ethAddressToNameId(msg.sender) != address(0) &&
  > |			!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender))
    |		);
    |		_;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(845)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		(uint8 ADDRESS_SETTING_TYPE,,,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is address
  > |		require (_aoSetting.settingTypeLookup(_settingId) == ADDRESS_SETTING_TYPE);
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(856)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		(, uint8 BOOL_SETTING_TYPE,,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is bool
  > |		require (_aoSetting.settingTypeLookup(_settingId) == BOOL_SETTING_TYPE);
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(866)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		(,, uint8 BYTES_SETTING_TYPE,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is bytes32
  > |		require (_aoSetting.settingTypeLookup(_settingId) == BYTES_SETTING_TYPE);
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(876)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		(,,, uint8 STRING_SETTING_TYPE,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is string
  > |		require (_aoSetting.settingTypeLookup(_settingId) == STRING_SETTING_TYPE);
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(886)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		(,,,, uint8 UINT_SETTING_TYPE) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is uint256
  > |		require (_aoSetting.settingTypeLookup(_settingId) == UINT_SETTING_TYPE);
    |		_;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(896)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the setting state data
  > |		require (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));
    |
    |		// Store the value as pending value
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1007)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the value as pending value
  > |		_aoSettingValue.setPendingValue(_settingId, _newValue, false, '', '', 0);
    |
    |		// Store the update hash key lookup
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1010)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the setting state data
  > |		require (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));
    |
    |		// Store the value as pending value
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1044)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the value as pending value
  > |		_aoSettingValue.setPendingValue(_settingId, address(0), _newValue, '', '', 0);
    |
    |		// Store the update hash key lookup
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1047)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the setting state data
  > |		require (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));
    |
    |		// Store the value as pending value
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1081)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the value as pending value
  > |		_aoSettingValue.setPendingValue(_settingId, address(0), false, _newValue, '', 0);
    |
    |		// Store the update hash key lookup
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1084)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		require (_aoSetting.settingTypeLookup(_settingId) > 0);
    |
  > |		address _associatedTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);
    |		require (_aoSettingAttribute.finalizeUpdate(_settingId, _associatedTAOAdvocate));
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1191)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		bytes32 _s
    |		) internal returns (bool) {
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));
    |		if (ecrecover(_hash, _v, _r, _s) != msg.sender) {
    |			return false;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1220)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		bytes32 _s
    |		) internal returns (bool) {
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));
    |		if (ecrecover(_hash, _v, _r, _s) != msg.sender) {
    |			return false;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1246)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		bytes32 _s
    |		) internal returns (bool) {
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));
    |		if (ecrecover(_hash, _v, _r, _s) != msg.sender) {
    |			return false;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1272)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		bytes32 _s
    |		) internal returns (bool) {
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));
    |		if (ecrecover(_hash, _v, _r, _s) != msg.sender) {
    |			return false;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1298)

[31mViolation[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		bytes32 _s
    |		) public returns (bool) {
  > |		bytes32 _hash = keccak256(abi.encodePacked(address(this), _settingId, _proposalTAOId, _newValue, _nameFactory.ethAddressToNameId(msg.sender)));
    |		if (ecrecover(_hash, _v, _r, _s) != msg.sender) {
    |			return false;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1324)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |			AOLibrary.isTAO(_proposalTAOId) &&
    |			_nameFactory.ethAddressToNameId(msg.sender) != address(0) &&
  > |			!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender))
    |		);
    |		_;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(845)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier isAddressSetting(uint256 _settingId) {
  > |		(uint8 ADDRESS_SETTING_TYPE,,,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is address
    |		require (_aoSetting.settingTypeLookup(_settingId) == ADDRESS_SETTING_TYPE);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(854)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier isBoolSetting(uint256 _settingId) {
  > |		(, uint8 BOOL_SETTING_TYPE,,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is bool
    |		require (_aoSetting.settingTypeLookup(_settingId) == BOOL_SETTING_TYPE);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(864)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier isBytesSetting(uint256 _settingId) {
  > |		(,, uint8 BYTES_SETTING_TYPE,,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is bytes32
    |		require (_aoSetting.settingTypeLookup(_settingId) == BYTES_SETTING_TYPE);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(874)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier isStringSetting(uint256 _settingId) {
  > |		(,,, uint8 STRING_SETTING_TYPE,) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is string
    |		require (_aoSetting.settingTypeLookup(_settingId) == STRING_SETTING_TYPE);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(884)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |	 */
    |	modifier isUintSetting(uint256 _settingId) {
  > |		(,,,, uint8 UINT_SETTING_TYPE) = _aoSetting.getSettingTypes();
    |		// Make sure the setting type is uint256
    |		require (_aoSetting.settingTypeLookup(_settingId) == UINT_SETTING_TYPE);
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(894)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		_storeUpdateAddressHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);
    |
  > |		emit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1015)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		_storeUpdateBoolHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);
    |
  > |		emit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1052)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		_storeUpdateBytesHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);
    |
  > |		emit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1089)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the setting state data
  > |		require (_aoSettingAttribute.update(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId, _extraData));
    |
    |		// Store the value as pending value
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1118)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |
    |		// Store the value as pending value
  > |		_aoSettingValue.setPendingValue(_settingId, address(0), false, '', _newValue, 0);
    |
    |		// Store the update hash key lookup
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1121)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		_storeUpdateStringHashLookup(_settingId, _newValue, _proposalTAOId, _extraData);
    |
  > |		emit SettingUpdate(_settingId, _nameFactory.ethAddressToNameId(msg.sender), _proposalTAOId);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1126)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		internal {
    |		// Store the update hash key lookup
  > |		(address _addressValue,,,,) = _aoSettingValue.settingValue(_settingId);
    |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _addressValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1346)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		internal {
    |		// Store the update hash key lookup
  > |		(, bool _boolValue,,,) = _aoSettingValue.settingValue(_settingId);
    |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _boolValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1364)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		internal {
    |		// Store the update hash key lookup
  > |		(,, bytes32 _bytesValue,,) = _aoSettingValue.settingValue(_settingId);
    |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _bytesValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1382)

[33mWarning[0m for RepeatedCall in contract 'AOSettingUpdate':
    |		internal {
    |		// Store the update hash key lookup
  > |		(,,, string memory _stringValue,) = _aoSettingValue.settingValue(_settingId);
    |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _stringValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1400)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(907)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(917)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(926)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(927)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(936)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(937)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(946)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(947)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {
    |		require (_aoSettingAttributeAddress != address(0));
  > |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
    |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(956)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_aoSettingAttributeAddress != address(0));
    |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
  > |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(957)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setAOSettingValueAddress(address _aoSettingValueAddress) public onlyTheAO {
    |		require (_aoSettingValueAddress != address(0));
  > |		aoSettingValueAddress = _aoSettingValueAddress;
    |		_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(966)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_aoSettingValueAddress != address(0));
    |		aoSettingValueAddress = _aoSettingValueAddress;
  > |		_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(967)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |	function setAOSettingAddress(address _aoSettingAddress) public onlyTheAO {
    |		require (_aoSettingAddress != address(0));
  > |		aoSettingAddress = _aoSettingAddress;
    |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(976)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		require (_aoSettingAddress != address(0));
    |		aoSettingAddress = _aoSettingAddress;
  > |		_aoSetting = IAOSetting(_aoSettingAddress);
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(977)

[33mWarning[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		// Store the update hash key lookup
    |		(address _addressValue,,,,) = _aoSettingValue.settingValue(_settingId);
  > |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _addressValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1347)

[33mWarning[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		// Store the update hash key lookup
    |		(, bool _boolValue,,,) = _aoSettingValue.settingValue(_settingId);
  > |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _boolValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1365)

[33mWarning[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		// Store the update hash key lookup
    |		(,, bytes32 _bytesValue,,) = _aoSettingValue.settingValue(_settingId);
  > |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _bytesValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1383)

[33mWarning[0m for UnrestrictedWrite in contract 'AOSettingUpdate':
    |		// Store the update hash key lookup
    |		(,,, string memory _stringValue,) = _aoSettingValue.settingValue(_settingId);
  > |		updateHashLookup[keccak256(abi.encodePacked(address(this), _proposalTAOId, _stringValue, _newValue, _extraData, _settingId))] = _settingId;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(1401)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(358)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(358)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(711)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(740)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(732)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(743)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(142)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(190)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(266)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/30/0xb6fc7bb6b848ba8382a703172fe00ebaf0dbd425.sol(284)