Processing contract: /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol:ERC20Interface
Processing contract: /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol:InGRedientToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'InGRedientToken':
    |// ----------------------------------------------------------------------------
    |
  > |contract InGRedientToken  is ERC20Interface, Owned {
    |    using SafeMath for uint;
    |    
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(102)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(150)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(181)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(183)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    function farmerRequestCertificate(address _certAuth, uint _tokens, string memory  _product, string memory _IngValueProperty, string memory _localGPSProduction, string memory  _dateProduction ) public returns (bool success) {
    |        // falta implementar uma verif se o end certAuth foi cadastrado anteriormente
  > |        allowed[owner][_certAuth] = _tokens;
    |        emit Approval(owner, _certAuth, _tokens);
    |        emit FarmerRequestedCertificate(owner, _certAuth, _tokens);
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(238)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    // --------------------------------------------------------------------------------------------------
    |    function certAuthIssuesCerticate(address owner, address _farmer, uint _tokens, string memory _url,string memory product,string memory IngValueProperty, string memory localGPSProduction, string memory  _dateProduction) public returns (bool success) {
  > |        balances[owner] = balances[owner].sub(_tokens);
    |        //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);
    |        allowed[owner][msg.sender] = 0;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(249)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |        //allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(tokens);
    |        allowed[owner][msg.sender] = 0;
  > |        balances[_farmer] = balances[_farmer].add(_tokens);
    |        emit Transfer(owner, _farmer, _tokens);
    |        return true;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(252)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |        string memory url=_url; // keep the url of the InGRedient for later transfer
    |        balances[msg.sender] = balances[msg.sender].sub(_tokens);
  > |        balances[_to] = balances[_to].add(_tokens);
    |        emit Transfer(msg.sender, _to, _tokens);
    |        return true;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(263)

[31mViolation[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    function transferAndWriteUrl(address _to, uint _tokens, string memory _url) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(_tokens);
  > |        balances[_to] = balances[_to].add(_tokens);
    |        emit Transfer(msg.sender, _to, _tokens);
    |        return true;
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(309)

[33mWarning[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |    
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'InGRedientToken':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(92)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    }
    |    
  > |    function transferOwnership(address _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |}
  at /unique_chucks/16/0x18ae6bc100ac9ef701c14562e1b812393a86a8e8.sol(92)