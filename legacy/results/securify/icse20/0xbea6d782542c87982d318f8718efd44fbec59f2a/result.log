Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:IERC20
Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:Ownable
Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:StandToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol:XLOVToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'XLOVToken':
    |
    |
  > |contract XLOVToken is StandToken,Ownable {
    |    string private _name;
    |    string private _symbol;
  at /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol(200)

[31mViolation[0m for RepeatedCall in contract 'XLOVToken':
    |        require(usdtamount>0);
    |        require(balanceOf(owner())>=gettokenAmount(usdtamount),"not enough xlov");
  > |        require(_token.balanceOf(msg.sender)>=_token.allowance(msg.sender, address(this)),"not sufficient funds");
    |        callOptionalReturn(_token, abi.encodeWithSelector(_token.transferFrom.selector,msg.sender, _beneficiary, usdtamount));
    |        super._transfer(owner(),msg.sender,gettokenAmount(usdtamount));
  at /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol(250)

[31mViolation[0m for RepeatedCall in contract 'XLOVToken':
    |        require(tokenamount>0);
    |        require(balanceOf(msg.sender)>=tokenamount,"not enough xlov");
  > |        require(_token.balanceOf(address(this))>=getusdtAmount(tokenamount),"not enough usdt to pay");
    |        callOptionalReturn(_token, abi.encodeWithSelector(_token.transfer.selector,msg.sender, getusdtAmount(tokenamount)));
    |        super._transfer(msg.sender,owner(),tokenamount);
  at /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol(258)

[31mViolation[0m for RepeatedCall in contract 'XLOVToken':
    |    function withdraw() onlyOwner public{
    |        require(_token.balanceOf(address(this))>0);
  > |        callOptionalReturn(_token, abi.encodeWithSelector(_token.transfer.selector,msg.sender, _token.balanceOf(address(this))));
    |    }
    |    
  at /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol(265)

[31mViolation[0m for RepeatedCall in contract 'XLOVToken':
    |    function callOptionalReturn(IERC20 token, bytes memory data) private {
    |        require(address(token).isContract(), "SafeERC20: call to non-contract");
  > |        (bool success, bytes memory returndata) = address(token).call(data);
    |        require(success, "SafeERC20: low-level call failed");
    |
  at /unique_chucks/7/0xbea6d782542c87982d318f8718efd44fbec59f2a.sol(270)