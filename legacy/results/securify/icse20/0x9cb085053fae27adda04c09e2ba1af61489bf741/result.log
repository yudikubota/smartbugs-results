Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:ERC20
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:ERC20Basic
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:SatowalletShares
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |    function transfer(address _to, uint256 _value) public returns (bool) {
    |        if (_to == address(0)) {
  > |            totalSupply_ = totalSupply_.sub(_value);
    |        }
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(89)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(89)

[31mViolation[0m for LockedEther in contract 'SatowalletShares':
    |}
    |
  > |contract SatowalletShares is StandardToken {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(201)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |    function transfer(address _to, uint256 _value) public returns (bool) {
    |        if (_to == address(0)) {
  > |            totalSupply_ = totalSupply_.sub(_value);
    |        }
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    |        if (_to == address(0)) {
  > |            totalSupply_ = totalSupply_.sub(_value);
    |        }
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'SatowalletShares':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(89)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transfer(address _to, uint256 _value) public returns (bool) {
    |        if (_to == address(0)) {
  > |            totalSupply_ = totalSupply_.sub(_value);
    |        }
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(117)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
    |        if (_to == address(0)) {
  > |            totalSupply_ = totalSupply_.sub(_value);
    |        }
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(149)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(154)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/6/0x9cb085053fae27adda04c09e2ba1af61489bf741.sol(89)