Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:CappedToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:ERC20
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:ERC20Basic
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:SinghCoin
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'CappedToken':
    |        require(newOwner != address(0x0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |        require(newOwner != address(0x0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(newOwner != address(0x0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(224)

[31mViolation[0m for LockedEther in contract 'SinghCoin':
    |}
    |
  > |contract SinghCoin is CappedToken {
    |    string public constant name = "SinghCoin";
    |    string public constant symbol = "SINGH";
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(280)

[33mWarning[0m for UnrestrictedWrite in contract 'SinghCoin':
    |        require(newOwner != address(0x0));
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(82)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // require (_value <= _allowance);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(135)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = _allowance.sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_contracts/0xd0d87c21af72e320d62bed336e543a3938e89b6a.sol(136)