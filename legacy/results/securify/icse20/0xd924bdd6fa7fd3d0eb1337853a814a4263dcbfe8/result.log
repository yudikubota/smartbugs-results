Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:IERC20
Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:Ownable
Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol:TrustlessOTC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |        o.active = false;
    |        if (o.tokenFrom == address(0)) {
  > |          msg.sender.transfer(o.amountFrom);
    |        } else {
    |          IERC20(o.tokenFrom).safeTransfer(o.creator, o.amountFrom);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(429)

[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |
    |        if (o.tokenFrom == address(0)) {
  > |            msg.sender.transfer(o.amountFrom.sub(fee));
    |        } else {
    |          IERC20(o.tokenFrom).safeTransfer(msg.sender, o.amountFrom.sub(fee));
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(449)

[31mViolation[0m for DAOConstantGas in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(456)

[31mViolation[0m for RepeatedCall in contract 'TrustlessOTC':
    |
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        (bool success, bytes memory returndata) = address(token).call(data);
    |        require(success, "SafeERC20: low-level call failed");
    |
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(279)

[33mWarning[0m for RepeatedCall in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(456)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        o.active = false;
    |        if (o.tokenFrom == address(0)) {
  > |          msg.sender.transfer(o.amountFrom);
    |        } else {
    |          IERC20(o.tokenFrom).safeTransfer(o.creator, o.amountFrom);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(429)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(456)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(feesToClaim > 0);
    |        if (address(_token) == address(0)) {
  > |            msg.sender.transfer(feesToClaim);
    |        } else {
    |            _token.safeTransfer(owner(), feesToClaim);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(507)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |
    |        if (o.tokenFrom == address(0)) {
  > |            msg.sender.transfer(o.amountFrom.sub(fee));
    |        } else {
    |          IERC20(o.tokenFrom).safeTransfer(msg.sender, o.amountFrom.sub(fee));
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(449)

[33mWarning[0m for TODAmount in contract 'TrustlessOTC':
    |        require(excess > 0);
    |        if (address(_token) == address(0)) {
  > |            msg.sender.transfer(excess);
    |        } else {
    |            _token.safeTransfer(owner(), excess);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(496)

[33mWarning[0m for TODReceiver in contract 'TrustlessOTC':
    |        if (o.tokenTo == address(0)) {
    |            require(msg.value == o.amountTo);
  > |            o.creator.transfer(msg.value);
    |        } else {
    |            require(msg.value == 0);
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(456)

[33mWarning[0m for UnrestrictedWrite in contract 'TrustlessOTC':
    |
    |
  > |contract TrustlessOTC is Ownable {
    |    using SafeMath for uint256;
    |    using SafeERC20 for IERC20;
  at /unique_chucks/14/0xd924bdd6fa7fd3d0eb1337853a814a4263dcbfe8.sol(362)