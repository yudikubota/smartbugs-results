Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:Avatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:DAOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:DxAvatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:IERC20
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:Ownable
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnhandledException in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-low-level-calls
  > |        (success, returnValue) = _contract.call(_data);
    |        emit GenericCall(_contract, _data, success);
    |    }
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(739)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(750)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(72)

[31mViolation[0m for LockedEther in contract 'DAOToken':
    | */
    |
  > |contract DAOToken is ERC20, ERC20Burnable, Ownable {
    |
    |    string public name;
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(556)

[33mWarning[0m for UnhandledException in contract 'DxAvatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-low-level-calls
  > |        (success, returnValue) = _contract.call(_data);
    |        emit GenericCall(_contract, _data, success);
    |    }
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(739)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'DxAvatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(750)

[33mWarning[0m for UnrestrictedWrite in contract 'DxAvatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'DxAvatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(504)

[31mViolation[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
  > |            newCheckPoint.fromBlock = uint128(block.number);
    |            newCheckPoint.value = uint128(_value);
    |        } else {
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(240)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
    |            newCheckPoint.fromBlock = uint128(block.number);
  > |            newCheckPoint.value = uint128(_value);
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(241)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  > |            oldCheckPoint.value = uint128(_value);
    |        }
    |    }
  at /unique_chucks/41/0xd88a5a4926968bfbe0f100649dc7fc76a7df3302.sol(244)