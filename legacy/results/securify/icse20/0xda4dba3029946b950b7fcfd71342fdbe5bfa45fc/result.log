Processing contract: /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol:EtherBox
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol:Stake
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'EtherBox':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[33mWarning[0m for TODAmount in contract 'EtherBox':
    |            uint256 fees = _amount*fee/100;
    |            _amount-=fees;
  > |            _from.transfer(_amount);
    |            owner.transfer(fees);
    |        }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(47)

[33mWarning[0m for TODAmount in contract 'EtherBox':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[31mViolation[0m for TODReceiver in contract 'EtherBox':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[31mViolation[0m for TODReceiver in contract 'EtherBox':
    |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
  > |        if (_from==owner) owner.transfer(_amount);
    |        else {
    |            uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(43)

[31mViolation[0m for TODReceiver in contract 'EtherBox':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherBox':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherBox':
    |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
  > |        if (_from==owner) owner.transfer(_amount);
    |        else {
    |            uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(43)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherBox':
    |            uint256 fees = _amount*fee/100;
    |            _amount-=fees;
  > |            _from.transfer(_amount);
    |            owner.transfer(fees);
    |        }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherBox':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBox':
    |    function () payable external {
    |        require(msg.value>0);
  > |        if (stakes[msg.sender]==0) users++;
    |        stakes[msg.sender]+=msg.value;
    |        emit Staked(msg.sender,msg.value);
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(65)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBox':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBox':
    |    function transferStake(address _from, address _to, uint256 _amount) public onlyOwner returns (bool ok){
    |        require(_from!=address(0)&&_to!=address(0)&&_amount>0&&_amount<=stakes[_from]);
  > |        stakes[_from]-=_amount;
    |        emit Transfered(_from,_to,_amount);
    |        uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(31)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBox':
    |        uint256 fees = _amount*fee/100;
    |        _amount-=fees;
  > |        stakes[_to]+=_amount;
    |        owner.transfer(fees);
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(35)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherBox':
    |    function withdrawStake(address payable _from, uint256 _amount) public onlyOwner returns (bool ok){
    |        require(_from!=address(0)&&_amount>0&&_amount<=stakes[_from]);
  > |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
    |        if (_from==owner) owner.transfer(_amount);
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(41)

[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    address payable owner;
    |    address payable newOwner;
  > |    function changeOwner(address payable _newOwner) public onlyOwner {
    |        newOwner = _newOwner;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(10)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(11)

[33mWarning[0m for TODAmount in contract 'Stake':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[33mWarning[0m for TODAmount in contract 'Stake':
    |            uint256 fees = _amount*fee/100;
    |            _amount-=fees;
  > |            _from.transfer(_amount);
    |            owner.transfer(fees);
    |        }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(47)

[33mWarning[0m for TODAmount in contract 'Stake':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[31mViolation[0m for TODReceiver in contract 'Stake':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[31mViolation[0m for TODReceiver in contract 'Stake':
    |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
  > |        if (_from==owner) owner.transfer(_amount);
    |        else {
    |            uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(43)

[31mViolation[0m for TODReceiver in contract 'Stake':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stake':
    |        _amount-=fees;
    |        stakes[_to]+=_amount;
  > |        owner.transfer(fees);
    |        return true;
    |    }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(36)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stake':
    |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
  > |        if (_from==owner) owner.transfer(_amount);
    |        else {
    |            uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(43)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stake':
    |            uint256 fees = _amount*fee/100;
    |            _amount-=fees;
  > |            _from.transfer(_amount);
    |            owner.transfer(fees);
    |        }
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(47)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stake':
    |            _amount-=fees;
    |            _from.transfer(_amount);
  > |            owner.transfer(fees);
    |        }
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'Stake':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'Stake':
    |    function transferStake(address _from, address _to, uint256 _amount) public onlyOwner returns (bool ok){
    |        require(_from!=address(0)&&_to!=address(0)&&_amount>0&&_amount<=stakes[_from]);
  > |        stakes[_from]-=_amount;
    |        emit Transfered(_from,_to,_amount);
    |        uint256 fees = _amount*fee/100;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(31)

[33mWarning[0m for UnrestrictedWrite in contract 'Stake':
    |        uint256 fees = _amount*fee/100;
    |        _amount-=fees;
  > |        stakes[_to]+=_amount;
    |        owner.transfer(fees);
    |        return true;
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(35)

[33mWarning[0m for UnrestrictedWrite in contract 'Stake':
    |    function withdrawStake(address payable _from, uint256 _amount) public onlyOwner returns (bool ok){
    |        require(_from!=address(0)&&_amount>0&&_amount<=stakes[_from]);
  > |        stakes[_from]-=_amount;
    |        emit Withdrawn(_from,_amount);
    |        if (_from==owner) owner.transfer(_amount);
  at /unique_chucks/41/0xda4dba3029946b950b7fcfd71342fdbe5bfa45fc.sol(41)