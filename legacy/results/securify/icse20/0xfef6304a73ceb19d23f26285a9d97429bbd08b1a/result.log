Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:AdminUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:App
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:BaseAdminUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:BaseUpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:ImplementationProvider
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:Package
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:Proxy
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:UpgradeabilityProxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:ZOSLibAddress
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol:ZOSLibOwnable
[31mViolation[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |      // Call the implementation.
    |      // out and outsize are 0 because we don't know the size yet.
  > |      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)
    |
    |      // Copy the returned data.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(269)

[33mWarning[0m for RepeatedCall in contract 'AdminUpgradeabilityProxy':
    |  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
    |    _upgradeTo(newImplementation);
  > |    (bool success,) = newImplementation.delegatecall(data);
    |    require(success);
    |  }
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(509)

[31mViolation[0m for LockedEther in contract 'App':
    | * It handles the creation of proxies.
    | */
  > |contract App is ZOSLibOwnable {
    |  /**
    |   * @dev Emitted when a new proxy is created.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(583)

[33mWarning[0m for RepeatedCall in contract 'App':
    |    ImplementationProvider provider = getProvider(packageName);
    |    if (address(provider) == address(0)) return address(0);
  > |    return provider.getImplementation(contractName);
    |  }
    |
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(670)

[31mViolation[0m for UnrestrictedWrite in contract 'App':
    | * It handles the creation of proxies.
    | */
  > |contract App is ZOSLibOwnable {
    |  /**
    |   * @dev Emitted when a new proxy is created.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(583)

[31mViolation[0m for UnrestrictedWrite in contract 'App':
    |  function setPackage(string memory packageName, Package package, uint64[3] memory version) public onlyOwner {
    |    require(package.hasVersion(version), "The requested version must be registered in the given package");
  > |    providers[packageName] = ProviderInfo(package, version);
    |    emit PackageChanged(packageName, address(package), version);
    |  }
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(646)

[31mViolation[0m for UnrestrictedWrite in contract 'App':
    |  function unsetPackage(string memory packageName) public onlyOwner {
    |    require(address(providers[packageName].package) != address(0), "Package to unset not found");
  > |    delete providers[packageName];
    |    emit PackageChanged(packageName, address(0), [uint64(0), uint64(0), uint64(0)]);
    |  }
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(657)

[33mWarning[0m for UnrestrictedWrite in contract 'App':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'App':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(94)

[31mViolation[0m for RepeatedCall in contract 'BaseAdminUpgradeabilityProxy':
    |      // Call the implementation.
    |      // out and outsize are 0 because we don't know the size yet.
  > |      let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)
    |
    |      // Copy the returned data.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(269)

[33mWarning[0m for RepeatedCall in contract 'BaseAdminUpgradeabilityProxy':
    |  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {
    |    _upgradeTo(newImplementation);
  > |    (bool success,) = newImplementation.delegatecall(data);
    |    require(success);
    |  }
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(509)

[31mViolation[0m for LockedEther in contract 'Package':
    | * to major, minor, and patch, as prerelease tags are not supported.
    | */
  > |contract Package is ZOSLibOwnable {
    |  /**
    |   * @dev Emitted when a version is added to the package.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(110)

[31mViolation[0m for UnrestrictedWrite in contract 'Package':
    | * to major, minor, and patch, as prerelease tags are not supported.
    | */
  > |contract Package is ZOSLibOwnable {
    |  /**
    |   * @dev Emitted when a version is added to the package.
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(110)

[31mViolation[0m for UnrestrictedWrite in contract 'Package':
    |    // Register version
    |    bytes32 versionId = semanticVersionHash(semanticVersion);
  > |    versions[versionId] = Version(semanticVersion, contractAddress, contentURI);
    |    
    |    // Update latest major
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(165)

[31mViolation[0m for UnrestrictedWrite in contract 'Package':
    |    uint64 major = semanticVersion[0];
    |    if (major > latestMajor) {
  > |      latestMajor = semanticVersion[0];
    |    }
    |
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'Package':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(76)

[33mWarning[0m for UnrestrictedWrite in contract 'Package':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'Package':
    |       || (minor == latestVersionForMajor[1] && patch > latestVersionForMajor[2]) // Or current patch is greater
    |       ) { 
  > |      majorToLatestVersion[major] = versionId;
    |    }
    |
  at /unique_chucks/34/0xfef6304a73ceb19d23f26285a9d97429bbd08b1a.sol(181)