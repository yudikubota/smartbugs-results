Processing contract: /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol:ApproveAndCallFallBack
Processing contract: /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol:EtherReserve
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'EtherReserve':
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
    |        if (to == address(this)) {
  > |            msg.sender.transfer(tokens);
    |            _totalSupply = _totalSupply.sub(tokens);
    |            emit Transfer(msg.sender, address(0), tokens);
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(54)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'EtherReserve':
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
    |        if (to == address(this)) {
  > |            msg.sender.transfer(tokens);
    |            _totalSupply = _totalSupply.sub(tokens);
    |            emit Transfer(msg.sender, address(0), tokens);
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(54)

[31mViolation[0m for UnrestrictedWrite in contract 'EtherReserve':
    |        if (to == address(this)) {
    |            msg.sender.transfer(tokens);
  > |            _totalSupply = _totalSupply.sub(tokens);
    |            emit Transfer(msg.sender, address(0), tokens);
    |        } else {
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(55)

[31mViolation[0m for UnrestrictedWrite in contract 'EtherReserve':
    |            emit Transfer(msg.sender, address(0), tokens);
    |        } else {
  > |            balances[to] = balances[to].add(tokens);
    |            emit Transfer(msg.sender, to, tokens);
    |        }
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(58)

[31mViolation[0m for UnrestrictedWrite in contract 'EtherReserve':
    |    }
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(70)

[31mViolation[0m for UnrestrictedWrite in contract 'EtherReserve':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(72)

[31mViolation[0m for UnrestrictedWrite in contract 'EtherReserve':
    |    function tokenize() public payable {
    |        require(msg.value > 0);
  > |        _totalSupply = _totalSupply.add(msg.value);
    |        balances[msg.sender] = balances[msg.sender].add(msg.value);
    |        emit Transfer(address(0), msg.sender, msg.value);
  at /unique_chucks/29/0x0119d137982ec5d5ca3ecc2a2c234aae08192745.sol(90)