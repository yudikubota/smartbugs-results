Processing contract: /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol:SnailNumber
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'SnailNumber':
    |        uint256 _throneReward = pot.mul(shareToThrone).div(100);
    |        pot = pot.sub(_throneReward);
  > |        (bool success, bytes memory data) = SNAILTHRONE.call.value(_throneReward)("");
    |        require(success);
    |        
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(75)

[31mViolation[0m for TODAmount in contract 'SnailNumber':
    |        uint256 _winnerReward = pot;
    |        pot = 0;
  > |        leader.transfer(_winnerReward);
    |        
    |        emit GameEnd(leader, _winnerReward, _throneReward, number);
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(80)

[31mViolation[0m for TODAmount in contract 'SnailNumber':
    |        require(now > timerEnd.add(SECONDS_IN_DAY), "escape hatch only available 24h after end");
    |        
  > |        dev.transfer(address(this).balance);
    |    }
    |}
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(103)

[33mWarning[0m for TODAmount in contract 'SnailNumber':
    |        uint256 _throneReward = pot.mul(shareToThrone).div(100);
    |        pot = pot.sub(_throneReward);
  > |        (bool success, bytes memory data) = SNAILTHRONE.call.value(_throneReward)("");
    |        require(success);
    |        
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(75)

[31mViolation[0m for TODReceiver in contract 'SnailNumber':
    |        uint256 _winnerReward = pot;
    |        pot = 0;
  > |        leader.transfer(_winnerReward);
    |        
    |        emit GameEnd(leader, _winnerReward, _throneReward, number);
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(80)

[33mWarning[0m for TODReceiver in contract 'SnailNumber':
    |        require(now > timerEnd.add(SECONDS_IN_DAY), "escape hatch only available 24h after end");
    |        
  > |        dev.transfer(address(this).balance);
    |    }
    |}
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(103)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SnailNumber':
    |        uint256 _throneReward = pot.mul(shareToThrone).div(100);
    |        pot = pot.sub(_throneReward);
  > |        (bool success, bytes memory data) = SNAILTHRONE.call.value(_throneReward)("");
    |        require(success);
    |        
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(75)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        require(_number <= numberMax, "number too high");
    |
  > |        pot = pot.add(msg.value);
    |        shareToWinner = ComputeShare();
    |        uint256 _share = 100;
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(56)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |
    |        pot = pot.add(msg.value);
  > |        shareToWinner = ComputeShare();
    |        uint256 _share = 100;
    |        shareToThrone = _share.sub(shareToWinner);
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(57)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        shareToWinner = ComputeShare();
    |        uint256 _share = 100;
  > |        shareToThrone = _share.sub(shareToWinner);
    |        leader = msg.sender;
    |        number = _number;
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(59)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        uint256 _share = 100;
    |        shareToThrone = _share.sub(shareToWinner);
  > |        leader = msg.sender;
    |        number = _number;
    |            
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        shareToThrone = _share.sub(shareToWinner);
    |        leader = msg.sender;
  > |        number = _number;
    |            
    |        emit GameBid(msg.sender, msg.value, number, pot, shareToWinner);
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(61)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        
    |        uint256 _throneReward = pot.mul(shareToThrone).div(100);
  > |        pot = pot.sub(_throneReward);
    |        (bool success, bytes memory data) = SNAILTHRONE.call.value(_throneReward)("");
    |        require(success);
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(74)

[33mWarning[0m for UnrestrictedWrite in contract 'SnailNumber':
    |        
    |        uint256 _winnerReward = pot;
  > |        pot = 0;
    |        leader.transfer(_winnerReward);
    |        
  at /unique_contracts/0x891eb4de45bb4f8e06fcef9662da4e7eaaca569d.sol(79)