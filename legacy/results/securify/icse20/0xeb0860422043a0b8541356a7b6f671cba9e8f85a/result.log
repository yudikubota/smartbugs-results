Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:DJTBase
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ECDSA
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC165
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721Enumerable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721Full
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721Metadata
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721Mintable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ERC721Pausable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC165
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC20
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC721
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC721Enumerable
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC721Metadata
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:IERC721Receiver
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:LandSectorAsset
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle8012711443288157480/mustExplicit -j 2 -F /tmp/souffle-65d04c8c-a1f6-43c2-a4ad-c8e26214a677 -D /tmp/souffle-65d04c8c-a1f6-43c2-a4ad-c8e26214a677_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:LandSectorAsset
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:MCHGUMGatewayV8
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:MCHLandPool
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:MinterRole
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:Ownable
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:Pausable
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:PauserRole
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:ReentrancyGuard
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol:Withdrawable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'DJTBase':
    |contract Withdrawable is Ownable {
    |  function withdrawEther() external onlyOwner {
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(465)

[33mWarning[0m for UnrestrictedWrite in contract 'DJTBase':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'DJTBase':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(270)

[33mWarning[0m for UnrestrictedWrite in contract 'DJTBase':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'DJTBase':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(458)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC721Enumerable':
    |}
    |
  > |contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {
    |    // Mapping from owner to list of owned token IDs
    |    mapping(address => uint256[]) private _ownedTokens;
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(803)

[31mViolation[0m for LockedEther in contract 'ERC721Full':
    |}
    |
  > |contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {
    |    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {
    |        // solhint-disable-previous-line no-empty-blocks
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1102)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC721Full':
    |}
    |
  > |contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {
    |    constructor (string memory name, string memory symbol) public ERC721Metadata(name, symbol) {
    |        // solhint-disable-previous-line no-empty-blocks
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1102)

[31mViolation[0m for LockedEther in contract 'ERC721Metadata':
    |}
    |
  > |contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {
    |    // Token name
    |    string private _name;
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1019)

[31mViolation[0m for RepeatedCall in contract 'MCHGUMGatewayV8':
    |      return 0;
    |    }
  > |    require(landSectorAsset.getTotalVolume(_landType) != 0, "Invalid _landType");
    |
    |    uint256 landValue;
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1598)

[31mViolation[0m for RepeatedCall in contract 'MCHGUMGatewayV8':
    |    uint256 referralValue;
    |    referralValue = msg.value.mul(_referralPercentage).div(100);
  > |    _referrer.transfer(referralValue);
    |    return referralValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1613)

[33mWarning[0m for RepeatedCall in contract 'MCHGUMGatewayV8':
    |    uint256 landValue;
    |    landValue = msg.value.mul(landPercentage).div(100);
  > |    landPool.addEthToLandPool.value(landValue)(_landType, msg.sender);
    |    return landValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1602)

[31mViolation[0m for TODAmount in contract 'MCHGUMGatewayV8':
    |contract Withdrawable is Ownable {
    |  function withdrawEther() external onlyOwner {
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(465)

[33mWarning[0m for TODAmount in contract 'MCHGUMGatewayV8':
    |    uint256 landValue;
    |    landValue = msg.value.mul(landPercentage).div(100);
  > |    landPool.addEthToLandPool.value(landValue)(_landType, msg.sender);
    |    return landValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1602)

[33mWarning[0m for TODAmount in contract 'MCHGUMGatewayV8':
    |    uint256 referralValue;
    |    referralValue = msg.value.mul(_referralPercentage).div(100);
  > |    _referrer.transfer(referralValue);
    |    return referralValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1613)

[31mViolation[0m for TODReceiver in contract 'MCHGUMGatewayV8':
    |    uint256 landValue;
    |    landValue = msg.value.mul(landPercentage).div(100);
  > |    landPool.addEthToLandPool.value(landValue)(_landType, msg.sender);
    |    return landValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1602)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MCHGUMGatewayV8':
    |    uint256 landValue;
    |    landValue = msg.value.mul(landPercentage).div(100);
  > |    landPool.addEthToLandPool.value(landValue)(_landType, msg.sender);
    |    return landValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1602)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MCHGUMGatewayV8':
    |    uint256 referralValue;
    |    referralValue = msg.value.mul(_referralPercentage).div(100);
  > |    _referrer.transfer(referralValue);
    |    return referralValue;
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1613)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(270)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(458)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function setValidater(address _varidater) external onlyOwner() {
  > |    validater = _varidater;
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1525)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function setPayableOption(uint256 _option, bool desired) external onlyOwner() {
  > |    payableOptions[_option] = desired;
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1529)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function setCampaign(uint256 _since, uint256 _until, uint8 _purchaseType) external onlyOwner() {
  > |    campaign = Campaign(_since, _until, _purchaseType);
    |    emit CampaignUpdated(_since, _until, _purchaseType);
    |  }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1533)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function setLandSectorAssetAddress(address _landSectorAssetAddress) external onlyOwner() {
  > |    landSectorAsset = LandSectorAsset(_landSectorAssetAddress);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1538)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function setLandPoolAddress(address payable _landPoolAddress) external onlyOwner() {
  > |    landPool = MCHLandPool(_landPoolAddress);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1542)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHGUMGatewayV8':
    |
    |  function updateLandPercentage(uint256 _newLandPercentage) external onlyOwner() {
  > |    landPercentage = _newLandPercentage;
    |    emit LandPercentageUpdated(
    |      landPercentage
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1546)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |
    |    uint256 withdrawValue;
  > |    uint256 balance = landSectorAsset.balanceOf(msg.sender);
    |    
    |    for (uint256 i=balance; i > 0; i--) {
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1396)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |    
    |    for (uint256 i=balance; i > 0; i--) {
  > |      uint256 landSector = landSectorAsset.tokenOfOwnerByIndex(msg.sender, i-1);
    |      uint256 tmpAmount = getLandSectorWithdrawableBalance(landSector);
    |      withdrawValue += tmpAmount;
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1399)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |
    |  function getLandSectorWithdrawableBalance(uint256 _landSector) public view returns (uint256) {
  > |    require(landSectorAsset.isValidLandSector(_landSector));
    |    uint16 _landType = landSectorAsset.getLandType(_landSector);
    |    (uint256 shareRate, uint256 decimal) = landSectorAsset.getShareRateWithDecimal(_landSector);
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1443)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |  function getLandSectorWithdrawableBalance(uint256 _landSector) public view returns (uint256) {
    |    require(landSectorAsset.isValidLandSector(_landSector));
  > |    uint16 _landType = landSectorAsset.getLandType(_landSector);
    |    (uint256 shareRate, uint256 decimal) = landSectorAsset.getShareRateWithDecimal(_landSector);
    |    uint256 maxAmount = landTypeToTotalAmount[_landType]
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1444)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |    require(landSectorAsset.isValidLandSector(_landSector));
    |    uint16 _landType = landSectorAsset.getLandType(_landSector);
  > |    (uint256 shareRate, uint256 decimal) = landSectorAsset.getShareRateWithDecimal(_landSector);
    |    uint256 maxAmount = landTypeToTotalAmount[_landType]
    |      .mul(shareRate)
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1445)

[31mViolation[0m for RepeatedCall in contract 'MCHLandPool':
    |
    |    for (uint256 i=balance; i > 0; i--) {
  > |      uint256 landSector = landSectorAsset.tokenOfOwnerByIndex(_lordAddress, i-1);
    |      withdrawableAmount += getLandSectorWithdrawableBalance(landSector);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1457)

[33mWarning[0m for TODAmount in contract 'MCHLandPool':
    |
    |    landSectorToWithdrawnAmount[_landSector] += withdrawableAmount;
  > |    msg.sender.transfer(withdrawableAmount);
    |
    |    emit WithdrawEther(
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1420)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'MCHLandPool':
    |      );
    |    }
  > |    msg.sender.transfer(withdrawValue);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1411)

[31mViolation[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |     */
    |    modifier nonReentrant() {
  > |        _guardCounter += 1;
    |        uint256 localCounter = _guardCounter;
    |        _;
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(310)

[31mViolation[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |    require(landSectorAsset.getTotalVolume(_landType) > 0);
    |    require(allowedAddresses[msg.sender]);
  > |    landTypeToTotalAmount[_landType] += msg.value;
    |
    |    emit EthAddedToPool(
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1381)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(270)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |     */
    |    function pause() public onlyPauser whenNotPaused {
  > |        _paused = true;
    |        emit Paused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(450)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |     */
    |    function unpause() public onlyPauser whenPaused {
  > |        _paused = false;
    |        emit Unpaused(msg.sender);
    |    }
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(458)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |
    |  function setLandSectorAssetAddress(address _landSectorAssetAddress) external onlyOwner() {
  > |    landSectorAsset = LandSectorAsset(_landSectorAssetAddress);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1367)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |
    |  function setAllowedAddress(address _address, bool desired) external onlyOwner() {
  > |    allowedAddresses[_address] = desired;
    |    emit AllowedAddressSet(
    |      _address,
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1371)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |      uint256 tmpAmount = getLandSectorWithdrawableBalance(landSector);
    |      withdrawValue += tmpAmount;
  > |      landSectorToWithdrawnAmount[landSector] += tmpAmount;
    |
    |      emit WithdrawEther(
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1402)

[33mWarning[0m for UnrestrictedWrite in contract 'MCHLandPool':
    |    require(withdrawableAmount > 0);
    |
  > |    landSectorToWithdrawnAmount[_landSector] += withdrawableAmount;
    |    msg.sender.transfer(withdrawableAmount);
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(1419)

[31mViolation[0m for TODAmount in contract 'Withdrawable':
    |contract Withdrawable is Ownable {
    |  function withdrawEther() external onlyOwner {
  > |    msg.sender.transfer(address(this).balance);
    |  }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(465)

[31mViolation[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(270)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(252)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/9/0xeb0860422043a0b8541356a7b6f671cba9e8f85a.sol(270)