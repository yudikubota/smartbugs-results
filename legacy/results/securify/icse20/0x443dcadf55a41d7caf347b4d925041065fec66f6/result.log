Processing contract: /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol:GitHubBounty
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol:OraclizeI
Processing contract: /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol:mortal
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'GitHubBounty':
    |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
  > |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    |    }
    |    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(144)

[33mWarning[0m for DAOConstantGas in contract 'GitHubBounty':
    |        if(transValue > 0) {
    |            bounties[bountyKey].balance = 0;
  > |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(644)

[31mViolation[0m for RepeatedCall in contract 'GitHubBounty':
    |    modifier oraclizeAPI {
    |        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);
  > |        oraclize = OraclizeI(OAR.getAddress());
    |        _;
    |    }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(80)

[31mViolation[0m for RepeatedCall in contract 'GitHubBounty':
    |
    |    function oraclize_cbAddress() oraclizeAPI internal returns (address){
  > |        return oraclize.cbAddress();
    |    }
    |    function oraclize_setProof(byte proofP) oraclizeAPI internal {
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(339)

[33mWarning[0m for RepeatedCall in contract 'GitHubBounty':
    |    modifier oraclizeAPI {
    |        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);
  > |        oraclize = OraclizeI(OAR.getAddress());
    |        _;
    |    }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(80)

[33mWarning[0m for RepeatedCall in contract 'GitHubBounty':
    |    }
    |    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  > |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
    |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(142)

[33mWarning[0m for RepeatedCall in contract 'GitHubBounty':
    |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
  > |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    |    }
    |    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(144)

[33mWarning[0m for RepeatedCall in contract 'GitHubBounty':
    |        if(transValue > 0) {
    |            bounties[bountyKey].balance = 0;
  > |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(644)

[33mWarning[0m for TODAmount in contract 'GitHubBounty':
    |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
  > |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    |    }
    |    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(144)

[33mWarning[0m for TODAmount in contract 'GitHubBounty':
    |        if(transValue > 0) {
    |            bounties[bountyKey].balance = 0;
  > |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(644)

[33mWarning[0m for TODReceiver in contract 'GitHubBounty':
    |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
  > |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    |    }
    |    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(144)

[33mWarning[0m for TODReceiver in contract 'GitHubBounty':
    |        if(transValue > 0) {
    |            bounties[bountyKey].balance = 0;
  > |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(644)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GitHubBounty':
    |        uint price = oraclize.getPrice(datasource, gaslimit);
    |        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price
  > |        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);
    |    }
    |    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(144)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'GitHubBounty':
    |        if(transValue > 0) {
    |            bounties[bountyKey].balance = 0;
  > |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(644)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |contract mortal {
  > |    /* Define variable owner of the type address*/
    |    address owner;
    |
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |    modifier oraclizeAPI {
    |        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);
  > |        oraclize = OraclizeI(OAR.getAddress());
    |        _;
    |    }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |    function oraclize_setNetwork(uint8 networkID) internal returns(bool){
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(111)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |// </ORACLIZE_API> 
    |
  > |contract GitHubBounty is usingOraclize, mortal {
    |    
    |    enum QueryType { IssueState, IssueAssignee, UserAddress }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(536)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        
    |        bounties[bountyKey].issueUrl = issueUrl;
  > |        bounties[bountyKey].prize = msg.value;
    |        bounties[bountyKey].balance = msg.value;
    |        bounties[bountyKey].queriesDelay = queriesDelay;
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(591)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        bounties[bountyKey].issueUrl = issueUrl;
    |        bounties[bountyKey].prize = msg.value;
  > |        bounties[bountyKey].balance = msg.value;
    |        bounties[bountyKey].queriesDelay = queriesDelay;
    |        
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(592)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        bounties[bountyKey].prize = msg.value;
    |        bounties[bountyKey].balance = msg.value;
  > |        bounties[bountyKey].queriesDelay = queriesDelay;
    |        
    |        bountiesKey.push(bountyKey);
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(593)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        bounties[bountyKey].queriesDelay = queriesDelay;
    |        
  > |        bountiesKey.push(bountyKey);
    |        
    |        BountyAdded(bountyKey, issueUrl);
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(595)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |     
    |    function getIssueState(uint delay, bytes32 bountyKey) internal {
  > |        contractBalance = this.balance;
    |        
    |        string issueUrl = bounties[bountyKey].issueUrl;
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(603)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |    
    |    function getIssueAssignee(uint delay, bytes32 bountyKey) internal {
  > |        contractBalance = this.balance;
    |        
    |        string issueUrl = bounties[bountyKey].issueUrl;
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(614)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |    
    |    function getUserAddress(uint delay, bytes32 bountyKey) internal {
  > |        contractBalance = this.balance;
    |        
    |        string login = bounties[bountyKey].assigneeLogin;
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(625)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        string memory url = strConcat("https://api.github.com/users/", login);
    |        bytes32 myid = oraclize_query(delay, "URL", strConcat("json(",url,").location"), oraclizeGasLimit);
  > |        queriesKey[myid] = bountyKey;
    |        queriesType[myid] = QueryType.UserAddress;
    |        
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(630)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        bytes32 myid = oraclize_query(delay, "URL", strConcat("json(",url,").location"), oraclizeGasLimit);
    |        queriesKey[myid] = bountyKey;
  > |        queriesType[myid] = QueryType.UserAddress;
    |        
    |        bounties[bountyKey].balance -= contractBalance - this.balance;
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(631)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        queriesType[myid] = QueryType.UserAddress;
    |        
  > |        bounties[bountyKey].balance -= contractBalance - this.balance;
    |    }
    |    
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(633)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |        uint transValue = bounties[bountyKey].balance;
    |        if(transValue > 0) {
  > |            bounties[bountyKey].balance = 0;
    |            if (!(bounties[bountyKey].assigneeAddress.send(transValue))) {
    |                throw;                
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(643)

[33mWarning[0m for UnrestrictedWrite in contract 'GitHubBounty':
    |            }
    |            else {
  > |                bounties[bountyKey].assigneeAddress = parseAddr(result);
    |                sendBounty(bountyKey);
    |            }
  at /unique_chucks/26/0x443dcadf55a41d7caf347b4d925041065fec66f6.sol(684)