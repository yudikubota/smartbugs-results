Processing contract: /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol:DoubleEther
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol:tokenRecipient
[31mViolation[0m for DAOConstantGas in contract 'DoubleEther':
    |                    
    |                    //transfer the ether and token to leader / first position
  > |                    winnerQueueAddresses[0].transfer(winnerQueueAmount[0]);
    |                    _transfer(address(this), winnerQueueAddresses[0], winnerQueueAmount[0]*100/returnPercentage);
    |                    
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(379)

[31mViolation[0m for TODAmount in contract 'DoubleEther':
    |        //Just in rare case, owner wants to transfer Ether from contract to owner address.Like owner decided to destruct this contract.
    |        function manualWithdrawEtherAll() onlyOwner public{
  > |            address(owner).transfer(address(this).balance);
    |        }
    |        
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(406)

[33mWarning[0m for TODAmount in contract 'DoubleEther':
    |                    
    |                    //transfer the ether and token to leader / first position
  > |                    winnerQueueAddresses[0].transfer(winnerQueueAmount[0]);
    |                    _transfer(address(this), winnerQueueAddresses[0], winnerQueueAmount[0]*100/returnPercentage);
    |                    
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(379)

[31mViolation[0m for TODReceiver in contract 'DoubleEther':
    |        //Just in rare case, owner wants to transfer Ether from contract to owner address.Like owner decided to destruct this contract.
    |        function manualWithdrawEtherAll() onlyOwner public{
  > |            address(owner).transfer(address(this).balance);
    |        }
    |        
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(406)

[33mWarning[0m for TODReceiver in contract 'DoubleEther':
    |                    
    |                    //transfer the ether and token to leader / first position
  > |                    winnerQueueAddresses[0].transfer(winnerQueueAmount[0]);
    |                    _transfer(address(this), winnerQueueAddresses[0], winnerQueueAmount[0]*100/returnPercentage);
    |                    
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(379)

[31mViolation[0m for UnrestrictedWrite in contract 'DoubleEther':
    |            if(msg.value >= 3 ether){
    |                _depositedEther = 3 ether;
  > |                additionalFund += msg.value - 3 ether; 
    |            }
    |            else{
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(365)

[31mViolation[0m for UnrestrictedWrite in contract 'DoubleEther':
    |            //this will shift one index up in both arrays, removing the address owner specified
    |            for (uint256 i = index; i<winnerQueueAmount.length-1; i++){
  > |                winnerQueueAmount[i] = winnerQueueAmount[i+1];
    |                winnerQueueAddresses[i] = winnerQueueAddresses[i+1];
    |            }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(433)

[31mViolation[0m for UnrestrictedWrite in contract 'DoubleEther':
    |            for (uint256 i = index; i<winnerQueueAmount.length-1; i++){
    |                winnerQueueAmount[i] = winnerQueueAmount[i+1];
  > |                winnerQueueAddresses[i] = winnerQueueAddresses[i+1];
    |            }
    |            winnerQueueAmount.length--;
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(434)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |//*******************************************************************************//
    |    
  > |    contract DoubleEther is owned, TokenERC20 {
    |        
    |        
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(275)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |                    //this will shift one index up in both arrays, removing the person who is paid
    |                    for (uint256 i = 0; i<winnerQueueAmount.length-1; i++){
  > |                        winnerQueueAmount[i] = winnerQueueAmount[i+1];
    |                        winnerQueueAddresses[i] = winnerQueueAddresses[i+1];
    |                    }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(384)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |                    for (uint256 i = 0; i<winnerQueueAmount.length-1; i++){
    |                        winnerQueueAmount[i] = winnerQueueAmount[i+1];
  > |                        winnerQueueAddresses[i] = winnerQueueAddresses[i+1];
    |                    }
    |                    winnerQueueAmount.length--;
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(385)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |                    //shifting index one by one
    |                    for (uint256 j = 0; j<arrayLength-i-1; j++){
  > |                        winnerQueueAmount[j] = winnerQueueAmount[j+1];
    |                        winnerQueueAddresses[j] = winnerQueueAddresses[j+1];
    |                    }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(469)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |                    for (uint256 j = 0; j<arrayLength-i-1; j++){
    |                        winnerQueueAmount[j] = winnerQueueAmount[j+1];
  > |                        winnerQueueAddresses[j] = winnerQueueAddresses[j+1];
    |                    }
    |                }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(470)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |    
    |        function transferOwnership(address payable newOwner) onlyOwner public {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |        /// @param freeze either to freeze it or not
    |        function freezeAccount(address target, bool freeze) onlyOwner public {
  > |                frozenAccount[target] = freeze;
    |            emit  FrozenFunds(target, freeze);
    |        }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(314)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |        function changeSafeguardStatus() onlyOwner public{
    |            if (safeguard == false){
  > |                safeguard = true;
    |            }
    |            else{
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(326)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |            }
    |            else{
  > |                safeguard = false;    
    |            }
    |        }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(329)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |        //It is useful when owner wants to transfer additionalFund, which is fund sent by users more than 3 ether, or after removing any stuck address.
    |        function manualWithdrawEtherAdditionalOnly() onlyOwner public{
  > |            additionalFund = 0;
    |            address(owner).transfer(additionalFund);
    |        }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(411)

[33mWarning[0m for UnrestrictedWrite in contract 'DoubleEther':
    |        function removeAddressFromQueue(uint256 index) onlyOwner public {
    |            require(index <= winnerQueueAmount.length);
  > |            additionalFund +=  winnerQueueAmount[index];
    |            //this will shift one index up in both arrays, removing the address owner specified
    |            for (uint256 i = index; i<winnerQueueAmount.length-1; i++){
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(430)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |//***************************************************************//
    |    
  > |    contract TokenERC20 {
    |        // Public variables of the token
    |        using SafeMath for uint256;
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(105)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |        }
    |    
  > |        function transferOwnership(address payable newOwner) onlyOwner public {
    |            owner = newOwner;
    |        }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |    
    |        function transferOwnership(address payable newOwner) onlyOwner public {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/10/0x9d1cbf4ef833340120e721e5028c326ec1066c7e.sol(94)