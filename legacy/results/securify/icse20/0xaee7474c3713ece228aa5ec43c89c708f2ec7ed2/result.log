Processing contract: /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol:ERC20Detailed
Processing contract: /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol:IERC20
Processing contract: /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol:SlotToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |    _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |    _balances[to] = _balances[to].add(value);
    |    emit Transfer(msg.sender, to, value);
    |    return true;
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(156)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |    require(to != address(0));
    |
  > |    _balances[from] = _balances[from].sub(value);
    |    _balances[to] = _balances[to].add(value);
    |    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(196)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |
    |    _balances[from] = _balances[from].sub(value);
  > |    _balances[to] = _balances[to].add(value);
    |    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    |    emit Transfer(from, to, value);
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(197)

[31mViolation[0m for LockedEther in contract 'SlotToken':
    | * `ERC20` functions.
    | */
  > |contract SlotToken is ERC20, ERC20Detailed {
    |    using SafeMath for uint256;
    |    
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(346)

[31mViolation[0m for UnrestrictedWrite in contract 'SlotToken':
    |
    |    _balances[msg.sender] = _balances[msg.sender].sub(value);
  > |    _balances[to] = _balances[to].add(value);
    |    emit Transfer(msg.sender, to, value);
    |    return true;
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(156)

[31mViolation[0m for UnrestrictedWrite in contract 'SlotToken':
    |    require(to != address(0));
    |
  > |    _balances[from] = _balances[from].sub(value);
    |    _balances[to] = _balances[to].add(value);
    |    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(196)

[31mViolation[0m for UnrestrictedWrite in contract 'SlotToken':
    |
    |    _balances[from] = _balances[from].sub(value);
  > |    _balances[to] = _balances[to].add(value);
    |    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);
    |    emit Transfer(from, to, value);
  at /unique_chucks/11/0xaee7474c3713ece228aa5ec43c89c708f2ec7ed2.sol(197)