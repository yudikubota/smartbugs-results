Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:Avatar
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:Controller
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:ControllerInterface
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:DAOToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:DxController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:ERC20Burnable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:GlobalConstraintInterface
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:IERC20
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:Ownable
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:Reputation
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(772)

[33mWarning[0m for TODReceiver in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(772)

[33mWarning[0m for UnhandledException in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(772)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    returns(bool success, bytes memory returnValue) {
    |      // solhint-disable-next-line avoid-call-value
  > |        (success, returnValue) = _contract.call.value(_value)(_data);
    |        emit GenericCall(_contract, _data, _value, success);
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(772)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Avatar':
    |    */
    |    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {
  > |        _to.transfer(_amountInWei);
    |        emit SendEther(_amountInWei, _to);
    |        return true;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(783)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Avatar':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(72)

[31mViolation[0m for LockedEther in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1091)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1194)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1200)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  > |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1441)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        require(avatar.owner() == _newController);
    |        if (nativeToken.owner() == address(this)) {
  > |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1442)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
  > |            require(nativeToken.owner() == _newController);
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1443)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |            require(nativeToken.owner() == _newController);
    |        }
  > |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1445)

[31mViolation[0m for RepeatedCall in contract 'Controller':
    |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
  > |            require(nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1447)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    | * Each scheme has it own parameters and operation permissions.
    | */
  > |contract Controller is ControllerInterface {
    |
    |    struct Scheme {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1091)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |
    |    // Add or change the scheme:
  > |        schemes[_scheme].paramsHash = _paramsHash;
    |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1288)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |    // Add or change the scheme:
    |        schemes[_scheme].paramsHash = _paramsHash;
  > |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
    |        return true;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1289)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1348)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1349)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  > |                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1352)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1358)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1359)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  > |                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1362)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
  > |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1392)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
    |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPre.length--;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1393)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPre.length--;
  > |                delete globalConstraintsRegisterPre[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1396)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
  > |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1406)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
    |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPost.length--;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1407)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |                }
    |                globalConstraintsPost.length--;
  > |                delete globalConstraintsRegisterPost[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1410)

[31mViolation[0m for UnrestrictedWrite in contract 'Controller':
    |        require(newController == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newController = _newController;
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1438)

[33mWarning[0m for UnrestrictedWrite in contract 'Controller':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme);
  > |        delete schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1315)

[31mViolation[0m for LockedEther in contract 'DAOToken':
    | */
    |
  > |contract DAOToken is ERC20, ERC20Burnable, Ownable {
    |
    |    string public name;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(577)

[31mViolation[0m for LockedEther in contract 'DxController':
    |
    |
  > |contract DxController is Controller {
    |    constructor(Avatar _avatar) public Controller(_avatar) {}
    |}
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1643)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        for (idx = 0; idx < globalConstraintsPre.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress))
    |            .pre(msg.sender, globalConstraintsPre[idx].params, func));
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1194)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        for (idx = 0; idx < globalConstraintsPost.length; idx++) {
    |            require(
  > |            (GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress))
    |            .post(msg.sender, globalConstraintsPost[idx].params, func));
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1200)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  > |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1441)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        require(avatar.owner() == _newController);
    |        if (nativeToken.owner() == address(this)) {
  > |            nativeToken.transferOwnership(_newController);
    |            require(nativeToken.owner() == _newController);
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1442)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        if (nativeToken.owner() == address(this)) {
    |            nativeToken.transferOwnership(_newController);
  > |            require(nativeToken.owner() == _newController);
    |        }
    |        if (nativeReputation.owner() == address(this)) {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1443)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |            require(nativeToken.owner() == _newController);
    |        }
  > |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
    |            require(nativeReputation.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1445)

[31mViolation[0m for RepeatedCall in contract 'DxController':
    |        if (nativeReputation.owner() == address(this)) {
    |            nativeReputation.transferOwnership(_newController);
  > |            require(nativeReputation.owner() == _newController);
    |        }
    |        emit UpgradeController(address(this), newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1447)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
  > |// File: openzeppelin-solidity/contracts/ownership/Ownable.sol
    |
    |pragma solidity ^0.5.0;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |
    |    // Add or change the scheme:
  > |        schemes[_scheme].paramsHash = _paramsHash;
    |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1288)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |    // Add or change the scheme:
    |        schemes[_scheme].paramsHash = _paramsHash;
  > |        schemes[_scheme].permissions = _permissions|bytes4(0x00000001);
    |        emit RegisterScheme(msg.sender, _scheme);
    |        return true;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1289)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
  > |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1348)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {
    |                globalConstraintsPre.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPre[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1349)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                GlobalConstraintRegister(true, globalConstraintsPre.length-1);
    |            }else {
  > |                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1352)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            (when == GlobalConstraintInterface.CallPhase.PreAndPost)) {
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
  > |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
    |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1358)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {
    |                globalConstraintsPost.push(GlobalConstraint(_globalConstraint, _params));
  > |                globalConstraintsRegisterPost[_globalConstraint] =
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1359)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                GlobalConstraintRegister(true, globalConstraintsPost.length-1);
    |            }else {
  > |                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;
    |            }
    |        }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1362)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
  > |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1392)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];
    |                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPre.length--;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1393)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                }
    |                globalConstraintsPre.length--;
  > |                delete globalConstraintsRegisterPre[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1396)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
  > |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
    |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1406)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];
    |                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;
  > |                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;
    |                }
    |                globalConstraintsPost.length--;
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1407)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |                }
    |                globalConstraintsPost.length--;
  > |                delete globalConstraintsRegisterPost[_globalConstraint];
    |                retVal = true;
    |            }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1410)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |        require(newController == address(0));   // so the upgrade could be done once for a contract.
    |        require(_newController != address(0));
  > |        newController = _newController;
    |        avatar.transferOwnership(_newController);
    |        require(avatar.owner() == _newController);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1438)

[31mViolation[0m for UnrestrictedWrite in contract 'DxController':
    |
    |
  > |contract DxController is Controller {
    |    constructor(Avatar _avatar) public Controller(_avatar) {}
    |}
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1643)

[33mWarning[0m for UnrestrictedWrite in contract 'DxController':
    |    // Unregister:
    |        emit UnregisterScheme(msg.sender, _scheme);
  > |        delete schemes[_scheme];
    |        return true;
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(1315)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20Burnable':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(516)

[31mViolation[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    | */
    |
  > |contract Reputation is Ownable {
    |
    |    uint8 public decimals = 18;             //Number of decimals of the smallest unit
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(91)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
  > |            newCheckPoint.fromBlock = uint128(block.number);
    |            newCheckPoint.value = uint128(_value);
    |        } else {
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(244)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
    |            newCheckPoint.fromBlock = uint128(block.number);
  > |            newCheckPoint.value = uint128(_value);
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(245)

[33mWarning[0m for UnrestrictedWrite in contract 'Reputation':
    |        } else {
    |            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
  > |            oldCheckPoint.value = uint128(_value);
    |        }
    |    }
  at /unique_chucks/23/0xc8f1be39136ce506c228dc3fa1ab5d2736c75edb.sol(248)