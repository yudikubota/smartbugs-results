Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:BettingController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:Buffer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:CBOR
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:OraclizeAddrResolverI
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:OraclizeI
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:Race
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:oraclizeController
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:solcChecker
Processing contract: /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol:usingOraclize
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for DAO in contract 'BettingController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(658)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |
    |    function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
  > |        return oraclize.getPrice(_datasource, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(735)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |
    |    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource,_gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |            return 0; // Unexpectedly high price
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(755)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |
    |    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
  > |        return oraclize.setCustomGasPrice(_gasPrice);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1210)

[31mViolation[0m for RepeatedCall in contract 'BettingController':
    |        raceDuration = uint32(add(bettingDuration,raceDuration));
    |        bettingDuration = uint32(bettingDuration);
  > |        race.setupRace(bettingDuration,raceDuration);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1895)

[33mWarning[0m for RepeatedCall in contract 'BettingController':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(658)

[33mWarning[0m for RepeatedCall in contract 'BettingController':
    |            } else {
    |                coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
  > |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].pre,true);
    |            }
    |        } else if (myid == coinIndex[raceAddress][coin_pointer].postOraclizeId){
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1824)

[33mWarning[0m for RepeatedCall in contract 'BettingController':
    |            } else {
    |                coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
  > |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].post,false);
    |            }
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1830)

[33mWarning[0m for RepeatedCall in contract 'BettingController':
    |                lastUpdated > starting_time + betting_duration - 800) {
    |                    coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
  > |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            } else {
    |                race.forceVoidExternal();
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1847)

[33mWarning[0m for RepeatedCall in contract 'BettingController':
    |                lastUpdated > starting_time + race_duration - 800) {
    |                    coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
  > |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            }
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1857)

[31mViolation[0m for TODAmount in contract 'BettingController':
    |    function extractFund(uint256 _amount) external onlyOwner {
    |        if (_amount == 0) {
  > |            owner.transfer(address(this).balance);
    |        } else {
    |            require(_amount <= address(this).balance);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1916)

[33mWarning[0m for TODAmount in contract 'BettingController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for TODReceiver in contract 'BettingController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for TODReceiver in contract 'BettingController':
    |    function extractFund(uint256 _amount) external onlyOwner {
    |        if (_amount == 0) {
  > |            owner.transfer(address(this).balance);
    |        } else {
    |            require(_amount <= address(this).balance);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1916)

[33mWarning[0m for TODReceiver in contract 'BettingController':
    |        } else {
    |            require(_amount <= address(this).balance);
  > |            owner.transfer(_amount);
    |        }
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1919)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'BettingController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'BettingController':
    |        } else {
    |            require(_amount <= address(this).balance);
  > |            owner.transfer(_amount);
    |        }
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1919)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            emit newOraclizeQuery();
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1776)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1777)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1778)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1781)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1782)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1783)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1786)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1787)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
    |
    |            //bets closing price query
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1788)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1794)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1795)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1796)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1799)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1800)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1801)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1804)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1805)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
    |        }
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1806)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            if (coinIndex[raceAddress][coin_pointer].pre > 0) {
    |            } else {
  > |                coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
    |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].pre,true);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1823)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            if (coinIndex[raceAddress][coin_pointer].post > 0) {
    |            } else {
  > |                coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
    |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].post,false);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1829)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            if (lastUpdated < starting_time + betting_duration + 800 &&
    |                lastUpdated > starting_time + betting_duration - 800) {
  > |                    coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
    |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            } else {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1846)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |            if (lastUpdated < starting_time + race_duration + 800 &&
    |                lastUpdated > starting_time + race_duration - 800) {
  > |                    coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
    |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1856)

[31mViolation[0m for UnrestrictedWrite in contract 'BettingController':
    |}
    |
  > |contract BettingController is oraclizeController {
    |    address payable owner;
    |    Race race;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1863)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(687)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(692)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(697)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(702)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(707)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(711)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(715)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |}
    |
  > |contract BettingController is oraclizeController {
    |    address payable owner;
    |    Race race;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1863)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |
    |    function spawnRaceManual(uint256 _bettingDuration, uint256 _raceDuration, bool _isOraclizeUsed) external onlyOwner {
  > |        race = (new Race)();
    |        emit RaceDeployed(address(race), race.owner(), _bettingDuration, _raceDuration, now);
    |        if (_isOraclizeUsed) {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1885)

[33mWarning[0m for UnrestrictedWrite in contract 'BettingController':
    |        emit RaceDeployed(address(race), race.owner(), _bettingDuration, _raceDuration, now);
    |        if (_isOraclizeUsed) {
  > |            isOraclizeEnabled[address(race)] = true;
    |            setupRace(_bettingDuration, _raceDuration, address(race));
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1888)

[31mViolation[0m for DAOConstantGas in contract 'Race':
    |            require(house_fee < address(this).balance);
    |            total_reward = total_reward.sub(house_fee);
  > |            house_takeout.transfer(house_fee);
    |            
    |            // p3d takeout
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(209)

[33mWarning[0m for DAOConstantGas in contract 'Race':
    |            require(mle_fee < address(this).balance);
    |            total_reward = total_reward.sub(mle_fee);
  > |            mle_takeout.transfer(mle_fee);
    |        }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(215)

[31mViolation[0m for TODAmount in contract 'Race':
    |        require((chronus.race_end && now > chronus.starting_time + chronus.race_duration + (30 days))
    |            || (chronus.voided_bet && now > chronus.voided_timestamp + (30 days)));
  > |        house_takeout.transfer(address(this).balance);
    |    }
    |}
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(350)

[33mWarning[0m for TODAmount in contract 'Race':
    |        require(address(this).balance >= transfer_amount);
    |        voterIndex[msg.sender].rewarded = true;
  > |        msg.sender.transfer(transfer_amount);
    |        emit Withdraw(msg.sender, transfer_amount);
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(292)

[33mWarning[0m for TODAmount in contract 'Race':
    |            require(house_fee < address(this).balance);
    |            total_reward = total_reward.sub(house_fee);
  > |            house_takeout.transfer(house_fee);
    |            
    |            // p3d takeout
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(209)

[33mWarning[0m for TODAmount in contract 'Race':
    |            require(mle_fee < address(this).balance);
    |            total_reward = total_reward.sub(mle_fee);
  > |            mle_takeout.transfer(mle_fee);
    |        }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(215)

[33mWarning[0m for TODReceiver in contract 'Race':
    |            require(house_fee < address(this).balance);
    |            total_reward = total_reward.sub(house_fee);
  > |            house_takeout.transfer(house_fee);
    |            
    |            // p3d takeout
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(209)

[33mWarning[0m for TODReceiver in contract 'Race':
    |            require(mle_fee < address(this).balance);
    |            total_reward = total_reward.sub(mle_fee);
  > |            mle_takeout.transfer(mle_fee);
    |        }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(215)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Race':
    |        require(address(this).balance >= transfer_amount);
    |        voterIndex[msg.sender].rewarded = true;
  > |        msg.sender.transfer(transfer_amount);
    |        emit Withdraw(msg.sender, transfer_amount);
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(292)

[31mViolation[0m for UnrestrictedWrite in contract 'Race':
    |        uint160 _newTotal = coinIndex[horse].total + uint160(msg.value);
    |        uint32 _newCount = coinIndex[horse].count + 1;
  > |        coinIndex[horse].total = _newTotal;
    |        coinIndex[horse].count = _newCount;
    |        emit Deposit(msg.sender, msg.value, horse, now);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(177)

[31mViolation[0m for UnrestrictedWrite in contract 'Race':
    |        uint32 _newCount = coinIndex[horse].count + 1;
    |        coinIndex[horse].total = _newTotal;
  > |        coinIndex[horse].count = _newCount;
    |        emit Deposit(msg.sender, msg.value, horse, now);
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(178)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        require(msg.value >= 0.01 ether);
    |        if (voterIndex[msg.sender].total_bet==0) {
  > |            total_bettors+=1;
    |        }
    |        uint _newAmount = voterIndex[msg.sender].bets[horse] + msg.value;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |    function changeOwnership(address _newOwner) onlyOwner external {
    |        require(now > chronus.starting_time + chronus.race_duration + 60 minutes);
  > |        owner = _newOwner;
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(131)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        require (!chronus.race_end);
    |        emit PriceCallback(coin_pointer, result, isPrePrice);
  > |        chronus.race_start = true;
    |        chronus.betting_open = false;
    |        if (isPrePrice) {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        emit PriceCallback(coin_pointer, result, isPrePrice);
    |        chronus.race_start = true;
  > |        chronus.betting_open = false;
    |        if (isPrePrice) {
    |            if (now >= chronus.starting_time+chronus.betting_duration+ 60 minutes) {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |                forceVoidRace();
    |            } else {
  > |                coinIndex[coin_pointer].pre = result;
    |            }
    |        } else if (!isPrePrice){
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |                    forceVoidRace();
    |                } else {
  > |                    coinIndex[coin_pointer].post = result;
    |                    coinIndex[coin_pointer].price_check = true;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(152)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |                } else {
    |                    coinIndex[coin_pointer].post = result;
  > |                    coinIndex[coin_pointer].price_check = true;
    |
    |                    if (coinIndex[horses.ETH].price_check && coinIndex[horses.BTC].price_check && coinIndex[horses.LTC].price_check) {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(153)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |    // method to place the oraclize queries
    |    function setupRace(uint32 _bettingDuration, uint32 _raceDuration) onlyOwner beforeBetting external payable {
  > |            chronus.starting_time = uint32(block.timestamp);
    |            chronus.betting_open = true;
    |            chronus.betting_duration = _bettingDuration;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |    function setupRace(uint32 _bettingDuration, uint32 _raceDuration) onlyOwner beforeBetting external payable {
    |            chronus.starting_time = uint32(block.timestamp);
  > |            chronus.betting_open = true;
    |            chronus.betting_duration = _bettingDuration;
    |            chronus.race_duration = _raceDuration;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(185)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |            chronus.starting_time = uint32(block.timestamp);
    |            chronus.betting_open = true;
  > |            chronus.betting_duration = _bettingDuration;
    |            chronus.race_duration = _raceDuration;
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(186)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |            chronus.betting_open = true;
    |            chronus.betting_duration = _bettingDuration;
  > |            chronus.race_duration = _raceDuration;
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(187)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        not using safemath since signed integers are handled
    |        */
  > |        horses.BTC_delta = int64(coinIndex[horses.BTC].post - coinIndex[horses.BTC].pre)*100000/int64(coinIndex[horses.BTC].pre);
    |        horses.ETH_delta = int64(coinIndex[horses.ETH].post - coinIndex[horses.ETH].pre)*100000/int64(coinIndex[horses.ETH].pre);
    |        horses.LTC_delta = int64(coinIndex[horses.LTC].post - coinIndex[horses.LTC].pre)*100000/int64(coinIndex[horses.LTC].pre);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        */
    |        horses.BTC_delta = int64(coinIndex[horses.BTC].post - coinIndex[horses.BTC].pre)*100000/int64(coinIndex[horses.BTC].pre);
  > |        horses.ETH_delta = int64(coinIndex[horses.ETH].post - coinIndex[horses.ETH].pre)*100000/int64(coinIndex[horses.ETH].pre);
    |        horses.LTC_delta = int64(coinIndex[horses.LTC].post - coinIndex[horses.LTC].pre)*100000/int64(coinIndex[horses.LTC].pre);
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(197)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        horses.BTC_delta = int64(coinIndex[horses.BTC].post - coinIndex[horses.BTC].pre)*100000/int64(coinIndex[horses.BTC].pre);
    |        horses.ETH_delta = int64(coinIndex[horses.ETH].post - coinIndex[horses.ETH].pre)*100000/int64(coinIndex[horses.ETH].pre);
  > |        horses.LTC_delta = int64(coinIndex[horses.LTC].post - coinIndex[horses.LTC].pre)*100000/int64(coinIndex[horses.LTC].pre);
    |
    |        total_reward = (coinIndex[horses.BTC].total) + (coinIndex[horses.ETH].total) + (coinIndex[horses.LTC].total);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(198)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        horses.LTC_delta = int64(coinIndex[horses.LTC].post - coinIndex[horses.LTC].pre)*100000/int64(coinIndex[horses.LTC].pre);
    |
  > |        total_reward = (coinIndex[horses.BTC].total) + (coinIndex[horses.ETH].total) + (coinIndex[horses.LTC].total);
    |        if (total_bettors <= 1) {
    |            emit RefundEnabled("Not enough participants");
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |    function forceVoidRace() internal {
    |        require(!chronus.voided_bet);
  > |        chronus.voided_bet=true;
    |        chronus.race_end = true;
    |        chronus.voided_timestamp=uint32(now);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        require(!chronus.voided_bet);
    |        chronus.voided_bet=true;
  > |        chronus.race_end = true;
    |        chronus.voided_timestamp=uint32(now);
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(299)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        chronus.voided_bet=true;
    |        chronus.race_end = true;
  > |        chronus.voided_timestamp=uint32(now);
    |    }
    |    
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(300)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        require((chronus.betting_open && !chronus.race_start)
    |            || (chronus.race_start && !chronus.race_end));
  > |        chronus.voided_bet = true;
    |        chronus.race_end = true;
    |        chronus.voided_timestamp=uint32(now);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(341)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |            || (chronus.race_start && !chronus.race_end));
    |        chronus.voided_bet = true;
  > |        chronus.race_end = true;
    |        chronus.voided_timestamp=uint32(now);
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(342)

[33mWarning[0m for UnrestrictedWrite in contract 'Race':
    |        chronus.voided_bet = true;
    |        chronus.race_end = true;
  > |        chronus.voided_timestamp=uint32(now);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(343)

[33mWarning[0m for DAO in contract 'oraclizeController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for LockedEther in contract 'oraclizeController':
    |*/
    |
  > |contract oraclizeController is usingOraclize {
    |    address owner;
    |    
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1694)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(658)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |
    |    function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
  > |        return oraclize.getPrice(_datasource, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(735)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |
    |    function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
  > |        uint price = oraclize.getPrice(_datasource,_gasLimit);
    |        if (price > 1 ether + tx.gasprice * _gasLimit) {
    |            return 0; // Unexpectedly high price
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(755)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[31mViolation[0m for RepeatedCall in contract 'oraclizeController':
    |
    |    function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
  > |        return oraclize.setCustomGasPrice(_gasPrice);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1210)

[33mWarning[0m for RepeatedCall in contract 'oraclizeController':
    |            oraclize_setNetwork(networkID_auto);
    |        }
  > |        if (address(oraclize) != OAR.getAddress()) {
    |            oraclize = OraclizeI(OAR.getAddress());
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(658)

[33mWarning[0m for RepeatedCall in contract 'oraclizeController':
    |            } else {
    |                coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
  > |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].pre,true);
    |            }
    |        } else if (myid == coinIndex[raceAddress][coin_pointer].postOraclizeId){
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1824)

[33mWarning[0m for RepeatedCall in contract 'oraclizeController':
    |            } else {
    |                coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
  > |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].post,false);
    |            }
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1830)

[33mWarning[0m for RepeatedCall in contract 'oraclizeController':
    |                lastUpdated > starting_time + betting_duration - 800) {
    |                    coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
  > |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            } else {
    |                race.forceVoidExternal();
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1847)

[33mWarning[0m for RepeatedCall in contract 'oraclizeController':
    |                lastUpdated > starting_time + race_duration - 800) {
    |                    coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
  > |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            }
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1857)

[33mWarning[0m for TODAmount in contract 'oraclizeController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for TODReceiver in contract 'oraclizeController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'oraclizeController':
    |            return 0; // Unexpectedly high price
    |        }
  > |        return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
    |    }
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(759)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |*/
    |
  > |contract oraclizeController is usingOraclize {
    |    address owner;
    |    
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1694)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            emit newOraclizeQuery();
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1776)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1777)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.ETH].preOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1778)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1781)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1782)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.LTC].preOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1783)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1786)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPreGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1787)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.BTC].preOraclizeId = temp_ID;
    |
    |            //bets closing price query
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1788)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1794)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1027/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1795)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.ETH;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.ETH].postOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1796)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1799)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/2/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
    |
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1800)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.LTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.LTC].postOraclizeId = temp_ID;
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1801)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
  > |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1804)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            temp_ID = oraclize_query(delay, "URL", "json(https://api.coinmarketcap.com/v2/ticker/1/).data.quotes.USD.price",horses.customPostGasLimit);
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
  > |            oraclizeInverseIndex[temp_ID] = raceAddress;
    |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1805)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            oraclizeIndex[raceAddress][temp_ID] = horses.BTC;
    |            oraclizeInverseIndex[temp_ID] = raceAddress;
  > |            coinIndex[raceAddress][horses.BTC].postOraclizeId = temp_ID;
    |        }
    |    }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1806)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            if (coinIndex[raceAddress][coin_pointer].pre > 0) {
    |            } else {
  > |                coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
    |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].pre,true);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1823)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            if (coinIndex[raceAddress][coin_pointer].post > 0) {
    |            } else {
  > |                coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
    |                race.priceCallback(coin_pointer,coinIndex[raceAddress][coin_pointer].post,false);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1829)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            if (lastUpdated < starting_time + betting_duration + 800 &&
    |                lastUpdated > starting_time + betting_duration - 800) {
  > |                    coinIndex[raceAddress][coin_pointer].pre = stringToUintNormalize(result);
    |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            } else {
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1846)

[31mViolation[0m for UnrestrictedWrite in contract 'oraclizeController':
    |            if (lastUpdated < starting_time + race_duration + 800 &&
    |                lastUpdated > starting_time + race_duration - 800) {
  > |                    coinIndex[raceAddress][coin_pointer].post = stringToUintNormalize(result);
    |                    race.priceCallback(coin_pointer, stringToUintNormalize(result), isPrePrice);
    |            }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1856)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (address(oraclize) != OAR.getAddress()) {
  > |            oraclize = OraclizeI(OAR.getAddress());
    |        }
    |        _;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(659)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |    function oraclize_setNetwork() internal returns (bool _networkSet) {
    |        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
  > |            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);
    |            oraclize_setNetworkName("eth_mainnet");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(687)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
  > |            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);
    |            oraclize_setNetworkName("eth_ropsten3");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(692)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
  > |            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);
    |            oraclize_setNetworkName("eth_kovan");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(697)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
  > |            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);
    |            oraclize_setNetworkName("eth_rinkeby");
    |            return true;
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(702)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
  > |            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(707)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
  > |            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(711)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |        }
    |        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
  > |            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);
    |            return true;
    |        }
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(715)

[33mWarning[0m for UnrestrictedWrite in contract 'oraclizeController':
    |*/
    |
  > |contract oraclizeController is usingOraclize {
    |    address owner;
    |    
  at /unique_chucks/17/0xea0e5d5a8888dc8bc817940f922a26ed2867c2d7.sol(1694)