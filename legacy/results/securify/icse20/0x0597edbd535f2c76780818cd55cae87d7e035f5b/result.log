Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:ERC20
Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:ERC20Basic
Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:MOONToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(104)

[31mViolation[0m for LockedEther in contract 'MOONToken':
    | * `StandardToken` functions.
    | */
  > |contract MOONToken is StandardToken {
    |
    |    string public constant name = "Moon"; 
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(223)

[33mWarning[0m for UnrestrictedWrite in contract 'MOONToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'MOONToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'MOONToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(145)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(144)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/20/0x0597edbd535f2c76780818cd55cae87d7e035f5b.sol(145)