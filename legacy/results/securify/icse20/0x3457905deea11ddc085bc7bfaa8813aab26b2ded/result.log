Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:IERC20
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:MarketContract
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:MarketContractFactoryMPX
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:MarketContractMPX
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:MarketContractRegistryInterface
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:MathLib
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:Ownable
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:PositionToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol:StringLib
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'MarketContract':
    |/// implement different oracle solutions.
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContract is Ownable {
    |    using StringLib for *;
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(622)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContract':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContract':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(72)

[31mViolation[0m for LockedEther in contract 'MarketContractFactoryMPX':
    |/// @title MarketContractFactoryMPX
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContractFactoryMPX is Ownable {
    |
    |    address public marketContractRegistry;
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(927)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractFactoryMPX':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractFactoryMPX':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractFactoryMPX':
    |    function setRegistryAddress(address registryAddress) external onlyOwner {
    |        require(registryAddress != address(0), "registryAddress can not be null");
  > |        marketContractRegistry = registryAddress;
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(999)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractFactoryMPX':
    |    function setOracleHubAddress(address oracleHubAddress) external onlyOwner {
    |        require(oracleHubAddress != address(0), "oracleHubAddress can not be null");
  > |        oracleHub = oracleHubAddress;
    |    }
    |}
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(1007)

[31mViolation[0m for LockedEther in contract 'MarketContractMPX':
    |/// @title MarketContractMPX - a MarketContract designed to be used with our internal oracle service
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract MarketContractMPX is MarketContract {
    |
    |    address public ORACLE_HUB_ADDRESS;
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(815)

[31mViolation[0m for RepeatedCall in contract 'MarketContractMPX':
    |        // mint and distribute short and long position tokens to our caller
    |        PositionToken(LONG_POSITION_TOKEN).mintAndSendToken(qtyToMint, minter);
  > |        PositionToken(SHORT_POSITION_TOKEN).mintAndSendToken(qtyToMint, minter);
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(732)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |        uint newSettlementPrice;
    |        if (now > EXPIRATION) {  // note: miners can cheat this by small increments of time (minutes, not hours)
  > |            isSettled = true;                   // time based expiration has occurred.
    |            newSettlementPrice = lastPrice;
    |        } else if (lastPrice >= PRICE_CAP) {    // price is greater or equal to our cap, settle to CAP price
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(779)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |            newSettlementPrice = lastPrice;
    |        } else if (lastPrice >= PRICE_CAP) {    // price is greater or equal to our cap, settle to CAP price
  > |            isSettled = true;
    |            newSettlementPrice = PRICE_CAP;
    |        } else if (lastPrice <= PRICE_FLOOR) {  // price is lesser or equal to our floor, settle to FLOOR price
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(782)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |            newSettlementPrice = PRICE_CAP;
    |        } else if (lastPrice <= PRICE_FLOOR) {  // price is lesser or equal to our floor, settle to FLOOR price
  > |            isSettled = true;
    |            newSettlementPrice = PRICE_FLOOR;
    |        }
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(785)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    /// @param finalSettlementPrice final query price at time of settlement
    |    function settleContract(uint finalSettlementPrice) internal {
  > |        settlementTimeStamp = now;
    |        settlementPrice = finalSettlementPrice;
    |        emit ContractSettled(finalSettlementPrice);
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(797)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    function settleContract(uint finalSettlementPrice) internal {
    |        settlementTimeStamp = now;
  > |        settlementPrice = finalSettlementPrice;
    |        emit ContractSettled(finalSettlementPrice);
    |    }
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(798)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    function oracleCallBack(uint256 price) public onlyOracleHub {
    |        require(!isSettled);
  > |        lastPrice = price;
    |        emit UpdatedLastPrice(price);
    |        checkSettlement();  // Verify settlement at expiration or requested early settlement.
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(867)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    function arbitrateSettlement(uint256 price) public onlyOwner {
    |        require(price >= PRICE_FLOOR && price <= PRICE_CAP, "arbitration price must be within contract bounds");
  > |        lastPrice = price;
    |        emit UpdatedLastPrice(price);
    |        settleContract(price);
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(878)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |        emit UpdatedLastPrice(price);
    |        settleContract(price);
  > |        isSettled = true;
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(881)

[33mWarning[0m for UnrestrictedWrite in contract 'MarketContractMPX':
    |    function setOracleHubAddress(address oracleHubAddress) public onlyOwner {
    |        require(oracleHubAddress != address(0), "cannot set oracleHubAddress to null address");
  > |        ORACLE_HUB_ADDRESS = oracleHubAddress;
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(893)

[31mViolation[0m for LockedEther in contract 'PositionToken':
    |/// every time a new market contract is deployed.
    |/// @author Phil Elsasser <phil@marketprotocol.io>
  > |contract PositionToken is ERC20, Ownable {
    |
    |    string public name;
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(568)

[33mWarning[0m for UnrestrictedWrite in contract 'PositionToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(54)

[33mWarning[0m for UnrestrictedWrite in contract 'PositionToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'PositionToken':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.add(value);
    |        _balances[account] = _balances[account].add(value);
    |        emit Transfer(address(0), account, value);
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(511)

[33mWarning[0m for UnrestrictedWrite in contract 'PositionToken':
    |        require(account != address(0));
    |
  > |        _totalSupply = _totalSupply.sub(value);
    |        _balances[account] = _balances[account].sub(value);
    |        emit Transfer(account, address(0), value);
  at /unique_chucks/29/0x3457905deea11ddc085bc7bfaa8813aab26b2ded.sol(525)