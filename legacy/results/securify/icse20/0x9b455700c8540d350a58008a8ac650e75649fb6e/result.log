Processing contract: /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol:AuctioneerManaged
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol:BasicTokenWhitelist
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol:TokenWhitelist
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'AuctioneerManaged':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(11)

[31mViolation[0m for LockedEther in contract 'BasicTokenWhitelist':
    |// File: contracts/whitelisting/BasicTokenWhitelist.sol
    |
  > |contract BasicTokenWhitelist is TokenWhitelist {
    |    constructor() public {
    |        auctioneer = msg.sender;
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(59)

[31mViolation[0m for MissingInputValidation in contract 'BasicTokenWhitelist':
    |    // Only tokens approved by auctioneer generate frtToken tokens
    |    // addressToken => boolApproved
  > |    mapping(address => bool) public approvedTokens;
    |
    |    event Approval(address indexed token, bool approved);
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(30)

[31mViolation[0m for MissingInputValidation in contract 'BasicTokenWhitelist':
    |    /// @dev for quick overview of approved Tokens
    |    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved
  > |    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {
    |        uint length = addressesToCheck.length;
    |
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(36)

[33mWarning[0m for MissingInputValidation in contract 'BasicTokenWhitelist':
    |    }
    |    
  > |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
    |            approvedTokens[token[i]] = approved;
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicTokenWhitelist':
    |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
  > |            approvedTokens[token[i]] = approved;
    |            emit Approval(token[i], approved);
    |        }
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(50)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicTokenWhitelist':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(11)

[31mViolation[0m for LockedEther in contract 'TokenWhitelist':
    |// File: @gnosis.pm/dx-contracts/contracts/base/TokenWhitelist.sol
    |
  > |contract TokenWhitelist is AuctioneerManaged {
    |    // Mapping that stores the tokens, which are approved
    |    // Only tokens approved by auctioneer generate frtToken tokens
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(26)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    // Only tokens approved by auctioneer generate frtToken tokens
    |    // addressToken => boolApproved
  > |    mapping(address => bool) public approvedTokens;
    |
    |    event Approval(address indexed token, bool approved);
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(30)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    /// @dev for quick overview of approved Tokens
    |    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved
  > |    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {
    |        uint length = addressesToCheck.length;
    |
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(36)

[33mWarning[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    }
    |    
  > |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
    |            approvedTokens[token[i]] = approved;
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(48)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
  > |            approvedTokens[token[i]] = approved;
    |            emit Approval(token[i], approved);
    |        }
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(50)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/43/0x9b455700c8540d350a58008a8ac650e75649fb6e.sol(11)