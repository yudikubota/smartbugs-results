Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:AOLibrary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:AOSetting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:IAOSetting
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:IAOSettingAttribute
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:IAOSettingValue
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:INameAccountRecovery
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:INameFactory
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:INameTAOPosition
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:Name
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:TAO
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:TheAO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol:tokenRecipient
[31mViolation[0m for LockedEther in contract 'AOLibrary':
    | * @title AOLibrary
    | */
  > |library AOLibrary {
    |	using SafeMath for uint256;
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(399)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isTAO(address _taoId) public view returns (bool) {
  > |		return (_taoId != address(0) && bytes(TAO(address(uint160(_taoId))).name()).length > 0 && TAO(address(uint160(_taoId))).originId() != address(0) && TAO(address(uint160(_taoId))).typeId() == 0);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(411)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |	 */
    |	function isName(address _nameId) public view returns (bool) {
  > |		return (_nameId != address(0) && bytes(TAO(address(uint160(_nameId))).name()).length > 0 && Name(address(uint160(_nameId))).originId() != address(0) && Name(address(uint160(_nameId))).typeId() == 1);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(420)

[33mWarning[0m for RepeatedCall in contract 'AOLibrary':
    |				(isTAO(_theAO) || isName(_theAO)) &&
    |				_nameTAOPositionAddress != address(0) &&
  > |				INameTAOPosition(_nameTAOPositionAddress).senderIsAdvocate(_sender, _theAO)
    |			)
    |		);
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(449)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |	 */
    |	modifier senderNameNotCompromised() {
  > |		require (!_nameAccountRecovery.isCompromised(_nameFactory.ethAddressToNameId(msg.sender)));
    |		_;
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(866)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting creation data
  > |		_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(980)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting creation data
  > |		_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1012)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting creation data
  > |		_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1044)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting creation data
  > |		_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1076)

[31mViolation[0m for RepeatedCall in contract 'AOSetting':
    |	 */
    |	function finalizeSettingCreation(uint256 _settingId) public senderIsName senderNameNotCompromised {
  > |		address _creatorTAOAdvocate = _nameFactory.ethAddressToNameId(msg.sender);
    |		require (_aoSettingAttribute.finalizeAdd(_settingId, _creatorTAOAdvocate));
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1133)

[33mWarning[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting creation data
  > |		_storeSettingCreation(_nameFactory.ethAddressToNameId(msg.sender), _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1108)

[33mWarning[0m for RepeatedCall in contract 'AOSetting':
    |
    |		// Store setting data/state
  > |		(bytes32 _associatedTAOSettingId, bytes32 _creatorTAOSettingId) = _aoSettingAttribute.add(totalSetting, _creatorNameId, _settingName, _creatorTAOId, _associatedTAOId, _extraData);
    |
    |		emit SettingCreation(totalSetting, _creatorNameId, _creatorTAOId, _associatedTAOId, _settingName, _associatedTAOSettingId, _creatorTAOSettingId);
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1227)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function transferOwnership(address _theAO) public onlyTheAO {
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(877)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setWhitelist(address _account, bool _whitelist) public onlyTheAO {
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(887)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setNameFactoryAddress(address _nameFactoryAddress) public onlyTheAO {
    |		require (_nameFactoryAddress != address(0));
  > |		nameFactoryAddress = _nameFactoryAddress;
    |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(896)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		require (_nameFactoryAddress != address(0));
    |		nameFactoryAddress = _nameFactoryAddress;
  > |		_nameFactory = INameFactory(_nameFactoryAddress);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(897)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setNameTAOPositionAddress(address _nameTAOPositionAddress) public onlyTheAO {
    |		require (_nameTAOPositionAddress != address(0));
  > |		nameTAOPositionAddress = _nameTAOPositionAddress;
    |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(906)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		require (_nameTAOPositionAddress != address(0));
    |		nameTAOPositionAddress = _nameTAOPositionAddress;
  > |		_nameTAOPosition = INameTAOPosition(_nameTAOPositionAddress);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(907)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setNameAccountRecoveryAddress(address _nameAccountRecoveryAddress) public onlyTheAO {
    |		require (_nameAccountRecoveryAddress != address(0));
  > |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
    |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(916)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		require (_nameAccountRecoveryAddress != address(0));
    |		nameAccountRecoveryAddress = _nameAccountRecoveryAddress;
  > |		_nameAccountRecovery = INameAccountRecovery(nameAccountRecoveryAddress);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(917)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setAOSettingAttributeAddress(address _aoSettingAttributeAddress) public onlyTheAO {
    |		require (_aoSettingAttributeAddress != address(0));
  > |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
    |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(926)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		require (_aoSettingAttributeAddress != address(0));
    |		aoSettingAttributeAddress = _aoSettingAttributeAddress;
  > |		_aoSettingAttribute = IAOSettingAttribute(_aoSettingAttributeAddress);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(927)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function setAOSettingValueAddress(address _aoSettingValueAddress) public onlyTheAO {
    |		require (_aoSettingValueAddress != address(0));
  > |		aoSettingValueAddress = _aoSettingValueAddress;
    |		_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(936)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		require (_aoSettingValueAddress != address(0));
    |		aoSettingValueAddress = _aoSettingValueAddress;
  > |		_aoSettingValue = IAOSettingValue(_aoSettingValueAddress);
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(937)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		senderNameNotCompromised {
    |		// Update global variables
  > |		totalSetting++;
    |
    |		_settingTypeLookup[totalSetting] = UINT_SETTING_TYPE;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(972)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		totalSetting++;
    |
  > |		_settingTypeLookup[totalSetting] = UINT_SETTING_TYPE;
    |
    |		// Store the value as pending value
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(974)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		senderNameNotCompromised {
    |		// Update global variables
  > |		totalSetting++;
    |
    |		_settingTypeLookup[totalSetting] = BOOL_SETTING_TYPE;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1004)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		totalSetting++;
    |
  > |		_settingTypeLookup[totalSetting] = BOOL_SETTING_TYPE;
    |
    |		// Store the value as pending value
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1006)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		senderNameNotCompromised {
    |		// Update global variables
  > |		totalSetting++;
    |
    |		_settingTypeLookup[totalSetting] = ADDRESS_SETTING_TYPE;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1036)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		totalSetting++;
    |
  > |		_settingTypeLookup[totalSetting] = ADDRESS_SETTING_TYPE;
    |
    |		// Store the value as pending value
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1038)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		senderNameNotCompromised {
    |		// Update global variables
  > |		totalSetting++;
    |
    |		_settingTypeLookup[totalSetting] = BYTES_SETTING_TYPE;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1068)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		totalSetting++;
    |
  > |		_settingTypeLookup[totalSetting] = BYTES_SETTING_TYPE;
    |
    |		// Store the value as pending value
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1070)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		senderNameNotCompromised {
    |		// Update global variables
  > |		totalSetting++;
    |
    |		_settingTypeLookup[totalSetting] = STRING_SETTING_TYPE;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1100)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		totalSetting++;
    |
  > |		_settingTypeLookup[totalSetting] = STRING_SETTING_TYPE;
    |
    |		// Store the value as pending value
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1102)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |		if (!_approved) {
    |			// Clear the settingName from nameSettingLookup so it can be added again in the future
  > |			delete nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];
    |			delete _settingTypeLookup[_settingId];
    |		}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1122)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |			// Clear the settingName from nameSettingLookup so it can be added again in the future
    |			delete nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(this, _settingName))];
  > |			delete _settingTypeLookup[_settingId];
    |		}
    |		emit ApproveSettingCreation(_settingId, _associatedTAOId, _associatedTAOAdvocate, _approved);
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1123)

[31mViolation[0m for UnrestrictedWrite in contract 'AOSetting':
    |	function _storeSettingCreation(address _creatorNameId, string memory _settingName, address _creatorTAOId, address _associatedTAOId, string memory _extraData) internal {
    |		// Store nameSettingLookup
  > |		nameSettingLookup[_associatedTAOId][keccak256(abi.encodePacked(address(this), _settingName))] = totalSetting;
    |
    |		// Store setting data/state
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(1224)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Name':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(358)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'TAO':
    |	 */
    |	function transferEth(address payable _recipient, uint256 _amount) public onlyVault returns (bool) {
  > |		_recipient.transfer(_amount);
    |		return true;
    |	}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(358)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	// Check whether an address is whitelisted and granted access to transact
    |	// on behalf of others
  > |	mapping (address => bool) public whitelist;
    |
    |	constructor() public {
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(711)

[31mViolation[0m for MissingInputValidation in contract 'TheAO':
    |	 * @param _whitelist Either to whitelist or not
    |	 */
  > |	function setWhitelist(address _account, bool _whitelist) public {
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(740)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_theAO != address(0));
  > |		theAO = _theAO;
    |	}
    |
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(732)

[33mWarning[0m for UnrestrictedWrite in contract 'TheAO':
    |		require (msg.sender == theAO);
    |		require (_account != address(0));
  > |		whitelist[_account] = _whitelist;
    |	}
    |}
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(743)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |
    |
  > |contract TokenERC20 {
    |	// Public variables of the token
    |	string public name;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(142)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;
    |		// Add the same to the recipient
  > |		balanceOf[_to] += _value;
    |		emit Transfer(_from, _to, _value);
    |		// Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(190)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |		balanceOf[msg.sender] -= _value;            // Subtract from the sender
  > |		totalSupply -= _value;                      // Updates totalSupply
    |		emit Burn(msg.sender, _value);
    |		return true;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(266)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |		require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
    |		totalSupply -= _value;                              // Update totalSupply
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(282)

[31mViolation[0m for UnrestrictedWrite in contract 'TokenERC20':
    |		balanceOf[_from] -= _value;                         // Subtract from the targeted balance
    |		allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance
  > |		totalSupply -= _value;                              // Update totalSupply
    |		emit Burn(_from, _value);
    |		return true;
  at /unique_chucks/13/0xbd314084ac5872598fdff2f31567084fc9c44270.sol(284)