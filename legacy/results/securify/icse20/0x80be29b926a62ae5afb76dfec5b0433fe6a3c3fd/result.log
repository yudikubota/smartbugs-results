Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:Address
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:ERC20Basic
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:IERC20
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:Ownable
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:SOXToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:SafeERC20
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:StandardToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:Token
Processing contract: /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol:TokenVesting
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'SOXToken':
    |}
    |
  > |contract SOXToken is StandardToken {
    |    string public name;                   
    |    uint8 public decimals;               
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(708)

[31mViolation[0m for UnrestrictedWrite in contract 'SOXToken':
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value; 
    |        emit Transfer(msg.sender, _to, _value); 
    |        return true;
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(677)

[31mViolation[0m for UnrestrictedWrite in contract 'SOXToken':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    |        require(balances[_from] >= _value && allowed[_from][msg.sender] >=  _value);
  > |        balances[_to] += _value; 
    |        balances[_from] -= _value;  
    |        allowed[_from][msg.sender] -= _value; 
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(683)

[31mViolation[0m for UnrestrictedWrite in contract 'SOXToken':
    |        require(balances[_from] >= _value && allowed[_from][msg.sender] >=  _value);
    |        balances[_to] += _value; 
  > |        balances[_from] -= _value;  
    |        allowed[_from][msg.sender] -= _value; 
    |        emit Transfer(_from, _to, _value); 
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(684)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |
    |contract StandardToken is Token {
  > |    function transfer(address _to, uint256 _value) public returns (bool success) {
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] -= _value;
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(674)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |        return true;
    |    }
  > |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    |        require(balances[_from] >= _value && allowed[_from][msg.sender] >=  _value);
    |        balances[_to] += _value; 
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(681)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |   
  > |    function balanceOf(address _owner) public view returns (uint256 balance) {
    |        return balances[_owner];
    |    }
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(690)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |    }
    |    
  > |    function approve(address _spender, uint256 _value) public returns (bool success)   
    |    {
    |        allowed[msg.sender][_spender] = _value;
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(694)

[31mViolation[0m for MissingInputValidation in contract 'StandardToken':
    |        return true;
    |    }
  > |    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
    |      return allowed[_owner][_spender];
    |    }
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(700)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(balances[msg.sender] >= _value);
    |        balances[msg.sender] -= _value;
  > |        balances[_to] += _value; 
    |        emit Transfer(msg.sender, _to, _value); 
    |        return true;
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(677)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
    |        require(balances[_from] >= _value && allowed[_from][msg.sender] >=  _value);
  > |        balances[_to] += _value; 
    |        balances[_from] -= _value;  
    |        allowed[_from][msg.sender] -= _value; 
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(683)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(balances[_from] >= _value && allowed[_from][msg.sender] >=  _value);
    |        balances[_to] += _value; 
  > |        balances[_from] -= _value;  
    |        allowed[_from][msg.sender] -= _value; 
    |        emit Transfer(_from, _to, _value); 
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(684)

[31mViolation[0m for RepeatedCall in contract 'TokenVesting':
    |
    |        // solhint-disable-next-line avoid-low-level-calls
  > |        (bool success, bytes memory returndata) = address(token).call(data);
    |        require(success, "SafeERC20: low-level call failed");
    |
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(536)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |
    |
  > |library SafeMath {
    |    /**
    |     * @dev Returns the addition of two unsigned integers, reverting on
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(428)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |        require(newOwner != address(0), "Ownable: new owner is the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(445)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |
    |    if (shares[_beneficiary] == 0) {
  > |      beneficiaries.push(_beneficiary);
    |    }
    |
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(595)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |    }
    |
  > |    shares[_beneficiary] = shares[_beneficiary].add(_sharesAmount);
    |  }
    |
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(598)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenVesting':
    |      uint beneficiariesCount = beneficiaries.length;
    |
  > |      released = released.add(unreleased);
    |
    |      for (uint i = 0; i < beneficiariesCount; i++) {
  at /unique_chucks/22/0x80be29b926a62ae5afb76dfec5b0433fe6a3c3fd.sol(607)