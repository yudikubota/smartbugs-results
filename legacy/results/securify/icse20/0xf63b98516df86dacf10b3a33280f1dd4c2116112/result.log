Processing contract: /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol:ERC20
Processing contract: /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol:MultiSDO
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol:Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'MultiSDO':
    |
    |
  > |    function batchTrasferByValue(address[] memory strAddressList,uint256[] memory strValueList) public {
    |        require(isBatched);
    |
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(200)

[31mViolation[0m for MissingInputValidation in contract 'MultiSDO':
    |        
    |   }
  > |    function setIsBatch(bool isbat)  public {
    |        require(msg.sender == sendOwner);
    |        isBatched = isbat;
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(217)

[33mWarning[0m for MissingInputValidation in contract 'MultiSDO':
    |
    |
  > |    function batchTrasfer(address[] memory strAddressList,uint256 nMinAmount,uint256 nMaxAmount) public {
    |          require(isBatched);
    |
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(163)

[33mWarning[0m for MissingInputValidation in contract 'MultiSDO':
    |    }
    |	
  > |	function batchTrasferByAValue(address[] memory strAddressList,uint256 nAmount) public {
    |          require(isBatched);
    |
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(184)

[31mViolation[0m for RepeatedCall in contract 'MultiSDO':
    |                continue;
    |            }
  > |            sdotoken.transferFrom(msg.sender,atarget,amount * 1000);
    |        }
    |         
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(179)

[31mViolation[0m for RepeatedCall in contract 'MultiSDO':
    |                continue;
    |            }
  > |            sdotoken.transferFrom(msg.sender,atarget,amount * 1000);
    |        }
    |         
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(194)

[31mViolation[0m for RepeatedCall in contract 'MultiSDO':
    |        }
    |        amount = strValueList[i];
  > |        sdotoken.transferFrom(msg.sender,atarget,amount * 1000);
    |        }
    |        
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(213)

[33mWarning[0m for UnrestrictedWrite in contract 'MultiSDO':
    |    function setIsBatch(bool isbat)  public {
    |        require(msg.sender == sendOwner);
  > |        isBatched = isbat;
    |    }
    |}
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(219)

[31mViolation[0m for LockedEther in contract 'Token':
    | 
    | 
  > | contract Token is ERC20 {
    |    using SafeMath for uint256;
    |    string public name;
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(94)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        require(_value <= balances[msg.sender]);
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(115)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(128)

[31mViolation[0m for UnrestrictedWrite in contract 'Token':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/11/0xf63b98516df86dacf10b3a33280f1dd4c2116112.sol(129)