Processing contract: /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol:FixedAddress
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol:Registry
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol:RegistryInterface
[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    function approveNextOwner(address _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(38)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
    |        emit OwnershipTransfer(nextOwner, owner);
  > |        owner = nextOwner;
    |    }
    |}
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |    function approveNextOwner(address _nextOwner) external onlyOwner {
    |        require (_nextOwner != owner, "Cannot approve current owner.");
  > |        nextOwner = _nextOwner;
    |    }
    |
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(38)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |        require (msg.sender == nextOwner, "Can only accept preapproved new owner.");
    |        emit OwnershipTransfer(nextOwner, owner);
  > |        owner = nextOwner;
    |    }
    |}
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |        require (_nextExchangeContract != exchangeContract, "Cannot approve current exchange contract.");
    |        require (!prevExchangeContracts[_nextExchangeContract], "Cannot approve previously used contract.");
  > |        nextExchangeContract = _nextExchangeContract;
    |    }
    |
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(103)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |    function acceptNextExchangeContract() external {
    |        require (msg.sender == nextExchangeContract, "Can only accept preapproved exchange contract.");
  > |        exchangeContract = nextExchangeContract;
    |        prevExchangeContracts[nextExchangeContract] = true;
    |        exchangeContractVersion++;
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |        require (msg.sender == nextExchangeContract, "Can only accept preapproved exchange contract.");
    |        exchangeContract = nextExchangeContract;
  > |        prevExchangeContracts[nextExchangeContract] = true;
    |        exchangeContractVersion++;
    |
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'Registry':
    |        exchangeContract = nextExchangeContract;
    |        prevExchangeContracts[nextExchangeContract] = true;
  > |        exchangeContractVersion++;
    |
    |        emit UpgradeExchangeContract(exchangeContract, exchangeContractVersion);
  at /unique_chucks/29/0x12345678982cb986dd291b50239295e3cb10cdf6.sol(110)