Processing contract: /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol:ERC20Interface
Processing contract: /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol:WuzuStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'WuzuStandardToken':
    |}
    |
  > |contract WuzuStandardToken is ERC20Interface, SafeMath {
    |    string public symbol;
    |    string public  name;
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(34)

[31mViolation[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |}
    |
  > |contract WuzuStandardToken is ERC20Interface, SafeMath {
    |    string public symbol;
    |    string public  name;
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(34)

[31mViolation[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
    |        balances[to] = safeAdd(balances[to], tokens);
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |        require(newOwner != address(0), "new owner can't be the zero address");
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(72)

[33mWarning[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = safeSub(balances[msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(95)

[33mWarning[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |        balances[from] = safeSub(balances[from], tokens);
    |        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(109)

[33mWarning[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |
    |    function mint(address to, uint tokens) public onlyOwner {
  > |        balances[to] = safeAdd(balances[to], tokens);
    |        _totalSupply += tokens;
    |        emit Transfer(address(0), to, tokens);
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'WuzuStandardToken':
    |    function mint(address to, uint tokens) public onlyOwner {
    |        balances[to] = safeAdd(balances[to], tokens);
  > |        _totalSupply += tokens;
    |        emit Transfer(address(0), to, tokens);
    |    }
  at /unique_chucks/20/0x9b0c9c82119df1771f353ff52ebc898b1a5012b4.sol(120)