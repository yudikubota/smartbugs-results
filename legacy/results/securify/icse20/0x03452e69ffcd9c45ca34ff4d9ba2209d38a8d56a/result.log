Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:Pausable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:PausableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol:VESTELLAToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    function burn(uint256 value) public {
    |        require(balances[msg.sender] >= value);
  > |        totalSupply_ = totalSupply_.sub(value);
    |        balances[msg.sender] = balances[msg.sender].sub(value);
    |        emit Burn(msg.sender, value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |        require(balances[account] >= value);
    |        require(allowed[account][msg.sender] >= value);
  > |        totalSupply_ = totalSupply_.sub(value);
    |        balances[account] = balances[account].sub(value);
    |        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |        require(allowed[account][msg.sender] >= value);
    |        totalSupply_ = totalSupply_.sub(value);
  > |        balances[account] = balances[account].sub(value);
    |        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);
    |        emit Burn(account, value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(288)

[31mViolation[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(77)

[31mViolation[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'Pausable':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |        require(_newOwner != address(0));
    |        emit OwnershipTransferred(owner, _newOwner);
  > |        owner = _newOwner;
    |    }
    |}
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(77)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function pause() public onlyOwner whenNotPaused {
  > |        paused = true;
    |        emit Pause();
    |    }
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'PausableToken':
    |     */
    |    function unpause() public onlyOwner whenPaused {
  > |        paused = false;
    |        emit Unpause();
    |    }
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(116)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(218)

[31mViolation[0m for LockedEther in contract 'VESTELLAToken':
    | * @dev Initialize the basic information of VESTELLAToken.
    | */
  > |contract VESTELLAToken is PausableToken, BurnableToken {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(357)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |
    |
  > |library SafeMath {
    |
    |    uint256 constant internal MAX_UINT = 2 ** 256 - 1; // max uint256
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(184)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(217)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |        emit Transfer(_from, _to, _value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |    function burn(uint256 value) public {
    |        require(balances[msg.sender] >= value);
  > |        totalSupply_ = totalSupply_.sub(value);
    |        balances[msg.sender] = balances[msg.sender].sub(value);
    |        emit Burn(msg.sender, value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |        require(balances[account] >= value);
    |        require(allowed[account][msg.sender] >= value);
  > |        totalSupply_ = totalSupply_.sub(value);
    |        balances[account] = balances[account].sub(value);
    |        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(287)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |        require(allowed[account][msg.sender] >= value);
    |        totalSupply_ = totalSupply_.sub(value);
  > |        balances[account] = balances[account].sub(value);
    |        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);
    |        emit Burn(account, value);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(288)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |            uint256 _amount = amount[i] * 10 ** uint256(decimals);
    |            require(time[i] > now);
  > |            locktime[account].push(time[i]);
    |            lockamount[account].push(_amount);
    |            emit AddLockPosition(account, _amount, time[i]);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(393)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |            require(time[i] > now);
    |            locktime[account].push(time[i]);
  > |            lockamount[account].push(_amount);
    |            emit AddLockPosition(account, _amount, time[i]);
    |            _lockamount = _lockamount.add(_amount);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(394)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |        }
    |        require(balances[msg.sender] >= _lockamount);
  > |        balances[account] = balances[account].add(_lockamount);
    |        balances[msg.sender] = balances[msg.sender].sub(_lockamount);
    |        emit Transfer(msg.sender, account, _lockamount);
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(399)

[33mWarning[0m for UnrestrictedWrite in contract 'VESTELLAToken':
    |            sum = sum.add(_amount[i]);
    |            require(sum <= balances[msg.sender]);  
  > |            balances[_to[i]] = balances[_to[i]].add(_amount[i]); 
    |            emit Transfer(msg.sender, _to[i], _amount[i]);
    |        } 
  at /unique_chucks/3/0x03452e69ffcd9c45ca34ff4d9ba2209d38a8d56a.sol(484)