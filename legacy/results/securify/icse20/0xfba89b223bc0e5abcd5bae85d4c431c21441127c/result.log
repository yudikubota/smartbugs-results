Processing contract: /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol:ERC20
Processing contract: /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol:Owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol:SmartWebLock
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for MissingInputValidation in contract 'Owned':
    |    address payable owner;
    |    address payable newOwner;
  > |    function changeOwner(address payable _newOwner) public onlyOwner {
    |        newOwner=_newOwner;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(10)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner=_newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(11)

[31mViolation[0m for TODAmount in contract 'SmartWebLock':
    |            if (refs[msg.sender]!=address(0x0) && bonus>0) {
    |                payout = bonus*_amount/100;
  > |                refs[msg.sender].transfer(payout);
    |                emit Bonus(refs[msg.sender],payout);
    |            }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(104)

[31mViolation[0m for TODAmount in contract 'SmartWebLock':
    |            }
    |            uint256 deduct = _amount*fee/100;
  > |            owner.transfer(deduct);
    |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(108)

[31mViolation[0m for TODAmount in contract 'SmartWebLock':
    |            uint256 deduct = _amount*fee/100;
    |            owner.transfer(deduct);
  > |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
    |        }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(109)

[31mViolation[0m for TODReceiver in contract 'SmartWebLock':
    |            }
    |            uint256 deduct = _amount*fee/100;
  > |            owner.transfer(deduct);
    |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(108)

[33mWarning[0m for TODReceiver in contract 'SmartWebLock':
    |            if (refs[msg.sender]!=address(0x0) && bonus>0) {
    |                payout = bonus*_amount/100;
  > |                refs[msg.sender].transfer(payout);
    |                emit Bonus(refs[msg.sender],payout);
    |            }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(104)

[33mWarning[0m for TODReceiver in contract 'SmartWebLock':
    |            uint256 deduct = _amount*fee/100;
    |            owner.transfer(deduct);
  > |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
    |        }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(109)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SmartWebLock':
    |            if (refs[msg.sender]!=address(0x0) && bonus>0) {
    |                payout = bonus*_amount/100;
  > |                refs[msg.sender].transfer(payout);
    |                emit Bonus(refs[msg.sender],payout);
    |            }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(104)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SmartWebLock':
    |            }
    |            uint256 deduct = _amount*fee/100;
  > |            owner.transfer(deduct);
    |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(108)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'SmartWebLock':
    |            uint256 deduct = _amount*fee/100;
    |            owner.transfer(deduct);
  > |            payee.transfer(_amount-payout-deduct);
    |            if (ERC20(token).balanceOf(address(this))>=tokens) ERC20(token).transfer(msg.sender, tokens);
    |        }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(109)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    function changeTokens (uint8 _tokens) public returns (bool success){
    |        require(_tokens>0 && msg.sender==payee);
  > |        tokens=_tokens;
    |        return true;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(51)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    function changeBonus (uint8 _bonus) public returns (bool success){
    |        require (_bonus>0 && _bonus<100-fee && msg.sender==payee);
  > |        bonus=_bonus;
    |        return true;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(57)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    function changeUnlock(uint256 _unlock) public returns (bool success){
    |        require(_unlock>0 && msg.sender==payee);
  > |        unlock = _unlock;
    |        return true;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(63)

[31mViolation[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    function changeRef(address _user, address payable _ref) public returns (bool success){
    |        require(_ref!=address(0x0) && refs[_user]!=_ref && msg.sender==payee);
  > |        refs[_user] = _ref;
    |        return true;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    address payable newOwner;
    |    function changeOwner(address payable _newOwner) public onlyOwner {
  > |        newOwner=_newOwner;
    |    }
    |    function acceptOwnership() public {
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'SmartWebLock':
    |    function changeFee (uint8 _fee) onlyOwner public returns (bool success){
    |        require (_fee>0 && _fee<10);
  > |        fee=_fee;
    |        return true;
    |    }
  at /unique_chucks/31/0xfba89b223bc0e5abcd5bae85d4c431c21441127c.sol(75)