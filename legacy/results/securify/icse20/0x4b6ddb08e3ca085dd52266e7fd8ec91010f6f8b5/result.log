Processing contract: /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol:ERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol:EtherDelta
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol:ReserveToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'ERC20':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    ERC20   is SafeMath
    |{
    |    mapping(address => uint256)                         balances;
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(27)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |        assert(finalAmount <= baseAmount);
    |        
  > |        balances[fromAddr] = finalAmount;
    |        
    |                //-----
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(89)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC20':
    |        assert(finalAmount >= baseAmount);
    |        
  > |        balances[toAddr] = finalAmount;
    |        
    |                //-----
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(98)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC20':
    |        assert(finalAmount >= baseAmount);
    |        
  > |        balances[toAddr] = finalAmount;
    |        
    |        emit Transfer(msg.sender, toAddr, amountInWei);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(69)

[33mWarning[0m for TODAmount in contract 'EtherDelta':
    |        tokens[etherAddress][msg.sender] = safeSub(tokens[etherAddress][msg.sender], amount);
    |    
  > |        msg.sender.transfer(amount);
    |    
    |        emit Withdraw(etherAddress, msg.sender, amount, tokens[etherAddress][msg.sender]);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(235)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherDelta':
    |        tokens[etherAddress][msg.sender] = safeSub(tokens[etherAddress][msg.sender], amount);
    |    
  > |        msg.sender.transfer(amount);
    |    
    |        emit Withdraw(etherAddress, msg.sender, amount, tokens[etherAddress][msg.sender]);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(235)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherDelta':
    |        tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);
    |        
  > |        orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);
    |    
    |        emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(324)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherDelta':
    |
    |        tokens[tokenGet][msg.sender]  = safeSub(tokens[tokenGet][msg.sender],  safeAdd(amount, feeTakeXfer));
  > |        tokens[tokenGet][user]        = safeAdd(tokens[tokenGet][user],        amount);
    |        tokens[tokenGet][feeAccount]  = safeAdd(tokens[tokenGet][feeAccount],  feeTakeXfer);
    |        tokens[tokenGive][user]       = safeSub(tokens[tokenGive][user],       safeMul(amountGive, amount) / amountGet);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(338)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherDelta':
    |        tokens[tokenGet][msg.sender]  = safeSub(tokens[tokenGet][msg.sender],  safeAdd(amount, feeTakeXfer));
    |        tokens[tokenGet][user]        = safeAdd(tokens[tokenGet][user],        amount);
  > |        tokens[tokenGet][feeAccount]  = safeAdd(tokens[tokenGet][feeAccount],  feeTakeXfer);
    |        tokens[tokenGive][user]       = safeSub(tokens[tokenGive][user],       safeMul(amountGive, amount) / amountGet);
    |        tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(339)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherDelta':
    |        tokens[tokenGet][user]        = safeAdd(tokens[tokenGet][user],        amount);
    |        tokens[tokenGet][feeAccount]  = safeAdd(tokens[tokenGet][feeAccount],  feeTakeXfer);
  > |        tokens[tokenGive][user]       = safeSub(tokens[tokenGive][user],       safeMul(amountGive, amount) / amountGet);
    |        tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);
    |    }
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(340)

[31mViolation[0m for LockedEther in contract 'ReserveToken':
    |}
    |////////////////////////////////////////////////////////////////////////////////
  > |contract    ReserveToken    is ERC20
    |{
    |    address public minter;
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(134)

[31mViolation[0m for UnrestrictedWrite in contract 'ReserveToken':
    |        assert(finalAmount <= baseAmount);
    |        
  > |        balances[fromAddr] = finalAmount;
    |        
    |                //-----
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(89)

[31mViolation[0m for UnrestrictedWrite in contract 'ReserveToken':
    |        assert(finalAmount >= baseAmount);
    |        
  > |        balances[toAddr] = finalAmount;
    |        
    |                //-----
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(98)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveToken':
    |        assert(finalAmount >= baseAmount);
    |        
  > |        balances[toAddr] = finalAmount;
    |        
    |        emit Transfer(msg.sender, toAddr, amountInWei);
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(69)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveToken':
    |    function    create(address account, uint amount)    onlyMinter  public
    |    {
  > |        balances[account] = safeAdd(balances[account], amount);
    |        totalSupply       = safeAdd(totalSupply, amount);
    |    }
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveToken':
    |    {
    |        balances[account] = safeAdd(balances[account], amount);
  > |        totalSupply       = safeAdd(totalSupply, amount);
    |    }
    |    //--------------------------------------------------------------------------
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(148)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveToken':
    |        require(balances[account]>=amount);
    |
  > |        balances[account] = safeSub(balances[account], amount);
    |        totalSupply       = safeSub(totalSupply, amount);
    |    }
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(155)

[33mWarning[0m for UnrestrictedWrite in contract 'ReserveToken':
    |
    |        balances[account] = safeSub(balances[account], amount);
  > |        totalSupply       = safeSub(totalSupply, amount);
    |    }
    |}
  at /unique_chucks/24/0x4b6ddb08e3ca085dd52266e7fd8ec91010f6f8b5.sol(156)