Processing contract: /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol:CanReclaimToken
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol:DividendToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle283017025702447340/mustExplicit -j 2 -F /tmp/souffle-23ec7b61-ef08-45d7-a98a-902648cf396f -D /tmp/souffle-23ec7b61-ef08-45d7-a98a-902648cf396f_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol:DividendToken
Processing contract: /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol:IERC20
Processing contract: /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol:Ownable
[31mViolation[0m for TODAmount in contract 'CanReclaimToken':
    |
    |    if (address(token) == address(0)) {
  > |      owner.transfer(address(this).balance);
    |      return;
    |    }
  at /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol(124)

[31mViolation[0m for TODReceiver in contract 'CanReclaimToken':
    |
    |    if (address(token) == address(0)) {
  > |      owner.transfer(address(this).balance);
    |      return;
    |    }
  at /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol(124)

[31mViolation[0m for UnrestrictedWrite in contract 'CanReclaimToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol(98)

[33mWarning[0m for UnrestrictedWrite in contract 'CanReclaimToken':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol(80)

[33mWarning[0m for UnrestrictedWrite in contract 'CanReclaimToken':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_chucks/10/0xd6595dfaf834201402c5aa52b2c137fcfbb07824.sol(98)