Processing contract: /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol:Curators
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol:Ownable
Processing contract: /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol:RBAC
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol:Roles
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'Curators':
    |}
    |
  > |contract Curators is Ownable, RBAC {
    |  function grantPermission(address _operator, string memory _permission) public onlyOwner {
    |    addRole(_operator, _permission);
  at /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol(179)

[31mViolation[0m for UnrestrictedWrite in contract 'Curators':
    |        require(!has(role, account));
    |
  > |        role.bearer[account] = true;
    |    }
    |
  at /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol(19)

[31mViolation[0m for UnrestrictedWrite in contract 'Curators':
    |        require(has(role, account));
    |
  > |        role.bearer[account] = false;
    |    }
    |
  at /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol(29)

[33mWarning[0m for UnrestrictedWrite in contract 'Curators':
    |    function renounceOwnership() public onlyOwner {
    |        emit OwnershipTransferred(_owner, address(0));
  > |        _owner = address(0);
    |    }
    |
  at /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'Curators':
    |        require(newOwner != address(0));
    |        emit OwnershipTransferred(_owner, newOwner);
  > |        _owner = newOwner;
    |    }
    |}
  at /unique_contracts/0x75375b37845792256f274875b345f35597d1c053.sol(104)