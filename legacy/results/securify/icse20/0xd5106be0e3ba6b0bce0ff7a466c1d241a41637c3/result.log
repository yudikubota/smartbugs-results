Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSAuth
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSAuthEvents
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSAuthority
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSNote
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSStop
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:DSTokenBase
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:ERC20
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:ERC20Events
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol:HedgeTrade
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setOwner(address owner_)
    |        public
    |        auth
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(184)

[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setAuthority(DSAuthority authority_)
    |        public
    |        auth
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(192)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |        auth
    |    {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |        auth
    |    {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'DSStop':
    |        auth
    |    {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(188)

[33mWarning[0m for UnrestrictedWrite in contract 'DSStop':
    |        auth
    |    {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(196)

[33mWarning[0m for UnrestrictedWrite in contract 'DSStop':
    |    }
    |    function stop() public payable auth note {
  > |        stopped = true;
    |    }
    |    function start() public payable auth note {
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(227)

[33mWarning[0m for UnrestrictedWrite in contract 'DSStop':
    |    }
    |    function start() public payable auth note {
  > |        stopped = false;
    |    }
    |
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(230)

[31mViolation[0m for MissingInputValidation in contract 'DSTokenBase':
    |        return _supply;
    |    }
  > |    function balanceOf(address src) public view returns (uint) {
    |        return _balances[src];
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(102)

[31mViolation[0m for MissingInputValidation in contract 'DSTokenBase':
    |        return _balances[src];
    |    }
  > |    function allowance(address src, address guy) public view returns (uint) {
    |        return _approvals[src][guy];
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(105)

[31mViolation[0m for MissingInputValidation in contract 'DSTokenBase':
    |    }
    |
  > |    function transfer(address dst, uint wad) public returns (bool) {
    |        return transferFrom(msg.sender, dst, wad);
    |    }
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(109)

[31mViolation[0m for MissingInputValidation in contract 'DSTokenBase':
    |    }
    |
  > |    function approve(address guy, uint wad) public returns (bool) {
    |        _approvals[msg.sender][guy] = wad;
    |
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(131)

[33mWarning[0m for MissingInputValidation in contract 'DSTokenBase':
    |    }
    |
  > |    function transferFrom(address src, address dst, uint wad)
    |        public
    |        returns (bool)
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'DSTokenBase':
    |
    |        require(_balances[src] >= wad, "ds-token-insufficient-balance");
  > |        _balances[src] = sub(_balances[src], wad);
    |        _balances[dst] = add(_balances[dst], wad);
    |
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(123)

[33mWarning[0m for UnrestrictedWrite in contract 'DSTokenBase':
    |        require(_balances[src] >= wad, "ds-token-insufficient-balance");
    |        _balances[src] = sub(_balances[src], wad);
  > |        _balances[dst] = add(_balances[dst], wad);
    |
    |        emit Transfer(src, dst, wad);
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(124)

[33mWarning[0m for UnrestrictedWrite in contract 'HedgeTrade':
    |
    |    function DSToken(bytes32 symbol_) public {
  > |        symbol = symbol_;
    |    }
    |
  at /unique_chucks/24/0xd5106be0e3ba6b0bce0ff7a466c1d241a41637c3.sol(242)