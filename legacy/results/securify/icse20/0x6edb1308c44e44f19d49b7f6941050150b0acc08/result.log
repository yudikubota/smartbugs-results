Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:AuctioneerManaged
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:BadToken
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSAuth
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSAuthEvents
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSAuthority
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSNote
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSThing
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DSValue
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DutchExchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Decompilation failed.
Error in Securify
java.lang.ArrayIndexOutOfBoundsException: -2
	at java.util.Vector.elementData(Vector.java:737)
	at java.util.Vector.get(Vector.java:753)
	at ch.securify.decompiler.InstructionFactory.createInstance(InstructionFactory.java:209)
	at ch.securify.decompiler.InstructionFactory.createAndApply(InstructionFactory.java:75)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:165)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:206)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:221)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:243)
	at ch.securify.decompiler.DestackerFallback.decompile(DestackerFallback.java:136)
	at ch.securify.decompiler.DecompilerFallback.decompile(DecompilerFallback.java:73)
	at ch.securify.Main.decompileContract(Main.java:310)
	at ch.securify.Main.processHexFile(Main.java:163)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DutchExchange
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DxMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:DxUpgrade
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:ERC20
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:ERC20WithSymbol
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:EthOracle
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:EtherToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:GnosisMath
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:GnosisStandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:KyberDxMarketMaker
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
java.io.IOException: Timeout for /tmp/binaries_souffle1860764975499583164/mustExplicit -j 2 -F /tmp/souffle-9132ea0f-23ef-45f3-8b73-b8fc60cdd37a -D /tmp/souffle-9132ea0f-23ef-45f3-8b73-b8fc60cdd37a_OUT
	at ch.securify.analysis.AbstractDataflow.runCommand(AbstractDataflow.java:277)
	at ch.securify.analysis.AbstractDataflow.initDataflow(AbstractDataflow.java:169)
	at ch.securify.analysis.MustExplicitDataflow.<init>(MustExplicitDataflow.java:33)
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:33)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error in Securify
java.lang.RuntimeException
	at ch.securify.analysis.Dataflow.<init>(Dataflow.java:37)
	at ch.securify.analysis.DataflowFactory.getDataflow(DataflowFactory.java:54)
	at ch.securify.Main.checkPatterns(Main.java:388)
	at ch.securify.Main.processHexFile(Main.java:189)
	at ch.securify.Main.processCompilationOutput(Main.java:129)
	at ch.securify.Main.processSolidityFile(Main.java:100)
	at ch.securify.Main.main(Main.java:254)
Error, skipping: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:KyberDxMarketMaker
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:KyberNetworkProxy
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:Medianizer
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:PermissionGroups
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:PriceFeed
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:PriceOracleInterface
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:Proxied
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:Proxy
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:SafeTransfer
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:StandardTokenData
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:Token
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:TokenFRT
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:TokenOWL
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:TokenWhitelist
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol:Withdrawable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'AuctioneerManaged':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(883)

[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setOwner(address owner_) public auth {
    |        owner = owner_;
    |        emit LogSetOwner(owner);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1187)

[33mWarning[0m for MissingInputValidation in contract 'DSAuth':
    |    }
    |
  > |    function setAuthority(DSAuthority authority_) public auth {
    |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1192)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1188)

[33mWarning[0m for UnrestrictedWrite in contract 'DSAuth':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1193)

[33mWarning[0m for MissingInputValidation in contract 'DSThing':
    |    }
    |
  > |    function setOwner(address owner_) public auth {
    |        owner = owner_;
    |        emit LogSetOwner(owner);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1187)

[33mWarning[0m for MissingInputValidation in contract 'DSThing':
    |    }
    |
  > |    function setAuthority(DSAuthority authority_) public auth {
    |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1192)

[33mWarning[0m for UnrestrictedWrite in contract 'DSThing':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1188)

[33mWarning[0m for UnrestrictedWrite in contract 'DSThing':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1193)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1188)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1193)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |
    |    function poke(bytes32 wut) public payable note auth {
  > |        val = wut;
    |        has = true;
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1310)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |    function poke(bytes32 wut) public payable note auth {
    |        val = wut;
  > |        has = true;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1311)

[33mWarning[0m for UnrestrictedWrite in contract 'DSValue':
    |    function void() public payable note auth {
    |        // unset the value
  > |        has = false;
    |    }
    |}
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1316)

[31mViolation[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |
    |        // Update masterCopy
  > |        masterCopy = newMasterCopy;
    |        newMasterCopy = address(0);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1536)

[31mViolation[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |        // Update masterCopy
    |        masterCopy = newMasterCopy;
  > |        newMasterCopy = address(0);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1537)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(883)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |
    |        // Update masterCopyCountdown
  > |        newMasterCopy = _masterCopy;
    |        masterCopyCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_MASTERCOPY);
    |        emit NewMasterCopyProposal(_masterCopy);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1526)

[33mWarning[0m for UnrestrictedWrite in contract 'DxUpgrade':
    |        // Update masterCopyCountdown
    |        newMasterCopy = _masterCopy;
  > |        masterCopyCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_MASTERCOPY);
    |        emit NewMasterCopyProposal(_masterCopy);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1527)

[31mViolation[0m for UnrestrictedWrite in contract 'EthOracle':
    |            "It's not possible to update the oracle during the waiting period"
    |        );
  > |        ethUSDOracle = newProposalEthUSDOracle;
    |        newProposalEthUSDOracle = PriceOracleInterface(0);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1506)

[31mViolation[0m for UnrestrictedWrite in contract 'EthOracle':
    |        );
    |        ethUSDOracle = newProposalEthUSDOracle;
  > |        newProposalEthUSDOracle = PriceOracleInterface(0);
    |    }
    |}
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1507)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(883)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |    function initiateEthUsdOracleUpdate(PriceOracleInterface _ethUSDOracle) public onlyAuctioneer {
    |        require(address(_ethUSDOracle) != address(0), "The oracle address must be valid");
  > |        newProposalEthUSDOracle = _ethUSDOracle;
    |        oracleInterfaceCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_ORACLE);
    |        emit NewOracleProposal(_ethUSDOracle);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1495)

[33mWarning[0m for UnrestrictedWrite in contract 'EthOracle':
    |        require(address(_ethUSDOracle) != address(0), "The oracle address must be valid");
    |        newProposalEthUSDOracle = _ethUSDOracle;
  > |        oracleInterfaceCountdown = add(block.timestamp, WAITING_PERIOD_CHANGE_ORACLE);
    |        emit NewOracleProposal(_ethUSDOracle);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1496)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'EtherToken':
    |        balances[msg.sender] = balances[msg.sender].sub(value);
    |        totalTokens = totalTokens.sub(value);
  > |        msg.sender.transfer(value);
    |        emit Withdrawal(msg.sender, value);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(2842)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherToken':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(565)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherToken':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(581)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherToken':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(583)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherToken':
    |    function deposit() public payable {
    |        balances[msg.sender] = balances[msg.sender].add(msg.value);
  > |        totalTokens = totalTokens.add(msg.value);
    |        emit Deposit(msg.sender, msg.value);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(2832)

[33mWarning[0m for UnrestrictedWrite in contract 'EtherToken':
    |        // Balance covers value
    |        balances[msg.sender] = balances[msg.sender].sub(value);
  > |        totalTokens = totalTokens.sub(value);
    |        msg.sender.transfer(value);
    |        emit Withdrawal(msg.sender, value);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(2841)

[31mViolation[0m for LockedEther in contract 'GnosisMath':
    |/// @author Alan Lu - <alan.lu@gnosis.pm>
    |/// @author Stefan George - <stefan@gnosis.pm>
  > |library GnosisMath {
    |    /*
    |     *  Constants
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(272)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(565)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(581)

[33mWarning[0m for UnrestrictedWrite in contract 'GnosisStandardToken':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(583)

[31mViolation[0m for LockedEther in contract 'Medianizer':
    |// File: @gnosis.pm/dx-contracts/contracts/Oracle/Medianizer.sol
    |
  > |contract Medianizer is DSValue {
    |    mapping(bytes12 => address) public values;
    |    mapping(address => bytes12) public indexes;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1322)

[31mViolation[0m for RepeatedCall in contract 'Medianizer':
    |            return false;
    |        } else {
  > |            return authority.canCall(src, address(this), sig);
    |        }
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1210)

[31mViolation[0m for RepeatedCall in contract 'Medianizer':
    |        for (uint96 i = 1; i < uint96(next); i++) {
    |            if (values[bytes12(i)] != address(0)) {
  > |                (bytes32 wut, bool wuz) = DSValue(values[bytes12(i)]).peek();
    |                if (wuz) {
    |                    if (ctr == 0 || wut >= wuts[ctr - 1]) {
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1379)

[33mWarning[0m for UnrestrictedWrite in contract 'Medianizer':
    |
    |    function poke(bytes32) public payable note {
  > |        (val, has) = compute();
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1371)

[31mViolation[0m for LockedEther in contract 'PermissionGroups':
    |// File: contracts/PermissionGroups.sol
    |
  > |contract PermissionGroups {
    |
    |    address public admin;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(24)

[31mViolation[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |// File: contracts/PermissionGroups.sol
    |
  > |contract PermissionGroups {
    |
    |    address public admin;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(24)

[31mViolation[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        for (uint i = 0; i < alertersGroup.length; ++i) {
    |            if (alertersGroup[i] == alerter) {
  > |                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];
    |                alertersGroup.length--;
    |                emit AlerterAdded(alerter, false);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(117)

[31mViolation[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        for (uint i = 0; i < operatorsGroup.length; ++i) {
    |            if (operatorsGroup[i] == operator) {
  > |                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];
    |                operatorsGroup.length -= 1;
    |                emit OperatorAdded(operator, false);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |pragma solidity 0.5.2;
    |
  > |// File: contracts/ERC20Interface.sol
    |
    |// https://github.com/ethereum/EIPs/issues/20
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        require(newAdmin != address(0), "admin address cannot be 0");
    |        emit TransferAdminPending(pendingAdmin);
  > |        pendingAdmin = newAdmin;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        emit TransferAdminPending(newAdmin);
    |        emit AdminClaimed(newAdmin, admin);
  > |        admin = newAdmin;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        require(pendingAdmin == msg.sender, "admin address cannot be 0");
    |        emit AdminClaimed(pendingAdmin, admin);
  > |        admin = pendingAdmin;
    |        pendingAdmin = address(0);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        emit AdminClaimed(pendingAdmin, admin);
    |        admin = pendingAdmin;
  > |        pendingAdmin = address(0);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |
    |        emit AlerterAdded(newAlerter, true);
  > |        alerters[newAlerter] = true;
    |        alertersGroup.push(newAlerter);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        emit AlerterAdded(newAlerter, true);
    |        alerters[newAlerter] = true;
  > |        alertersGroup.push(newAlerter);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |    function removeAlerter (address alerter) public onlyAdmin {
    |        require(alerters[alerter], "alerter not configured");
  > |        alerters[alerter] = false;
    |
    |        for (uint i = 0; i < alertersGroup.length; ++i) {
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |
    |        emit OperatorAdded(newOperator, true);
  > |        operators[newOperator] = true;
    |        operatorsGroup.push(newOperator);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(136)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |        emit OperatorAdded(newOperator, true);
    |        operators[newOperator] = true;
  > |        operatorsGroup.push(newOperator);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'PermissionGroups':
    |    function removeOperator (address operator) public onlyAdmin {
    |        require(operators[operator], "operator not configured");
  > |        operators[operator] = false;
    |
    |        for (uint i = 0; i < operatorsGroup.length; ++i) {
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(142)

[31mViolation[0m for LockedEther in contract 'PriceFeed':
    |
    |
  > |contract PriceFeed is DSThing {
    |    uint128 val;
    |    uint32 public zzz;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1268)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function setOwner(address owner_) public auth {
  > |        owner = owner_;
    |        emit LogSetOwner(owner);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1188)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function setAuthority(DSAuthority authority_) public auth {
  > |        authority = authority_;
    |        emit LogSetAuthority(address(authority));
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1193)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function post(uint128 val_, uint32 zzz_, address med_) public payable note auth {
  > |        val = val_;
    |        zzz = zzz_;
    |        (bool success, ) = med_.call(abi.encodeWithSignature("poke()"));
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1282)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |    function post(uint128 val_, uint32 zzz_, address med_) public payable note auth {
    |        val = val_;
  > |        zzz = zzz_;
    |        (bool success, ) = med_.call(abi.encodeWithSignature("poke()"));
    |        require(success, "The poke must succeed");
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1283)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceFeed':
    |
    |    function void() public payable note auth {
  > |        zzz = 0;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1289)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceOracleInterface':
    |    /// output always a price of 600 USD. This gives everyone time to set up a new pricefeed.
    |    function raiseEmergency(bool _emergencyMode) public onlyOwner {
  > |        emergencyMode = _emergencyMode;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1444)

[33mWarning[0m for UnrestrictedWrite in contract 'PriceOracleInterface':
    |    /// @param _owner address of owner
    |    function updateCurator(address _owner) public onlyOwner {
  > |        owner = _owner;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(1450)

[31mViolation[0m for LockedEther in contract 'TokenFRT':
    |
    |/// @title Standard token contract with overflow protection
  > |contract TokenFRT is Proxied, GnosisStandardToken {
    |    address public owner;
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(623)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(565)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(581)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(583)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(_minter != address(0), "The new minter must be a valid address");
    |
  > |        minter = _minter;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(656)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenFRT':
    |        require(msg.sender == owner, "Only the owner can update the owner");
    |        require(_owner != address(0), "The new owner must be a valid address");
  > |        owner = _owner;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(664)

[31mViolation[0m for LockedEther in contract 'TokenOWL':
    |// File: @gnosis.pm/owl-token/contracts/TokenOWL.sol
    |
  > |contract TokenOWL is Proxied, GnosisStandardToken {
    |    using GnosisMath for *;
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(754)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        balances[msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(msg.sender, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(565)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |            return false;
    |        }
  > |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
    |        balances[to] += value;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(581)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        balances[from] -= value;
    |        allowances[from][msg.sender] -= value;
  > |        balances[to] += value;
    |        emit Transfer(from, to, value);
    |        return true;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(583)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    function burnOWL(address user, uint amount) public {
    |        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);
  > |        balances[user] = balances[user].sub(amount);
    |        totalTokens = totalTokens.sub(amount);
    |        emit Burnt(msg.sender, user, amount);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(833)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);
    |        balances[user] = balances[user].sub(amount);
  > |        totalTokens = totalTokens.sub(amount);
    |        emit Burnt(msg.sender, user, amount);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(834)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        // Update masterCopyCountdown
  > |        masterCopyCountdown.masterCopy = _masterCopy;
    |        masterCopyCountdown.timeWhenAvailable = now + 30 days;
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(785)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |        // Update masterCopyCountdown
    |        masterCopyCountdown.masterCopy = _masterCopy;
  > |        masterCopyCountdown.timeWhenAvailable = now + 30 days;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(786)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |
    |        // Update masterCopy
  > |        masterCopy = masterCopyCountdown.masterCopy;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(798)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    /// @param newMinter The new address authorized to mint this token
    |    function setMinter(address newMinter) public onlyCreator {
  > |        minter = newMinter;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(808)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenOWL':
    |    /// @param newOwner The new address, which should become the owner
    |    function setNewOwner(address newOwner) public onlyCreator {
  > |        creator = newOwner;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(814)

[31mViolation[0m for LockedEther in contract 'TokenWhitelist':
    |// File: @gnosis.pm/dx-contracts/contracts/base/TokenWhitelist.sol
    |
  > |contract TokenWhitelist is AuctioneerManaged {
    |    // Mapping that stores the tokens, which are approved
    |    // Only tokens approved by auctioneer generate frtToken tokens
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(898)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    // Only tokens approved by auctioneer generate frtToken tokens
    |    // addressToken => boolApproved
  > |    mapping(address => bool) public approvedTokens;
    |
    |    event Approval(address indexed token, bool approved);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(902)

[31mViolation[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    /// @dev for quick overview of approved Tokens
    |    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved
  > |    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {
    |        uint length = addressesToCheck.length;
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(908)

[33mWarning[0m for MissingInputValidation in contract 'TokenWhitelist':
    |    }
    |    
  > |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
    |            approvedTokens[token[i]] = approved;
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(920)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {
    |        for (uint i = 0; i < token.length; i++) {
  > |            approvedTokens[token[i]] = approved;
    |            emit Approval(token[i], approved);
    |        }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(922)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenWhitelist':
    |    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {
    |        require(_auctioneer != address(0), "The auctioneer must be a valid address");
  > |        auctioneer = _auctioneer;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(883)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Withdrawable':
    |        onlyAdmin
    |    {
  > |        sendTo.transfer(amount);
    |        emit EtherWithdraw(amount, sendTo);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(202)

[31mViolation[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        for (uint i = 0; i < alertersGroup.length; ++i) {
    |            if (alertersGroup[i] == alerter) {
  > |                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];
    |                alertersGroup.length--;
    |                emit AlerterAdded(alerter, false);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(117)

[31mViolation[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        for (uint i = 0; i < operatorsGroup.length; ++i) {
    |            if (operatorsGroup[i] == operator) {
  > |                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];
    |                operatorsGroup.length -= 1;
    |                emit OperatorAdded(operator, false);
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(146)

[31mViolation[0m for UnrestrictedWrite in contract 'Withdrawable':
    | * This will prevent any accidental loss of tokens.
    | */
  > |contract Withdrawable is PermissionGroups {
    |
    |    event TokenWithdraw(
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(163)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |pragma solidity 0.5.2;
    |
  > |// File: contracts/ERC20Interface.sol
    |
    |// https://github.com/ethereum/EIPs/issues/20
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(3)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(newAdmin != address(0), "admin address cannot be 0");
    |        emit TransferAdminPending(pendingAdmin);
  > |        pendingAdmin = newAdmin;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        emit TransferAdminPending(newAdmin);
    |        emit AdminClaimed(newAdmin, admin);
  > |        admin = newAdmin;
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(81)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        require(pendingAdmin == msg.sender, "admin address cannot be 0");
    |        emit AdminClaimed(pendingAdmin, admin);
  > |        admin = pendingAdmin;
    |        pendingAdmin = address(0);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(92)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        emit AdminClaimed(pendingAdmin, admin);
    |        admin = pendingAdmin;
  > |        pendingAdmin = address(0);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(93)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |
    |        emit AlerterAdded(newAlerter, true);
  > |        alerters[newAlerter] = true;
    |        alertersGroup.push(newAlerter);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(107)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        emit AlerterAdded(newAlerter, true);
    |        alerters[newAlerter] = true;
  > |        alertersGroup.push(newAlerter);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(108)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |    function removeAlerter (address alerter) public onlyAdmin {
    |        require(alerters[alerter], "alerter not configured");
  > |        alerters[alerter] = false;
    |
    |        for (uint i = 0; i < alertersGroup.length; ++i) {
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |
    |        emit OperatorAdded(newOperator, true);
  > |        operators[newOperator] = true;
    |        operatorsGroup.push(newOperator);
    |    }
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(136)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |        emit OperatorAdded(newOperator, true);
    |        operators[newOperator] = true;
  > |        operatorsGroup.push(newOperator);
    |    }
    |
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(137)

[33mWarning[0m for UnrestrictedWrite in contract 'Withdrawable':
    |    function removeOperator (address operator) public onlyAdmin {
    |        require(operators[operator], "operator not configured");
  > |        operators[operator] = false;
    |
    |        for (uint i = 0; i < operatorsGroup.length; ++i) {
  at /unique_chucks/10/0x6edb1308c44e44f19d49b7f6941050150b0acc08.sol(142)