Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:BasicToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:ERC20
Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:ERC20Basic
Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:NewLRCToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        address burner = msg.sender;
    |        balances[burner] = balances[burner].sub(_value);
  > |        totalSupply_ = totalSupply_.sub(_value);
    |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        balances[burner] = balances[burner].sub(_value);
    |        totalSupply_ = totalSupply_.sub(_value);
  > |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
    |        emit Burn(burner, _value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'BasicToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(106)

[31mViolation[0m for LockedEther in contract 'NewLRCToken':
    |}
    |
  > |contract NewLRCToken is StandardToken {
    |    using SafeMath for uint256;
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(242)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        address burner = msg.sender;
    |        balances[burner] = balances[burner].sub(_value);
  > |        totalSupply_ = totalSupply_.sub(_value);
    |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        balances[burner] = balances[burner].sub(_value);
    |        totalSupply_ = totalSupply_.sub(_value);
  > |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
    |        emit Burn(burner, _value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(106)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        require(_value <= allowed[_owner][msg.sender]);
    |
  > |        balances[_owner] = balances[_owner].sub(_value);
    |        if (allowed[_owner][msg.sender] < MAX_UINT) {
    |            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);
    |        }
  > |        totalSupply_ = totalSupply_.sub(_value);
    |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        }
    |        totalSupply_ = totalSupply_.sub(_value);
  > |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
    |        emit Burn(_owner, _value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'NewLRCToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(171)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        address burner = msg.sender;
    |        balances[burner] = balances[burner].sub(_value);
  > |        totalSupply_ = totalSupply_.sub(_value);
    |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(85)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        balances[burner] = balances[burner].sub(_value);
    |        totalSupply_ = totalSupply_.sub(_value);
  > |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
    |        emit Burn(burner, _value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(86)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        // SafeMath.sub will throw if there is not enough balance.
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |        emit Transfer(msg.sender, _to, _value);
    |        return true;
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(106)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_owner][msg.sender]);
    |
  > |        balances[_owner] = balances[_owner].sub(_value);
    |        if (allowed[_owner][msg.sender] < MAX_UINT) {
    |            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(146)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |            allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(_value);
    |        }
  > |        totalSupply_ = totalSupply_.sub(_value);
    |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(150)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        }
    |        totalSupply_ = totalSupply_.sub(_value);
  > |        burnedTotalNum_ = burnedTotalNum_.add(_value);
    |
    |        emit Burn(_owner, _value);
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(151)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= balances[_from]);
    |        require(_value <= allowed[_from][msg.sender]);
  > |        balances[_from] = balances[_from].sub(_value);
    |        balances[_to] = balances[_to].add(_value);
    |
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(170)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |        require(_value <= allowed[_from][msg.sender]);
    |        balances[_from] = balances[_from].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        /// an allowance of MAX_UINT represents an unlimited allowance.
  at /unique_chucks/37/0x86cd9f3f0f32c73f0173c4ab8cd13016673a85a1.sol(171)