Processing contract: /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol:MICATOKEN
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol:TokenERC20
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol:tokenRecipient
[31mViolation[0m for TODAmount in contract 'MICATOKEN':
    |        function manualWithdrawEther()onlyOwner public{
    |			uint256 amount=address(this).balance;
  > |			owner.transfer(amount);
    |		}
    |		
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(314)

[33mWarning[0m for TODAmount in contract 'MICATOKEN':
    |        //Automatocally forwards ether from smart contract to owner address
    |        function forwardEherToOwner() internal {
  > |            owner.transfer(msg.value); 
    |          }
    |        
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(267)

[31mViolation[0m for TODReceiver in contract 'MICATOKEN':
    |        //Automatocally forwards ether from smart contract to owner address
    |        function forwardEherToOwner() internal {
  > |            owner.transfer(msg.value); 
    |          }
    |        
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(267)

[31mViolation[0m for TODReceiver in contract 'MICATOKEN':
    |        function manualWithdrawEther()onlyOwner public{
    |			uint256 amount=address(this).balance;
  > |			owner.transfer(amount);
    |		}
    |		
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(314)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |    
    |        function transferOwnership(address payable newOwner) onlyOwner public {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(61)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |			uint256 tokenAmount = TokensAllocationForICO.mul(1 ether);
    |			require(balanceOf[msg.sender] > tokenAmount);
  > |			startTime=start_;
    |			endTime=end_;
    |			exchangeRate = exchangeRateInWei;
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(277)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |			require(balanceOf[msg.sender] > tokenAmount);
    |			startTime=start_;
  > |			endTime=end_;
    |			exchangeRate = exchangeRateInWei;
    |			transfer(address(this),tokenAmount);
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(278)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |			startTime=start_;
    |			endTime=end_;
  > |			exchangeRate = exchangeRateInWei;
    |			transfer(address(this),tokenAmount);
    |        }    	
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(279)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |        //It will also transfer remaining tokens to owner
    |		function stopICO() onlyOwner public{
  > |            endTime = 0;
    |            uint256 tokenAmount=balanceOf[address(this)];
    |            _transfer(address(this), msg.sender, tokenAmount);
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(286)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |        //Function to set ICO Exchange rate. 
    |    	function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {
  > |			exchangeRate=newExchangeRate;
    |        }
    |        
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(302)

[33mWarning[0m for UnrestrictedWrite in contract 'MICATOKEN':
    |        /// @param freeze either to freeze it or not
    |        function freezeAccount(address target, bool freeze) onlyOwner public {
  > |            frozenAccount[target] = freeze;
    |          emit  FrozenFunds(target, freeze);
    |        }
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(331)

[31mViolation[0m for LockedEther in contract 'TokenERC20':
    |    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external ; }
    |    
  > |    contract TokenERC20 {
    |        // Public variables of the token
    |        using SafeMath for uint256;
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(67)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |            balanceOf[_from] = balanceOf[_from].sub(_value);
    |            // Add the same to the recipient
  > |            balanceOf[_to] = balanceOf[_to].add(_value);
    |            emit Transfer(_from, _to, _value);
    |            // Asserts are used to use static analysis to find bugs in your code. They should never fail
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(122)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough
    |            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender
  > |            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply
    |           emit Burn(msg.sender, _value);
    |            return true;
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(199)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough
    |            require(_value <= allowance[_from][msg.sender]);    // Check allowance
  > |            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance
    |            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance
    |            totalSupply = totalSupply.sub(_value);                              // Update totalSupply
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(215)

[33mWarning[0m for UnrestrictedWrite in contract 'TokenERC20':
    |            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance
    |            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance
  > |            totalSupply = totalSupply.sub(_value);                              // Update totalSupply
    |          emit  Burn(_from, _value);
    |            return true;
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(217)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    |        }
    |    
  > |        function transferOwnership(address payable newOwner) onlyOwner public {
    |            owner = newOwner;
    |        }
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(60)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |    
    |        function transferOwnership(address payable newOwner) onlyOwner public {
  > |            owner = newOwner;
    |        }
    |    }
  at /unique_chucks/22/0x4835916193a4043253dea8fc6b2dfa520b158452.sol(61)