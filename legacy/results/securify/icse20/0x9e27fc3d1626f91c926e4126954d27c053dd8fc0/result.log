Processing contract: /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol:Syndicate
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[33mWarning[0m for TODAmount in contract 'Syndicate':
    |    uint256 owedWei = paymentWeiOwed(index);
    |    payment.weiPaid += owedWei;
  > |    payment.receiver.transfer(owedWei);
    |    emit PaymentUpdated(index);
    |  }
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(64)

[33mWarning[0m for TODReceiver in contract 'Syndicate':
    |    uint256 owedWei = paymentWeiOwed(index);
    |    payment.weiPaid += owedWei;
  > |    payment.receiver.transfer(owedWei);
    |    emit PaymentUpdated(index);
    |  }
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(64)

[31mViolation[0m for UnrestrictedWrite in contract 'Syndicate':
    |
    |/**
  > | * Syndicate
    | **/
    |
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(4)

[31mViolation[0m for UnrestrictedWrite in contract 'Syndicate':
    |    // Verify the time is non-zero
    |    require(_time > 0);
  > |    payments.push(Payment({
    |      sender: msg.sender,
    |      receiver: _receiver,
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(41)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |/// @notice This contract can be used to manipulate ownership of Ether across
    |/// time. Funds are linearly distributed over the time period to recipients.
  > |contract Syndicate {
    |
    |  struct Payment {
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |    uint256 forkIndex = payments.length - 1;
    |    paymentForks[forkIndex] = new uint256[](0);
  > |    paymentForks[index].push(forkIndex);
    |    emit PaymentUpdated(index);
    |    emit PaymentCreated(forkIndex);
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(119)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |
    |/**
  > | * Syndicate
    | **/
    |
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(4)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |/// @notice This contract can be used to manipulate ownership of Ether across
    |/// time. Funds are linearly distributed over the time period to recipients.
  > |contract Syndicate {
    |
    |  struct Payment {
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(11)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |    Payment storage payment = payments[index];
    |    uint256 owedWei = paymentWeiOwed(index);
  > |    payment.weiPaid += owedWei;
    |    payment.receiver.transfer(owedWei);
    |    emit PaymentUpdated(index);
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(63)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |    // payment at index
    |
  > |    payment.weiValue -= _weiValue;
    |
    |    // Now create the forked payment
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(104)

[33mWarning[0m for UnrestrictedWrite in contract 'Syndicate':
    |
    |    // Now create the forked payment
  > |    payments.push(Payment({
    |      sender: payment.receiver,
    |      receiver: _receiver,
  at /unique_chucks/23/0x9e27fc3d1626f91c926e4126954d27c053dd8fc0.sol(107)