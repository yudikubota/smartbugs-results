Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:BridgeCoin
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:BurnableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:ERC20
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:MintableToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:Ownable
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:StandardToken
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol:TransferFilter
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for LockedEther in contract 'BridgeCoin':
    |
    |
  > |contract BridgeCoin is MintableToken {
    |  string public constant name = "Bridge Coin"; // solium-disable-line uppercase
    |  string public constant symbol = "BRIDGE"; // solium-disable-line uppercase
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(362)

[31mViolation[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |        if (old != status) {
    |            if (status == true) {
  > |                mapAddressPass[targetAddress] = true;
    |                emit LogFilterPass(targetAddress, true);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(149)

[31mViolation[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |            }
    |            else {
  > |                delete mapAddressPass[targetAddress];
    |                emit LogFilterPass(targetAddress, false);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(153)

[31mViolation[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |          if (old != status) {
    |              if (status == true) {
  > |                  mapAddressBlock[targetAddress] = true;
    |                  emit LogFilterBlock(targetAddress, true);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |              }
    |              else {
  > |                  delete mapAddressBlock[targetAddress];
    |                  emit LogFilterBlock(targetAddress, false);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |
    |  function setTransferable(bool status) public onlyOwner {
  > |      isTransferable = status;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'BridgeCoin':
    |   */
    |  function finishMinting() canMint onlyOwner public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(355)

[31mViolation[0m for LockedEther in contract 'BurnableToken':
    |}
    |
  > |contract BurnableToken is StandardToken {
    |  event Burn(address indexed from, uint256 value);
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(292)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |        if (old != status) {
    |            if (status == true) {
  > |                mapAddressPass[targetAddress] = true;
    |                emit LogFilterPass(targetAddress, true);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(149)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |            }
    |            else {
  > |                delete mapAddressPass[targetAddress];
    |                emit LogFilterPass(targetAddress, false);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(153)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |          if (old != status) {
    |              if (status == true) {
  > |                  mapAddressBlock[targetAddress] = true;
    |                  emit LogFilterBlock(targetAddress, true);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'BurnableToken':
    |              }
    |              else {
  > |                  delete mapAddressBlock[targetAddress];
    |                  emit LogFilterBlock(targetAddress, false);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'BurnableToken':
    |
    |  function setTransferable(bool status) public onlyOwner {
  > |      isTransferable = status;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(129)

[31mViolation[0m for LockedEther in contract 'MintableToken':
    | */
    |
  > |contract MintableToken is BurnableToken {
    |  event Mint(address indexed to, uint256 amount);
    |  event MintFinished();
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(311)

[31mViolation[0m for UnrestrictedWrite in contract 'MintableToken':
    |        if (old != status) {
    |            if (status == true) {
  > |                mapAddressPass[targetAddress] = true;
    |                emit LogFilterPass(targetAddress, true);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(149)

[31mViolation[0m for UnrestrictedWrite in contract 'MintableToken':
    |            }
    |            else {
  > |                delete mapAddressPass[targetAddress];
    |                emit LogFilterPass(targetAddress, false);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(153)

[31mViolation[0m for UnrestrictedWrite in contract 'MintableToken':
    |          if (old != status) {
    |              if (status == true) {
  > |                  mapAddressBlock[targetAddress] = true;
    |                  emit LogFilterBlock(targetAddress, true);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'MintableToken':
    |              }
    |              else {
  > |                  delete mapAddressBlock[targetAddress];
    |                  emit LogFilterBlock(targetAddress, false);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |
    |  function setTransferable(bool status) public onlyOwner {
  > |      isTransferable = status;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(129)

[33mWarning[0m for UnrestrictedWrite in contract 'MintableToken':
    |   */
    |  function finishMinting() canMint onlyOwner public returns (bool) {
  > |    mintingFinished = true;
    |    emit MintFinished();
    |    return true;
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(355)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'Ownable':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[31mViolation[0m for LockedEther in contract 'StandardToken':
    | * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol
    | */
  > |contract StandardToken is ERC20, TransferFilter {
    |  using SafeMath for uint256;
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |        if (old != status) {
    |            if (status == true) {
  > |                mapAddressPass[targetAddress] = true;
    |                emit LogFilterPass(targetAddress, true);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(149)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |            }
    |            else {
  > |                delete mapAddressPass[targetAddress];
    |                emit LogFilterPass(targetAddress, false);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(153)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |          if (old != status) {
    |              if (status == true) {
  > |                  mapAddressBlock[targetAddress] = true;
    |                  emit LogFilterBlock(targetAddress, true);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'StandardToken':
    |              }
    |              else {
  > |                  delete mapAddressBlock[targetAddress];
    |                  emit LogFilterBlock(targetAddress, false);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    // SafeMath.sub will throw if there is not enough balance.
    |    balances[msg.sender] = balances[msg.sender].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    emit Transfer(msg.sender, _to, _value);
    |    return true;
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(231)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(_value <= allowed[_from][msg.sender]);
    |
  > |    balances[_from] = balances[_from].sub(_value);
    |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(259)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |    balances[_from] = balances[_from].sub(_value);
  > |    balances[_to] = balances[_to].add(_value);
    |    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    |    emit Transfer(_from, _to, _value);
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(260)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'StandardToken':
    |
    |  function setTransferable(bool status) public onlyOwner {
  > |      isTransferable = status;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(129)

[31mViolation[0m for MissingInputValidation in contract 'TransferFilter':
    |contract TransferFilter is Ownable {
    |  bool public isTransferable;
  > |  mapping( address => bool ) public mapAddressPass;
    |  mapping( address => bool ) public mapAddressBlock;
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(107)

[31mViolation[0m for MissingInputValidation in contract 'TransferFilter':
    |  bool public isTransferable;
    |  mapping( address => bool ) public mapAddressPass;
  > |  mapping( address => bool ) public mapAddressBlock;
    |
    |  event LogFilterPass(address indexed target, bool status);
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(108)

[31mViolation[0m for MissingInputValidation in contract 'TransferFilter':
    |  }
    |
  > |  function setTransferable(bool status) public onlyOwner {
    |      isTransferable = status;
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(128)

[31mViolation[0m for MissingInputValidation in contract 'TransferFilter':
    |  }
    |
  > |  function isInPassFilter(address user) public view returns (bool) {
    |    return mapAddressPass[user];
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(132)

[31mViolation[0m for MissingInputValidation in contract 'TransferFilter':
    |  }
    |
  > |  function isInBlockFilter(address user) public view returns (bool) {
    |    return mapAddressBlock[user];
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(136)

[33mWarning[0m for MissingInputValidation in contract 'TransferFilter':
    |  }
    |
  > |  function addressToPass(address[] memory target, bool status)
    |  public
    |  onlyOwner
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(140)

[33mWarning[0m for MissingInputValidation in contract 'TransferFilter':
    |  }
    |
  > |  function addressToBlock(address[] memory target, bool status)
    |  public
    |  onlyOwner
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(160)

[31mViolation[0m for UnrestrictedWrite in contract 'TransferFilter':
    |        if (old != status) {
    |            if (status == true) {
  > |                mapAddressPass[targetAddress] = true;
    |                emit LogFilterPass(targetAddress, true);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(149)

[31mViolation[0m for UnrestrictedWrite in contract 'TransferFilter':
    |            }
    |            else {
  > |                delete mapAddressPass[targetAddress];
    |                emit LogFilterPass(targetAddress, false);
    |            }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(153)

[31mViolation[0m for UnrestrictedWrite in contract 'TransferFilter':
    |          if (old != status) {
    |              if (status == true) {
  > |                  mapAddressBlock[targetAddress] = true;
    |                  emit LogFilterBlock(targetAddress, true);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(169)

[31mViolation[0m for UnrestrictedWrite in contract 'TransferFilter':
    |              }
    |              else {
  > |                  delete mapAddressBlock[targetAddress];
    |                  emit LogFilterBlock(targetAddress, false);
    |              }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(173)

[33mWarning[0m for UnrestrictedWrite in contract 'TransferFilter':
    |  function transferOwnership(address newOwner) public onlyOwner {
    |    require(newOwner != address(0));
  > |    delegate = newOwner;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(37)

[33mWarning[0m for UnrestrictedWrite in contract 'TransferFilter':
    |    require(msg.sender == delegate);
    |    emit OwnershipTransferred(owner, delegate);
  > |    owner = delegate;
    |    delegate = address(0);
    |  }
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(43)

[33mWarning[0m for UnrestrictedWrite in contract 'TransferFilter':
    |    emit OwnershipTransferred(owner, delegate);
    |    owner = delegate;
  > |    delegate = address(0);
    |  }
    |}
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(44)

[33mWarning[0m for UnrestrictedWrite in contract 'TransferFilter':
    |
    |  function setTransferable(bool status) public onlyOwner {
  > |      isTransferable = status;
    |  }
    |
  at /unique_chucks/45/0x65148200a17d1bb6a02a1f33db0ca922a24173d3.sol(129)