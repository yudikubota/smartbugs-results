{
  "contract": "0x1f41e42d0a9e3c0dd3ba15b527342783b43200a9",
  "tool": "smartcheck",
  "start": 1563504313.4274094,
  "end": 1563504319.7405863,
  "duration": 6.313176870346069,
  "analysis": [
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 3,
      "column": 0,
      "content": "contractProxy{addresspublicowner;addresspublictarget;eventProxyTargetSet(addresstarget);eventProxyOwnerChanged(address_owner);constructor()public{owner=msg.sender;}modifieronlyOwner(){require(msg.sender==owner);_;}functionsetTarget(address_target)publiconlyOwner{target=_target;emitProxyTargetSet(_target);}functionsetOwner(address_owner)publiconlyOwner{owner=_owner;emitProxyOwnerChanged(_owner);}function()payablepublic{address_impl=target;require(_impl!=address(0));assembly{letptr:=mload(0x40)calldatacopy(ptr,0,calldatasize)letresult:=delegatecall(gas,_impl,ptr,calldatasize,0,0)letsize:=returndatasizereturndatacopy(ptr,0,size)switchresultcase0{revert(ptr,size)}default{return(ptr,size)}}}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 21,
      "column": 2,
      "content": "functionsetTarget(address_target)publiconlyOwner{target=_target;emitProxyTargetSet(_target);}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 26,
      "column": 2,
      "content": "functionsetOwner(address_owner)publiconlyOwner{owner=_owner;emitProxyOwnerChanged(_owner);}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "91h3sa",
      "severity": 1,
      "line": 31,
      "column": 22,
      "content": "public"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 35,
      "column": 4,
      "content": "assembly{letptr:=mload(0x40)calldatacopy(ptr,0,calldatasize)letresult:=delegatecall(gas,_impl,ptr,calldatasize,0,0)letsize:=returndatasizereturndatacopy(ptr,0,size)switchresultcase0{revert(ptr,size)}default{return(ptr,size)}}"
    }
  ]
}