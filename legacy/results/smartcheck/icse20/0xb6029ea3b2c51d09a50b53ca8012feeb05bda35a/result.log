/unique_chucks/42/0xb6029ea3b2c51d09a50b53ca8012feeb05bda35a.sol
line 536:23 extraneous input '_data' expecting {',', ')'}
line 537:23 extraneous input '_signature' expecting {',', ')'}
line 581:38 extraneous input '_owners' expecting {',', ')'}
line 581:94 extraneous input 'data' expecting {',', ')'}
line 581:98 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 581:120 mismatched input ',' expecting {';', '='}
line 581:137 mismatched input ',' expecting {';', '='}
line 581:147 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 581:170 mismatched input ')' expecting {';', '='}
line 584:15 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 584:32 mismatched input '==' expecting {';', '='}
line 585:24 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 585:35 mismatched input '(' expecting {';', '='}
line 585:46 mismatched input '(' expecting ')'
line 585:72 mismatched input ',' expecting ')'
line 585:78 mismatched input ')' expecting {';', '='}
line 586:17 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 586:25 mismatched input ',' expecting {';', '='}
line 586:37 extraneous input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 586:41 mismatched input ',' expecting {';', '='}
line 586:47 mismatched input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 588:20 mismatched input '>' expecting ')'
line 591:25 mismatched input '(' expecting {';', '='}
line 591:33 mismatched input ',' expecting ')'
line 591:53 mismatched input ',' expecting {';', '='}
line 591:70 mismatched input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 593:4 extraneous input '}' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 112
column: 55
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 207
column: 54
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 524
column: 51
content: 0x20c13b0b

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 154
column: 8
content: modules[address(module)]=address(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 278
column: 8
content: owners[owner]=address(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 304
column: 8
content: owners[oldOwner]=address(0)

ruleId: SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE
patternId: b180ca
severity: 2
line: 78
column: 4
content: functiontransferToken(addresstoken,addressreceiver,uint256amount)internalreturns(booltransferred){bytesmemorydata=abi.encodeWithSignature("transfer(address,uint256)",receiver,amount);assembly{letsuccess:=call(sub(gas,10000),token,0,add(data,0x20),mload(data),0,0)letptr:=mload(0x40)returndatacopy(ptr,0,returndatasize)switchreturndatasizecase0{transferred:=success}case0x20{transferred:=iszero(or(iszero(success),iszero(mload(ptr))))}default{transferred:=0}}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 228
column: 8
content: for(uint256i=0;i<_owners.length;i++){addressowner=_owners[i];require(owner!=address(0)&&owner!=SENTINEL_OWNERS,"Invalid owner address provided");require(owners[owner]==address(0),"Duplicate owner address provided");owners[currentOwner]=owner;currentOwner=owner;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 183
column: 8
content: while(currentModule!=SENTINEL_MODULES){currentModule=modules[currentModule];moduleCount++;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 192
column: 8
content: while(currentModule!=SENTINEL_MODULES){array[moduleCount]=currentModule;currentModule=modules[currentModule];moduleCount++;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: k4o1l4
severity: 1
line: 352
column: 8
content: while(currentOwner!=SENTINEL_OWNERS){array[index]=currentOwner;currentOwner=owners[currentOwner];index++;}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 41
column: 4
content: functionexecuteCall(addressto,uint256value,bytesmemorydata,uint256txGas)internalreturns(boolsuccess){assembly{success:=call(txGas,to,value,add(data,0x20),mload(data),0,0)}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 51
column: 4
content: functionexecuteDelegateCall(addressto,bytesmemorydata,uint256txGas)internalreturns(boolsuccess){assembly{success:=delegatecall(txGas,to,add(data,0x20),mload(data),0,0)}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 61
column: 4
content: functionexecuteCreate(bytesmemorydata)internalreturns(addressnewContract){assembly{newContract:=create(0,add(data,0x20),mload(data))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 78
column: 4
content: functiontransferToken(addresstoken,addressreceiver,uint256amount)internalreturns(booltransferred){bytesmemorydata=abi.encodeWithSignature("transfer(address,uint256)",receiver,amount);assembly{letsuccess:=call(sub(gas,10000),token,0,add(data,0x20),mload(data),0,0)letptr:=mload(0x40)returndatacopy(ptr,0,returndatasize)switchreturndatasizecase0{transferred:=success}case0x20{transferred:=iszero(or(iszero(success),iszero(mload(ptr))))}default{transferred:=0}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 439
column: 4
content: functionsignatureSplit(bytesmemorysignatures,uint256pos)internalpurereturns(uint8v,bytes32r,bytes32s){assembly{letsignaturePos:=mul(0x41,pos)r:=mload(add(signatures,add(signaturePos,0x20)))s:=mload(add(signatures,add(signaturePos,0x40)))v:=and(mload(add(signatures,add(signaturePos,0x41))),0xff)}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 228
column: 8
content: for(uint256i=0;i<_owners.length;i++){addressowner=_owners[i];require(owner!=address(0)&&owner!=SENTINEL_OWNERS,"Invalid owner address provided");require(owners[owner]==address(0),"Duplicate owner address provided");owners[currentOwner]=owner;currentOwner=owner;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 183
column: 14
content: currentModule!=SENTINEL_MODULES

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 192
column: 14
content: currentModule!=SENTINEL_MODULES

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 352
column: 14
content: currentOwner!=SENTINEL_OWNERS

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 11
column: 0
content: contractEtherPaymentFallback{function()externalpayable{}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 544
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 439
column: 4
content: functionsignatureSplit(bytesmemorysignatures,uint256pos)internalpurereturns(uint8v,bytes32r,bytes32s){assembly{letsignaturePos:=mul(0x41,pos)r:=mload(add(signatures,add(signaturePos,0x20)))s:=mload(add(signatures,add(signaturePos,0x40)))v:=and(mload(add(signatures,add(signaturePos,0x41))),0xff)}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 442
column: 16
content: (uint8v,bytes32r,bytes32s)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 46
column: 8
content: assembly{success:=call(txGas,to,value,add(data,0x20),mload(data),0,0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 56
column: 8
content: assembly{success:=delegatecall(txGas,to,add(data,0x20),mload(data),0,0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 66
column: 8
content: assembly{newContract:=create(0,add(data,0x20),mload(data))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 88
column: 8
content: assembly{letsuccess:=call(sub(gas,10000),token,0,add(data,0x20),mload(data),0,0)letptr:=mload(0x40)returndatacopy(ptr,0,returndatasize)switchreturndatasizecase0{transferred:=success}case0x20{transferred:=iszero(or(iszero(success),iszero(mload(ptr))))}default{transferred:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 448
column: 8
content: assembly{letsignaturePos:=mul(0x41,pos)r:=mload(add(signatures,add(signaturePos,0x20)))s:=mload(add(signatures,add(signaturePos,0x40)))v:=and(mload(add(signatures,add(signaturePos,0x41))),0xff)}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 581
column: 4
content: functionsetup(address[]calldata_owners,uint256_threshold,addressto,bytescalldata<missing ')'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 210
column: 4
content: uint256ownerCount;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 380
column: 4
content: addressmasterCopy;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 581
column: 94
content: data,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 581
column: 100
content: addresspaymentToken,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 581
column: 122
content: uint256payment,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 581
column: 139
content: addresspayablepaymentReceiver)external{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 584
column: 8
content: require(domainSeparator==0,"Domain Separator already set!");

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 585
column: 8
content: domainSeparator=keccak256

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 585
column: 35
content: (abi.encode<missing ';'>

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 585
column: 46
content: (DOMAIN_SEPARATOR_TYPEHASH,this));

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 586
column: 8
content: setupSafe(_owners,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 586
column: 27
content: _threshold,to,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 586
column: 43
content: data);if

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 588
column: 11
content: (payment>0){handlePayment

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 591
column: 25
content: (payment,0,1,paymentToken,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 591
column: 55
content: paymentReceiver);

SOLIDITY_VISIBILITY :17
SOLIDITY_SAFEMATH :1
SOLIDITY_ERC20_FUNCTIONS_ALWAYS_RETURN_FALSE :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :5
SOLIDITY_EXTRA_GAS_IN_LOOPS :4
SOLIDITY_ADDRESS_HARDCODED :6
SOLIDITY_GAS_LIMIT_IN_LOOPS :4
SOLIDITY_USING_INLINE_ASSEMBLY :5
SOLIDITY_SHOULD_RETURN_STRUCT :1
SOLIDITY_SHOULD_NOT_BE_PURE :1