{
  "contract": "0x86350dff7382ca9d3fa1bc5645801b8e5f0a839a",
  "tool": "smartcheck",
  "start": 1563563863.5903444,
  "end": 1563563876.9294603,
  "duration": 13.339115858078003,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 529,
      "column": 51,
      "content": "0xff"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 866,
      "column": 19,
      "content": "(address(0))"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 886,
      "column": 12,
      "content": "returnaddress(0)"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 1130,
      "column": 12,
      "content": "sl.addr=address(0)"
    },
    {
      "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
      "patternId": "872bdd",
      "severity": 1,
      "line": 387,
      "column": 8,
      "content": "accounts.length=SafeMath.add(accounts.length,bulkSize)"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 240,
      "column": 8,
      "content": "for(uinti=0;i<proof.length;i++){uint256bit=k%2;k=k/2;if(bit==0)hash=combinedHash(hash,proof[i]);elsehash=combinedHash(proof[i],hash);}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 661,
      "column": 8,
      "content": "for(uinti=2;i<payData.length;i+=bytesPerId){assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "58bdd3",
      "severity": 1,
      "line": 604,
      "column": 4,
      "content": "functiongetDataAtIndex(bytesmemorydata,uintindex)publicpurereturns(uint64amount,uint32payIndex){require(data.length>0,\"no data provided\");require(data.length%12==0,\"wrong data format, data length should be multiple of 12\");uintmod1=2**64;uintmod2=2**32;uinti=SafeMath.mul(index,12);require(i<=SafeMath.sub(data.length,12),\"index * 12 must be less or equal than (data.length - 12)\");assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 240,
      "column": 8,
      "content": "for(uinti=0;i<proof.length;i++){uint256bit=k%2;k=k/2;if(bit==0)hash=combinedHash(hash,proof[i]);elsehash=combinedHash(proof[i],hash);}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 5,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 572,
      "column": 4,
      "content": "functiongetDataSum(bytesmemorydata)publicpurereturns(uintsum){require(data.length>0,\"no data provided\");require(data.length%12==0,\"wrong data format, data length should be multiple of 12\");uintn=SafeMath.div(data.length,12);uintmodulus=2**64;sum=0;for(uinti=0;i<n;i++){assembly{letamount:=mod(mload(add(data,add(8,mul(i,12)))),modulus)letresult:=add(sum,amount)switchor(gt(result,modulus),eq(result,modulus))case1{revert(0,0)}default{sum:=result}}}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 604,
      "column": 4,
      "content": "functiongetDataAtIndex(bytesmemorydata,uintindex)publicpurereturns(uint64amount,uint32payIndex){require(data.length>0,\"no data provided\");require(data.length%12==0,\"wrong data format, data length should be multiple of 12\");uintmod1=2**64;uintmod2=2**32;uinti=SafeMath.mul(index,12);require(i<=SafeMath.sub(data.length,12),\"index * 12 must be less or equal than (data.length - 12)\");assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 654,
      "column": 4,
      "content": "functiongetPayDataSum(bytesmemorypayData,uintid,uintamount)publicpurereturns(uintsum){uintbytesPerId=getBytesPerId(payData);uintmodulus=1<<SafeMath.mul(bytesPerId,8);uintcurrentId=0;sum=0;for(uinti=2;i<payData.length;i+=bytesPerId){assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 856,
      "column": 4,
      "content": "functionrecoverHelper(bytes32hash,bytessig)publicpurereturns(address){bytesmemoryprefix=\"\\x19Ethereum Signed Message:\\n32\";bytes32prefixedHash=keccak256(abi.encodePacked(prefix,hash));bytes32r;bytes32s;uint8v;if(sig.length!=65){return(address(0));}assembly{r:=mload(add(sig,32))s:=mload(add(sig,64))v:=byte(0,mload(add(sig,96)))}if(v<27){v+=27;}if(v!=27&&v!=28){returnaddress(0);}returnecrecover(prefixedHash,v,r,s);}"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 627,
      "column": 27,
      "content": "bytespayData"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 684,
      "column": 29,
      "content": "bytespayData"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 856,
      "column": 41,
      "content": "bytessig"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 586,
      "column": 12,
      "content": "assembly{letamount:=mod(mload(add(data,add(8,mul(i,12)))),modulus)letresult:=add(sum,amount)switchor(gt(result,modulus),eq(result,modulus))case1{revert(0,0)}default{sum:=result}}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 615,
      "column": 8,
      "content": "assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 666,
      "column": 12,
      "content": "assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 873,
      "column": 8,
      "content": "assembly{r:=mload(add(sig,32))s:=mload(add(sig,64))v:=byte(0,mload(add(sig,96)))}"
    }
  ]
}