/unique_chucks/44/0x7e36c58efae3bf2b0123c8b01396234daf133ee1.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 403
column: 19
content: 0xffffffffffffffffffffffffffffffff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 405
column: 40
content: 0x100000000000000000000000000000000

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 407
column: 19
content: 0xffffffffffffffff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 409
column: 40
content: 0x10000000000000000

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 411
column: 19
content: 0xffffffff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 413
column: 40
content: 0x100000000

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 415
column: 19
content: 0xffff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 417
column: 40
content: 0x10000

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 419
column: 19
content: 0xff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 481
column: 20
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 483
column: 26
content: 0xE0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 485
column: 26
content: 0xF0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 487
column: 26
content: 0xF8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 489
column: 26
content: 0xFC

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 574
column: 16
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 576
column: 22
content: 0xE0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 578
column: 22
content: 0xF0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 625
column: 16
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 628
column: 22
content: 0xE0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 629
column: 22
content: 0x1F

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 631
column: 22
content: 0xF0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 632
column: 22
content: 0x0F

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 635
column: 22
content: 0x07

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 646
column: 35
content: 0xFF

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 647
column: 20
content: 0xC0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 647
column: 28
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 651
column: 36
content: 0x3F

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: c67a09
severity: 1
line: 1139
column: 150
content: 0x0

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1015
column: 8
content: for(uinti=0;i<parts.length;i++)length+=parts[i]._len;

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1022
column: 8
content: for(i=0;i<parts.length;i++){memcpy(retptr,parts[i]._ptr,parts[i]._len);retptr+=parts[i]._len;if(i<parts.length-1){memcpy(retptr,self._ptr,self._len);retptr+=self._len;}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 82
column: 4
content: functioncreateTemplate(stringcontent)publicreturns(uint256){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 95
column: 4
content: functioncreateTemplateAndAskQuestion(stringcontent,stringquestion,addressarbitrator,uint32timeout,uint32opening_ts,uint256nonce)publicpayablereturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 112
column: 4
content: functionaskQuestion(uint256template_id,stringquestion,addressarbitrator,uint32timeout,uint32opening_ts,uint256nonce)publicpayablereturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 185
column: 4
content: functionisFinalized(bytes32question_id)viewpublicreturns(bool){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 192
column: 4
content: functiongetFinalAnswer(bytes32question_id)externalviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 199
column: 4
content: functionresultFor(bytes32question_id)externalviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 212
column: 4
content: functiongetFinalAnswerIfMatches(bytes32question_id,bytes32content_hash,addressarbitrator,uint32min_timeout,uint256min_bond)externalviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 258
column: 4
content: functiongetContentHash(bytes32question_id)publicviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 264
column: 4
content: functiongetArbitrator(bytes32question_id)publicviewreturns(address){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 270
column: 4
content: functiongetOpeningTS(bytes32question_id)publicviewreturns(uint32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 276
column: 4
content: functiongetTimeout(bytes32question_id)publicviewreturns(uint32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 282
column: 4
content: functiongetFinalizeTS(bytes32question_id)publicviewreturns(uint32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 288
column: 4
content: functionisPendingArbitration(bytes32question_id)publicviewreturns(bool){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 295
column: 4
content: functiongetBounty(bytes32question_id)publicviewreturns(uint256){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 301
column: 4
content: functiongetBestAnswer(bytes32question_id)publicviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 308
column: 4
content: functiongetHistoryHash(bytes32question_id)publicviewreturns(bytes32){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 314
column: 4
content: functiongetBond(bytes32question_id)publicviewreturns(uint256){}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 1177
column: 4
content: function_verifyInput(bytes32question_id,bytes32last_history_hash,bytes32last_answer_or_commitment_id,uint256last_bond,addresslast_answerer,boolis_commitment)internalviewreturns(bool,bytes32){require(realitio.isPendingArbitration(question_id),"The question must be pending arbitration in realitio");bytes32history_hash=realitio.getHistoryHash(question_id);require(history_hash==keccak256(last_history_hash,last_answer_or_commitment_id,last_bond,last_answerer,is_commitment),"The history parameters supplied must match the history hash in the realitio contract");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 47acc2
severity: 1
line: 1327
column: 4
content: functionrequestArbitration(bytes32question_id,uint256max_previous)onlyInitializedexternalpayablereturns(bool){require(msg.value>=dispute_fee,"The payment must cover the fee");realitio.notifyOfArbitrationRequest(question_id,msg.sender,max_previous);realitio_questions[question_id].bounty=msg.value;realitio_questions[question_id].disputer=msg.sender;LogRequestArbitration(question_id,msg.value,msg.sender,0);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 604
column: 4
content: functionnextRune(slicememoryself)internalpurereturns(slicememoryret){nextRune(self,ret);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 662
column: 4
content: functionkeccak(slicememoryself)internalpurereturns(bytes32ret){assembly{ret:=keccak256(mload(add(self,32)),mload(self))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 922
column: 4
content: functionsplit(slicememoryself,slicememoryneedle)internalpurereturns(slicememorytoken){split(self,needle,token);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 958
column: 4
content: functionrsplit(slicememoryself,slicememoryneedle)internalpurereturns(slicememorytoken){rsplit(self,needle,token);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 968
column: 4
content: functioncount(slicememoryself,slicememoryneedle)internalpurereturns(uintcnt){uintptr=findPtr(self._len,self._ptr,needle._len,needle._ptr)+needle._len;while(ptr<=self._ptr+self._len){cnt++;ptr=findPtr(self._len-(ptr-self._ptr),ptr,needle._len,needle._ptr)+needle._len;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1015
column: 8
content: for(uinti=0;i<parts.length;i++)length+=parts[i]._len;

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1022
column: 8
content: for(i=0;i<parts.length;i++){memcpy(retptr,parts[i]._ptr,parts[i]._len);retptr+=parts[i]._len;if(i<parts.length-1){memcpy(retptr,self._ptr,self._len);retptr+=self._len;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 796
column: 23
content: ptrdata!=needledata

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 836
column: 23
content: ptrdata!=needledata

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 848
column: 23
content: ptr>=selfptr

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 970
column: 15
content: ptr<=self._ptr+self._len

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 32
column: 0
content: contractIRealitioisIBalanceHolder{structQuestion{bytes32content_hash;addressarbitrator;uint32opening_ts;uint32timeout;uint32finalize_ts;boolis_pending_arbitration;uint256bounty;bytes32best_answer;bytes32history_hash;uint256bond;}structCommitment{uint32reveal_ts;boolis_revealed;bytes32revealed_answer;}structClaim{addresspayee;uint256last_bond;uint256queued_funds;}uint256nextTemplateID=0;mapping(uint256=>uint256)publictemplates;mapping(uint256=>bytes32)publictemplate_hashes;mapping(bytes32=>Question)publicquestions;mapping(bytes32=>Claim)publicquestion_claims;mapping(bytes32=>Commitment)publiccommitments;mapping(address=>uint256)publicarbitrator_question_fees;functionsetQuestionFee(uint256fee)external{}functioncreateTemplate(stringcontent)publicreturns(uint256){}functioncreateTemplateAndAskQuestion(stringcontent,stringquestion,addressarbitrator,uint32timeout,uint32opening_ts,uint256nonce)publicpayablereturns(bytes32){}functionaskQuestion(uint256template_id,stringquestion,addressarbitrator,uint32timeout,uint32opening_ts,uint256nonce)publicpayablereturns(bytes32){}functionfundAnswerBounty(bytes32question_id)externalpayable{}functionsubmitAnswer(bytes32question_id,bytes32answer,uint256max_previous)externalpayable{}functionsubmitAnswerCommitment(bytes32question_id,bytes32answer_hash,uint256max_previous,address_answerer)externalpayable{}functionsubmitAnswerReveal(bytes32question_id,bytes32answer,uint256nonce,uint256bond)external{}functionnotifyOfArbitrationRequest(bytes32question_id,addressrequester,uint256max_previous)external{}functionsubmitAnswerByArbitrator(bytes32question_id,bytes32answer,addressanswerer)external{}functionisFinalized(bytes32question_id)viewpublicreturns(bool){}functiongetFinalAnswer(bytes32question_id)externalviewreturns(bytes32){}functionresultFor(bytes32question_id)externalviewreturns(bytes32){}functiongetFinalAnswerIfMatches(bytes32question_id,bytes32content_hash,addressarbitrator,uint32min_timeout,uint256min_bond)externalviewreturns(bytes32){}functionclaimWinnings(bytes32question_id,bytes32[]history_hashes,address[]addrs,uint256[]bonds,bytes32[]answers)public{}functionclaimMultipleAndWithdrawBalance(bytes32[]question_ids,uint256[]lengths,bytes32[]hist_hashes,address[]addrs,uint256[]bonds,bytes32[]answers)public{}functiongetContentHash(bytes32question_id)publicviewreturns(bytes32){}functiongetArbitrator(bytes32question_id)publicviewreturns(address){}functiongetOpeningTS(bytes32question_id)publicviewreturns(uint32){}functiongetTimeout(bytes32question_id)publicviewreturns(uint32){}functiongetFinalizeTS(bytes32question_id)publicviewreturns(uint32){}functionisPendingArbitration(bytes32question_id)publicviewreturns(bool){}functiongetBounty(bytes32question_id)publicviewreturns(uint256){}functiongetBestAnswer(bytes32question_id)publicviewreturns(bytes32){}functiongetHistoryHash(bytes32question_id)publicviewreturns(bytes32){}functiongetBond(bytes32question_id)publicviewreturns(uint256){}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 1043
column: 0
content: contractIUniverse{functiongetWinningChildUniverse()publicviewreturns(IUniverse);functioncreateYesNoMarket(uint256_endTime,uint256_feePerEthInWei,ICash_denominationToken,address_designatedReporterAddress,bytes32_topic,string_description,string_extraInfo)publicpayablereturns(IMarket_newMarket);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 362
column: 4
content: functionmemcpy(uintdest,uintsrc,uintlen)privatepure{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 386
column: 4
content: functiontoSlice(stringmemoryself)internalpurereturns(slicememory){uintptr;assembly{ptr:=add(self,0x20)}returnslice(bytes(self).length,ptr);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 432
column: 4
content: functiontoSliceB32(bytes32self)internalpurereturns(slicememoryret){assembly{letptr:=mload(0x40)mstore(0x40,add(ptr,0x20))mstore(ptr,self)mstore(add(ret,0x20),ptr)}ret._len=len(self);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 457
column: 4
content: functiontoString(slicememoryself)internalpurereturns(stringmemory){stringmemoryret=newstring(self._len);uintretptr;assembly{retptr:=add(ret,32)}memcpy(retptr,self._ptr,self._len);returnret;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 474
column: 4
content: functionlen(slicememoryself)internalpurereturns(uintl){uintptr=self._ptr-31;uintend=ptr+self._len;for(l=0;ptr<end;l++){uint8b;assembly{b:=and(mload(ptr),0xFF)}if(b<0x80){ptr+=1;}elseif(b<0xE0){ptr+=2;}elseif(b<0xF0){ptr+=3;}elseif(b<0xF8){ptr+=4;}elseif(b<0xFC){ptr+=5;}else{ptr+=6;}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 515
column: 4
content: functioncompare(slicememoryself,slicememoryother)internalpurereturns(int){uintshortest=self._len;if(other._len<self._len)shortest=other._len;uintselfptr=self._ptr;uintotherptr=other._ptr;for(uintidx=0;idx<shortest;idx+=32){uinta;uintb;assembly{a:=mload(selfptr)b:=mload(otherptr)}if(a!=b){uint256mask=uint256(-1);if(shortest<32){mask=~(2**(8*(32-shortest+idx))-1);}uint256diff=(a&mask)-(b&mask);if(diff!=0)returnint(diff);}selfptr+=32;otherptr+=32;}returnint(self._len)-int(other._len);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 562
column: 4
content: functionnextRune(slicememoryself,slicememoryrune)internalpurereturns(slicememory){rune._ptr=self._ptr;if(self._len==0){rune._len=0;returnrune;}uintl;uintb;assembly{b:=and(mload(sub(mload(add(self,32)),31)),0xFF)}if(b<0x80){l=1;}elseif(b<0xE0){l=2;}elseif(b<0xF0){l=3;}else{l=4;}if(l>self._len){rune._len=self._len;self._ptr+=self._len;self._len=0;returnrune;}self._ptr+=l;self._len-=l;rune._len=l;returnrune;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 613
column: 4
content: functionord(slicememoryself)internalpurereturns(uintret){if(self._len==0){return0;}uintword;uintlength;uintdivisor=2**248;assembly{word:=mload(mload(add(self,32)))}uintb=word/divisor;if(b<0x80){ret=b;length=1;}elseif(b<0xE0){ret=b&0x1F;length=2;}elseif(b<0xF0){ret=b&0x0F;length=3;}else{ret=b&0x07;length=4;}if(length>self._len){return0;}for(uinti=1;i<length;i++){divisor=divisor/256;b=(word/divisor)&0xFF;if(b&0xC0!=0x80){return0;}ret=(ret*64)|(b&0x3F);}returnret;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 662
column: 4
content: functionkeccak(slicememoryself)internalpurereturns(bytes32ret){assembly{ret:=keccak256(mload(add(self,32)),mload(self))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 674
column: 4
content: functionstartsWith(slicememoryself,slicememoryneedle)internalpurereturns(bool){if(self._len<needle._len){returnfalse;}if(self._ptr==needle._ptr){returntrue;}boolequal;assembly{letlength:=mload(needle)letselfptr:=mload(add(self,0x20))letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}returnequal;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 700
column: 4
content: functionbeyond(slicememoryself,slicememoryneedle)internalpurereturns(slicememory){if(self._len<needle._len){returnself;}boolequal=true;if(self._ptr!=needle._ptr){assembly{letlength:=mload(needle)letselfptr:=mload(add(self,0x20))letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}}if(equal){self._len-=needle._len;self._ptr+=needle._len;}returnself;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 729
column: 4
content: functionendsWith(slicememoryself,slicememoryneedle)internalpurereturns(bool){if(self._len<needle._len){returnfalse;}uintselfptr=self._ptr+self._len-needle._len;if(selfptr==needle._ptr){returntrue;}boolequal;assembly{letlength:=mload(needle)letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}returnequal;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 757
column: 4
content: functionuntil(slicememoryself,slicememoryneedle)internalpurereturns(slicememory){if(self._len<needle._len){returnself;}uintselfptr=self._ptr+self._len-needle._len;boolequal=true;if(selfptr!=needle._ptr){assembly{letlength:=mload(needle)letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}}if(equal){self._len-=needle._len;}returnself;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 781
column: 4
content: functionfindPtr(uintselflen,uintselfptr,uintneedlelen,uintneedleptr)privatepurereturns(uint){uintptr=selfptr;uintidx;if(needlelen<=selflen){if(needlelen<=32){bytes32mask=bytes32(~(2**(8*(32-needlelen))-1));bytes32needledata;assembly{needledata:=and(mload(needleptr),mask)}uintend=selfptr+selflen-needlelen;bytes32ptrdata;assembly{ptrdata:=and(mload(ptr),mask)}while(ptrdata!=needledata){if(ptr>=end)returnselfptr+selflen;ptr++;assembly{ptrdata:=and(mload(ptr),mask)}}returnptr;}else{bytes32hash;assembly{hash:=keccak256(needleptr,needlelen)}for(idx=0;idx<=selflen-needlelen;idx++){bytes32testHash;assembly{testHash:=keccak256(ptr,needlelen)}if(hash==testHash)returnptr;ptr+=1;}}}returnselfptr+selflen;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 822
column: 4
content: functionrfindPtr(uintselflen,uintselfptr,uintneedlelen,uintneedleptr)privatepurereturns(uint){uintptr;if(needlelen<=selflen){if(needlelen<=32){bytes32mask=bytes32(~(2**(8*(32-needlelen))-1));bytes32needledata;assembly{needledata:=and(mload(needleptr),mask)}ptr=selfptr+selflen-needlelen;bytes32ptrdata;assembly{ptrdata:=and(mload(ptr),mask)}while(ptrdata!=needledata){if(ptr<=selfptr)returnselfptr;ptr--;assembly{ptrdata:=and(mload(ptr),mask)}}returnptr+needlelen;}else{bytes32hash;assembly{hash:=keccak256(needleptr,needlelen)}ptr=selfptr+(selflen-needlelen);while(ptr>=selfptr){bytes32testHash;assembly{testHash:=keccak256(ptr,needlelen)}if(hash==testHash)returnptr+needlelen;ptr-=1;}}}returnselfptr;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 993
column: 4
content: functionconcat(slicememoryself,slicememoryother)internalpurereturns(stringmemory){stringmemoryret=newstring(self._len+other._len);uintretptr;assembly{retptr:=add(ret,32)}memcpy(retptr,self._ptr,self._len);memcpy(retptr+self._len,other._ptr,other._len);returnret;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1010
column: 4
content: functionjoin(slicememoryself,slice[]memoryparts)internalpurereturns(stringmemory){if(parts.length==0)return"";uintlength=self._len*(parts.length-1);for(uinti=0;i<parts.length;i++)length+=parts[i]._len;stringmemoryret=newstring(length);uintretptr;assembly{retptr:=add(ret,32)}for(i=0;i<parts.length;i++){memcpy(retptr,parts[i]._ptr,parts[i]._len);retptr+=parts[i]._len;if(i<parts.length-1){memcpy(retptr,self._ptr,self._len);retptr+=self._len;}}returnret;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 1180
column: 28
content: (bool,bytes32)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 1201
column: 28
content: (bool,bytes32)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 1165
column: 8
content: _callAugurMarketCreate(question_id,question,designated_reporter)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 1159
column: 30
content: keccak256(keccak256(template_id,opening_ts,question),this,timeout,asker,nonce)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 1159
column: 40
content: keccak256(template_id,opening_ts,question)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 1184
column: 32
content: keccak256(last_history_hash,last_answer_or_commitment_id,last_bond,last_answerer,is_commitment)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 82
column: 28
content: stringcontent

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 96
column: 8
content: stringcontent

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 97
column: 8
content: stringquestion

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 112
column: 46
content: stringquestion

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 235
column: 8
content: bytes32[]history_hashes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 235
column: 34
content: address[]addrs

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 235
column: 51
content: uint256[]bonds

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 235
column: 68
content: bytes32[]answers

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 250
column: 8
content: bytes32[]question_ids

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 250
column: 32
content: uint256[]lengths

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 251
column: 8
content: bytes32[]hist_hashes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 251
column: 31
content: address[]addrs

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 251
column: 48
content: uint256[]bonds

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 251
column: 65
content: bytes32[]answers

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1045
column: 152
content: string_description

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1045
column: 173
content: string_extraInfo

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1132
column: 27
content: stringq

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1133
column: 27
content: string

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1137
column: 57
content: stringquestion

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 365
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 374
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 388
column: 8
content: assembly{ptr:=add(self,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 434
column: 8
content: assembly{letptr:=mload(0x40)mstore(0x40,add(ptr,0x20))mstore(ptr,self)mstore(add(ret,0x20),ptr)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 460
column: 8
content: assembly{retptr:=add(ret,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 480
column: 12
content: assembly{b:=and(mload(ptr),0xFF)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 525
column: 12
content: assembly{a:=mload(selfptr)b:=mload(otherptr)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 573
column: 8
content: assembly{b:=and(mload(sub(mload(add(self,32)),31)),0xFF)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 623
column: 8
content: assembly{word:=mload(mload(add(self,32)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 663
column: 8
content: assembly{ret:=keccak256(mload(add(self,32)),mload(self))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 684
column: 8
content: assembly{letlength:=mload(needle)letselfptr:=mload(add(self,0x20))letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 707
column: 12
content: assembly{letlength:=mload(needle)letselfptr:=mload(add(self,0x20))letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 741
column: 8
content: assembly{letlength:=mload(needle)letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 765
column: 12
content: assembly{letlength:=mload(needle)letneedleptr:=mload(add(needle,0x20))equal:=eq(keccak256(selfptr,length),keccak256(needleptr,length))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 790
column: 16
content: assembly{needledata:=and(mload(needleptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 794
column: 16
content: assembly{ptrdata:=and(mload(ptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 800
column: 20
content: assembly{ptrdata:=and(mload(ptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 806
column: 16
content: assembly{hash:=keccak256(needleptr,needlelen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 810
column: 20
content: assembly{testHash:=keccak256(ptr,needlelen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 830
column: 16
content: assembly{needledata:=and(mload(needleptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 834
column: 16
content: assembly{ptrdata:=and(mload(ptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 840
column: 20
content: assembly{ptrdata:=and(mload(ptr),mask)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 846
column: 16
content: assembly{hash:=keccak256(needleptr,needlelen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 850
column: 20
content: assembly{testHash:=keccak256(ptr,needlelen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 996
column: 8
content: assembly{retptr:=add(ret,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1020
column: 8
content: assembly{retptr:=add(ret,32)}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 62
column: 4
content: uint256nextTemplateID=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1055
column: 4
content: uint256dispute_fee;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1060
column: 4
content: bytes32constantREALITIO_INVALID=0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1061
column: 4
content: bytes32constantREALITIO_YES=0x0000000000000000000000000000000000000000000000000000000000000001;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1062
column: 4
content: bytes32constantREALITIO_NO=0x0000000000000000000000000000000000000000000000000000000000000000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1063
column: 4
content: uint256constantAUGUR_YES_INDEX=1;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1064
column: 4
content: uint256constantAUGUR_NO_INDEX=0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1065
column: 4
content: stringconstantREALITIO_DELIMITER='␟';

SOLIDITY_VISIBILITY :8
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :2
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :24
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :28
SOLIDITY_UPGRADE_TO_050 :22
SOLIDITY_GAS_LIMIT_IN_LOOPS :6
SOLIDITY_USING_INLINE_ASSEMBLY :26
SOLIDITY_UNCHECKED_CALL :1
SOLIDITY_SHOULD_RETURN_STRUCT :2
SOLIDITY_SHOULD_NOT_BE_PURE :17