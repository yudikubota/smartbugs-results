/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 153
column: 7
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 154
column: 7
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 168
column: 22
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 13
column: 10
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 77
column: 58
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 79
column: 47
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 101
column: 6
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 111
column: 33
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 152
column: 2
content: functioncheckDeck(uintgameId,uint8[]deck,bytes32seed)constantreturns(boolcorrect){if(sha3(seed)!=games[gameId].seed)returnfalse;if(sha3(convertToBytes(deck),seed)!=games[gameId].deck)returnfalse;returntrue;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 167
column: 2
content: functioncheckNumCards(uintgameId,uint8numCards,uint8v,bytes32r,bytes32s)constantreturns(boolcorrect){bytes32msgHash=sha3(gameId,numCards);returnecrecover(msgHash,v,r,s)==signer;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 176
column: 2
content: functiondetermineOutcome(uintgameId,uint8[]cards,uint8numCards)constantreturns(uintwin){uint8playerValue=getPlayerValue(cards,numCards);if(playerValue>21)return0;var(dealerValue,dealerBJ)=getDealerValue(cards,numCards);if(playerValue==21&&numCards==2&&!dealerBJ){if(isSuited(cards[0],cards[2]))returngames[gameId].bet*3;elsereturngames[gameId].bet*5/2;}elseif(playerValue==21&&numCards==5)returngames[gameId].bet*2;elseif(playerValue>dealerValue||dealerValue>21)returngames[gameId].bet*2;elseif(playerValue==dealerValue)returngames[gameId].bet;elsereturn0;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 208
column: 2
content: functiongetPlayerValue(uint8[]cards,uint8numCards)constantinternalreturns(uint8playerValue){uint8numAces;uint8card;for(uint8i=0;i<numCards+2;i++){if(i!=1&&i!=3){card=cards[i]%13;playerValue+=cardValues[card];if(card==0)numAces++;}}while(numAces>0&&playerValue>21){playerValue-=10;numAces--;}}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 233
column: 2
content: functiongetDealerValue(uint8[]cards,uint8numCards)constantinternalreturns(uint8dealerValue,boolbj){uint8card=cards[1]%13;uint8card2=cards[3]%13;dealerValue=cardValues[card]+cardValues[card2];uint8numAces;if(card==0)numAces++;if(card2==0)numAces++;if(dealerValue>21){dealerValue-=10;numAces--;}elseif(dealerValue==21){return(21,true);}uint8i;while(dealerValue<17){card=cards[numCards+i+2]%13;dealerValue+=cardValues[card];if(card==0)numAces++;if(dealerValue>21&&numAces>0){dealerValue-=10;numAces--;}i++;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 160
column: 4
content: for(uint8i=0;i<byteArray.length;i++)b[i]=byte(byteArray[i]);

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 208
column: 2
content: functiongetPlayerValue(uint8[]cards,uint8numCards)constantinternalreturns(uint8playerValue){uint8numAces;uint8card;for(uint8i=0;i<numCards+2;i++){if(i!=1&&i!=3){card=cards[i]%13;playerValue+=cardValues[card];if(card==0)numAces++;}}while(numAces>0&&playerValue>21){playerValue-=10;numAces--;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 160
column: 4
content: for(uint8i=0;i<byteArray.length;i++)b[i]=byte(byteArray[i]);

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 221
column: 11
content: numAces>0&&playerValue>21

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 280
column: 2
content: functionsetSigner(addresssignerAddress)onlyOwner{signer=signerAddress;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 285
column: 2
content: functionsetMinimumBet(uintnewMin)onlyOwner{minimumBet=newMin;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 290
column: 2
content: functionsetMaximumBet(uintnewMax)onlyOwner{minimumBet=newMax;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 7
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 12
column: 6
content: if(msg.sender!=owner)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 77
column: 4
content: if(msg.value<minimumBet||msg.value>maximumBet)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 79
column: 4
content: if(msg.value*3>address(this).balance)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 100
column: 4
content: if(win>0&&!msg.sender.send(win)){throw;}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 111
column: 4
content: if(games[id].player!=0x0)throw;

ruleId: SOLIDITY_SEND
patternId: 430636
severity: 1
line: 100
column: 28
content: send(win)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 233
column: 82
content: (uint8dealerValue,boolbj)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 119
column: 31
content: uint8[]deck

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 208
column: 26
content: uint8[]cards

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 233
column: 26
content: uint8[]cards

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 441gim
severity: 1
line: 120
column: 4
content: Gamegame=games[gameId]

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 16
column: 2
content: functionowned(){owner=msg.sender;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 17
column: 2
content: functionchangeOwner(addressnewOwner)onlyOwner{owner=newOwner;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 23
column: 2
content: functionclose()onlyOwner{selfdestruct(owner);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 64
column: 2
content: functionblackjack(uintminBet,uintmaxBet,addresssignerAddress)payable{minimumBet=minBet;maximumBet=maxBet;signer=signerAddress;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 75
column: 2
content: functioninitGame(uintid,bytes32deck,bytes32srvSeed,bytes32cSeed)payable{if(msg.value<minimumBet||msg.value>maximumBet)throw;if(msg.value*3>address(this).balance)throw;_initGame(id,deck,srvSeed,cSeed,msg.value);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 86
column: 2
content: functionstand(uintgameId,uint8[]deck,bytes32seed,uint8numCards,uint8v,bytes32r,bytes32s){uintwin=_stand(gameId,deck,seed,numCards,v,r,s,true);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 93
column: 2
content: functionstandAndRebet(uintoldGameId,uint8[]oldDeck,bytes32oldSeed,uint8numCards,uint8v,bytes32r,bytes32s,uintnewGameId,bytes32newDeck,bytes32newSrvSeed,bytes32newCSeed){uintwin=_stand(oldGameId,oldDeck,oldSeed,numCards,v,r,s,false);uintbet=games[oldGameId].bet;if(win>=bet){_initGame(newGameId,newDeck,newSrvSeed,newCSeed,bet);win-=bet;}if(win>0&&!msg.sender.send(win)){throw;}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 152
column: 2
content: functioncheckDeck(uintgameId,uint8[]deck,bytes32seed)constantreturns(boolcorrect){if(sha3(seed)!=games[gameId].seed)returnfalse;if(sha3(convertToBytes(deck),seed)!=games[gameId].deck)returnfalse;returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 158
column: 2
content: functionconvertToBytes(uint8[]byteArray)returns(bytesb){b=newbytes(byteArray.length);for(uint8i=0;i<byteArray.length;i++)b[i]=byte(byteArray[i]);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 167
column: 2
content: functioncheckNumCards(uintgameId,uint8numCards,uint8v,bytes32r,bytes32s)constantreturns(boolcorrect){bytes32msgHash=sha3(gameId,numCards);returnecrecover(msgHash,v,r,s)==signer;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 176
column: 2
content: functiondetermineOutcome(uintgameId,uint8[]cards,uint8numCards)constantreturns(uintwin){uint8playerValue=getPlayerValue(cards,numCards);if(playerValue>21)return0;var(dealerValue,dealerBJ)=getDealerValue(cards,numCards);if(playerValue==21&&numCards==2&&!dealerBJ){if(isSuited(cards[0],cards[2]))returngames[gameId].bet*3;elsereturngames[gameId].bet*5/2;}elseif(playerValue==21&&numCards==5)returngames[gameId].bet*2;elseif(playerValue>dealerValue||dealerValue>21)returngames[gameId].bet*2;elseif(playerValue==dealerValue)returngames[gameId].bet;elsereturn0;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 269
column: 2
content: function()payableonlyOwner{}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 273
column: 2
content: functionwithdraw(uintamount)onlyOwner{if(amount<address(this).balance)if(!owner.send(amount))Error(6);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 280
column: 2
content: functionsetSigner(addresssignerAddress)onlyOwner{signer=signerAddress;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 285
column: 2
content: functionsetMinimumBet(uintnewMin)onlyOwner{minimumBet=newMin;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 290
column: 2
content: functionsetMaximumBet(uintnewMax)onlyOwner{minimumBet=newMax;}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 45
column: 2
content: uint8[13]cardValues=[11,2,3,4,5,6,7,8,9,10,10,10,10];

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 48
column: 2
content: mapping(uint=>Game)games;

SOLIDITY_VISIBILITY :18
SOLIDITY_OVERPOWERED_ROLE :3
SOLIDITY_DEPRECATED_CONSTRUCTIONS :13
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :5
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :1
SOLIDITY_SEND :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_UPGRADE_TO_050 :4
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
SOLIDITY_SHOULD_RETURN_STRUCT :1