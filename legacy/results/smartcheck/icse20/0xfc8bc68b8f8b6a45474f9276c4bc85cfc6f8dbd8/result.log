/unique_chucks/10/0xfc8bc68b8f8b6a45474f9276c4bc85cfc6f8dbd8.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: adc165
severity: 1
line: 60
column: 37
content: 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: adc165
severity: 1
line: 79
column: 34
content: 0x360f9b23ea114bb1a1e5fdd52fcb92837011ff65

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 448
column: 34
content: 0x3F

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 540
column: 35
content: 0xf7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 541
column: 35
content: 0xf6

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 545
column: 30
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 549
column: 39
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 549
column: 65
content: 0xb7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 550
column: 39
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 554
column: 44
content: 0xb9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 558
column: 38
content: 0xf9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 562
column: 31
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 566
column: 32
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 570
column: 41
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 570
column: 69
content: 0xb7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 571
column: 41
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 575
column: 36
content: 0xb9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 579
column: 39
content: 0xf8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 583
column: 39
content: 0xf8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 587
column: 38
content: 0x94

ruleId: SOLIDITY_CALL_WITHOUT_DATA
patternId: om991k
severity: 2
line: 437
column: 24
content: call.value(amount)()

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 493
column: 28
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 511
column: 31
content: sha3

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 187b5a
severity: 1
line: 531
column: 25
content: sha3

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 466
column: 4
content: functionverifyMerkleProof(uintseedHash,uintoffset)pureprivatereturns(bytes32blockHash,bytes32uncleHash){uintscratchBuf1;assembly{scratchBuf1:=mload(0x40)}uintuncleHeaderLength;uintblobLength;uintshift;uinthashSlot;for(;;offset+=blobLength){assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}if(blobLength==0){break;}assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,"Shift bounds check.");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,"Non-empty hash slot.");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}}uncleHash=bytes32(seedHash);uintscratchBuf2=scratchBuf1+uncleHeaderLength;uintunclesLength;assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}uintunclesShift;assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}require(unclesShift+uncleHeaderLength<=unclesLength,"Shift bounds check.");offset+=6;assembly{calldatacopy(scratchBuf2,offset,unclesLength)}memcpy(scratchBuf2+unclesShift,scratchBuf1,uncleHeaderLength);assembly{seedHash:=sha3(scratchBuf2,unclesLength)}offset+=unclesLength;assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,"Shift bounds check.");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,"Non-empty hash slot.");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 147
column: 4
content: functionsetSecretSigner(addressnewSecretSigner)externalonlyOwner{secretSigner=newSecretSigner;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 152
column: 4
content: functionsetCroupier(addressnewCroupier)externalonlyOwner{croupier=newCroupier;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 157
column: 4
content: functionsetMaxProfit(uint_maxProfit)publiconlyOwner{require(_maxProfit<MAX_AMOUNT,"maxProfit should be a sane number.");maxProfit=_maxProfit;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 64
column: 12
content: private

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 466
column: 4
content: functionverifyMerkleProof(uintseedHash,uintoffset)pureprivatereturns(bytes32blockHash,bytes32uncleHash){uintscratchBuf1;assembly{scratchBuf1:=mload(0x40)}uintuncleHeaderLength;uintblobLength;uintshift;uinthashSlot;for(;;offset+=blobLength){assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}if(blobLength==0){break;}assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,"Shift bounds check.");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,"Non-empty hash slot.");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}}uncleHash=bytes32(seedHash);uintscratchBuf2=scratchBuf1+uncleHeaderLength;uintunclesLength;assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}uintunclesShift;assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}require(unclesShift+uncleHeaderLength<=unclesLength,"Shift bounds check.");offset+=6;assembly{calldatacopy(scratchBuf2,offset,unclesLength)}memcpy(scratchBuf2+unclesShift,scratchBuf1,uncleHeaderLength);assembly{seedHash:=sha3(scratchBuf2,unclesLength)}offset+=unclesLength;assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,"Shift bounds check.");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,"Non-empty hash slot.");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 594
column: 4
content: functionmemcpy(uintdest,uintsrc,uintlen)pureprivate{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 537
column: 4
content: functionrequireCorrectReceipt(uintoffset)viewprivate{uintleafHeaderByte;assembly{leafHeaderByte:=byte(0,calldataload(offset))}require(leafHeaderByte>=0xf7,"Receipt leaf longer than 55 bytes.");offset+=leafHeaderByte-0xf6;uintpathHeaderByte;assembly{pathHeaderByte:=byte(0,calldataload(offset))}if(pathHeaderByte<=0x7f){offset+=1;}else{require(pathHeaderByte>=0x80&&pathHeaderByte<=0xb7,"Path is an RLP string.");offset+=pathHeaderByte-0x7f;}uintreceiptStringHeaderByte;assembly{receiptStringHeaderByte:=byte(0,calldataload(offset))}require(receiptStringHeaderByte==0xb9,"Receipt string is always at least 256 bytes long, but less than 64k.");offset+=3;uintreceiptHeaderByte;assembly{receiptHeaderByte:=byte(0,calldataload(offset))}require(receiptHeaderByte==0xf9,"Receipt is always at least 256 bytes long, but less than 64k.");offset+=3;uintstatusByte;assembly{statusByte:=byte(0,calldataload(offset))}require(statusByte==0x1,"Status should be success.");offset+=1;uintcumGasHeaderByte;assembly{cumGasHeaderByte:=byte(0,calldataload(offset))}if(cumGasHeaderByte<=0x7f){offset+=1;}else{require(cumGasHeaderByte>=0x80&&cumGasHeaderByte<=0xb7,"Cumulative gas is an RLP string.");offset+=cumGasHeaderByte-0x7f;}uintbloomHeaderByte;assembly{bloomHeaderByte:=byte(0,calldataload(offset))}require(bloomHeaderByte==0xb9,"Bloom filter is always 256 bytes long.");offset+=256+3;uintlogsListHeaderByte;assembly{logsListHeaderByte:=byte(0,calldataload(offset))}require(logsListHeaderByte==0xf8,"Logs list is less than 256 bytes long.");offset+=2;uintlogEntryHeaderByte;assembly{logEntryHeaderByte:=byte(0,calldataload(offset))}require(logEntryHeaderByte==0xf8,"Log entry is less than 256 bytes long.");offset+=2;uintaddressHeaderByte;assembly{addressHeaderByte:=byte(0,calldataload(offset))}require(addressHeaderByte==0x94,"Address is 20 bytes long.");uintlogAddress;assembly{logAddress:=and(calldataload(sub(offset,11)),0xffffffffffffffffffffffffffffffffffffffff)}require(logAddress==uint(address(this)));}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 420
column: 93
content: (uintwinAmount,uintjackpotFee)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 466
column: 80
content: (bytes32blockHash,bytes32uncleHash)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 173
column: 8
content: sendFunds(beneficiary_,withdrawAmount,withdrawAmount)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 387
column: 8
content: sendFunds(gambler,diceWin+jackpotWin==0?1wei:diceWin+jackpotWin,diceWin)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 416
column: 8
content: sendFunds(bet.gambler,amount,amount)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 83k1no
severity: 1
line: 437
column: 24
content: call.value(amount)()

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 91h3sa
severity: 1
line: 143
column: 16
content: public

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 468
column: 27
content: assembly{scratchBuf1:=mload(0x40)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 477
column: 12
content: assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 483
column: 12
content: assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 487
column: 12
content: assembly{hashSlot:=calldataload(add(offset,shift))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 490
column: 12
content: assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 503
column: 27
content: assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 504
column: 27
content: assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 508
column: 8
content: assembly{calldatacopy(scratchBuf2,offset,unclesLength)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 511
column: 8
content: assembly{seedHash:=sha3(scratchBuf2,unclesLength)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 516
column: 8
content: assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 523
column: 8
content: assembly{hashSlot:=calldataload(add(offset,shift))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 526
column: 8
content: assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 538
column: 29
content: assembly{leafHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 543
column: 29
content: assembly{pathHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 553
column: 38
content: assembly{receiptStringHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 557
column: 32
content: assembly{receiptHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 561
column: 25
content: assembly{statusByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 565
column: 31
content: assembly{cumGasHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 574
column: 30
content: assembly{bloomHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 578
column: 33
content: assembly{logsListHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 582
column: 33
content: assembly{logEntryHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 586
column: 32
content: assembly{addressHeaderByte:=byte(0,calldataload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 589
column: 25
content: assembly{logAddress:=and(calldataload(sub(offset,11)),0xffffffffffffffffffffffffffffffffffffffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 597
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 603
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 9
column: 4
content: uintconstantHOUSE_EDGE_PERCENT=15;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 10
column: 4
content: uintconstantHOUSE_EDGE_MINIMUM_AMOUNT=0.00045ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 14
column: 4
content: uintconstantMIN_JACKPOT_BET=0.1ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 17
column: 4
content: uintconstantJACKPOT_MODULO=1000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 18
column: 4
content: uintconstantJACKPOT_FEE=0.001ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 21
column: 4
content: uintconstantMIN_BET=0.01ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 22
column: 4
content: uintconstantMAX_AMOUNT=300000ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 33
column: 4
content: uintconstantMAX_MODULO=100;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 45
column: 4
content: uintconstantMAX_MASK_MODULO=40;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 48
column: 4
content: uintconstantMAX_BET_MASK=2**MAX_MASK_MODULO;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 56
column: 4
content: uintconstantBET_EXPIRATION_BLOCKS=250;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 60
column: 4
content: addressconstantDUMMY_ADDRESS=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 98
column: 4
content: mapping(uint=>Bet)bets;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 446
column: 4
content: uintconstantPOPCNT_MULT=0x0000000000002000000000100000000008000000000400000000020000000001;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 447
column: 4
content: uintconstantPOPCNT_MASK=0x0001041041041041041041041041041041041041041041041041041041041041;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 448
column: 4
content: uintconstantPOPCNT_MODULO=0x3F;

SOLIDITY_VISIBILITY :16
SOLIDITY_OVERPOWERED_ROLE :3
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :1
SOLIDITY_ADDRESS_HARDCODED :20
SOLIDITY_UPGRADE_TO_050 :2
SOLIDITY_UNCHECKED_CALL :3
SOLIDITY_SHOULD_RETURN_STRUCT :2
SOLIDITY_SHOULD_NOT_BE_PURE :2
SOLIDITY_DEPRECATED_CONSTRUCTIONS :3
SOLIDITY_USING_INLINE_ASSEMBLY :25
SOLIDITY_CALL_WITHOUT_DATA :1
SOLIDITY_SHOULD_NOT_BE_VIEW :1