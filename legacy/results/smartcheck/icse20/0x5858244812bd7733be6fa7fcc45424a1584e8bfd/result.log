/unique_contracts/0x5858244812bd7733be6fa7fcc45424a1584e8bfd.sol
line 611:23 extraneous input 'signature' expecting {',', ')'}
line 612:23 extraneous input 'merkleProof' expecting {',', ')'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 119
column: 19
content: (address(0))

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 139
column: 19
content: (address(0))

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 326
column: 4
content: functionapprove(addressspender,uint256value)publicreturns(bool){require(spender!=address(0));_allowed[msg.sender][spender]=value;emitApproval(msg.sender,spender,value);returntrue;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 166
column: 8
content: for(uint256i=0;i<proof.length/20;i++){uint160proofElement;assembly{proofElement:=div(mload(add(proof,add(32,mul(i,20)))),0x1000000000000000000000000)}if(computedHash<proofElement){computedHash=uint160(uint256(keccak256(abi.encodePacked(computedHash,proofElement))));index+=(1<<i);}else{computedHash=uint160(uint256(keccak256(abi.encodePacked(proofElement,computedHash))));}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 232
column: 8
content: for(uinti=0;i<tokens.length;i++){prevAmounts[i]=tokens[i].balanceOf(address(this));require(tokens[i].transfer(target,amounts[i]));}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 242
column: 8
content: for(uinti=0;i<tokens.length;i++){uint256expectedFees=amounts[i].mul(_feesPercent).div(100);require(tokens[i].balanceOf(address(this))>=prevAmounts[i].add(expectedFees));if(_feesReceiver!=address(this)){require(tokens[i].transfer(_feesReceiver,expectedFees));}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 453
column: 4
content: functionisContract(IERC20addr)internalviewreturns(boolresult){assembly{result:=gt(extcodesize(addr),0)}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 460
column: 4
content: functionhandleReturnBool()internalpurereturns(boolresult){assembly{switchreturndatasize()case0{result:=1}case32{returndatacopy(0,0,32)result:=mload(0)}default{revert(0,0)}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 477
column: 4
content: functionhandleReturnBytes32()internalpurereturns(bytes32result){assembly{switcheq(returndatasize(),32)case1{returndatacopy(0,0,32)result:=mload(0)}switchgt(returndatasize(),32)case1{returndatacopy(0,64,32)result:=mload(0)}switchlt(returndatasize(),32)case1{revert(0,0)}}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 232
column: 8
content: for(uinti=0;i<tokens.length;i++){prevAmounts[i]=tokens[i].balanceOf(address(this));require(tokens[i].transfer(target,amounts[i]));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 242
column: 8
content: for(uinti=0;i<tokens.length;i++){uint256expectedFees=amounts[i].mul(_feesPercent).div(100);require(tokens[i].balanceOf(address(this))>=prevAmounts[i].add(expectedFees));if(_feesReceiver!=address(this)){require(tokens[i].transfer(_feesReceiver,expectedFees));}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 3
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 71
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 97
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 159
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 189
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 256
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 445
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 544
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 197
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 198
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 199
column: 9
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 275
column: 33
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 277
column: 54
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 279
column: 12
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 195
column: 4
content: usingSafeMathforuint;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 273
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 451
column: 4
content: usingSafeMathforuint;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 554
column: 4
content: usingSafeMathforuint;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 112
column: 4
content: functionrecover(bytes32hash,bytesmemorysignature)internalpurereturns(address){bytes32r;bytes32s;uint8v;if(signature.length!=65){return(address(0));}assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}if(v<27){v+=27;}if(v!=27&&v!=28){return(address(0));}else{returnecrecover(hash,v,r,s);}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 163
column: 4
content: functioncompute(bytesmemoryproof,uint160leaf)internalpurereturns(uint160root,uint256index){uint160computedHash=leaf;for(uint256i=0;i<proof.length/20;i++){uint160proofElement;assembly{proofElement:=div(mload(add(proof,add(32,mul(i,20)))),0x1000000000000000000000000)}if(computedHash<proofElement){computedHash=uint160(uint256(keccak256(abi.encodePacked(computedHash,proofElement))));index+=(1<<i);}else{computedHash=uint160(uint256(keccak256(abi.encodePacked(proofElement,computedHash))));}}return(computedHash,index);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 460
column: 4
content: functionhandleReturnBool()internalpurereturns(boolresult){assembly{switchreturndatasize()case0{result:=1}case32{returndatacopy(0,0,32)result:=mload(0)}default{revert(0,0)}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 477
column: 4
content: functionhandleReturnBytes32()internalpurereturns(bytes32result){assembly{switcheq(returndatasize(),32)case1{returndatacopy(0,0,32)result:=mload(0)}switchgt(returndatasize(),32)case1{returndatacopy(0,64,32)result:=mload(0)}switchlt(returndatasize(),32)case1{revert(0,0)}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 453
column: 4
content: functionisContract(IERC20addr)internalviewreturns(boolresult){assembly{result:=gt(extcodesize(addr),0)}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 163
column: 77
content: (uint160root,uint256index)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 238
column: 29
content: call(data)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 502
column: 37
content: call(abi.encodeWithSignature("transfer(address,uint256)",to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 510
column: 37
content: call(abi.encodeWithSignature("transferFrom(address,address,uint256)",from,to,value))

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 518
column: 37
content: call(abi.encodeWithSignature("approve(address,uint256)",spender,value))

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 126
column: 8
content: assembly{r:=mload(add(signature,0x20))s:=mload(add(signature,0x40))v:=byte(0,mload(add(signature,0x60)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 169
column: 12
content: assembly{proofElement:=div(mload(add(proof,add(32,mul(i,20)))),0x1000000000000000000000000)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 455
column: 8
content: assembly{result:=gt(extcodesize(addr),0)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 462
column: 8
content: assembly{switchreturndatasize()case0{result:=1}case32{returndatacopy(0,0,32)result:=mload(0)}default{revert(0,0)}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 479
column: 8
content: assembly{switcheq(returndatasize(),32)case1{returndatacopy(0,0,32)result:=mload(0)}switchgt(returndatasize(),32)case1{returndatacopy(0,64,32)result:=mload(0)}switchlt(returndatasize(),32)case1{revert(0,0)}}

SOLIDITY_PRAGMAS_VERSION :8
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :3
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :6
SOLIDITY_EXTRA_GAS_IN_LOOPS :3
SOLIDITY_ADDRESS_HARDCODED :2
SOLIDITY_GAS_LIMIT_IN_LOOPS :2
SOLIDITY_UNCHECKED_CALL :4
SOLIDITY_SHOULD_RETURN_STRUCT :1
SOLIDITY_SHOULD_NOT_BE_PURE :4
SOLIDITY_ERC20_APPROVE :1
SOLIDITY_SAFEMATH :4
SOLIDITY_USING_INLINE_ASSEMBLY :5
SOLIDITY_SHOULD_NOT_BE_VIEW :1