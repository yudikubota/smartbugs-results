{
  "contract": "0x182ebf4c80b28efc45ad992ecbb9f730e31e8c7f",
  "tool": "smartcheck",
  "start": 1563466523.0922487,
  "end": 1563466531.2477133,
  "duration": 8.15546464920044,
  "analysis": [
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 79,
      "column": 4,
      "content": "for(uint256i=32;i<=_proof.length;i+=32){assembly{proofElement:=mload(add(_proof,i))}if(computedHash<proofElement){computedHash=keccak256(computedHash,proofElement);}else{computedHash=keccak256(proofElement,computedHash);}}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 425,
      "column": 2,
      "content": "for(uint256k=0;k<_recipients.length;k++){if(!mine.generated(_recipients[k])){mine.generate(_recipients[k],proofs[k]);}}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "k4o1l4",
      "severity": 1,
      "line": 406,
      "column": 2,
      "content": "while(i<_merkleProofs.length){uint256proofSize=uint256(BytesUtil.readBytes32(_merkleProofs,i));require(proofSize%32==0,\"proof size must be a multiple of 32\");proofs[j]=BytesUtil.substr(_merkleProofs,i+32,proofSize);i=i+32+proofSize;j++;}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "58bdd3",
      "severity": 1,
      "line": 291,
      "column": 4,
      "content": "functiondataPtr(bytesmemorybts)internalpurereturns(uint256addr){assembly{addr:=add(bts,32)}}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 425,
      "column": 2,
      "content": "for(uint256k=0;k<_recipients.length;k++){if(!mine.generated(_recipients[k])){mine.generate(_recipients[k],proofs[k]);}}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 406,
      "column": 8,
      "content": "i<_merkleProofs.length"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 104,
      "column": 4,
      "content": "usingSafeMathforuint256;"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 379,
      "column": 1,
      "content": "usingSafeMathforuint256;"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 72,
      "column": 2,
      "content": "functionverifyProof(bytes_proof,bytes32_root,bytes32_leaf)publicpurereturns(bool){if(_proof.length%32!=0)returnfalse;bytes32proofElement;bytes32computedHash=_leaf;for(uint256i=32;i<=_proof.length;i+=32){assembly{proofElement:=mload(add(_proof,i))}if(computedHash<proofElement){computedHash=keccak256(computedHash,proofElement);}else{computedHash=keccak256(proofElement,computedHash);}}returncomputedHash==_root;}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 291,
      "column": 4,
      "content": "functiondataPtr(bytesmemorybts)internalpurereturns(uint256addr){assembly{addr:=add(bts,32)}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 305,
      "column": 4,
      "content": "functioncopy(uint256src,uint256dest,uint256len)internalpure{for(;len>=WORD_SIZE;len-=WORD_SIZE){assembly{mstore(dest,mload(src))}dest+=WORD_SIZE;src+=WORD_SIZE;}uint256mask=256**(WORD_SIZE-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 361,
      "column": 4,
      "content": "functionreadBytes32(bytesmemorybts,uint256startIndex)internalpurereturns(bytes32result){require(startIndex+32<=bts.length);uint256addr=dataPtr(bts);assembly{result:=mload(add(addr,startIndex))}returnresult;}"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "901eae",
      "severity": 1,
      "line": 87,
      "column": 23,
      "content": "keccak256(computedHash,proofElement)"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "901eae",
      "severity": 1,
      "line": 90,
      "column": 23,
      "content": "keccak256(proofElement,computedHash)"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 72,
      "column": 23,
      "content": "bytes_proof"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 388,
      "column": 53,
      "content": "address[]_recipients"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 388,
      "column": 76,
      "content": "bytes_merkleProofs"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 80,
      "column": 6,
      "content": "assembly{proofElement:=mload(add(_proof,i))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 292,
      "column": 8,
      "content": "assembly{addr:=add(bts,32)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 308,
      "column": 12,
      "content": "assembly{mstore(dest,mload(src))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 317,
      "column": 8,
      "content": "assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 366,
      "column": 8,
      "content": "assembly{result:=mload(add(addr,startIndex))}"
    }
  ]
}