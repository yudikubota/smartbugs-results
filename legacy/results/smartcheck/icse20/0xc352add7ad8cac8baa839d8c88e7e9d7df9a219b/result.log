/unique_chucks/10/0xc352add7ad8cac8baa839d8c88e7e9d7df9a219b.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 230
column: 4
content: functiongetPoolIds()constantreturns(uint8[]){uint8[]memorypoolIds=newuint8[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolIds[i-1]=pools[i].poolId;}returnpoolIds;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 238
column: 4
content: functiongetPoolPrices()constantreturns(uint[]){uint[]memorypoolPrices=newuint[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolPrices[i-1]=pools[i].price;}returnpoolPrices;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 246
column: 4
content: functiongetPoolOwners()constantreturns(address[]){address[]memorypoolOwners=newaddress[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolOwners[i-1]=pools[i].owner;}returnpoolOwners;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 254
column: 4
content: functiongetFibonziPlayers()constantreturns(address[]){address[]memoryfibonziPlayers=newaddress[](playersCount);for(uint8i=0;i<playersCount;i++){fibonziPlayers[i]=playersList[i];}returnfibonziPlayers;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 262
column: 4
content: functiongetPlayersBalances()constantreturns(uint[]){uint[]memoryplayersBalances=newuint[](playersCount);for(uint8i=0;i<playersCount;i++){playersBalances[i]=players[playersList[i]].balance;}returnplayersBalances;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 270
column: 4
content: functiongetPlayersFibokens()constantreturns(uint[]){uint[]memoryplayersTokens=newuint[](playersCount);for(uint8i=0;i<playersCount;i++){uintsum=0;for(uintj=0;j<playersFibokens[playersList[i]].length;j++){if(!playersFibokens[playersList[i]][j].isUsed){sum++;}}playersTokens[i]=sum;}returnplayersTokens;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 128
column: 8
content: for(uint8i=0;i<playersCount;i++){if(playersList[i]==msg.sender){isPlayerFlag=true;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 157
column: 16
content: for(uint8i=0;i<poolsToCreate;i++){createPool();rewardFiboken();}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 172
column: 12
content: for(uint8i=0;i<playersCount;i++){uint8usableTokens=getUsablePlayerFibokens(playersList[i]);if(usableTokens>0){players[playersList[i]].balance+=share*usableTokens;PlayerBalance(playersList[i],players[playersList[i]].balance,now);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 199
column: 8
content: for(uint8i=0;i<playersFibokens[msg.sender].length;i++){if(!playersFibokens[msg.sender][i].isUsed&&!used){playersFibokens[msg.sender][i].isUsed=true;used=true;++fibokenUsedCount;FibokenUsed(playersFibokens[msg.sender][i].fibokenId,msg.sender,now);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 213
column: 8
content: for(uint8i=0;i<playersFibokens[someAddress].length;i++){if(!playersFibokens[someAddress][i].isUsed){++playerFibokens;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 232
column: 8
content: for(uint8i=1;i<poolCount+1;i++){poolIds[i-1]=pools[i].poolId;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 240
column: 8
content: for(uint8i=1;i<poolCount+1;i++){poolPrices[i-1]=pools[i].price;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 248
column: 8
content: for(uint8i=1;i<poolCount+1;i++){poolOwners[i-1]=pools[i].owner;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 256
column: 8
content: for(uint8i=0;i<playersCount;i++){fibonziPlayers[i]=playersList[i];}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 264
column: 8
content: for(uint8i=0;i<playersCount;i++){playersBalances[i]=players[playersList[i]].balance;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 272
column: 8
content: for(uint8i=0;i<playersCount;i++){uintsum=0;for(uintj=0;j<playersFibokens[playersList[i]].length;j++){if(!playersFibokens[playersList[i]][j].isUsed){sum++;}}playersTokens[i]=sum;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 274
column: 12
content: for(uintj=0;j<playersFibokens[playersList[i]].length;j++){if(!playersFibokens[playersList[i]][j].isUsed){sum++;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 199
column: 8
content: for(uint8i=0;i<playersFibokens[msg.sender].length;i++){if(!playersFibokens[msg.sender][i].isUsed&&!used){playersFibokens[msg.sender][i].isUsed=true;used=true;++fibokenUsedCount;FibokenUsed(playersFibokens[msg.sender][i].fibokenId,msg.sender,now);}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 213
column: 8
content: for(uint8i=0;i<playersFibokens[someAddress].length;i++){if(!playersFibokens[someAddress][i].isUsed){++playerFibokens;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 274
column: 12
content: for(uintj=0;j<playersFibokens[playersList[i]].length;j++){if(!playersFibokens[playersList[i]][j].isUsed){sum++;}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 47
column: 4
content: functionFibonzi(){owner=msg.sender;createPlayer();createPool();fibonacciIndex++;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 54
column: 4
content: functionopenPool(uint8poolId)payable{assert(poolCount>=poolId);assert(isPlayer());assert(msg.value>=pools[poolId].price);assert(getUsablePlayerFibokens(msg.sender)>0);assert(usePlayerFiboken());uintprice=pools[poolId].price;owner.transfer(price);pools[poolId].owner=msg.sender;if(msg.value>pools[poolId].price){msg.sender.transfer(msg.value-pools[poolId].price);}pools[poolId].price=4*price;PoolJoined(poolId,msg.sender,pools[poolId].price,now);++transactionsCount;if(fibonacciIndex<=fibonacciMax){createPoolsIfNeeded();}getPoolPrices();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 79
column: 4
content: functionjoinPool(uint8poolId)payable{assert(poolCount>=poolId);assert(msg.sender!=pools[poolId].owner);assert(msg.value>=pools[poolId].price);assert((pools[poolId].owner==owner&&poolCount==1)||(pools[poolId].owner!=owner));if(!isPlayer()){createPlayer();}if(msg.value>pools[poolId].price){msg.sender.transfer(msg.value-pools[poolId].price);}uintprice=pools[poolId].price;pools[poolId].owner.transfer((price*80)/100);splitComissions((price*20)/100);pools[poolId].owner=msg.sender;pools[poolId].price=2*price;PoolJoined(poolId,msg.sender,pools[poolId].price,now);++transactionsCount;if(fibonacciIndex<=fibonacciMax){createPoolsIfNeeded();}rewardFiboken();getPoolPrices();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 112
column: 4
content: functionwithdrawComission(){assert(isPlayer());assert(players[msg.sender].balance>0);assert(getUsablePlayerFibokens(msg.sender)>=10);for(uinti=0;i<10;i++){usePlayerFiboken();}msg.sender.transfer(players[msg.sender].balance);players[msg.sender].balance=0;PlayerBalance(msg.sender,players[msg.sender].balance,now);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 230
column: 4
content: functiongetPoolIds()constantreturns(uint8[]){uint8[]memorypoolIds=newuint8[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolIds[i-1]=pools[i].poolId;}returnpoolIds;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 238
column: 4
content: functiongetPoolPrices()constantreturns(uint[]){uint[]memorypoolPrices=newuint[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolPrices[i-1]=pools[i].price;}returnpoolPrices;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 246
column: 4
content: functiongetPoolOwners()constantreturns(address[]){address[]memorypoolOwners=newaddress[](poolCount);for(uint8i=1;i<poolCount+1;i++){poolOwners[i-1]=pools[i].owner;}returnpoolOwners;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 254
column: 4
content: functiongetFibonziPlayers()constantreturns(address[]){address[]memoryfibonziPlayers=newaddress[](playersCount);for(uint8i=0;i<playersCount;i++){fibonziPlayers[i]=playersList[i];}returnfibonziPlayers;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 262
column: 4
content: functiongetPlayersBalances()constantreturns(uint[]){uint[]memoryplayersBalances=newuint[](playersCount);for(uint8i=0;i<playersCount;i++){playersBalances[i]=players[playersList[i]].balance;}returnplayersBalances;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 270
column: 4
content: functiongetPlayersFibokens()constantreturns(uint[]){uint[]memoryplayersTokens=newuint[](playersCount);for(uint8i=0;i<playersCount;i++){uintsum=0;for(uintj=0;j<playersFibokens[playersList[i]].length;j++){if(!playersFibokens[playersList[i]][j].isUsed){sum++;}}playersTokens[i]=sum;}returnplayersTokens;}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 5
column: 4
content: addressowner;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 13
column: 4
content: uintfibonacciMax=18;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 34
column: 4
content: mapping(address=>Player)players;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 35
column: 4
content: mapping(address=>Fiboken[])playersFibokens;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 36
column: 4
content: mapping(address=>uint)playersBalance;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 37
column: 4
content: mapping(uint8=>Pool)pools;

SOLIDITY_VISIBILITY :16
SOLIDITY_DEPRECATED_CONSTRUCTIONS :6
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :12
SOLIDITY_GAS_LIMIT_IN_LOOPS :3