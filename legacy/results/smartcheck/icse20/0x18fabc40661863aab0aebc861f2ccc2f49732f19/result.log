/unique_chucks/5/0x18fabc40661863aab0aebc861f2ccc2f49732f19.sol
line 154:33 mismatched input 'payable' expecting {',', ')'}
line 154:44 no viable alternative at input '_to,'
line 154:44 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 154:58 mismatched input ')' expecting {';', '='}
line 155:11 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 155:15 mismatched input '.' expecting {';', '='}
line 155:23 extraneous input '==' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 155:31 extraneous input ')' expecting {';', '='}
line 156:11 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 156:20 mismatched input '<=' expecting {';', '='}
line 156:30 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 156:35 mismatched input ')' expecting {';', '='}
line 156:44 mismatched input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 157:16 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 157:24 extraneous input ')' expecting {';', '='}
line 162:2 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 64
column: 11
content: mul(div(d,m),m)

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 97
column: 0
content: contractInfernoisERC20Detailed{usingSafeMathforuint256;mapping(address=>uint256)private_InfernoTokenBalances;mapping(address=>mapping(address=>uint256))private_allowed;mapping(address=>uint256)public_lastClaimBlock;stringconstanttokenName="Inferno";stringconstanttokenSymbol="BLAZE";uint8constanttokenDecimals=18;uint256_totalSupply=2000000e18;uint256public_nextClaimAmount=1000e18;addresspublicadmin;uint256public_InfernoFund=2000000e18;boolpublic_allowClaims=false;addresspublic_communityAccount;uint256public_claimPrice=0;constructor()publicpayableERC20Detailed(tokenName,tokenSymbol,tokenDecimals){admin=msg.sender;_communityAccount=msg.sender;}functiontotalSupply()publicviewreturns(uint256){return_totalSupply;}functionmyTokens()publicviewreturns(uint256){return_InfernoTokenBalances[msg.sender];}functionbalanceOf(addressowner)publicviewreturns(uint256){return_InfernoTokenBalances[owner];}functionallowance(addressowner,addressspender)publicviewreturns(uint256){return_allowed[owner][spender];}functionsetAllowClaims(bool_setClaims)public{require(msg.sender==admin);_allowClaims=_setClaims;}functionsetCommunityAcccount(address_newAccount)public{require(msg.sender==admin);_communityAccount=_newAccount;}functionsetClaimPrice(uint256_newPrice)public{require(msg.sender==admin);_claimPrice=_newPrice;}functiondistributeETH(addresspayable_to,uint_amount)public{require(msg.sender==admin);require(_amount<=address(this).balance);_to.transfer(_amount);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 139
column: 2
content: functionsetAllowClaims(bool_setClaims)public{require(msg.sender==admin);_allowClaims=_setClaims;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 144
column: 2
content: functionsetCommunityAcccount(address_newAccount)public{require(msg.sender==admin);_communityAccount=_newAccount;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 149
column: 2
content: functionsetClaimPrice(uint256_newPrice)public{require(msg.sender==admin);_claimPrice=_newPrice;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 21
column: 16
content: ^

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 70
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 71
column: 9
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 72
column: 9
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 100
column: 31
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 101
column: 52
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 99
column: 2
content: usingSafeMathforuint256;

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 154
column: 2
content: functiondistributeETH(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 103
column: 2
content: stringconstanttokenName="Inferno";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 104
column: 2
content: stringconstanttokenSymbol="BLAZE";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 105
column: 2
content: uint8constanttokenDecimals=18;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 106
column: 2
content: uint256_totalSupply=2000000e18;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 154
column: 41
content: _to,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 154
column: 46
content: uint_amount)public{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 155
column: 4
content: require(msg.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 155
column: 16
content: sender==admin);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 156
column: 4
content: require(_amount<=

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 156
column: 23
content: address(this).

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 156
column: 37
content: balance);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 157
column: 4
content: _to.transfer(_amount);

SOLIDITY_VISIBILITY :13
SOLIDITY_SAFEMATH :1
SOLIDITY_OVERPOWERED_ROLE :3
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :5
SOLIDITY_DIV_MUL :1