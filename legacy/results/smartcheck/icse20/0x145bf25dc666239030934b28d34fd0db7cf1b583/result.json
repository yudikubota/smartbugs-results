{
  "contract": "0x145bf25dc666239030934b28d34fd0db7cf1b583",
  "tool": "smartcheck",
  "start": 1563503570.5395288,
  "end": 1563503584.6425054,
  "duration": 14.102976560592651,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 926,
      "column": 25,
      "content": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 316,
      "column": 32,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 318,
      "column": 29,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 336,
      "column": 69,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 371,
      "column": 30,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 1138,
      "column": 34,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 939,
      "column": 26,
      "content": "dividendTokensBought*(toTokenHolders*magnitude/(divTokenSupply))"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 971,
      "column": 13,
      "content": "_ethereumAmount.div(tokenPriceInitial_)*1e18"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1026,
      "column": 40,
      "content": "toPowerOfThreeHalves(tokenSupply.div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1034,
      "column": 26,
      "content": "toPowerOfTwoThirds(simulatedEthBeforeInvested.mul(3).div(2)).mul(MULTIPLIER)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1035,
      "column": 26,
      "content": "toPowerOfTwoThirds(simulatedEthAfterInvested.mul(3).div(2)).mul(MULTIPLIER)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1122,
      "column": 30,
      "content": "toPowerOfThreeHalves(tokenSupply.div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1123,
      "column": 30,
      "content": "toPowerOfThreeHalves((tokenSupply-tokensToSellAtVariablePrice).div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 223,
      "column": 2,
      "content": "functionbuyAndSetDivPercentage(address_referredBy,uint8_divChoice,stringprovidedUnhashedPass)publicpayablereturns(uint){require(icoPhase||regularPhase);if(icoPhase){bytes32hashedProvidedPass=keccak256(providedUnhashedPass);uintgasPrice=tx.gasprice;}require(validDividendRates_[_divChoice]);userSelectedRate[msg.sender]=true;userDividendRate[msg.sender]=_divChoice;emitUserDividendRate(msg.sender,_divChoice);purchaseTokens(msg.value,_referredBy);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 259,
      "column": 2,
      "content": "functionbuy(address_referredBy)publicpayablereturns(uint){require(regularPhase);address_customerAddress=msg.sender;require(userSelectedRate[_customerAddress]);purchaseTokens(msg.value,_referredBy);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 830,
      "column": 2,
      "content": "functionpurchaseTokens(uint_incomingEthereum,address_referredBy)internalreturns(uint){uinttoBankRoll;uinttoReferrer;uinttoTokenHolders;uinttoDivCardHolders;uintdividendAmount;uinttokensBought;uintdividendTokensBought;uintremainingEth=_incomingEthereum;uintfee;if(regularPhase){toDivCardHolders=_incomingEthereum.div(100);remainingEth=remainingEth.sub(toDivCardHolders);}uintdividendRate=userDividendRate[msg.sender];dividendAmount=(remainingEth.mul(dividendRate)).div(100);remainingEth=remainingEth.sub(dividendAmount);if(icoPhase&&msg.sender==bankrollAddress){remainingEth=remainingEth+dividendAmount;}tokensBought=ethereumToTokens_(remainingEth);dividendTokensBought=tokensBought.mul(dividendRate);tokenSupply=tokenSupply.add(tokensBought);divTokenSupply=divTokenSupply.add(dividendTokensBought);currentEthInvested=currentEthInvested+remainingEth;if(icoPhase){toBankRoll=dividendAmount;if(msg.sender==bankrollAddress){toBankRoll=0;}toReferrer=0;toTokenHolders=0;ethInvestedDuringICO=ethInvestedDuringICO+remainingEth;tokensMintedDuringICO=tokensMintedDuringICO+tokensBought;require(ethInvestedDuringICO<=icoHardCap);require(tx.origin==msg.sender||msg.sender==bankrollAddress);ICOBuyIn[msg.sender]+=remainingEth;require(ICOBuyIn[msg.sender]<=addressICOLimit||msg.sender==bankrollAddress);if(ethInvestedDuringICO==icoHardCap){icoPhase=false;}}else{if(_referredBy!=0x0000000000000000000000000000000000000000&&_referredBy!=msg.sender&&frontTokenBalanceLedger_[_referredBy]>=stakingRequirement){toReferrer=(dividendAmount.mul(referrer_percentage)).div(100);referralBalance_[_referredBy]+=toReferrer;emitReferral(_referredBy,toReferrer);}toTokenHolders=dividendAmount.sub(toReferrer);fee=toTokenHolders*magnitude;fee=fee-(fee-(dividendTokensBought*(toTokenHolders*magnitude/(divTokenSupply))));profitPerDivToken=profitPerDivToken.add((toTokenHolders.mul(magnitude)).div(divTokenSupply));payoutsTo_[msg.sender]+=(int256)((profitPerDivToken*dividendTokensBought)-fee);}frontTokenBalanceLedger_[msg.sender]=frontTokenBalanceLedger_[msg.sender].add(tokensBought);dividendTokenBalanceLedger_[msg.sender]=dividendTokenBalanceLedger_[msg.sender].add(dividendTokensBought);if(toBankRoll!=0){ZethrBankroll(bankrollAddress).receiveDividends.value(toBankRoll)();}if(regularPhase){divCardContract.receiveDividends.value(toDivCardHolders)(dividendRate);}emitAllocation(toBankRoll,toReferrer,toTokenHolders,toDivCardHolders,remainingEth);uintsum=toBankRoll+toReferrer+toTokenHolders+toDivCardHolders+remainingEth-_incomingEthereum;assert(sum==0);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 1263,
      "column": 2,
      "content": "functionownerOf(uint)publicpurereturns(address){}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 1241,
      "column": 11,
      "content": "z<y"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 1250,
      "column": 11,
      "content": "z<y"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1262,
      "column": 0,
      "content": "contractZethrDividendCards{functionownerOf(uint)publicpurereturns(address){}functionreceiveDividends(uint)publicpayable{}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1267,
      "column": 0,
      "content": "contractZethrBankroll{functionreceiveDividends()publicpayable{}}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_REVERT_REQUIRE",
      "patternId": "c56b12",
      "severity": 1,
      "line": 998,
      "column": 11,
      "content": "if(currentEthInvested<ethInvestedDuringICO&&currentEthInvested+_ethereumAmount>ethInvestedDuringICO){ethTowardsICOPriceTokens=ethInvestedDuringICO.sub(currentEthInvested);ethTowardsVariablePriceTokens=_ethereumAmount.sub(ethTowardsICOPriceTokens);}else{revert();}"
    },
    {
      "name": "SOLIDITY_REVERT_REQUIRE",
      "patternId": "c56b12",
      "severity": 1,
      "line": 1084,
      "column": 11,
      "content": "if(tokenSupply>tokensMintedDuringICO&&tokenSupply-_tokens<tokensMintedDuringICO){tokensToSellAtVariablePrice=tokenSupply.sub(tokensMintedDuringICO);tokensToSellAtICOPrice=_tokens.sub(tokensToSellAtVariablePrice);}else{revert();}"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 37,
      "column": 2,
      "content": "usingSafeMathforuint;"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "91h3sa",
      "severity": 1,
      "line": 305,
      "column": 2,
      "content": "public"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 223,
      "column": 73,
      "content": "stringprovidedUnhashedPass"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 278,
      "column": 63,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 286,
      "column": 63,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 492,
      "column": 73,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 576,
      "column": 19,
      "content": "string_name"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 583,
      "column": 21,
      "content": "string_symbol"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1134,
      "column": 89,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1273,
      "column": 62,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 151,
      "column": 2,
      "content": "ZethrDividendCardsdivCardContract;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 191,
      "column": 2,
      "content": "uinticoOpenTime;"
    }
  ]
}