{
  "contract": "0xb9ab8eed48852de901c13543042204c6c569b811",
  "tool": "smartcheck",
  "start": 1563477465.6989114,
  "end": 1563477477.4658573,
  "duration": 11.766945838928223,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 981,
      "column": 39,
      "content": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 982,
      "column": 32,
      "content": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 995,
      "column": 26,
      "content": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 999,
      "column": 30,
      "content": "0x0000000000000000000000000000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 341,
      "column": 32,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 343,
      "column": 29,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 361,
      "column": 69,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 396,
      "column": 30,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 1210,
      "column": 34,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1011,
      "column": 26,
      "content": "dividendTokensBought*(toTokenHolders*magnitude/(divTokenSupply))"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1043,
      "column": 13,
      "content": "_ethereumAmount.div(tokenPriceInitial_)*1e18"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1098,
      "column": 40,
      "content": "toPowerOfThreeHalves(tokenSupply.div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1106,
      "column": 26,
      "content": "toPowerOfTwoThirds(simulatedEthBeforeInvested.mul(3).div(2)).mul(MULTIPLIER)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1107,
      "column": 26,
      "content": "toPowerOfTwoThirds(simulatedEthAfterInvested.mul(3).div(2)).mul(MULTIPLIER)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1194,
      "column": 30,
      "content": "toPowerOfThreeHalves(tokenSupply.div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1195,
      "column": 30,
      "content": "toPowerOfThreeHalves((tokenSupply-tokensToSellAtVariablePrice).div(MULTIPLIER*1e6)).mul(2)"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 249,
      "column": 2,
      "content": "functionbuyAndSetDivPercentage(address_referredBy,uint8_divChoice,stringprovidedUnhashedPass)publicpayablereturns(uint){require(icoPhase||regularPhase);if(icoPhase){bytes32hashedProvidedPass=keccak256(providedUnhashedPass);require(hashedProvidedPass==icoHashedPass||msg.sender==bankrollAddress);uintgasPrice=tx.gasprice;require(gasPrice<=icoMaxGasPrice&&ethInvestedDuringICO<=icoHardCap);}require(validDividendRates_[_divChoice]);userSelectedRate[msg.sender]=true;userDividendRate[msg.sender]=_divChoice;emitUserDividendRate(msg.sender,_divChoice);purchaseTokens(msg.value,_referredBy);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 284,
      "column": 2,
      "content": "functionbuy(address_referredBy)publicpayablereturns(uint){require(regularPhase);address_customerAddress=msg.sender;require(userSelectedRate[_customerAddress]);purchaseTokens(msg.value,_referredBy);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 882,
      "column": 2,
      "content": "functionpurchaseTokens(uint_incomingEthereum,address_referredBy)internalreturns(uint){require(_incomingEthereum>=MIN_ETH_BUYIN||msg.sender==bankrollAddress,\"Tried to buy below the min eth buyin threshold.\");uinttoBankRoll;uinttoReferrer;uinttoTokenHolders;uinttoDivCardHolders;uintdividendAmount;uinttokensBought;uintdividendTokensBought;uintremainingEth=_incomingEthereum;uintfee;if(regularPhase){toDivCardHolders=remainingEth.div(100);toBankRoll=toDivCardHolders.mul(bankroll_percentage);remainingEth=(remainingEth.sub(toDivCardHolders)).sub(toBankRoll);}uintdividendRate=userDividendRate[msg.sender];dividendAmount=(remainingEth.mul(dividendRate)).div(100);remainingEth=remainingEth.sub(dividendAmount);if(icoPhase&&msg.sender==bankrollAddress){remainingEth=remainingEth+dividendAmount;}tokensBought=ethereumToTokens_(remainingEth);dividendTokensBought=tokensBought.mul(dividendRate);tokenSupply=tokenSupply.add(tokensBought);divTokenSupply=divTokenSupply.add(dividendTokensBought);currentEthInvested=currentEthInvested+remainingEth;if(icoPhase){toBankRoll=dividendAmount;if(msg.sender==bankrollAddress){toBankRoll=0;}toReferrer=0;toTokenHolders=0;ethInvestedDuringICO=ethInvestedDuringICO+remainingEth;tokensMintedDuringICO=tokensMintedDuringICO+tokensBought;require(ethInvestedDuringICO<=icoHardCap);require(tx.origin==msg.sender||msg.sender==bankrollAddress);ICOBuyIn[msg.sender]+=remainingEth;require(ICOBuyIn[msg.sender]<=addressICOLimit||msg.sender==bankrollAddress);if(ethInvestedDuringICO==icoHardCap){icoPhase=false;}}else{if(msg.sender!=creator){if(myReferrer[msg.sender]==0x0000000000000000000000000000000000000000){if(_referredBy==0x0000000000000000000000000000000000000000||_referredBy==msg.sender){_referredBy=owner;}myReferrer[msg.sender]=_referredBy;}else{_referredBy=myReferrer[msg.sender];}if(frontTokenBalanceLedger_[_referredBy]<stakingRequirement&&msg.sender!=owner){_referredBy=owner;}toReferrer+=(dividendAmount.mul(referrer_percentage1)).div(100);referralBalance_[_referredBy]+=(dividendAmount.mul(referrer_percentage1)).div(100);_referredBy=myReferrer[_referredBy];if(_referredBy!=0x0000000000000000000000000000000000000000){toReferrer+=(dividendAmount.mul(referrer_percentage2)).div(100);referralBalance_[_referredBy]+=(dividendAmount.mul(referrer_percentage2)).div(100);_referredBy=myReferrer[_referredBy];if(_referredBy!=0x0000000000000000000000000000000000000000){toReferrer+=(dividendAmount.mul(referrer_percentage3)).div(100);referralBalance_[_referredBy]+=(dividendAmount.mul(referrer_percentage3)).div(100);}}}toTokenHolders=dividendAmount.sub(toReferrer);fee=toTokenHolders*magnitude;fee=fee-(fee-(dividendTokensBought*(toTokenHolders*magnitude/(divTokenSupply))));profitPerDivToken=profitPerDivToken.add((toTokenHolders.mul(magnitude)).div(divTokenSupply));payoutsTo_[msg.sender]+=(int256)((profitPerDivToken*dividendTokensBought)-fee);}frontTokenBalanceLedger_[msg.sender]=frontTokenBalanceLedger_[msg.sender].add(tokensBought);dividendTokenBalanceLedger_[msg.sender]=dividendTokenBalanceLedger_[msg.sender].add(dividendTokensBought);if(toBankRoll!=0){ZethrBankroll(bankrollAddress).receiveDividends.value(toBankRoll)();}if(regularPhase){divCardContract.receiveDividends.value(toDivCardHolders)(dividendRate);}emitAllocation(toBankRoll,toReferrer,toTokenHolders,toDivCardHolders,remainingEth);uintsum=toBankRoll+toReferrer+toTokenHolders+toDivCardHolders+remainingEth-_incomingEthereum;assert(sum==0);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "47acc2",
      "severity": 1,
      "line": 1335,
      "column": 2,
      "content": "functionownerOf(uint)publicpurereturns(address){}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 1313,
      "column": 11,
      "content": "z<y"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 1322,
      "column": 11,
      "content": "z<y"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1334,
      "column": 0,
      "content": "contractZethrDividendCards{functionownerOf(uint)publicpurereturns(address){}functionreceiveDividends(uint)publicpayable{}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1339,
      "column": 0,
      "content": "contractZethrBankroll{functionreceiveDividends()publicpayable{}}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 150,
      "column": 7,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 151,
      "column": 7,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 152,
      "column": 7,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 153,
      "column": 7,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 206,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 207,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_REVERT_REQUIRE",
      "patternId": "c56b12",
      "severity": 1,
      "line": 1070,
      "column": 11,
      "content": "if(currentEthInvested<ethInvestedDuringICO&&currentEthInvested+_ethereumAmount>ethInvestedDuringICO){ethTowardsICOPriceTokens=ethInvestedDuringICO.sub(currentEthInvested);ethTowardsVariablePriceTokens=_ethereumAmount.sub(ethTowardsICOPriceTokens);}else{revert();}"
    },
    {
      "name": "SOLIDITY_REVERT_REQUIRE",
      "patternId": "c56b12",
      "severity": 1,
      "line": 1156,
      "column": 11,
      "content": "if(tokenSupply>tokensMintedDuringICO&&tokenSupply-_tokens<tokensMintedDuringICO){tokensToSellAtVariablePrice=tokenSupply.sub(tokensMintedDuringICO);tokensToSellAtICOPrice=_tokens.sub(tokensToSellAtVariablePrice);}else{revert();}"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 45,
      "column": 2,
      "content": "usingSafeMathforuint;"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "91h3sa",
      "severity": 1,
      "line": 330,
      "column": 2,
      "content": "public"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 249,
      "column": 73,
      "content": "stringprovidedUnhashedPass"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 303,
      "column": 63,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 311,
      "column": 63,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 517,
      "column": 73,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 627,
      "column": 19,
      "content": "string_name"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 634,
      "column": 21,
      "content": "string_symbol"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1206,
      "column": 89,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1345,
      "column": 62,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 168,
      "column": 2,
      "content": "ZethrDividendCardsdivCardContract;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 211,
      "column": 2,
      "content": "uinticoOpenTime;"
    }
  ]
}