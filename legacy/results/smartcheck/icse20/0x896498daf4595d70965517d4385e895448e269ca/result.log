/unique_chucks/5/0x896498daf4595d70965517d4385e895448e269ca.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 172
column: 15
content: deposits[user].mul(percents).div(ONE_HUNDRED_PERCENTS).mul(now.sub(updatedAt[user]))

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 196
column: 12
content: HIGHEST_DIVIDEND_PERCENTS.sub(LOWEST_DIVIDEND_PERCENTS).mul(healthPercents().mul(45).div(ONE_HUNDRED_PERCENTS.mul(80).div(100)))

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 150
column: 12
content: for(uinti=0;referrer!=address(0)&&i<referralPercents.length;i++){uint256refAmount=msg.value.mul(referralPercents[i]).div(ONE_HUNDRED_PERCENTS);referrer.send(refAmount);refEarned[referrer]=refEarned[referrer].add(refAmount);emitReferrerPayed(msg.sender,i,referrer,refAmount);referrer=referrers[referrer];}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 212
column: 4
content: function_bytesToAddress(bytesdata)internalpurereturns(addressaddr){assembly{addr:=mload(add(data,0x14))}}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 80
column: 0
content: contractEfirica{usingSafeMathforuint256;uint256constantpublicONE_HUNDRED_PERCENTS=10000;uint256constantpublicLOWEST_DIVIDEND_PERCENTS=50;uint256constantpublicHIGHEST_DIVIDEND_PERCENTS=500;uint256constantpublicREFERRAL_ACTIVATION_TIME=1days;uint256[]publicreferralPercents=[500,300,200];boolpublicrunning=true;addresspublicadmin=msg.sender;uint256publictotalDeposits=0;mapping(address=>uint256)publicdeposits;mapping(address=>uint256)publicwithdrawals;mapping(address=>uint256)publicjoinedAt;mapping(address=>uint256)publicupdatedAt;mapping(address=>address)publicreferrers;mapping(address=>uint256)publicrefCount;mapping(address=>uint256)publicrefEarned;eventInvestorAdded(addressindexedinvestor);eventReferrerAdded(addressindexedinvestor,addressindexedreferrer);eventDepositAdded(addressindexedinvestor,uint256deposit,uint256amount);eventDividendPayed(addressindexedinvestor,uint256dividend);eventReferrerPayed(addressindexedinvestor,uint256indexedlevel,addressreferrer,uint256amount);eventAdminFeePayed(addressindexedinvestor,uint256amount);eventTotalDepositsChanged(uint256totalDeposits);eventBalanceChanged(uint256balance);function()publicpayable{require(running,"Project is not running");uint256dividends=dividendsForUser(msg.sender);if(dividends>0){if(dividends>=address(this).balance){dividends=address(this).balance;running=false;}msg.sender.transfer(dividends);withdrawals[msg.sender]=withdrawals[msg.sender].add(dividends);updatedAt[msg.sender]=now;emitDividendPayed(msg.sender,dividends);}if(msg.value>0){if(deposits[msg.sender]==0){joinedAt[msg.sender]=now;emitInvestorAdded(msg.sender);}updatedAt[msg.sender]=now;deposits[msg.sender]=deposits[msg.sender].add(msg.value);emitDepositAdded(msg.sender,deposits[msg.sender],msg.value);totalDeposits=totalDeposits.add(msg.value);emitTotalDepositsChanged(totalDeposits);if(referrers[msg.sender]==address(0)&&msg.data.length==20){addressreferrer=_bytesToAddress(msg.data);if(referrer!=address(0)&&deposits[referrer]>0&&now>=joinedAt[referrer].add(REFERRAL_ACTIVATION_TIME)){referrers[msg.sender]=referrer;refCount[referrer]+=1;emitReferrerAdded(msg.sender,referrer);}}referrer=referrers[msg.sender];for(uinti=0;referrer!=address(0)&&i<referralPercents.length;i++){uint256refAmount=msg.value.mul(referralPercents[i]).div(ONE_HUNDRED_PERCENTS);referrer.send(refAmount);refEarned[referrer]=refEarned[referrer].add(refAmount);emitReferrerPayed(msg.sender,i,referrer,refAmount);referrer=referrers[referrer];}uint256adminFee=msg.value.div(100);admin.send(adminFee);emitAdminFeePayed(msg.sender,adminFee);}emitBalanceChanged(address(this).balance);}functiondividendsForUser(addressuser)publicviewreturns(uint256){returndividendsForPercents(user,percentsForUser(user));}functiondividendsForPercents(addressuser,uint256percents)publicviewreturns(uint256){returndeposits[user].mul(percents).div(ONE_HUNDRED_PERCENTS).mul(now.sub(updatedAt[user])).div(1days);}functionpercentsForUser(addressuser)publicviewreturns(uint256){uint256percents=generalPercents();if(referrers[user]!=address(0)){percents=percents.mul(110).div(100);}returnpercents;}functiongeneralPercents()publicviewreturns(uint256){uint256health=healthPercents();if(health>=ONE_HUNDRED_PERCENTS.mul(80).div(100)){returnHIGHEST_DIVIDEND_PERCENTS;}uint256percents=LOWEST_DIVIDEND_PERCENTS.add(HIGHEST_DIVIDEND_PERCENTS.sub(LOWEST_DIVIDEND_PERCENTS).mul(healthPercents().mul(45).div(ONE_HUNDRED_PERCENTS.mul(80).div(100))).div(45));returnpercents;}functionhealthPercents()publicviewreturns(uint256){if(totalDeposits==0){returnONE_HUNDRED_PERCENTS;}returnaddress(this).balance.mul(ONE_HUNDRED_PERCENTS).div(totalDeposits);}function_bytesToAddress(bytesdata)internalpurereturns(addressaddr){assembly{addr:=mload(add(data,0x14))}}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 81
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 212
column: 4
content: function_bytesToAddress(bytesdata)internalpurereturns(addressaddr){assembly{addr:=mload(add(data,0x14))}}

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 91h3sa
severity: 1
line: 109
column: 15
content: public

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 212
column: 29
content: bytesdata

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 214
column: 8
content: assembly{addr:=mload(add(data,0x14))}

SOLIDITY_SAFEMATH :1
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_UPGRADE_TO_050 :2
SOLIDITY_USING_INLINE_ASSEMBLY :1
SOLIDITY_DIV_MUL :2
SOLIDITY_SHOULD_NOT_BE_PURE :1