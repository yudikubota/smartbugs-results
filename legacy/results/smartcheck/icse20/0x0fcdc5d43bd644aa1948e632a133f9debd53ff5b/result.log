/unique_chucks/20/0x0fcdc5d43bd644aa1948e632a133f9debd53ff5b.sol
line 143:16 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'memory', 'storage', 'emit', '_', 'revert', Identifier}
line 144:16 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'memory', 'storage', 'emit', '_', 'revert', Identifier}
line 195:12 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 198:24 mismatched input 'payable' expecting {',', ')'}
line 198:38 no viable alternative at input '_owner,'
line 198:38 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 198:59 mismatched input ')' expecting {';', '='}
line 199:19 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 200:14 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 203:4 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 128
column: 0
content: contractHashedTimelock{usingSafeMathforuint256;eventLogHTLCNew(bytes32indexedcontractId,addressindexedsender,addressindexedreceiver,uintamount,uinttimelock);eventLogHTLCWithdraw(bytes32indexedcontractId,bytes32preimage);eventLogHTLCRefund(bytes32indexedcontractId);structLockContract{addresspayablesender;addresspayablereceiver;uintamount;uinttimelock;boolwithdrawn;boolrefunded;bytes32preimage;}modifierfundsSent(){require(msg.value>0,"msg.value must be > 0");_;}modifierfutureTimelock(uint_time){require(_time>now+1hours,"timelock time must be in the future");_;}modifiercontractExists(bytes32_contractId){require(haveContract(_contractId),"contractId does not exist");_;}modifierhashlockMatches(bytes32_contractId,bytes32_x){require(_contractId==keccak256(abi.encodePacked(_x)),"hashlock hash does not match");_;}modifierwithdrawable(bytes32_contractId){require(contracts[_contractId].receiver==msg.sender,"withdrawable: not receiver");require(contracts[_contractId].withdrawn==false,"withdrawable: already withdrawn");_;}modifierrefundable(bytes32_contractId){require(contracts[_contractId].sender==msg.sender,"refundable: not sender");require(contracts[_contractId].refunded==false,"refundable: already refunded");require(contracts[_contractId].withdrawn==false,"refundable: already withdrawn");require(contracts[_contractId].timelock<=now,"refundable: timelock not yet passed");_;}modifieronlyOwner(){require(msg.sender==owner,"you are not an owner");_;}mapping(bytes32=>LockContract)contracts;uint256publicfeePercent;uintoneHundredPercent=10000;addresspayablepublicowner;uintfeeToWithdraw;constructor(addresspayable_owner,uint256_feePercent)public{feePercent=_feePercent;owner=_owner;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 14
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 82
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 130
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 198
column: 4
content: constructor(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 192
column: 4
content: mapping(bytes32=>LockContract)contracts;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 194
column: 4
content: uintoneHundredPercent=10000;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 196
column: 4
content: uintfeeToWithdraw;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 198
column: 32
content: _owner,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 198
column: 40
content: uint256_feePercent)public{

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 199
column: 8
content: feePercent=_feePercent;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 200
column: 8
content: owner=_owner;

SOLIDITY_VISIBILITY :8
SOLIDITY_SAFEMATH :1
SOLIDITY_PRAGMAS_VERSION :2
SOLIDITY_LOCKED_MONEY :1