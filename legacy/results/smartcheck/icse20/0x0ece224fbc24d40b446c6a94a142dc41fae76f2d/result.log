/unique_chucks/48/0x0ece224fbc24d40b446c6a94a142dc41fae76f2d.sol
line 4490:23 extraneous input 'orderData' expecting {',', ')'}
line 4511:23 extraneous input 'orderData' expecting {',', ')'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 176
column: 28
content: 0x3a20

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 177
column: 28
content: 0x2c20

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 178
column: 29
content: 0x203c

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 179
column: 27
content: 0x3e

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 180
column: 37
content: 0xf

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 139
column: 8
content: _owner=address(0)

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4722
column: 8
content: for(uint256a=0;a<accounts.length;a++){for(uint256b=a+1;b<accounts.length;b++){Require.that(!Account.equals(accounts[a],accounts[b]),FILE,"Cannot duplicate accounts",a,b);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4723
column: 12
content: for(uint256b=a+1;b<accounts.length;b++){Require.that(!Account.equals(accounts[a],accounts[b]),FILE,"Cannot duplicate accounts",a,b);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4751
column: 8
content: for(uint256i=0;i<actions.length;i++){Actions.ActionArgsmemoryarg=actions[i];Actions.ActionTypeactionType=arg.actionType;Actions.MarketLayoutmarketLayout=Actions.getMarketLayout(actionType);Actions.AccountLayoutaccountLayout=Actions.getAccountLayout(actionType);if(accountLayout!=Actions.AccountLayout.OnePrimary){Require.that(arg.accountId!=arg.otherAccountId,FILE,"Duplicate accounts in action",i);if(accountLayout==Actions.AccountLayout.TwoPrimary){primaryAccounts[arg.otherAccountId]=true;}else{assert(accountLayout==Actions.AccountLayout.PrimaryAndSecondary);Require.that(!primaryAccounts[arg.otherAccountId],FILE,"Requires non-primary account",arg.otherAccountId);}}primaryAccounts[arg.accountId]=true;if(marketLayout==Actions.MarketLayout.OneMarket){_updateMarket(state,cache,arg.primaryMarketId);}elseif(marketLayout==Actions.MarketLayout.TwoMarkets){Require.that(arg.primaryMarketId!=arg.secondaryMarketId,FILE,"Duplicate markets in action",i);_updateMarket(state,cache,arg.primaryMarketId);_updateMarket(state,cache,arg.secondaryMarketId);}else{assert(marketLayout==Actions.MarketLayout.ZeroMarkets);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4801
column: 12
content: for(uint256a=0;a<accounts.length;a++){if(!state.getPar(accounts[a],m).isZero()){_updateMarket(state,cache,m);break;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4833
column: 8
content: for(uint256i=0;i<actions.length;i++){Actions.ActionArgsmemoryaction=actions[i];Actions.ActionTypeactionType=action.actionType;if(actionType==Actions.ActionType.Deposit){_deposit(state,Actions.parseDepositArgs(accounts,action));}elseif(actionType==Actions.ActionType.Withdraw){_withdraw(state,Actions.parseWithdrawArgs(accounts,action));}elseif(actionType==Actions.ActionType.Transfer){_transfer(state,Actions.parseTransferArgs(accounts,action));}elseif(actionType==Actions.ActionType.Buy){_buy(state,Actions.parseBuyArgs(accounts,action));}elseif(actionType==Actions.ActionType.Sell){_sell(state,Actions.parseSellArgs(accounts,action));}elseif(actionType==Actions.ActionType.Trade){_trade(state,Actions.parseTradeArgs(accounts,action));}elseif(actionType==Actions.ActionType.Liquidate){_liquidate(state,Actions.parseLiquidateArgs(accounts,action),cache);}elseif(actionType==Actions.ActionType.Vaporize){_vaporize(state,Actions.parseVaporizeArgs(accounts,action),cache);}else{assert(actionType==Actions.ActionType.Call);_call(state,Actions.parseCallArgs(accounts,action));}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 4890
column: 8
content: for(uint256a=0;a<accounts.length;a++){Account.Infomemoryaccount=accounts[a];boolcollateralized=state.isCollateralized(account,cache,true);if(!primaryAccounts[a]){continue;}Require.that(collateralized,FILE,"Undercollateralized account",account.owner,account.number);if(state.getStatus(account)!=Account.Status.Normal){state.setStatus(account,Account.Status.Normal);}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 5659
column: 8
content: for(uint256i=0;i<args.length;i++){addressoperator=args[i].operator;booltrusted=args[i].trusted;g_state.operators[msg.sender][operator]=trusted;emitLogOperatorSet(msg.sender,operator,trusted);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 4722
column: 8
content: for(uint256a=0;a<accounts.length;a++){for(uint256b=a+1;b<accounts.length;b++){Require.that(!Account.equals(accounts[a],accounts[b]),FILE,"Cannot duplicate accounts",a,b);}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 4751
column: 8
content: for(uint256i=0;i<actions.length;i++){Actions.ActionArgsmemoryarg=actions[i];Actions.ActionTypeactionType=arg.actionType;Actions.MarketLayoutmarketLayout=Actions.getMarketLayout(actionType);Actions.AccountLayoutaccountLayout=Actions.getAccountLayout(actionType);if(accountLayout!=Actions.AccountLayout.OnePrimary){Require.that(arg.accountId!=arg.otherAccountId,FILE,"Duplicate accounts in action",i);if(accountLayout==Actions.AccountLayout.TwoPrimary){primaryAccounts[arg.otherAccountId]=true;}else{assert(accountLayout==Actions.AccountLayout.PrimaryAndSecondary);Require.that(!primaryAccounts[arg.otherAccountId],FILE,"Requires non-primary account",arg.otherAccountId);}}primaryAccounts[arg.accountId]=true;if(marketLayout==Actions.MarketLayout.OneMarket){_updateMarket(state,cache,arg.primaryMarketId);}elseif(marketLayout==Actions.MarketLayout.TwoMarkets){Require.that(arg.primaryMarketId!=arg.secondaryMarketId,FILE,"Duplicate markets in action",i);_updateMarket(state,cache,arg.primaryMarketId);_updateMarket(state,cache,arg.secondaryMarketId);}else{assert(marketLayout==Actions.MarketLayout.ZeroMarkets);}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 4801
column: 12
content: for(uint256a=0;a<accounts.length;a++){if(!state.getPar(accounts[a],m).isZero()){_updateMarket(state,cache,m);break;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 4833
column: 8
content: for(uint256i=0;i<actions.length;i++){Actions.ActionArgsmemoryaction=actions[i];Actions.ActionTypeactionType=action.actionType;if(actionType==Actions.ActionType.Deposit){_deposit(state,Actions.parseDepositArgs(accounts,action));}elseif(actionType==Actions.ActionType.Withdraw){_withdraw(state,Actions.parseWithdrawArgs(accounts,action));}elseif(actionType==Actions.ActionType.Transfer){_transfer(state,Actions.parseTransferArgs(accounts,action));}elseif(actionType==Actions.ActionType.Buy){_buy(state,Actions.parseBuyArgs(accounts,action));}elseif(actionType==Actions.ActionType.Sell){_sell(state,Actions.parseSellArgs(accounts,action));}elseif(actionType==Actions.ActionType.Trade){_trade(state,Actions.parseTradeArgs(accounts,action));}elseif(actionType==Actions.ActionType.Liquidate){_liquidate(state,Actions.parseLiquidateArgs(accounts,action),cache);}elseif(actionType==Actions.ActionType.Vaporize){_vaporize(state,Actions.parseVaporizeArgs(accounts,action),cache);}else{assert(actionType==Actions.ActionType.Call);_call(state,Actions.parseCallArgs(accounts,action));}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 4890
column: 8
content: for(uint256a=0;a<accounts.length;a++){Account.Infomemoryaccount=accounts[a];boolcollateralized=state.isCollateralized(account,cache,true);if(!primaryAccounts[a]){continue;}Require.that(collateralized,FILE,"Undercollateralized account",account.owner,account.number);if(state.getStatus(account)!=Account.Status.Normal){state.setStatus(account,Account.Status.Normal);}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 5659
column: 8
content: for(uint256i=0;i<args.length;i++){addressoperator=args[i].operator;booltrusted=args[i].trusted;g_state.operators[msg.sender][operator]=trusted;emitLogOperatorSet(msg.sender,operator,trusted);}

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 96
column: 12
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1095
column: 12
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 475
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 984
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1250
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1717
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 4655
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 5753
column: 4
content: usingSafeMathforuint32;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 5754
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 344
column: 4
content: functionstringify(bytes32input)privatepurereturns(bytesmemory){bytesmemoryresult=abi.encodePacked(input);for(uint256i=32;i>0;){i--;if(result[i]!=0){uint256length=i+1;assembly{mstore(result,length)}returnresult;}}returnnewbytes(0);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1605
column: 4
content: functioncheckSuccess()privatepurereturns(bool){uint256returnValue=0;assembly{switchreturndatasizecase0x0{returnValue:=1}case0x20{returndatacopy(0x0,0x0,0x20)returnValue:=mload(0x0)}default{}}returnreturnValue!=0;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 6117
column: 4
content: functionparseCallArgs(bytesmemorydata)privatepurereturns(uint256,uint32){Require.that(data.length==64,FILE,"Call data invalid length",data.length);uint256marketId;uint256rawExpiry;assembly{marketId:=mload(add(data,32))rawExpiry:=mload(add(data,64))}return(marketId,Math.to32(rawExpiry));}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 6149
column: 4
content: functionparseTradeArgs(bytesmemorydata)privatepurereturns(uint256,uint32){Require.that(data.length==64,FILE,"Trade data invalid length",data.length);uint256owedMarketId;uint256rawExpiry;assembly{owedMarketId:=mload(add(data,32))rawExpiry:=mload(add(data,64))}return(owedMarketId,Math.to32(rawExpiry));}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1393
column: 16
content: (Types.Weimemory,Types.Weimemory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1993
column: 16
content: (Monetary.Valuememory,Monetary.Valuememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 2118
column: 16
content: (Types.Parmemory,Types.Weimemory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 2162
column: 16
content: (Types.Parmemory,Types.Weimemory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 3374
column: 16
content: (Storage.Marketmemory,Interest.Indexmemory,Monetary.Pricememory,Interest.Ratememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 3481
column: 16
content: (Monetary.Valuememory,Monetary.Valuememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 3503
column: 16
content: (Monetary.Valuememory,Monetary.Valuememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 3522
column: 16
content: (address[]memory,Types.Par[]memory,Types.Wei[]memory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 3611
column: 16
content: (Monetary.Valuememory,Monetary.Valuememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 4741
column: 16
content: (bool[]memory,Cache.MarketCachememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 5509
column: 16
content: (bool,Types.Weimemory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 5554
column: 16
content: (Monetary.Pricememory,Monetary.Pricememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 5827
column: 16
content: (Monetary.Pricememory,Monetary.Pricememory)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 6122
column: 16
content: (uint256,uint32)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 6154
column: 16
content: (uint256,uint32)

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 5449
column: 29
content: callFunction(msg.sender,args.account,args.data)

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 365
column: 16
content: assembly{mstore(result,length)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1614
column: 8
content: assembly{switchreturndatasizecase0x0{returnValue:=1}case0x20{returndatacopy(0x0,0x0,0x20)returnValue:=mload(0x0)}default{}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 6138
column: 8
content: assembly{marketId:=mload(add(data,32))rawExpiry:=mload(add(data,64))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 6170
column: 8
content: assembly{owedMarketId:=mload(add(data,32))rawExpiry:=mload(add(data,64))}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 173
column: 4
content: uint256constantASCII_ZERO=48;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 174
column: 4
content: uint256constantASCII_RELATIVE_ZERO=87;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 175
column: 4
content: uint256constantASCII_LOWER_EX=120;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 176
column: 4
content: bytes2constantCOLON=0x3a20;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 177
column: 4
content: bytes2constantCOMMA=0x2c20;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 178
column: 4
content: bytes2constantLPAREN=0x203c;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 179
column: 4
content: byteconstantRPAREN=0x3e;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 180
column: 4
content: uint256constantFOUR_BIT_MASK=0xf;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 479
column: 4
content: bytes32constantFILE="Math";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 988
column: 4
content: uint256constantBASE=10**18;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1254
column: 4
content: bytes32constantFILE="Interest";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1255
column: 4
content: uint64constantBASE=10**18;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1502
column: 4
content: bytes32constantFILE="Token";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1721
column: 4
content: bytes32constantFILE="Storage";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 2331
column: 4
content: Storage.Stateg_state;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 2349
column: 4
content: bytes32constantFILE="AdminImpl";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 3027
column: 4
content: bytes32FILE="Getters";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 3639
column: 4
content: bytes32constantFILE="Actions";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4531
column: 4
content: bytes32constantFILE="Exchange";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4662
column: 4
content: bytes32constantFILE="OperationImpl";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 5708
column: 4
content: bytes32constantFILE="OnlySolo";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 5760
column: 4
content: bytes32constantFILE="Expiry";

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 5778
column: 4
content: mapping(address=>mapping(uint256=>mapping(uint256=>uint32)))g_expiries;

SOLIDITY_VISIBILITY :23
SOLIDITY_SAFEMATH :7
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :2
SOLIDITY_EXTRA_GAS_IN_LOOPS :7
SOLIDITY_ADDRESS_HARDCODED :6
SOLIDITY_GAS_LIMIT_IN_LOOPS :6
SOLIDITY_USING_INLINE_ASSEMBLY :4
SOLIDITY_UNCHECKED_CALL :1
SOLIDITY_SHOULD_RETURN_STRUCT :15
SOLIDITY_SHOULD_NOT_BE_PURE :4