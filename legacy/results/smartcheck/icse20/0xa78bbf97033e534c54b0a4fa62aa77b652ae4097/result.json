{
  "contract": "0xa78bbf97033e534c54b0a4fa62aa77b652ae4097",
  "tool": "smartcheck",
  "start": 1563261078.0584815,
  "end": 1563261092.9996877,
  "duration": 14.941206216812134,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 22,
      "column": 53,
      "content": "0xf0b9e5ba"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 53,
      "column": 53,
      "content": "0x150b7a02"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 154,
      "column": 39,
      "content": "0xc0ee0b8a"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 196,
      "column": 54,
      "content": "0x1626ba7e"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 270,
      "column": 46,
      "content": "0x19"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 508,
      "column": 43,
      "content": "0xffffffff"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 940,
      "column": 8,
      "content": "owner=address(0)"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 514,
      "column": 8,
      "content": "for(uint256i=0;i<_keys.length;++i){delete(authorizations[shiftedVersion+uint256(_keys[i])]);}"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "58bdd3",
      "severity": 1,
      "line": 992,
      "column": 4,
      "content": "functioncreateClone(addresstarget)internalreturns(addressresult){bytes20targetBytes=bytes20(target);assembly{letclone:=mload(0x40)mstore(clone,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)mstore(add(clone,0x14),targetBytes)mstore(add(clone,0x28),0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)result:=create(0,clone,0x37)}}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 514,
      "column": 8,
      "content": "for(uint256i=0;i<_keys.length;++i){delete(authorizations[shiftedVersion+uint256(_keys[i])]);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 263,
      "column": 0,
      "content": "contractCoreWalletisERC721Receivable,ERC223Receiver,ERC1271{usingECDSAforbytes;bytepublicconstantEIP191_VERSION_DATA=byte(0);bytepublicconstantEIP191_PREFIX=byte(0x19);stringpublicconstantVERSION=\"1.0.0\";uint256publicconstantAUTH_VERSION_INCREMENTOR=(1<<160);uint256publicauthVersion;mapping(uint256=>uint256)publicauthorizations;mapping(address=>uint256)publicnonces;addresspublicrecoveryAddress;boolpublicinitialized;modifieronlyRecoveryAddress(){require(msg.sender==recoveryAddress,\"sender must be recovery address\");_;}modifieronlyOnce(){require(!initialized,\"must not already be initialized\");initialized=true;_;}modifieronlyInvoked(){require(msg.sender==address(this),\"must be called from `invoke()`\");_;}eventAuthorized(addressauthorizedAddress,uint256cosigner);eventEmergencyRecovery(addressauthorizedAddress,uint256cosigner);eventRecoveryAddressChanged(addresspreviousRecoveryAddress,addressnewRecoveryAddress);eventReceived(addressfrom,uintvalue);eventInvocationSuccess(bytes32hash,uint256result,uint256numOperations);functioninit(address_authorizedAddress,uint256_cosigner,address_recoveryAddress)publiconlyOnce{require(_authorizedAddress!=_recoveryAddress,\"Do not use the recovery address as an authorized address.\");require(address(_cosigner)!=_recoveryAddress,\"Do not use the recovery address as a cosigner.\");require(_authorizedAddress!=address(0),\"Authorized addresses must not be zero.\");require(address(_cosigner)!=address(0),\"Initial cosigner must not be zero.\");recoveryAddress=_recoveryAddress;authVersion=AUTH_VERSION_INCREMENTOR;authorizations[authVersion+uint256(_authorizedAddress)]=_cosigner;emitAuthorized(_authorizedAddress,_cosigner);}function()externalpayable{require(msg.data.length==0,\"Invalid transaction.\");if(msg.value>0){emitReceived(msg.sender,msg.value);}}functionsetAuthorized(address_authorizedAddress,uint256_cosigner)externalonlyInvoked{require(_authorizedAddress!=address(0),\"Authorized addresses must not be zero.\");require(_authorizedAddress!=recoveryAddress,\"Do not use the recovery address as an authorized address.\");require(address(_cosigner)==address(0)||address(_cosigner)!=recoveryAddress,\"Do not use the recovery address as a cosigner.\");authorizations[authVersion+uint256(_authorizedAddress)]=_cosigner;emitAuthorized(_authorizedAddress,_cosigner);}functionemergencyRecovery(address_authorizedAddress,uint256_cosigner)externalonlyRecoveryAddress{require(_authorizedAddress!=address(0),\"Authorized addresses must not be zero.\");require(_authorizedAddress!=recoveryAddress,\"Do not use the recovery address as an authorized address.\");require(address(_cosigner)!=address(0),\"The cosigner must not be zero.\");authVersion+=AUTH_VERSION_INCREMENTOR;authorizations[authVersion+uint256(_authorizedAddress)]=_cosigner;emitEmergencyRecovery(_authorizedAddress,_cosigner);}functionsetRecoveryAddress(address_recoveryAddress)externalonlyInvoked{require(address(authorizations[authVersion+uint256(_recoveryAddress)])==address(0),\"Do not use an authorized address as the recovery address.\");addressprevious=recoveryAddress;recoveryAddress=_recoveryAddress;emitRecoveryAddressChanged(previous,recoveryAddress);}functionrecoverGas(uint256_version,address[]_keys)external{require(_version>0&&_version<0xffffffff,\"Invalid version number.\");uint256shiftedVersion=_version<<160;require(shiftedVersion<authVersion,\"You can only recover gas from expired authVersions.\");for(uint256i=0;i<_keys.length;++i){delete(authorizations[shiftedVersion+uint256(_keys[i])]);}}functionisValidSignature(bytes32hash,bytes_signature)externalviewreturns(bytes4){bytes32operationHash=keccak256(abi.encodePacked(EIP191_PREFIX,EIP191_VERSION_DATA,this,hash));bytes32[2]memoryr;bytes32[2]memorys;uint8[2]memoryv;addresssigner;addresscosigner;if(_signature.length==65){(r[0],s[0],v[0])=_signature.extractSignature(0);signer=ecrecover(operationHash,v[0],r[0],s[0]);cosigner=signer;}elseif(_signature.length==130){(r[0],s[0],v[0])=_signature.extractSignature(0);(r[1],s[1],v[1])=_signature.extractSignature(65);signer=ecrecover(operationHash,v[0],r[0],s[0]);cosigner=ecrecover(operationHash,v[1],r[1],s[1]);}else{return0;}if(signer==address(0)){return0;}if(cosigner==address(0)){return0;}if(address(authorizations[authVersion+uint256(signer)])!=cosigner){return0;}returnERC1271_VALIDSIGNATURE;}functionsupportsInterface(bytes4interfaceID)externalpurereturns(bool){returninterfaceID==this.supportsInterface.selector||interfaceID==ERC721_RECEIVED_FINAL||interfaceID==ERC721_RECEIVED_DRAFT||interfaceID==ERC223_ID||interfaceID==ERC1271_VALIDSIGNATURE;}functioninvoke0(bytesdata)external{require(address(authorizations[authVersion+uint256(msg.sender)])==msg.sender,\"Invalid authorization.\");internalInvoke(0,data);}functioninvoke1CosignerSends(uint8v,bytes32r,bytes32s,uint256nonce,addressauthorizedAddress,bytesdata)external{require(v==27||v==28,\"Invalid signature version.\");bytes32operationHash=keccak256(abi.encodePacked(EIP191_PREFIX,EIP191_VERSION_DATA,this,nonce,authorizedAddress,data));addresssigner=ecrecover(operationHash,v,r,s);require(signer!=address(0),\"Invalid signature.\");require(nonce==nonces[signer],\"must use correct nonce\");require(signer==authorizedAddress,\"authorized addresses must be equal\");addressrequiredCosigner=address(authorizations[authVersion+uint256(signer)]);require(requiredCosigner==signer||requiredCosigner==msg.sender,\"Invalid authorization.\");nonces[signer]=nonce+1;internalInvoke(operationHash,data);}functioninvoke1SignerSends(uint8v,bytes32r,bytes32s,bytesdata)external{require(v==27||v==28,\"Invalid signature version.\");uint256nonce=nonces[msg.sender];bytes32operationHash=keccak256(abi.encodePacked(EIP191_PREFIX,EIP191_VERSION_DATA,this,nonce,msg.sender,data));addresscosigner=ecrecover(operationHash,v,r,s);require(cosigner!=address(0),\"Invalid signature.\");addressrequiredCosigner=address(authorizations[authVersion+uint256(msg.sender)]);require(requiredCosigner==cosigner||requiredCosigner==msg.sender,\"Invalid authorization.\");nonces[msg.sender]=nonce+1;internalInvoke(operationHash,data);}functioninvoke2(uint8[2]v,bytes32[2]r,bytes32[2]s,uint256nonce,addressauthorizedAddress,bytesdata)external{require(v[0]==27||v[0]==28,\"invalid signature version v[0]\");require(v[1]==27||v[1]==28,\"invalid signature version v[1]\");bytes32operationHash=keccak256(abi.encodePacked(EIP191_PREFIX,EIP191_VERSION_DATA,this,nonce,authorizedAddress,data));addresssigner=ecrecover(operationHash,v[0],r[0],s[0]);addresscosigner=ecrecover(operationHash,v[1],r[1],s[1]);require(signer!=address(0),\"Invalid signature for signer.\");require(cosigner!=address(0),\"Invalid signature for cosigner.\");require(signer==authorizedAddress,\"authorized addresses must be equal\");require(nonce==nonces[signer],\"must use correct nonce for signer\");addressrequiredCosigner=address(authorizations[authVersion+uint256(signer)]);require(requiredCosigner==signer||requiredCosigner==cosigner,\"Invalid authorization.\");nonces[signer]++;internalInvoke(operationHash,data);}functioninternalInvoke(bytes32operationHash,bytesdata)internal{uint256numOps;uint256result;stringmemoryinvalidLengthMessage=\"Data field too short\";stringmemorycallFailed=\"Call failed\";require(data.length>=85,invalidLengthMessage);assembly{letmemPtr:=add(data,32)letrevertFlag:=byte(0,mload(memPtr))letendPtr:=add(memPtr,mload(data))memPtr:=add(memPtr,1)for{}lt(memPtr,endPtr){}{letlen:=mload(add(memPtr,52))letopEnd:=add(len,add(memPtr,84))ifgt(opEnd,endPtr){revert(add(invalidLengthMessage,32),mload(invalidLengthMessage))}ifeq(0,call(gas,div(mload(memPtr),exp(2,96)),mload(add(memPtr,20)),add(memPtr,84),len,0,0)){switchrevertFlagcase1{revert(add(callFailed,32),mload(callFailed))}default{result:=or(result,exp(2,numOps))}}numOps:=add(numOps,1)memPtr:=opEnd}}emitInvocationSuccess(operationHash,result,numOps);}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 1033,
      "column": 4,
      "content": "functionsetCloneWalletAddress(address_newCloneWalletAddress)publiconlyOwner{cloneWalletAddress=_newCloneWalletAddress;}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 3,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 40,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 78,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 147,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 191,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 214,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 242,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 858,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 881,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 905,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 960,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 983,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1006,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 224,
      "column": 4,
      "content": "functionextractSignature(bytessigData,uint256offset)internalpurereturns(bytes32r,bytes32s,uint8v){assembly{letdataPointer:=add(sigData,offset)r:=mload(add(dataPointer,0x20))s:=mload(add(dataPointer,0x40))v:=byte(0,mload(add(dataPointer,0x60)))}return(r,s,v);}"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "7d54ca",
      "severity": 1,
      "line": 224,
      "column": 84,
      "content": "(bytes32r,bytes32s,uint8v)"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 70,
      "column": 8,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 128,
      "column": 8,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 167,
      "column": 55,
      "content": "bytes_data"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 224,
      "column": 30,
      "content": "bytessigData"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 766,
      "column": 51,
      "content": "bytesdata"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 229,
      "column": 8,
      "content": "assembly{letdataPointer:=add(sigData,offset)r:=mload(add(dataPointer,0x20))s:=mload(add(dataPointer,0x40))v:=byte(0,mload(add(dataPointer,0x60)))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 785,
      "column": 8,
      "content": "assembly{letmemPtr:=add(data,32)letrevertFlag:=byte(0,mload(memPtr))letendPtr:=add(memPtr,mload(data))memPtr:=add(memPtr,1)for{}lt(memPtr,endPtr){}{letlen:=mload(add(memPtr,52))letopEnd:=add(len,add(memPtr,84))ifgt(opEnd,endPtr){revert(add(invalidLengthMessage,32),mload(invalidLengthMessage))}ifeq(0,call(gas,div(mload(memPtr),exp(2,96)),mload(add(memPtr,20)),add(memPtr,84),len,0,0)){switchrevertFlagcase1{revert(add(callFailed,32),mload(callFailed))}default{result:=or(result,exp(2,numOps))}}numOps:=add(numOps,1)memPtr:=opEnd}}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 994,
      "column": 8,
      "content": "assembly{letclone:=mload(0x40)mstore(clone,0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)mstore(add(clone,0x14),targetBytes)mstore(add(clone,0x28),0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)result:=create(0,clone,0x37)}"
    }
  ]
}