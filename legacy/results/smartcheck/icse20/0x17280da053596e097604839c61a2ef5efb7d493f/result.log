/unique_chucks/4/0x17280da053596e097604839c61a2ef5efb7d493f.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 84
column: 4
content: owner=address(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 620
column: 32
content: balances[address(0)]

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 207
column: 2
content: functionapprove(address_spender,uint256_value)publicreturns(bool){allowed[msg.sender][_spender]=_value;emitApproval(msg.sender,_spender,_value);returntrue;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 355
column: 4
content: functionsetReleaseAgent(addressaddr)publiconlyOwnerinReleaseState(false){releaseAgent=addr;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 364
column: 4
content: functionsetTransferAgent(addressaddr,boolstate)publiconlyOwnerinReleaseState(false){transferAgents[addr]=state;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 468
column: 4
content: functionsetUpgradeAgent(addressagent)external{require(canUpgrade(),"It's required to be in canUpgrade() condition when setting upgrade agent.");require(agent!=address(0),"Agent is required to be an non-empty address when setting upgrade agent.");require(msg.sender==upgradeMaster,"Message sender is required to be the upgradeMaster when setting upgrade agent.");require(getUpgradeState()!=UpgradeState.ReadyToUpgrade,"Upgrade state is required to not be upgrading when setting upgrade agent.");require(address(upgradeAgent)==address(0),"upgradeAgent once set, cannot be reset");upgradeAgent=UpgradeAgent(agent);require(upgradeAgent.isUpgradeAgent(),"The provided updateAgent contract is required to be compliant to the UpgradeAgent interface method when setting upgrade agent.");require(upgradeAgent.originalSupply()==totalSupply_,"The provided upgradeAgent contract's originalSupply is required to be equivalent to existing contract's totalSupply_ when setting upgrade agent.");emitUpgradeAgentSet(upgradeAgent);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 507
column: 4
content: functionsetUpgradeMaster(addressmaster)public{require(master!=address(0),"The provided upgradeMaster is required to be a non-empty address when setting upgrade master.");require(msg.sender==upgradeMaster,"Message sender is required to be the original upgradeMaster when setting (new) upgrade master.");upgradeMaster=master;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 114
column: 2
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 403
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 552
column: 16
content: string_name

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 552
column: 30
content: string_symbol

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 515
column: 4
content: boolcanUpgrade_=true;

SOLIDITY_VISIBILITY :1
SOLIDITY_SAFEMATH :2
SOLIDITY_OVERPOWERED_ROLE :4
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_ADDRESS_HARDCODED :2
SOLIDITY_UPGRADE_TO_050 :2
SOLIDITY_ERC20_APPROVE :1