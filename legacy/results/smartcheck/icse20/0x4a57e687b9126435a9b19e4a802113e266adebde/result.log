/unique_chucks/4/0x4a57e687b9126435a9b19e4a802113e266adebde.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 213
column: 4
content: pendingOwner=address(0)

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 250
column: 2
content: functionapprove(address_spender,uint256_value)publicreturns(bool){allowed[msg.sender][_spender]=_value;emitApproval(msg.sender,_spender,_value);returntrue;}

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 336
column: 2
content: functionapprove(address_spender,uint256_value)publicwhenNotPausedreturns(bool){returnsuper.approve(_spender,_value);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 441
column: 2
content: functionsetUpgradeAgent(UpgradeAgent_upgradeAgent)externalonlyOwner{require(canUpgrade(),"Ensure the token is upgradeable in the first place");require(_upgradeAgent!=address(0),"Ensure upgrade agent address is not blank");require(getUpgradeState()!=UpgradeState.Upgrading,"Ensure upgrade has not started");upgradeAgent=_upgradeAgent;require(upgradeAgent.isUpgradeAgent(),"New upgradeAgent must be UpgradeAgent");require(upgradeAgent.originalSupply()==totalSupply_,"Make sure that token supplies match in source and target token contracts");emitUpgradeAgentSet(upgradeAgent);}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 149
column: 2
content: usingSafeMathforuint256;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 151
column: 2
content: mapping(address=>uint256)balances;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 153
column: 2
content: uint256totalSupply_;

SOLIDITY_VISIBILITY :2
SOLIDITY_SAFEMATH :1
SOLIDITY_OVERPOWERED_ROLE :1
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_ERC20_APPROVE :2