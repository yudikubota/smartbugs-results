/unique_chucks/6/0x00e126e283b0e116470a0f6d6108f314e5cf2a0e.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 533
column: 51
content: 0xff

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 870
column: 19
content: (address(0))

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 890
column: 12
content: returnaddress(0)

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 1134
column: 12
content: sl.addr=address(0)

ruleId: SOLIDITY_ARRAY_LENGTH_MANIPULATION
patternId: 872bdd
severity: 1
line: 391
column: 8
content: accounts.length=SafeMath.add(accounts.length,bulkSize)

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 244
column: 8
content: for(uinti=0;i<proof.length;i++){uint256bit=k%2;k=k/2;if(bit==0)hash=combinedHash(hash,proof[i]);elsehash=combinedHash(proof[i],hash);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 665
column: 8
content: for(uinti=2;i<payData.length;i+=bytesPerId){assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 608
column: 4
content: functiongetDataAtIndex(bytesmemorydata,uintindex)publicpurereturns(uint64amount,uint32payIndex){require(data.length>0,"no data provided");require(data.length%12==0,"wrong data format, data length should be multiple of 12");uintmod1=2**64;uintmod2=2**32;uinti=SafeMath.mul(index,12);require(i<=SafeMath.sub(data.length,12),"index * 12 must be less or equal than (data.length - 12)");assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 244
column: 8
content: for(uinti=0;i<proof.length;i++){uint256bit=k%2;k=k/2;if(bit==0)hash=combinedHash(hash,proof[i]);elsehash=combinedHash(proof[i],hash);}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 9
column: 16
content: ^

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 576
column: 4
content: functiongetDataSum(bytesmemorydata)publicpurereturns(uintsum){require(data.length>0,"no data provided");require(data.length%12==0,"wrong data format, data length should be multiple of 12");uintn=SafeMath.div(data.length,12);uintmodulus=2**64;sum=0;for(uinti=0;i<n;i++){assembly{letamount:=mod(mload(add(data,add(8,mul(i,12)))),modulus)letresult:=add(sum,amount)switchor(gt(result,modulus),eq(result,modulus))case1{revert(0,0)}default{sum:=result}}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 608
column: 4
content: functiongetDataAtIndex(bytesmemorydata,uintindex)publicpurereturns(uint64amount,uint32payIndex){require(data.length>0,"no data provided");require(data.length%12==0,"wrong data format, data length should be multiple of 12");uintmod1=2**64;uintmod2=2**32;uinti=SafeMath.mul(index,12);require(i<=SafeMath.sub(data.length,12),"index * 12 must be less or equal than (data.length - 12)");assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 658
column: 4
content: functiongetPayDataSum(bytesmemorypayData,uintid,uintamount)publicpurereturns(uintsum){uintbytesPerId=getBytesPerId(payData);uintmodulus=1<<SafeMath.mul(bytesPerId,8);uintcurrentId=0;sum=0;for(uinti=2;i<payData.length;i+=bytesPerId){assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 860
column: 4
content: functionrecoverHelper(bytes32hash,bytessig)publicpurereturns(address){bytesmemoryprefix="\x19Ethereum Signed Message:\n32";bytes32prefixedHash=keccak256(abi.encodePacked(prefix,hash));bytes32r;bytes32s;uint8v;if(sig.length!=65){return(address(0));}assembly{r:=mload(add(sig,32))s:=mload(add(sig,64))v:=byte(0,mload(add(sig,96)))}if(v<27){v+=27;}if(v!=27&&v!=28){returnaddress(0);}returnecrecover(prefixedHash,v,r,s);}

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 631
column: 27
content: bytespayData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 688
column: 29
content: bytespayData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 860
column: 41
content: bytessig

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 590
column: 12
content: assembly{letamount:=mod(mload(add(data,add(8,mul(i,12)))),modulus)letresult:=add(sum,amount)switchor(gt(result,modulus),eq(result,modulus))case1{revert(0,0)}default{sum:=result}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 619
column: 8
content: assembly{amount:=mod(mload(add(data,add(8,i))),mod1)payIndex:=mod(mload(add(data,add(12,i))),mod2)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 670
column: 12
content: assembly{currentId:=add(currentId,mod(mload(add(payData,add(i,bytesPerId))),modulus))switcheq(currentId,id)case1{sum:=add(sum,amount)}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 877
column: 8
content: assembly{r:=mload(add(sig,32))s:=mload(add(sig,64))v:=byte(0,mload(add(sig,96)))}

SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_ARRAY_LENGTH_MANIPULATION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :1
SOLIDITY_EXTRA_GAS_IN_LOOPS :2
SOLIDITY_ADDRESS_HARDCODED :4
SOLIDITY_UPGRADE_TO_050 :3
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
SOLIDITY_USING_INLINE_ASSEMBLY :4
SOLIDITY_SHOULD_NOT_BE_PURE :4