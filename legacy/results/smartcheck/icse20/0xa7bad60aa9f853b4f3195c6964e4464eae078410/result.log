/unique_chucks/11/0xa7bad60aa9f853b4f3195c6964e4464eae078410.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 85
column: 2
content: functionowner()constantreturns(address){returnsale.base.owner;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 89
column: 2
content: functiontokensPerEth()constantreturns(uint256){returnsale.base.tokensPerEth;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 93
column: 2
content: functionexchangeRate()constantreturns(uint256){returnsale.base.exchangeRate;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 97
column: 2
content: functioncapAmount()constantreturns(uint256){returnsale.base.capAmount;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 101
column: 2
content: functionstartTime()constantreturns(uint256){returnsale.base.startTime;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 105
column: 2
content: functionendTime()constantreturns(uint256){returnsale.base.endTime;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 109
column: 2
content: functionchangeInterval()constantreturns(uint256){returnsale.changeInterval;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 113
column: 2
content: functioncrowdsaleActive()constantreturns(bool){returnsale.crowdsaleActive();}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 117
column: 2
content: functionfirstPriceChange()constantreturns(uint256){returnsale.tokenPricePoints[1];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 121
column: 2
content: functioncrowdsaleEnded()constantreturns(bool){returnsale.crowdsaleEnded();}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 125
column: 2
content: functionethRaised()constantreturns(uint256){returnsale.base.ownerBalance;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 129
column: 2
content: functiontokensSold()constantreturns(uint256){returnsale.base.startingTokenBalance-sale.base.token.balanceOf(this);}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 133
column: 2
content: functioncontributionAmount(address_buyer)constantreturns(uint256){returnsale.base.hasContributed[_buyer];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 137
column: 2
content: functiontokenPurchaseAmount(address_buyer)constantreturns(uint256){returnsale.base.withdrawTokensMap[_buyer];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 141
column: 2
content: functionleftoverWeiAmount(address_buyer)constantreturns(uint256){returnsale.base.leftoverWei[_buyer];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 330
column: 2
content: functioncrowdsaleActive(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.crowdsaleActive();}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 334
column: 2
content: functioncrowdsaleEnded(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.crowdsaleEnded();}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 338
column: 2
content: functionvalidPurchase(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.validPurchase();}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 387
column: 2
content: functionname()constantreturns(string){returntoken.name;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 391
column: 2
content: functionsymbol()constantreturns(string){returntoken.symbol;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 395
column: 2
content: functiondecimals()constantreturns(uint8){returntoken.decimals;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 399
column: 2
content: functiontotalSupply()constantreturns(uint256){returntoken.totalSupply;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 403
column: 2
content: functioninitialSupply()constantreturns(uint256){returntoken.INITIAL_SUPPLY;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 407
column: 2
content: functionbalanceOf(addresswho)constantreturns(uint256){returntoken.balanceOf(who);}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 411
column: 2
content: functionallowance(addressowner,addressspender)constantreturns(uint256){returntoken.allowance(owner,spender);}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 553
column: 2
content: functioncrowdsaleActive(CrowdsaleStoragestorageself)constantreturns(bool){return(now>=self.startTime&&now<=self.endTime);}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 560
column: 2
content: functioncrowdsaleEnded(CrowdsaleStoragestorageself)constantreturns(bool){returnnow>self.endTime;}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 567
column: 2
content: functionvalidPurchase(CrowdsaleStoragestorageself)internalconstantreturns(bool){boolnonZeroPurchase=msg.value!=0;if(crowdsaleActive(self)&&nonZeroPurchase){returntrue;}else{LogErrorMsg("Invalid Purchase! Check send time and amount of ether.");returnfalse;}}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 850
column: 2
content: functionbalanceOf(TokenStoragestorageself,address_owner)constantreturns(uint256balance){returnself.balances[_owner];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 870
column: 2
content: functionallowance(TokenStoragestorageself,address_owner,address_spender)constantreturns(uint256remaining){returnself.allowed[_owner][_spender];}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 1002
column: 2
content: functiontimes(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}if(err)Err("times func overflow");}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 1021
column: 2
content: functiondividedBy(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{switchiszero(b)case0{res:=div(a,b)mstore(add(mload(0x40),0x20),res)return(mload(0x40),0x40)}}Err("tried to divide by zero");return(true,0);}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 1040
column: 2
content: functionplus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}if(err)Err("plus func overflow");}

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 1059
column: 2
content: functionminus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}if(err)Err("minus func underflow");}

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 540
column: 21
content: ((_capAmountInCents/_fallbackExchangeRate)+1)*(10**18)

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 423
column: 2
content: functionapprove(addressspender,uintvalue)returns(boolok){returntoken.approve(spender,value);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 1002
column: 2
content: functiontimes(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}if(err)Err("times func overflow");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 1040
column: 2
content: functionplus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}if(err)Err("plus func overflow");}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 1059
column: 2
content: functionminus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}if(err)Err("minus func underflow");}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 22
column: 0
content: contractENOCrowdsale{usingDirectCrowdsaleLibforDirectCrowdsaleLib.DirectCrowdsaleStorage;DirectCrowdsaleLib.DirectCrowdsaleStoragesale;functionENOCrowdsale(addressowner,uint256capAmountInCents,uint256startTime,uint256endTime,uint256[]tokenPricePoints,uint256fallbackExchangeRate,uint256changeInterval,uint8percentBurn,CrowdsaleTokentoken){sale.init(owner,capAmountInCents,startTime,endTime,tokenPricePoints,fallbackExchangeRate,changeInterval,percentBurn,token);}eventLogTokensBought(addressindexedbuyer,uint256amount);eventLogErrorMsg(uint256amount,stringMsg);eventLogTokenPriceChange(uint256amount,stringMsg);eventLogTokensWithdrawn(addressindexed_bidder,uint256Amount);eventLogWeiWithdrawn(addressindexed_bidder,uint256Amount);eventLogOwnerEthWithdrawn(addressindexedowner,uint256amount,stringMsg);eventLogNoticeMsg(address_buyer,uint256value,stringMsg);eventLogErrorMsg(stringMsg);function()payable{sendPurchase();}functionsendPurchase()payablereturns(bool){returnsale.receivePurchase(msg.value);}functionwithdrawOwnerEth()returns(bool){returnsale.withdrawOwnerEth();}functionsetTokenExchangeRate(uint256_exchangeRate)returns(bool){returnsale.setTokenExchangeRate(_exchangeRate);}functionsetTokens()returns(bool){returnsale.setTokens();}functionwithdrawTokens()returns(bool){returnsale.withdrawTokens();}functionwithdrawLeftoverWei()returns(bool){returnsale.withdrawLeftoverWei();}functionowner()constantreturns(address){returnsale.base.owner;}functiontokensPerEth()constantreturns(uint256){returnsale.base.tokensPerEth;}functionexchangeRate()constantreturns(uint256){returnsale.base.exchangeRate;}functioncapAmount()constantreturns(uint256){returnsale.base.capAmount;}functionstartTime()constantreturns(uint256){returnsale.base.startTime;}functionendTime()constantreturns(uint256){returnsale.base.endTime;}functionchangeInterval()constantreturns(uint256){returnsale.changeInterval;}functioncrowdsaleActive()constantreturns(bool){returnsale.crowdsaleActive();}functionfirstPriceChange()constantreturns(uint256){returnsale.tokenPricePoints[1];}functioncrowdsaleEnded()constantreturns(bool){returnsale.crowdsaleEnded();}functionethRaised()constantreturns(uint256){returnsale.base.ownerBalance;}functiontokensSold()constantreturns(uint256){returnsale.base.startingTokenBalance-sale.base.token.balanceOf(this);}functioncontributionAmount(address_buyer)constantreturns(uint256){returnsale.base.hasContributed[_buyer];}functiontokenPurchaseAmount(address_buyer)constantreturns(uint256){returnsale.base.withdrawTokensMap[_buyer];}functionleftoverWeiAmount(address_buyer)constantreturns(uint256){returnsale.base.leftoverWei[_buyer];}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 146
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 342
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 436
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 718
column: 16
content: ^

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 964
column: 16
content: ^

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 56
column: 4
content: sendPurchase()

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1003
column: 4
content: assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1022
column: 4
content: assembly{switchiszero(b)case0{res:=div(a,b)mstore(add(mload(0x40),0x20),res)return(mload(0x40),0x40)}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1041
column: 4
content: assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1060
column: 4
content: assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 27
column: 2
content: functionENOCrowdsale(addressowner,uint256capAmountInCents,uint256startTime,uint256endTime,uint256[]tokenPricePoints,uint256fallbackExchangeRate,uint256changeInterval,uint8percentBurn,CrowdsaleTokentoken){sale.init(owner,capAmountInCents,startTime,endTime,tokenPricePoints,fallbackExchangeRate,changeInterval,percentBurn,token);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 55
column: 2
content: function()payable{sendPurchase();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 59
column: 2
content: functionsendPurchase()payablereturns(bool){returnsale.receivePurchase(msg.value);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 63
column: 2
content: functionwithdrawOwnerEth()returns(bool){returnsale.withdrawOwnerEth();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 67
column: 2
content: functionsetTokenExchangeRate(uint256_exchangeRate)returns(bool){returnsale.setTokenExchangeRate(_exchangeRate);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 71
column: 2
content: functionsetTokens()returns(bool){returnsale.setTokens();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 75
column: 2
content: functionwithdrawTokens()returns(bool){returnsale.withdrawTokens();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 79
column: 2
content: functionwithdrawLeftoverWei()returns(bool){returnsale.withdrawLeftoverWei();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 85
column: 2
content: functionowner()constantreturns(address){returnsale.base.owner;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 89
column: 2
content: functiontokensPerEth()constantreturns(uint256){returnsale.base.tokensPerEth;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 93
column: 2
content: functionexchangeRate()constantreturns(uint256){returnsale.base.exchangeRate;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 97
column: 2
content: functioncapAmount()constantreturns(uint256){returnsale.base.capAmount;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 101
column: 2
content: functionstartTime()constantreturns(uint256){returnsale.base.startTime;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 105
column: 2
content: functionendTime()constantreturns(uint256){returnsale.base.endTime;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 109
column: 2
content: functionchangeInterval()constantreturns(uint256){returnsale.changeInterval;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 113
column: 2
content: functioncrowdsaleActive()constantreturns(bool){returnsale.crowdsaleActive();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 117
column: 2
content: functionfirstPriceChange()constantreturns(uint256){returnsale.tokenPricePoints[1];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 121
column: 2
content: functioncrowdsaleEnded()constantreturns(bool){returnsale.crowdsaleEnded();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 125
column: 2
content: functionethRaised()constantreturns(uint256){returnsale.base.ownerBalance;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 129
column: 2
content: functiontokensSold()constantreturns(uint256){returnsale.base.startingTokenBalance-sale.base.token.balanceOf(this);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 133
column: 2
content: functioncontributionAmount(address_buyer)constantreturns(uint256){returnsale.base.hasContributed[_buyer];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 137
column: 2
content: functiontokenPurchaseAmount(address_buyer)constantreturns(uint256){returnsale.base.withdrawTokensMap[_buyer];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 141
column: 2
content: functionleftoverWeiAmount(address_buyer)constantreturns(uint256){returnsale.base.leftoverWei[_buyer];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 208
column: 2
content: functioninit(DirectCrowdsaleStoragestorageself,address_owner,uint256_capAmountInCents,uint256_startTime,uint256_endTime,uint256[]_tokenPricePoints,uint256_fallbackExchangeRate,uint256_changeInterval,uint8_percentBurn,CrowdsaleToken_token){self.base.init(_owner,_tokenPricePoints[0],_fallbackExchangeRate,_capAmountInCents,_startTime,_endTime,_percentBurn,_token);require(_tokenPricePoints.length>0);if(_tokenPricePoints.length==1){require(_changeInterval==0);}self.tokenPricePoints=_tokenPricePoints;self.changeInterval=_changeInterval;self.lastPriceChangeTime=_startTime;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 243
column: 2
content: functionreceivePurchase(DirectCrowdsaleStoragestorageself,uint256_amount)returns(bool){require(msg.sender!=self.base.owner);require(self.base.validPurchase());require((self.base.ownerBalance+_amount)<=self.base.capAmount);if((self.changeInterval>0)&&(now>=(self.lastPriceChangeTime+self.changeInterval))){self.lastPriceChangeTime=self.lastPriceChangeTime+self.changeInterval;uint256index=(now-self.base.startTime)/self.changeInterval;if(self.tokenPricePoints.length<=index)index=self.tokenPricePoints.length-1;self.base.changeTokenPrice(self.tokenPricePoints[index]);LogTokenPriceChange(self.base.tokensPerEth,"Token Price has changed!");}uint256numTokens;boolerr;uint256newBalance;uint256weiTokens;uint256zeros;uint256leftoverWei;uint256remainder;(err,weiTokens)=_amount.times(self.base.tokensPerEth);require(!err);if(self.base.tokenDecimals<=18){zeros=10**(18-uint256(self.base.tokenDecimals));numTokens=weiTokens/zeros;leftoverWei=weiTokens%zeros;self.base.leftoverWei[msg.sender]+=leftoverWei;}else{zeros=10**(uint256(self.base.tokenDecimals)-18);numTokens=weiTokens*zeros;}self.base.hasContributed[msg.sender]+=_amount-leftoverWei;require(numTokens<=self.base.token.balanceOf(this));(err,newBalance)=self.base.ownerBalance.plus(_amount-leftoverWei);require(!err);self.base.ownerBalance=newBalance;self.base.withdrawTokensMap[msg.sender]+=numTokens;(err,remainder)=self.base.withdrawTokensMap[self.base.owner].minus(numTokens);self.base.withdrawTokensMap[self.base.owner]=remainder;LogTokensBought(msg.sender,numTokens);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 310
column: 2
content: functionsetTokenExchangeRate(DirectCrowdsaleStoragestorageself,uint256_exchangeRate)returns(bool){returnself.base.setTokenExchangeRate(_exchangeRate);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 314
column: 2
content: functionsetTokens(DirectCrowdsaleStoragestorageself)returns(bool){returnself.base.setTokens();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 318
column: 2
content: functionwithdrawTokens(DirectCrowdsaleStoragestorageself)returns(bool){returnself.base.withdrawTokens();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 322
column: 2
content: functionwithdrawLeftoverWei(DirectCrowdsaleStoragestorageself)returns(bool){returnself.base.withdrawLeftoverWei();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 326
column: 2
content: functionwithdrawOwnerEth(DirectCrowdsaleStoragestorageself)returns(bool){returnself.base.withdrawOwnerEth();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 330
column: 2
content: functioncrowdsaleActive(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.crowdsaleActive();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 334
column: 2
content: functioncrowdsaleEnded(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.crowdsaleEnded();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 338
column: 2
content: functionvalidPurchase(DirectCrowdsaleStoragestorageself)constantreturns(bool){returnself.base.validPurchase();}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 377
column: 2
content: functionCrowdsaleToken(addressowner,stringname,stringsymbol,uint8decimals,uint256initialSupply,boolallowMinting){token.init(owner,name,symbol,decimals,initialSupply,allowMinting);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 387
column: 2
content: functionname()constantreturns(string){returntoken.name;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 391
column: 2
content: functionsymbol()constantreturns(string){returntoken.symbol;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 395
column: 2
content: functiondecimals()constantreturns(uint8){returntoken.decimals;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 399
column: 2
content: functiontotalSupply()constantreturns(uint256){returntoken.totalSupply;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 403
column: 2
content: functioninitialSupply()constantreturns(uint256){returntoken.INITIAL_SUPPLY;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 407
column: 2
content: functionbalanceOf(addresswho)constantreturns(uint256){returntoken.balanceOf(who);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 411
column: 2
content: functionallowance(addressowner,addressspender)constantreturns(uint256){returntoken.allowance(owner,spender);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 415
column: 2
content: functiontransfer(addressto,uintvalue)returns(boolok){returntoken.transfer(to,value);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 419
column: 2
content: functiontransferFrom(addressfrom,addressto,uintvalue)returns(boolok){returntoken.transferFrom(from,to,value);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 423
column: 2
content: functionapprove(addressspender,uintvalue)returns(boolok){returntoken.approve(spender,value);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 427
column: 2
content: functionchangeOwner(addressnewOwner)returns(boolok){returntoken.changeOwner(newOwner);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 431
column: 2
content: functionburnToken(uint256amount)returns(boolok){returntoken.burnToken(amount);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 521
column: 2
content: functioninit(CrowdsaleStoragestorageself,address_owner,uint256_tokenPriceInCents,uint256_fallbackExchangeRate,uint256_capAmountInCents,uint256_startTime,uint256_endTime,uint8_percentBurn,CrowdsaleToken_token){require(self.capAmount==0);require(self.owner==0);require(_endTime>_startTime);require(_tokenPriceInCents>0);require(_capAmountInCents>0);require(_owner>0);require(_fallbackExchangeRate>0);require(_percentBurn<=100);self.owner=_owner;self.capAmount=((_capAmountInCents/_fallbackExchangeRate)+1)*(10**18);self.startTime=_startTime;self.endTime=_endTime;self.token=_token;self.tokenDecimals=_token.decimals();self.percentBurn=_percentBurn;self.exchangeRate=_fallbackExchangeRate;changeTokenPrice(self,_tokenPriceInCents);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 553
column: 2
content: functioncrowdsaleActive(CrowdsaleStoragestorageself)constantreturns(bool){return(now>=self.startTime&&now<=self.endTime);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 560
column: 2
content: functioncrowdsaleEnded(CrowdsaleStoragestorageself)constantreturns(bool){returnnow>self.endTime;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 580
column: 2
content: functionwithdrawTokens(CrowdsaleStoragestorageself)returns(bool){boolok;if(self.withdrawTokensMap[msg.sender]==0){LogErrorMsg("Sender has no tokens to withdraw!");returnfalse;}if(msg.sender==self.owner){if((!crowdsaleEnded(self))){LogErrorMsg("Owner cannot withdraw extra tokens until after the sale!");returnfalse;}else{if(self.percentBurn>0){uint256_burnAmount=(self.withdrawTokensMap[msg.sender]*self.percentBurn)/100;self.withdrawTokensMap[msg.sender]=self.withdrawTokensMap[msg.sender]-_burnAmount;ok=self.token.burnToken(_burnAmount);require(ok);}}}vartotal=self.withdrawTokensMap[msg.sender];self.withdrawTokensMap[msg.sender]=0;ok=self.token.transfer(msg.sender,total);require(ok);LogTokensWithdrawn(msg.sender,total);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 613
column: 2
content: functionwithdrawLeftoverWei(CrowdsaleStoragestorageself)returns(bool){require(self.hasContributed[msg.sender]>0);if(self.leftoverWei[msg.sender]==0){LogErrorMsg("Sender has no extra wei to withdraw!");returnfalse;}vartotal=self.leftoverWei[msg.sender];self.leftoverWei[msg.sender]=0;msg.sender.transfer(total);LogWeiWithdrawn(msg.sender,total);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 630
column: 2
content: functionwithdrawOwnerEth(CrowdsaleStoragestorageself)returns(bool){if(!crowdsaleEnded(self)){LogErrorMsg("Cannot withdraw owner ether until after the sale!");returnfalse;}require(msg.sender==self.owner);require(self.ownerBalance>0);uint256amount=self.ownerBalance;self.ownerBalance=0;self.owner.transfer(amount);LogOwnerEthWithdrawn(msg.sender,amount,"Crowdsale owner has withdrawn all funds!");returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 668
column: 2
content: functionsetTokenExchangeRate(CrowdsaleStoragestorageself,uint256_exchangeRate)returns(bool){require(msg.sender==self.owner);require((now>(self.startTime-3days))&&(now<(self.startTime)));require(!self.rateSet);require(self.token.balanceOf(this)>0);require(_exchangeRate>0);uint256_capAmountInCents;uint256_tokenPriceInCents;uint256_tokenBalance;boolerr;(err,_capAmountInCents)=self.exchangeRate.times(self.capAmount);require(!err);(err,_tokenPriceInCents)=self.exchangeRate.dividedBy(self.tokensPerEth);require(!err);_tokenBalance=self.token.balanceOf(this);self.withdrawTokensMap[msg.sender]=_tokenBalance;self.startingTokenBalance=_tokenBalance;self.tokensSet=true;self.exchangeRate=_exchangeRate;self.capAmount=(_capAmountInCents/_exchangeRate)+1;changeTokenPrice(self,_tokenPriceInCents+1);self.rateSet=true;LogNoticeMsg(msg.sender,self.tokensPerEth,"Owner has sent the exchange Rate and tokens bought per ETH!");returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 703
column: 2
content: functionsetTokens(CrowdsaleStoragestorageself)returns(bool){require(msg.sender==self.owner);require(!self.tokensSet);uint256_tokenBalance;_tokenBalance=self.token.balanceOf(this);self.withdrawTokensMap[msg.sender]=_tokenBalance;self.startingTokenBalance=_tokenBalance;self.tokensSet=true;returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 778
column: 2
content: functioninit(TokenStoragestorageself,address_owner,string_name,string_symbol,uint8_decimals,uint256_initial_supply,bool_allowMinting){require(self.INITIAL_SUPPLY==0);self.name=_name;self.symbol=_symbol;self.totalSupply=_initial_supply;self.INITIAL_SUPPLY=_initial_supply;self.decimals=_decimals;self.owner=_owner;self.stillMinting=_allowMinting;self.balances[_owner]=_initial_supply;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 802
column: 2
content: functiontransfer(TokenStoragestorageself,address_to,uint256_value)returns(bool){boolerr;uint256balance;(err,balance)=self.balances[msg.sender].minus(_value);require(!err);self.balances[msg.sender]=balance;self.balances[_to]=self.balances[_to]+_value;Transfer(msg.sender,_to,_value);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 821
column: 2
content: functiontransferFrom(TokenStoragestorageself,address_from,address_to,uint256_value)returns(bool){var_allowance=self.allowed[_from][msg.sender];boolerr;uint256balanceOwner;uint256balanceSpender;(err,balanceOwner)=self.balances[_from].minus(_value);require(!err);(err,balanceSpender)=_allowance.minus(_value);require(!err);self.balances[_from]=balanceOwner;self.allowed[_from][msg.sender]=balanceSpender;self.balances[_to]=self.balances[_to]+_value;Transfer(_from,_to,_value);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 850
column: 2
content: functionbalanceOf(TokenStoragestorageself,address_owner)constantreturns(uint256balance){returnself.balances[_owner];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 859
column: 2
content: functionapprove(TokenStoragestorageself,address_spender,uint256_value)returns(bool){self.allowed[msg.sender][_spender]=_value;Approval(msg.sender,_spender,_value);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 870
column: 2
content: functionallowance(TokenStoragestorageself,address_owner,address_spender)constantreturns(uint256remaining){returnself.allowed[_owner][_spender];}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 880
column: 2
content: functionapproveChange(TokenStoragestorageself,address_spender,uint256_valueChange,bool_increase)returns(bool){uint256_newAllowed;boolerr;if(_increase){(err,_newAllowed)=self.allowed[msg.sender][_spender].plus(_valueChange);require(!err);self.allowed[msg.sender][_spender]=_newAllowed;}else{if(_valueChange>self.allowed[msg.sender][_spender]){self.allowed[msg.sender][_spender]=0;}else{_newAllowed=self.allowed[msg.sender][_spender]-_valueChange;self.allowed[msg.sender][_spender]=_newAllowed;}}Approval(msg.sender,_spender,_newAllowed);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 908
column: 2
content: functionchangeOwner(TokenStoragestorageself,address_newOwner)returns(bool){require((self.owner==msg.sender)&&(_newOwner>0));self.owner=_newOwner;OwnerChange(msg.sender,_newOwner);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 920
column: 2
content: functionmintToken(TokenStoragestorageself,uint256_amount)returns(bool){require((self.owner==msg.sender)&&self.stillMinting);uint256_newAmount;boolerr;(err,_newAmount)=self.totalSupply.plus(_amount);require(!err);self.totalSupply=_newAmount;self.balances[self.owner]=self.balances[self.owner]+_amount;Transfer(0x0,self.owner,_amount);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 937
column: 2
content: functioncloseMint(TokenStoragestorageself)returns(bool){require(self.owner==msg.sender);self.stillMinting=false;MintingClosed(true);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 949
column: 2
content: functionburnToken(TokenStoragestorageself,uint256_amount)returns(bool){uint256_newBalance;boolerr;(err,_newBalance)=self.balances[msg.sender].minus(_amount);require(!err);self.balances[msg.sender]=_newBalance;self.totalSupply=self.totalSupply-_amount;Burn(msg.sender,_amount);Transfer(msg.sender,0x0,_amount);returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1002
column: 2
content: functiontimes(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=mul(a,b)switchor(iszero(b),eq(div(res,b),a))case0{err:=1res:=0}}if(err)Err("times func overflow");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1021
column: 2
content: functiondividedBy(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{switchiszero(b)case0{res:=div(a,b)mstore(add(mload(0x40),0x20),res)return(mload(0x40),0x40)}}Err("tried to divide by zero");return(true,0);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1040
column: 2
content: functionplus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=add(a,b)switchand(eq(sub(res,b),a),or(gt(res,b),eq(res,b)))case0{err:=1res:=0}}if(err)Err("plus func overflow");}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1059
column: 2
content: functionminus(uint256a,uint256b)constantreturns(boolerr,uint256res){assembly{res:=sub(a,b)switcheq(and(eq(add(res,b),a),or(lt(res,a),eq(res,a))),1)case0{err:=1res:=0}}if(err)Err("minus func underflow");}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 25
column: 2
content: DirectCrowdsaleLib.DirectCrowdsaleStoragesale;

SOLIDITY_VISIBILITY :70
SOLIDITY_DEPRECATED_CONSTRUCTIONS :34
SOLIDITY_PRAGMAS_VERSION :6
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :3
SOLIDITY_USING_INLINE_ASSEMBLY :4
SOLIDITY_UNCHECKED_CALL :1
SOLIDITY_DIV_MUL :1
SOLIDITY_ERC20_APPROVE :1