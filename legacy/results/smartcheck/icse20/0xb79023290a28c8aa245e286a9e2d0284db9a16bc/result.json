{
  "contract": "0xb79023290a28c8aa245e286a9e2d0284db9a16bc",
  "tool": "smartcheck",
  "start": 1563582516.6946144,
  "end": 1563582527.0825028,
  "duration": 10.387888431549072,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 61,
      "column": 35,
      "content": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 593,
      "column": 38,
      "content": "0x3F"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 685,
      "column": 35,
      "content": "0xf7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 686,
      "column": 35,
      "content": "0xf6"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 690,
      "column": 30,
      "content": "0x7f"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 694,
      "column": 39,
      "content": "0x80"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 694,
      "column": 65,
      "content": "0xb7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 695,
      "column": 39,
      "content": "0x7f"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 699,
      "column": 44,
      "content": "0xb9"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 703,
      "column": 38,
      "content": "0xf9"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 707,
      "column": 31,
      "content": "0x1"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 711,
      "column": 32,
      "content": "0x7f"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 715,
      "column": 41,
      "content": "0x80"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 715,
      "column": 69,
      "content": "0xb7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 716,
      "column": 41,
      "content": "0x7f"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 720,
      "column": 36,
      "content": "0xb9"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 724,
      "column": 39,
      "content": "0xf8"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 728,
      "column": 39,
      "content": "0xf8"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 732,
      "column": 38,
      "content": "0x94"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "187b5a",
      "severity": 1,
      "line": 638,
      "column": 18,
      "content": "sha3"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "187b5a",
      "severity": 1,
      "line": 656,
      "column": 31,
      "content": "sha3"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "187b5a",
      "severity": 1,
      "line": 676,
      "column": 25,
      "content": "sha3"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 528,
      "column": 31,
      "content": "amount*HOUSE_EDGE_PERCENT/100*15"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 530,
      "column": 28,
      "content": "amount*HOUSE_EDGE_PERCENT/100*9"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "58bdd3",
      "severity": 1,
      "line": 611,
      "column": 8,
      "content": "functionverifyMerkleProof(uintseedHash,uintoffset)pureprivatereturns(bytes32blockHash,bytes32uncleHash){uintscratchBuf1;assembly{scratchBuf1:=mload(0x40)}uintuncleHeaderLength;uintblobLength;uintshift;uinthashSlot;for(;;offset+=blobLength){assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}if(blobLength==0){break;}assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,\"Shift bounds check.\");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,\"Non-empty hash slot.\");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}}uncleHash=bytes32(seedHash);uintscratchBuf2=scratchBuf1+uncleHeaderLength;uintunclesLength;assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}uintunclesShift;assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}require(unclesShift+uncleHeaderLength<=unclesLength,\"Shift bounds check.\");offset+=6;assembly{calldatacopy(scratchBuf2,offset,unclesLength)}memcpy(scratchBuf2+unclesShift,scratchBuf1,uncleHeaderLength);assembly{seedHash:=sha3(scratchBuf2,unclesLength)}offset+=unclesLength;assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,\"Shift bounds check.\");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,\"Non-empty hash slot.\");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 166,
      "column": 2,
      "content": "functionsetSecretSigner(addressnewSecretSigner)externalonlyOwner{secretSigner=newSecretSigner;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 175,
      "column": 2,
      "content": "functionsetCroupier(addressnewCroupier)externalonlyOwner{croupier=newCroupier;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 180,
      "column": 2,
      "content": "functionsetMaxProfit(uint_maxProfit)publiconlyOwner{require(_maxProfit<MAX_AMOUNT,\"maxProfit should be a sane number.\");maxProfit=_maxProfit;}"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 65,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 611,
      "column": 8,
      "content": "functionverifyMerkleProof(uintseedHash,uintoffset)pureprivatereturns(bytes32blockHash,bytes32uncleHash){uintscratchBuf1;assembly{scratchBuf1:=mload(0x40)}uintuncleHeaderLength;uintblobLength;uintshift;uinthashSlot;for(;;offset+=blobLength){assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}if(blobLength==0){break;}assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,\"Shift bounds check.\");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,\"Non-empty hash slot.\");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}}uncleHash=bytes32(seedHash);uintscratchBuf2=scratchBuf1+uncleHeaderLength;uintunclesLength;assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}uintunclesShift;assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}require(unclesShift+uncleHeaderLength<=unclesLength,\"Shift bounds check.\");offset+=6;assembly{calldatacopy(scratchBuf2,offset,unclesLength)}memcpy(scratchBuf2+unclesShift,scratchBuf1,uncleHeaderLength);assembly{seedHash:=sha3(scratchBuf2,unclesLength)}offset+=unclesLength;assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}require(shift+32<=blobLength,\"Shift bounds check.\");offset+=4;assembly{hashSlot:=calldataload(add(offset,shift))}require(hashSlot==0,\"Non-empty hash slot.\");assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 739,
      "column": 4,
      "content": "functionmemcpy(uintdest,uintsrc,uintlen)pureprivate{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
      "patternId": "189abf",
      "severity": 1,
      "line": 682,
      "column": 4,
      "content": "functionrequireCorrectReceipt(uintoffset)viewprivate{uintleafHeaderByte;assembly{leafHeaderByte:=byte(0,calldataload(offset))}require(leafHeaderByte>=0xf7,\"Receipt leaf longer than 55 bytes.\");offset+=leafHeaderByte-0xf6;uintpathHeaderByte;assembly{pathHeaderByte:=byte(0,calldataload(offset))}if(pathHeaderByte<=0x7f){offset+=1;}else{require(pathHeaderByte>=0x80&&pathHeaderByte<=0xb7,\"Path is an RLP string.\");offset+=pathHeaderByte-0x7f;}uintreceiptStringHeaderByte;assembly{receiptStringHeaderByte:=byte(0,calldataload(offset))}require(receiptStringHeaderByte==0xb9,\"Receipt string is always at least 256 bytes long, but less than 64k.\");offset+=3;uintreceiptHeaderByte;assembly{receiptHeaderByte:=byte(0,calldataload(offset))}require(receiptHeaderByte==0xf9,\"Receipt is always at least 256 bytes long, but less than 64k.\");offset+=3;uintstatusByte;assembly{statusByte:=byte(0,calldataload(offset))}require(statusByte==0x1,\"Status should be success.\");offset+=1;uintcumGasHeaderByte;assembly{cumGasHeaderByte:=byte(0,calldataload(offset))}if(cumGasHeaderByte<=0x7f){offset+=1;}else{require(cumGasHeaderByte>=0x80&&cumGasHeaderByte<=0xb7,\"Cumulative gas is an RLP string.\");offset+=cumGasHeaderByte-0x7f;}uintbloomHeaderByte;assembly{bloomHeaderByte:=byte(0,calldataload(offset))}require(bloomHeaderByte==0xb9,\"Bloom filter is always 256 bytes long.\");offset+=256+3;uintlogsListHeaderByte;assembly{logsListHeaderByte:=byte(0,calldataload(offset))}require(logsListHeaderByte==0xf8,\"Logs list is less than 256 bytes long.\");offset+=2;uintlogEntryHeaderByte;assembly{logEntryHeaderByte:=byte(0,calldataload(offset))}require(logEntryHeaderByte==0xf8,\"Log entry is less than 256 bytes long.\");offset+=2;uintaddressHeaderByte;assembly{addressHeaderByte:=byte(0,calldataload(offset))}require(addressHeaderByte==0x94,\"Address is 20 bytes long.\");uintlogAddress;assembly{logAddress:=and(calldataload(sub(offset,11)),0xffffffffffffffffffffffffffffffffffffffff)}require(logAddress==uint(address(this)));}"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "7d54ca",
      "severity": 1,
      "line": 565,
      "column": 82,
      "content": "(uintwinAmount,uintjackpotFee)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "7d54ca",
      "severity": 1,
      "line": 611,
      "column": 84,
      "content": "(bytes32blockHash,bytes32uncleHash)"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 196,
      "column": 4,
      "content": "sendFunds(beneficiary,withdrawAmount,withdrawAmount,0,0,0)"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 532,
      "column": 8,
      "content": "sendFunds(gambler,diceWin+jackpotWin==0?1wei:diceWin+jackpotWin,diceWin,dice,rollUnder,amount)"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 561,
      "column": 8,
      "content": "sendFunds(bet.gambler,amount,amount,0,0,0)"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "91h3sa",
      "severity": 1,
      "line": 162,
      "column": 14,
      "content": "public"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 613,
      "column": 26,
      "content": "assembly{scratchBuf1:=mload(0x40)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 622,
      "column": 8,
      "content": "assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 628,
      "column": 6,
      "content": "assembly{shift:=and(calldataload(sub(offset,28)),0xffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 632,
      "column": 4,
      "content": "assembly{hashSlot:=calldataload(add(offset,shift))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 635,
      "column": 4,
      "content": "assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)seedHash:=sha3(scratchBuf1,blobLength)uncleHeaderLength:=blobLength}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 648,
      "column": 19,
      "content": "assembly{unclesLength:=and(calldataload(sub(offset,28)),0xffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 649,
      "column": 27,
      "content": "assembly{unclesShift:=and(calldataload(sub(offset,26)),0xffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 653,
      "column": 8,
      "content": "assembly{calldatacopy(scratchBuf2,offset,unclesLength)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 656,
      "column": 8,
      "content": "assembly{seedHash:=sha3(scratchBuf2,unclesLength)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 661,
      "column": 8,
      "content": "assembly{blobLength:=and(calldataload(sub(offset,30)),0xffff)shift:=and(calldataload(sub(offset,28)),0xffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 668,
      "column": 8,
      "content": "assembly{hashSlot:=calldataload(add(offset,shift))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 671,
      "column": 8,
      "content": "assembly{calldatacopy(scratchBuf1,offset,blobLength)mstore(add(scratchBuf1,shift),seedHash)blockHash:=sha3(scratchBuf1,blobLength)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 683,
      "column": 29,
      "content": "assembly{leafHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 688,
      "column": 29,
      "content": "assembly{pathHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 698,
      "column": 38,
      "content": "assembly{receiptStringHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 702,
      "column": 32,
      "content": "assembly{receiptHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 706,
      "column": 25,
      "content": "assembly{statusByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 710,
      "column": 31,
      "content": "assembly{cumGasHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 719,
      "column": 30,
      "content": "assembly{bloomHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 723,
      "column": 33,
      "content": "assembly{logsListHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 727,
      "column": 33,
      "content": "assembly{logEntryHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 731,
      "column": 32,
      "content": "assembly{addressHeaderByte:=byte(0,calldataload(offset))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 734,
      "column": 25,
      "content": "assembly{logAddress:=and(calldataload(sub(offset,11)),0xffffffffffffffffffffffffffffffffffffffff)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 742,
      "column": 12,
      "content": "assembly{mstore(dest,mload(src))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 748,
      "column": 8,
      "content": "assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 10,
      "column": 2,
      "content": "uintconstantHOUSE_EDGE_PERCENT=2;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 11,
      "column": 2,
      "content": "uintconstantHOUSE_EDGE_MINIMUM_AMOUNT=0.0003ether;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 15,
      "column": 2,
      "content": "uintconstantMIN_JACKPOT_BET=0.1ether;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 18,
      "column": 2,
      "content": "uintconstantJACKPOT_MODULO=1000;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 19,
      "column": 2,
      "content": "uintconstantJACKPOT_FEE=0.001ether;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 22,
      "column": 2,
      "content": "uintconstantMIN_BET=0.01ether;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 23,
      "column": 2,
      "content": "uintconstantMAX_AMOUNT=300000ether;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 46,
      "column": 2,
      "content": "uintconstantMAX_MASK_MODULO=40;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 49,
      "column": 2,
      "content": "uintconstantMAX_BET_MASK=2**MAX_MASK_MODULO;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 57,
      "column": 2,
      "content": "uintconstantBET_EXPIRATION_BLOCKS=250;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 61,
      "column": 2,
      "content": "addressconstantDUMMY_ADDRESS=0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 109,
      "column": 2,
      "content": "mapping(uint=>Bet)bets;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 111,
      "column": 2,
      "content": "mapping(address=>uint)accuBetAmount;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 113,
      "column": 2,
      "content": "mapping(address=>Profile)profiles;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 591,
      "column": 8,
      "content": "uintconstantPOPCNT_MULT=0x0000000000002000000000100000000008000000000400000000020000000001;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 592,
      "column": 8,
      "content": "uintconstantPOPCNT_MASK=0x0001041041041041041041041041041041041041041041041041041041041041;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 593,
      "column": 8,
      "content": "uintconstantPOPCNT_MODULO=0x3F;"
    }
  ]
}