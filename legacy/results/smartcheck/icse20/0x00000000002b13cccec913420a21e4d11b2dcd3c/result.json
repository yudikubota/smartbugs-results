{
  "contract": "0x00000000002b13cccec913420a21e4d11b2dcd3c",
  "tool": "smartcheck",
  "start": 1563218838.759311,
  "end": 1563218856.5632062,
  "duration": 17.803895235061646,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 112,
      "column": 31,
      "content": "0x00000000002B13cCcEC913420A21e4D11b2DCd3C"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 526,
      "column": 22,
      "content": "0x00000000002B13cCcEC913420A21e4D11b2DCd3C"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 598,
      "column": 22,
      "content": "0x00000000002B13cCcEC913420A21e4D11b2DCd3C"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 235,
      "column": 13,
      "content": "0x5873"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 237,
      "column": 14,
      "content": "0x905959593031856108fcf150ff"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 419,
      "column": 13,
      "content": "0xff5b"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 552,
      "column": 21,
      "content": "0xd694"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 554,
      "column": 19,
      "content": "0x01"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 577,
      "column": 14,
      "content": "0x5af160315981595939f3"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 597,
      "column": 19,
      "content": "0xff"
    },
    {
      "name": "SOLIDITY_CALL_WITHOUT_DATA",
      "patternId": "111ppp",
      "severity": 2,
      "line": 211,
      "column": 24,
      "content": "call(\"\")"
    },
    {
      "name": "SOLIDITY_CALL_WITHOUT_DATA",
      "patternId": "111ppp",
      "severity": 2,
      "line": 505,
      "column": 22,
      "content": "call(\"\")"
    },
    {
      "name": "SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN",
      "patternId": "58bdd3",
      "severity": 1,
      "line": 399,
      "column": 2,
      "content": "function_getSalt(uint96identifier)internalviewreturns(bytes32salt){assembly{salt:=or(shl(96,caller),identifier)}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 45,
      "column": 0,
      "content": "contractMetapod{eventMetamorphosed(addressmetamorphicContract,bytes32salt);eventCocooned(addressmetamorphicContract,bytes32salt);bytesprivateconstantTRANSIENT_CONTRACT_INITIALIZATION_CODE=(hex\"58601c59585992335a6357b9f5235952fa5060403031813d03839281943ef08015602557ff5b80fd\");bytes32privateconstantTRANSIENT_CONTRACT_INITIALIZATION_CODE_HASH=bytes32(0xb7d11e258d6663925ce8e43f07ba3b7792a573ecc2fd7682d01f8a70b2223294);bytes32privateconstantEMPTY_DATA_HASH=bytes32(0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470);bytesprivate_initCode;constructor()public{require(address(this)==address(0x00000000002B13cCcEC913420A21e4D11b2DCd3C),\"Incorrect deployment address.\");require(keccak256(abi.encodePacked(TRANSIENT_CONTRACT_INITIALIZATION_CODE))==TRANSIENT_CONTRACT_INITIALIZATION_CODE_HASH,\"Incorrect hash for transient initialization code.\");require(keccak256(abi.encodePacked(hex\"\"))==EMPTY_DATA_HASH,\"Incorrect hash for empty data.\");}functiondeploy(uint96identifier,bytescalldatainitializationCode)externalpayablereturns(addressmetamorphicContract){bytes32salt=_getSalt(identifier);_initCode=initializationCode;addressvaultContract=_triggerVaultFundsRelease(salt);addresstransientContract;bytesmemoryinitCode=TRANSIENT_CONTRACT_INITIALIZATION_CODE;assembly{letencoded_data:=add(0x20,initCode)letencoded_size:=mload(initCode)transientContract:=create2(callvalue,encoded_data,encoded_size,salt)}require(transientContract!=address(0),\"Failed to deploy contract.\");metamorphicContract=_getMetamorphicContractAddress(transientContract);_verifyPrelude(metamorphicContract,_getPrelude(vaultContract));delete_initCode;emitMetamorphosed(metamorphicContract,salt);}functiondestroy(uint96identifier)external{bytes32salt=_getSalt(identifier);addressmetamorphicContract=_getMetamorphicContractAddress(_getTransientContractAddress(salt));metamorphicContract.call(\"\");emitCocooned(metamorphicContract,salt);}functionrecover(uint96identifier)external{bytes32salt=_getSalt(identifier);_triggerVaultFundsRelease(salt);_initCode=abi.encodePacked(bytes2(0x5873),msg.sender,bytes13(0x905959593031856108fcf150ff));addresstransientContract;bytesmemoryinitCode=TRANSIENT_CONTRACT_INITIALIZATION_CODE;assembly{letencoded_data:=add(0x20,initCode)letencoded_size:=mload(initCode)transientContract:=create2(callvalue,encoded_data,encoded_size,salt)}require(transientContract!=address(0),\"Recovery failed - ensure that the contract has been destroyed.\");delete_initCode;}functiongetInitializationCode()externalviewreturns(bytesmemoryinitializationCode){initializationCode=_initCode;}functionfindTransientContractAddress(bytes32salt)externalpurereturns(addresstransientContract){transientContract=_getTransientContractAddress(salt);}functionfindMetamorphicContractAddress(bytes32salt)externalpurereturns(addressmetamorphicContract){metamorphicContract=_getMetamorphicContractAddress(_getTransientContractAddress(salt));}functionfindVaultContractAddress(bytes32salt)externalpurereturns(addressvaultContract){vaultContract=_getVaultContractAddress(_getVaultContractInitializationCode(_getTransientContractAddress(salt)));}functiongetPrelude(bytes32salt)externalpurereturns(bytesmemoryprelude){prelude=_getPrelude(_getVaultContractAddress(_getVaultContractInitializationCode(_getTransientContractAddress(salt))));}functiongetTransientContractInitializationCode()externalpurereturns(bytesmemorytransientContractInitializationCode){transientContractInitializationCode=(TRANSIENT_CONTRACT_INITIALIZATION_CODE);}functiongetTransientContractInitializationCodeHash()externalpurereturns(bytes32transientContractInitializationCodeHash){transientContractInitializationCodeHash=(TRANSIENT_CONTRACT_INITIALIZATION_CODE_HASH);}functiongetSalt(uint96identifier)externalviewreturns(bytes32salt){salt=_getSalt(identifier);}function_getSalt(uint96identifier)internalviewreturns(bytes32salt){assembly{salt:=or(shl(96,caller),identifier)}}function_getPrelude(addressvaultContract)internalpurereturns(bytesmemoryprelude){prelude=abi.encodePacked(bytes22(0x6e2b13cccec913420a21e4d11b2dcd3c3318602b5773),vaultContract,bytes2(0xff5b));}function_verifyPrelude(addressmetamorphicContract,bytesmemoryprelude)internalview{bytesmemoryruntimeHeader;assembly{runtimeHeader:=mload(0x40)mstore(0x40,add(runtimeHeader,0x60))mstore(runtimeHeader,44)extcodecopy(metamorphicContract,add(runtimeHeader,0x20),0,44)}require(keccak256(abi.encodePacked(prelude))==keccak256(abi.encodePacked(runtimeHeader)),\"Deployed runtime code does not have the required prelude.\");}function_triggerVaultFundsRelease(bytes32salt)internalreturns(addressvaultContract){addresstransientContract=_getTransientContractAddress(salt);bytesmemoryvaultContractInitCode=_getVaultContractInitializationCode(transientContract);vaultContract=_getVaultContractAddress(vaultContractInitCode);if(vaultContract.balance>0){bytes32vaultContractCodeHash;assembly{vaultContractCodeHash:=extcodehash(vaultContract)}if(vaultContractCodeHash==EMPTY_DATA_HASH){assembly{letencoded_data:=add(0x20,vaultContractInitCode)letencoded_size:=mload(vaultContractInitCode)let_:=create2(0,encoded_data,encoded_size,0)}}else{vaultContract.call(\"\");}}}function_getTransientContractAddress(bytes32salt)internalpurereturns(addresstransientContract){transientContract=address(uint160(uint256(keccak256(abi.encodePacked(hex\"ff\",address(0x00000000002B13cCcEC913420A21e4D11b2DCd3C),salt,TRANSIENT_CONTRACT_INITIALIZATION_CODE_HASH)))));}function_getMetamorphicContractAddress(addresstransientContract)internalpurereturns(addressmetamorphicContract){metamorphicContract=address(uint160(uint256(keccak256(abi.encodePacked(bytes2(0xd694),transientContract,byte(0x01))))));}function_getVaultContractInitializationCode(addresstransientContract)internalpurereturns(bytesmemoryvaultContractInitializationCode){vaultContractInitializationCode=abi.encodePacked(bytes27(0x586e2b13cccec913420a21e4d11b2dcd3c33185857595959303173),transientContract,bytes10(0x5af160315981595939f3));}function_getVaultContractAddress(bytesmemoryvaultContractInitializationCode)internalpurereturns(addressvaultContract){vaultContract=address(uint160(uint256(keccak256(abi.encodePacked(byte(0xff),address(0x00000000002B13cCcEC913420A21e4D11b2DCd3C),bytes32(0),keccak256(vaultContractInitializationCode))))));}}"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 88,
      "column": 8,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 93,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 98,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 103,
      "column": 8,
      "content": "private"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
      "patternId": "189abf",
      "severity": 1,
      "line": 399,
      "column": 2,
      "content": "function_getSalt(uint96identifier)internalviewreturns(bytes32salt){assembly{salt:=or(shl(96,caller),identifier)}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
      "patternId": "189abf",
      "severity": 1,
      "line": 431,
      "column": 2,
      "content": "function_verifyPrelude(addressmetamorphicContract,bytesmemoryprelude)internalview{bytesmemoryruntimeHeader;assembly{runtimeHeader:=mload(0x40)mstore(0x40,add(runtimeHeader,0x60))mstore(runtimeHeader,44)extcodecopy(metamorphicContract,add(runtimeHeader,0x20),0,44)}require(keccak256(abi.encodePacked(prelude))==keccak256(abi.encodePacked(runtimeHeader)),\"Deployed runtime code does not have the required prelude.\");}"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 211,
      "column": 24,
      "content": "call(\"\")"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 166,
      "column": 4,
      "content": "assembly{letencoded_data:=add(0x20,initCode)letencoded_size:=mload(initCode)transientContract:=create2(callvalue,encoded_data,encoded_size,salt)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 248,
      "column": 4,
      "content": "assembly{letencoded_data:=add(0x20,initCode)letencoded_size:=mload(initCode)transientContract:=create2(callvalue,encoded_data,encoded_size,salt)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 400,
      "column": 4,
      "content": "assembly{salt:=or(shl(96,caller),identifier)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 438,
      "column": 4,
      "content": "assembly{runtimeHeader:=mload(0x40)mstore(0x40,add(runtimeHeader,0x60))mstore(runtimeHeader,44)extcodecopy(metamorphicContract,add(runtimeHeader,0x20),0,44)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 487,
      "column": 6,
      "content": "assembly{vaultContractCodeHash:=extcodehash(vaultContract)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 493,
      "column": 8,
      "content": "assembly{letencoded_data:=add(0x20,vaultContractInitCode)letencoded_size:=mload(vaultContractInitCode)let_:=create2(0,encoded_data,encoded_size,0)}"
    }
  ]
}