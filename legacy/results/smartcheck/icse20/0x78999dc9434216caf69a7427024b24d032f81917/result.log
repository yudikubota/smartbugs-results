/unique_chucks/22/0x78999dc9434216caf69a7427024b24d032f81917.sol
line 4:30 mismatched input 'payable' expecting {',', ')'}
line 4:54 no viable alternative at input '_contractAddress,'
line 4:54 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 4:64 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 4:87 mismatched input ',' expecting {';', '='}
line 4:110 mismatched input ')' expecting {';', '='}
line 4:135 extraneous input 'success' expecting ')'
line 4:143 mismatched input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 17:10 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 70:37 mismatched input 'payable' expecting {',', ')'}
line 70:53 no viable alternative at input 'newOwner)'
line 70:53 extraneous input ')' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 70:72 mismatched input '{' expecting {';', '='}
line 71:22 extraneous input '(' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 71:31 extraneous input ')' expecting {';', '='}
line 78:2 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
line 300:16 no viable alternative at input 'addresspayable'
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: a91b18
severity: 1
line: 63
column: 4
content: _owner=address(0)

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 309
column: 27
content: msg.value.mul(tokenPerEther).mul(uint256(10)**tokenContract.decimals()).div(10**18).mul(bonusPercentage1)

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 312
column: 27
content: msg.value.mul(tokenPerEther).mul(uint256(10)**tokenContract.decimals()).div(10**18).mul(bonusPercentage2)

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 315
column: 27
content: msg.value.mul(tokenPerEther).mul(uint256(10)**tokenContract.decimals()).div(10**18).mul(bonusPercentage3)

ruleId: SOLIDITY_ERC20_APPROVE
patternId: af782c
severity: 2
line: 191
column: 4
content: functionapprove(address_spender,uint256_value)publicreturns(boolsuccess){allowed[msg.sender][_spender]=_value;emitApproval(msg.sender,_spender,_value);returntrue;}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 16
column: 0
content: contractOwnable{addresspayablepublic_owner;eventOwnershipTransferred(addressindexedpreviousOwner,addressindexednewOwner);constructor()internal{_owner=tx.origin;emitOwnershipTransferred(address(0),_owner);}functionowner()publicviewreturns(address){return_owner;}modifieronlyOwner(){require(isOwner());_;}functionisOwner()publicviewreturns(bool){returnmsg.sender==_owner;}functionrenounceOwnership()publiconlyOwner{emitOwnershipTransferred(_owner,address(0));_owner=address(0);}functiontransferOwnership(addresspayablenewOwner)publiconlyOwner{_transferOwnership(newOwner);}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 204
column: 0
content: contractERC20TokenisERC20,Ownable{stringpublicconstantcreatedBy="AssetSplit.org - the guys who cut the pizza";eventAddSupply(uintamount);eventBurn(addresstarget,uintamount);eventSold(addressbuyer,uint256amount);constructor(stringmemory_name,stringmemory_symbol,uint8_decimals,uint_totalSupply)ERC20(_name,_symbol,_decimals,_totalSupply)public{}functiontransfer(address_to,uint256_value)publicreturns(boolsuccess){success=_transfer(msg.sender,_to,_value);}functiontransferFrom(address_from,address_to,uint256_value)publicreturns(boolsuccess){require(allowed[_from][msg.sender]>=_value);success=_transfer(_from,_to,_value);allowed[_from][msg.sender]-=_value;}function_transfer(address_from,address_to,uint256_value)internalreturns(bool){require(_to!=address(0));require(balanceOf[_from]>=_value);require(balanceOf[_to]+_value>=balanceOf[_to]);balanceOf[_from]-=_value;balanceOf[_to]+=_value;emitTransfer(_from,_to,_value);returntrue;}functionburn(uint256_value)publicreturns(boolsuccess){require(balanceOf[msg.sender]>=_value);totalSupply-=_value;balanceOf[msg.sender]-=_value;emitBurn(msg.sender,_value);returntrue;}functionburnFrom(address_from,uint256_value)publicreturns(boolsuccess){require(balanceOf[_from]>=_value);require(allowed[_from][msg.sender]>=_value);totalSupply-=_value;balanceOf[msg.sender]-=_value;allowed[_from][msg.sender]-=_value;emitBurn(msg.sender,_value);returntrue;}function()externalpayable{}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: >

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 25
content: <

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 268
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 340
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_TX_ORIGIN
patternId: 12e802
severity: 2
line: 29
column: 13
content: tx.origin

ruleId: SOLIDITY_TX_ORIGIN
patternId: 12e802
severity: 2
line: 160
column: 17
content: tx.origin

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 4
column: 1
content: functionaddContract(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 70
column: 2
content: functiontransferOwnership(addresspayable

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4
column: 38
content: _contractAddress,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4
column: 56
content: addresspayable_creatorAddress,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4
column: 89
content: uint256_contractType)externalreturns

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 4
column: 129
content: (boolsuccess);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 71
column: 4
content: _transferOwnership(newOwner);

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 152
column: 4
content: mapping(address=>mapping(address=>uint256))allowed;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 337
column: 4
content: uint256priceInEther=1ether;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 338
column: 4
content: uint256priceInToken=2;

SOLIDITY_VISIBILITY :10
SOLIDITY_SAFEMATH :2
SOLIDITY_PRAGMAS_VERSION :2
SOLIDITY_LOCKED_MONEY :2
SOLIDITY_ADDRESS_HARDCODED :1
SOLIDITY_DIV_MUL :3
SOLIDITY_TX_ORIGIN :2
SOLIDITY_ERC20_APPROVE :1