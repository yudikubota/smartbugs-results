/unique_chucks/33/0x6f33a7842ad134b2f4bcbedb34bce299dad56c97.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_BALANCE_EQUALITY
patternId: 5094ad
severity: 1
line: 1165
column: 17
content: requests[_requestId].payee.balance==0

ruleId: SOLIDITY_BALANCE_EQUALITY
patternId: 5094ad
severity: 1
line: 1168
column: 21
content: subPayees[_requestId][i].balance==0

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 625
column: 2
content: functionbalanceOf(addresswho)publicconstantreturns(uint256);

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 28fa69
severity: 1
line: 636
column: 2
content: functionallowance(addressowner,addressspender)publicconstantreturns(uint256);

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1101
column: 8
content: for(uint8i=0;subPayees[_requestId][i].addr!=address(0);i=i.add(1)){}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1148
column: 8
content: for(uint8i=0;subPayees[_requestId][i].addr!=address(0);i=i.add(1)){balance=balance.add(subPayees[_requestId][i].balance);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1167
column: 8
content: for(uint8i=0;isNull&&subPayees[_requestId][i].addr!=address(0);i=i.add(1)){isNull=subPayees[_requestId][i].balance==0;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1186
column: 8
content: for(uint8i=0;subPayees[_requestId][i].addr!=address(0);i=i.add(1)){expectedAmount=expectedAmount.add(subPayees[_requestId][i].expectedAmount);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1221
column: 8
content: for(uint8i=0;subPayees[_requestId][i].addr!=address(0);i=i.add(1)){if(subPayees[_requestId][i].addr==_address){returni+1;}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1292
column: 8
content: for(uint8i=1;i<_payees.length;i=i.add(1)){require(_payees[i]!=0,"payee should not be 0");subPayees[_requestId][i-1]=Payee(_payees[i],_expectedAmounts[i],0);emitNewSubPayee(_requestId,_payees[i]);}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1443
column: 8
content: for(uint8i=0;i<_additionalAmounts.length;i=i.add(1)){if(_additionalAmounts[i]!=0){requestCore.updateExpectedAmount(_requestId,i,_additionalAmounts[i].toInt256Safe());}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1475
column: 8
content: for(uint8i=0;i<_subtractAmounts.length;i=i.add(1)){if(_subtractAmounts[i]!=0){require(requestCore.getPayeeExpectedAmount(_requestId,i)>=_subtractAmounts[i].toInt256Safe(),"subtract should equal or be lower than amount expected");requestCore.updateExpectedAmount(_requestId,i,-_subtractAmounts[i].toInt256Safe());}}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1512
column: 8
content: for(uint8i=0;i<_expectedAmounts.length;i=i.add(1)){require(_expectedAmounts[i]>=0,"expected amounts should be positive");totalExpectedAmounts=totalExpectedAmounts.add(_expectedAmounts[i]);}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 163
column: 4
content: functionextractAddress(bytesdata,uintoffset)internalpurereturns(addressm){require(offset>=0&&offset+20<=data.length,"offset value should be in the correct range");assembly{m:=and(mload(add(data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 185
column: 4
content: functionextractBytes32(bytesdata,uintoffset)internalpurereturns(bytes32bs){require(offset>=0&&offset+32<=data.length,"offset value should be in the correct range");assembly{bs:=mload(add(data,add(32,offset)))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 1236
column: 4
content: functionextractBytes32(bytes_data,uintoffset)publicpurereturns(bytes32bs){require(offset>=0&&offset+32<=_data.length,"offset value should be in the correct range");assembly{bs:=mload(add(_data,add(32,offset)))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 1267
column: 4
content: functionextractAddress(bytes_data,uintoffset)internalpurereturns(addressm){require(offset>=0&&offset+20<=_data.length,"offset value should be in the correct range");assembly{m:=and(mload(add(_data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1443
column: 8
content: for(uint8i=0;i<_additionalAmounts.length;i=i.add(1)){if(_additionalAmounts[i]!=0){requestCore.updateExpectedAmount(_requestId,i,_additionalAmounts[i].toInt256Safe());}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1475
column: 8
content: for(uint8i=0;i<_subtractAmounts.length;i=i.add(1)){if(_subtractAmounts[i]!=0){require(requestCore.getPayeeExpectedAmount(_requestId,i)>=_subtractAmounts[i].toInt256Safe(),"subtract should equal or be lower than amount expected");requestCore.updateExpectedAmount(_requestId,i,-_subtractAmounts[i].toInt256Safe());}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1512
column: 8
content: for(uint8i=0;i<_expectedAmounts.length;i=i.add(1)){require(_expectedAmounts[i]>=0,"expected amounts should be positive");totalExpectedAmounts=totalExpectedAmounts.add(_expectedAmounts[i]);}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 1563
column: 0
content: contractRequestBitcoinNodesValidationisCurrencyContract{usingSafeMathforuint256;usingSafeMathIntforint256;usingSafeMathUint8foruint8;mapping(bytes32=>string[256])publicpayeesPaymentAddress;mapping(bytes32=>string[256])publicpayerRefundAddress;eventRefundAddressAdded(bytes32indexedrequestId);constructor(address_requestCoreAddress,address_requestBurnerAddress)CurrencyContract(_requestCoreAddress,_requestBurnerAddress)public{}functioncreateRequestAsPayeeAction(address[]_payeesIdAddress,bytes_payeesPaymentAddress,int256[]_expectedAmounts,address_payer,bytes_payerRefundAddress,string_data)externalpayablewhenNotPausedreturns(bytes32requestId){require(msg.sender==_payeesIdAddress[0]&&msg.sender!=_payer&&_payer!=0,"caller should be the payee");uint256collectedFees;(requestId,collectedFees)=createCoreRequestInternal(_payer,_payeesIdAddress,_expectedAmounts,_data);require(collectedFees==msg.value,"fees should be the correct amout");extractAndStoreBitcoinAddresses(requestId,_payeesIdAddress.length,_payeesPaymentAddress,_payerRefundAddress);returnrequestId;}functionbroadcastSignedRequestAsPayerAction(bytes_requestData,bytes_payeesPaymentAddress,bytes_payerRefundAddress,uint256[]_additionals,uint256_expirationDate,bytes_signature)externalpayablewhenNotPausedreturns(bytes32requestId){require(_expirationDate>=block.timestamp,"expiration should be after current time");require(Signature.checkBtcRequestSignature(_requestData,_payeesPaymentAddress,_expirationDate,_signature),"signature should be correct");returncreateAcceptAndAdditionalsFromBytes(_requestData,_payeesPaymentAddress,_payerRefundAddress,_additionals);}functionaddPayerRefundAddressAction(bytes32_requestId,bytes_payerRefundAddress)externalwhenNotPausedonlyRequestPayer(_requestId){uint8payeesCount=requestCore.getSubPayeesCount(_requestId).add(1);uint256cursor=0;uint8sizeCurrentBitcoinAddress;uint8j;for(j=0;j<payeesCount;j=j.add(1)){require(bytes(payerRefundAddress[_requestId][cursor]).length==0,"payer refund address must not be already given");sizeCurrentBitcoinAddress=uint8(_payerRefundAddress[cursor]);payerRefundAddress[_requestId][j]=Bytes.extractString(_payerRefundAddress,sizeCurrentBitcoinAddress,++cursor);cursor+=sizeCurrentBitcoinAddress;}emitRefundAddressAdded(_requestId);}functionextractAndStoreBitcoinAddresses(bytes32_requestId,uint256_payeesCount,bytes_payeesPaymentAddress,bytes_payerRefundAddress)internal{uint256cursor=0;uint8sizeCurrentBitcoinAddress;uint8j;for(j=0;j<_payeesCount;j=j.add(1)){sizeCurrentBitcoinAddress=uint8(_payeesPaymentAddress[cursor]);payeesPaymentAddress[_requestId][j]=Bytes.extractString(_payeesPaymentAddress,sizeCurrentBitcoinAddress,++cursor);cursor+=sizeCurrentBitcoinAddress;}if(_payerRefundAddress.length!=0){cursor=0;for(j=0;j<_payeesCount;j=j.add(1)){sizeCurrentBitcoinAddress=uint8(_payerRefundAddress[cursor]);payerRefundAddress[_requestId][j]=Bytes.extractString(_payerRefundAddress,sizeCurrentBitcoinAddress,++cursor);cursor+=sizeCurrentBitcoinAddress;}}}functioncreateAcceptAndAdditionalsFromBytes(bytes_requestData,bytes_payeesPaymentAddress,bytes_payerRefundAddress,uint256[]_additionals)internalreturns(bytes32requestId){addressmainPayee=Bytes.extractAddress(_requestData,41);require(msg.sender!=mainPayee&&mainPayee!=0,"caller should not be the main payee");require(Bytes.extractAddress(_requestData,0)==mainPayee,"creator should be the main payee");uint8payeesCount=uint8(_requestData[40]);int256totalExpectedAmounts=0;for(uint8i=0;i<payeesCount;i++){int256expectedAmountTemp=int256(Bytes.extractBytes32(_requestData,uint256(i).mul(52).add(61)));totalExpectedAmounts=totalExpectedAmounts.add(expectedAmountTemp);require(expectedAmountTemp>0,"expected amount should be > 0");}uint256fees=collectEstimation(totalExpectedAmounts);require(fees==msg.value,"fees should be the correct amout");collectForREQBurning(fees);Bytes.updateBytes20inBytes(_requestData,20,bytes20(msg.sender));requestId=requestCore.createRequestFromBytes(_requestData);extractAndStoreBitcoinAddresses(requestId,payeesCount,_payeesPaymentAddress,_payerRefundAddress);acceptAndAdditionals(requestId,_additionals);returnrequestId;}functionacceptAndAdditionals(bytes32_requestId,uint256[]_additionals)internal{acceptAction(_requestId);additionalAction(_requestId,_additionals);}}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 550
column: 4
content: functionsetRateFees(uint256_rateFeesNumerator,uint256_rateFeesDenominator)externalonlyOwner{rateFeesNumerator=_rateFeesNumerator;rateFeesDenominator=_rateFeesDenominator;emitUpdateRateFees(rateFeesNumerator,rateFeesDenominator);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 563
column: 4
content: functionsetMaxCollectable(uint256_newMaxFees)externalonlyOwner{maxFees=_newMaxFees;emitUpdateMaxFees(maxFees);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 575
column: 4
content: functionsetRequestBurnerContract(address_requestBurnerContract)externalonlyOwner{requestBurnerContract=_requestBurnerContract;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 246
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 522
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 725
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1356
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 1564
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 163
column: 4
content: functionextractAddress(bytesdata,uintoffset)internalpurereturns(addressm){require(offset>=0&&offset+20<=data.length,"offset value should be in the correct range");assembly{m:=and(mload(add(data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 185
column: 4
content: functionextractBytes32(bytesdata,uintoffset)internalpurereturns(bytes32bs){require(offset>=0&&offset+32<=data.length,"offset value should be in the correct range");assembly{bs:=mload(add(data,add(32,offset)))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 205
column: 4
content: functionupdateBytes20inBytes(bytesdata,uintoffset,bytes20b)internalpure{require(offset>=0&&offset+20<=data.length,"offset value should be in the correct range");assembly{letm:=mload(add(data,add(20,offset)))m:=and(m,0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000)m:=or(m,div(b,0x1000000000000000000000000))mstore(add(data,add(20,offset)),m)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1236
column: 4
content: functionextractBytes32(bytes_data,uintoffset)publicpurereturns(bytes32bs){require(offset>=0&&offset+32<=_data.length,"offset value should be in the correct range");assembly{bs:=mload(add(_data,add(32,offset)))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 1267
column: 4
content: functionextractAddress(bytes_data,uintoffset)internalpurereturns(addressm){require(offset>=0&&offset+20<=_data.length,"offset value should be in the correct range");assembly{m:=and(mload(add(_data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 1509
column: 15
content: (bytes32requestId,uint256collectedFees)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 163
column: 28
content: bytesdata

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 185
column: 28
content: bytesdata

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 205
column: 34
content: bytesdata

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 227
column: 27
content: bytesdata

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 230
column: 17
content: string

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 272
column: 8
content: bytesrequestData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 273
column: 8
content: address[]payeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 275
column: 8
content: bytessignature

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 320
column: 8
content: bytesrequestData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 321
column: 8
content: bytespayeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 323
column: 8
content: bytessignature

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 356
column: 8
content: bytesrequestData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 357
column: 8
content: bytespayeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 383
column: 8
content: bytesrequestData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 384
column: 8
content: address[]payeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1236
column: 28
content: bytes_data

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1267
column: 28
content: bytes_data

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1287
column: 47
content: address[]_payees

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1287
column: 66
content: int256[]_expectedAmounts

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1307
column: 27
content: bytesdata

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1310
column: 17
content: string

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1428
column: 50
content: uint256[]_additionalAmounts

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1461
column: 48
content: uint256[]_subtractAmounts

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1504
column: 8
content: address[]_payeesIdAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1505
column: 8
content: int256[]_expectedAmounts

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1506
column: 8
content: string_data

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1793
column: 8
content: bytes_payeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1794
column: 8
content: bytes_payerRefundAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1841
column: 8
content: bytes_requestData

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1842
column: 8
content: bytes_payeesPaymentAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1843
column: 8
content: bytes_payerRefundAddress

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1844
column: 8
content: uint256[]_additionals

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1901
column: 8
content: uint256[]_additionals

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 171
column: 8
content: assembly{m:=and(mload(add(data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 193
column: 8
content: assembly{bs:=mload(add(data,add(32,offset)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 212
column: 8
content: assembly{letm:=mload(add(data,add(20,offset)))m:=and(m,0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000)m:=or(m,div(b,0x1000000000000000000000000))mstore(add(data,add(20,offset)),m)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1244
column: 8
content: assembly{bs:=mload(add(_data,add(32,offset)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1275
column: 8
content: assembly{m:=and(mload(add(_data,add(20,offset))),0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 768
column: 4
content: mapping(bytes32=>Request)requests;

SOLIDITY_VISIBILITY :1
SOLIDITY_OVERPOWERED_ROLE :3
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :4
SOLIDITY_EXTRA_GAS_IN_LOOPS :9
SOLIDITY_UPGRADE_TO_050 :33
SOLIDITY_GAS_LIMIT_IN_LOOPS :3
SOLIDITY_SHOULD_RETURN_STRUCT :1
SOLIDITY_BALANCE_EQUALITY :2
SOLIDITY_SHOULD_NOT_BE_PURE :5
SOLIDITY_SAFEMATH :5
SOLIDITY_DEPRECATED_CONSTRUCTIONS :2
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_USING_INLINE_ASSEMBLY :5