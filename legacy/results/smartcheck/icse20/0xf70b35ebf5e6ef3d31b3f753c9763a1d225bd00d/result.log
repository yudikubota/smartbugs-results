/unique_chucks/39/0xf70b35ebf5e6ef3d31b3f753c9763a1d225bd00d.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 56
column: 40
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 57
column: 40
content: 0xb8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 58
column: 40
content: 0xc0

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 59
column: 40
content: 0xf8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 280
column: 46
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 429
column: 24
content: 0x1d03ae68

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 484
column: 24
content: 0xffd6d828

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 548
column: 24
content: 0x835fc6ca

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 637
column: 33
content: 0xb8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 643
column: 33
content: 0xb9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 995
column: 27
content: 0x01

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 333
column: 8
content: for(;i<_values.length;++i)_size+=_values[i].length;

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 359
column: 8
content: for(i=0;i<_values.length;++i){bytesmemory_val=_values[i];uint_valPtr;assembly{_valPtr:=add(_val,0x20)}copy(_valPtr,_ptr,_val.length);_ptr+=_val.length;}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 704
column: 8
content: for(uinti=0;i<b.length;i++){_number=_number+uint(b[i])*(2**(8*(b.length-(i+1))));}

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1159
column: 8
content: for(uinti=0;i<(_data.length-97);i++){_transferData[i]=_data[i+97];}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 327
column: 4
content: functiontoRlp(bytes[]memory_values)internalpurereturns(bytesmemory_bytes){uint_ptr;uint_size;uinti;for(;i<_values.length;++i)_size+=_values[i].length;assembly{_bytes:=mload(0x40)_ptr:=add(_bytes,0x20)}if(_size<=55){assembly{mstore8(_ptr,add(0xc0,_size))_ptr:=add(_ptr,1)}}else{uint_size2=uintMinimalSize(_size);assembly{mstore8(_ptr,add(0xf7,_size2))_ptr:=add(_ptr,1)mstore(_ptr,mul(_size,exp(256,sub(32,_size2))))_ptr:=add(_ptr,_size2)}}for(i=0;i<_values.length;++i){bytesmemory_val=_values[i];uint_valPtr;assembly{_valPtr:=add(_val,0x20)}copy(_valPtr,_ptr,_val.length);_ptr+=_val.length;}assembly{mstore(0x40,_ptr)mstore(_bytes,sub(sub(_ptr,_bytes),0x20))}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 378
column: 4
content: functionuintMinimalSize(uint_value)internalpurereturns(uint_size){for(;_value!=0;_size++)_value/=256;}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 415
column: 4
content: functiondecodeRawTxGetBiddingInfo(bytesmemory_signedRawTxBidding,uint8_chainId)internalpurereturns(bytes32_hashRawTxTokenTransfer,address_auctionContractAddress,uint256_bidAmount,address_signerBid){bytesmemory_auctionBidlData;RLPReader.RLPItem[]memory_signedRawTxBiddingRLPItem=_signedRawTxBidding.toRlpItem().toList();_auctionContractAddress=_signedRawTxBiddingRLPItem[3].toAddress();_auctionBidlData=_signedRawTxBiddingRLPItem[5].toBytes();bytes4_selector;assembly{_selector:=mload(add(_auctionBidlData,0x20))}_signerBid=getSignerFromSignedRawTxRLPItemp(_signedRawTxBiddingRLPItem,_chainId);if(_selector==0x1d03ae68){assembly{_bidAmount:=mload(add(_auctionBidlData,add(4,0x20)))_hashRawTxTokenTransfer:=mload(add(_auctionBidlData,add(68,0x20)))}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 471
column: 4
content: functiondecodeRawTxGetCreateAuctionInfoData(bytesmemory_createAuctionlData)internalpurereturns(bytesmemory_signedRawTxTokenTransfer,address_tokenContractAddress,uint256_tokenId,uint8_rewardPercent){bytes4_selector;assembly{_selector:=mload(add(_createAuctionlData,0x20))}uint_positionOfSignedRawTxTokenTransfer;uint_sizeOfSignedRawTxTokenTransfer;if(_selector==0xffd6d828){assembly{_positionOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(4,0x20)))_sizeOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(add(_positionOfSignedRawTxTokenTransfer,4),0x20)))_tokenContractAddress:=mload(add(_createAuctionlData,add(add(mul(1,32),4),0x20)))_tokenId:=mload(add(_createAuctionlData,add(add(mul(2,32),4),0x20)))_rewardPercent:=mload(add(_createAuctionlData,add(add(mul(5,32),4),0x20)))}_signedRawTxTokenTransfer=newbytes(_sizeOfSignedRawTxTokenTransfer);for(uinti=0;i<_sizeOfSignedRawTxTokenTransfer;i++){_signedRawTxTokenTransfer[i]=_createAuctionlData[i+_positionOfSignedRawTxTokenTransfer+4+32];}}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 535
column: 4
content: functiondecodeRawTxGetWithdrawalInfo(bytesmemory_signedRawTxWithdrawal,uint8_chainId)internalpurereturns(addresswithdrawalSigner,uint256withdrawalAmount){bytes4_selector;bytesmemory_withdrawalData;RLPReader.RLPItem[]memory_signedRawTxWithdrawalRLPItem=_signedRawTxWithdrawal.toRlpItem().toList();_withdrawalData=_signedRawTxWithdrawalRLPItem[5].toBytes();assembly{_selector:=mload(add(_withdrawalData,0x20))}withdrawalSigner=getSignerFromSignedRawTxRLPItemp(_signedRawTxWithdrawalRLPItem,_chainId);if(_selector==0x835fc6ca){assembly{withdrawalAmount:=mload(add(_withdrawalData,add(4,0x20)))}}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 359
column: 8
content: for(i=0;i<_values.length;++i){bytesmemory_val=_values[i];uint_valPtr;assembly{_valPtr:=add(_val,0x20)}copy(_valPtr,_ptr,_val.length);_ptr+=_val.length;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 704
column: 8
content: for(uinti=0;i<b.length;i++){_number=_number+uint(b[i])*(2**(8*(b.length-(i+1))));}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 123
column: 15
content: currPtr<endPtr

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 995
column: 12
content: if(_data[97]>0x01){revert("More than one transfer function to call");}else{emitLogError(version,"AUCTION_END_VOUCHER_TRANSFER_FAILED");return;}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1096
column: 8
content: if(!_sendAddress.send(_sendAmount)){revert("Failed to send funds");}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1111
column: 12
content: if(!_sendAddress.send(_sendAmount)){revert("Failed to send funds");}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1138
column: 16
content: if(!addDepotEth(_sendAddress,_sendAmount)){revert("Can't add deposit");}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1149
column: 8
content: if(uint256(_infoFromBidding.amount)!=_sentAmount){revert("Bidding amount is not equal to sent amount");}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 714
column: 4
content: usingSafeMathforuint256;

ruleId: SOLIDITY_SEND
patternId: 430636
severity: 1
line: 1096
column: 25
content: send(_sendAmount)

ruleId: SOLIDITY_SEND
patternId: 430636
severity: 1
line: 1111
column: 29
content: send(_sendAmount)

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 71
column: 4
content: functiontoRlpItem(bytesmemoryitem)internalpurereturns(RLPItemmemory){if(item.length==0)returnRLPItem(0,0);uintmemPtr;assembly{memPtr:=add(item,0x20)}returnRLPItem(item.length,memPtr);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 106
column: 4
content: functionisList(RLPItemmemoryitem)internalpurereturns(bool){uint8byte0;uintmemPtr=item.memPtr;assembly{byte0:=byte(0,mload(memPtr))}if(byte0<LIST_SHORT_START)returnfalse;returntrue;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 132
column: 4
content: function_itemLength(uintmemPtr)internalpurereturns(uintlen){uintbyte0;assembly{byte0:=byte(0,mload(memPtr))}if(byte0<STRING_SHORT_START)return1;elseif(byte0<STRING_LONG_START)returnbyte0-STRING_SHORT_START+1;elseif(byte0<LIST_SHORT_START){assembly{letbyteLen:=sub(byte0,0xb7)memPtr:=add(memPtr,1)letdataLen:=div(mload(memPtr),exp(256,sub(32,byteLen)))len:=add(dataLen,add(byteLen,1))}}elseif(byte0<LIST_LONG_START){returnbyte0-LIST_SHORT_START+1;}else{assembly{letbyteLen:=sub(byte0,0xf7)memPtr:=add(memPtr,1)letdataLen:=div(mload(memPtr),exp(256,sub(32,byteLen)))len:=add(dataLen,add(byteLen,1))}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 171
column: 4
content: function_payloadOffset(uintmemPtr)internalpurereturns(uint){uintbyte0;assembly{byte0:=byte(0,mload(memPtr))}if(byte0<STRING_SHORT_START)return0;elseif(byte0<STRING_LONG_START||(byte0>=LIST_SHORT_START&&byte0<LIST_LONG_START))return1;elseif(byte0<LIST_SHORT_START)returnbyte0-(STRING_LONG_START-1)+1;elsereturnbyte0-(LIST_LONG_START-1)+1;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 189
column: 4
content: functiontoBoolean(RLPItemmemoryitem)internalpurereturns(bool){require(item.len==1,"Invalid RLPItem. Booleans are encoded in 1 byte");uintresult;uintmemPtr=item.memPtr;assembly{result:=byte(0,mload(memPtr))}returnresult==0?false:true;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 200
column: 4
content: functiontoAddress(RLPItemmemoryitem)internalpurereturns(address){require(item.len==21,"Invalid RLPItem. Addresses are encoded in 20 bytes");uintmemPtr=item.memPtr+1;uintaddr;assembly{addr:=div(mload(memPtr),exp(256,12))}returnaddress(addr);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 213
column: 4
content: functiontoUint(RLPItemmemoryitem)internalpurereturns(uint){uintoffset=_payloadOffset(item.memPtr);uintlen=item.len-offset;uintmemPtr=item.memPtr+offset;uintresult;assembly{result:=div(mload(memPtr),exp(256,sub(32,len)))}returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 226
column: 4
content: functiontoBytes(RLPItemmemoryitem)internalpurereturns(bytes){uintoffset=_payloadOffset(item.memPtr);uintlen=item.len-offset;bytesmemoryresult=newbytes(len);uintdestPtr;assembly{destPtr:=add(0x20,result)}copy(item.memPtr+offset,destPtr,len);returnresult;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 246
column: 4
content: functioncopy(uintsrc,uintdest,uintlen)internalpure{for(;len>=WORD_SIZE;len-=WORD_SIZE){assembly{mstore(dest,mload(src))}src+=WORD_SIZE;dest+=WORD_SIZE;}uintmask=256**(WORD_SIZE-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 268
column: 4
content: functiontoRlp(bytesmemory_value)internalpurereturns(bytesmemory_bytes){uint_valuePtr;uint_rplPtr;uint_valueLength=_value.length;assembly{_valuePtr:=add(_value,0x20)_bytes:=mload(0x40)_rplPtr:=add(_bytes,0x20)}if(_valueLength==1&&_value[0]<=0x7f){assembly{mstore(_bytes,1)mstore(_rplPtr,mload(_valuePtr))mstore(0x40,add(_rplPtr,1))}return;}if(_valueLength<=55){assembly{mstore(_bytes,add(1,_valueLength))mstore8(_rplPtr,add(0x80,_valueLength))mstore(0x40,add(add(_rplPtr,1),_valueLength))}copy(_valuePtr,_rplPtr+1,_valueLength);return;}uint_lengthSize=uintMinimalSize(_valueLength);assembly{mstore(_bytes,add(add(1,_lengthSize),_valueLength))mstore8(_rplPtr,add(0xb7,_lengthSize))mstore(add(_rplPtr,1),mul(_valueLength,exp(256,sub(32,_lengthSize))))mstore(0x40,add(add(add(_rplPtr,1),_lengthSize),_valueLength))}copy(_valuePtr,_rplPtr+1+_lengthSize,_valueLength);return;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 315
column: 4
content: functiontoRlp(uint_value)internalpurereturns(bytesmemory_bytes){uint_size=uintMinimalSize(_value);bytesmemory_valueBytes=newbytes(_size);assembly{mstore(add(_valueBytes,0x20),mul(_value,exp(256,sub(32,_size))))}returntoRlp(_valueBytes);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 327
column: 4
content: functiontoRlp(bytes[]memory_values)internalpurereturns(bytesmemory_bytes){uint_ptr;uint_size;uinti;for(;i<_values.length;++i)_size+=_values[i].length;assembly{_bytes:=mload(0x40)_ptr:=add(_bytes,0x20)}if(_size<=55){assembly{mstore8(_ptr,add(0xc0,_size))_ptr:=add(_ptr,1)}}else{uint_size2=uintMinimalSize(_size);assembly{mstore8(_ptr,add(0xf7,_size2))_ptr:=add(_ptr,1)mstore(_ptr,mul(_size,exp(256,sub(32,_size2))))_ptr:=add(_ptr,_size2)}}for(i=0;i<_values.length;++i){bytesmemory_val=_values[i];uint_valPtr;assembly{_valPtr:=add(_val,0x20)}copy(_valPtr,_ptr,_val.length);_ptr+=_val.length;}assembly{mstore(0x40,_ptr)mstore(_bytes,sub(sub(_ptr,_bytes),0x20))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 388
column: 4
content: functioncopy(uintsrc,uintdest,uintlen)internalpure{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}src+=32;dest+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 415
column: 4
content: functiondecodeRawTxGetBiddingInfo(bytesmemory_signedRawTxBidding,uint8_chainId)internalpurereturns(bytes32_hashRawTxTokenTransfer,address_auctionContractAddress,uint256_bidAmount,address_signerBid){bytesmemory_auctionBidlData;RLPReader.RLPItem[]memory_signedRawTxBiddingRLPItem=_signedRawTxBidding.toRlpItem().toList();_auctionContractAddress=_signedRawTxBiddingRLPItem[3].toAddress();_auctionBidlData=_signedRawTxBiddingRLPItem[5].toBytes();bytes4_selector;assembly{_selector:=mload(add(_auctionBidlData,0x20))}_signerBid=getSignerFromSignedRawTxRLPItemp(_signedRawTxBiddingRLPItem,_chainId);if(_selector==0x1d03ae68){assembly{_bidAmount:=mload(add(_auctionBidlData,add(4,0x20)))_hashRawTxTokenTransfer:=mload(add(_auctionBidlData,add(68,0x20)))}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 471
column: 4
content: functiondecodeRawTxGetCreateAuctionInfoData(bytesmemory_createAuctionlData)internalpurereturns(bytesmemory_signedRawTxTokenTransfer,address_tokenContractAddress,uint256_tokenId,uint8_rewardPercent){bytes4_selector;assembly{_selector:=mload(add(_createAuctionlData,0x20))}uint_positionOfSignedRawTxTokenTransfer;uint_sizeOfSignedRawTxTokenTransfer;if(_selector==0xffd6d828){assembly{_positionOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(4,0x20)))_sizeOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(add(_positionOfSignedRawTxTokenTransfer,4),0x20)))_tokenContractAddress:=mload(add(_createAuctionlData,add(add(mul(1,32),4),0x20)))_tokenId:=mload(add(_createAuctionlData,add(add(mul(2,32),4),0x20)))_rewardPercent:=mload(add(_createAuctionlData,add(add(mul(5,32),4),0x20)))}_signedRawTxTokenTransfer=newbytes(_sizeOfSignedRawTxTokenTransfer);for(uinti=0;i<_sizeOfSignedRawTxTokenTransfer;i++){_signedRawTxTokenTransfer[i]=_createAuctionlData[i+_positionOfSignedRawTxTokenTransfer+4+32];}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 509
column: 4
content: functionecrecoverSigner(bytes32_hashTx,bytes_rsvTx,uintoffset)internalpurereturns(addressecrecoverAddress){bytes32r;bytes32s;bytes1v;assembly{r:=mload(add(_rsvTx,add(offset,0x20)))s:=mload(add(_rsvTx,add(offset,0x40)))v:=mload(add(_rsvTx,add(offset,0x60)))}ecrecoverAddress=ecrecover(_hashTx,uint8(v),r,s);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 535
column: 4
content: functiondecodeRawTxGetWithdrawalInfo(bytesmemory_signedRawTxWithdrawal,uint8_chainId)internalpurereturns(addresswithdrawalSigner,uint256withdrawalAmount){bytes4_selector;bytesmemory_withdrawalData;RLPReader.RLPItem[]memory_signedRawTxWithdrawalRLPItem=_signedRawTxWithdrawal.toRlpItem().toList();_withdrawalData=_signedRawTxWithdrawalRLPItem[5].toBytes();assembly{_selector:=mload(add(_withdrawalData,0x20))}withdrawalSigner=getSignerFromSignedRawTxRLPItemp(_signedRawTxWithdrawalRLPItem,_chainId);if(_selector==0x835fc6ca){assembly{withdrawalAmount:=mload(add(_withdrawalData,add(4,0x20)))}}}

ruleId: SOLIDITY_SHOULD_NOT_BE_VIEW
patternId: 189abf
severity: 1
line: 696
column: 4
content: functionisContract(address_contractAddress)internalviewreturns(bool){uint_size;assembly{_size:=extcodesize(_contractAddress)}return_size>0;}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 415
column: 111
content: (bytes32_hashRawTxTokenTransfer,address_auctionContractAddress,uint256_bidAmount,address_signerBid)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 442
column: 123
content: (bytes32_tokenHash,address_auctionFactoryContractAddress,address_signerCreate,address_tokenContractAddress,uint256_tokenId,uint8_rewardPercent)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 471
column: 104
content: (bytesmemory_signedRawTxTokenTransfer,address_tokenContractAddress,uint256_tokenId,uint8_rewardPercent)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 535
column: 117
content: (addresswithdrawalSigner,uint256withdrawalAmount)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 568
column: 122
content: (bytesmemory_rawTx,bytesmemory_rsvTx)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 7d54ca
severity: 1
line: 629
column: 118
content: (uint,bool)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 91h3sa
severity: 1
line: 829
column: 15
content: public

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 226
column: 65
content: bytes

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 511
column: 8
content: bytes_rsvTx

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 702
column: 25
content: bytesb

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1022
column: 38
content: bytes_signedRawTxCreateAuction

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 341gim
severity: 1
line: 1035
column: 32
content: bytes_signedRawTxBidding

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 76
column: 8
content: assembly{memPtr:=add(item,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 109
column: 8
content: assembly{byte0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 134
column: 8
content: assembly{byte0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 145
column: 12
content: assembly{letbyteLen:=sub(byte0,0xb7)memPtr:=add(memPtr,1)letdataLen:=div(mload(memPtr),exp(256,sub(32,byteLen)))len:=add(dataLen,add(byteLen,1))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 160
column: 12
content: assembly{letbyteLen:=sub(byte0,0xf7)memPtr:=add(memPtr,1)letdataLen:=div(mload(memPtr),exp(256,sub(32,byteLen)))len:=add(dataLen,add(byteLen,1))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 173
column: 8
content: assembly{byte0:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 193
column: 8
content: assembly{result:=byte(0,mload(memPtr))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 206
column: 8
content: assembly{addr:=div(mload(memPtr),exp(256,12))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 219
column: 8
content: assembly{result:=div(mload(memPtr),exp(256,sub(32,len)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 232
column: 8
content: assembly{destPtr:=add(0x20,result)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 249
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 259
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 273
column: 8
content: assembly{_valuePtr:=add(_value,0x20)_bytes:=mload(0x40)_rplPtr:=add(_bytes,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 281
column: 12
content: assembly{mstore(_bytes,1)mstore(_rplPtr,mload(_valuePtr))mstore(0x40,add(_rplPtr,1))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 291
column: 12
content: assembly{mstore(_bytes,add(1,_valueLength))mstore8(_rplPtr,add(0x80,_valueLength))mstore(0x40,add(add(_rplPtr,1),_valueLength))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 304
column: 8
content: assembly{mstore(_bytes,add(add(1,_lengthSize),_valueLength))mstore8(_rplPtr,add(0xb7,_lengthSize))mstore(add(_rplPtr,1),mul(_valueLength,exp(256,sub(32,_lengthSize))))mstore(0x40,add(add(add(_rplPtr,1),_lengthSize),_valueLength))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 320
column: 8
content: assembly{mstore(add(_valueBytes,0x20),mul(_value,exp(256,sub(32,_size))))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 337
column: 8
content: assembly{_bytes:=mload(0x40)_ptr:=add(_bytes,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 343
column: 12
content: assembly{mstore8(_ptr,add(0xc0,_size))_ptr:=add(_ptr,1)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 350
column: 12
content: assembly{mstore8(_ptr,add(0xf7,_size2))_ptr:=add(_ptr,1)mstore(_ptr,mul(_size,exp(256,sub(32,_size2))))_ptr:=add(_ptr,_size2)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 363
column: 12
content: assembly{_valPtr:=add(_val,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 372
column: 8
content: assembly{mstore(0x40,_ptr)mstore(_bytes,sub(sub(_ptr,_bytes),0x20))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 391
column: 12
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 401
column: 8
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 424
column: 8
content: assembly{_selector:=mload(add(_auctionBidlData,0x20))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 431
column: 12
content: assembly{_bidAmount:=mload(add(_auctionBidlData,add(4,0x20)))_hashRawTxTokenTransfer:=mload(add(_auctionBidlData,add(68,0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 478
column: 8
content: assembly{_selector:=mload(add(_createAuctionlData,0x20))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 486
column: 12
content: assembly{_positionOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(4,0x20)))_sizeOfSignedRawTxTokenTransfer:=mload(add(_createAuctionlData,add(add(_positionOfSignedRawTxTokenTransfer,4),0x20)))_tokenContractAddress:=mload(add(_createAuctionlData,add(add(mul(1,32),4),0x20)))_tokenId:=mload(add(_createAuctionlData,add(add(mul(2,32),4),0x20)))_rewardPercent:=mload(add(_createAuctionlData,add(add(mul(5,32),4),0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 519
column: 8
content: assembly{r:=mload(add(_rsvTx,add(offset,0x20)))s:=mload(add(_rsvTx,add(offset,0x40)))v:=mload(add(_rsvTx,add(offset,0x60)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 543
column: 8
content: assembly{_selector:=mload(add(_withdrawalData,0x20))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 550
column: 12
content: assembly{withdrawalAmount:=mload(add(_withdrawalData,add(4,0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 670
column: 8
content: assembly{let_ptr:=mload(0x40)sig:=mload(add(_callData,0x20))mstore(_ptr,sig)for{leti:=0x04}lt(i,_sizeOfCallUint){i:=add(i,0x20)}{mstore(add(_ptr,i),mload(add(_callData,add(0x20,i))))}_success:=call(sub(gas,10000),_tokenContractAddress,0,_ptr,_sizeOfCallUint,_ptr,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1083
column: 8
content: assembly{_sendAddress:=mload(add(_send,add(offset,0x14)))_sendAmount:=mload(add(_send,add(add(offset,20),0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1103
column: 12
content: assembly{_sendAddress:=mload(add(_send,add(offset,0x14)))_sendAmount:=mload(add(_send,add(add(offset,20),0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1118
column: 12
content: assembly{_numberOfSendDepositBytes2:=mload(add(_send,add(offset,0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1129
column: 16
content: assembly{_sendAddress:=mload(add(_send,add(offset,0x14)))_sendAmountGwei:=mload(add(_send,add(add(offset,20),0x20)))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 1173
column: 8
content: assembly{_biddingHashProof:=mload(add(_data,add(0,0x20)))}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 56
column: 4
content: uint8constantSTRING_SHORT_START=0x80;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 57
column: 4
content: uint8constantSTRING_LONG_START=0xb8;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 58
column: 4
content: uint8constantLIST_SHORT_START=0xc0;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 59
column: 4
content: uint8constantLIST_LONG_START=0xf8;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 61
column: 4
content: uint8constantWORD_SIZE=32;

SOLIDITY_VISIBILITY :5
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :5
SOLIDITY_EXTRA_GAS_IN_LOOPS :4
SOLIDITY_ADDRESS_HARDCODED :11
SOLIDITY_UPGRADE_TO_050 :6
SOLIDITY_GAS_LIMIT_IN_LOOPS :3
SOLIDITY_SHOULD_RETURN_STRUCT :6
SOLIDITY_SHOULD_NOT_BE_PURE :17
SOLIDITY_SAFEMATH :1
SOLIDITY_REVERT_REQUIRE :5
SOLIDITY_SEND :2
SOLIDITY_USING_INLINE_ASSEMBLY :37
SOLIDITY_SHOULD_NOT_BE_VIEW :1