/unique_chucks/13/0xdba0521fba14c9601812a5e58173dda953257787.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 3
column: 0
content: contractSMINT{structInvoice{addressbeneficiary;uintamount;addresspayer;}addresspublicowner;stringpublicname='SMINT';stringpublicsymbol='SMINT';uint8publicdecimals=18;uintpublictotalSupply=100000000000000000000000000000;uintpubliccurrentInvoice=0;uintpubliclastEfficientBlockNumber;mapping(address=>uint)publicbalanceOf;mapping(address=>uint)publicfrozenBalanceOf;mapping(address=>uint)publicsuccessesOf;mapping(address=>uint)publicfailsOf;mapping(address=>mapping(address=>uint))publicallowance;mapping(uint=>Invoice)publicinvoices;eventTransfer(addressindexedfrom,addressindexedto,uintvalue);eventMine(addressindexedminer,uintvalue,uintrewardAddition);eventBill(uintinvoiceId);eventPay(uintindexedinvoiceId);modifieronlyOwner{if(msg.sender!=owner)revert();_;}functionSMINT()public{owner=msg.sender;balanceOf[msg.sender]=totalSupply;lastEfficientBlockNumber=block.number;}function_transfer(address_from,address_to,uint_value)internal{require(_to!=0x0);require(balanceOf[_from]>=_value);require(balanceOf[_to]+_value>balanceOf[_to]);balanceOf[_from]-=_value;balanceOf[_to]+=_value;Transfer(_from,_to,_value);}function_unfreezeMaxTokens(uint_value)internal{uintamount=frozenBalanceOf[msg.sender]>_value?_value:frozenBalanceOf[msg.sender];if(amount>0){balanceOf[msg.sender]+=amount;frozenBalanceOf[msg.sender]-=amount;Transfer(this,msg.sender,amount);}}functiontransferAndFreeze(address_to,uint_value)onlyOwnerexternal{require(_to!=0x0);require(balanceOf[owner]>=_value);require(frozenBalanceOf[_to]+_value>frozenBalanceOf[_to]);balanceOf[owner]-=_value;frozenBalanceOf[_to]+=_value;Transfer(owner,this,_value);}functiontransfer(address_to,uint_value)publicreturns(boolsuccess){_transfer(msg.sender,_to,_value);returntrue;}functionbill(uint_amount)external{require(_amount>0);invoices[currentInvoice]=Invoice({beneficiary:msg.sender,amount:_amount,payer:0x0});Bill(currentInvoice);currentInvoice++;}functionpay(uint_invoiceId)external{require(_invoiceId<currentInvoice);require(invoices[_invoiceId].payer==0x0);_transfer(msg.sender,invoices[_invoiceId].beneficiary,invoices[_invoiceId].amount);invoices[_invoiceId].payer=msg.sender;Pay(_invoiceId);}functiontransferFrom(address_from,address_to,uint_value)publicreturns(boolsuccess){require(_value<=allowance[_from][msg.sender]);allowance[_from][msg.sender]-=_value;_transfer(_from,_to,_value);returntrue;}functionapprove(address_spender,uint_value)publicreturns(boolsuccess){allowance[msg.sender][_spender]=_value;returntrue;}function()externalpayable{if(msg.value>0){revert();}uintminedAtBlock=uint(block.blockhash(block.number-1));uintminedHashRel=uint(sha256(minedAtBlock+uint(msg.sender)+block.timestamp))%1000000;uintbalanceRel=(balanceOf[msg.sender]+frozenBalanceOf[msg.sender])*1000000/totalSupply;if(balanceRel>0){uintk=balanceRel;if(k>255){k=255;}k=2**k;balanceRel=500000/k;balanceRel=500000-balanceRel;if(minedHashRel<balanceRel){uintreward=100000000000000000+minedHashRel*1000000000000000;uintrewardAddition=reward*(block.number-lastEfficientBlockNumber)*197/1000000;reward+=rewardAddition;balanceOf[msg.sender]+=reward;totalSupply+=reward;_unfreezeMaxTokens(reward);Transfer(0,this,reward);Transfer(this,msg.sender,reward);Mine(msg.sender,reward,rewardAddition);successesOf[msg.sender]++;lastEfficientBlockNumber=block.number;}else{Mine(msg.sender,0,0);failsOf[msg.sender]++;}}else{revert();}}}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 34
column: 8
content: if(msg.sender!=owner)revert();

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 114
column: 8
content: if(msg.value>0){revert();}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 121
column: 8
content: if(balanceRel>0){uintk=balanceRel;if(k>255){k=255;}k=2**k;balanceRel=500000/k;balanceRel=500000-balanceRel;if(minedHashRel<balanceRel){uintreward=100000000000000000+minedHashRel*1000000000000000;uintrewardAddition=reward*(block.number-lastEfficientBlockNumber)*197/1000000;reward+=rewardAddition;balanceOf[msg.sender]+=reward;totalSupply+=reward;_unfreezeMaxTokens(reward);Transfer(0,this,reward);Transfer(this,msg.sender,reward);Mine(msg.sender,reward,rewardAddition);successesOf[msg.sender]++;lastEfficientBlockNumber=block.number;}else{Mine(msg.sender,0,0);failsOf[msg.sender]++;}}else{revert();}

SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :3
SOLIDITY_LOCKED_MONEY :1