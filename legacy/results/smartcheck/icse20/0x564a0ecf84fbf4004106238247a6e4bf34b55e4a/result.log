/unique_chucks/18/0x564a0ecf84fbf4004106238247a6e4bf34b55e4a.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 43
column: 24
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 113
column: 50
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 144
column: 67
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 219
column: 56
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 224
column: 8
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1191
column: 12
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1246
column: 68
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1247
column: 78
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1248
column: 145
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1251
column: 52
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1352
column: 121
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1353
column: 52
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1354
column: 52
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1478
column: 68
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1479
column: 62
content: throw

ruleId: SOLIDITY_DEPRECATED_CONSTRUCTIONS
patternId: 49bd2a
severity: 1
line: 1482
column: 74
content: throw

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 1023
column: 16
content: safeAdd(safeMul(safeSub(tradePrice,limitPrice),qty)/limitPrice,safeMul(qty,fee)/(1ether))*1e10

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 1032
column: 16
content: safeAdd(safeAdd(safeMul(safeSub(limitPrice,tradePrice),qty)/limitPrice,safeMul(qty,fee)/(1ether)),gasFee/1e10)*1e10

ruleId: SOLIDITY_EXTRA_GAS_IN_LOOPS
patternId: d3j11j
severity: 1
line: 1054
column: 8
content: for(uinti=0;i<tradeAddresses.length;i++){futuresTrade(v[i],rs[i],tradeValues[i],tradeAddresses[i],takerIsBuying[i],futuresContractHash[i]);}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 1054
column: 8
content: for(uinti=0;i<tradeAddresses.length;i++){futuresTrade(v[i],rs[i],tradeValues[i],tradeAddresses[i],takerIsBuying[i],futuresContractHash[i]);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 78
column: 4
content: functionsetOwner(addressnewOwner)onlyOwner{emitSetOwner(owner,newOwner);owner=newOwner;}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 204
column: 4
content: functionsetFees(uint256makerFee_,uint256takerFee_)onlyOwner{require(makerFee_<10finney&&takerFee_<10finney);makerFee=makerFee_;takerFee=takerFee_;emitFeeChange(makerFee,takerFee);}

ruleId: SOLIDITY_OVERPOWERED_ROLE
patternId: j83hf7
severity: 2
line: 213
column: 4
content: functionsetAdmin(addressadmin,boolisAdmin)onlyOwner{admins[admin]=isAdmin;}

ruleId: SOLIDITY_PRAGMAS_VERSION
patternId: 23fc32
severity: 1
line: 1
column: 16
content: ^

ruleId: SOLIDITY_REDUNDANT_FALLBACK_REJECT
patternId: b85a32
severity: 1
line: 223
column: 24
content: {throw;}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 43
column: 8
content: if(!assertion)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 113
column: 8
content: if(futuresAssets[futuresAsset].disabled)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 144
column: 8
content: if(futuresContracts[futuresContract].expirationBlock>0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 219
column: 8
content: if(msg.sender!=owner&&!admins[msg.sender])throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1189
column: 8
content: if(!validateUint128(size)||!validateUint64(price)){throw;}

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1246
column: 8
content: if(futuresContracts[futuresContract].expirationBlock==0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1247
column: 8
content: if(futuresContracts[futuresContract].expirationBlock>block.number)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1248
column: 8
content: if(safeAdd(futuresContracts[futuresContract].expirationBlock,EtherMium(exchangeContract).getInactivityReleasePeriod())>block.number)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1251
column: 8
content: if(retrievePosition(positionHash)[1]==0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1352
column: 8
content: if(futuresContracts[futuresContract].closed==false&&futuresContracts[futuresContract].expirationBlock!=0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1353
column: 8
content: if(retrievePosition(positionHash)[1]==0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1354
column: 8
content: if(retrievePosition(positionHash)[0]==0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1478
column: 8
content: if(futuresContracts[futuresContract].expirationBlock==0)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1479
column: 8
content: if(futuresContracts[futuresContract].closed==true)throw;

ruleId: SOLIDITY_REVERT_REQUIRE
patternId: c56b12
severity: 1
line: 1480
column: 8
content: if(futuresContracts[futuresContract].expirationBlock>block.number&&closingPrice>futuresContracts[futuresContract].floorPrice&&closingPrice<futuresContracts[futuresContract].capPrice)throw;

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 112
column: 31
content: keccak256(this,name,baseToken,priceUrl,pricePath,multiplied,multiplierPriceUrl,multiplierPricePath,inverseMultiplier)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 143
column: 34
content: keccak256(this,asset,expirationBlock,floorPrice,capPrice)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 333
column: 30
content: keccak256(this,futuresContractHash,tradeAddresses[0],tradeValues[4],tradeValues[6],!takerIsBuying,tradeValues[0])

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 334
column: 30
content: keccak256(this,futuresContractHash,tradeAddresses[1],tradeValues[5],tradeValues[7],takerIsBuying,tradeValues[1])

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 343
column: 42
content: keccak256(this,tradeAddresses[0],futuresContractHash,!takerIsBuying)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 344
column: 42
content: keccak256(this,tradeAddresses[0],futuresContractHash,takerIsBuying)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 346
column: 42
content: keccak256(this,tradeAddresses[1],futuresContractHash,takerIsBuying)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 347
column: 42
content: keccak256(this,tradeAddresses[1],futuresContractHash,!takerIsBuying)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 369
column: 22
content: keccak256("\x19Ethereum Signed Message:\n32",t.makerOrderHash)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 376
column: 22
content: keccak256("\x19Ethereum Signed Message:\n32",t.takerOrderHash)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 1250
column: 31
content: keccak256(this,msg.sender,futuresContract,side)

ruleId: SOLIDITY_UPGRADE_TO_050
patternId: 901eae
severity: 1
line: 1350
column: 31
content: keccak256(this,msg.sender,futuresContract,side)

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 13
column: 4
content: functiontransfer(address_to,uint256_value)returns(boolsuccess);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 14
column: 4
content: functionapproveAndCall(address_spender,uint256_value,bytes_extraData)returns(boolsuccess);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 15
column: 4
content: functionapprove(address_spender,uint256_value)returns(boolsuccess);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 16
column: 4
content: functiontransferFrom(address_from,address_to,uint256_value)returns(boolsuccess);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 21
column: 4
content: functiongetReserve(addresstoken,addressuser)returns(uint256);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 22
column: 4
content: functionsetReserve(addresstoken,addressuser,uint256amount)returns(bool);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 24
column: 4
content: functionavailableBalanceOf(addresstoken,addressuser)returns(uint256);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 25
column: 4
content: functionbalanceOf(addresstoken,addressuser)returns(uint256);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 28
column: 4
content: functionsetBalance(addresstoken,addressuser,uint256amount)returns(bool);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 29
column: 4
content: functiongetAffiliate(addressuser)returns(address);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 30
column: 4
content: functiongetInactivityReleasePeriod()returns(uint256);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 31
column: 4
content: functiongetMakerTakerBalances(addresstoken,addressmaker,addresstaker)returns(uint256[4]);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 33
column: 4
content: functiongetEtmTokenAddress()returns(address);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 35
column: 4
content: functionsubBalanceAddReserve(addresstoken,addressuser,uint256subBalance,uint256addReserve)returns(bool);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 36
column: 4
content: functionaddBalanceSubReserve(addresstoken,addressuser,uint256addBalance,uint256subReserve)returns(bool);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 37
column: 4
content: functionsubBalanceSubReserve(addresstoken,addressuser,uint256subBalance,uint256subReserve)returns(bool);

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 42
column: 4
content: functionassert(boolassertion)pure{if(!assertion)throw;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 47
column: 4
content: functionsafeMul(uinta,uintb)purereturns(uint){uintc=a*b;assert(a==0||c/a==b);returnc;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 54
column: 4
content: functionsafeSub(uinta,uintb)purereturns(uint){assert(b<=a);returna-b;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 60
column: 4
content: functionsafeAdd(uinta,uintb)purereturns(uint){uintc=a+b;assert(c>=a&&c>=b);returnc;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 78
column: 4
content: functionsetOwner(addressnewOwner)onlyOwner{emitSetOwner(owner,newOwner);owner=newOwner;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 84
column: 4
content: functiongetOwner()viewreturns(addressout){returnowner;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 110
column: 4
content: functioncreateFuturesAsset(stringname,addressbaseToken,stringpriceUrl,stringpricePath,boolmultiplied,stringmultiplierPriceUrl,stringmultiplierPricePath,boolinverseMultiplier)onlyAdminreturns(bytes32){bytes32futuresAsset=keccak256(this,name,baseToken,priceUrl,pricePath,multiplied,multiplierPriceUrl,multiplierPricePath,inverseMultiplier);if(futuresAssets[futuresAsset].disabled)throw;futuresAssets[futuresAsset]=FuturesAsset({name:name,baseToken:baseToken,priceUrl:priceUrl,pricePath:pricePath,multiplied:multiplied,multiplierPriceUrl:multiplierPriceUrl,multiplierPricePath:multiplierPricePath,inverseMultiplier:inverseMultiplier,disabled:false});emitFuturesAssetCreated(futuresAsset,name,baseToken,priceUrl,pricePath,multiplied,multiplierPriceUrl,multiplierPricePath,inverseMultiplier);returnfuturesAsset;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 141
column: 4
content: functioncreateFuturesContract(bytes32asset,uint256expirationBlock,uint256floorPrice,uint256capPrice)onlyAdminreturns(bytes32){bytes32futuresContract=keccak256(this,asset,expirationBlock,floorPrice,capPrice);if(futuresContracts[futuresContract].expirationBlock>0)throw;futuresContracts[futuresContract]=FuturesContract({asset:asset,expirationBlock:expirationBlock,closingPrice:0,closed:false,broken:false,floorPrice:floorPrice,capPrice:capPrice});emitFuturesContractCreated(futuresContract,asset,expirationBlock,floorPrice,capPrice);returnfuturesContract;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 194
column: 4
content: functionExchange(addressfeeAccount_,uint256makerFee_,uint256takerFee_,addressexchangeContract_){owner=msg.sender;feeAccount=feeAccount_;makerFee=makerFee_;takerFee=takerFee_;exchangeContract=exchangeContract_;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 204
column: 4
content: functionsetFees(uint256makerFee_,uint256takerFee_)onlyOwner{require(makerFee_<10finney&&takerFee_<10finney);makerFee=makerFee_;takerFee=takerFee_;emitFeeChange(makerFee,takerFee);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 213
column: 4
content: functionsetAdmin(addressadmin,boolisAdmin)onlyOwner{admins[admin]=isAdmin;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 228
column: 4
content: functionvalidateUint48(uint256val)returns(bool){if(val!=uint48(val))returnfalse;returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 234
column: 4
content: functionvalidateUint64(uint256val)returns(bool){if(val!=uint64(val))returnfalse;returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 240
column: 4
content: functionvalidateUint128(uint256val)returns(bool){if(val!=uint128(val))returnfalse;returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 293
column: 4
content: functionfuturesTrade(uint8[2]v,bytes32[4]rs,uint256[8]tradeValues,address[2]tradeAddresses,booltakerIsBuying,bytes32futuresContractHash)onlyAdminreturns(uintfilledTakerTokenAmount){FuturesOrderPairmemoryt=FuturesOrderPair({makerNonce:tradeValues[0],takerNonce:tradeValues[1],takerGasFee:tradeValues[2],takerIsBuying:tradeValues[3],makerAmount:tradeValues[4],takerAmount:tradeValues[5],makerPrice:tradeValues[6],takerPrice:tradeValues[7],maker:tradeAddresses[0],taker:tradeAddresses[1],makerOrderHash:keccak256(this,futuresContractHash,tradeAddresses[0],tradeValues[4],tradeValues[6],!takerIsBuying,tradeValues[0]),takerOrderHash:keccak256(this,futuresContractHash,tradeAddresses[1],tradeValues[5],tradeValues[7],takerIsBuying,tradeValues[1]),futuresContract:futuresContractHash,baseToken:futuresAssets[futuresContracts[futuresContractHash].asset].baseToken,floorPrice:futuresContracts[futuresContractHash].floorPrice,capPrice:futuresContracts[futuresContractHash].capPrice,makerPositionHash:keccak256(this,tradeAddresses[0],futuresContractHash,!takerIsBuying),makerInversePositionHash:keccak256(this,tradeAddresses[0],futuresContractHash,takerIsBuying),takerPositionHash:keccak256(this,tradeAddresses[1],futuresContractHash,takerIsBuying),takerInversePositionHash:keccak256(this,tradeAddresses[1],futuresContractHash,!takerIsBuying)});if(!validateUint128(t.makerAmount)||!validateUint128(t.takerAmount)||!validateUint64(t.makerPrice)||!validateUint64(t.takerPrice)){emitLogError(uint8(Errors.UINT48_VALIDATION),t.makerOrderHash,t.takerOrderHash);return0;}if(block.number>futuresContracts[t.futuresContract].expirationBlock||futuresContracts[t.futuresContract].closed==true||futuresContracts[t.futuresContract].broken==true){emitLogError(uint8(Errors.FUTURES_CONTRACT_EXPIRED),t.makerOrderHash,t.takerOrderHash);return0;}if(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",t.makerOrderHash),v[0],rs[0],rs[1])!=t.maker){emitLogError(uint8(Errors.INVALID_SIGNATURE),t.makerOrderHash,t.takerOrderHash);return0;}if(ecrecover(keccak256("\x19Ethereum Signed Message:\n32",t.takerOrderHash),v[1],rs[2],rs[3])!=t.taker){emitLogError(uint8(Errors.INVALID_SIGNATURE),t.makerOrderHash,t.takerOrderHash);return0;}if(t.takerGasFee>100finney){emitLogError(uint8(Errors.GAS_TOO_HIGH),t.makerOrderHash,t.takerOrderHash);return0;}if((!takerIsBuying&&t.makerPrice<t.takerPrice)||(takerIsBuying&&t.takerPrice<t.makerPrice)){emitLogError(uint8(Errors.INVALID_PRICE),t.makerOrderHash,t.takerOrderHash);return0;}uint256[4]memorybalances=EtherMium(exchangeContract).getMakerTakerBalances(t.baseToken,t.maker,t.taker);FuturesTradeValuesmemorytv=FuturesTradeValues({qty:0,makerProfit:0,makerLoss:0,takerProfit:0,takerLoss:0,makerBalance:balances[0],takerBalance:balances[1],makerReserve:balances[2],takerReserve:balances[3]});if(futuresContracts[t.futuresContract].floorPrice>=t.makerPrice||futuresContracts[t.futuresContract].capPrice<=t.makerPrice){emitLogError(uint8(Errors.FLOOR_OR_CAP_PRICE_REACHED),t.makerOrderHash,t.takerOrderHash);return0;}tv.qty=min(safeSub(t.makerAmount,orderFills[t.makerOrderHash]),safeSub(t.takerAmount,orderFills[t.takerOrderHash]));if(positionExists(t.makerInversePositionHash)&&positionExists(t.takerInversePositionHash)){tv.qty=min(tv.qty,min(retrievePosition(t.makerInversePositionHash)[0],retrievePosition(t.takerInversePositionHash)[0]));}elseif(positionExists(t.makerInversePositionHash)){tv.qty=min(tv.qty,retrievePosition(t.makerInversePositionHash)[0]);}elseif(positionExists(t.takerInversePositionHash)){tv.qty=min(tv.qty,retrievePosition(t.takerInversePositionHash)[0]);}if(tv.qty==0){emitLogError(uint8(Errors.ORDER_ALREADY_FILLED),t.makerOrderHash,t.takerOrderHash);return0;}if(!takerIsBuying){if(!positionExists(t.makerInversePositionHash)&&!positionExists(t.makerPositionHash)){if(!checkEnoughBalance(t.floorPrice,t.makerPrice,tv.qty,true,makerFee,0,futuresContractHash,safeSub(balances[0],tv.makerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}recordNewPosition(t.makerPositionHash,tv.qty,t.makerPrice,1,block.number);updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerPositionHash,[tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve],[true,true,false]);}else{if(positionExists(t.makerPositionHash)){if(!checkEnoughBalance(t.floorPrice,t.makerPrice,tv.qty,true,makerFee,0,futuresContractHash,safeSub(balances[0],tv.makerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}updatePositionSize(t.makerPositionHash,safeAdd(retrievePosition(t.makerPositionHash)[0],tv.qty),t.makerPrice);updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerPositionHash,[tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve],[false,true,true]);}else{updatePositionSize(t.makerInversePositionHash,safeSub(retrievePosition(t.makerInversePositionHash)[0],tv.qty),0);if(t.makerPrice<retrievePosition(t.makerInversePositionHash)[1]){tv.makerProfit=calculateProfit(t.makerPrice,retrievePosition(t.makerInversePositionHash)[1],tv.qty,futuresContractHash,true);}else{tv.makerLoss=calculateLoss(t.makerPrice,retrievePosition(t.makerInversePositionHash)[1],tv.qty,futuresContractHash,true);}updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerInversePositionHash,[tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve],[false,true,false]);}}if(!positionExists(t.takerInversePositionHash)&&!positionExists(t.takerPositionHash)){if(!checkEnoughBalance(t.capPrice,t.makerPrice,tv.qty,false,takerFee,t.takerGasFee,futuresContractHash,safeSub(balances[1],tv.takerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}recordNewPosition(t.takerPositionHash,tv.qty,t.makerPrice,0,block.number);updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerPositionHash,[tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve],[true,false,false]);}else{if(positionExists(t.takerPositionHash)){if(!checkEnoughBalance(t.capPrice,t.makerPrice,tv.qty,false,takerFee,t.takerGasFee,futuresContractHash,safeSub(balances[1],tv.takerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}updatePositionSize(t.takerPositionHash,safeAdd(retrievePosition(t.takerPositionHash)[0],tv.qty),t.makerPrice);updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerPositionHash,[tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,0,tv.takerReserve],[false,false,true]);}else{updatePositionSize(t.takerInversePositionHash,safeSub(retrievePosition(t.takerInversePositionHash)[0],tv.qty),0);if(t.makerPrice>retrievePosition(t.takerInversePositionHash)[1]){tv.takerProfit=calculateProfit(t.makerPrice,retrievePosition(t.takerInversePositionHash)[1],tv.qty,futuresContractHash,false);}else{tv.takerLoss=calculateLoss(t.makerPrice,retrievePosition(t.takerInversePositionHash)[1],tv.qty,futuresContractHash,false);}updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerInversePositionHash,[tv.qty,t.makerPrice,takerFee,tv.takerProfit,tv.takerLoss,tv.takerBalance,t.takerGasFee,tv.takerReserve],[false,false,false]);}}}else{if(!positionExists(t.makerInversePositionHash)&&!positionExists(t.makerPositionHash)){if(!checkEnoughBalance(t.floorPrice,t.makerPrice,tv.qty,true,makerFee,0,futuresContractHash,safeSub(balances[0],tv.makerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}recordNewPosition(t.makerPositionHash,tv.qty,t.makerPrice,0,block.number);updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerPositionHash,[tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve],[true,false,false]);}else{if(positionExists(t.makerPositionHash)){if(!checkEnoughBalance(t.floorPrice,t.makerPrice,tv.qty,true,makerFee,0,futuresContractHash,safeSub(balances[0],tv.makerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}updatePositionSize(t.makerPositionHash,safeAdd(retrievePosition(t.makerPositionHash)[0],tv.qty),t.makerPrice);updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerPositionHash,[tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve],[false,false,true]);}else{updatePositionSize(t.makerInversePositionHash,safeSub(retrievePosition(t.makerInversePositionHash)[0],tv.qty),0);if(t.makerPrice>retrievePosition(t.makerInversePositionHash)[1]){tv.makerProfit=calculateProfit(t.makerPrice,retrievePosition(t.makerInversePositionHash)[1],tv.qty,futuresContractHash,false);}else{tv.makerLoss=calculateLoss(t.makerPrice,retrievePosition(t.makerInversePositionHash)[1],tv.qty,futuresContractHash,false);}updateBalances(t.futuresContract,[t.baseToken,t.maker],t.makerInversePositionHash,[tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve],[false,false,false]);}}if(!positionExists(t.takerInversePositionHash)&&!positionExists(t.takerPositionHash)){if(!checkEnoughBalance(t.capPrice,t.makerPrice,tv.qty,false,takerFee,t.takerGasFee,futuresContractHash,safeSub(balances[1],tv.takerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}recordNewPosition(t.takerPositionHash,tv.qty,t.makerPrice,1,block.number);updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerPositionHash,[tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve],[true,true,false]);}else{if(positionExists(t.takerPositionHash)){if(!checkEnoughBalance(t.capPrice,t.makerPrice,tv.qty,false,takerFee,t.takerGasFee,futuresContractHash,safeSub(balances[1],tv.takerReserve))){emitLogError(uint8(Errors.OUT_OF_BALANCE),t.makerOrderHash,t.takerOrderHash);return0;}updatePositionSize(t.takerPositionHash,safeAdd(retrievePosition(t.takerPositionHash)[0],tv.qty),t.makerPrice);updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerPositionHash,[tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,0,tv.takerReserve],[false,true,true]);}else{updatePositionSize(t.takerInversePositionHash,safeSub(retrievePosition(t.takerInversePositionHash)[0],tv.qty),0);if(t.makerPrice<retrievePosition(t.takerInversePositionHash)[1]){tv.takerProfit=calculateProfit(t.makerPrice,retrievePosition(t.takerInversePositionHash)[1],tv.qty,futuresContractHash,true);}else{tv.takerLoss=calculateLoss(t.makerPrice,retrievePosition(t.takerInversePositionHash)[1],tv.qty,futuresContractHash,true);}updateBalances(t.futuresContract,[t.baseToken,t.taker],t.takerInversePositionHash,[tv.qty,t.makerPrice,takerFee,tv.takerProfit,tv.takerLoss,tv.takerBalance,t.takerGasFee,tv.takerReserve],[false,true,false]);}}}orderFills[t.makerOrderHash]=safeAdd(orderFills[t.makerOrderHash],tv.qty);orderFills[t.takerOrderHash]=safeAdd(orderFills[t.takerOrderHash],tv.qty);emitFuturesTrade(takerIsBuying,tv.qty,t.makerPrice,t.futuresContract,t.makerOrderHash,t.takerOrderHash);returntv.qty;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 992
column: 4
content: functioncalculateProfit(uint256closingPrice,uint256entryPrice,uint256qty,bytes32futuresContractHash,boolside)returns(uint256){if(side){returnsafeMul(safeSub(entryPrice,closingPrice),qty)/closingPrice;}else{returnsafeMul(safeSub(closingPrice,entryPrice),qty)/closingPrice;}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1005
column: 4
content: functioncalculateLoss(uint256closingPrice,uint256entryPrice,uint256qty,bytes32futuresContractHash,boolside)returns(uint256){if(side){returnsafeMul(safeSub(closingPrice,entryPrice),qty)/closingPrice;}else{returnsafeMul(safeSub(entryPrice,closingPrice),qty)/closingPrice;}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1018
column: 4
content: functioncheckEnoughBalance(uint256limitPrice,uint256tradePrice,uint256qty,boolside,uint256fee,uint256gasFee,bytes32futuresContractHash,uint256availableBalance)viewreturns(bool){if(side){if(safeAdd(safeMul(safeSub(tradePrice,limitPrice),qty)/limitPrice,safeMul(qty,fee)/(1ether))*1e10>availableBalance){returnfalse;}}else{if(safeAdd(safeAdd(safeMul(safeSub(limitPrice,tradePrice),qty)/limitPrice,safeMul(qty,fee)/(1ether)),gasFee/1e10)*1e10>availableBalance){returnfalse;}}returntrue;}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1045
column: 4
content: functionbatchFuturesTrade(uint8[2][]v,bytes32[4][]rs,uint256[8][]tradeValues,address[2][]tradeAddresses,bool[]takerIsBuying,bytes32[]futuresContractHash)onlyAdmin{for(uinti=0;i<tradeAddresses.length;i++){futuresTrade(v[i],rs[i],tradeValues[i],tradeAddresses[i],takerIsBuying[i],futuresContractHash[i]);}}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1348
column: 4
content: functioncloseFuturesPosition(bytes32futuresContract,boolside){bytes32positionHash=keccak256(this,msg.sender,futuresContract,side);if(futuresContracts[futuresContract].closed==false&&futuresContracts[futuresContract].expirationBlock!=0)throw;if(retrievePosition(positionHash)[1]==0)throw;if(retrievePosition(positionHash)[0]==0)throw;uint256profit;uint256loss;FuturesClosePositionValuesmemoryv=FuturesClosePositionValues({reserve:EtherMium(exchangeContract).getReserve(baseToken,msg.sender),balance:EtherMium(exchangeContract).balanceOf(baseToken,msg.sender),floorPrice:futuresContracts[futuresContract].floorPrice,capPrice:futuresContracts[futuresContract].capPrice,closingPrice:futuresContracts[futuresContract].closingPrice});addressbaseToken=futuresAssets[futuresContracts[futuresContract].asset].baseToken;uint256fee=safeMul(safeMul(retrievePosition(positionHash)[0],v.closingPrice),takerFee)/(1ether);if(side==true){subReserve(baseToken,msg.sender,v.reserve,safeMul(safeSub(retrievePosition(positionHash)[1],v.floorPrice),retrievePosition(positionHash)[0])/v.floorPrice);if(v.closingPrice>retrievePosition(positionHash)[1]){profit=calculateProfit(v.closingPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],futuresContract,false);addBalance(baseToken,msg.sender,v.balance,safeSub(profit*1e10,fee));}else{loss=calculateLoss(v.closingPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],futuresContract,false);subBalance(baseToken,msg.sender,v.balance,safeAdd(loss*1e10,fee));}}else{subReserve(baseToken,msg.sender,v.reserve,safeMul(safeSub(v.capPrice,retrievePosition(positionHash)[1]),retrievePosition(positionHash)[0])/v.capPrice);if(v.closingPrice<retrievePosition(positionHash)[1]){profit=calculateProfit(v.closingPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],futuresContract,true);addBalance(baseToken,msg.sender,v.balance,safeSub(profit*1e10,fee));}else{loss=calculateLoss(v.closingPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],futuresContract,true);subBalance(baseToken,msg.sender,v.balance,safeAdd(loss*1e10,fee));}}addBalance(baseToken,feeAccount,EtherMium(exchangeContract).balanceOf(baseToken,feeAccount),fee);updatePositionSize(positionHash,0,0);}

ruleId: SOLIDITY_VISIBILITY
patternId: 910067
severity: 1
line: 1474
column: 4
content: functioncloseFuturesContract(bytes32futuresContract,uint256price,uint256multipliterPrice)onlyAdmin{uint256closingPrice=price;if(futuresContracts[futuresContract].expirationBlock==0)throw;if(futuresContracts[futuresContract].closed==true)throw;if(futuresContracts[futuresContract].expirationBlock>block.number&&closingPrice>futuresContracts[futuresContract].floorPrice&&closingPrice<futuresContracts[futuresContract].capPrice)throw;futuresContracts[futuresContract].closingPrice=closingPrice;futuresContracts[futuresContract].closed=true;emitFuturesContractClosed(futuresContract,closingPrice);}

SOLIDITY_VISIBILITY :37
SOLIDITY_OVERPOWERED_ROLE :3
SOLIDITY_DEPRECATED_CONSTRUCTIONS :16
SOLIDITY_PRAGMAS_VERSION :1
SOLIDITY_REVERT_REQUIRE :15
SOLIDITY_EXTRA_GAS_IN_LOOPS :1
SOLIDITY_UPGRADE_TO_050 :12
SOLIDITY_GAS_LIMIT_IN_LOOPS :1
SOLIDITY_DIV_MUL :2
SOLIDITY_REDUNDANT_FALLBACK_REJECT :1