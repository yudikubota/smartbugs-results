/unique_chucks/10/0xa2fb4ba67ef28bd9d0548a537aaff66e7a5951aa.sol
line 51:12 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'memory', 'storage', 'emit', '_', 'revert', Identifier}
line 495:12 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'memory', 'storage', 'emit', '_', 'revert', Identifier}
line 885:12 extraneous input 'payable' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'length', 'balance', 'memory', 'storage', 'emit', '_', 'revert', Identifier}
line 1295:14 extraneous input 'payable' expecting {',', ')'}
line 1295:29 mismatched input ',' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1297:4 mismatched input ')' expecting {';', '='}
line 1299:20 extraneous input 'storage' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1300:6 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1300:9 mismatched input '.' expecting {';', '='}
line 1300:11 extraneous input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1302:9 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1302:12 mismatched input '.' expecting {';', '='}
line 1302:17 extraneous input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1304:16 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1304:19 mismatched input '.' expecting {';', '='}
line 1304:31 extraneous input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1306:10 extraneous input '=' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1306:13 mismatched input '.' expecting {';', '='}
line 1306:19 mismatched input ';' expecting {'solidity', 'experimental', 'from', 'constructor', 'block', 'coinbase', 'difficulty', 'gaslimit', 'number', 'timestamp', 'blockhash', 'msg', 'data', 'gas', 'sender', 'sig', 'value', 'now', 'this', 'tx', 'origin', 'gasprice', 'public', 'internal', 'external', 'private', 'constant', 'length', 'balance', 'emit', '_', 'revert', Identifier}
line 1309:2 extraneous input 'function' expecting {<EOF>, 'pragma', 'import', 'contract', 'library', 'interface'}
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 392
column: 17
content: 0xf7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 393
column: 18
content: 0xf6

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 397
column: 13
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 400
column: 19
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 400
column: 32
content: 0xb7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 401
column: 20
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 406
column: 17
content: 0xb9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 411
column: 17
content: 0xf9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 416
column: 17
content: 0x1

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 421
column: 13
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 424
column: 19
content: 0x80

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 424
column: 32
content: 0xb7

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 425
column: 20
content: 0x7f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 430
column: 17
content: 0xb9

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 435
column: 17
content: 0xf8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 440
column: 17
content: 0xf8

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 445
column: 17
content: 0x94

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 827
column: 20
content: 0x5555

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 828
column: 13
content: 0x3333

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 828
column: 35
content: 0x3333

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 829
column: 25
content: 0x0f0f

ruleId: SOLIDITY_ADDRESS_HARDCODED
patternId: b140cd
severity: 1
line: 830
column: 16
content: 0x0101

ruleId: SOLIDITY_DIV_MUL
patternId: 09hhh1
severity: 2
line: 537
column: 47
content: HANDLE_BET_COST*100/MIN_WIN_PERCENT*100

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 112
column: 2
content: functioncount(bytesmemoryb,bytesmemorysub)internalpurereturns(uinttimes){inti=index(b,sub,0);while(i!=-1){times++;i=index(b,sub,uint(i)+sub.length);}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 386
column: 2
content: functionreceiptAddr(bytesmemoryproof)internalpurereturns(addressaddr){uintb;uintoffset;assembly{offset:=add(add(proof,32),4)}assembly{b:=byte(0,mload(offset))}require(b>=0xf7,"proof lib: receipt leaf longer than 55 bytes");offset+=b-0xf6;assembly{b:=byte(0,mload(offset))}if(b<=0x7f){offset+=1;}else{require(b>=0x80&&b<=0xb7,"proof lib: path is an RLP string");offset+=b-0x7f;}assembly{b:=byte(0,mload(offset))}require(b==0xb9,"proof lib: Rrceipt str is always at least 256 bytes long, but less than 64k");offset+=3;assembly{b:=byte(0,mload(offset))}require(b==0xf9,"proof lib: receipt is always at least 256 bytes long, but less than 64k");offset+=3;assembly{b:=byte(0,mload(offset))}require(b==0x1,"proof lib: status should be success");offset+=1;assembly{b:=byte(0,mload(offset))}if(b<=0x7f){offset+=1;}else{require(b>=0x80&&b<=0xb7,"proof lib: cumulative gas is an RLP string");offset+=b-0x7f;}assembly{b:=byte(0,mload(offset))}require(b==0xb9,"proof lib: bloom filter is always 256 bytes long");offset+=256+3;assembly{b:=byte(0,mload(offset))}require(b==0xf8,"proof lib: logs list is less than 256 bytes long");offset+=2;assembly{b:=byte(0,mload(offset))}require(b==0xf8,"proof lib: log entry is less than 256 bytes long");offset+=2;assembly{b:=byte(0,mload(offset))}require(b==0x94,"proof lib: address is 20 bytes long");offset-=11;assembly{addr:=and(mload(offset),0xffffffffffffffffffffffffffffffffffffffff)}}

ruleId: SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN
patternId: 58bdd3
severity: 1
line: 451
column: 2
content: functionblobPtrLenShift(bytesmemoryproof,uintoffset,uintslotDataLen)internalpurereturns(uintptr,uintlen,uintshift){assembly{ptr:=add(add(proof,32),offset)len:=and(mload(sub(ptr,30)),0xffff)}require(proof.length>=len+offset+4,"proof lib: blob length out of range proof");assembly{shift:=and(mload(sub(ptr,28)),0xffff)}require(shift+slotDataLen<=len,"proof lib: blob shift bounds check");ptr+=4;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 191
column: 6
content: for(uintk=0;k<len;k++){b[uint(i)+k]=newb;}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 368
column: 4
content: for(uintoffset;offset+4<proofLen;offset+=blobLen){uintblobShift;(blobPtr,blobLen,blobShift)=blobPtrLenShift(proof,offset,32);offset+=4;uinthashSlot;assembly{hashSlot:=mload(add(blobPtr,blobShift))}require(hashSlot==0,"proof lib: non-empty hash slot");assembly{mstore(add(blobPtr,blobShift),blobHash)blobHash:=keccak256(blobPtr,blobLen)}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: f6f853
severity: 2
line: 519
column: 4
content: for(uinti=0;i<len;i++){if(symbols[sc.indexes[i]]!=symbol){returnfalse;}}

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 114
column: 11
content: i!=-1

ruleId: SOLIDITY_GAS_LIMIT_IN_LOOPS
patternId: 17f23a
severity: 1
line: 185
column: 11
content: true

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 1169
column: 0
content: contractCasinoisAccessibility{usingPaymentLibforPaymentLib.Payment;usingRollGameLibforRollGameLib.Game;usingSlotGameLibforSlotGameLib.Game;bytes32privateconstantJACKPOT_LOG_MSG="casino.jackpot";bytes32privateconstantWITHDRAW_LOG_MSG="casino.withdraw";bytesprivateconstantJACKPOT_NONCE="jackpot";uintprivateconstantMIN_JACKPOT_MAGIC=3333;uintprivateconstantMAX_JACKPOT_MAGIC=333333333;SlotGameLib.Gamepublicslot;RollGameLib.Gamepublicroll;enumGame{Slot,Roll}uintpublicextraJackpot;uintpublicjackpotMagic;modifierslotBetsWasHandled(){require(slot.lockedInBets==0,"casino.slot: all bets should be handled");_;}eventLogIncreaseJackpot(addressindexedaddr,uintamount);eventLogJackpotMagicChanged(addressindexedaddr,uintnewJackpotMagic);eventLogPayment(addressindexedbeneficiary,uintamount,bytes32indexedmessage);eventLogFailedPayment(addressindexedbeneficiary,uintamount,bytes32indexedmessage);eventLogJactpot(addressindexedbeneficiary,uintamount,bytes32hostSeed,bytes32clientSeed,uintjackpotMagic);eventLogSlotNewBet(bytes32indexedhostSeedHash,addressindexedgambler,uintamount,addressindexedreferrer);eventLogSlotHandleBet(bytes32indexedhostSeedHash,addressindexedgambler,bytes32hostSeed,bytes32clientSeed,bytessymbols,uintmultiplierNum,uintmultiplierDen,uintamount,uintwinnings);eventLogSlotRefundBet(bytes32indexedhostSeedHash,addressindexedgambler,uintamount);eventLogRollNewBet(bytes32indexedhostSeedHash,uint8t,addressindexedgambler,uintamount,uintmask,uintrollUnder,addressindexedreferrer);eventLogRollRefundBet(bytes32indexedhostSeedHash,uint8t,addressindexedgambler,uintamount);eventLogRollHandleBet(bytes32indexedhostSeedHash,uint8t,addressindexedgambler,bytes32hostSeed,bytes32clientSeed,uintroll,uintmultiplierNum,uintmultiplierDen,uintamount,uintwinnings);constructor()public{jackpotMagic=MIN_JACKPOT_MAGIC;slot.minBetAmount=SlotGameLib.MinBetAmount();slot.maxBetAmount=SlotGameLib.MinBetAmount();roll.minBetAmount=RollGameLib.MinBetAmount();roll.maxBetAmount=RollGameLib.MinBetAmount();}function()externalpayable{}functionrollPlaceBet(RollGameLib.Typet,uint16mask,uint8rollUnder,addressreferrer,uintsigExpirationBlock,bytes32hostSeedHash,uint8v,bytes32r,bytes32s)externalpayable{roll.placeBet(t,mask,rollUnder,referrer,sigExpirationBlock,hostSeedHash,v,r,s);}functionrollBet(bytes32hostSeedHash)externalviewreturns(RollGameLib.Typet,uintamount,uintmask,uintrollUnder,uintblockNumber,addresspayablegambler,boolexist){RollGameLib.Betstorageb=roll.bets[hostSeedHash];t=b.t;amount=b.amount;mask=b.mask;rollUnder=b.rollUnder;blockNumber=b.blockNumber;gambler=b.gambler;exist=b.exist;}

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 528
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 530
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 531
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 532
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 533
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 534
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 535
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 536
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 537
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 841
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 842
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 843
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 844
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 845
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 846
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 847
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 848
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 849
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 850
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 851
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1174
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1175
column: 10
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1176
column: 8
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1177
column: 7
content: private

ruleId: SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA
patternId: 5616b2
severity: 1
line: 1178
column: 7
content: private

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 488
column: 2
content: usingSafeMathforuint;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 489
column: 2
content: usingSafeMathforuint128;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 837
column: 2
content: usingSafeMathforuint;

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 838
column: 2
content: usingSafeMathforuint128;

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 70
column: 2
content: functionindex(bytesmemoryb,bytesmemorysubb,uintstart)internalpurereturns(int){uintlensubb=subb.length;uinthashsubb;uintptrb;assembly{hashsubb:=keccak256(add(subb,0x20),lensubb)ptrb:=add(b,0x20)}for(uintlenb=b.length;start<lenb;start++){if(start+lensubb>lenb){return-1;}boolfound;assembly{found:=eq(keccak256(add(ptrb,start),lensubb),hashsubb)}if(found){returnint(start);}}return-1;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 120
column: 2
content: functionequals(bytesmemoryb,bytesmemorya)internalpurereturns(boolequal){if(b.length!=a.length){returnfalse;}uintlen=b.length;assembly{equal:=eq(keccak256(add(b,0x20),len),keccak256(add(a,0x20),len))}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 323
column: 2
content: functionchainHash(bytesmemorychainProof,bytesmemoryuncleHeader)internalpurereturns(bytes32hash){uintproofLen=chainProof.length;require(proofLen>=4,"proof lib: chain proof length too low");bytesmemoryslotData=uncleHeader;uintslotDataPtr;assembly{slotDataPtr:=add(slotData,32)}for(uintoffset;;){(uintblobPtr,uintblobLen,uintblobShift)=blobPtrLenShift(chainProof,offset,slotData.length);offset+=4;uintslotPtr;assembly{slotPtr:=add(blobPtr,blobShift)}memcpy(slotDataPtr,slotPtr,slotData.length);assembly{hash:=keccak256(blobPtr,blobLen)}offset+=blobLen;(blobPtr,blobLen,blobShift)=blobPtrLenShift(chainProof,offset,32);offset+=4;uinthashSlot;assembly{hashSlot:=mload(add(blobPtr,blobShift))}require(hashSlot==0,"proof lib: non-empty uncles hash slot");assembly{mstore(add(blobPtr,blobShift),hash)hash:=keccak256(blobPtr,blobLen)}offset+=blobLen;if(offset+4>=proofLen){returnhash;}slotData=newbytes(blobLen);assembly{slotDataPtr:=add(slotData,32)}memcpy(blobPtr,slotDataPtr,blobLen);}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 363
column: 2
content: functionuncleHeader(bytesmemoryproof,bytes32hostSeedHash)internalpurereturns(bytes32headerHash,bytesmemoryheader){uintproofLen=proof.length;require(proofLen>=4,"proof lib: uncle proof length too low");uintblobPtr;uintblobLen;bytes32blobHash=hostSeedHash;for(uintoffset;offset+4<proofLen;offset+=blobLen){uintblobShift;(blobPtr,blobLen,blobShift)=blobPtrLenShift(proof,offset,32);offset+=4;uinthashSlot;assembly{hashSlot:=mload(add(blobPtr,blobShift))}require(hashSlot==0,"proof lib: non-empty hash slot");assembly{mstore(add(blobPtr,blobShift),blobHash)blobHash:=keccak256(blobPtr,blobLen)}}header=newbytes(blobLen);uintheaderPtr;assembly{headerPtr:=add(header,32)}memcpy(blobPtr,headerPtr,blobLen);return(blobHash,header);}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 386
column: 2
content: functionreceiptAddr(bytesmemoryproof)internalpurereturns(addressaddr){uintb;uintoffset;assembly{offset:=add(add(proof,32),4)}assembly{b:=byte(0,mload(offset))}require(b>=0xf7,"proof lib: receipt leaf longer than 55 bytes");offset+=b-0xf6;assembly{b:=byte(0,mload(offset))}if(b<=0x7f){offset+=1;}else{require(b>=0x80&&b<=0xb7,"proof lib: path is an RLP string");offset+=b-0x7f;}assembly{b:=byte(0,mload(offset))}require(b==0xb9,"proof lib: Rrceipt str is always at least 256 bytes long, but less than 64k");offset+=3;assembly{b:=byte(0,mload(offset))}require(b==0xf9,"proof lib: receipt is always at least 256 bytes long, but less than 64k");offset+=3;assembly{b:=byte(0,mload(offset))}require(b==0x1,"proof lib: status should be success");offset+=1;assembly{b:=byte(0,mload(offset))}if(b<=0x7f){offset+=1;}else{require(b>=0x80&&b<=0xb7,"proof lib: cumulative gas is an RLP string");offset+=b-0x7f;}assembly{b:=byte(0,mload(offset))}require(b==0xb9,"proof lib: bloom filter is always 256 bytes long");offset+=256+3;assembly{b:=byte(0,mload(offset))}require(b==0xf8,"proof lib: logs list is less than 256 bytes long");offset+=2;assembly{b:=byte(0,mload(offset))}require(b==0xf8,"proof lib: log entry is less than 256 bytes long");offset+=2;assembly{b:=byte(0,mload(offset))}require(b==0x94,"proof lib: address is 20 bytes long");offset-=11;assembly{addr:=and(mload(offset),0xffffffffffffffffffffffffffffffffffffffff)}}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 451
column: 2
content: functionblobPtrLenShift(bytesmemoryproof,uintoffset,uintslotDataLen)internalpurereturns(uintptr,uintlen,uintshift){assembly{ptr:=add(add(proof,32),offset)len:=and(mload(sub(ptr,30)),0xffff)}require(proof.length>=len+offset+4,"proof lib: blob length out of range proof");assembly{shift:=and(mload(sub(ptr,28)),0xffff)}require(shift+slotDataLen<=len,"proof lib: blob shift bounds check");ptr+=4;}

ruleId: SOLIDITY_SHOULD_NOT_BE_PURE
patternId: 11314f
severity: 1
line: 465
column: 2
content: functionmemcpy(uintsrc,uintdest,uintlen)internalpure{for(;len>=32;len-=32){assembly{mstore(dest,mload(src))}dest+=32;src+=32;}uintmask=256**(32-len)-1;assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}}

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 363
column: 86
content: (bytes32headerHash,bytesmemoryheader)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 451
column: 99
content: (uintptr,uintlen,uintshift)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 676
column: 11
content: (Betstoragebet,bytes32hostSeedHash,uintbetAmount)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 753
column: 11
content: (PaymentLib.Paymentmemory,bytes32)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 869
column: 50
content: (uint,uint)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 874
column: 55
content: (uint,uint)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 896
column: 12
content: (uintrnd,NumberLib.Numbermemorymultiplier)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1032
column: 11
content: (Betstoragebet,bytes32hostSeedHash,uintbetAmount)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1110
column: 11
content: (PaymentLib.Paymentmemory,bytes32)

ruleId: SOLIDITY_SHOULD_RETURN_STRUCT
patternId: 83hf3l
severity: 1
line: 1289
column: 12
content: (RollGameLib.Typet,uintamount,uintmask,uintrollUnder,uintblockNumber,addresspayable

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 75
column: 4
content: assembly{hashsubb:=keccak256(add(subb,0x20),lensubb)ptrb:=add(b,0x20)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 85
column: 6
content: assembly{found:=eq(keccak256(add(ptrb,start),lensubb),hashsubb)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 127
column: 4
content: assembly{equal:=eq(keccak256(add(b,0x20),len),keccak256(add(a,0x20),len))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 327
column: 23
content: assembly{slotDataPtr:=add(slotData,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 334
column: 20
content: assembly{slotPtr:=add(blobPtr,blobShift)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 337
column: 6
content: assembly{hash:=keccak256(blobPtr,blobLen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 344
column: 21
content: assembly{hashSlot:=mload(add(blobPtr,blobShift))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 346
column: 6
content: assembly{mstore(add(blobPtr,blobShift),hash)hash:=keccak256(blobPtr,blobLen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 358
column: 37
content: assembly{slotDataPtr:=add(slotData,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 372
column: 21
content: assembly{hashSlot:=mload(add(blobPtr,blobShift))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 374
column: 6
content: assembly{mstore(add(blobPtr,blobShift),blobHash)blobHash:=keccak256(blobPtr,blobLen)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 381
column: 20
content: assembly{headerPtr:=add(header,32)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 388
column: 17
content: assembly{offset:=add(add(proof,32),4)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 391
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 396
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 405
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 410
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 415
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 420
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 429
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 434
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 439
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 444
column: 4
content: assembly{b:=byte(0,mload(offset))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 448
column: 4
content: assembly{addr:=and(mload(offset),0xffffffffffffffffffffffffffffffffffffffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 452
column: 4
content: assembly{ptr:=add(add(proof,32),offset)len:=and(mload(sub(ptr,30)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 457
column: 4
content: assembly{shift:=and(mload(sub(ptr,28)),0xffff)}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 468
column: 6
content: assembly{mstore(dest,mload(src))}

ruleId: SOLIDITY_USING_INLINE_ASSEMBLY
patternId: 109cd5
severity: 1
line: 477
column: 4
content: assembly{letsrcpart:=and(mload(src),not(mask))letdestpart:=and(mload(dest),mask)mstore(dest,or(destpart,srcpart))}

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1295
column: 22
content: gambler,

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1296
column: 6
content: boolexist){

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1299
column: 4
content: RollGameLib.Betstorageb=roll.bets[hostSeedHash];

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1300
column: 4
content: t=b.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1300
column: 10
content: t;amount=b.amount;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1302
column: 4
content: mask=b.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1302
column: 13
content: mask;rollUnder=b.rollUnder;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1304
column: 4
content: blockNumber=b.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1304
column: 20
content: blockNumber;gambler=b.gambler;

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1306
column: 4
content: exist=b.

ruleId: SOLIDITY_VISIBILITY
patternId: b51ce0
severity: 1
line: 1306
column: 14
content: exist;

SOLIDITY_VISIBILITY :11
SOLIDITY_SAFEMATH :4
SOLIDITY_LOCKED_MONEY :1
SOLIDITY_FUNCTIONS_RETURNS_TYPE_AND_NO_RETURN :3
SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA :25
SOLIDITY_ADDRESS_HARDCODED :22
SOLIDITY_GAS_LIMIT_IN_LOOPS :5
SOLIDITY_USING_INLINE_ASSEMBLY :28
SOLIDITY_DIV_MUL :1
SOLIDITY_SHOULD_RETURN_STRUCT :10
SOLIDITY_SHOULD_NOT_BE_PURE :7