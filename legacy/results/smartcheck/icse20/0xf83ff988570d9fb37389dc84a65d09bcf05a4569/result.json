{
  "contract": "0xf83ff988570d9fb37389dc84a65d09bcf05a4569",
  "tool": "smartcheck",
  "start": 1563577796.175624,
  "end": 1563577809.0424778,
  "duration": 12.866853952407837,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 670,
      "column": 24,
      "content": "0xFF"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 943,
      "column": 31,
      "content": "0x10000000000000000"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 944,
      "column": 31,
      "content": "0xb17217f7d1cf79ac"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 945,
      "column": 34,
      "content": "0x171547652b82fe177"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 989,
      "column": 18,
      "content": "0xb17217f7d1cf79ab"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 991,
      "column": 18,
      "content": "0x3d7f7bff058b1d50"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 993,
      "column": 18,
      "content": "0xe35846b82505fc5"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 995,
      "column": 18,
      "content": "0x276556df749cee5"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 997,
      "column": 18,
      "content": "0x5761ff9e299cc4"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 999,
      "column": 18,
      "content": "0xa184897c363c3"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1001,
      "column": 18,
      "content": "0xffe5fe2c4586"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1003,
      "column": 18,
      "content": "0x162c0223a5c8"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1005,
      "column": 18,
      "content": "0x1b5253d395e"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1007,
      "column": 18,
      "content": "0x1e4cf5158b"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1009,
      "column": 18,
      "content": "0x1e8cac735"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1011,
      "column": 18,
      "content": "0x1c3bd650"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1013,
      "column": 18,
      "content": "0x1816193"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1015,
      "column": 18,
      "content": "0x131496"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1017,
      "column": 18,
      "content": "0xe1b7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1019,
      "column": 18,
      "content": "0x9c7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 337,
      "column": 8,
      "content": "_owner=address(0)"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 646,
      "column": 35,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1043,
      "column": 22,
      "content": "term*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1045,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1047,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1049,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1051,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1053,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1055,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1057,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1059,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1061,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1063,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_DIV_MUL",
      "patternId": "09hhh1",
      "severity": 2,
      "line": 1065,
      "column": 18,
      "content": "termpow*term/int(ONE)*term"
    },
    {
      "name": "SOLIDITY_ERC20_APPROVE",
      "patternId": "af782c",
      "severity": 2,
      "line": 167,
      "column": 4,
      "content": "functionapprove(addressspender,uint256value)publicreturns(bool){require(spender!=address(0));_allowed[msg.sender][spender]=value;emitApproval(msg.sender,spender,value);returntrue;}"
    },
    {
      "name": "SOLIDITY_ERC20_APPROVE",
      "patternId": "af782c",
      "severity": 2,
      "line": 1263,
      "column": 4,
      "content": "functionapprove(addressspender,uintvalue)publicreturns(bool){allowances[msg.sender][spender]=value;emitApproval(msg.sender,spender,value);returntrue;}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 1091,
      "column": 8,
      "content": "for(uinti=0;i<nums.length;i++)if(nums[i]>maxNum)maxNum=nums[i];"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 1627,
      "column": 8,
      "content": "for(uinti=0;i<participations.length;i++){totalMgnClaimed+=calculateClaimableMgn(participations[i]);}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "k4o1l4",
      "severity": 1,
      "line": 622,
      "column": 2,
      "content": "while(mockHash!=MOCKS_LIST_END_HASH){calldataMockTypes[nextMock]=MockType.Return;calldataExpectations[nextMock]=hex\"\";calldataRevertMessage[nextMock]=\"\";nextMock=calldataMocks[mockHash];calldataMocks[mockHash]=\"\";mockHash=keccak256(nextMock);}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "k4o1l4",
      "severity": 1,
      "line": 639,
      "column": 2,
      "content": "while(nextAnyMock!=SENTINEL_ANY_MOCKS){bytes4currentAnyMock=nextAnyMock;methodIdMockTypes[currentAnyMock]=MockType.Return;methodIdExpectations[currentAnyMock]=hex\"\";methodIdRevertMessages[currentAnyMock]=\"\";nextAnyMock=methodIdMocks[currentAnyMock];methodIdMocks[currentAnyMock]=0x0;}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1091,
      "column": 8,
      "content": "for(uinti=0;i<nums.length;i++)if(nums[i]>maxNum)maxNum=nums[i];"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1613,
      "column": 8,
      "content": "for(uinti=0;i<length;i++){totalDepositAmount+=calculateClaimableDeposit(participations[i]);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1627,
      "column": 8,
      "content": "for(uinti=0;i<participations.length;i++){totalMgnClaimed+=calculateClaimableMgn(participations[i]);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1727,
      "column": 8,
      "content": "for(uinti=0;i<length;i++){userTotalPoolShares[i]=participationsByAddress[userAddress][i].poolShares;}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1748,
      "column": 8,
      "content": "for(uinti=0;i<length;i++){allUserClaimableMgn[i]=calculateClaimableMgn(participationsByAddress[userAddress][i]);allUserClaimableDeposit[i]=calculateClaimableDeposit(participationsByAddress[userAddress][i]);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 622,
      "column": 8,
      "content": "mockHash!=MOCKS_LIST_END_HASH"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 639,
      "column": 8,
      "content": "nextAnyMock!=SENTINEL_ANY_MOCKS"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 658,
      "column": 8,
      "content": "true"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 1078,
      "column": 15,
      "content": "(lo+1)<hi"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 438,
      "column": 0,
      "content": "contractMockContractisMockInterface{enumMockType{Return,Revert,OutOfGas}bytes32publicconstantMOCKS_LIST_START=hex\"01\";bytespublicconstantMOCKS_LIST_END=\"0xff\";bytes32publicconstantMOCKS_LIST_END_HASH=keccak256(MOCKS_LIST_END);bytes4publicconstantSENTINEL_ANY_MOCKS=hex\"01\";mapping(bytes32=>bytes)calldataMocks;mapping(bytes=>MockType)calldataMockTypes;mapping(bytes=>bytes)calldataExpectations;mapping(bytes=>string)calldataRevertMessage;mapping(bytes32=>uint)calldataInvocations;mapping(bytes4=>bytes4)methodIdMocks;mapping(bytes4=>MockType)methodIdMockTypes;mapping(bytes4=>bytes)methodIdExpectations;mapping(bytes4=>string)methodIdRevertMessages;mapping(bytes32=>uint)methodIdInvocations;MockTypefallbackMockType;bytesfallbackExpectation;stringfallbackRevertMessage;uintinvocations;uintresetCount;constructor()public{calldataMocks[MOCKS_LIST_START]=MOCKS_LIST_END;methodIdMocks[SENTINEL_ANY_MOCKS]=SENTINEL_ANY_MOCKS;}functiontrackCalldataMock(bytesmemorycall)private{bytes32callHash=keccak256(call);if(calldataMocks[callHash].length==0){calldataMocks[callHash]=calldataMocks[MOCKS_LIST_START];calldataMocks[MOCKS_LIST_START]=call;}}functiontrackMethodIdMock(bytes4methodId)private{if(methodIdMocks[methodId]==0x0){methodIdMocks[methodId]=methodIdMocks[SENTINEL_ANY_MOCKS];methodIdMocks[SENTINEL_ANY_MOCKS]=methodId;}}function_givenAnyReturn(bytesmemoryresponse)internal{fallbackMockType=MockType.Return;fallbackExpectation=response;}functiongivenAnyReturn(bytescalldataresponse)external{_givenAnyReturn(response);}functiongivenAnyReturnBool(boolresponse)external{uintflag=response?1:0;_givenAnyReturn(uintToBytes(flag));}functiongivenAnyReturnUint(uintresponse)external{_givenAnyReturn(uintToBytes(response));}functiongivenAnyReturnAddress(addressresponse)external{_givenAnyReturn(uintToBytes(uint(response)));}functiongivenAnyRevert()external{fallbackMockType=MockType.Revert;fallbackRevertMessage=\"\";}functiongivenAnyRevertWithMessage(stringcalldatamessage)external{fallbackMockType=MockType.Revert;fallbackRevertMessage=message;}functiongivenAnyRunOutOfGas()external{fallbackMockType=MockType.OutOfGas;}function_givenCalldataReturn(bytesmemorycall,bytesmemoryresponse)private{calldataMockTypes[call]=MockType.Return;calldataExpectations[call]=response;trackCalldataMock(call);}functiongivenCalldataReturn(bytescalldatacall,bytescalldataresponse)external{_givenCalldataReturn(call,response);}functiongivenCalldataReturnBool(bytescalldatacall,boolresponse)external{uintflag=response?1:0;_givenCalldataReturn(call,uintToBytes(flag));}functiongivenCalldataReturnUint(bytescalldatacall,uintresponse)external{_givenCalldataReturn(call,uintToBytes(response));}functiongivenCalldataReturnAddress(bytescalldatacall,addressresponse)external{_givenCalldataReturn(call,uintToBytes(uint(response)));}function_givenMethodReturn(bytesmemorycall,bytesmemoryresponse)private{bytes4method=bytesToBytes4(call);methodIdMockTypes[method]=MockType.Return;methodIdExpectations[method]=response;trackMethodIdMock(method);}functiongivenMethodReturn(bytescalldatacall,bytescalldataresponse)external{_givenMethodReturn(call,response);}functiongivenMethodReturnBool(bytescalldatacall,boolresponse)external{uintflag=response?1:0;_givenMethodReturn(call,uintToBytes(flag));}functiongivenMethodReturnUint(bytescalldatacall,uintresponse)external{_givenMethodReturn(call,uintToBytes(response));}functiongivenMethodReturnAddress(bytescalldatacall,addressresponse)external{_givenMethodReturn(call,uintToBytes(uint(response)));}functiongivenCalldataRevert(bytescalldatacall)external{calldataMockTypes[call]=MockType.Revert;calldataRevertMessage[call]=\"\";trackCalldataMock(call);}functiongivenMethodRevert(bytescalldatacall)external{bytes4method=bytesToBytes4(call);methodIdMockTypes[method]=MockType.Revert;trackMethodIdMock(method);}functiongivenCalldataRevertWithMessage(bytescalldatacall,stringcalldatamessage)external{calldataMockTypes[call]=MockType.Revert;calldataRevertMessage[call]=message;trackCalldataMock(call);}functiongivenMethodRevertWithMessage(bytescalldatacall,stringcalldatamessage)external{bytes4method=bytesToBytes4(call);methodIdMockTypes[method]=MockType.Revert;methodIdRevertMessages[method]=message;trackMethodIdMock(method);}functiongivenCalldataRunOutOfGas(bytescalldatacall)external{calldataMockTypes[call]=MockType.OutOfGas;trackCalldataMock(call);}functiongivenMethodRunOutOfGas(bytescalldatacall)external{bytes4method=bytesToBytes4(call);methodIdMockTypes[method]=MockType.OutOfGas;trackMethodIdMock(method);}functioninvocationCount()externalreturns(uint){returninvocations;}functioninvocationCountForMethod(bytescalldatacall)externalreturns(uint){bytes4method=bytesToBytes4(call);returnmethodIdInvocations[keccak256(abi.encodePacked(resetCount,method))];}functioninvocationCountForCalldata(bytescalldatacall)externalreturns(uint){returncalldataInvocations[keccak256(abi.encodePacked(resetCount,call))];}functionreset()external{bytesmemorynextMock=calldataMocks[MOCKS_LIST_START];bytes32mockHash=keccak256(nextMock);while(mockHash!=MOCKS_LIST_END_HASH){calldataMockTypes[nextMock]=MockType.Return;calldataExpectations[nextMock]=hex\"\";calldataRevertMessage[nextMock]=\"\";nextMock=calldataMocks[mockHash];calldataMocks[mockHash]=\"\";mockHash=keccak256(nextMock);}calldataMocks[MOCKS_LIST_START]=MOCKS_LIST_END;bytes4nextAnyMock=methodIdMocks[SENTINEL_ANY_MOCKS];while(nextAnyMock!=SENTINEL_ANY_MOCKS){bytes4currentAnyMock=nextAnyMock;methodIdMockTypes[currentAnyMock]=MockType.Return;methodIdExpectations[currentAnyMock]=hex\"\";methodIdRevertMessages[currentAnyMock]=\"\";nextAnyMock=methodIdMocks[currentAnyMock];methodIdMocks[currentAnyMock]=0x0;}methodIdMocks[SENTINEL_ANY_MOCKS]=SENTINEL_ANY_MOCKS;fallbackExpectation=\"\";fallbackMockType=MockType.Return;invocations=0;resetCount+=1;}functionuseAllGas()private{while(true){bools;assembly{s:=call(sub(gas,2000),6,0,0x0,0xc0,0x0,0x60)}}}functionbytesToBytes4(bytesmemoryb)privatepurereturns(bytes4){bytes4out;for(uinti=0;i<4;i++){out|=bytes4(b[i]&0xFF)>>(i*8);}returnout;}functionuintToBytes(uint256x)privatepurereturns(bytesmemoryb){b=newbytes(32);assembly{mstore(add(b,32),x)}}functionupdateInvocationCount(bytes4methodId,bytesmemoryoriginalMsgData)public{require(msg.sender==address(this),\"Can only be called from the contract itself\");invocations+=1;methodIdInvocations[keccak256(abi.encodePacked(resetCount,methodId))]+=1;calldataInvocations[keccak256(abi.encodePacked(resetCount,originalMsgData))]+=1;}function()payableexternal{bytes4methodId;assembly{methodId:=calldataload(0)}if(calldataMockTypes[msg.data]==MockType.Revert){revert(calldataRevertMessage[msg.data]);}if(calldataMockTypes[msg.data]==MockType.OutOfGas){useAllGas();}bytesmemoryresult=calldataExpectations[msg.data];if(result.length==0){if(methodIdMockTypes[methodId]==MockType.Revert){revert(methodIdRevertMessages[methodId]);}if(methodIdMockTypes[methodId]==MockType.OutOfGas){useAllGas();}result=methodIdExpectations[methodId];}if(result.length==0){if(fallbackMockType==MockType.Revert){revert(fallbackRevertMessage);}if(fallbackMockType==MockType.OutOfGas){useAllGas();}result=fallbackExpectation;}(,bytesmemoryr)=address(this).call.gas(100000)(abi.encodeWithSignature(\"updateInvocationCount(bytes4,bytes)\",methodId,msg.data));assert(r.length==0);assembly{return(add(0x20,result),mload(result))}}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 881,
      "column": 0,
      "content": "contractProxyisProxied{constructor(address_masterCopy)public{require(_masterCopy!=address(0),\"The master copy is required\");masterCopy=_masterCopy;}function()externalpayable{address_masterCopy=masterCopy;assembly{calldatacopy(0,0,calldatasize)letsuccess:=delegatecall(not(0),_masterCopy,0,calldatasize,0,0)returndatacopy(0,0,returndatasize)switchsuccesscase0{revert(0,returndatasize)}default{return(0,returndatasize)}}}}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 3,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 29,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 97,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 286,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 361,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 736,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 779,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 824,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 847,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 871,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 910,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 933,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1199,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1293,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1430,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1473,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1533,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1789,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 116,
      "column": 33,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 118,
      "column": 54,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 120,
      "column": 12,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 294,
      "column": 12,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 788,
      "column": 15,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 1480,
      "column": 20,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 1481,
      "column": 20,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 1482,
      "column": 20,
      "content": "private"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 114,
      "column": 4,
      "content": "usingSafeMathforuint256;"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 1543,
      "column": 4,
      "content": "usingSafeMathforuint;"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 675,
      "column": 1,
      "content": "functionuintToBytes(uint256x)privatepurereturns(bytesmemoryb){b=newbytes(32);assembly{mstore(add(b,32),x)}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_VIEW",
      "patternId": "189abf",
      "severity": 1,
      "line": 1443,
      "column": 4,
      "content": "functionisContract(addressaccount)internalviewreturns(bool){uint256size;assembly{size:=extcodesize(account)}returnsize>0;}"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 864,
      "column": 117,
      "content": "(uint256,uint256)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 865,
      "column": 109,
      "content": "(uint256,uint256)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 866,
      "column": 115,
      "content": "(uintreturned,uintfrtsIssued)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 1363,
      "column": 43,
      "content": "(uinttotalAmountUnlocked,uintwithdrawalTime)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 1718,
      "column": 80,
      "content": "(uint,uint)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 1734,
      "column": 50,
      "content": "(addresssellToken,addressbuyToken)"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "83hf3l",
      "severity": 1,
      "line": 1742,
      "column": 85,
      "content": "(uint[]memory,uint[]memory)"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 725,
      "column": 37,
      "content": "call.gas(100000)(abi.encodeWithSignature(\"updateInvocationCount(bytes4,bytes)\",methodId,msg.data))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1491,
      "column": 19,
      "content": "call(abi.encodeWithSelector(TRANSFER_SELECTOR,_to,_value))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1505,
      "column": 19,
      "content": "call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR,_from,_to,_value))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1523,
      "column": 19,
      "content": "call(abi.encodeWithSelector(APPROVE_SELECTOR,_spender,_value))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1654,
      "column": 20,
      "content": "call(abi.encodeWithSignature(\"claimSellerFunds(address,address,address,uint256)\",buyToken,sellToken,address(this),lastParticipatedAuctionIndex))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1674,
      "column": 20,
      "content": "call(abi.encodeWithSignature(\"claimSellerFunds(address,address,address,uint256)\",secondaryToken,depositToken,address(this),lastParticipatedAuctionIndex))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1823,
      "column": 28,
      "content": "delegatecall(abi.encodeWithSignature(\"withdrawDeposit()\"))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1824,
      "column": 28,
      "content": "delegatecall(abi.encodeWithSignature(\"withdrawMagnolia()\"))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1826,
      "column": 28,
      "content": "delegatecall(abi.encodeWithSignature(\"withdrawDeposit()\"))"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1827,
      "column": 28,
      "content": "delegatecall(abi.encodeWithSignature(\"withdrawMagnolia()\"))"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 660,
      "column": 3,
      "content": "assembly{s:=call(sub(gas,2000),6,0,0x0,0xc0,0x0,0x60)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 677,
      "column": 2,
      "content": "assembly{mstore(add(b,32),x)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 689,
      "column": 2,
      "content": "assembly{methodId:=calldataload(0)}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 728,
      "column": 2,
      "content": "assembly{return(add(0x20,result),mload(result))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 892,
      "column": 8,
      "content": "assembly{calldatacopy(0,0,calldatasize)letsuccess:=delegatecall(not(0),_masterCopy,0,calldatasize,0,0)returndatacopy(0,0,returndatasize)switchsuccesscase0{revert(0,returndatasize)}default{return(0,returndatasize)}}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 447,
      "column": 1,
      "content": "mapping(bytes32=>bytes)calldataMocks;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 448,
      "column": 1,
      "content": "mapping(bytes=>MockType)calldataMockTypes;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 449,
      "column": 1,
      "content": "mapping(bytes=>bytes)calldataExpectations;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 450,
      "column": 1,
      "content": "mapping(bytes=>string)calldataRevertMessage;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 451,
      "column": 1,
      "content": "mapping(bytes32=>uint)calldataInvocations;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 453,
      "column": 1,
      "content": "mapping(bytes4=>bytes4)methodIdMocks;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 454,
      "column": 1,
      "content": "mapping(bytes4=>MockType)methodIdMockTypes;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 455,
      "column": 1,
      "content": "mapping(bytes4=>bytes)methodIdExpectations;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 456,
      "column": 1,
      "content": "mapping(bytes4=>string)methodIdRevertMessages;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 457,
      "column": 1,
      "content": "mapping(bytes32=>uint)methodIdInvocations;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 459,
      "column": 1,
      "content": "MockTypefallbackMockType;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 460,
      "column": 1,
      "content": "bytesfallbackExpectation;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 461,
      "column": 1,
      "content": "stringfallbackRevertMessage;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 462,
      "column": 1,
      "content": "uintinvocations;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 463,
      "column": 1,
      "content": "uintresetCount;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 1211,
      "column": 4,
      "content": "mapping(address=>uint)balances;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 1212,
      "column": 4,
      "content": "mapping(address=>mapping(address=>uint))allowances;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 1213,
      "column": 4,
      "content": "uinttotalTokens;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 1549,
      "column": 4,
      "content": "mapping(address=>bool)hasParticpationWithdrawn;"
    }
  ]
}