{
  "contract": "0xccd7ce9ec004bfbd5711245f917d6109813a909c",
  "tool": "smartcheck",
  "start": 1563502108.2614207,
  "end": 1563502122.0898154,
  "duration": 13.828394651412964,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 45,
      "column": 32,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 413,
      "column": 42,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "c67a09",
      "severity": 1,
      "line": 1123,
      "column": 43,
      "content": "0x0"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 780,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){cancelOrder(_orderAddresses[index],_orderValues[index],_v[index],_r[index],_s[index]);}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 1200,
      "column": 8,
      "content": "for(uint256index=0;index<_tokens.length;index++){addresstokenAddress=_tokens[index];uint256tokenAmount=balances[tokenAddress][msg.sender];if(0==tokenAmount){continue;}require(Token(tokenAddress).approve(newExchangeAddress,tokenAmount),\"Approve failed\");balances[tokenAddress][msg.sender]=0;IUpgradableExchange(newExchangeAddress).importTokens(tokenAddress,tokenAmount,msg.sender);}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 1547,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){require(address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]),\"Method call failed\");}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 1588,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 780,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){cancelOrder(_orderAddresses[index],_orderValues[index],_v[index],_r[index],_s[index]);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1200,
      "column": 8,
      "content": "for(uint256index=0;index<_tokens.length;index++){addresstokenAddress=_tokens[index];uint256tokenAmount=balances[tokenAddress][msg.sender];if(0==tokenAmount){continue;}require(Token(tokenAddress).approve(newExchangeAddress,tokenAmount),\"Approve failed\");balances[tokenAddress][msg.sender]=0;IUpgradableExchange(newExchangeAddress).importTokens(tokenAddress,tokenAmount,msg.sender);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1547,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){require(address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]),\"Method call failed\");}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 1588,
      "column": 8,
      "content": "for(uint256index=0;index<_orderAddresses.length;index++){address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 182,
      "column": 0,
      "content": "contractIUpgradableExchange{uint8publicVERSION;eventFundsMigrated(addressindexeduser,addressindexedexchangeAddress);functionallowOrRestrictMigrations()external;functionmigrateFunds(address[]_tokens)external;functionmigrateEthers()private;functionmigrateTokens(address[]_tokens)private;functionimportEthers(address_user)externalpayable;functionimportTokens(address_tokenAddress,uint256_tokenAmount,address_user)external;}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1028,
      "column": 0,
      "content": "contractReferralExchangeisExchange{uint256publicreferralFeeRate;mapping(address=>address)publicreferrals;constructor(uint256_referralFeeRate)public{referralFeeRate=_referralFeeRate;}eventReferralBalanceUpdated(addressrefererAddress,addressreferralAddress,addresstokenAddress,uint256feeAmount,uint256referralFeeAmount);eventReferralDeposit(addresstoken,addressindexeduser,addressindexedreferrer,uint256amount,uint256balance);functiondepositEthers(address_referrer)externalpayable{addressuser=msg.sender;require(0x0==referrals[user],\"This user already have a referrer.\");super._depositEthers(user);referrals[user]=_referrer;emitReferralDeposit(ETH,user,_referrer,msg.value,balances[ETH][user]);}functiondepositTokens(address_tokenAddress,uint256_amount,address_referrer)external{addressuser=msg.sender;require(0x0==referrals[user],\"This user already have a referrer.\");super._depositTokens(_tokenAddress,_amount,user);referrals[user]=_referrer;emitReferralDeposit(_tokenAddress,user,_referrer,_amount,balances[_tokenAddress][user]);}functionsetReferralFee(uint256_referralFeeRate)externalonlyOwner{referralFeeRate=_referralFeeRate;}functiongetReferrer(address_user)internalviewreturns(addressreferrer){returnreferrals[_user]!=address(0x0)?referrals[_user]:feeAccount;}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 1484,
      "column": 0,
      "content": "contractWeiDexisDiscountTokenExchange,ReferralExchange,UpgradableExchange,ExchangeOffering,OldERC20ExchangeSupport{mapping(bytes4=>bool)privateallowedMethods;function()publicpayable{revert(\"Cannot send Ethers to the contract, use depositEthers\");}constructor(address_feeAccount,uint256_feeRate,uint256_referralFeeRate,address_discountTokenAddress,uint256_discountTokenRatio)publicExchange(_feeAccount,_feeRate)ReferralExchange(_referralFeeRate)DiscountTokenExchange(_discountTokenAddress,_discountTokenRatio){}functionallowOrRestrictMethod(bytes4_methodId,bool_allowed)externalonlyOwner{allowedMethods[_methodId]=_allowed;}functiontakeAllOrRevert(address[3][]_orderAddresses,uint256[3][]_orderValues,uint256[]_takerSellAmount,uint8[]_v,bytes32[]_r,bytes32[]_s,bytes4_methodId)external{require(allowedMethods[_methodId],\"Can't call this method\");for(uint256index=0;index<_orderAddresses.length;index++){require(address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]),\"Method call failed\");}}functiontakeAllPossible(address[3][]_orderAddresses,uint256[3][]_orderValues,uint256[]_takerSellAmount,uint8[]_v,bytes32[]_r,bytes32[]_s,bytes4_methodId)external{require(allowedMethods[_methodId],\"Can't call this method\");for(uint256index=0;index<_orderAddresses.length;index++){address(this).delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index]);}}functiontakeBuyOrder(address[3]_orderAddresses,uint256[3]_orderValues,uint256_takerSellAmount,uint8_v,bytes32_r,bytes32_s)external{require(_orderAddresses[1]==ETH,\"Base currency must be ether's (0x0)\");OrderLib.Ordermemoryorder=OrderLib.createOrder(_orderAddresses,_orderValues);uint256receivedAmount=takeOrder(order,_takerSellAmount,_v,_r,_s);require(0<receivedAmount,\"Trade failure\");updateVolume(receivedAmount);if(!isVolumeReached()){takeFee(order.maker,msg.sender,order.makerBuyToken,_takerSellAmount,receivedAmount);}}functiontakeSellOrder(address[3]_orderAddresses,uint256[3]_orderValues,uint256_takerSellAmount,uint8_v,bytes32_r,bytes32_s)public{require(_orderAddresses[2]==ETH,\"Base currency must be ether's (0x0)\");OrderLib.Ordermemoryorder=OrderLib.createOrder(_orderAddresses,_orderValues);uint256receivedAmount=takeOrder(order,_takerSellAmount,_v,_r,_s);require(0<receivedAmount,\"Trade failure\");updateVolume(_takerSellAmount);if(!isVolumeReached()){takeFee(order.maker,msg.sender,order.makerSellToken,receivedAmount,_takerSellAmount);}}functiontakeFee(address_maker,address_taker,address_tokenAddress,uint256_tokenFulfilledAmount,uint256_etherFulfilledAmount)private{uint256_feeRate=feeRate;uint256feeInWdx=_etherFulfilledAmount.calculateWdxFee(discountTokenRatio,feeRate);takeFee(_maker,ETH,_etherFulfilledAmount.div(_feeRate),feeInWdx);takeFee(_taker,_tokenAddress,_tokenFulfilledAmount.div(_feeRate),feeInWdx);}functiontakeFee(address_user,address_tokenAddress,uint256_tokenFeeAmount,uint256_wdxFeeAmount)private{if(balances[discountTokenAddress][_user]>=_wdxFeeAmount){takeFee(_user,discountTokenAddress,_wdxFeeAmount);}else{takeFee(_user,_tokenAddress,_tokenFeeAmount);}}functiontakeFee(address_user,address_tokenAddress,uint256_fullFee)private{address_feeAccount=feeAccount;addressreferrer=getReferrer(_user);uint256referralFee=_fullFee.calculateReferralFee(referralFeeRate);balances[_tokenAddress][_user]=balances[_tokenAddress][_user].sub(_fullFee);if(referrer==_feeAccount){balances[_tokenAddress][_feeAccount]=balances[_tokenAddress][_feeAccount].add(_fullFee);}else{balances[_tokenAddress][_feeAccount]=balances[_tokenAddress][_feeAccount].add(_fullFee.sub(referralFee));balances[_tokenAddress][referrer]=balances[_tokenAddress][referrer].add(referralFee);}emitReferralBalanceUpdated(referrer,_user,_tokenAddress,_fullFee,referralFee);}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 475,
      "column": 4,
      "content": "functionsetFee(uint256_feeRate)externalonlyOwner{feeRate=_feeRate;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 486,
      "column": 4,
      "content": "functionsetFeeAccount(address_feeAccount)externalonlyOwner{feeAccount=_feeAccount;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 814,
      "column": 4,
      "content": "functionsetDailyVolumeCap(uint256_dailyVolumeCap)publiconlyOwner{dailyVolumeCap=_dailyVolumeCap;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 894,
      "column": 4,
      "content": "functionsetDiscountToken(address_discountTokenAddress,uint256_discountTokenRatio,uint256_minimumTokenAmountForUpdate)publiconlyOwneronlyOnce{discountTokenAddress=_discountTokenAddress;discountTokenRatio=_discountTokenRatio;minimumTokenAmountForUpdate=_minimumTokenAmountForUpdate;initialized=true;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 942,
      "column": 4,
      "content": "functionsetMinimumTokenAmountForUpdate(uint256_minimumTokenAmountForUpdate)externalonlyOwner{minimumTokenAmountForUpdate=_minimumTokenAmountForUpdate;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 1106,
      "column": 4,
      "content": "functionsetReferralFee(uint256_referralFeeRate)externalonlyOwner{referralFeeRate=_referralFeeRate;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 1141,
      "column": 4,
      "content": "functionsetNewExchangeAddress(address_newExchangeAddress)externalonlyOwner{newExchangeAddress=_newExchangeAddress;}"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 800,
      "column": 12,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 865,
      "column": 12,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 1486,
      "column": 28,
      "content": "private"
    },
    {
      "name": "SOLIDITY_REDUNDANT_FALLBACK_REJECT",
      "patternId": "b85a32",
      "severity": 1,
      "line": 1488,
      "column": 31,
      "content": "{revert(\"Cannot send Ethers to the contract, use depositEthers\");}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 82,
      "column": 4,
      "content": "functioncheckSuccess()privatepurereturns(bool){uint256returnValue=0;assembly{switchreturndatasizecase0x0{returnValue:=1}case0x20{returndatacopy(0x0,0x0,0x20)returnValue:=mload(0x0)}default{}}returnreturnValue!=0;}"
    },
    {
      "name": "SOLIDITY_UNCHECKED_CALL",
      "patternId": "f39eed",
      "severity": 3,
      "line": 1589,
      "column": 26,
      "content": "delegatecall(_methodId,_orderAddresses[index],_orderValues[index],_takerSellAmount[index],_v[index],_r[index],_s[index])"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "91h3sa",
      "severity": 1,
      "line": 1488,
      "column": 16,
      "content": "public"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 194,
      "column": 27,
      "content": "address[]_tokens"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1198,
      "column": 27,
      "content": "address[]_tokens"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 89,
      "column": 8,
      "content": "assembly{switchreturndatasizecase0x0{returnValue:=1}case0x20{returndatacopy(0x0,0x0,0x20)returnValue:=mload(0x0)}default{}}"
    }
  ]
}