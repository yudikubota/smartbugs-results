{
  "contract": "0x84d45e60f7036f0de7df8ed68e1ee50471b963ba",
  "tool": "smartcheck",
  "start": 1563515312.4926348,
  "end": 1563515321.7138655,
  "duration": 9.221230745315552,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "adc165",
      "severity": 1,
      "line": 39,
      "column": 33,
      "content": "0xed62dbc89f22dae81013e48928ef4395fa19e51b"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "28fa69",
      "severity": 1,
      "line": 25,
      "column": 2,
      "content": "functionbalanceOf(addresswho)constantreturns(uint256);"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "28fa69",
      "severity": 1,
      "line": 97,
      "column": 1,
      "content": "functiongetTokenAmount(addresswho)constantreturns(uint256){returnbalances[who].tokenAmount;}"
    },
    {
      "name": "SOLIDITY_DEPRECATED_CONSTRUCTIONS",
      "patternId": "28fa69",
      "severity": 1,
      "line": 101,
      "column": 1,
      "content": "functiongetWeiInvested(addresswho)constantreturns(uint256){returnbalances[who].weiInvested;}"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 158,
      "column": 8,
      "content": "for(uint256i=0;i<addresses.length;i++){listAddress(addresses[i],maximumIndividualCap);}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 158,
      "column": 8,
      "content": "for(uint256i=0;i<addresses.length;i++){listAddress(addresses[i],maximumIndividualCap);}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 138,
      "column": 1,
      "content": "functionsetPreSaleHalt(boolhalted)onlyOwner{preSaleHalted=halted;}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 31,
      "column": 1,
      "content": "usingSafeMathforuint256;"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "7d54ca",
      "severity": 1,
      "line": 180,
      "column": 46,
      "content": "(uint256,uint256)"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 25,
      "column": 2,
      "content": "functionbalanceOf(addresswho)constantreturns(uint256);"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 26,
      "column": 2,
      "content": "functiontransfer(addressto,uint256value)returns(bool);"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 93,
      "column": 1,
      "content": "functionAuctusPreSale(){owner=msg.sender;}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 97,
      "column": 1,
      "content": "functiongetTokenAmount(addresswho)constantreturns(uint256){returnbalances[who].tokenAmount;}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 101,
      "column": 1,
      "content": "functiongetWeiInvested(addresswho)constantreturns(uint256){returnbalances[who].weiInvested;}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 105,
      "column": 1,
      "content": "function()payablepreSalePeriodisPreSaleNotHalted{require(balances[msg.sender].weiInvested<whitelist[msg.sender]);var(weiToInvest,weiRemaining)=getValueToInvest();uint256amountToReceive=weiToInvest.times(basicPricePerEth);balances[msg.sender].tokenAmount=balances[msg.sender].tokenAmount.plus(amountToReceive);balances[msg.sender].weiInvested=balances[msg.sender].weiInvested.plus(weiToInvest);tokenSold=tokenSold.plus(amountToReceive);weiRaised=weiRaised.plus(weiToInvest);if(weiRemaining>0){msg.sender.transfer(weiRemaining);}Buy(msg.sender,amountToReceive);}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 128,
      "column": 1,
      "content": "functionrevoke()preSaleFailed{uint256weiAmount=balances[msg.sender].weiInvested;assert(weiAmount>0);balances[msg.sender].weiInvested=0;msg.sender.transfer(weiAmount);Revoke(msg.sender,weiAmount);}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 138,
      "column": 1,
      "content": "functionsetPreSaleHalt(boolhalted)onlyOwner{preSaleHalted=halted;}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 142,
      "column": 1,
      "content": "functiontransferOwnership(addressnewOwner)onlyOwnervalidPayload(32){owner=newOwner;}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 149,
      "column": 1,
      "content": "functionlistAddress(addresswho,uint256individualCap)onlyOwnervalidPayload(32*2){whitelist[who]=individualCap;ListAddress(who,individualCap);}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 157,
      "column": 4,
      "content": "functionlistAddresses(address[]addresses)onlyOwner{for(uint256i=0;i<addresses.length;i++){listAddress(addresses[i],maximumIndividualCap);}}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 163,
      "column": 1,
      "content": "functiondrain()onlyOwnerpreSaleCompletedSuccessfully{uint256weiAmount=this.balance;multiSigWallet.transfer(weiAmount);Drain(weiAmount);}"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": 910067,
      "severity": 1,
      "line": 173,
      "column": 1,
      "content": "functiondrainERC20(ERC20Simplifiederc20Token)onlyOwnervalidPayload(32){require(erc20Token.transfer(multiSigWallet,erc20Token.balanceOf(this)));}"
    }
  ]
}