{
  "contract": "0x043bbf1af93df1220dacc94b9ca58b789bf20dc3",
  "tool": "smartcheck",
  "start": 1563592607.1959848,
  "end": 1563592617.3023922,
  "duration": 10.106407403945923,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 103,
      "column": 28,
      "content": "0x01ffc9a7"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 113,
      "column": 67,
      "content": "0xffffffff"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 148,
      "column": 26,
      "content": "0x80ac58cd"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 149,
      "column": 26,
      "content": "0x5b5e139f"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 150,
      "column": 26,
      "content": "0x780e9d63"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 151,
      "column": 26,
      "content": "0x8153916a"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 431,
      "column": 4,
      "content": "tokenApprovals[_tokenId]=address(0)"
    },
    {
      "name": "SOLIDITY_EXTRA_GAS_IN_LOOPS",
      "patternId": "d3j11j",
      "severity": 1,
      "line": 270,
      "column": 4,
      "content": "for(uinti=0;i<result.length;i++){result[i]=tokenIds[i];}"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "f6f853",
      "severity": 2,
      "line": 270,
      "column": 4,
      "content": "for(uinti=0;i<result.length;i++){result[i]=tokenIds[i];}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 58,
      "column": 0,
      "content": "contractERC721isERC165{eventTransfer(addressindexed_from,addressindexed_to,uint256_tokenId);eventApproval(addressindexed_owner,addressindexed_approved,uint256_tokenId);eventApprovalForAll(addressindexed_owner,addressindexed_operator,bool_approved);functionbalanceOf(address_owner)externalviewreturns(uint256);functionownerOf(uint256_tokenId)externalviewreturns(address);functionsafeTransferFrom(address_from,address_to,uint256_tokenId,bytesdata)publicpayable;functionsafeTransferFrom(address_from,address_to,uint256_tokenId)publicpayable;functiontransferFrom(address_from,address_to,uint256_tokenId)externalpayable;functionapprove(address_approved,uint256_tokenId)externalpayable;functionsetApprovalForAll(address_operator,bool_approved)external;functiongetApproved(uint256_tokenId)externalviewreturns(address);functionisApprovedForAll(address_owner,address_operator)externalviewreturns(bool);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 145,
      "column": 0,
      "content": "contractGanNFTisERC165,ERC721,ERC721Enumerable,PublishInterfaces,Ownable{functionGanNFT()internal{supportedInterfaces[0x80ac58cd]=true;supportedInterfaces[0x5b5e139f]=true;supportedInterfaces[0x780e9d63]=true;supportedInterfaces[0x8153916a]=true;}bytes4privateconstantERC721_RECEIVED=bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"));uint256publicclaimPrice=0;uint256publicmaxSupply=300;Metadatapublicerc721Metadata;uint256[]publictokenIds;mapping(uint256=>address)publictokenIdToOwner;mapping(address=>uint256)publicownershipCounts;mapping(address=>uint256[])publicownerBank;mapping(uint256=>address)publictokenApprovals;mapping(address=>mapping(address=>bool))internaloperatorApprovals;functionname()externalpurereturns(string){return\"GanToken\";}functionsymbol()externalpurereturns(string){return\"GT\";}functionsetMetadataAddress(address_contractAddress)publiconlyOwner{erc721Metadata=Metadata(_contractAddress);}modifiercanTransfer(uint256_tokenId,address_from,address_to){addressowner=tokenIdToOwner[_tokenId];require(tokenApprovals[_tokenId]==_to||owner==_from||operatorApprovals[_to][_to]);_;}modifierowns(uint256_tokenId){require(tokenIdToOwner[_tokenId]==msg.sender);_;}eventTransfer(addressindexed_from,addressindexed_to,uint256_value);eventApproval(addressindexed_owner,addressindexed_approved,uint256_tokenId);eventApprovalForAll(addressindexed_owner,addressindexed_operator,bool_approved);functionsetMaxSupply(uintmax)externalpayableonlyOwner{require(max>tokenIds.length);maxSupply=max;}functionsetClaimPrice(uint256price)externalpayableonlyOwner{claimPrice=price;}functionbalanceOf(address_owner)externalviewreturns(uint256balance){balance=ownershipCounts[_owner];}functionownerOf(uint256_tokenId)externalviewreturns(addressowner){owner=tokenIdToOwner[_tokenId];}functiontokensOfOwner(address_owner)externalviewreturns(uint256[]){uint256tokenCount=ownershipCounts[_owner];if(tokenCount==0){returnnewuint256[](0);}uint256[]memoryresult=newuint256[](tokenCount);for(uint256i=0;i<tokenCount;i++){result[i]=ownerBank[_owner][i];}returnresult;}functiongetAllTokenIds()externalviewreturns(uint256[]){uint256[]memoryresult=newuint256[](tokenIds.length);for(uinti=0;i<result.length;i++){result[i]=tokenIds[i];}returnresult;}functionnewGanToken(uint256_noise)externalpayable{require(msg.sender!=address(0));require(tokenIdToOwner[_noise]==0x0);require(tokenIds.length<maxSupply);require(msg.value>=claimPrice);tokenIds.push(_noise);ownerBank[msg.sender].push(_noise);tokenIdToOwner[_noise]=msg.sender;ownershipCounts[msg.sender]++;emitTransfer(address(0),msg.sender,0);}functionsafeTransferFrom(address_from,address_to,uint256_tokenId,bytesdata)publicpayable{_safeTransferFrom(_from,_to,_tokenId,data);}functionsafeTransferFrom(address_from,address_to,uint256_tokenId)publicpayable{_safeTransferFrom(_from,_to,_tokenId,\"\");}functiontransferFrom(address_from,address_to,uint256_tokenId)externalpayable{require(_to!=0x0);require(_to!=address(this));require(tokenApprovals[_tokenId]==msg.sender);require(tokenIdToOwner[_tokenId]==_from);_transfer(_tokenId,_to);}functionapprove(address_to,uint256_tokenId)externalowns(_tokenId)payable{tokenApprovals[_tokenId]=_to;emitApproval(msg.sender,_to,_tokenId);}functionsetApprovalForAll(address_operator,bool_approved)external{operatorApprovals[msg.sender][_operator]=_approved;emitApprovalForAll(msg.sender,_operator,_approved);}functiongetApproved(uint256_tokenId)externalviewreturns(address){returntokenApprovals[_tokenId];}functionisApprovedForAll(address_owner,address_operator)externalviewreturns(bool){returnoperatorApprovals[_owner][_operator];}functiontotalSupply()externalviewreturns(uint256){returntokenIds.length;}functiontokenByIndex(uint256_index)externalviewreturns(uint256){returntokenIds[_index];}functiontokenOfOwnerByIndex(address_owner,uint256_index)externalviewreturns(uint256_tokenId){require(_owner!=address(0));require(_index<ownerBank[_owner].length);_tokenId=ownerBank[_owner][_index];}function_transfer(uint256_tokenId,address_to)internal{require(_to!=address(0));addressfrom=tokenIdToOwner[_tokenId];uint256tokenCount=ownershipCounts[from];for(uint256i=0;i<tokenCount;i++){uint256ownedId=ownerBank[from][i];if(_tokenId==ownedId){deleteownerBank[from][i];if(i!=tokenCount){ownerBank[from][i]=ownerBank[from][tokenCount-1];}break;}}ownershipCounts[from]--;ownershipCounts[_to]++;ownerBank[_to].push(_tokenId);tokenIdToOwner[_tokenId]=_to;tokenApprovals[_tokenId]=address(0);emitTransfer(from,_to,1);}function_safeTransferFrom(address_from,address_to,uint256_tokenId,bytesdata)privatecanTransfer(_tokenId,_from,_to){addressowner=tokenIdToOwner[_tokenId];require(owner==_from);require(_to!=address(0));require(_to!=address(this));_transfer(_tokenId,_to);uint256codeSize;assembly{codeSize:=extcodesize(_to)}if(codeSize==0){return;}bytes4retval=ERC721TokenReceiver(_to).onERC721Received(_from,_tokenId,data);require(retval==ERC721_RECEIVED);}function_memcpy(uint_dest,uint_src,uint_len)privatepure{for(;_len>=32;_len-=32){assembly{mstore(_dest,mload(_src))}_dest+=32;_src+=32;}uint256mask=256**(32-_len)-1;assembly{letsrcpart:=and(mload(_src),not(mask))letdestpart:=and(mload(_dest),mask)mstore(_dest,or(destpart,srcpart))}}function_toString(bytes32[4]_rawBytes,uint256_stringLength)privatepurereturns(string){stringmemoryoutputString=newstring(_stringLength);uint256outputPtr;uint256bytesPtr;assembly{outputPtr:=add(outputString,32)bytesPtr:=_rawBytes}_memcpy(outputPtr,bytesPtr,_stringLength);returnoutputString;}functiontokenMetadata(uint256_tokenId,string_preferredTransport)externalviewreturns(stringinfoUrl){require(erc721Metadata!=address(0));uint256count;bytes32[4]memorybuffer;(buffer,count)=erc721Metadata.getMetadata(_tokenId,_preferredTransport);return_toString(buffer,count);}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 197,
      "column": 2,
      "content": "functionsetMetadataAddress(address_contractAddress)publiconlyOwner{erc721Metadata=Metadata(_contractAddress);}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 225,
      "column": 2,
      "content": "functionsetMaxSupply(uintmax)externalpayableonlyOwner{require(max>tokenIds.length);maxSupply=max;}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 232,
      "column": 2,
      "content": "functionsetClaimPrice(uint256price)externalpayableonlyOwner{claimPrice=price;}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 154,
      "column": 9,
      "content": "private"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 461,
      "column": 2,
      "content": "function_memcpy(uint_dest,uint_src,uint_len)privatepure{for(;_len>=32;_len-=32){assembly{mstore(_dest,mload(_src))}_dest+=32;_src+=32;}uint256mask=256**(32-_len)-1;assembly{letsrcpart:=and(mload(_src),not(mask))letdestpart:=and(mload(_dest),mask)mstore(_dest,or(destpart,srcpart))}}"
    },
    {
      "name": "SOLIDITY_SHOULD_NOT_BE_PURE",
      "patternId": "11314f",
      "severity": 1,
      "line": 483,
      "column": 2,
      "content": "function_toString(bytes32[4]_rawBytes,uint256_stringLength)privatepurereturns(string){stringmemoryoutputString=newstring(_stringLength);uint256outputPtr;uint256bytesPtr;assembly{outputPtr:=add(outputString,32)bytesPtr:=_rawBytes}_memcpy(outputPtr,bytesPtr,_stringLength);returnoutputString;}"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 64,
      "column": 76,
      "content": "bytesdata"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 125,
      "column": 43,
      "content": "string"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 305,
      "column": 74,
      "content": "bytesdata"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 436,
      "column": 75,
      "content": "bytesdata"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 483,
      "column": 88,
      "content": "string"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 464,
      "column": 10,
      "content": "assembly{mstore(_dest,mload(_src))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 473,
      "column": 6,
      "content": "assembly{letsrcpart:=and(mload(_src),not(mask))letdestpart:=and(mload(_dest),mask)mstore(_dest,or(destpart,srcpart))}"
    },
    {
      "name": "SOLIDITY_USING_INLINE_ASSEMBLY",
      "patternId": "109cd5",
      "severity": 1,
      "line": 488,
      "column": 6,
      "content": "assembly{outputPtr:=add(outputString,32)bytesPtr:=_rawBytes}"
    }
  ]
}