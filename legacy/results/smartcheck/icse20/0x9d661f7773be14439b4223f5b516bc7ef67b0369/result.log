/unique_chucks/6/0x9d661f7773be14439b4223f5b516bc7ef67b0369.sol
jar:file:/usr/local/lib/node_modules/@smartdec/smartcheck/jdeploy-bundle/smartcheck-2.0-jar-with-dependencies.jar!/solidity-rules.xmlruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 33
column: 0
content: contractIUniswapExchange{functionethToTokenSwapOutput(uint256tokens_bought,uint256timestamp)publicpayablereturns(uint256);}

ruleId: SOLIDITY_LOCKED_MONEY
patternId: 30281d
severity: 3
line: 177
column: 0
content: contractTwitterHumanityApplicantisPayableHumanityApplicant{eventApply(uintindexedproposalId,addressindexedapplicant,stringusername);constructor(IGovernance_governance,IRegistry_registry,IERC20_humanity,IUniswapExchange_exchange)publicPayableHumanityApplicant(_governance,_registry,_humanity,_exchange){}functionapplyWithTwitter(stringmemoryusername)publicreturns(uint){returnapplyWithTwitterFor(msg.sender,username);}functionapplyWithTwitterFor(addresswho,stringmemoryusername)publicreturns(uint){uintproposalId=applyFor(who);emitApply(proposalId,who,username);returnproposalId;}functionapplyWithTwitterUsingEther(stringmemoryusername)publicpayablereturns(uint){returnapplyWithTwitterUsingEtherFor(msg.sender,username);}functionapplyWithTwitterUsingEtherFor(addresswho,stringmemoryusername)publicpayablereturns(uint){uintproposalId=applyWithEtherFor(who);emitApply(proposalId,who,username);returnproposalId;}}

ruleId: SOLIDITY_SAFEMATH
patternId: 837cac
severity: 1
line: 114
column: 4
content: usingSafeMathforuint;

ruleId: SOLIDITY_UNCHECKED_CALL
patternId: f39eed
severity: 3
line: 165
column: 19
content: send(address(this).balance)

SOLIDITY_SAFEMATH :1
SOLIDITY_LOCKED_MONEY :2
SOLIDITY_UNCHECKED_CALL :1