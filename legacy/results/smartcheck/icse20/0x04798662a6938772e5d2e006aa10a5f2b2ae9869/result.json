{
  "contract": "0x04798662a6938772e5d2e006aa10a5f2b2ae9869",
  "tool": "smartcheck",
  "start": 1563581861.1025677,
  "end": 1563581868.9204288,
  "duration": 7.817861080169678,
  "analysis": [
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 63,
      "column": 0,
      "content": "contractLedgerisOwnable{functionLedger()publicpayable{records.push(Record('','',0));}structRecord{stringcommitHash;stringgithubUrlPointingToTheCommit;bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain;}eventRecordAdded(uint256id,stringcommitHash,stringgithubUrlPointingToTheCommit,bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain);stringpublicconstantname='MixBytes security audits registry';stringpublicconstantdescription='Ledger enumerates security audits executed by MixBytes. Each audit is described by a revised version of a code and our report file. Anyone can ascertain that the code was audited by MixBytes and MixBytes can not deny this audit in case overlooked vulnerability is discovered. An audit can be found in this ledger by git commit hash, by full github repository commit url or by existing audit report file. Report files can be found at public audits MixBytes github repository.';stringpublicconstantrecordName='Security Audit';Record[]publicrecords;mapping(bytes32=>uint256)commitHash_mapping;mapping(bytes32=>uint256)githubUrlPointingToTheCommit_mapping;mapping(bytes32=>uint256)auditReportFileKeccakHashOfTheFileIsStoredInBlockchain_mapping;functionaddRecord(string_commitHash,string_githubUrlPointingToTheCommit,bytes32_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)externalonlyOwnerreturns(uint256){require(0==findIdByCommitHash(_commitHash));require(0==findIdByGithubUrlPointingToTheCommit(_githubUrlPointingToTheCommit));require(0==findIdByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain));records.push(Record(_commitHash,_githubUrlPointingToTheCommit,_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain));commitHash_mapping[keccak256(_commitHash)]=records.length-1;githubUrlPointingToTheCommit_mapping[keccak256(_githubUrlPointingToTheCommit)]=records.length-1;auditReportFileKeccakHashOfTheFileIsStoredInBlockchain_mapping[(_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)]=records.length-1;RecordAdded(records.length-1,_commitHash,_githubUrlPointingToTheCommit,_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain);returnrecords.length-1;}functiongetRecordsCount()publicviewreturns(uint256){returnrecords.length-1;}functionfindByCommitHash(string_commitHash)publicviewreturns(uint256id,stringcommitHash,stringgithubUrlPointingToTheCommit,bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain){Recordrecord=records[findIdByCommitHash(_commitHash)];return(findIdByCommitHash(_commitHash),record.commitHash,record.githubUrlPointingToTheCommit,record.auditReportFileKeccakHashOfTheFileIsStoredInBlockchain);}functionfindIdByCommitHash(stringcommitHash)internalviewreturns(uint256){returncommitHash_mapping[keccak256(commitHash)];}functionfindByGithubUrlPointingToTheCommit(string_githubUrlPointingToTheCommit)publicviewreturns(uint256id,stringcommitHash,stringgithubUrlPointingToTheCommit,bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain){Recordrecord=records[findIdByGithubUrlPointingToTheCommit(_githubUrlPointingToTheCommit)];return(findIdByGithubUrlPointingToTheCommit(_githubUrlPointingToTheCommit),record.commitHash,record.githubUrlPointingToTheCommit,record.auditReportFileKeccakHashOfTheFileIsStoredInBlockchain);}functionfindIdByGithubUrlPointingToTheCommit(stringgithubUrlPointingToTheCommit)internalviewreturns(uint256){returngithubUrlPointingToTheCommit_mapping[keccak256(githubUrlPointingToTheCommit)];}functionfindByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(bytes32_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)publicviewreturns(uint256id,stringcommitHash,stringgithubUrlPointingToTheCommit,bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain){Recordrecord=records[findIdByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)];return(findIdByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain),record.commitHash,record.githubUrlPointingToTheCommit,record.auditReportFileKeccakHashOfTheFileIsStoredInBlockchain);}functionfindIdByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(bytes32auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)internalviewreturns(uint256){returnauditReportFileKeccakHashOfTheFileIsStoredInBlockchain_mapping[(auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)];}}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 12,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 124,
      "column": 30,
      "content": "string_commitHash"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 124,
      "column": 83,
      "content": "stringcommitHash"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 124,
      "column": 102,
      "content": "stringgithubUrlPointingToTheCommit"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 132,
      "column": 32,
      "content": "stringcommitHash"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 137,
      "column": 48,
      "content": "string_githubUrlPointingToTheCommit"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 137,
      "column": 119,
      "content": "stringcommitHash"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 137,
      "column": 138,
      "content": "stringgithubUrlPointingToTheCommit"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 145,
      "column": 50,
      "content": "stringgithubUrlPointingToTheCommit"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 150,
      "column": 172,
      "content": "stringcommitHash"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 150,
      "column": 191,
      "content": "stringgithubUrlPointingToTheCommit"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "441gim",
      "severity": 1,
      "line": 125,
      "column": 8,
      "content": "Recordrecord=records[findIdByCommitHash(_commitHash)]"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "441gim",
      "severity": 1,
      "line": 138,
      "column": 8,
      "content": "Recordrecord=records[findIdByGithubUrlPointingToTheCommit(_githubUrlPointingToTheCommit)]"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "441gim",
      "severity": 1,
      "line": 151,
      "column": 8,
      "content": "Recordrecord=records[findIdByAuditReportFileKeccakHashOfTheFileIsStoredInBlockchain(_auditReportFileKeccakHashOfTheFileIsStoredInBlockchain)]"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 94,
      "column": 4,
      "content": "mapping(bytes32=>uint256)commitHash_mapping;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 95,
      "column": 4,
      "content": "mapping(bytes32=>uint256)githubUrlPointingToTheCommit_mapping;"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 96,
      "column": 4,
      "content": "mapping(bytes32=>uint256)auditReportFileKeccakHashOfTheFileIsStoredInBlockchain_mapping;"
    }
  ]
}