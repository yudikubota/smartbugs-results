{
  "contract": "0xfe4e742f7aaf30186a3a3b290304eb8d613e4867",
  "tool": "smartcheck",
  "start": 1563495635.24154,
  "end": 1563495648.5197258,
  "duration": 13.278185844421387,
  "analysis": [
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1043,
      "column": 31,
      "content": "0xFFFFFFFF"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1050,
      "column": 18,
      "content": "0xFFFFFFFF"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "b140cd",
      "severity": 1,
      "line": 1050,
      "column": 52,
      "content": "0xFFFFFFFF"
    },
    {
      "name": "SOLIDITY_ADDRESS_HARDCODED",
      "patternId": "a91b18",
      "severity": 1,
      "line": 57,
      "column": 4,
      "content": "_owner=address(0)"
    },
    {
      "name": "SOLIDITY_ARRAY_LENGTH_MANIPULATION",
      "patternId": "872bdd",
      "severity": 1,
      "line": 730,
      "column": 39,
      "content": "characterFights[_tokenId].length--"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 994,
      "column": 11,
      "content": "max>min"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 343,
      "column": 0,
      "content": "contractFightsisOwnable,ServiceRole,ReentrancyGuard,CanReclaimToken{usingSafeMathforuint256;eventSetFightInterval(uintstartsFrom,uintpastFightsCount,uintfightsInterval,uintfightPeriod,uintapplicationPeriod,uintbetsPeriod);eventEnterArena(uinttokenId,uintfightId,uintstartsAt,uintlevel,uintenemyRace);eventChangeEnemy(uinttokenId,uintfightId,uintenemyRace);eventLeaveArena(uinttokenId,uintfightId,Resultresult,uintlevel);eventStartFight(uintfightId,uintstartAt);eventRemoveFight(uintfightId);eventFightResult(uintfightId,uint[]races,uint[]values);eventFinishFight(uintfightId,uintstartedAt,uintfinishedAt,uintstartCheckedAt,uintfinishCheckedAt);HEROESpublicheroes;CHRpubliccoin;enumResult{QUAIL,WIN,LOSS,DRAW}structFighter{uintindex;boolexists;uintrace;uintlevel;uintenemyRace;boolfinished;}structRace{uintindex;boolexists;uintcount;uintenemyCount;uintlevelSum;mapping(uint=>uint)levelCount;int32result;}structFight{uintstartedAt;uintfinishedAt;uintstartCheckedAt;uintfinishCheckedAt;mapping(uint=>uint)arena;mapping(uint=>Fighter)fighters;uintfightersCount;mapping(uint=>Race)races;mapping(uint=>uint)raceList;uintraceCount;}uint[]publicfightsList;mapping(uint=>uint[])publiccharacterFights;mapping(uint=>Fight)fights;structFightInterval{uintfightsInterval;uintstartsFrom;uintfightsCount;uintbetsPeriod;uintapplicationPeriod;uintfightPeriod;}FightInterval[]publicintervalHistory;uintpublicconstantFightEpoch=1542240000;uintpublicminBetsLevel=5;boolpublicallowEnterDuringBets=true;modifieronlyOwnerOf(uint256_tokenId){require(heroes.ownerOf(_tokenId)==msg.sender);_;}constructor(HEROES_heroes,CHR_coin)public{require(address(_heroes)!=address(0));require(address(_coin)!=address(0));heroes=_heroes;coin=_coin;intervalHistory.push(FightInterval({fightPeriod:5*60*60,startsFrom:FightEpoch,fightsCount:0,fightsInterval:12*60*60,betsPeriod:2*60*60,applicationPeriod:11*60*60}));}function()externalpayable{require(msg.value>0);address(heroes).transfer(msg.value);}functionaddService(addressaccount)publiconlyOwner{_addService(account);}functionremoveService(addressaccount)publiconlyOwner{_removeService(account);}functionsetFightInterval(uint_fightsInterval,uint_applicationPeriod,uint_betsPeriod,uint_fightPeriod)externalonlyOwner{FightIntervalmemoryi=_getFightIntervalAt(now);uintintervalsCount=(now-i.startsFrom)/i.fightsInterval+1;FightIntervalmemoryni=FightInterval({fightsInterval:_fightsInterval,startsFrom:i.startsFrom+i.fightsInterval*intervalsCount,fightsCount:intervalsCount+i.fightsCount,applicationPeriod:_applicationPeriod,betsPeriod:_betsPeriod,fightPeriod:_fightPeriod});intervalHistory.push(ni);emitSetFightInterval(ni.startsFrom,ni.fightsCount,_fightsInterval,_fightPeriod,_applicationPeriod,_betsPeriod);}functionsetParameters(uint_minBetsLevel,bool_allowEnterDuringBets)externalonlyOwner{minBetsLevel=_minBetsLevel;allowEnterDuringBets=_allowEnterDuringBets;}functionenterArena(uint_tokenId,uint_enemyRace)publiconlyOwnerOf(_tokenId){require(isAllowed(_tokenId));uintintervalId=_getFightIntervalIdAt(now);FightIntervalmemoryi=intervalHistory[intervalId];uintnextStartsAt=_getFightStartsAt(intervalId,1);require(now>=nextStartsAt-i.applicationPeriod);require(now<nextStartsAt-(allowEnterDuringBets?0:i.betsPeriod));uintnextFightId=getFightId(intervalId,1);Fightstoragef=fights[nextFightId];require(!f.fighters[_tokenId].exists);uintlevel=heroes.getLevel(_tokenId);uintrace=heroes.getRace(_tokenId);require(race!=_enemyRace);if(f.startedAt==0){f.startedAt=nextStartsAt;fightsList.push(nextFightId);emitStartFight(nextFightId,nextStartsAt);}f.fighters[_tokenId]=Fighter({exists:true,finished:false,index:f.fightersCount,race:race,enemyRace:_enemyRace,level:level});f.arena[f.fightersCount++]=_tokenId;characterFights[_tokenId].push(nextFightId);Racestorager=f.races[race];if(!r.exists){r.exists=true;r.index=f.raceCount;f.raceList[f.raceCount++]=race;}r.count++;if(level>=minBetsLevel){if(r.levelCount[level]==0){r.levelSum=r.levelSum.add(level);}r.levelCount[level]++;}Racestorageer=f.races[_enemyRace];if(!er.exists){er.exists=true;er.index=f.raceCount;f.raceList[f.raceCount++]=_enemyRace;}er.enemyCount++;require(heroes.lock(_tokenId,nextStartsAt+i.fightPeriod,false));emitEnterArena(_tokenId,nextFightId,nextStartsAt,level,_enemyRace);}functionchangeEnemy(uint_tokenId,uint_enemyRace)publiconlyOwnerOf(_tokenId){uintfightId=characterLastFightId(_tokenId);require(fightId!=0);Fightstoragef=fights[fightId];Fighterstoragefr=f.fighters[_tokenId];require(fr.exists);require(!fr.finished);require(fr.enemyRace!=_enemyRace);FightIntervalmemoryi=_getFightIntervalAt(f.startedAt);require(now>=f.startedAt-i.applicationPeriod&&now<f.startedAt-i.betsPeriod&&f.finishedAt!=0);fr.enemyRace=_enemyRace;Racestorageer_old=f.races[fr.enemyRace];er_old.enemyCount--;if(er_old.count==0&&er_old.enemyCount==0){f.races[f.raceList[--f.raceCount]].index=er_old.index;f.raceList[er_old.index]=f.raceList[f.raceCount];deletef.arena[f.raceCount];deletef.races[fr.enemyRace];}Racestorageer_new=f.races[_enemyRace];if(!er_new.exists){er_new.index=f.raceCount;f.raceList[f.raceCount++]=_enemyRace;}er_new.enemyCount++;emitChangeEnemy(_tokenId,fightId,_enemyRace);}functionreenterArena(uint_tokenId,uint_enemyRace,bool_useCoin)publiconlyOwnerOf(_tokenId){uintfightId=characterLastFightId(_tokenId);require(fightId!=0);Fightstoragef=fights[fightId];Fighterstoragefr=f.fighters[_tokenId];require(fr.exists);require(!fr.finished);require(f.finishedAt!=0&&now>f.finishedAt);Resultresult=Result.QUAIL;if(f.races[f.fighters[_tokenId].race].result>f.races[f.fighters[_tokenId].enemyRace].result){result=Result.WIN;heroes.addWin(_tokenId,1,1);}elseif(f.races[f.fighters[_tokenId].race].result<f.races[f.fighters[_tokenId].enemyRace].result){result=Result.LOSS;if(_useCoin){require(coin.burn(heroes.ownerOf(_tokenId),1));heroes.addLoss(_tokenId,1,0);}else{heroes.addLoss(_tokenId,1,1);}}else{}fr.finished=true;emitLeaveArena(_tokenId,fightId,result,fr.level);enterArena(_tokenId,_enemyRace);}functionleaveArena(uint_tokenId,bool_useCoin)publiconlyOwnerOf(_tokenId){uintfightId=characterLastFightId(_tokenId);require(fightId!=0);Fightstoragef=fights[fightId];Fighterstoragefr=f.fighters[_tokenId];require(fr.exists);require(!fr.finished);FightIntervalmemoryi=_getFightIntervalAt(f.startedAt);require(now<f.startedAt-i.betsPeriod||(f.finishedAt!=0&&now>f.finishedAt));Resultresult=Result.QUAIL;if(f.finishedAt==0){Racestorager=f.races[fr.race];if(fr.level>=minBetsLevel){r.levelCount[fr.level]--;if(r.levelCount[fr.level]==0){r.levelSum=r.levelSum.sub(fr.level);}}r.count--;Racestorageer=f.races[fr.enemyRace];er.enemyCount--;if(r.count==0&&r.enemyCount==0){f.races[f.raceList[--f.raceCount]].index=r.index;f.raceList[r.index]=f.raceList[f.raceCount];deletef.arena[f.raceCount];deletef.races[fr.race];}if(er.count==0&&er.enemyCount==0){f.races[f.raceList[--f.raceCount]].index=er.index;f.raceList[er.index]=f.raceList[f.raceCount];deletef.arena[f.raceCount];deletef.races[fr.enemyRace];}f.fighters[f.arena[--f.fightersCount]].index=fr.index;f.arena[fr.index]=f.arena[f.fightersCount];deletef.arena[f.fightersCount];deletef.fighters[_tokenId];deletecharacterFights[_tokenId][characterFights[_tokenId].length--];if(f.fightersCount==0){deletefights[fightId];emitRemoveFight(fightId);}}else{if(f.races[f.fighters[_tokenId].race].result>f.races[f.fighters[_tokenId].enemyRace].result){result=Result.WIN;heroes.addWin(_tokenId,1,1);}elseif(f.races[f.fighters[_tokenId].race].result<f.races[f.fighters[_tokenId].enemyRace].result){result=Result.LOSS;if(_useCoin){require(coin.burn(heroes.ownerOf(_tokenId),1));heroes.addLoss(_tokenId,1,0);}else{heroes.addLoss(_tokenId,1,1);}}else{result=Result.DRAW;}fr.finished=true;}require(heroes.unlock(_tokenId));emitLeaveArena(_tokenId,fightId,result,fr.level);}functionfightsCount()publicviewreturns(uint){returnfightsList.length;}functiongetCurrentFightId()publicviewreturns(uint){returngetFightId(_getFightIntervalIdAt(now),0);}functiongetNextFightId()publicviewreturns(uint){returngetFightId(_getFightIntervalIdAt(now),1);}functiongetFightId(uintintervalId,uintnextShift)internalviewreturns(uint){FightIntervalmemoryi=intervalHistory[intervalId];return(now-i.startsFrom)/i.fightsInterval+i.fightsCount+nextShift;}functioncharacterFightsCount(uint_tokenId)publicviewreturns(uint){returncharacterFights[_tokenId].length;}functioncharacterLastFightId(uint_tokenId)publicviewreturns(uint){returncharacterFights[_tokenId].length>0?characterFights[_tokenId][characterFights[_tokenId].length-1]:0;}functioncharacterLastFight(uint_tokenId)publicviewreturns(uintindex,uintrace,uintlevel,uintenemyRace,boolfinished){returngetFightFighter(characterLastFightId(_tokenId),_tokenId);}functiongetFightFighter(uint_fightId,uint_tokenId)publicviewreturns(uintindex,uintrace,uintlevel,uintenemyRace,boolfinished){Fightermemoryfr=fights[_fightId].fighters[_tokenId];return(fr.index,fr.race,fr.level,fr.enemyRace,fr.finished);}functiongetFightArenaFighter(uint_fightId,uint_fighterIndex)publicviewreturns(uinttokenId,uintrace,uintlevel,uintenemyRace,boolfinished){uint_tokenId=fights[_fightId].arena[_fighterIndex];Fightermemoryfr=fights[_fightId].fighters[_tokenId];return(_tokenId,fr.race,fr.level,fr.enemyRace,fr.finished);}functiongetFightRaces(uint_fightId)publicviewreturns(uint[]){Fightstoragef=fights[_fightId];if(f.startedAt==0)return;uint[]memoryr=newuint[](f.raceCount);for(uinti;i<f.raceCount;i++){r[i]=f.raceList[i];}returnr;}functiongetFightRace(uint_fightId,uint_race)externalviewreturns(uintindex,uintcount,uintenemyCount,int32result){Racememoryr=fights[_fightId].races[_race];return(r.index,r.count,r.enemyCount,r.result);}functiongetFightRaceLevelStat(uint_fightId,uint_race,uint_level)externalviewreturns(uintlevelCount,uintlevelSum){Racestorager=fights[_fightId].races[_race];return(r.levelCount[_level],r.levelSum);}functiongetFightResult(uint_fightId,uint_tokenId)publicviewreturns(Result){Fightstoragef=fights[_fightId];Fighterstoragefr=f.fighters[_tokenId];if(!fr.exists){returnResult.QUAIL;}returnf.races[fr.race].result>f.races[fr.enemyRace].result?Result.WIN:f.races[fr.race].result<f.races[fr.enemyRace].result?Result.LOSS:Result.DRAW;}functionisAllowed(uinttokenId)publicviewreturns(bool){uintfightId=characterLastFightId(tokenId);returnfightId==0?true:fights[fightId].fighters[tokenId].finished;}functiongetCurrentFight()publicviewreturns(uint256fightId,uint256startedAt,uint256finishedAt,uint256startCheckedAt,uint256finishCheckedAt,uint256fightersCount,uint256raceCount){fightId=getCurrentFightId();(startedAt,finishedAt,startCheckedAt,finishCheckedAt,fightersCount,raceCount)=getFight(fightId);}functiongetNextFight()publicviewreturns(uint256fightId,uint256startedAt,uint256finishedAt,uint256startCheckedAt,uint256finishCheckedAt,uint256fightersCount,uint256raceCount){fightId=getNextFightId();(startedAt,finishedAt,startCheckedAt,finishCheckedAt,fightersCount,raceCount)=getFight(fightId);}functiongetFight(uint_fightId)publicviewreturns(uint256startedAt,uint256finishedAt,uint256startCheckedAt,uint256finishCheckedAt,uint256fightersCount,uint256raceCount){Fightmemoryf=fights[_fightId];return(f.startedAt,f.finishedAt,f.startCheckedAt,f.finishCheckedAt,f.fightersCount,f.raceCount);}functiongetNextFightInterval()externalviewreturns(uintfightId,uintcurrentTime,uintapplicationStartAt,uintbetsStartAt,uintfightStartAt,uintfightFinishAt){uintintervalId=_getFightIntervalIdAt(now);fightId=getFightId(intervalId,1);(currentTime,applicationStartAt,betsStartAt,fightStartAt,fightFinishAt)=_getFightInterval(intervalId,1);}functiongetCurrentFightInterval()externalviewreturns(uintfightId,uintcurrentTime,uintapplicationStartAt,uintbetsStartAt,uintfightStartAt,uintfightFinishAt){uintintervalId=_getFightIntervalIdAt(now);fightId=getFightId(intervalId,0);(currentTime,applicationStartAt,betsStartAt,fightStartAt,fightFinishAt)=_getFightInterval(intervalId,0);}function_getFightInterval(uintintervalId,uintnextShift)internalviewreturns(uintcurrentTime,uintapplicationStartAt,uintbetsStartAt,uintfightStartAt,uintfightFinishAt){fightStartAt=_getFightStartsAt(intervalId,nextShift);FightIntervalmemoryi=intervalHistory[intervalId];currentTime=now;applicationStartAt=fightStartAt-i.applicationPeriod;betsStartAt=fightStartAt-i.betsPeriod;fightFinishAt=fightStartAt+i.fightPeriod;}function_getFightStartsAt(uintintervalId,uintnextShift)internalviewreturns(uint){FightIntervalmemoryi=intervalHistory[intervalId];uintintervalsCount=(now-i.startsFrom)/i.fightsInterval+nextShift;returni.startsFrom+i.fightsInterval*intervalsCount;}functiongetCurrentIntervals()externalviewreturns(uintfightsInterval,uintfightPeriod,uintapplicationPeriod,uintbetsPeriod){FightIntervalmemoryi=_getFightIntervalAt(now);fightsInterval=i.fightsInterval;fightPeriod=i.fightPeriod;applicationPeriod=i.applicationPeriod;betsPeriod=i.betsPeriod;}function_getFightIntervalAt(uint_time)internalviewreturns(FightIntervalmemory){returnintervalHistory[_getFightIntervalIdAt(_time)];}function_getFightIntervalIdAt(uint_time)internalviewreturns(uint){require(intervalHistory.length>0);if(_time>=intervalHistory[intervalHistory.length-1].startsFrom)returnintervalHistory.length-1;if(_time<intervalHistory[0].startsFrom)return0;uintmin=0;uintmax=intervalHistory.length-1;while(max>min){uintmid=(max+min+1)/2;if(intervalHistory[mid].startsFrom<=_time){min=mid;}else{max=mid-1;}}returnmin;}functionsetFightResult(uintfightId,uintcount,uint[]packedRaces,uint[]packedResults)publiconlyService{require(packedRaces.length==packedResults.length);require(packedRaces.length*8>=count);Fightstoragef=fights[fightId];require(f.startedAt!=0&&f.finishedAt==0);for(uinti=0;i<count;i++){f.races[_upack(packedRaces[i/8],i%8)].result=int32(_upack(packedResults[i/8],i%8));}emitFightResult(fightId,packedRaces,packedResults);}functionfinishFight(uintfightId,uintstartCheckedAt,uintfinishCheckedAt)publiconlyService{Fightstoragef=fights[fightId];require(f.startedAt!=0&&f.finishedAt==0);FightIntervalmemoryi=_getFightIntervalAt(f.startedAt);require(now>=f.startedAt+i.fightPeriod);f.finishedAt=now;f.startCheckedAt=startCheckedAt;f.finishCheckedAt=finishCheckedAt;emitFinishFight(fightId,f.startedAt,f.finishedAt,startCheckedAt,finishCheckedAt);}function_upack(uint_v,uint_n)internalpurereturns(uint){return(_v>>(32*_n))&0xFFFFFFFF;}function_puck(uint_v,uint_n,uint_x)internalpurereturns(uint){return_v&~(0xFFFFFFFF<<(32*_n))|((_x&0xFFFFFFFF)<<(32*_n));}}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 472,
      "column": 2,
      "content": "functionsetFightInterval(uint_fightsInterval,uint_applicationPeriod,uint_betsPeriod,uint_fightPeriod)externalonlyOwner{FightIntervalmemoryi=_getFightIntervalAt(now);uintintervalsCount=(now-i.startsFrom)/i.fightsInterval+1;FightIntervalmemoryni=FightInterval({fightsInterval:_fightsInterval,startsFrom:i.startsFrom+i.fightsInterval*intervalsCount,fightsCount:intervalsCount+i.fightsCount,applicationPeriod:_applicationPeriod,betsPeriod:_betsPeriod,fightPeriod:_fightPeriod});intervalHistory.push(ni);emitSetFightInterval(ni.startsFrom,ni.fightsCount,_fightsInterval,_fightPeriod,_applicationPeriod,_betsPeriod);}"
    },
    {
      "name": "SOLIDITY_OVERPOWERED_ROLE",
      "patternId": "j83hf7",
      "severity": 2,
      "line": 490,
      "column": 2,
      "content": "functionsetParameters(uint_minBetsLevel,bool_allowEnterDuringBets)externalonlyOwner{minBetsLevel=_minBetsLevel;allowEnterDuringBets=_allowEnterDuringBets;}"
    },
    {
      "name": "SOLIDITY_PRAGMAS_VERSION",
      "patternId": "23fc32",
      "severity": 1,
      "line": 1,
      "column": 16,
      "content": "^"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 11,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 90,
      "column": 10,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 293,
      "column": 13,
      "content": "private"
    },
    {
      "name": "SOLIDITY_SAFEMATH",
      "patternId": "837cac",
      "severity": 1,
      "line": 344,
      "column": 2,
      "content": "usingSafeMathforuint256;"
    },
    {
      "name": "SOLIDITY_SHOULD_RETURN_STRUCT",
      "patternId": "7d54ca",
      "severity": 1,
      "line": 938,
      "column": 84,
      "content": "(uintcurrentTime,uintapplicationStartAt,uintbetsStartAt,uintfightStartAt,uintfightFinishAt)"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 827,
      "column": 60,
      "content": "uint[]"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1010,
      "column": 52,
      "content": "uint[]packedRaces"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 1010,
      "column": 72,
      "content": "uint[]packedResults"
    },
    {
      "name": "SOLIDITY_VISIBILITY",
      "patternId": "b51ce0",
      "severity": 1,
      "line": 410,
      "column": 2,
      "content": "mapping(uint=>Fight)fights;"
    }
  ]
}