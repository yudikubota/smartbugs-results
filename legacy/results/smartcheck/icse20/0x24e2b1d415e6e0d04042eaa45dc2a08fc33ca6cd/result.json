{
  "contract": "0x24e2b1d415e6e0d04042eaa45dc2a08fc33ca6cd",
  "tool": "smartcheck",
  "start": 1563459799.8896832,
  "end": 1563459871.132088,
  "duration": 71.24240469932556,
  "analysis": [
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "17f23a",
      "severity": 1,
      "line": 735,
      "column": 15,
      "content": "_orderId!=0&&_bestFxpAmount>0&&_loopLimit>0"
    },
    {
      "name": "SOLIDITY_GAS_LIMIT_IN_LOOPS",
      "patternId": "38f6c7",
      "severity": 2,
      "line": 679,
      "column": 8,
      "content": "while(_orderId!=0&&_bestFxpAmount>0&&msg.gas>=getFillOrderMinGasNeeded()){uint256_orderPrice=_orders.getPrice(_orderId);if(_type==Order.Types.Bid?_orderPrice>=_price:_orderPrice<=_price){bytes32_nextOrderId=_orders.getWorseOrderId(_orderId);_orders.setPrice(_market,_outcome,_orderPrice);_bestFxpAmount=IFillOrder(controller.lookup(\"FillOrder\")).fillOrder(_sender,_orderId,_bestFxpAmount,_tradeGroupId);_orderId=_nextOrderId;}else{_orderId=bytes32(0);}}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 301,
      "column": 0,
      "content": "contractIMailbox{functioninitialize(address_owner,IMarket_market)publicreturns(bool);functiondepositEther()publicpayablereturns(bool);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 306,
      "column": 0,
      "content": "contractIMarketisITyped,IOwnable{enumMarketType{YES_NO,CATEGORICAL,SCALAR}functioninitialize(IUniverse_universe,uint256_endTime,uint256_feePerEthInAttoeth,ICash_cash,address_designatedReporterAddress,address_creator,uint256_numOutcomes,uint256_numTicks)publicpayablereturns(bool_success);functionderivePayoutDistributionHash(uint256[]_payoutNumerators,bool_invalid)publicviewreturns(bytes32);functiongetUniverse()publicviewreturns(IUniverse);functiongetFeeWindow()publicviewreturns(IFeeWindow);functiongetNumberOfOutcomes()publicviewreturns(uint256);functiongetNumTicks()publicviewreturns(uint256);functiongetDenominationToken()publicviewreturns(ICash);functiongetShareToken(uint256_outcome)publicviewreturns(IShareToken);functiongetMarketCreatorSettlementFeeDivisor()publicviewreturns(uint256);functiongetForkingMarket()publicviewreturns(IMarket_market);functiongetEndTime()publicviewreturns(uint256);functiongetMarketCreatorMailbox()publicviewreturns(IMailbox);functiongetWinningPayoutDistributionHash()publicviewreturns(bytes32);functiongetWinningPayoutNumerator(uint256_outcome)publicviewreturns(uint256);functiongetReputationToken()publicviewreturns(IReputationToken);functiongetFinalizationTime()publicviewreturns(uint256);functiongetInitialReporterAddress()publicviewreturns(address);functionderiveMarketCreatorFeeAmount(uint256_amount)publicviewreturns(uint256);functionisContainerForShareToken(IShareToken_shadyTarget)publicviewreturns(bool);functionisContainerForReportingParticipant(IReportingParticipant_reportingParticipant)publicviewreturns(bool);functionisInvalid()publicviewreturns(bool);functionfinalize()publicreturns(bool);functiondesignatedReporterWasCorrect()publicviewreturns(bool);functiondesignatedReporterShowed()publicviewreturns(bool);functionisFinalized()publicviewreturns(bool);functionfinalizeFork()publicreturns(bool);functionassertBalances()publicviewreturns(bool);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 419,
      "column": 0,
      "content": "contractICashisERC20{functiondepositEther()externalpayablereturns(bool);functiondepositEtherFor(address_to)externalpayablereturns(bool);functionwithdrawEther(uint256_amount)externalreturns(bool);functionwithdrawEtherTo(address_to,uint256_amount)externalreturns(bool);functionwithdrawEtherToIfPossible(address_to,uint256_amount)externalreturns(bool);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 427,
      "column": 0,
      "content": "contractICreateOrder{functionpublicCreateOrder(Order.Types,uint256,uint256,IMarket,uint256,bytes32,bytes32,bytes32)externalpayablereturns(bytes32);functioncreateOrder(address,Order.Types,uint256,uint256,IMarket,uint256,bytes32,bytes32,bytes32)externalreturns(bytes32);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 432,
      "column": 0,
      "content": "contractIFillOrder{functionpublicFillOrder(bytes32_orderId,uint256_amountFillerWants,bytes32_tradeGroupId)externalpayablereturns(uint256);functionfillOrder(address_filler,bytes32_orderId,uint256_amountFillerWants,bytes32tradeGroupId)externalreturns(uint256);}"
    },
    {
      "name": "SOLIDITY_LOCKED_MONEY",
      "patternId": "30281d",
      "severity": 3,
      "line": 632,
      "column": 0,
      "content": "contractTradeisCashAutoConverter,ReentrancyGuard,MarketValidator{uint256internalconstantFILL_ORDER_MINIMUM_GAS_NEEDED=2000000;uint256internalconstantCREATE_ORDER_MINIMUM_GAS_NEEDED=700000;functionpublicBuy(IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=trade(msg.sender,Order.TradeDirections.Long,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId);_market.assertBalances();return_result;}functionpublicSell(IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=trade(msg.sender,Order.TradeDirections.Short,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId);_market.assertBalances();return_result;}functionpublicTrade(Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=trade(msg.sender,_direction,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId);_market.assertBalances();return_result;}functionpublicFillBestOrder(Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_tradeGroupId)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(uint256){uint256_result=fillBestOrder(msg.sender,_direction,_market,_outcome,_fxpAmount,_price,_tradeGroupId);_market.assertBalances();return_result;}functiontrade(address_sender,Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId)internalreturns(bytes32){uint256_bestFxpAmount=fillBestOrder(_sender,_direction,_market,_outcome,_fxpAmount,_price,_tradeGroupId);if(_bestFxpAmount==0){returnbytes32(1);}if(msg.gas<getCreateOrderMinGasNeeded()){returnbytes32(1);}Order.Types_type=Order.getOrderTradingTypeFromMakerDirection(_direction);returnICreateOrder(controller.lookup(\"CreateOrder\")).createOrder(_sender,_type,_bestFxpAmount,_price,_market,_outcome,_betterOrderId,_worseOrderId,_tradeGroupId);}functionfillBestOrder(address_sender,Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_tradeGroupId)internalnonReentrantreturns(uint256_bestFxpAmount){Order.Types_type=Order.getOrderTradingTypeFromFillerDirection(_direction);IOrders_orders=IOrders(controller.lookup(\"Orders\"));bytes32_orderId=_orders.getBestOrderId(_type,_market,_outcome);_bestFxpAmount=_fxpAmount;while(_orderId!=0&&_bestFxpAmount>0&&msg.gas>=getFillOrderMinGasNeeded()){uint256_orderPrice=_orders.getPrice(_orderId);if(_type==Order.Types.Bid?_orderPrice>=_price:_orderPrice<=_price){bytes32_nextOrderId=_orders.getWorseOrderId(_orderId);_orders.setPrice(_market,_outcome,_orderPrice);_bestFxpAmount=IFillOrder(controller.lookup(\"FillOrder\")).fillOrder(_sender,_orderId,_bestFxpAmount,_tradeGroupId);_orderId=_nextOrderId;}else{_orderId=bytes32(0);}}if(_orderId!=0){return0;}return_bestFxpAmount;}functionpublicBuyWithLimit(IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId,uint256_loopLimit)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=tradeWithLimit(msg.sender,Order.TradeDirections.Long,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId,_loopLimit);_market.assertBalances();return_result;}functionpublicSellWithLimit(IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId,uint256_loopLimit)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=tradeWithLimit(msg.sender,Order.TradeDirections.Short,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId,_loopLimit);_market.assertBalances();return_result;}functionpublicTradeWithLimit(Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId,uint256_loopLimit)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(bytes32){bytes32_result=tradeWithLimit(msg.sender,_direction,_market,_outcome,_fxpAmount,_price,_betterOrderId,_worseOrderId,_tradeGroupId,_loopLimit);_market.assertBalances();return_result;}functionpublicFillBestOrderWithLimit(Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_tradeGroupId,uint256_loopLimit)externalpayablemarketIsLegit(_market)convertToAndFromCashonlyInGoodTimesreturns(uint256){uint256_result=fillBestOrderWithLimit(msg.sender,_direction,_market,_outcome,_fxpAmount,_price,_tradeGroupId,_loopLimit);_market.assertBalances();return_result;}functiontradeWithLimit(address_sender,Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_betterOrderId,bytes32_worseOrderId,bytes32_tradeGroupId,uint256_loopLimit)internalreturns(bytes32){uint256_bestFxpAmount=fillBestOrderWithLimit(_sender,_direction,_market,_outcome,_fxpAmount,_price,_tradeGroupId,_loopLimit);if(_bestFxpAmount==0){returnbytes32(1);}returnICreateOrder(controller.lookup(\"CreateOrder\")).createOrder(_sender,Order.getOrderTradingTypeFromMakerDirection(_direction),_bestFxpAmount,_price,_market,_outcome,_betterOrderId,_worseOrderId,_tradeGroupId);}functionfillBestOrderWithLimit(address_sender,Order.TradeDirections_direction,IMarket_market,uint256_outcome,uint256_fxpAmount,uint256_price,bytes32_tradeGroupId,uint256_loopLimit)internalnonReentrantreturns(uint256_bestFxpAmount){Order.Types_type=Order.getOrderTradingTypeFromFillerDirection(_direction);IOrders_orders=IOrders(controller.lookup(\"Orders\"));bytes32_orderId=_orders.getBestOrderId(_type,_market,_outcome);_bestFxpAmount=_fxpAmount;while(_orderId!=0&&_bestFxpAmount>0&&_loopLimit>0){uint256_orderPrice=_orders.getPrice(_orderId);if(_type==Order.Types.Bid?_orderPrice>=_price:_orderPrice<=_price){bytes32_nextOrderId=_orders.getWorseOrderId(_orderId);_orders.setPrice(_market,_outcome,_orderPrice);_bestFxpAmount=IFillOrder(controller.lookup(\"FillOrder\")).fillOrder(_sender,_orderId,_bestFxpAmount,_tradeGroupId);_orderId=_nextOrderId;}else{_orderId=bytes32(0);}_loopLimit-=1;}if(_orderId!=0){return0;}return_bestFxpAmount;}functiongetFillOrderMinGasNeeded()internalpurereturns(uint256){returnFILL_ORDER_MINIMUM_GAS_NEEDED;}functiongetCreateOrderMinGasNeeded()internalpurereturns(uint256){returnCREATE_ORDER_MINIMUM_GAS_NEEDED;}}"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 145,
      "column": 9,
      "content": "private"
    },
    {
      "name": "SOLIDITY_PRIVATE_MODIFIER_DONT_HIDE_DATA",
      "patternId": "5616b2",
      "severity": 1,
      "line": 180,
      "column": 9,
      "content": "private"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 4,
      "column": 72,
      "content": "uint256[]_parentPayoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 7,
      "column": 46,
      "content": "string_description"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 7,
      "column": 67,
      "content": "string_extraInfo"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 7,
      "column": 148,
      "content": "bytes32[]_outcomes"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 8,
      "column": 46,
      "content": "string_description"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 8,
      "column": 67,
      "content": "string_extraInfo"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 9,
      "column": 147,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 10,
      "column": 108,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 13,
      "column": 176,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 14,
      "column": 180,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 314,
      "column": 42,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 356,
      "column": 88,
      "content": "uint256[]_payoutNumerators"
    },
    {
      "name": "SOLIDITY_UPGRADE_TO_050",
      "patternId": "341gim",
      "severity": 1,
      "line": 378,
      "column": 33,
      "content": "uint256[]_parentPayoutNumerators"
    }
  ]
}