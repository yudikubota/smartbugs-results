INFO:Slither:Compilation warnings/errors on /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:83:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:406:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _baseEthCap, uint _maxEthPerAddress) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:906:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary, uint baseEthCap, uint maxEthPerAddress) 
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:103:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:505:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, customerId);
    ^----------------------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:564:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, 0);
    ^-------------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:571:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:571:21: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:666:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:678:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:688:5: Warning: Invoking events without "emit" prefix is deprecated.
    BaseEthCapChanged(baseEthCap);
    ^---------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:698:5: Warning: Invoking events without "emit" prefix is deprecated.
    MaxEthPerAddressChanged(maxEthPerAddress);
    ^---------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:717:5: Warning: Invoking events without "emit" prefix is deprecated.
    EndsAtChanged(endsAt);
    ^-------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:774:5: Warning: Invoking events without "emit" prefix is deprecated.
    Refund(msg.sender, weiValue);
    ^--------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:173:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isSane(address crowdsale) public constant returns (bool) {
                  ^---------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:182:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isPresalePurchase(address purchaser) public constant returns (bool) {
                             ^---------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:230:3: Warning: No visibility specified. Defaulting to "public". 
  function finalizeCrowdsale();
  ^---------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:406:3: Warning: No visibility specified. Defaulting to "public". 
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _baseEthCap, uint _maxEthPerAddress) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:444:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:651:3: Warning: No visibility specified. Defaulting to "public". 
  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:664:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireCustomerId(bool value) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:675:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:684:3: Warning: No visibility specified. Defaulting to "public". 
  function setBaseEthCap(uint _baseEthCap) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:694:3: Warning: No visibility specified. Defaulting to "public". 
  function setMaxEthPerAddress(uint _maxEthPerAddress) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:711:3: Warning: No visibility specified. Defaulting to "public". 
  function setEndsAt(uint time) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:725:3: Warning: No visibility specified. Defaulting to "public". 
  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:827:3: Warning: No visibility specified. Defaulting to "public". 
  function setOwnerTestValue(uint val) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:867:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);
  ^--------------------------------------------------------------------------------------------------------------------------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:906:3: Warning: No visibility specified. Defaulting to "public". 
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary, uint baseEthCap, uint maxEthPerAddress) 
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:914:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:914:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                         ^------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:914:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                           ^-----------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:914:81: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                                                ^------------------^
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:165:3: Warning: Function state mutability can be restricted to pure
  function isPricingStrategy() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:173:3: Warning: Function state mutability can be restricted to pure
  function isSane(address crowdsale) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:182:3: Warning: Function state mutability can be restricted to pure
  function isPresalePurchase(address purchaser) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:218:3: Warning: Function state mutability can be restricted to pure
  function isFinalizeAgent() public constant returns(bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:832:3: Warning: Function state mutability can be restricted to pure
  function isCrowdsale() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Reentrancy in Crowdsale.finalize (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#655-670):
	External calls:
	- finalizeAgent.finalizeCrowdsale() (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#666)
	State variables written after the call(s):
	- finalized (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#666-670)
Reentrancy in Crowdsale.investInternal (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#469-522):
	External calls:
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#477-482)
	- currentFgcCap = getCurrentFgcCap() (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#486-487)
	State variables written after the call(s):
	- tokensSold (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#505-508)
	- weiRaised (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#504-505)
Reentrancy in Crowdsale.investInternal (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#469-522):
	External calls:
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#477-482)
	- currentFgcCap = getCurrentFgcCap() (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#486-487)
	- pricingStrategy.isPresalePurchase(receiver) (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#508-510)
	State variables written after the call(s):
	- presaleWeiRaised (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#509-510)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
AllocatedCrowdsale.AllocatedCrowdsale.baseEthCap (local variable @ /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#936-937) shadows:
	- Crowdsale.baseEthCap (state variable @ /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#314-315)
AllocatedCrowdsale.AllocatedCrowdsale.maxEthPerAddress (local variable @ /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#937) shadows:
	- Crowdsale.maxEthPerAddress (state variable @ /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#316-317)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#418-458):
	External calls:
	- setPricingStrategy(_pricingStrategy) (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#441-444)
	State variables written after the call(s):
	- endsAt (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#454-455)
	- minimumFundingGoal (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#458)
	- multisigWallet (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#444-449)
	- startsAt (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#452-454)
Reentrancy in Crowdsale.investInternal (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#469-522):
	External calls:
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#477-482)
	- currentFgcCap = getCurrentFgcCap() (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#486-487)
	State variables written after the call(s):
	- investedAmountOf (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#494-498)
	- investorCount (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#493-494)
	- tokenAmountOf (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#498-501)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Crowdsale.getCurrentFgcCap (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#522-545) uses timestamp for comparisons
	Dangerous comparisons:
	- currentPeriod > 4 && currentPeriod < 6 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#538-541)
	- currentPeriod > 5 && currentPeriod < 9 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#541-543)
	- currentPeriod < 2 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#535-537)
	- block.timestamp < startsAt (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#524-527)
	- currentPeriod > 8 && currentPeriod < 11 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#543-545)
	- currentPeriod > 2 && currentPeriod < 5 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#537-538)
Crowdsale.getState (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#827-860) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= endsAt && ! isCrowdsaleFull() (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#853-860)
	- block.timestamp < startsAt (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#843-860)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE should be constant (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#320-323)
ERC20Basic.totalSupply should be constant (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#265-266)
FractionalERC20.decimals should be constant (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#295)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#102-113) should be declared external
PricingStrategy.isPricingStrategy (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#171-173) should be declared external
PricingStrategy.isSane (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#179-180) should be declared external
PricingStrategy.isPresalePurchase (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#187-191) should be declared external
PricingStrategy.calculatePrice (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#202-204) should be declared external
FinalizeAgent.isFinalizeAgent (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#224-227) should be declared external
FinalizeAgent.isSane (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#236) should be declared external
FinalizeAgent.finalizeCrowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#238) should be declared external
ERC20Basic.balanceOf (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#266-268) should be declared external
ERC20Basic.transfer (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#268-269) should be declared external
ERC20.allowance (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#272-276) should be declared external
ERC20.transferFrom (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#276-280) should be declared external
ERC20.approve (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#280-289) should be declared external
Crowdsale.fallback (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#459-461) should be declared external
Crowdsale.preallocate (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#561-582) should be declared external
Crowdsale.buyWithSignedAddress (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#627-631) should be declared external
Crowdsale.buyWithCustomerId (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#634-638) should be declared external
Crowdsale.finalize (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#655-670) should be declared external
Crowdsale.setFinalizeAgent (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#675-678) should be declared external
Crowdsale.setRequireCustomerId (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#684-694) should be declared external
Crowdsale.setRequireSignedAddress (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#698-707) should be declared external
Crowdsale.setBaseEthCap (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#708-716) should be declared external
Crowdsale.setMaxEthPerAddress (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#721-725) should be declared external
Crowdsale.setEndsAt (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#737-741) should be declared external
Crowdsale.setMultisig (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#768-774) should be declared external
Crowdsale.loadRefund (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#782-788) should be declared external
Crowdsale.refund (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#795-805) should be declared external
Crowdsale.isFinalizerSane (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#813-816) should be declared external
Crowdsale.isPricingSane (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#818-820) should be declared external
Crowdsale.setOwnerTestValue (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#861-862) should be declared external
Crowdsale.isCrowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#862-863) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol:
	- pragma solidity^0.4.15 (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#7-9): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#89-91) is not in mixedCase
Function 'Crowdsale.Crowdsale' (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#418-458) is not in mixedCase
Parameter '_token' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#419-420) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#420-423) is not in mixedCase
Parameter '_multisigWallet' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#423-424) is not in mixedCase
Parameter '_start' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#424-426) is not in mixedCase
Parameter '_end' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#427) is not in mixedCase
Parameter '_minimumFundingGoal' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#427-429) is not in mixedCase
Parameter '_baseEthCap' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#429-430) is not in mixedCase
Parameter '_maxEthPerAddress' of Crowdsale.Crowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#430-433) is not in mixedCase
Parameter '_signerAddress' of Crowdsale.setRequireSignedAddress (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#702) is not in mixedCase
Parameter '_baseEthCap' of Crowdsale.setBaseEthCap (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#708) is not in mixedCase
Parameter '_maxEthPerAddress' of Crowdsale.setMaxEthPerAddress (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#721-723) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.setPricingStrategy (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#751-752) is not in mixedCase
Variable 'Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE' (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#320-323) is not in mixedCase
Function 'AllocatedCrowdsale.AllocatedCrowdsale' (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#930-941) is not in mixedCase
Parameter '_beneficiary' of AllocatedCrowdsale.AllocatedCrowdsale (/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol#933-936) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/28/0x61495573c8433f06443fe0d4846e043efd99a9c6.sol analyzed (10 contracts), 59 result(s) found