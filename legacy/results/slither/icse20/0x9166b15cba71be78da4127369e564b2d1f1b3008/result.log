INFO:Slither:Compilation warnings/errors on /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:12:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:110:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function EternalStorage() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:839:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Board(address storageAddress, address configAddress, address _paymentHolder) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:1:1: Warning: Source file does not specify required compiler version!Consider adding "pragma solidity ^0.4.25;"
contract Ownable {
^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:781:31: Warning: This declaration shadows an existing declaration.
    function setPaymentHolder(address paymentHolder) external;
                              ^-------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:764:5: The shadowed declaration is here:
    address public paymentHolder;
    ^--------------------------^

/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:783:23: Warning: This declaration shadows an existing declaration.
    function setAdmin(address admin) external;
                      ^-----------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:763:5: The shadowed declaration is here:
    address public admin;
    ^------------------^

/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:82:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return uint(keccak256(block.timestamp, block.blockhash(block.number))) % (max - min) + min;
                    ^-------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:105:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(addressStorage[keccak256("contract.address", msg.sender)] != 0x0 || msg.sender == owner);
                               ^---------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:112:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", msg.sender)] = msg.sender;
                       ^---------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:117:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", owner)] = 0x0;
                       ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:119:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", msg.sender)] = msg.sender;
                       ^---------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:362:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referees.voted", caseId, referee));
                                                      ^-----------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:367:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setAddress(keccak256("case.referees.vote", caseId, forApplicant, index), referee);
                                                  ^----------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:372:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.referees.vote", caseId, forApplicant, index));
                                                         ^----------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:376:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.votes.count", caseId, forApplicant));
                                                      ^----------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:380:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.votes.count", caseId, forApplicant), votes);
                                               ^----------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:384:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.count", caseId));
                                                      ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:388:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.count", caseId), value);
                                               ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:392:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.referees", caseId, index));
                                                         ^---------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:396:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referees", caseId, referee));
                                                      ^-----------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:401:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.referees", caseId, index), referee);
                      ^---------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:402:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.referees", caseId, referee), true);
                   ^-----------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:406:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBytes32(keccak256("case.referees.vote.hash", caseId, referee));
                                                         ^---------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:411:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBool(keccak256("case.referees.voted", caseId, referee), true);
                                               ^-----------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:412:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.referees.vote.hash", caseId, referee), voteHash);
                                                  ^---------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:413:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.vote.hash.count", caseId), caseCount + 1);
                                               ^------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:417:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.vote.hash.count", caseId));
                                                      ^------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:467:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        applicant = st.getAddress(keccak256("case.applicant", caseId));
                                  ^---------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:468:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        respondent = st.getAddress(keccak256("case.respondent", caseId));
                                   ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:469:30: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        deal = st.getBytes32(keccak256("case.deal", caseId));
                             ^----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:470:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        amount = st.getUint(keccak256("case.amount", caseId));
                            ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:471:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        won = st.getBool(keccak256("case.won", caseId));
                         ^---------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:472:30: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        status = st.getUint8(keccak256("case.status", caseId));
                             ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:473:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        canceledCode = st.getUint8(keccak256("case.canceled.cause.code", caseId));
                                   ^-------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:474:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        refereeAward = st.getUint(keccak256("case.referee.award", caseId));
                                  ^-------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:475:31: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        title = st.getBytes32(keccak256("case.title", caseId));
                              ^-----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:476:50: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        applicantDescriptionHash = st.getBytes32(keccak256("case.applicant.description", caseId));
                                                 ^---------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:477:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        respondentDescriptionHash = st.getBytes32(keccak256("case.respondent.description", caseId));
                                                  ^----------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:478:40: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        isEthRefereeAward = st.getBool(keccak256("case.referee.award.eth", caseId));
                                       ^-----------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:485:27: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        date = st.getUint(keccak256("case.date", caseId));
                          ^----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:486:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        votingDate = st.getUint(keccak256("case.date.voting", caseId));
                                ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:487:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        revealingDate = st.getUint(keccak256("case.date.revealing", caseId));
                                   ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:488:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        closeDate = st.getUint(keccak256("case.date.close", caseId));
                               ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:501:18: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        caseId = keccak256(applicant, respondent, deal, dates[0], title, amount);
                 ^-------------------------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:502:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.applicant", caseId), applicant);
                      ^---------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:503:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.respondent", caseId), respondent);
                      ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:504:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.deal", caseId), deal);
                      ^----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:505:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.amount", caseId), amount);
                   ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:506:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date", caseId), dates[0]);
                   ^----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:507:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.voting", caseId), dates[1]);
                   ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:508:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.revealing", caseId), dates[2]);
                   ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:509:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.close", caseId), dates[3]);
                   ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:510:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint8(keccak256("case.status", caseId), 0);//OPENED
                    ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:511:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.referee.award", caseId), refereeAward);
                   ^-------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:512:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.title", caseId), title);
                      ^-----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:513:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                      ^---------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:513:72: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                                                                       ^-----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:513:72: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                                                                       ^-----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:514:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.referee.award.eth", caseId), isEthRefereeAward);
                   ^-----------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:515:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.referee.count.need", caseId), refereeCountNeed);
                   ^------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:521:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.won", caseId), won);
                   ^---------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:528:49: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint8(keccak256("case.status", caseId), statusCode);
                                                ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:532:67: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return CaseStatus(EternalStorage(storageAddress).getUint8(keccak256("case.status", caseId)));
                                                                  ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:539:49: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint8(keccak256("case.canceled.cause.code", caseId), causeCode);
                                                ^-------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:543:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date", caseId));
                                                      ^----------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:547:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBytes32(keccak256("case.respondent.description", caseId));
                                                         ^----------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:551:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                  ^----------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:551:101: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                                                                    ^--------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:551:101: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                                                                    ^--------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:555:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.applicant", caseId));
                                                         ^---------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:559:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.respondent", caseId));
                                                         ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:563:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referee.award", caseId));
                                                      ^-------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:567:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.voting", caseId));
                                                      ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:571:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.revealing", caseId));
                                                      ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:575:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.close", caseId));
                                                      ^----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:579:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referee.count.need", caseId));
                                                      ^------------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:583:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referee.award.eth", caseId));
                                                      ^-----------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:589:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("vote.token.balance", account));
                                                      ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:601:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("vote.token.balance", account), value);
                                               ^--------------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:700:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("referee.applied", referee), applied);
                   ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:701:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("referee.address", id), referee);
                      ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:705:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("referee.applied", referee));
                                                      ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:709:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBool(keccak256("referee.applied", referee), applied);
                                               ^-----------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:713:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("referee.address", id));
                                                         ^------------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:1004:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return keccak256(voteOption, salt);
               ^-------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:1009:59: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return lib.getRefereeVoteHash(caseId, referee) == keccak256(voteOption, salt);
                                                          ^-------------------------^
/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol:82:48: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
        return uint(keccak256(block.timestamp, block.blockhash(block.number))) % (max - min) + min;
                                               ^-------------^

INFO:Detectors:[91m
PaymentHolder.withdrawEth (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#685-690) sends eth to arbitrary user
	Dangerous calls:
	- to.transfer(amount) (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#690)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[92m
CasesLib.getCase.isEthRefereeAward (local variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#472-473) shadows:
	- CasesLib.isEthRefereeAward (function @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#593-598)
CasesLib.addCase.isEthRefereeAward (local variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#506) shadows:
	- CasesLib.isEthRefereeAward (function @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#593-598)
IBoard.setPaymentHolder.paymentHolder (local variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#801) shadows:
	- IBoard.paymentHolder (state variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#789-791)
IBoard.setAdmin.admin (local variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#803) shadows:
	- IBoard.admin (state variable @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#789)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
PaymentHolder.migrate has external calls inside a loop:
	- balance = Token(token).balanceOf(this) (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#655-657)
PaymentHolder.migrate has external calls inside a loop:
	- require(bool)(Token(token).transfer(newHolder,balance)) (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#658-659)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
EIP20.totalSupply should be constant (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#267-268)
IBoardConfig.version should be constant (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#318-319)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#82-89:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#28-39) should be declared external
EternalStorage.setOwner (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#117-125) should be declared external
EIP20.balanceOf (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#270-271) should be declared external
EIP20.transfer (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#275-277) should be declared external
EIP20.transferFrom (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#282-283) should be declared external
EIP20.approve (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#288-289) should be declared external
EIP20.allowance (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#293-296) should be declared external
Token.balanceOf (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#302-304) should be declared external
Token.transfer (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#304-306) should be declared external
Token.transferFrom (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#306-311) should be declared external
Token.approve (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#311-313) should be declared external
Token.allowance (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#313-316) should be declared external
IBoardConfig.getCaseDatesFromNow (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#358-361) should be declared external
RefereeCasesLib.setRefereesToCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#361-366) should be declared external
RefereeCasesLib.isRefereeVoted (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#366-368) should be declared external
RefereeCasesLib.setRefereeVote (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#368-375) should be declared external
RefereeCasesLib.isRefereeSetToCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#401-405) should be declared external
RefereeCasesLib.getRefereeVoteHash (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#410-412) should be declared external
RefereeCasesLib.setRefereeVoteHash (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#413-422) should be declared external
RefereeCasesLib.getRefereesFor (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#428-442) should be declared external
RefereeCasesLib.getRefereesByCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#442-454) should be declared external
CasesLib.getCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#467-488) should be declared external
CasesLib.getCaseDates (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#488-502) should be declared external
CasesLib.addCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#502-528) should be declared external
CasesLib.setCaseWon (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#528-532) should be declared external
CasesLib.setCaseStatus (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#533-539) should be declared external
CasesLib.getCaseStatus (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#539-543) should be declared external
CasesLib.setCaseCanceledCode (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#543-551) should be declared external
CasesLib.getCaseDate (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#551-554) should be declared external
CasesLib.getRespondentDescription (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#554-559) should be declared external
CasesLib.setRespondentDescription (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#559-563) should be declared external
CasesLib.getApplicant (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#563-567) should be declared external
CasesLib.getRespondent (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#567-571) should be declared external
CasesLib.getRefereeAward (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#571-575) should be declared external
CasesLib.getVotingDate (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#575-579) should be declared external
CasesLib.getRevealingDate (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#579-583) should be declared external
CasesLib.getCloseDate (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#583-589) should be declared external
CasesLib.getRefereeCountNeed (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#589-593) should be declared external
CasesLib.isEthRefereeAward (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#593-598) should be declared external
VoteTokenLib.increaseVotes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#606-617) should be declared external
VoteTokenLib.decreaseVotes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#617-623) should be declared external
PaymentHolder.depositEth (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#678-685) should be declared external
PaymentHolder.withdrawEth (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#685-690) should be declared external
PaymentHolder.withdrawToken (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#690-698) should be declared external
RefereesLib.addReferee (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#699-704) should be declared external
RefereesLib.isRefereeApplied (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#716-720) should be declared external
RefereesLib.setRefereeApplied (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#720-724) should be declared external
RefereesLib.getRandomRefereesToCase (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#728-750) should be declared external
BkxToken.increaseApproval (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#751-752) should be declared external
BkxToken.decreaseApproval (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#752-755) should be declared external
Board.createVoteHash (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#1024-1026) should be declared external
IBoard.createVoteHash (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#819-820) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#12-17) is not in mixedCase
Function 'EternalStorage.EternalStorage' (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#112-117) is not in mixedCase
Parameter '_key' of EternalStorage.getAddress (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#129-130) is not in mixedCase
Parameter '_key' of EternalStorage.getUint (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#134-135) is not in mixedCase
Parameter '_key' of EternalStorage.getUint8 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#141) is not in mixedCase
Parameter '_key' of EternalStorage.getString (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#146) is not in mixedCase
Parameter '_key' of EternalStorage.getBytes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#151) is not in mixedCase
Parameter '_key' of EternalStorage.getBytes32 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#156) is not in mixedCase
Parameter '_key' of EternalStorage.getBool (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#161) is not in mixedCase
Parameter '_key' of EternalStorage.getInt (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#167-168) is not in mixedCase
Parameter '_key' of EternalStorage.setAddress (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#173) is not in mixedCase
Parameter '_value' of EternalStorage.setAddress (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#173) is not in mixedCase
Parameter '_key' of EternalStorage.setUint (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#178) is not in mixedCase
Parameter '_value' of EternalStorage.setUint (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#178) is not in mixedCase
Parameter '_key' of EternalStorage.setUint8 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#183) is not in mixedCase
Parameter '_value' of EternalStorage.setUint8 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#183) is not in mixedCase
Parameter '_key' of EternalStorage.setString (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#188) is not in mixedCase
Parameter '_value' of EternalStorage.setString (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#188) is not in mixedCase
Parameter '_key' of EternalStorage.setBytes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#193) is not in mixedCase
Parameter '_value' of EternalStorage.setBytes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#193) is not in mixedCase
Parameter '_key' of EternalStorage.setBytes32 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#198) is not in mixedCase
Parameter '_value' of EternalStorage.setBytes32 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#198) is not in mixedCase
Parameter '_key' of EternalStorage.setBool (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#203) is not in mixedCase
Parameter '_value' of EternalStorage.setBool (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#203-204) is not in mixedCase
Parameter '_key' of EternalStorage.setInt (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#210) is not in mixedCase
Parameter '_value' of EternalStorage.setInt (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#210) is not in mixedCase
Parameter '_key' of EternalStorage.deleteAddress (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#216) is not in mixedCase
Parameter '_key' of EternalStorage.deleteUint (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#221) is not in mixedCase
Parameter '_key' of EternalStorage.deleteUint8 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#226) is not in mixedCase
Parameter '_key' of EternalStorage.deleteString (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#231-232) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBytes (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#236-237) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBytes32 (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#242-244) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBool (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#250) is not in mixedCase
Parameter '_key' of EternalStorage.deleteInt (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#253-254) is not in mixedCase
Parameter '_updater' of PaymentHolder.setUpdater (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#640) is not in mixedCase
Parameter '_allowed' of PaymentHolder.migrate (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#644-647) is not in mixedCase
Parameter '_allowed' of PaymentHolder.update (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#663) is not in mixedCase
Parameter '_paymentHolder' of Board.setPaymentHolder (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#898-901) is not in mixedCase
Function 'Board.Board' (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#860-874) is not in mixedCase
Parameter '_paymentHolder' of Board.Board (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#860-861) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
IBoardConfig.decimals (/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol#318) is never used in IBoardConfig
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-state-variables[0m
INFO:Slither:/unique_chucks/13/0x9166b15cba71be78da4127369e564b2d1f1b3008.sol analyzed (16 contracts), 102 result(s) found