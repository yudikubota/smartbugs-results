INFO:Slither:Compilation warnings/errors on /unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:75:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:380:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:792:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:32:1: Warning: Source file does not specify required compiler version!Consider adding "pragma solidity ^0.4.25;"
library SafeMathLib {
^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:467:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, customerId);
    ^----------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:499:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, 0);
    ^-------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:506:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:506:21: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:591:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:603:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:613:5: Warning: Invoking events without "emit" prefix is deprecated.
    Whitelisted(addr, status);
    ^-----------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:631:5: Warning: Invoking events without "emit" prefix is deprecated.
    EndsAtChanged(endsAt);
    ^-------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:682:5: Warning: Invoking events without "emit" prefix is deprecated.
    Refund(msg.sender, weiValue);
    ^--------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:34:3: Warning: No visibility specified. Defaulting to "public". 
  function times(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:40:3: Warning: No visibility specified. Defaulting to "public". 
  function minus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:45:3: Warning: No visibility specified. Defaulting to "public". 
  function plus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:75:3: Warning: No visibility specified. Defaulting to "public". 
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:93:3: Warning: No visibility specified. Defaulting to "public". 
  function transferOwnership(address newOwner) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:161:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isSane(address crowdsale) public constant returns (bool) {
                  ^---------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:170:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isPresalePurchase(address purchaser) public constant returns (bool) {
                             ^---------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:216:3: Warning: No visibility specified. Defaulting to "public". 
  function finalizeCrowdsale();
  ^---------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:238:3: Warning: No visibility specified. Defaulting to "public". 
  function balanceOf(address who) constant returns (uint256);
  ^---------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:239:3: Warning: No visibility specified. Defaulting to "public". 
  function transfer(address to, uint256 value) returns (bool);
  ^----------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:250:3: Warning: No visibility specified. Defaulting to "public". 
  function allowance(address owner, address spender) constant returns (uint256);
  ^----------------------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:251:3: Warning: No visibility specified. Defaulting to "public". 
  function transferFrom(address from, address to, uint256 value) returns (bool);
  ^----------------------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:252:3: Warning: No visibility specified. Defaulting to "public". 
  function approve(address spender, uint256 value) returns (bool);
  ^--------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:380:3: Warning: No visibility specified. Defaulting to "public". 
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:406:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:578:3: Warning: No visibility specified. Defaulting to "public". 
  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:589:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireCustomerId(bool value) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:600:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:611:3: Warning: No visibility specified. Defaulting to "public". 
  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:626:3: Warning: No visibility specified. Defaulting to "public". 
  function setEndsAt(uint time) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:639:3: Warning: No visibility specified. Defaulting to "public". 
  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:725:3: Warning: No visibility specified. Defaulting to "public". 
  function setOwnerTestValue(uint val) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:764:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);
  ^--------------------------------------------------------------------------------------------------------------------------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:792:3: Warning: No visibility specified. Defaulting to "public". 
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:799:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:799:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                         ^------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:799:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                           ^-----------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:799:81: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                                                ^------------------^
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:153:3: Warning: Function state mutability can be restricted to pure
  function isPricingStrategy() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:161:3: Warning: Function state mutability can be restricted to pure
  function isSane(address crowdsale) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:170:3: Warning: Function state mutability can be restricted to pure
  function isPresalePurchase(address purchaser) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:204:3: Warning: Function state mutability can be restricted to pure
  function isFinalizeAgent() public constant returns(bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:34:3: Warning: Function state mutability can be restricted to pure
  function times(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:40:3: Warning: Function state mutability can be restricted to pure
  function minus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:45:3: Warning: Function state mutability can be restricted to pure
  function plus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol:730:3: Warning: Function state mutability can be restricted to pure
  function isCrowdsale() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Reentrancy in Crowdsale.finalize (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#580-591):
	External calls:
	- finalizeAgent.finalizeCrowdsale() (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#590-591)
	State variables written after the call(s):
	- finalized (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#591)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#427-481):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#436-446)
	- getState() == State.Funding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#437-446)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#448-452)
	State variables written after the call(s):
	- tokensSold (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#467-468)
	- weiRaised (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#466-467)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#427-481):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#436-446)
	- getState() == State.Funding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#437-446)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#448-452)
	- pricingStrategy.isPresalePurchase(receiver) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#470-473)
	State variables written after the call(s):
	- presaleWeiRaised (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#473)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Reentrancy in Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#392-417):
	External calls:
	- setPricingStrategy(_pricingStrategy) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#413-414)
	State variables written after the call(s):
	- endsAt (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#416)
	- minimumFundingGoal (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#417)
	- multisigWallet (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#414-416)
	- startsAt (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#416)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#427-481):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#436-446)
	- getState() == State.Funding (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#437-446)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#448-452)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#459-461)
	- investorCount (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#458)
	- tokenAmountOf (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#461-464)
Reentrancy in Crowdsale.preallocate (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#494-515):
	External calls:
	- tokenAmount = fullTokens * 10 ** token.decimals() (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#499-503)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#506-508)
	- tokenAmountOf (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#508-509)
	- tokensSold (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#505-506)
	- weiRaised (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#505)
Reentrancy in Crowdsale.setFinalizeAgent (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#597-602):
	External calls:
	- require(bool)(addr.isFinalizeAgent()) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#601-602)
	State variables written after the call(s):
	- finalizeAgent (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#602)
Reentrancy in Crowdsale.setPricingStrategy (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#656-664):
	External calls:
	- require(bool)(_pricingStrategy.isPricingStrategy()) (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#662-664)
	State variables written after the call(s):
	- pricingStrategy (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#664)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Crowdsale.getState (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#724-755) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= endsAt && ! isCrowdsaleFull() (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#742-755)
	- block.timestamp < startsAt (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#739-755)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE should be constant (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#294-296)
ERC20Basic.totalSupply should be constant (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#245-246)
FractionalERC20.decimals should be constant (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#277)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
SafeMathLib.times (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#34-40) should be declared external
SafeMathLib.minus (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#40-45) should be declared external
SafeMathLib.plus (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#45-54) should be declared external
Ownable.transferOwnership (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#94-105) should be declared external
PricingStrategy.isPricingStrategy (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#159-161) should be declared external
PricingStrategy.isSane (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#167-168) should be declared external
PricingStrategy.isPresalePurchase (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#175-178) should be declared external
PricingStrategy.calculatePrice (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#189-191) should be declared external
FinalizeAgent.isFinalizeAgent (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#210-213) should be declared external
FinalizeAgent.isSane (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#221) should be declared external
FinalizeAgent.finalizeCrowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#223) should be declared external
ERC20Basic.balanceOf (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#247-249) should be declared external
ERC20Basic.transfer (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#249-250) should be declared external
ERC20.allowance (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#253-258) should be declared external
ERC20.transferFrom (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#258-260) should be declared external
ERC20.approve (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#262-269) should be declared external
Crowdsale.fallback (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#420-422) should be declared external
Crowdsale.preallocate (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#494-515) should be declared external
Crowdsale.buyWithSignedAddress (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#552-558) should be declared external
Crowdsale.buyWithCustomerId (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#560-565) should be declared external
Crowdsale.finalize (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#580-591) should be declared external
Crowdsale.setFinalizeAgent (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#597-602) should be declared external
Crowdsale.setRequireCustomerId (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#607-612) should be declared external
Crowdsale.setRequireSignedAddress (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#619-626) should be declared external
Crowdsale.setEarlyParicipantWhitelist (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#631-638) should be declared external
Crowdsale.setEndsAt (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#649-651) should be declared external
Crowdsale.setMultisig (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#675-680) should be declared external
Crowdsale.loadRefund (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#687-690) should be declared external
Crowdsale.refund (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#697-710) should be declared external
Crowdsale.isFinalizerSane (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#716-717) should be declared external
Crowdsale.isPricingSane (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#718-720) should be declared external
Crowdsale.setOwnerTestValue (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#757-758) should be declared external
Crowdsale.isCrowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#758-759) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#81-82) is not in mixedCase
Function 'Crowdsale.Crowdsale' (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#392-417) is not in mixedCase
Parameter '_token' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#394) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#394-396) is not in mixedCase
Parameter '_multisigWallet' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#397-399) is not in mixedCase
Parameter '_start' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#399) is not in mixedCase
Parameter '_end' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#399) is not in mixedCase
Parameter '_minimumFundingGoal' of Crowdsale.Crowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#399-400) is not in mixedCase
Parameter '_signerAddress' of Crowdsale.setRequireSignedAddress (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#619-620) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.setPricingStrategy (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#656-658) is not in mixedCase
Variable 'Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE' (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#294-296) is not in mixedCase
Function 'AllocatedCrowdsale.AllocatedCrowdsale' (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#811-824) is not in mixedCase
Parameter '_beneficiary' of AllocatedCrowdsale.AllocatedCrowdsale (/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol#817-818) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0x20a6df7f5511bff9fd58850b21bbc7d43b4fbbfc.sol analyzed (10 contracts), 56 result(s) found