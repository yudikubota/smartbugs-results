INFO:Slither:Compilation warnings/errors on /unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:31:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function DSAuth() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:274:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function DSTokenBase(uint supply) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:340:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function DSToken(bytes32 symbol_) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:515:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SaiLPC(ERC20 ref_, ERC20 alt_, DSValue pip_, DSToken lps_) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:611:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function LPCReserveWrapper(KyberReserveInterface reserve_, WETH weth_, ERC20 dai_, SaiLPC lpc_) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:33:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogSetOwner(msg.sender);
        ^---------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:41:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogSetOwner(owner);
        ^----------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:49:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogSetAuthority(authority);
        ^------------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:187:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
        ^---------------------------------------------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:304:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(src, dst, wad);
        ^---------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:312:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, guy, wad);
        ^----------------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:367:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(src, dst, wad);
        ^---------------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:391:9: Warning: Invoking events without "emit" prefix is deprecated.
        Mint(guy, wad);
        ^------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:400:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(guy, wad);
        ^------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:430:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return bytes4(keccak256(s));
                      ^----------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:430:23: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        return bytes4(keccak256(s));
                      ^----------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:589:5: Warning: Functions in interfaces should be declared external.
    function() payable;
    ^-----------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:648:13: Warning: Using contract member "transfer" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).transfer" instead.
            reserve.transfer(amount);
            ^--------------^
/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:589:5: Warning: No visibility specified. Defaulting to "public". In interfaces it defaults to external.
    function() payable;
    ^-----------------^

INFO:Detectors:[91m
LPCReserveWrapper.withdrawFromReserve (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#652-666) sends eth to arbitrary user
	Dangerous calls:
	- weth.deposit.value(amount)() (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#661-662)
LPCReserveWrapper.transferToReserve (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#667-675) sends eth to arbitrary user
	Dangerous calls:
	- reserve.transfer(amount) (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#671-672)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[93m
DSMath.mul (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#93-97) uses a dangerous strict equality:
	- require(bool)(y == 0 || (z = x * y) / y == x)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
SaiLPC.pool (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#564-575) does not use the value returned by external calls:
	-gem.transferFrom(msg.sender,this,wad) (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#574-575)
SaiLPC.exit (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#575-590) does not use the value returned by external calls:
	-gem.transfer(msg.sender,wad) (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#589-590)
SaiLPC.take (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#591-603) does not use the value returned by external calls:
	-pay.transferFrom(msg.sender,this,jam) (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#598-601)
	-gem.transfer(msg.sender,wad) (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#601-603)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
DSToken.decimals should be constant (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#348)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
DSAuthority.canCall (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#17-22) should be declared external
DSAuth.setOwner (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#37-44) should be declared external
DSAuth.setAuthority (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#44-53) should be declared external
DSStop.stop (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#229-231) should be declared external
DSStop.start (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#231-232) should be declared external
ERC20.totalSupply (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#245-246) should be declared external
DSTokenBase.totalSupply (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#286-289) should be declared external
ERC20.balanceOf (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#246-248) should be declared external
DSTokenBase.balanceOf (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#289-293) should be declared external
DSTokenBase.allowance (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#293-298) should be declared external
ERC20.allowance (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#248-252) should be declared external
DSTokenBase.transfer (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#298-302) should be declared external
ERC20.transfer (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#254-256) should be declared external
DSToken.approve (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#358-361) should be declared external
DSToken.push (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#384-388) should be declared external
DSToken.pull (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#388-390) should be declared external
DSToken.move (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#390-393) should be declared external
DSToken.mint (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#393-394) should be declared external
DSToken.burn (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#394-395) should be declared external
DSToken.setName (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#417-419) should be declared external
DSValue.read (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#477-479) should be declared external
DSValue.poke (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#479-482) should be declared external
DSValue.void (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#482-483) should be declared external
SaiLPC.jump (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#543-548) should be declared external
SaiLPC.pool (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#564-575) should be declared external
SaiLPC.exit (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#575-590) should be declared external
SaiLPC.take (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#591-603) should be declared external
KyberReserveInterface.fallback (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#604) should be declared external
LPCReserveWrapper.switchLPC (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#641-645) should be declared external
LPCReserveWrapper.switchReserve (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#646-650) should be declared external
LPCReserveWrapper.fallback (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#650-652) should be declared external
LPCReserveWrapper.approveToken (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#675-677) should be declared external
LPCReserveWrapper.take (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#683-694) should be declared external
LPCReserveWrapper.withdraw (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol:
	- pragma solidity^0.4.21 (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'DSAuth.DSAuth' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#32-36) is not in mixedCase
Function 'DSTokenBase.DSTokenBase' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#283-286) is not in mixedCase
Variable 'DSTokenBase._supply' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#275-279) is not in mixedCase
Variable 'DSTokenBase._balances' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#279-281) is not in mixedCase
Variable 'DSTokenBase._approvals' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#282) is not in mixedCase
Function 'DSToken.DSToken' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#351-354) is not in mixedCase
Function 'DSThing.S' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#442-445) is not in mixedCase
Function 'SaiLPC.SaiLPC' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#536-543) is not in mixedCase
Function 'LPCReserveWrapper.LPCReserveWrapper' (/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol#630-640) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/9/0xd596fb9b95cf9cd39bdfa9d5cf9e1abe6f5db393.sol analyzed (17 contracts), 51 result(s) found