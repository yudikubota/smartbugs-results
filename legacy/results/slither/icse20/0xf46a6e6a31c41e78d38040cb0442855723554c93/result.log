INFO:Slither:Compilation warnings/errors on /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:47:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:87:17: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (halted) throw;
                ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:92:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (halted && msg.sender != owner) throw;
                                       ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:97:18: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (!halted) throw;
                 ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:378:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:388:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:392:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:398:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:405:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:416:5: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    throw;
    ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:436:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:443:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:477:41: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(!multisigWallet.send(weiAmount)) throw;
                                        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:494:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:515:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:532:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw; // Don't change past
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:536:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw; // Prevent human mistakes
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:553:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:568:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:580:24: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(msg.value == 0) throw;
                       ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:592:24: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (weiValue == 0) throw;
                       ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:596:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (!msg.sender.send(weiValue)) throw;
                                    ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:664:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(getState() != state) throw;
                            ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:721:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function AllocatedCrowdsaleMixin(address _beneficiary) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:756:65: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(!token.transferFrom(beneficiary, receiver, tokenAmount)) throw;
                                                                ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:805:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:845:53: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
     if (ecrecover(hash, v, r, s) != signerAddress) throw;
                                                    ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:846:26: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
     if(customerId == 0) throw;  // UUIDv4 sanity check
                         ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:854:31: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants
                              ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:855:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(customerId == 0) throw;  // UUIDv4 sanity check
                        ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:863:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(requireCustomerId) throw; // Crowdsale needs to track participants for thank you email
                          ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:864:31: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants
                              ^---^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:926:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) AllocatedCrowdsaleMixin(_beneficiary) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:36:1: Warning: Source file does not specify required compiler version!Consider adding "pragma solidity ^0.4.25;"
contract Ownable {
^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:67:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:480:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, customerId);
    ^----------------------------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:540:5: Warning: Invoking events without "emit" prefix is deprecated.
    EndsAtChanged(endsAt);
    ^-------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:595:5: Warning: Invoking events without "emit" prefix is deprecated.
    Refund(msg.sender, weiValue);
    ^--------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:649:5: Warning: Invoking events without "emit" prefix is deprecated.
    Whitelisted(addr, status);
    ^-----------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:837:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, 0);
    ^-------------------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:844:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:844:21: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:899:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:911:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:47:3: Warning: No visibility specified. Defaulting to "public". 
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:132:3: Warning: No visibility specified. Defaulting to "public". 
  function times(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:138:3: Warning: No visibility specified. Defaulting to "public". 
  function minus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:143:3: Warning: No visibility specified. Defaulting to "public". 
  function plus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:218:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isSane(address crowdsale) public constant returns (bool) {
                  ^---------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:227:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isPresalePurchase(address purchaser) public constant returns (bool) {
                             ^---------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:273:3: Warning: No visibility specified. Defaulting to "public". 
  function finalizeCrowdsale();
  ^---------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:378:3: Warning: No visibility specified. Defaulting to "public". 
  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:415:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:510:3: Warning: No visibility specified. Defaulting to "public". 
  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:529:3: Warning: No visibility specified. Defaulting to "public". 
  function setEndsAt(uint time) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:548:3: Warning: No visibility specified. Defaulting to "public". 
  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:638:3: Warning: No visibility specified. Defaulting to "public". 
  function setOwnerTestValue(uint val) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:647:3: Warning: No visibility specified. Defaulting to "public". 
  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:688:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);
  ^--------------------------------------------------------------------------------------------------------------------------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:721:3: Warning: No visibility specified. Defaulting to "public". 
  function AllocatedCrowdsaleMixin(address _beneficiary) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:728:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:728:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                         ^------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:728:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                           ^-----------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:728:81: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                                                ^------------------^
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:805:3: Warning: No visibility specified. Defaulting to "public". 
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:897:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireCustomerId(bool value) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:908:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:926:3: Warning: No visibility specified. Defaulting to "public". 
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) AllocatedCrowdsaleMixin(_beneficiary) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:132:3: Warning: Function state mutability can be restricted to pure
  function times(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:138:3: Warning: Function state mutability can be restricted to pure
  function minus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:143:3: Warning: Function state mutability can be restricted to pure
  function plus(uint a, uint b) returns (uint) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:210:3: Warning: Function state mutability can be restricted to pure
  function isPricingStrategy() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:218:3: Warning: Function state mutability can be restricted to pure
  function isSane(address crowdsale) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:227:3: Warning: Function state mutability can be restricted to pure
  function isPresalePurchase(address purchaser) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:261:3: Warning: Function state mutability can be restricted to pure
  function isFinalizeAgent() public constant returns(bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol:654:3: Warning: Function state mutability can be restricted to pure
  function isCrowdsale() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Reentrancy in CrowdsaleBase.finalize (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#509-523):
	External calls:
	- finalizeAgent.finalizeCrowdsale() (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#522)
	State variables written after the call(s):
	- finalized (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#522-523)
Reentrancy in CrowdsaleBase.investInternal (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#439-500):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#448-460)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#461-467)
	State variables written after the call(s):
	- tokensSold (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#477-479)
	- weiRaised (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#476-477)
Reentrancy in CrowdsaleBase.investInternal (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#439-500):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#448-460)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#461-467)
	- pricingStrategy.isPresalePurchase(receiver) (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#479-486)
	State variables written after the call(s):
	- presaleWeiRaised (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#480-486)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Reentrancy in CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#392-426):
	External calls:
	- setPricingStrategy(_pricingStrategy) (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#409)
	State variables written after the call(s):
	- endsAt (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#423)
	- minimumFundingGoal (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#426)
	- multisigWallet (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#411-413)
	- startsAt (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#421-422)
Reentrancy in CrowdsaleBase.investInternal (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#439-500):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#448-460)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#461-467)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#472-474)
	- investorCount (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#471)
	- tokenAmountOf (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#474-476)
Reentrancy in Crowdsale.preallocate (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#844-862):
	External calls:
	- tokenAmount = fullTokens * 10 ** token.decimals() (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#846-847)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#853-854)
	- tokenAmountOf (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#854-855)
	- tokensSold (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#853)
	- weiRaised (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#851-853)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
CrowdsaleBase.getState (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#634-663) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= endsAt && ! isCrowdsaleFull() (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#648-662)
	- block.timestamp < startsAt (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#647-662)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
CrowdsaleBase.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE should be constant (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#302-304)
ERC20Basic.totalSupply should be constant (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#171)
FractionalERC20.decimals should be constant (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#200)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#92:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#101:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#102:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#415:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#420:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#423:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#425:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#430:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#449:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#459:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#497:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#514:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#537-539:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#555-557:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#558:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#575:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#590:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#600:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#614:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#621:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#684:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#793:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#869:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#869:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#880:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#885:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#894:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#897:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#66-77) should be declared external
SafeMathLib.times (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#138-143) should be declared external
SafeMathLib.minus (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#143-152) should be declared external
SafeMathLib.plus (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#152-154) should be declared external
ERC20Basic.balanceOf (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#171-177) should be declared external
ERC20Basic.transfer (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#177-179) should be declared external
ERC20.allowance (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#183-184) should be declared external
ERC20.transferFrom (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#184-189) should be declared external
ERC20.approve (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#189-191) should be declared external
PricingStrategy.isPricingStrategy (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#217-219) should be declared external
PricingStrategy.isSane (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#225-227) should be declared external
PricingStrategy.isPresalePurchase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#235-236) should be declared external
PricingStrategy.calculatePrice (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#246-251) should be declared external
FinalizeAgent.isFinalizeAgent (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#268-272) should be declared external
FinalizeAgent.isSane (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#282-283) should be declared external
FinalizeAgent.finalizeCrowdsale (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#286-288) should be declared external
CrowdsaleBase.fallback (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#430) should be declared external
CrowdsaleBase.finalize (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#509-523) should be declared external
CrowdsaleBase.setFinalizeAgent (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#529-539) should be declared external
CrowdsaleBase.setEndsAt (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#551-560) should be declared external
CrowdsaleBase.setMultisig (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#585-591) should be declared external
CrowdsaleBase.loadRefund (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#596-602) should be declared external
CrowdsaleBase.refund (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#609-621) should be declared external
CrowdsaleBase.isFinalizerSane (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#627-629) should be declared external
CrowdsaleBase.isPricingSane (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#630-631) should be declared external
CrowdsaleBase.setOwnerTestValue (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#665-674) should be declared external
CrowdsaleBase.setEarlyParicipantWhitelist (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#678-681) should be declared external
CrowdsaleBase.isCrowdsale (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#681-682) should be declared external
Crowdsale.preallocate (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#844-862) should be declared external
Crowdsale.buyWithSignedAddress (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#903-908) should be declared external
Crowdsale.buyWithCustomerId (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#909-911) should be declared external
Crowdsale.buy (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#924-926) should be declared external
Crowdsale.setRequireCustomerId (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#926) should be declared external
Crowdsale.setRequireSignedAddress (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#49-53) is not in mixedCase
Function 'CrowdsaleBase.CrowdsaleBase' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#392-426) is not in mixedCase
Parameter '_token' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#395-396) is not in mixedCase
Parameter '_pricingStrategy' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#397-398) is not in mixedCase
Parameter '_multisigWallet' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#399-401) is not in mixedCase
Parameter '_start' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#401-403) is not in mixedCase
Parameter '_end' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#403) is not in mixedCase
Parameter '_minimumFundingGoal' of CrowdsaleBase.CrowdsaleBase (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#403-404) is not in mixedCase
Parameter '_pricingStrategy' of CrowdsaleBase.setPricingStrategy (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#564-565) is not in mixedCase
Variable 'CrowdsaleBase.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#302-304) is not in mixedCase
Function 'AllocatedCrowdsaleMixin.AllocatedCrowdsaleMixin' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#746-751) is not in mixedCase
Parameter '_beneficiary' of AllocatedCrowdsaleMixin.AllocatedCrowdsaleMixin (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#747) is not in mixedCase
Function 'Crowdsale.Crowdsale' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol#820-826) is not in mixedCase
Parameter '_signerAddress' of Crowdsale.setRequireSignedAddress (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol) is not in mixedCase
Function 'AllocatedCrowdsale.AllocatedCrowdsale' (/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0xf46a6e6a31c41e78d38040cb0442855723554c93.sol analyzed (12 contracts), 85 result(s) found