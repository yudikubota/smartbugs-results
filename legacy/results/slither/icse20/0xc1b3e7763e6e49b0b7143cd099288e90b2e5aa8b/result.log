INFO:Slither:Compilation warnings/errors on /unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:59:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:196:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:693:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) 
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:79:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:301:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, customerId);
    ^----------------------------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:334:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount, 0);
    ^-------------------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:341:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:341:21: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
     bytes32 hash = sha256(addr);
                    ^----------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:436:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:448:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);
    ^------------------------------------------------------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:456:5: Warning: Invoking events without "emit" prefix is deprecated.
    Whitelisted(addr, status);
    ^-----------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:475:5: Warning: Invoking events without "emit" prefix is deprecated.
    EndsAtChanged(endsAt);
    ^-------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:532:5: Warning: Invoking events without "emit" prefix is deprecated.
    Refund(msg.sender, weiValue);
    ^--------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:196:3: Warning: No visibility specified. Defaulting to "public". 
  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:230:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:421:3: Warning: No visibility specified. Defaulting to "public". 
  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:434:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireCustomerId(bool value) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:445:3: Warning: No visibility specified. Defaulting to "public". 
  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:454:3: Warning: No visibility specified. Defaulting to "public". 
  function setEarlyParticipantWhitelist(address addr, bool status) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:469:3: Warning: No visibility specified. Defaulting to "public". 
  function setEndsAt(uint time) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:483:3: Warning: No visibility specified. Defaulting to "public". 
  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:585:3: Warning: No visibility specified. Defaulting to "public". 
  function setOwnerTestValue(uint val) onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:625:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);
  ^--------------------------------------------------------------------------------------------------------------------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:652:19: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isSane(address crowdsale) public constant returns (bool) {
                  ^---------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:661:30: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isPresalePurchase(address purchaser) public constant returns (bool) {
                             ^---------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:693:3: Warning: No visibility specified. Defaulting to "public". 
  function AllocatedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) 
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:701:3: Warning: No visibility specified. Defaulting to "public". 
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:701:26: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                         ^------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:701:60: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                           ^-----------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:701:81: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {
                                                                                ^------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:756:3: Warning: No visibility specified. Defaulting to "public". 
  function finalizeCrowdsale();
  ^---------------------------^
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:590:3: Warning: Function state mutability can be restricted to pure
  function isCrowdsale() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:644:3: Warning: Function state mutability can be restricted to pure
  function isPricingStrategy() public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:652:3: Warning: Function state mutability can be restricted to pure
  function isSane(address crowdsale) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:661:3: Warning: Function state mutability can be restricted to pure
  function isPresalePurchase(address purchaser) public constant returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:744:3: Warning: Function state mutability can be restricted to pure
  function isFinalizeAgent() public constant returns(bool) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Reentrancy in Crowdsale.finalize (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#419-431):
	External calls:
	- finalizeAgent.finalizeCrowdsale() (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#427-431)
	State variables written after the call(s):
	- finalized (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#431)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#248-312):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#253-263)
	- getState() == State.Funding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#262-263)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#271-276)
	State variables written after the call(s):
	- tokensSold (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#291-294)
	- weiRaised (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#290)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#248-312):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#253-263)
	- getState() == State.Funding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#262-263)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#271-276)
	- pricingStrategy.isPresalePurchase(receiver) (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#294-300)
	State variables written after the call(s):
	- presaleWeiRaised (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#297-300)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Reentrancy in Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#200-240):
	External calls:
	- setPricingStrategy(_pricingStrategy) (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#213-216)
	State variables written after the call(s):
	- endsAt (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#231-234)
	- minimumFundingGoal (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#239-240)
	- multisigWallet (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#217-221)
	- startsAt (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#227)
Reentrancy in Crowdsale.investInternal (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#248-312):
	External calls:
	- getState() == State.PreFunding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#253-263)
	- getState() == State.Funding (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#262-263)
	- tokenAmount = pricingStrategy.calculatePrice(weiAmount,weiRaised - presaleWeiRaised,tokensSold,msg.sender,token.decimals()) (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#271-276)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#285-286)
	- investorCount (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#283)
	- tokenAmountOf (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#286-289)
Reentrancy in Crowdsale.preallocate (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#326-345):
	External calls:
	- tokenAmount = fullTokens * 10 ** token.decimals() (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#329)
	State variables written after the call(s):
	- investedAmountOf (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#338-340)
	- tokenAmountOf (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#340-341)
	- tokensSold (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#337-338)
	- weiRaised (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#334)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Crowdsale.getState (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#578-614) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= endsAt && ! isCrowdsaleFull() (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#595-614)
	- block.timestamp < startsAt (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#590-614)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE should be constant (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#103-106)
ERC20Basic.totalSupply should be constant (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#15-16)
FractionalERC20.decimals should be constant (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#44-45)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
ERC20Basic.balanceOf (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#16-17) should be declared external
ERC20Basic.transfer (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#17-18) should be declared external
ERC20.allowance (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#27-28) should be declared external
ERC20.transferFrom (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#28-29) should be declared external
ERC20.approve (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#29-30) should be declared external
Ownable.transferOwnership (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#78-89) should be declared external
Crowdsale.fallback (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#240-241) should be declared external
Crowdsale.preallocate (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#326-345) should be declared external
Crowdsale.buyWithSignedAddress (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#388-393) should be declared external
Crowdsale.buyWithCustomerId (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#398-401) should be declared external
Crowdsale.finalize (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#419-431) should be declared external
Crowdsale.setFinalizeAgent (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#436-444) should be declared external
Crowdsale.setRequireCustomerId (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#446-452) should be declared external
Crowdsale.setRequireSignedAddress (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#456-465) should be declared external
Crowdsale.setEarlyParticipantWhitelist (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#466-475) should be declared external
Crowdsale.setEndsAt (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#487-495) should be declared external
Crowdsale.setMultisig (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#517-524) should be declared external
Crowdsale.loadRefund (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#531-538) should be declared external
Crowdsale.refund (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#541-555) should be declared external
Crowdsale.isFinalizerSane (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#565-568) should be declared external
Crowdsale.isPricingSane (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#570-572) should be declared external
Crowdsale.setOwnerTestValue (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#615-616) should be declared external
Crowdsale.isCrowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#618) should be declared external
PricingStrategy.isPricingStrategy (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#666-669) should be declared external
PricingStrategy.isSane (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#671-672) should be declared external
PricingStrategy.isPresalePurchase (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#676) should be declared external
PricingStrategy.calculatePrice (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#693-695) should be declared external
FinalizeAgent.isFinalizeAgent (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#776-777) should be declared external
FinalizeAgent.isSane (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#783-784) should be declared external
FinalizeAgent.finalizeCrowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#788-789) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol:
	- pragma solidity^0.4.15 (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#7-10): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#64-65) is not in mixedCase
Function 'Crowdsale.Crowdsale' (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#200-240) is not in mixedCase
Parameter '_token' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#202) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#202-204) is not in mixedCase
Parameter '_multisigWallet' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#204) is not in mixedCase
Parameter '_start' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#204-205) is not in mixedCase
Parameter '_end' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#205) is not in mixedCase
Parameter '_minimumFundingGoal' of Crowdsale.Crowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#205-206) is not in mixedCase
Parameter '_signerAddress' of Crowdsale.setRequireSignedAddress (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#460) is not in mixedCase
Parameter '_pricingStrategy' of Crowdsale.setPricingStrategy (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#497) is not in mixedCase
Variable 'Crowdsale.MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE' (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#103-106) is not in mixedCase
Function 'AllocatedCrowdsale.AllocatedCrowdsale' (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#710-720) is not in mixedCase
Parameter '_beneficiary' of AllocatedCrowdsale.AllocatedCrowdsale (/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol#717) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0xc1b3e7763e6e49b0b7143cd099288e90b2e5aa8b.sol analyzed (9 contracts), 52 result(s) found