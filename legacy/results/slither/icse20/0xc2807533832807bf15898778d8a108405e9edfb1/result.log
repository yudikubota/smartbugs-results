INFO:Slither:Compilation warnings/errors on /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:164:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function PonziToken() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:262:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, to, value);
    ^-----------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:285:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(from, to, value);
    ^-----------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:308:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, spender, value);
    ^----------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:344:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, spender, m_allowed[msg.sender][spender]);
    ^-----------------------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:371:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, spender, m_allowed[msg.sender][spender]);
    ^-----------------------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:395:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, to, value);
    ^-----------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:398:7: Warning: Invoking events without "emit" prefix is deprecated.
      Transfer(msg.sender, to, value, extraData);
      ^----------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:502:22: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
    m_owner.transfer(this.balance.sub(m_myDebtInWei).mul(uint256(5)).div(uint256(100)));
                     ^----------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:505:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
    m_bank.transfer(this.balance.sub(m_myDebtInWei));
                    ^----------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:507:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(address(this), msg.sender, tokensAmount);
    ^-----------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:508:5: Warning: Invoking events without "emit" prefix is deprecated.
    TokensSold(tokensAmount, msg.sender, m_tokenPriceInWei); 
    ^-----------------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:523:5: Warning: Invoking events without "emit" prefix is deprecated.
    Withdrawal(msg.sender, amount);
    ^----------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:620:9: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    if (keccak256(newState) == keccak256(PRE_SALE_STR)) {
        ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:620:9: Warning: The provided argument of type string calldata is not implicitly convertible to expected type bytes memory.
    if (keccak256(newState) == keccak256(PRE_SALE_STR)) {
        ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:620:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    if (keccak256(newState) == keccak256(PRE_SALE_STR)) {
                               ^---------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:620:32: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
    if (keccak256(newState) == keccak256(PRE_SALE_STR)) {
                               ^---------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:622:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    } else if (keccak256(newState) == keccak256(SALE_STR)) {
               ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:622:16: Warning: The provided argument of type string calldata is not implicitly convertible to expected type bytes memory.
    } else if (keccak256(newState) == keccak256(SALE_STR)) {
               ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:622:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    } else if (keccak256(newState) == keccak256(SALE_STR)) {
                                      ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:622:39: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
    } else if (keccak256(newState) == keccak256(SALE_STR)) {
                                      ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:627:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    } else if (keccak256(newState) == keccak256(PUBLIC_USE_STR)) {
               ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:627:16: Warning: The provided argument of type string calldata is not implicitly convertible to expected type bytes memory.
    } else if (keccak256(newState) == keccak256(PUBLIC_USE_STR)) {
               ^-----------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:627:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    } else if (keccak256(newState) == keccak256(PUBLIC_USE_STR)) {
                                      ^-----------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:627:39: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
    } else if (keccak256(newState) == keccak256(PUBLIC_USE_STR)) {
                                      ^-----------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:633:5: Warning: Invoking events without "emit" prefix is deprecated.
    StateChanged(msg.sender, m_state);
    ^-------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:650:5: Warning: Invoking events without "emit" prefix is deprecated.
    PriceChanged(msg.sender, m_tokenPriceInWei, m_isFixedTokenPrice);
    ^--------------------------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:664:5: Warning: Invoking events without "emit" prefix is deprecated.
    PriceChanged(msg.sender, m_tokenPriceInWei, m_isFixedTokenPrice);
    ^--------------------------------------------------------------^
/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:798:12: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
    assert(this.balance >= m_myDebtInWei);
           ^----------^

INFO:Detectors:[93m
PonziToken.isContract (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#450-452) is declared view but contains assembly code
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#constant-functions-changing-the-state[0m
INFO:Detectors:[93m
PonziToken.calcTokenPriceInWei (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#754-771) uses a dangerous strict equality:
	- m_firstEntranceToSaleStateUNIX == 0
PonziToken.calcTokenPriceInWei (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#754-771) uses a dangerous strict equality:
	- m_firstEntranceToSaleStateUNIX == 0
PonziToken.checkAccess (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#145-159) uses a dangerous strict equality:
	- require(bool)(m_firstEntranceToSaleStateUNIX == 0 || now.sub(m_firstEntranceToSaleStateUNIX) <= DURATION_TO_ACCESS_FOR_OWNER || m_state != State.PublicUse)
	- require(bool)(m_firstEntranceToSaleStateUNIX == 0 || now.sub(m_firstEntranceToSaleStateUNIX) <= DURATION_TO_ACCESS_FOR_OWNER || m_state != State.PublicUse)
PonziToken.calcTokenPriceInWei (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#754-771) uses a dangerous strict equality:
	- m_firstEntranceToSaleStateUNIX == 0
PonziToken.checkAccess (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#145-159) uses a dangerous strict equality:
	- require(bool)(m_firstEntranceToSaleStateUNIX == 0 || now.sub(m_firstEntranceToSaleStateUNIX) <= DURATION_TO_ACCESS_FOR_OWNER || m_state != State.PublicUse)
	- require(bool)(m_firstEntranceToSaleStateUNIX == 0 || now.sub(m_firstEntranceToSaleStateUNIX) <= DURATION_TO_ACCESS_FOR_OWNER || m_state != State.PublicUse)
PonziToken.setState (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#637-656) uses a dangerous strict equality:
	- m_firstEntranceToSaleStateUNIX == 0
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
PonziToken.contractFallback (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#438-446) does not use the value returned by external calls:
	-recipient.tokenFallback(msg.sender,value,data) (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#446)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
PonziToken.atState.state (local variable @ /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#136-138) shadows:
	- PonziToken.state (function @ /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#574-587)
PonziToken.onlyOwnerOrAtState.state (local variable @ /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#144) shadows:
	- PonziToken.state (function @ /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#574-587)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
PonziToken.isContract uses assembly (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#450-452)
	- /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#451
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#assembly-usage[0m
INFO:Detectors:[92m
ERC20.name (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#43-44) should be declared external
PonziToken.name (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#225-230) should be declared external
PonziToken.symbol (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#231-234) should be declared external
ERC20.symbol (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#44-45) should be declared external
PonziToken.totalSupply (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#250-253) should be declared external
ERC20.totalSupply (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#45-46) should be declared external
PonziToken.balanceOf (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#216-222) should be declared external
ERC20.balanceOf (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#46-47) should be declared external
PonziToken.transfer (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#259-270) should be declared external
ERC20.transfer (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#47-48) should be declared external
PonziToken.transferFrom (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#281-295) should be declared external
ERC20.transferFrom (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#48-49) should be declared external
PonziToken.approve (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#302-317) should be declared external
ERC20.approve (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#49-50) should be declared external
ERC20.allowance (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#50-51) should be declared external
PonziToken.allowance (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#329-333) should be declared external
ERC677Recipient.tokenFallback (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#67-72) should be declared external
PonziToken.initContract (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#186-205) should be declared external
PonziToken.decimals (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#242-247) should be declared external
PonziToken.increaseApproval (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#346-355) should be declared external
PonziToken.decreaseApproval (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#369-385) should be declared external
PonziToken.fallback (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#551-553) should be declared external
PonziToken.tokenPriceInWei (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#593-596) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol:
	- pragma solidity^0.4.18 (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'PonziToken.PonziToken' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#170-177) is not in mixedCase
Variable 'PonziToken.m_state' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#100) is not in mixedCase
Variable 'PonziToken.m_maxTokensPerAddress' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#102-103) is not in mixedCase
Variable 'PonziToken.m_firstEntranceToSaleStateUNIX' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#103-105) is not in mixedCase
Variable 'PonziToken.m_owner' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#105-106) is not in mixedCase
Variable 'PonziToken.m_priceSetter' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#106-107) is not in mixedCase
Variable 'PonziToken.m_bank' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#107) is not in mixedCase
Variable 'PonziToken.m_tokenPriceInWei' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#108-109) is not in mixedCase
Variable 'PonziToken.m_totalSupply' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#109-110) is not in mixedCase
Variable 'PonziToken.m_myDebtInWei' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#110-111) is not in mixedCase
Variable 'PonziToken.m_name' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#111-113) is not in mixedCase
Variable 'PonziToken.m_symbol' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#113) is not in mixedCase
Variable 'PonziToken.m_decimals' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#113) is not in mixedCase
Variable 'PonziToken.m_isFixedTokenPrice' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#114) is not in mixedCase
Variable 'PonziToken.m_allowed' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#114-116) is not in mixedCase
Variable 'PonziToken.m_balances' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#117-120) is not in mixedCase
Variable 'PonziToken.m_pendingWithdrawals' (/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol#120-121) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/2/0xc2807533832807bf15898778d8a108405e9edfb1.sol analyzed (5 contracts), 49 result(s) found