INFO:Slither:Compilation warnings/errors on /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:20:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:145:30: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      if(!istransferAllowed) throw;
                             ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:157:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SMTToken(uint256 _fundingStartBlock, uint256 _fundingEndBlock){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:178:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if(!ownership[msg.sender]) throw;
                               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:195:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!istransferAllowed) throw;
                               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:208:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!ownership[msg.sender]) throw;
                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:222:32: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!istransferAllowed) throw;
                               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:230:30: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      if(!istransferAllowed) throw;
                             ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:235:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!ownership[msg.sender]) throw;
                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:240:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!ownership[msg.sender]) throw;
                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:248:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!ownership[msg.sender]) throw;
                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:256:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!ownership[msg.sender]) throw;
                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:274:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:314:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:443:9: Warning: Use of the "var" keyword is deprecated.
        var ibit = uint8(txBytes[pos]);
        ^------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:498:13: Warning: Use of the "var" keyword is deprecated.
            var pkhash = parseOutputScript(txBytes, script_starts[i], output_script_lens[i]);
            ^--------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:516:14: Warning: Use of the "var" keyword is deprecated.
        var (output_values, script_starts, output_script_lens,) = scanOutputs(txBytes, pos, 0);
             ^-----------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:516:29: Warning: Use of the "var" keyword is deprecated.
        var (output_values, script_starts, output_script_lens,) = scanOutputs(txBytes, pos, 0);
                            ^-----------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:516:44: Warning: Use of the "var" keyword is deprecated.
        var (output_values, script_starts, output_script_lens,) = scanOutputs(txBytes, pos, 0);
                                           ^----------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:520:13: Warning: Use of the "var" keyword is deprecated.
            var pkhash = parseOutputScript(txBytes, script_starts[i], output_script_lens[i]);
            ^--------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:548:14: Warning: Use of the "var" keyword is deprecated.
        for (var i = 0; i < halt; i++) {
             ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:581:14: Warning: Use of the "var" keyword is deprecated.
        for (var i = 0; i < halt; i++) {
             ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:683:23: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if(contribution==0) throw;
		                    ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:713:23: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if(contribution==0) throw;
		                    ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:792:4: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
   function PreICO(address tokenAddress){
   ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:820:54: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(token.getState()==ICOSaleState.PublicICO) throw;
                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:823:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(isfinalized) throw;
                        ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:824:22: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(!isValid) throw;
                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:825:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.value == 0) throw;
                            ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:829:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if((msg.value) < 1*10**18) throw;
        	                           ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:841:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        		if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        		                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:844:41: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	 if(!ownerAddr.send(msg.value))throw;
        	                               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:849:65: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    			if(initialSupplyPrivateSale>tokenCreationMaxPrivateSale) throw;
    			                                                         ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:852:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            	if(!ownerAddr.send(msg.value))throw;
            	                              ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:857:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(msg.value < 5*10**17) throw;
        	                         ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:861:63: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        	                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:864:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(!ownerAddr.send(msg.value))throw;
        	                              ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:874:18: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	  if (val == 0) throw;
	                ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:875:49: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	  if(token.getState()==ICOSaleState.PublicICO) throw;
	                                               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:876:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	  if(transactionsClaimed[txnHash]) throw;
	                                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:878:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	  if(isfinalized) throw;
	                  ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:880:17: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
	  if(!isValid) throw;
	               ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:883:29: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(val < 1*10**18) throw;
        	                   ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:895:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        		if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        		                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:902:65: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    			if(initialSupplyPrivateSale>tokenCreationMaxPrivateSale) throw;
    			                                                         ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:909:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(msg.value < 5*10**17) throw;
        	                         ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:913:63: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        	                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:926:16: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if(!isValid) throw;
		             ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:930:9: Warning: Use of the "var" keyword is deprecated.
			var (a,b) = BTC.checkValueSent(txn,btcaddr,valueToBeSent);
			     ^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:930:11: Warning: Use of the "var" keyword is deprecated.
			var (a,b) = BTC.checkValueSent(txn,btcaddr,valueToBeSent);
			       ^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:937:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(b < 45*10**5) throw;
        	                 ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:949:64: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        		if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        		                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:956:65: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    			if(initialSupplyPrivateSale>tokenCreationMaxPrivateSale) throw;
    			                                                         ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:963:36: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(msg.value < 225*10**4) throw;
        	                          ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:967:63: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        	if(initialSupplyPublicPreICO>tokenCreationMaxPreICO) throw;
        	                                                     ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:976:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		    throw;
		    ^---^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:40:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:149:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);
        ^-------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:180:5: Warning: Invoking events without "emit" prefix is deprecated.
    stateChange(salestate);
    ^--------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:200:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);
        ^--------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:225:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);
        ^------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:324:5: Warning: Invoking events without "emit" prefix is deprecated.
    Pause();
    ^-----^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:332:5: Warning: Invoking events without "emit" prefix is deprecated.
    Unpause();
    ^-------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:548:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.
        for (var i = 0; i < halt; i++) {
             ^-------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:581:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.
        for (var i = 0; i < halt; i++) {
             ^-------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:684:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		if(keccak256("ethereum")==keccak256(types)){
		                          ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:684:29: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
		if(keccak256("ethereum")==keccak256(types)){
		                          ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:692:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
			}else if(keccak256("bitcoin")==keccak256(types)){
			                               ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:692:35: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
			}else if(keccak256("bitcoin")==keccak256(types)){
			                               ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:714:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		if(keccak256("ethereum")==keccak256(types)){
		                          ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:714:29: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
		if(keccak256("ethereum")==keccak256(types)){
		                          ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:724:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
			}else if(keccak256("bitcoin")==keccak256(types)){
			                               ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:724:35: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
			}else if(keccak256("bitcoin")==keccak256(types)){
			                               ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:811:6: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		if(keccak256(types)==keccak256("ethereum")) CreatedTokens = SafeMath.mul(contribution,tokensPerEther);
		   ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:811:6: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
		if(keccak256(types)==keccak256("ethereum")) CreatedTokens = SafeMath.mul(contribution,tokensPerEther);
		   ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:812:11: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
		else if(keccak256(types)==keccak256("bitcoin"))  CreatedTokens = SafeMath.mul(contribution,tokensPerBTC);
		        ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:812:11: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
		else if(keccak256(types)==keccak256("bitcoin"))  CreatedTokens = SafeMath.mul(contribution,tokensPerBTC);
		        ^--------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:20:3: Warning: No visibility specified. Defaulting to "public". 
  function Ownable() {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:86:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint256 balance);
    ^--------------------------------------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:87:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success);
    ^--------------------------------------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:88:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    ^---------------------------------------------------------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:89:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) returns (bool success);
    ^------------------------------------------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:90:5: Warning: No visibility specified. Defaulting to "public". 
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    ^----------------------------------------------------------------------------------------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:144:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:157:5: Warning: No visibility specified. Defaulting to "public". 
    function SMTToken(uint256 _fundingStartBlock, uint256 _fundingEndBlock){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:177:5: Warning: No visibility specified. Defaulting to "public". 
    function setState(ICOSaleState state)  returns (bool){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:187:5: Warning: No visibility specified. Defaulting to "public". 
    function getState() returns (ICOSaleState) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:194:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:207:5: Warning: No visibility specified. Defaulting to "public". 
    function addToBalances(address _person,uint256 value) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:213:5: Warning: No visibility specified. Defaulting to "public". 
    function addToOwnership(address owners) onlyOwner{
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:217:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint256 balance) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:221:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:229:5: Warning: No visibility specified. Defaulting to "public". 
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:234:5: Warning: No visibility specified. Defaulting to "public". 
    function increaseEthRaised(uint256 value){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:239:5: Warning: No visibility specified. Defaulting to "public". 
    function increaseBTCRaised(uint256 value){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:247:5: Warning: No visibility specified. Defaulting to "public". 
    function finalizePreICO(uint256 value) returns(bool){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:255:5: Warning: No visibility specified. Defaulting to "public". 
    function finalizePublicICO() returns(bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:263:5: Warning: No visibility specified. Defaulting to "public". 
    function isValid() returns(bool){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:273:5: Warning: No visibility specified. Defaulting to "public". 
    function() payable{
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:441:5: Warning: No visibility specified. Defaulting to "public". 
    function parseVarInt(bytes txBytes, uint pos) returns (uint, uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:457:5: Warning: No visibility specified. Defaulting to "public". 
    function getBytesLE(bytes data, uint pos, uint bits) returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:481:5: Warning: No visibility specified. Defaulting to "public". 
    function getFirstTwoOutputs(bytes txBytes)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:509:5: Warning: No visibility specified. Defaulting to "public". 
    function checkValueSent(bytes txBytes, bytes20 btcAddress, uint value)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:531:5: Warning: No visibility specified. Defaulting to "public". 
    function scanInputs(bytes txBytes, uint pos, uint stop)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:562:5: Warning: No visibility specified. Defaulting to "public". 
    function scanOutputs(bytes txBytes, uint pos, uint stop)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:594:5: Warning: No visibility specified. Defaulting to "public". 
    function sliceBytes20(bytes data, uint start) returns (bytes20) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:603:5: Warning: No visibility specified. Defaulting to "public". 
    function isP2PKH(bytes txBytes, uint pos, uint script_len) returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:613:5: Warning: No visibility specified. Defaulting to "public". 
    function isP2SH(bytes txBytes, uint pos, uint script_len) returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:622:5: Warning: No visibility specified. Defaulting to "public". 
    function parseOutputScript(bytes txBytes, uint pos, uint script_len)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:682:2: Warning: No visibility specified. Defaulting to "public". 
	function baseDiscounts(uint256 currentsupply,uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:710:2: Warning: No visibility specified. Defaulting to "public". 
	function volumeDiscounts(uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:744:2: Warning: No visibility specified. Defaulting to "public". 
	function totalDiscount(uint256 currentsupply,uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:792:4: Warning: No visibility specified. Defaulting to "public". 
   function PreICO(address tokenAddress){
   ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:802:5: Warning: No visibility specified. Defaulting to "public". 
    function sendFunds() onlyOwner{
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:808:2: Warning: No visibility specified. Defaulting to "public". 
	function calNewTokens(uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:909:13: Warning: "msg.value" used in non-payable function. Do you want to add the "payable" modifier to this function?
        	if(msg.value < 5*10**17) throw;
        	   ^-------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:922:2: Warning: No visibility specified. Defaulting to "public". 
	function processTransaction(bytes txn, uint256 txHash,address addr,bytes20 btcaddr) onlyOwner returns (uint)
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:963:13: Warning: "msg.value" used in non-payable function. Do you want to add the "payable" modifier to this function?
        	if(msg.value < 225*10**4) throw;
        	   ^-------^
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:187:5: Warning: Function state mutability can be restricted to view
    function getState() returns (ICOSaleState) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:263:5: Warning: Function state mutability can be restricted to view
    function isValid() returns(bool){
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:457:5: Warning: Function state mutability can be restricted to pure
    function getBytesLE(bytes data, uint pos, uint bits) returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:594:5: Warning: Function state mutability can be restricted to pure
    function sliceBytes20(bytes data, uint start) returns (bytes20) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:603:5: Warning: Function state mutability can be restricted to pure
    function isP2PKH(bytes txBytes, uint pos, uint script_len) returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:613:5: Warning: Function state mutability can be restricted to pure
    function isP2SH(bytes txBytes, uint pos, uint script_len) returns (bool) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:644:3: Warning: Function state mutability can be restricted to pure
  function mul(uint256 a, uint256 b) internal returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:653:3: Warning: Function state mutability can be restricted to pure
  function div(uint256 a, uint256 b) internal returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:660:3: Warning: Function state mutability can be restricted to pure
  function sub(uint256 a, uint256 b) internal returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:665:3: Warning: Function state mutability can be restricted to pure
  function add(uint256 a, uint256 b) internal returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:682:2: Warning: Function state mutability can be restricted to pure
	function baseDiscounts(uint256 currentsupply,uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:710:2: Warning: Function state mutability can be restricted to pure
	function volumeDiscounts(uint256 contribution,string types) returns (uint256){
 ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Contract locking ether found in /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	Contract SMTToken has payable functions:
	 - fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#297)
	But does not have a function to withdraw the ether
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#contracts-that-lock-ether[0m
INFO:Detectors:[93m
Reentrancy in PreICO.fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#833-887):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#835)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#836)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#839-887)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#852-853)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#856-858)
Reentrancy in PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993):
	External calls:
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#943)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#949-993)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#965)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#966-967)
Reentrancy in PreICO.tokenAssignExchange (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#888-940):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891-893)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#893)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#894-940)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#910)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#911-912)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
CreatedTokens in PreICO.calNewTokens (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#827-828) is a local variable never initialiazed
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
PreICO.finalizePreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol) does not use the value returned by external calls:
	-token.finalizePreICO(val) (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
PreICO.switchState (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol) does not use the value returned by external calls:
	-token.setState(ICOSaleState.PreICO) (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in PreICO.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#812-820):
	External calls:
	- tokensPerEther = token.tokensPerEther() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#813-814)
	- tokensPerBTC = token.tokensPerBTC() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#814-817)
	State variables written after the call(s):
	- tokensPerBTC (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#814-817)
Reentrancy in PreICO.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#812-820):
	External calls:
	- tokensPerEther = token.tokensPerEther() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#813-814)
	- tokensPerBTC = token.tokensPerBTC() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#814-817)
	- valueToBeSent = token.valueToBeSent() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#817-819)
	State variables written after the call(s):
	- valueToBeSent (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#817-819)
Reentrancy in PreICO.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#812-820):
	External calls:
	- tokensPerEther = token.tokensPerEther() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#813-814)
	- tokensPerBTC = token.tokensPerBTC() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#814-817)
	- valueToBeSent = token.valueToBeSent() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#817-819)
	- SMTfund = token.SMTfund() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#819)
	State variables written after the call(s):
	- SMTfund (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#819)
Reentrancy in PreICO.fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#833-887):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#835)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#836)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#839-887)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#848-849)
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#864-865)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#847-848)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#862-864)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#870-871)
Reentrancy in PreICO.fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#833-887):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#835)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#836)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#839-887)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#852-853)
	State variables written after the call(s):
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#853-856)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#859)
Reentrancy in PreICO.fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#833-887):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#835)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#836)
	- token.getState() == ICOSaleState.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#875-887)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#882)
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#878-881)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#884)
Reentrancy in PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993):
	External calls:
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#943)
	State variables written after the call(s):
	- transactionsClaimed (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#947)
Reentrancy in PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993):
	External calls:
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#943)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#949-993)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#958-960)
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#983-986)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#956-958)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#980-982)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
Reentrancy in PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993):
	External calls:
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#943)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#949-993)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#965)
	State variables written after the call(s):
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#965-966)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#969)
Reentrancy in PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993):
	External calls:
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#943)
	- token.getState() == ICOSaleState.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol)
Reentrancy in PreICO.tokenAssignExchange (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#888-940):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891-893)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#893)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#894-940)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#903-904)
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#921-922)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#902-903)
	- initialSupplyPrivateSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#920-921)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#925)
Reentrancy in PreICO.tokenAssignExchange (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#888-940):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891-893)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#893)
	- token.getState() == ICOSaleState.PrivateSale || token.getState() == ICOSaleState.PreSale (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#894-940)
	- switchState() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#910)
	State variables written after the call(s):
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#910-911)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#913)
Reentrancy in PreICO.tokenAssignExchange (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#888-940):
	External calls:
	- isfinalized = token.finalizedPreICO() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891-893)
	- isValid = token.isValid() (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#893)
	- token.getState() == ICOSaleState.PreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#929-940)
	State variables written after the call(s):
	- currentSupply (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#936)
	- initialSupplyPublicPreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#934-935)
	- numberOfBackers (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#938)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
PreICO.SMTfundAfterPreICO should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#780-782)
PreICO.addressPeople should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#797-802)
PreICO.bounty should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#794-795)
PreICO.fundingEndBlock should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#783-784)
PreICO.fundingStartBlock should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#783)
PreICO.initialSupplyPreSale should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#780)
PreICO.mentors should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#793)
PreICO.ownerAddr should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#802-803)
PreICO.reserve should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#791-792)
PreICO.team should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#788-789)
PreICO.tokenCreationMaxPreICO should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#785-786)
PreICO.tokenCreationMaxPrivateSale should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#786-788)
SMTToken.addr1 should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#111-113)
SMTToken.finalOwner should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#121)
SMTToken.isTesting should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#118)
SMTToken.personMakingTx should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#108)
SMTToken.testname should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#119-121)
SMTToken.tokenCreationMax should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#136-137)
SMTToken.tokensPerBTC should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#133-136)
SMTToken.tokensPerEther should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#132)
SMTToken.txorigin should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#115)
SMTToken.valueToBeSent should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#106-107)
SMTToken.version should be constant (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#104-105)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#149:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#199:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#229:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#240:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#191-194:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#217:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#248:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#255:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#258:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#266:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#297:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#330-331:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#705:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#741:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#835:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#836:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#837:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#837:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#841:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#859:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#861:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#870:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#872:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#876:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#883:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#885-886:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#890:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#891:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#893:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#894:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#897:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#913:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#924:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#931-932:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#937:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#944:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#951:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#968:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#38-49) should be declared external
Token.balanceOf (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#87-88) should be declared external
SMTToken.balanceOf (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#222-224) should be declared external
Token.transfer (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#88) should be declared external
SMTToken.transfer (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#146-159) should be declared external
Token.transferFrom (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#88-90) should be declared external
SMTToken.transferFrom (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#196-213) should be declared external
SMTToken.approve (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#224-234) should be declared external
Token.approve (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#90) should be declared external
Token.allowance (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#90-92) should be declared external
SMTToken.allowance (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#235-241) should be declared external
SMTToken.setState (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#185-194) should be declared external
SMTToken.getState (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#194-196) should be declared external
SMTToken.addToBalances (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#213-219) should be declared external
SMTToken.addToOwnership (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#221) should be declared external
SMTToken.increaseEthRaised (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#242-249) should be declared external
SMTToken.increaseBTCRaised (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#249-255) should be declared external
SMTToken.finalizePreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#256-264) should be declared external
SMTToken.finalizePublicICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#264-273) should be declared external
SMTToken.isValid (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#273-291) should be declared external
SMTToken.fallback (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#297) should be declared external
Pausable.pause (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#337-339) should be declared external
Pausable.unpause (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#341-345) should be declared external
BTC.getFirstTwoOutputs (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#493-515) should be declared external
BTC.checkValueSent (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#519-541) should be declared external
PreICO.sendFunds (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#820-822) should be declared external
PreICO.tokenAssignExchange (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#888-940) should be declared external
PreICO.processTransaction (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#941-993) should be declared external
PreICO.finalizePreICO (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol:
	- pragma solidity^0.4.11 (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#20-26) is not in mixedCase
Event 'SMTToken.stateChange' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#179-181) is not in CapWords
Parameter '_owner' of SMTToken.balanceOf (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#222) is not in mixedCase
Parameter '_to' of SMTToken.transfer (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#146) is not in mixedCase
Parameter '_value' of SMTToken.transfer (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#146) is not in mixedCase
Parameter '_from' of SMTToken.transferFrom (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#196) is not in mixedCase
Parameter '_to' of SMTToken.transferFrom (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#196) is not in mixedCase
Parameter '_value' of SMTToken.transferFrom (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#196-197) is not in mixedCase
Parameter '_spender' of SMTToken.approve (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#224) is not in mixedCase
Parameter '_value' of SMTToken.approve (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#224-225) is not in mixedCase
Parameter '_owner' of SMTToken.allowance (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#235) is not in mixedCase
Parameter '_spender' of SMTToken.allowance (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#235-236) is not in mixedCase
Function 'SMTToken.SMTToken' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#160-171) is not in mixedCase
Parameter '_fundingStartBlock' of SMTToken.SMTToken (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#160-161) is not in mixedCase
Parameter '_fundingEndBlock' of SMTToken.SMTToken (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#162-164) is not in mixedCase
Parameter '_person' of SMTToken.addToBalances (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#214) is not in mixedCase
Variable 'SMTToken.SMTfundAfterPreICO' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#125-127) is not in mixedCase
Constant 'SMTToken.SMTfund' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#128-130) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter 'script_len' of BTC.isP2PKH (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#613-614) is not in mixedCase
Parameter 'script_len' of BTC.isP2SH (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#623-625) is not in mixedCase
Parameter 'script_len' of BTC.parseOutputScript (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#653) is not in mixedCase
Function 'PreICO.PreICO' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#812-820) is not in mixedCase
Variable 'PreICO.SMTfundAfterPreICO' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#780-782) is not in mixedCase
Variable 'PreICO.SMTfund' (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#784-785) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
SMTToken.personMakingTx (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#108) is never used in SMTToken
SMTToken.isTesting (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#118) is never used in SMTToken
SMTToken.testname (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#119-121) is never used in SMTToken
SMTToken.finalOwner (/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol#121) is never used in SMTToken
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-state-variables[0m
INFO:Slither:/unique_contracts/0x111d30967038b08d5f3b0502940f8a5df13216a7.sol analyzed (10 contracts), 119 result(s) found