INFO:Slither:Compilation warnings/errors on /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:45:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;
            ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:113:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresAssets[futuresAsset].disabled) throw; // asset already exists and is disabled
                                                  ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:142:68: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresContracts[futuresContract].expirationBlock > 0) throw; // contract already exists
                                                                   ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:195:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Exchange(address feeAccount_, uint256 makerFee_, uint256 takerFee_, address exchangeContract_) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:220:57: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner && !admins[msg.sender]) throw;
                                                        ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:225:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;
        ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1339:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;
            ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1393:69: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresContracts[futuresContract].expirationBlock == 0) throw;       
                                                                    ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1394:79: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresContracts[futuresContract].expirationBlock > block.number) throw;
                                                                              ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1395:146: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
 ... throw ... 
     ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1398:53: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (retrievePosition(positionHash)[1] == 0) throw;    
                                                    ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1513:122: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
 ... throw ... 
     ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1514:53: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (retrievePosition(positionHash)[1] == 0) throw; // position not found
                                                    ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1515:53: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (retrievePosition(positionHash)[0] == 0) throw; // position already closed
                                                    ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1657:69: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresContracts[futuresContract].expirationBlock == 0) throw; // contract not found
                                                                    ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1658:63: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (futuresContracts[futuresContract].closed == true) throw; // contract already closed
                                                              ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1661:75: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            && closingPrice < futuresContracts[futuresContract].capPrice) throw; // contract not yet expired
                                                                          ^---^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:42:5: Warning: This declaration shadows a builtin symbol.
    function assert(bool assertion) pure {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1335:98: Warning: This declaration shadows a builtin symbol.
    function recordNewPosition (bytes32 positionHash, uint256 size, uint256 price, uint256 side, uint256 block) private
                                                                                                 ^-----------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1445:64: Warning: This declaration shadows an existing declaration.
    function subBalanceAddReserve(address token, address user, uint256 subBalance, uint256 addReserve) private
                                                               ^----------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1440:5: The shadowed declaration is here:
    function subBalance(address token, address user, uint256 balance, uint256 amount) private
    ^ (Relevant source part starts here and spans across multiple lines).

/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1450:64: Warning: This declaration shadows an existing declaration.
    function addBalanceSubReserve(address token, address user, uint256 addBalance, uint256 subReserve) private
                                                               ^----------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1435:5: The shadowed declaration is here:
    function addBalance(address token, address user, uint256 balance, uint256 amount) private
    ^ (Relevant source part starts here and spans across multiple lines).

/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1456:64: Warning: This declaration shadows an existing declaration.
    function subBalanceSubReserve(address token, address user, uint256 subBalance, uint256 subReserve) private
                                                               ^----------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1440:5: The shadowed declaration is here:
    function subBalance(address token, address user, uint256 balance, uint256 amount) private
    ^ (Relevant source part starts here and spans across multiple lines).

/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:112:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 futuresAsset = keccak256(this, name, baseToken, priceUrl, pricePath, inversed);
                               ^-------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:141:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 futuresContract = keccak256(this, asset, expirationBlock, floorPrice, capPrice, multiplier);
                                  ^-----------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:334:31: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(this, futuresContractHash, tradeAddresses[0], tradeValues[4], tradeValues[6], !takerIsBuying, tradeValues[0]) ... 
     ^---------------------------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:335:31: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(this, futuresContractHash, tradeAddresses[1], tradeValues[5], tradeValues[7],  takerIsBuying, tradeValues[1]) ... 
     ^---------------------------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:344:43: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            makerPositionHash           : keccak256(this, tradeAddresses[0], futuresContractHash, !takerIsBuying),
                                          ^---------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:345:43: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            makerInversePositionHash    : keccak256(this, tradeAddresses[0], futuresContractHash, takerIsBuying),
                                          ^--------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:347:43: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            takerPositionHash           : keccak256(this, tradeAddresses[1], futuresContractHash, takerIsBuying),
                                          ^--------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:348:43: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            takerInversePositionHash    : keccak256(this, tradeAddresses[1], futuresContractHash, !takerIsBuying)
                                          ^---------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:370:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        if (ecrecover(keccak256("\x19Ethereum Signed Message:\n32", t.makerOrderHash), v[0], rs[0], rs[1]) != t.maker)
                      ^-------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:377:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        if (ecrecover(keccak256("\x19Ethereum Signed Message:\n32", t.takerOrderHash), v[1], rs[2], rs[3]) != t.taker)
                      ^-------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1397:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 positionHash = keccak256(this, msg.sender, futuresContract, side);
                               ^------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1511:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes32 positionHash = keccak256(this, msg.sender, futuresContract, side);
                               ^------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:13:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success);
    ^--------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success);
    ^-------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:15:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) returns (bool success);
    ^------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:16:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    ^---------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:21:5: Warning: No visibility specified. Defaulting to "public". 
    function getReserve(address token, address user) returns (uint256);
    ^-----------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:22:5: Warning: No visibility specified. Defaulting to "public". 
    function setReserve(address token, address user, uint256 amount) returns (bool);
    ^------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:24:5: Warning: No visibility specified. Defaulting to "public". 
    function availableBalanceOf(address token, address user) returns (uint256);
    ^-------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:25:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address token, address user) returns (uint256);
    ^----------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:28:5: Warning: No visibility specified. Defaulting to "public". 
    function setBalance(address token, address user, uint256 amount) returns (bool);
    ^------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:29:5: Warning: No visibility specified. Defaulting to "public". 
    function getAffiliate(address user) returns (address);
    ^----------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:30:5: Warning: No visibility specified. Defaulting to "public". 
    function getInactivityReleasePeriod() returns (uint256);
    ^------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:31:5: Warning: No visibility specified. Defaulting to "public". 
    function getMakerTakerBalances(address token, address maker, address taker) returns (uint256[4]);
    ^-----------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:33:5: Warning: No visibility specified. Defaulting to "public". 
    function getEtmTokenAddress() returns (address);
    ^----------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:35:5: Warning: No visibility specified. Defaulting to "public". 
    function subBalanceAddReserve(address token, address user, uint256 subBalance, uint256 addReserve) returns (bool);
    ^----------------------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:36:5: Warning: No visibility specified. Defaulting to "public". 
    function addBalanceSubReserve(address token, address user, uint256 addBalance, uint256 subReserve) returns (bool);
    ^----------------------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:37:5: Warning: No visibility specified. Defaulting to "public". 
    function subBalanceSubReserve(address token, address user, uint256 subBalance, uint256 subReserve) returns (bool);
    ^----------------------------------------------------------------------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:42:5: Warning: No visibility specified. Defaulting to "public". 
    function assert(bool assertion) pure {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:50:5: Warning: No visibility specified. Defaulting to "public". 
    function safeMul(uint a, uint b) pure returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:57:5: Warning: No visibility specified. Defaulting to "public". 
    function safeSub(uint a, uint b) pure returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:63:5: Warning: No visibility specified. Defaulting to "public". 
    function safeAdd(uint a, uint b) pure returns (uint) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:81:5: Warning: No visibility specified. Defaulting to "public". 
    function setOwner(address newOwner) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:87:5: Warning: No visibility specified. Defaulting to "public". 
    function getOwner() view returns (address out) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:110:5: Warning: No visibility specified. Defaulting to "public". 
    function createFuturesAsset(string name, address baseToken, string priceUrl, string pricePath, bool inversed) onlyAdmin returns (bytes32)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:139:5: Warning: No visibility specified. Defaulting to "public". 
    function createFuturesContract(bytes32 asset, uint256 expirationBlock, uint256 floorPrice, uint256 capPrice, uint256 multiplier) onlyAdmin returns (bytes32)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:195:5: Warning: No visibility specified. Defaulting to "public". 
    function Exchange(address feeAccount_, uint256 makerFee_, uint256 takerFee_, address exchangeContract_) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:205:5: Warning: No visibility specified. Defaulting to "public". 
    function setFees(uint256 makerFee_, uint256 takerFee_) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:214:5: Warning: No visibility specified. Defaulting to "public". 
    function setAdmin(address admin, bool isAdmin) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:229:5: Warning: No visibility specified. Defaulting to "public". 
    function validateUint48(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:235:5: Warning: No visibility specified. Defaulting to "public". 
    function validateUint64(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:241:5: Warning: No visibility specified. Defaulting to "public". 
    function validateUint128(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:294:5: Warning: No visibility specified. Defaulting to "public". 
    function futuresTrade(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1022:5: Warning: No visibility specified. Defaulting to "public". 
    function calculateProfit(uint256 closingPrice, uint256 entryPrice, uint256 qty, bytes32 futuresContractHash, bool side) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1052:5: Warning: No visibility specified. Defaulting to "public". 
    function calculateTradeValue(uint256 qty, uint256 price, bytes32 futuresContractHash) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1068:5: Warning: No visibility specified. Defaulting to "public". 
    function calculateLoss(uint256 closingPrice, uint256 entryPrice, uint256 qty, bytes32 futuresContractHash, bool side) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1097:5: Warning: No visibility specified. Defaulting to "public". 
    function calculateCollateral (uint256 limitPrice, uint256 tradePrice, uint256 qty, bool side, bytes32 futuresContractHash) view returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1127:5: Warning: No visibility specified. Defaulting to "public". 
    function calculateFee (uint256 qty, uint256 tradePrice, uint256 fee,  bytes32 futuresContractHash) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1133:5: Warning: No visibility specified. Defaulting to "public". 
    function checkEnoughBalance (uint256 limitPrice, uint256 tradePrice, uint256 qty, bool side, uint256 fee, uint256 gasFee, bytes32 futuresContractHash, uint256 availableBalance) view returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1172:5: Warning: No visibility specified. Defaulting to "public". 
    function batchFuturesTrade(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1509:5: Warning: No visibility specified. Defaulting to "public". 
    function closeFuturesPosition (bytes32 futuresContract, bool side)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1653:5: Warning: No visibility specified. Defaulting to "public". 
    function closeFuturesContract (bytes32 futuresContract, uint256 price, uint256 multipliterPrice) onlyAdmin
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1653:76: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
    function closeFuturesContract (bytes32 futuresContract, uint256 price, uint256 multipliterPrice) onlyAdmin
                                                                           ^----------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:229:5: Warning: Function state mutability can be restricted to pure
    function validateUint48(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:235:5: Warning: Function state mutability can be restricted to pure
    function validateUint64(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:241:5: Warning: Function state mutability can be restricted to pure
    function validateUint128(uint256 val) returns (bool)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1022:5: Warning: Function state mutability can be restricted to view
    function calculateProfit(uint256 closingPrice, uint256 entryPrice, uint256 qty, bytes32 futuresContractHash, bool side) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1052:5: Warning: Function state mutability can be restricted to view
    function calculateTradeValue(uint256 qty, uint256 price, bytes32 futuresContractHash) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1068:5: Warning: Function state mutability can be restricted to view
    function calculateLoss(uint256 closingPrice, uint256 entryPrice, uint256 qty, bytes32 futuresContractHash, bool side) returns (uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1142:25: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
                        calculateFee(qty, tradePrice, fee, futuresContractHash)
                        ^-----------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1157:25: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
                        calculateFee(qty, tradePrice, fee, futuresContractHash)
                        ^-----------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1481:13: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            EtherMium(exchangeContract).balanceOf(token, maker),
            ^-------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1482:13: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            EtherMium(exchangeContract).getReserve(token, maker),
            ^--------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1483:13: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            EtherMium(exchangeContract).balanceOf(token, taker),
            ^-------------------------------------------------^
/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:1484:13: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
            EtherMium(exchangeContract).getReserve(token, taker)
            ^--------------------------------------------------^

INFO:Detectors:[93m
Reentrancy in Exchange.closeFuturesPosition (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1535-1671):
	External calls:
	- v = FuturesClosePositionValues(EtherMium(exchangeContract).getReserve(baseToken,msg.sender),EtherMium(exchangeContract).balanceOf(baseToken,msg.sender),futuresContracts[futuresContract].floorPrice,futuresContracts[futuresContract].capPrice,futuresContracts[futuresContract].closingPrice,futuresContract) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1549-1559)
	- subReserve(baseToken,msg.sender,v.reserve,calculateCollateral(v.floorPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],true,v.futuresContract)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1577-1582)
	- addBalance(baseToken,msg.sender,v.balance,safeSub(profit * 1e10,fee * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1605-1607)
	- subBalance(baseToken,msg.sender,v.balance,safeAdd(loss * 1e10,fee * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1611)
	- subReserve(baseToken,msg.sender,v.reserve,calculateCollateral(v.capPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],false,v.futuresContract)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1622-1630)
	- addBalance(baseToken,msg.sender,v.balance,safeSub(profit * 1e10,fee * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1645-1646)
	- subBalance(baseToken,msg.sender,v.balance,safeAdd(loss * 1e10,fee * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1659-1660)
	- addBalance(baseToken,feeAccount,EtherMium(exchangeContract).balanceOf(baseToken,feeAccount),fee * 1e10) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1663-1665)
	State variables written after the call(s):
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1670-1671)
Reentrancy in Exchange.forceReleaseReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1419-1469):
	External calls:
	- subReserve(baseToken,msg.sender,EtherMium(exchangeContract).getReserve(baseToken,msg.sender),calculateCollateral(futuresContracts[futuresContract].floorPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],true,futuresContract)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1429-1442)
	- subReserve(baseToken,msg.sender,EtherMium(exchangeContract).getReserve(baseToken,msg.sender),calculateCollateral(futuresContracts[futuresContract].capPrice,retrievePosition(positionHash)[1],retrievePosition(positionHash)[0],false,futuresContract)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1445-1456)
	State variables written after the call(s):
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1458-1459)
Reentrancy in Exchange.futuresTrade (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#305-1052):
	External calls:
	- balances = EtherMium(exchangeContract).getMakerTakerBalances(t.baseToken,t.maker,t.taker) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#405-406)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(true,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#515-533)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(false,true,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#556-578)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerInversePositionHash,(tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve),(false,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#604-626)
	State variables written after the call(s):
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#649-651)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#687-689)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#718-720)
Reentrancy in Exchange.futuresTrade (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#305-1052):
	External calls:
	- balances = EtherMium(exchangeContract).getMakerTakerBalances(t.baseToken,t.maker,t.taker) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#405-406)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(true,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#793-811)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(false,false,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#832-851)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerInversePositionHash,(tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve),(false,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#879-899)
	State variables written after the call(s):
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#920-922)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#958-960)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#980)
Reentrancy in Exchange.futuresTrade (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#305-1052):
	External calls:
	- balances = EtherMium(exchangeContract).getMakerTakerBalances(t.baseToken,t.maker,t.taker) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#405-406)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(true,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#515-533)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(false,true,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#556-578)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerInversePositionHash,(tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve),(false,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#604-626)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerPositionHash,(tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve),(true,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#652-668)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerPositionHash,(tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve),(false,false,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#690-715)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerInversePositionHash,(tv.qty,t.makerPrice,takerFee,tv.takerProfit,tv.takerLoss,tv.takerBalance,t.takerGasFee,tv.takerReserve),(false,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#742-765)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(true,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#793-811)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerPositionHash,(tv.qty,t.makerPrice,makerFee,0,0,tv.makerBalance,0,tv.makerReserve),(false,false,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#832-851)
	- updateBalances(t.futuresContract,(t.baseToken,t.maker),t.makerInversePositionHash,(tv.qty,t.makerPrice,makerFee,tv.makerProfit,tv.makerLoss,tv.makerBalance,0,tv.makerReserve),(false,false,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#879-899)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerPositionHash,(tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve),(true,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#923-938)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerPositionHash,(tv.qty,t.makerPrice,takerFee,0,0,tv.takerBalance,t.takerGasFee,tv.takerReserve),(false,true,true)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#960-979)
	- updateBalances(t.futuresContract,(t.baseToken,t.taker),t.takerInversePositionHash,(tv.qty,t.makerPrice,takerFee,tv.takerProfit,tv.takerLoss,tv.takerBalance,t.takerGasFee,tv.takerReserve),(false,true,false)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1006-1032)
	State variables written after the call(s):
	- orderFills (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1034-1037)
	- orderFills (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1041-1042)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
Exchange.addBalance (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1471-1474) does not use the value returned by external calls:
	-EtherMium(exchangeContract).setBalance(token,user,safeAdd(balance,amount)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1473-1474)
Exchange.subBalance (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1474-1480) does not use the value returned by external calls:
	-EtherMium(exchangeContract).setBalance(token,user,safeSub(balance,amount)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1478-1479)
Exchange.subBalanceAddReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1480-1484) does not use the value returned by external calls:
	-EtherMium(exchangeContract).subBalanceAddReserve(token,user,subBalance,addReserve * 1e10) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1482-1484)
Exchange.addBalanceSubReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1484-1488) does not use the value returned by external calls:
	-EtherMium(exchangeContract).addBalanceSubReserve(token,user,addBalance,subReserve * 1e10) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1488)
Exchange.subBalanceSubReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1488-1500) does not use the value returned by external calls:
	-EtherMium(exchangeContract).subBalanceSubReserve(token,user,subBalance,subReserve * 1e10) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1494-1500)
Exchange.addReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1500-1504) does not use the value returned by external calls:
	-EtherMium(exchangeContract).setReserve(token,user,safeAdd(reserve,amount * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1503-1504)
Exchange.subReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1505-1513) does not use the value returned by external calls:
	-EtherMium(exchangeContract).setReserve(token,user,safeSub(reserve,amount * 1e10)) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1511-1513)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
Exchange.assert (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#43-49) shadows built-in symbol "assert"
Exchange.recordNewPosition.block (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1377) shadows built-in symbol "block"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
Exchange.subBalanceAddReserve.subBalance (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1481-1482) shadows:
	- Exchange.subBalance (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1474-1480)
Exchange.subBalanceAddReserve.addReserve (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1482) shadows:
	- Exchange.addReserve (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1500-1504)
Exchange.addBalanceSubReserve.addBalance (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1488) shadows:
	- Exchange.addBalance (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1471-1474)
Exchange.addBalanceSubReserve.subReserve (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1488) shadows:
	- Exchange.subReserve (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1505-1513)
Exchange.subBalanceSubReserve.subBalance (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1491) shadows:
	- Exchange.subBalance (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1474-1480)
Exchange.subBalanceSubReserve.subReserve (local variable @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1491-1492) shadows:
	- Exchange.subReserve (function @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1505-1513)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
Reentrancy in Exchange.futuresTrade (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#305-1052):
	External calls:
	- balances = EtherMium(exchangeContract).getMakerTakerBalances(t.baseToken,t.maker,t.taker) (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#405-406)
	State variables written after the call(s):
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#512-514)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#552-555)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#579-581)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#792-793)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#828-831)
	- positions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#854-855)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Token.allowTransactions should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#10-11)
Token.decimals should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#9-10)
Token.name should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#6-7)
Token.standard should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#5-6)
Token.symbol should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#7-8)
Token.totalSupply should be constant (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#8-9)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#49:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#116:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#146:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#237:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1379:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1421:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1421:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1422:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1428:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1540:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1545:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1548:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#235:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
Token.transfer (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#13-14) should be declared external
Token.approveAndCall (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#14-15) should be declared external
Token.approve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#15-16) should be declared external
Token.transferFrom (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#16-19) should be declared external
EtherMium.getReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#21-22) should be declared external
EtherMium.setReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#22-24) should be declared external
EtherMium.availableBalanceOf (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#24-25) should be declared external
EtherMium.balanceOf (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#25-28) should be declared external
EtherMium.setBalance (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#28-29) should be declared external
EtherMium.getAffiliate (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#29-30) should be declared external
EtherMium.getInactivityReleasePeriod (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#30-31) should be declared external
EtherMium.getMakerTakerBalances (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#31-33) should be declared external
EtherMium.getEtmTokenAddress (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#33-35) should be declared external
EtherMium.subBalanceAddReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#35-36) should be declared external
EtherMium.addBalanceSubReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#36-37) should be declared external
EtherMium.subBalanceSubReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#37-41) should be declared external
Exchange.setOwner (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#82-87) should be declared external
Exchange.getOwner (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#91) should be declared external
Exchange.createFuturesAsset (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#110-130) should be declared external
Exchange.createFuturesContract (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#139-161) should be declared external
Exchange.setFees (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#207-219) should be declared external
Exchange.setAdmin (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#220-229) should be declared external
Exchange.validateUint48 (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#237-243) should be declared external
Exchange.batchFuturesTrade (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1219-1234) should be declared external
Exchange.forceReleaseReserve (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1419-1469) should be declared external
Exchange.getMakerTakerBalances (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1513-1522) should be declared external
Exchange.getMakerTakerPositions (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1522-1527) should be declared external
Exchange.closeFuturesPosition (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1535-1671) should be declared external
Exchange.closeFuturesContract (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol:
	- pragma solidity^0.4.19 (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Exchange.Exchange' (/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol#198-206) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/20/0x569fb0f10638ef503574bacb110188fbc6db1756.sol analyzed (3 contracts), 69 result(s) found