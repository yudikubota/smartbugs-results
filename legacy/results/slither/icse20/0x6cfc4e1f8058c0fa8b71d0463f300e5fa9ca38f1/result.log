INFO:Slither:Compilation warnings/errors on /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:199:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Owned() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:227:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SecuredWithRoles(string contractName_, address roles_) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:298:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Roles() SecuredWithRoles("RolesRepository", this) public {}
    ^------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:355:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function TokenData(address logic_, address owner_) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:432:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function TokenLogic(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:474:16: Warning: Use of the "var" keyword is deprecated.
        var (, ok) = indexOf(listName);
               ^^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:502:14: Warning: Use of the "var" keyword is deprecated.
        var (i, ok) = indexOf(listName);
             ^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:502:17: Warning: Use of the "var" keyword is deprecated.
        var (i, ok) = indexOf(listName);
                ^^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:607:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Token(string name_, string symbol_, address rolesContract) public SecuredWithRoles(name_, rolesContract) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:714:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SweetTokenLogic(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:256:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function stop() public roleOrOwner("stopper") {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:256:5: Warning: Variable is shadowed in inline assembly by an instruction of the same name
    function stop() public roleOrOwner("stopper") {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:210:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogSetOwner(owner);
        ^----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:216:5: Warning: Functions in interfaces should be declared external.
    function hasRole(string roleName) public view returns (bool);
    ^-----------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:217:5: Warning: Functions in interfaces should be declared external.
    function senderHasRole(string roleName) public view returns (bool);
    ^-----------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:218:5: Warning: Functions in interfaces should be declared external.
    function contractHash() public view returns (bytes32);
    ^----------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:228:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        contractHash = keccak256(contractName_);
                       ^----------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:228:24: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        contractHash = keccak256(contractName_);
                       ^----------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:249:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return roles.knownRoleNames(contractHash, keccak256(roleName));
                                                  ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:249:51: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        return roles.knownRoleNames(contractHash, keccak256(roleName));
                                                  ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:253:66: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return hasRole(roleName) && roles.roleList(contractHash, keccak256(roleName), msg.sender);
                                                                 ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:253:66: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        return hasRole(roleName) && roles.roleList(contractHash, keccak256(roleName), msg.sender);
                                                                 ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:274:5: Warning: Functions in interfaces should be declared external.
    function knownRoleNames(bytes32 contractHash, bytes32 nameHash) public view returns (bool);
    ^-----------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:275:5: Warning: Functions in interfaces should be declared external.
    function roleList(bytes32 contractHash, bytes32 nameHash, address member) public view returns (bool);
    ^---------------------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:277:5: Warning: Functions in interfaces should be declared external.
    function addContractRole(bytes32 ctrct, string roleName) public;
    ^--------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:278:5: Warning: Functions in interfaces should be declared external.
    function removeContractRole(bytes32 ctrct, string roleName) public;
    ^-----------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:279:5: Warning: Functions in interfaces should be declared external.
    function grantUserRole(bytes32 ctrct, string roleName, address user) public;
    ^--------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:280:5: Warning: Functions in interfaces should be declared external.
    function revokeUserRole(bytes32 ctrct, string roleName, address user) public;
    ^---------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:301:40: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(!knownRoleNames[ctrct][keccak256(roleName)]);
                                       ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:301:40: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        require(!knownRoleNames[ctrct][keccak256(roleName)]);
                                       ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:302:31: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        knownRoleNames[ctrct][keccak256(roleName)] = true;
                              ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:302:31: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        knownRoleNames[ctrct][keccak256(roleName)] = true;
                              ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:303:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogRoleAdded(ctrct, roleName);
        ^---------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:307:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(knownRoleNames[ctrct][keccak256(roleName)]);
                                      ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:307:39: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        require(knownRoleNames[ctrct][keccak256(roleName)]);
                                      ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:308:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        delete knownRoleNames[ctrct][keccak256(roleName)];
                                     ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:308:38: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        delete knownRoleNames[ctrct][keccak256(roleName)];
                                     ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:309:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogRoleRemoved(ctrct, roleName);
        ^-----------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:313:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(knownRoleNames[ctrct][keccak256(roleName)]);
                                      ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:313:39: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        require(knownRoleNames[ctrct][keccak256(roleName)]);
                                      ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:314:25: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        roleList[ctrct][keccak256(roleName)][user] = true;
                        ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:314:25: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        roleList[ctrct][keccak256(roleName)][user] = true;
                        ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:315:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogRoleGranted(ctrct, roleName, user);
        ^-----------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:319:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        delete roleList[ctrct][keccak256(roleName)][user];
                               ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:319:32: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        delete roleList[ctrct][keccak256(roleName)][user];
                               ^-----------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:320:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogRoleRevoked(ctrct, roleName, user);
        ^-----------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:381:5: Warning: Functions in interfaces should be declared external.
    function totalSupply() public view returns (uint256 supply);
    ^----------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:382:5: Warning: Functions in interfaces should be declared external.
    function balanceOf( address who ) public  view returns (uint256 value);
    ^---------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:383:5: Warning: Functions in interfaces should be declared external.
    function allowance( address owner, address spender ) public view returns (uint256 _allowance);
    ^--------------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:385:5: Warning: Functions in interfaces should be declared external.
    function triggerTransfer(address src, address dst, uint256 wad);
    ^--------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:386:5: Warning: Functions in interfaces should be declared external.
    function transfer( address to, uint256 value) public returns (bool ok);
    ^---------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:387:5: Warning: Functions in interfaces should be declared external.
    function transferFrom( address from, address to, uint256 value) public returns (bool ok);
    ^---------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:388:5: Warning: Functions in interfaces should be declared external.
    function approve( address spender, uint256 value ) public returns (bool ok);
    ^--------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:390:5: Warning: Functions in interfaces should be declared external.
    function mintFor(address recipient, uint256 wad) public;
    ^------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:395:5: Warning: Functions in interfaces should be declared external.
    function totalSupply() public view returns (uint256 supply);
    ^----------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:396:5: Warning: Functions in interfaces should be declared external.
    function balanceOf( address who ) public view returns (uint256 value);
    ^--------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:397:5: Warning: Functions in interfaces should be declared external.
    function allowance( address owner, address spender ) public view returns (uint256 _allowance);
    ^--------------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:398:5: Warning: Functions in interfaces should be declared external.
    function transferFrom( address from, address to, uint256 value) public returns (bool ok);
    ^---------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:401:5: Warning: Functions in interfaces should be declared external.
    function transfer( address owner, address to, uint256 value) public returns (bool ok);
    ^------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:402:5: Warning: Functions in interfaces should be declared external.
    function approve( address owner, address spender, uint256 value ) public returns (bool ok);
    ^-----------------------------------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:404:5: Warning: Functions in interfaces should be declared external.
    function setToken(address token_) public;
    ^---------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:405:5: Warning: Functions in interfaces should be declared external.
    function mintFor(address dest, uint256 wad) public;
    ^-------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:406:5: Warning: Functions in interfaces should be declared external.
    function burn(address src, uint256 wad) public;
    ^---------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:498:9: Warning: Invoking events without "emit" prefix is deprecated.
        WhiteListAddition(listName);
        ^-------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:509:9: Warning: Invoking events without "emit" prefix is deprecated.
        WhiteListRemoval(listName);
        ^------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:516:9: Warning: Invoking events without "emit" prefix is deprecated.
        AdditionToWhiteList(listName, guy);
        ^--------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:523:9: Warning: Invoking events without "emit" prefix is deprecated.
        RemovalFromWhiteList(listName, guy);
        ^---------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:598:5: Warning: Functions in interfaces should be declared external.
    function tokenFallback(address src, uint wad, bytes _data) public;
    ^----------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:631:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(src, dst, wad);
        ^---------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:637:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogLogicReplaced(logic);
        ^---------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:661:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(msg.sender, dst, wad);
            ^----------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:680:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(src, dst, wad);
            ^---------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:688:13: Warning: Invoking events without "emit" prefix is deprecated.
            Approval(msg.sender, guy, wad);
            ^----------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:698:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogMint(recipient, wad);
        ^---------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:699:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(address(0x0), recipient, wad);
        ^------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:704:9: Warning: Invoking events without "emit" prefix is deprecated.
        LogBurn(msg.sender, wad);
        ^----------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:385:5: Warning: No visibility specified. Defaulting to "public". In interfaces it defaults to external.
    function triggerTransfer(address src, address dst, uint256 wad);
    ^--------------------------------------------------------------^
/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:630:5: Warning: No visibility specified. Defaulting to "public". 
    function triggerTransfer(address src, address dst, uint256 wad) logicOnly {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[92m
Token.allowance.owner (local variable @ /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#643) shadows:
	- Owned.owner (state variable @ /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#208)
SweetTokenLogic.SweetTokenLogic.totalSupply (local variable @ /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#741-742) shadows:
	- TokenLogic.totalSupply (function @ /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#548-549)
	- TokenLogicI.totalSupply (function @ /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#399-400)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
SweetTokenLogic.SweetTokenLogic has external calls inside a loop:
	- data.setBalances(initialWallets[i],initialBalances[i]) (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol)
SweetTokenLogic.SweetTokenLogic has external calls inside a loop:
	- token.triggerTransfer(address(0x0),initialWallets[i],initialBalances[i]) (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
Token.transfer uses assembly (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#663-682)
	- /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#669-672
Token.transferFrom uses assembly (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#683-704)
	- /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#689-696
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#assembly-usage[0m
INFO:Detectors:[92m
Token.decimals should be constant (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#622)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Owned.setOwner (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#216-218) should be declared external
SecuredWithRolesI.hasRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#222-224) should be declared external
SecuredWithRolesI.senderHasRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#224-227) should be declared external
SecuredWithRolesI.contractHash (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#227-228) should be declared external
SecuredWithRoles.stop (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#265-266) should be declared external
SecuredWithRoles.restart (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#266-273) should be declared external
SecuredWithRoles.setRolesContract (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#274-277) should be declared external
RolesI.knownRoleNames (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#278-279) should be declared external
RolesI.roleList (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#279-280) should be declared external
RolesI.addContractRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#280-285) should be declared external
RolesI.removeContractRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#285-286) should be declared external
RolesI.grantUserRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#286-287) should be declared external
RolesI.revokeUserRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#287-288) should be declared external
Roles.addContractRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#306-312) should be declared external
Roles.removeContractRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#312-318) should be declared external
Roles.grantUserRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#318-328) should be declared external
Roles.revokeUserRole (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#328-334) should be declared external
ERC20.totalSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#339) should be declared external
ERC20.balanceOf (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#339-340) should be declared external
ERC20.allowance (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#340-346) should be declared external
ERC20.transfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#346-347) should be declared external
ERC20.transferFrom (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#347-351) should be declared external
ERC20.approve (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#351-355) should be declared external
TokenData.setTokenLogic (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#373-381) should be declared external
TokenData.setSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#381-382) should be declared external
TokenData.setBalances (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#382-383) should be declared external
TokenData.setApprovals (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#383-386) should be declared external
TokenI.totalSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#386-387) should be declared external
Token.totalSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#636-641) should be declared external
Token.balanceOf (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#641-643) should be declared external
TokenI.balanceOf (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#387-388) should be declared external
TokenI.allowance (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#388-390) should be declared external
Token.allowance (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#643-645) should be declared external
Token.triggerTransfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#645-648) should be declared external
TokenI.triggerTransfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#393-394) should be declared external
Token.transfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#663-682) should be declared external
TokenI.transfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#394-395) should be declared external
TokenI.approve (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#397) should be declared external
Token.approve (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#704-716) should be declared external
TokenI.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#398) should be declared external
Token.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#720-725) should be declared external
TokenLogicI.totalSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#399-400) should be declared external
TokenLogic.totalSupply (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#548-549) should be declared external
TokenLogic.balanceOf (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#549-554) should be declared external
TokenLogicI.balanceOf (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#400-401) should be declared external
TokenLogicI.allowance (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#401-402) should be declared external
TokenLogic.allowance (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#554-555) should be declared external
TokenLogic.transferFrom (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#564-579) should be declared external
TokenLogicI.transferFrom (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#402-404) should be declared external
TokenLogicI.transfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#411-413) should be declared external
TokenLogic.transfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#555-564) should be declared external
TokenLogic.approve (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#579-583) should be declared external
TokenLogicI.approve (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#413-414) should be declared external
TokenLogicI.setToken (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#417-418) should be declared external
TokenLogic.setToken (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#546-547) should be declared external
TokenLogicI.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#418-420) should be declared external
SweetTokenLogic.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) should be declared external
TokenLogic.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#583-588) should be declared external
TokenLogicI.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#421) should be declared external
TokenLogic.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#588-594) should be declared external
SweetTokenLogic.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) should be declared external
TokenLogic.listNamesLen (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#484-488) should be declared external
TokenLogic.replaceLogic (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#498-504) should be declared external
TokenLogic.addWhiteList (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#507-515) should be declared external
TokenLogic.removeWhiteList (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#515-526) should be declared external
TokenLogic.addToWhiteList (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#526-535) should be declared external
TokenLogic.removeFromWhiteList (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#538-543) should be declared external
TokenLogic.setFreeTransfer (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#543-546) should be declared external
ERC223ReceivingContract.tokenFallback (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#614) should be declared external
Token.setLogic (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#648-652) should be declared external
Token.pull (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#716-720) should be declared external
Token.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#725-727) should be declared external
Token.setName (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#727-728) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol:
	- pragma solidity^0.4.17 (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#27-31): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Owned.Owned' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#208-212) is not in mixedCase
Function 'SecuredWithRoles.SecuredWithRoles' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#235-243) is not in mixedCase
Function 'Roles.Roles' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#303-306) is not in mixedCase
Function 'TokenData.TokenData' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#369-373) is not in mixedCase
Function 'TokenLogic.TokenLogic' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#444-459) is not in mixedCase
Function 'Token.Token' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#626-631) is not in mixedCase
Parameter '' of SweetTokenLogic.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) is not in mixedCase
Parameter '_scope_0' of SweetTokenLogic.mintFor (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) is not in mixedCase
Parameter '' of SweetTokenLogic.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) is not in mixedCase
Parameter '_scope_0' of SweetTokenLogic.burn (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol) is not in mixedCase
Function 'SweetTokenLogic.SweetTokenLogic' (/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol#730-743) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/44/0x6cfc4e1f8058c0fa8b71d0463f300e5fa9ca38f1.sol analyzed (19 contracts), 92 result(s) found