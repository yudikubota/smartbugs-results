INFO:Slither:Compilation warnings/errors on /unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:
/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:20:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Owned() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:56:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function BoomerangLiquidity(uint multiplierPercent, address aFlmContract) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:83:9: Warning: Return value of low-level calls not used.
        flmContract.call.value(investment).gas(1000000)();
        ^-----------------------------------------------^
/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:90:21: Warning: Return value of low-level calls not used.
                    participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();
                    ^----------------------------------------------------------------------------^
/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:102:9: Warning: Return value of low-level calls not used.
        flmContract.call(bytes4(keccak256("withdraw()")));
        ^-----------------------------------------------^

INFO:Detectors:[91m
BoomerangLiquidity.payout (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#80-102) sends eth to arbitrary user
	Dangerous calls:
	- flmContract.call.value(investment).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#85)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
Reentrancy in BoomerangLiquidity.payout (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#80-102):
	External calls:
	- flmContract.call.value(investment).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#85)
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#91-94)
	External calls sending eth:
	- flmContract.call.value(investment).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#85)
	- ! participants[payoutOrder].etherAddress.send(payoutToSend) (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#90-95)
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#91-94)
	State variables written after the call(s):
	- payoutOrder (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#102)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities[0m
INFO:Detectors:[92m
BoomerangLiquidity.payout has external calls inside a loop:
	- ! participants[payoutOrder].etherAddress.send(payoutToSend) (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#90-95)
BoomerangLiquidity.payout has external calls inside a loop:
	- participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#91-94)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in BoomerangLiquidity.payout (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#80-102):
	External calls:
	- flmContract.call.value(investment).gas(1000000)() (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#85)
	State variables written after the call(s):
	- participants (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#88-89)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
ERC20Interface.totalSupply (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#4-5) should be declared external
ERC20Interface.balanceOf (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#5-6) should be declared external
ERC20Interface.allowance (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#6-7) should be declared external
ERC20Interface.transfer (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#7-8) should be declared external
ERC20Interface.approve (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#8-9) should be declared external
ERC20Interface.transferFrom (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#9-11) should be declared external
Owned.changeOwner (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#29-33) should be declared external
Owned.acceptOwnership (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#33-40) should be declared external
BoomerangLiquidity.fallback (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#74-75) should be declared external
BoomerangLiquidity.payout (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#80-102) should be declared external
BoomerangLiquidity.withdraw (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#105-108) should be declared external
BoomerangLiquidity.donate (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#108) should be declared external
BoomerangLiquidity.transferAnyERC20Token (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#108-113) should be declared external
BoomerangLiquidity.exitScam (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol:
	- pragma solidity^0.4.21 (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Low level call in BoomerangLiquidity.payout (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#80-102):
	-flmContract.call.value(investment).gas(1000000)() /unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#85
	-participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)() /unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#91-94
Low level call in BoomerangLiquidity.withdraw (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#105-108):
	-flmContract.call(bytes4(keccak256()(withdraw()))) /unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#106-108
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Function 'Owned.Owned' (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#20-24) is not in mixedCase
Parameter '_newOwner' of Owned.changeOwner (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#29-30) is not in mixedCase
Function 'BoomerangLiquidity.BoomerangLiquidity' (/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol#56-63) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0xea9c15f733ee4cd9e24c97bdddd66077a757b474.sol analyzed (3 contracts), 25 result(s) found