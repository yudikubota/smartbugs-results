INFO:Slither:Compilation warnings/errors on /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:13:11: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
          throw;
          ^---^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:16:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function owned() { owner = msg.sender; }
  ^--------------------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:64:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function blackjack(uint minBet, uint maxBet, address signerAddress) payable{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:77:59: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (msg.value < minimumBet || msg.value > maximumBet) throw;
                                                          ^---^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:79:48: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (msg.value * 3 > address(this).balance) throw;
                                               ^---^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:101:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:111:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (games[id].player != 0x0) throw;
                                 ^---^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:181:10: Warning: Use of the "var" keyword is deprecated.
    var (dealerValue, dealerBJ) = getDealerValue(cards, numCards);
         ^---------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:181:23: Warning: Use of the "var" keyword is deprecated.
    var (dealerValue, dealerBJ) = getDealerValue(cards, numCards);
                      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:120:5: Warning: Variable is declared as a storage pointer. Use an explicit "storage" keyword to silence this warning.
    Game game = games[gameId];
    ^-------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:113:5: Warning: Invoking events without "emit" prefix is deprecated.
    NewGame(id, deck, srvSeed, cSeed, msg.sender, bet);
    ^------------------------------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:124:7: Warning: Invoking events without "emit" prefix is deprecated.
[91m      Error(1);[0m
      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:128:7: Warning: Invoking events without "emit" prefix is deprecated.
[91m      Error(2);[0m
      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:132:7: Warning: Invoking events without "emit" prefix is deprecated.
[91m      Error(3);[0m
      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:136:7: Warning: Invoking events without "emit" prefix is deprecated.
[91m      Error(4);[0m
      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:142:7: Warning: Invoking events without "emit" prefix is deprecated.
[91m      Error(5);[0m
      ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:146:5: Warning: Invoking events without "emit" prefix is deprecated.
    Result(gameId, msg.sender, win);
    ^-----------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:153:8: Warning: "sha3" has been deprecated in favour of "keccak256"
    if(sha3(seed) != games[gameId].seed) return false;
       ^--------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:153:8: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    if(sha3(seed) != games[gameId].seed) return false;
       ^--------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:153:8: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.
    if(sha3(seed) != games[gameId].seed) return false;
       ^--------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:154:8: Warning: "sha3" has been deprecated in favour of "keccak256"
    if(sha3(convertToBytes(deck), seed) != games[gameId].deck) return false;
       ^------------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:154:8: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    if(sha3(convertToBytes(deck), seed) != games[gameId].deck) return false;
       ^------------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:168:23: Warning: "sha3" has been deprecated in favour of "keccak256"
    bytes32 msgHash = sha3(gameId,numCards);
                      ^-------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:168:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    bytes32 msgHash = sha3(gameId,numCards);
                      ^-------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:276:9: Warning: Invoking events without "emit" prefix is deprecated.
[91m        Error(6);[0m
        ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:16:3: Warning: No visibility specified. Defaulting to "public". 
  function owned() { owner = msg.sender; }
  ^--------------------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:17:3: Warning: No visibility specified. Defaulting to "public". 
  function changeOwner(address newOwner) onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:23:3: Warning: No visibility specified. Defaulting to "public". 
  function close() onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:64:3: Warning: No visibility specified. Defaulting to "public". 
  function blackjack(uint minBet, uint maxBet, address signerAddress) payable{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:75:3: Warning: No visibility specified. Defaulting to "public". 
  function initGame(uint id, bytes32 deck, bytes32 srvSeed, bytes32 cSeed) payable {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:86:3: Warning: No visibility specified. Defaulting to "public". 
  function stand(uint gameId, uint8[] deck, bytes32 seed, uint8 numCards, uint8 v, bytes32 r, bytes32 s) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:87:5: Warning: Unused local variable.
    uint win = _stand(gameId,deck,seed,numCards,v,r,s, true);
    ^------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:93:3: Warning: No visibility specified. Defaulting to "public". 
  function standAndRebet(uint oldGameId, uint8[] oldDeck, bytes32 oldSeed, uint8 numCards, uint8 v, bytes32 r, bytes32 s, uint newGameId, bytes32 newDeck, bytes32 newSrvSeed, bytes32 newCSeed){
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:152:3: Warning: No visibility specified. Defaulting to "public". 
  function checkDeck(uint gameId, uint8[] deck, bytes32 seed) constant returns (bool correct){
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:158:3: Warning: No visibility specified. Defaulting to "public". 
  function convertToBytes(uint8[] byteArray) returns (bytes b){
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:167:3: Warning: No visibility specified. Defaulting to "public". 
  function checkNumCards(uint gameId, uint8 numCards, uint8 v, bytes32 r, bytes32 s) constant returns (bool correct){
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:176:3: Warning: No visibility specified. Defaulting to "public". 
  function determineOutcome(uint gameId, uint8[] cards, uint8 numCards) constant returns(uint win) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:269:3: Warning: No visibility specified. Defaulting to "public". 
  function() payable onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:273:3: Warning: No visibility specified. Defaulting to "public". 
  function withdraw(uint amount) onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:280:3: Warning: No visibility specified. Defaulting to "public". 
  function setSigner(address signerAddress) onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:285:3: Warning: No visibility specified. Defaulting to "public". 
  function setMinimumBet(uint newMin) onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:290:3: Warning: No visibility specified. Defaulting to "public". 
  function setMaximumBet(uint newMax) onlyOwner{
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:154:13: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
    if(sha3(convertToBytes(deck), seed) != games[gameId].deck) return false;
            ^------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:158:3: Warning: Function state mutability can be restricted to pure
  function convertToBytes(uint8[] byteArray) returns (bytes b){
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:185:10: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
      if(isSuited(cards[0], cards[2]))
         ^--------------------------^
/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:264:3: Warning: Function state mutability can be restricted to pure
  function isSuited(uint8 card1, uint8 card2) internal returns(bool){
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
numAces in blackjack.getPlayerValue (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#217) is a local variable never initialiazed
numAces in blackjack.getDealerValue (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#249) is a local variable never initialiazed
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#14-15:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#78-79:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#84:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#106:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#113:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#158:
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#158-160:
	- Usage of "sha3()" should be replaced with "keccak256()"
Deprecated standard detected @ /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#174-176:
	- Usage of "sha3()" should be replaced with "keccak256()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
owned.changeOwner (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#17-22) should be declared external
mortal.close (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#23-27) should be declared external
blackjack.initGame (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#75-84) should be declared external
blackjack.stand (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#86-93) should be declared external
blackjack.standAndRebet (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#93-106) should be declared external
blackjack.fallback (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#279-280) should be declared external
blackjack.withdraw (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#281-286) should be declared external
blackjack.setSigner (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#290-293) should be declared external
blackjack.setMinimumBet (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol) should be declared external
blackjack.setMaximumBet (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol:
	- pragma solidity^0.4.10 (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#7-9): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Contract 'owned' (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#9-22) is not in CapWords
Contract 'mortal' (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#22-27) is not in CapWords
Contract 'blackjack' (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#27-293) is not in CapWords
Function 'blackjack._initGame' (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#110-117) is not in mixedCase
Function 'blackjack._stand' (/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol#119-152) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/5/0x1cce39da85ff2d5ceae92a810447b52df13f9267.sol analyzed (3 contracts), 26 result(s) found