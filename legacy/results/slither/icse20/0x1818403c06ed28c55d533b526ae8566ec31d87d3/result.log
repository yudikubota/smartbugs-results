INFO:Slither:Compilation warnings/errors on /unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:17:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:289:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function DAOPlayMarketToken(string _name, string _symbol, uint _initialSupply, uint _decimals, address _addr) public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:481:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function DAOPlayMarketTokenCrowdsale(address _token, address _multisigWallet, uint _start, uint _cap, uint[20] _price, uint _periodStage, uint _capPeriod) public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:43:7: Warning: Invoking events without "emit" prefix is deprecated.
      OwnershipTransferred(owner, newOwner);
      ^-----------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:192:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(msg.sender, _to, _value);
    ^-------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:210:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(_from, _to, _value);
    ^--------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:228:5: Warning: Invoking events without "emit" prefix is deprecated.
    Approval(msg.sender, _spender, _value);
    ^------------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:242:5: Warning: Invoking events without "emit" prefix is deprecated.
    Transfer(0, _to, _value);
    ^----------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:314:5: Warning: Invoking events without "emit" prefix is deprecated.
    UpdatedTokenInformation(name, symbol);
    ^-----------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:570:5: Warning: Invoking events without "emit" prefix is deprecated.
    Invested(receiver, weiAmount, tokenAmount);
    ^----------------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:630:5: Warning: Invoking events without "emit" prefix is deprecated.
    InvestedOtherCrypto(receiver, weiAmount, tokenAmount);
    ^---------------------------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:674:5: Warning: Invoking events without "emit" prefix is deprecated.
    DistributedTokens(msg.sender, amount);
    ^-----------------------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:714:5: Warning: Invoking events without "emit" prefix is deprecated.
    EndsAtChanged(endsAt);
    ^-------------------^
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:358:3: Warning: No visibility specified. Defaulting to "public". 
  function kill() onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:55:3: Warning: Function state mutability can be restricted to pure
  function sub(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:61:3: Warning: Function state mutability can be restricted to pure
  function add(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:67:3: Warning: Function state mutability can be restricted to pure
  function div(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:72:3: Warning: Function state mutability can be restricted to pure
  function mul(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:78:3: Warning: Function state mutability can be restricted to pure
  function min(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:83:3: Warning: Function state mutability can be restricted to pure
  function max(uint256 x, uint256 y) internal constant returns (uint256) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:793:3: Warning: Function state mutability can be restricted to pure
  function getAmountCap(uint value) private constant returns (uint ) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
Reentrancy in DAOPlayMarketTokenCrowdsale.finalize (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#707-713):
	External calls:
	- finalizeCrowdsale() (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#712)
	State variables written after the call(s):
	- finalized (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#712-713)
Reentrancy in DAOPlayMarketTokenCrowdsale.investInternal (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#537-594):
	External calls:
	- tokenAmount = calculateToken(weiAmount,stage,token.decimals()) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#546-549)
	State variables written after the call(s):
	- endsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#564-566)
	- stages (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#558-561)
	- stages (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#562-564)
	- tokensSold (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#584)
Reentrancy in DAOPlayMarketTokenCrowdsale.investOtherCrypto (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#600-650):
	External calls:
	- tokenAmount = calculateToken(weiAmount,stage,token.decimals()) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#612-614)
	State variables written after the call(s):
	- endsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#630)
	- stages (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#624-625)
	- stages (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#629)
	- tokensSold (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#646)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
amount in DAOPlayMarketTokenCrowdsale.distributionOfTokens (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#681) is a local variable never initialiazed
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[93m
DAOPlayMarketTokenCrowdsale.assignTokens (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#651-660) does not use the value returned by external calls:
	-token.mint(receiver,tokenAmount) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#658-659)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#494-526):
	External calls:
	- CAP = _cap * 10 ** token.decimals() (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#509-510)
	State variables written after the call(s):
	- periodStage (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#512-515)
Reentrancy in DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#494-526):
	External calls:
	- CAP = _cap * 10 ** token.decimals() (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#509-510)
	- capPeriod = _capPeriod * 10 ** token.decimals() (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#515-516)
	State variables written after the call(s):
	- endsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#524-526)
	- stage (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#526)
	- stages (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#518-522)
Reentrancy in DAOPlayMarketTokenCrowdsale.investInternal (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#537-594):
	External calls:
	- tokenAmount = calculateToken(weiAmount,stage,token.decimals()) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#546-549)
	State variables written after the call(s):
	- investedAmountOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#577-580)
	- investorCount (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#575-577)
	- tokenAmountOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#580-581)
	- tokenAmountOfPeriod (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#557-558)
	- weiRaised (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#583-584)
Reentrancy in DAOPlayMarketTokenCrowdsale.investOtherCrypto (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#600-650):
	External calls:
	- tokenAmount = calculateToken(weiAmount,stage,token.decimals()) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#612-614)
	State variables written after the call(s):
	- investedAmountOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#639-643)
	- investorCount (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#636-637)
	- tokenAmountOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#643-645)
	- tokenAmountOfPeriod (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#621-624)
	- weiRaised (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#645-646)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#494-526) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(_start >= block.timestamp) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#498)
DAOPlayMarketTokenCrowdsale.distributionOfTokens (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#678-701) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp >= endsAt) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#680)
DAOPlayMarketTokenCrowdsale.finalize (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#707-713) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp >= (endsAt + periodStage)) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#709-710)
DAOPlayMarketTokenCrowdsale.isCrowdsaleFull (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#726-734) uses timestamp for comparisons
	Dangerous comparisons:
	- tokensSold >= CAP || block.timestamp >= endsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#728-730)
DAOPlayMarketTokenCrowdsale.setEndsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#737-739) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(time >= block.timestamp) (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#739)
DAOPlayMarketTokenCrowdsale.getState (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#753-768) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp <= endsAt && block.timestamp >= startsAt && ! isCrowdsaleFull() (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#759-767)
	- address(token) == 0 || address(multisigWallet) == 0 || block.timestamp < startsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#754-767)
DAOPlayMarketTokenCrowdsale.getStage (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#808-815) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp >= stages[i].start && block.timestamp < stages[i].end (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#810-813)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#33-39) should be declared external
Ownable.acceptOwnership (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#42-51) should be declared external
ERC20.totalSupply (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#96-97) should be declared external
StandardToken.totalSupply (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#165-167) should be declared external
StandardToken.balanceOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#173-177) should be declared external
ERC20.balanceOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#97-98) should be declared external
StandardToken.allowance (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#182-187) should be declared external
ERC20.allowance (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#98-99) should be declared external
ERC20.transfer (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#99-100) should be declared external
StandardToken.transfer (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#189-202) should be declared external
StandardToken.transferFrom (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#205-220) should be declared external
ERC20.transferFrom (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#100-101) should be declared external
StandardToken.approve (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#222-238) should be declared external
ERC20.approve (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#101-102) should be declared external
ERC20.mint (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#102-103) should be declared external
StandardToken.mint (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#242-252) should be declared external
StandardToken.setCrowdsaleAgent (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#257-266) should be declared external
StandardToken.releaseTokenTransfer (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#268-274) should be declared external
DAOPlayMarketToken.setTokenInformation (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#323-333) should be declared external
Killable.kill (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#372-374) should be declared external
DAOPlayMarketTokenCrowdsale.fallback (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#529-531) should be declared external
DAOPlayMarketTokenCrowdsale.investOtherCrypto (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#600-650) should be declared external
DAOPlayMarketTokenCrowdsale.isBreakingCap (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#667-674) should be declared external
DAOPlayMarketTokenCrowdsale.distributionOfTokens (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#678-701) should be declared external
DAOPlayMarketTokenCrowdsale.finalize (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#707-713) should be declared external
DAOPlayMarketTokenCrowdsale.setEndsAt (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#737-739) should be declared external
DAOPlayMarketTokenCrowdsale.setMultisig (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#740-745) should be declared external
DAOPlayMarketTokenCrowdsale.setToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#748-749) should be declared external
DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#769-790) should be declared external
DAOPlayMarketTokenCrowdsale.setCryptoAgent (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol:
	- pragma solidity^0.4.15 (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#17-22) is not in mixedCase
Parameter '_newOwner' of Ownable.transferOwnership (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#33-34) is not in mixedCase
Parameter '_owner' of StandardToken.balanceOf (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#174) is not in mixedCase
Parameter '_owner' of StandardToken.allowance (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#183-184) is not in mixedCase
Parameter '_spender' of StandardToken.allowance (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#184) is not in mixedCase
Parameter '_to' of StandardToken.transfer (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#189-190) is not in mixedCase
Parameter '_value' of StandardToken.transfer (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#190) is not in mixedCase
Parameter '_from' of StandardToken.transferFrom (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#206) is not in mixedCase
Parameter '_to' of StandardToken.transferFrom (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#206) is not in mixedCase
Parameter '_value' of StandardToken.transferFrom (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#206) is not in mixedCase
Parameter '_spender' of StandardToken.approve (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#222-223) is not in mixedCase
Parameter '_value' of StandardToken.approve (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#223) is not in mixedCase
Parameter '_to' of StandardToken.mint (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#243) is not in mixedCase
Parameter '_value' of StandardToken.mint (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#244-247) is not in mixedCase
Parameter '_crowdsaleAgent' of StandardToken.setCrowdsaleAgent (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#257-259) is not in mixedCase
Variable 'StandardToken._totalSupply' (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#117-118) is not in mixedCase
Function 'DAOPlayMarketToken.DAOPlayMarketToken' (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#297-307) is not in mixedCase
Parameter '_name' of DAOPlayMarketToken.DAOPlayMarketToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#298) is not in mixedCase
Parameter '_symbol' of DAOPlayMarketToken.DAOPlayMarketToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#298-301) is not in mixedCase
Parameter '_initialSupply' of DAOPlayMarketToken.DAOPlayMarketToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#301-302) is not in mixedCase
Parameter '_decimals' of DAOPlayMarketToken.DAOPlayMarketToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#302) is not in mixedCase
Parameter '_addr' of DAOPlayMarketToken.DAOPlayMarketToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#302-303) is not in mixedCase
Parameter '_name' of DAOPlayMarketToken.setTokenInformation (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#323-325) is not in mixedCase
Parameter '_symbol' of DAOPlayMarketToken.setTokenInformation (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#325) is not in mixedCase
Function 'DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale' (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#494-526) is not in mixedCase
Parameter '_token' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#495) is not in mixedCase
Parameter '_multisigWallet' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#495) is not in mixedCase
Parameter '_start' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#495-496) is not in mixedCase
Parameter '_cap' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#496-497) is not in mixedCase
Parameter '_price' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#497) is not in mixedCase
Parameter '_periodStage' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#497) is not in mixedCase
Parameter '_capPeriod' of DAOPlayMarketTokenCrowdsale.DAOPlayMarketTokenCrowdsale (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#497-498) is not in mixedCase
Parameter '_weiAmount' of DAOPlayMarketTokenCrowdsale.investOtherCrypto (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#602) is not in mixedCase
Parameter '_price' of DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#770) is not in mixedCase
Parameter '_startDate' of DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#770) is not in mixedCase
Parameter '_periodStage' of DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#770-771) is not in mixedCase
Parameter '_cap' of DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#771) is not in mixedCase
Parameter '_decimals' of DAOPlayMarketTokenCrowdsale.setBasePrice (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#771) is not in mixedCase
Parameter '_stage' of DAOPlayMarketTokenCrowdsale.calculateToken (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#836-837) is not in mixedCase
Parameter '_cryptoAgent' of DAOPlayMarketTokenCrowdsale.setCryptoAgent (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol) is not in mixedCase
Variable 'DAOPlayMarketTokenCrowdsale.CAP' (/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol#404) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/7/0x1818403c06ed28c55d533b526ae8566ec31d87d3.sol analyzed (8 contracts), 88 result(s) found