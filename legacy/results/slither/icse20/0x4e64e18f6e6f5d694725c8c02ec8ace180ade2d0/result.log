INFO:Slither:Compilation warnings/errors on /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:6:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:11:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:16:30: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (newOwner == 0x0) throw;
                             ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:46:21: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
    if (!assertion) throw;
                    ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:152:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ICloudSecToken() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:187:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value < CLOUDForGas) throw;                                      // Prevents drain and spam
                                  ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:206:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
                    if(!msg.sender.send(gasForCLOUD)) throw;                  // Send eth to sender
                                                      ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:209:48: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
                    if(!_to.send(gasForCLOUD)) throw;                         // Send eth to recipient
                                               ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:212:18: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        } else { throw; }
                 ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:218:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (buyPriceEth == 0 || msg.value < buyPriceEth) throw;             // Avoid dividing 0, sending small amounts and spam
                                                         ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:220:38: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balances[this] < amount) throw;                                 // Check if it has enough to sell
                                     ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:230:56: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (sellPriceEth == 0 || amount < CLOUDForGas) throw;                 // Avoid selling and spam
                                                       ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:231:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balances[msg.sender] < amount) throw;                           // Check if the sender has enough to sell
                                           ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:233:58: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (safeSub(this.balance, revenue) < gasReserve) throw;             // Keep min amount of eth in contract to provide gas for transactions
                                                         ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:235:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;                                                          // To do this last to avoid recursion attacks
            ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:249:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;                                                          // To do this last to avoid recursion attacks
            ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:253:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balances[this] < CLOUD) throw;                                    // Check if it has enough to sell
                                    ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:263:38: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            if (!directTradeAllowed) throw;
                                     ^---^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:45:3: Warning: This declaration shadows a builtin symbol.
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:102:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(msg.sender, _to, _value);
            ^-------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:112:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(_from, _to, _value);
            ^--------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:123:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _value);
        ^------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:198:17: Warning: Invoking events without "emit" prefix is deprecated.
                Transfer(msg.sender, _to, _value);                          // Notify anyone listening that this transfer took place
                ^-------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:203:17: Warning: Invoking events without "emit" prefix is deprecated.
                Transfer(msg.sender, _to, safeSub(_value, CLOUDForGas));      // Notify anyone listening that this transfer took place
                ^-----------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:223:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(this, msg.sender, amount);                                 // Execute an event reflecting the change
        ^--------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:233:21: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        if (safeSub(this.balance, revenue) < gasReserve) throw;             // Keep min amount of eth in contract to provide gas for transactions
                    ^----------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:239:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(this, msg.sender, revenue);                            // Execute an event reflecting on the change
            ^---------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:251:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(this, msg.sender, eth);                                // Execute an event reflecting on the change
            ^-----------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:256:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(this, msg.sender, CLOUD);                                    // Execute an event reflecting the change
        ^-------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:6:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:15:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:66:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint256 balance);
    ^--------------------------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:72:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success);
    ^--------------------------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:79:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
    ^---------------------------------------------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:85:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) returns (bool success);
    ^------------------------------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:90:5: Warning: No visibility specified. Defaulting to "public". 
    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
    ^----------------------------------------------------------------------------------------^
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:98:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:107:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:117:5: Warning: No visibility specified. Defaulting to "public". 
    function balanceOf(address _owner) constant returns (uint256 balance) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:121:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:127:5: Warning: No visibility specified. Defaulting to "public". 
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:152:5: Warning: No visibility specified. Defaulting to "public". 
    function ICloudSecToken() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:158:5: Warning: No visibility specified. Defaulting to "public". 
    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:162:5: Warning: No visibility specified. Defaulting to "public". 
    function setGasForCLOUD(uint newGasAmountInWei) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:165:5: Warning: No visibility specified. Defaulting to "public". 
    function setCLOUDForGas(uint newCLOUDAmount) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:168:5: Warning: No visibility specified. Defaulting to "public". 
    function setGasReserve(uint newGasReserveInWei) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:171:5: Warning: No visibility specified. Defaulting to "public". 
    function setMinBalance(uint minimumBalanceInWei) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:177:5: Warning: No visibility specified. Defaulting to "public". 
    function haltDirectTrade() onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:180:5: Warning: No visibility specified. Defaulting to "public". 
    function unhaltDirectTrade() onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:186:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:217:5: Warning: No visibility specified. Defaulting to "public". 
    function buyICloudSecsAgainstEther() payable returns (uint amount) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:229:5: Warning: No visibility specified. Defaulting to "public". 
    function sellICloudSecsAgainstEther(uint256 amount) returns (uint revenue) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:246:5: Warning: No visibility specified. Defaulting to "public". 
    function refundToOwner (uint256 amountOfEth, uint256 CLOUD) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:261:5: Warning: No visibility specified. Defaulting to "public". 
    function() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:45:3: Warning: Function state mutability can be restricted to pure
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
ICloudSecToken.totalSupply (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#142) shadows:
	- Token.totalSupply (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#64)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variable-shadowing-from-abstract-contracts[0m
INFO:Detectors:[92m
SafeMath.assert (function @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#46-51) shadows built-in symbol "assert"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
ICloudSecToken.decimals should be constant (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#141)
ICloudSecToken.name should be constant (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#138)
ICloudSecToken.symbol should be constant (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#139)
ICloudSecToken.totalSupply should be constant (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#142)
Token.totalSupply should be constant (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#64)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#17:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#12:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#51:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#189:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#209:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#217:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#218:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#220:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#222:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#232:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#233:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#235:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#237:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#252:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#255:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
owned.transferOwnership (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#15-23) should be declared external
StandardToken.balanceOf (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#121-122) should be declared external
Token.balanceOf (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#66-69) should be declared external
Token.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#73-74) should be declared external
ICloudSecToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#188-218) should be declared external
StandardToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#99-108) should be declared external
StandardToken.transferFrom (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#108-119) should be declared external
Token.transferFrom (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#79-82) should be declared external
StandardToken.approve (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#122-128) should be declared external
Token.approve (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#87-88) should be declared external
Token.allowance (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#90-93) should be declared external
StandardToken.allowance (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#128-135) should be declared external
ICloudSecToken.setEtherPrices (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#159-165) should be declared external
ICloudSecToken.setGasForCLOUD (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#165-168) should be declared external
ICloudSecToken.setCLOUDForGas (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#168-171) should be declared external
ICloudSecToken.setGasReserve (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#171-176) should be declared external
ICloudSecToken.setMinBalance (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#176-180) should be declared external
ICloudSecToken.haltDirectTrade (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#185) should be declared external
ICloudSecToken.unhaltDirectTrade (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#185-186) should be declared external
ICloudSecToken.refundToOwner (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#249-264) should be declared external
ICloudSecToken.fallback (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol:
	- pragma solidity^0.4.8 (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Contract 'owned' (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#3-23) is not in CapWords
Parameter '_owner' of StandardToken.balanceOf (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#121) is not in mixedCase
Parameter '_to' of StandardToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#99) is not in mixedCase
Parameter '_value' of StandardToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#99) is not in mixedCase
Parameter '_from' of StandardToken.transferFrom (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#108) is not in mixedCase
Parameter '_to' of StandardToken.transferFrom (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#108) is not in mixedCase
Parameter '_value' of StandardToken.transferFrom (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#108) is not in mixedCase
Parameter '_spender' of StandardToken.approve (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#123) is not in mixedCase
Parameter '_value' of StandardToken.approve (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#123) is not in mixedCase
Parameter '_owner' of StandardToken.allowance (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#131) is not in mixedCase
Parameter '_spender' of StandardToken.allowance (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#131) is not in mixedCase
Parameter '_to' of ICloudSecToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#188) is not in mixedCase
Parameter '_value' of ICloudSecToken.transfer (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#188) is not in mixedCase
Function 'ICloudSecToken.ICloudSecToken' (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#157-159) is not in mixedCase
Parameter 'CLOUD' of ICloudSecToken.refundToOwner (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#249) is not in mixedCase
Variable 'ICloudSecToken.ICloudSecAddress' (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#140) is not in mixedCase
Variable 'ICloudSecToken.CLOUDForGas' (/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol#146) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/14/0x4e64e18f6e6f5d694725c8c02ec8ace180ade2d0.sol analyzed (5 contracts), 58 result(s) found