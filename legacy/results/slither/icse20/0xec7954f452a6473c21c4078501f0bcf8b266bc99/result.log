INFO:Slither:Compilation warnings/errors on /unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:
[91m/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version[0m
pragma solidity 0.4.8;
^--------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:7:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:12:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:34:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function token(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:48:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;     // Prevents accidental sending of ether
        ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:68:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function ProgressiveToken(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:110:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;                          // Check if the sender has enough balance
                                            ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:111:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;                // Check for overflows
                                                      ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:113:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(currentSupply + reward > totalSupply ) throw;                    //check for totalSupply.
                                                  ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:124:59: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            if(currentSupply + mintedAmount> totalSupply) throw;             // check for total supply.
                                                          ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:141:39: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell
                                      ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:143:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply
                                                  ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:153:46: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell
                                             ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:155:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply.
                                                  ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:162:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;                                         // to do this last to prevent recursion attacks
            ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:175:37: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (n < bytes8(difficulty)) throw;                   // Check if it's under the difficulty
                                    ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:178:46: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (timeSinceLastProof <  5 seconds) throw;          // Rewards cannot be given too quickly
                                             ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:180:51: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(currentSupply + reward > totalSupply ) throw;     //Check for totalSupply
                                                  ^---^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:72:9: Warning: This declaration shadows an existing declaration.
        uint256 initialSupply,
        ^-------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:57:5: The shadowed declaration is here:
    uint256 internal initialSupply;                           // initial number of tokens.
    ^----------------------------^

/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:73:9: Warning: This declaration shadows an existing declaration.
        uint256 sellPrice,
        ^---------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:58:5: The shadowed declaration is here:
    uint256 public sellPrice;                                 // price of coin wrt ether at time of selling coins
    ^----------------------^

/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:74:9: Warning: This declaration shadows an existing declaration.
        uint256 buyPrice,
        ^--------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:59:5: The shadowed declaration is here:
    uint256 public buyPrice;                                  // price of coin wrt ether at time of buying coins
    ^---------------------^

/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:116:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                                  // Notify anyone listening that this transfer took  
        ^-------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:127:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(0, owner, mintedAmount);
            ^------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:128:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(owner, target, mintedAmount);
            ^-----------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:148:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(this, msg.sender, amount);                // execute an event reflecting the change
        ^--------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:164:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change
            ^--------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:174:27: Warning: "sha3" has been deprecated in favour of "keccak256"
        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input
                          ^---------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:174:27: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input
                          ^---------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:185:28: Warning: "sha3" has been deprecated in favour of "keccak256"
        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof
                           ^------------------------------------------------------------^
/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:185:28: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof
                           ^------------------------------------------------------------^

INFO:SlitherSolcParsing:No contract were found in /unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol, check the correct compilation
WARNING:Slither:[91mNo contract was analyzed[0m
INFO:Slither:/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol analyzed (0 contracts), 0 result(s) found