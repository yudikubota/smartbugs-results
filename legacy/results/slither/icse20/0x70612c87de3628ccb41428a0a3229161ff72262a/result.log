INFO:Slither:Compilation warnings/errors on /unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:34:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:94:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Destructible() public payable { }
  ^----------------------------------------^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:699:3: Warning: Variable is shadowed in inline assembly by an instruction of the same name
  function stop() public onlyOwner {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:54:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:587:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
    return uint(keccak256(block.blockhash(block.number - 1), now, numCharacters, nonce));
                ^---------------------------------------------------------------------^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:543:3: Warning: No visibility specified. Defaulting to "public". 
  function isValidAdversary(uint8 characterType, uint8 adversaryType) pure returns (bool) {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:587:27: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
    return uint(keccak256(block.blockhash(block.number - 1), now, numCharacters, nonce));
                          ^-------------^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:791:59: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function receiveApproval(address sender, uint256 value, address tokenContract, bytes callData) public {
                                                          ^-------------------^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:979:21: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.
  function toUint32(bytes b) internal pure returns(uint32) {
                    ^-----^
/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol:705:3: Warning: Function state mutability can be restricted to pure
  function generateLuckFactor(uint128 nonce) internal view returns(uint128) {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
DragonKing.toUint32 (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol) is declared view but contains assembly code
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#constant-functions-changing-the-state[0m
INFO:Detectors:[93m
DragonKing.exit (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#343-382) uses a dangerous strict equality:
	- characters[ids[i]].owner == msg.sender && characters[ids[i]].purchaseTimestamp + 86400 < now && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)
	- nchars > 0 && characters[ids[nchars - 1]].owner == msg.sender && characters[ids[nchars - 1]].purchaseTimestamp + 86400 < now && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)
DragonKing.exit (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#343-382) uses a dangerous strict equality:
	- characters[ids[i]].owner == msg.sender && characters[ids[i]].purchaseTimestamp + 86400 < now && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)
	- nchars > 0 && characters[ids[nchars - 1]].owner == msg.sender && characters[ids[nchars - 1]].purchaseTimestamp + 86400 < now && (characters[ids[i]].characterType < BALLOON_MIN_TYPE || characters[ids[i]].characterType > BALLOON_MAX_TYPE)
DragonKing.sellCharacter (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#784-801) uses a dangerous strict equality:
	- require(bool,string)(msg.sender == characters[characterId].owner,only owners can sell their characters)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in DragonKing._addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324):
	External calls:
	- amount = uint16(msg.value / config.costs(characterType)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#289-290)
	- require(bool,string)(config.hasEnoughTokensToPurchase(receiver,characterType),insufficinet amount of tokens to purchase a given type of character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#292-295)
	- characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#295-299)
	- characters[nid + i] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#308-309)
	State variables written after the call(s):
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#307-308)
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#312-313)
Reentrancy in DragonKing._addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324):
	External calls:
	- amount = uint16(msg.value / config.costs(characterType)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#289-290)
	- require(bool,string)(config.hasEnoughTokensToPurchase(receiver,characterType),insufficinet amount of tokens to purchase a given type of character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#292-295)
	- characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#295-299)
	- characters[nid + i] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#308-309)
	- characters[nid + j] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#319-321)
	State variables written after the call(s):
	- nextId (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#321-323)
Reentrancy in DragonKing.distributeCastleLoot (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#737-776):
	External calls:
	- require(bool,string)(now >= lastCastleLootDistributionTimestamp + config.castleLootDistributionThreshold(),not enough time passed since the last castle loot distribution) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#738-741)
	State variables written after the call(s):
	- lastCastleLootDistributionTimestamp (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#741-742)
Reentrancy in DragonKing.fight (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#456-547):
	External calls:
	- require(bool,string)(cooldown[characterID] + config.CooldownThreshold() <= now,not enough time passed since the last fight of this character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#462-466)
	- luckToken.balanceOf(msg.sender) >= config.luckThreshold() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#478-485)
	- characterPower = sklToken.balanceOf(character.owner) / 10 ** 15 + xperToken.balanceOf(character.owner) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#485-487)
	- adversaryPower = sklToken.balanceOf(adversary.owner) / 10 ** 15 + xperToken.balanceOf(adversary.owner) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#488-490)
	- base_probability += uint16(100 / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#493)
	- base_probability -= uint16(100 / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#496-498)
	- base_probability -= uint16((100 * adversary.value) / character.value / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#499-503)
	- base_probability += uint16((100 * character.value) / adversary.value / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#504-508)
	State variables written after the call(s):
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#511-513)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#518-520)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#524-525)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#539-540)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#541-542)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#545-546)
	- cooldown (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#515)
	- cooldown (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#533)
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#511-513)
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#541-542)
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#515)
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#543)
Reentrancy in DragonKing.receiveApproval (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#807-866):
	External calls:
	- require(bool,string)(characters[id].value == config.values(cType),protection could be bought only before the first fight and before the first volcano eruption) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#826-829)
	- lifePrice = ((cType % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#836-837)
	- lifePrice = (((cType + 3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() * 2 (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#844)
	- lifePrice = (((cType + 3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() * 2 (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#847-849)
	- lifePrice = (((cType + 3) % NUMBER_OF_LEVELS) + 1) * config.protectionPrice() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#852-853)
	- assert(bool)(neverdieToken.transferFrom(sender,this,price)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#857-862)
	State variables written after the call(s):
	- protection (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#862)
Reentrancy in DragonKing.triggerVolcanoEruption (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#405-447):
	External calls:
	- require(bool,string)(now >= lastEruptionTimestamp + config.eruptionThreshold(),not enough time passed since last eruption) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#406-408)
	State variables written after the call(s):
	- lastEruptionTimestamp (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#410-411)
Reentrancy in DragonKing.triggerVolcanoEruption (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#405-447):
	External calls:
	- require(bool,string)(now >= lastEruptionTimestamp + config.eruptionThreshold(),not enough time passed since last eruption) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#406-408)
	- howmany = nchars * config.percentageToKill() / 100 (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#415-417)
	State variables written after the call(s):
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#442-443)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[93m
lifePrice in DragonKing.receiveApproval (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#833) is a local variable never initialiazed
pot in DragonKing.triggerVolcanoEruption (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#411-412) is a local variable never initialiazed
archersCount in DragonKing.distributeCastleLoot (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#753) is a local variable never initialiazed
base_probability in DragonKing.fight (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#478) is a local variable never initialiazed
valueSum in DragonKing.distributeCastleLoot (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#749-752) is a local variable never initialiazed
playerBalance in DragonKing.exit (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#344) is a local variable never initialiazed
max in DragonKing.receiveApproval (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#834) is a local variable never initialiazed
valueSum in DragonKing.distribute (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#656) is a local variable never initialiazed
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#uninitialized-local-variables[0m
INFO:Detectors:[92m
DragonKing._addCharacters has external calls inside a loop:
	- characters[nid + i] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#308-309)
DragonKing._addCharacters has external calls inside a loop:
	- characters[nid + j] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#319-321)
DragonKing.distribute has external calls inside a loop:
	- shares[m] = amount * config.values(m) / valueSum / numCharactersXType[m] (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#665-668)
DragonKing.distribute has external calls inside a loop:
	- valueSum += config.values(v) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#663)
DragonKing.payOut has external calls inside a loop:
	- characters[ids[i]].owner.transfer(characters[ids[i]].value) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#721-722)
DragonKing.distributeCastleLoot has external calls inside a loop:
	- shares[j] = amount * config.values(ARCHER_MIN_TYPE + j) / valueSum (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#770)
DragonKing.distributeCastleLoot has external calls inside a loop:
	- valueSum += config.values(cType) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#765-767)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
Reentrancy in DragonKing._addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324):
	External calls:
	- amount = uint16(msg.value / config.costs(characterType)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#289-290)
	- require(bool,string)(config.hasEnoughTokensToPurchase(receiver,characterType),insufficinet amount of tokens to purchase a given type of character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#292-295)
	- characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#295-299)
	State variables written after the call(s):
	- oldest (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#304-306)
Reentrancy in DragonKing._addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324):
	External calls:
	- amount = uint16(msg.value / config.costs(characterType)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#289-290)
	- require(bool,string)(config.hasEnoughTokensToPurchase(receiver,characterType),insufficinet amount of tokens to purchase a given type of character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#292-295)
	- characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#295-299)
	- characters[nid + i] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#308-309)
	State variables written after the call(s):
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#308-309)
	- numCharactersXType (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#309-312)
Reentrancy in DragonKing._addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324):
	External calls:
	- amount = uint16(msg.value / config.costs(characterType)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#289-290)
	- require(bool,string)(config.hasEnoughTokensToPurchase(receiver,characterType),insufficinet amount of tokens to purchase a given type of character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#292-295)
	- characterType >= INVALID_CHARACTER_TYPE || msg.value < config.costs(characterType) || nchars + amount > config.maxCharacters() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#295-299)
	- characters[nid + j] = Character(characterType,config.values(characterType),receiver,uint64(now),0) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#319-321)
	State variables written after the call(s):
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#319-321)
Reentrancy in DragonKing.distributeCastleLoot (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#737-776):
	External calls:
	- require(bool,string)(now >= lastCastleLootDistributionTimestamp + config.castleLootDistributionThreshold(),not enough time passed since the last castle loot distribution) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#738-741)
	State variables written after the call(s):
	- castleTreasury (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#773)
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#771-773)
Reentrancy in DragonKing.fight (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#456-547):
	External calls:
	- require(bool,string)(cooldown[characterID] + config.CooldownThreshold() <= now,not enough time passed since the last fight of this character) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#462-466)
	- luckToken.balanceOf(msg.sender) >= config.luckThreshold() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#478-485)
	- characterPower = sklToken.balanceOf(character.owner) / 10 ** 15 + xperToken.balanceOf(character.owner) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#485-487)
	- adversaryPower = sklToken.balanceOf(adversary.owner) / 10 ** 15 + xperToken.balanceOf(adversary.owner) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#488-490)
	- base_probability += uint16(100 / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#493)
	- base_probability -= uint16(100 / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#496-498)
	- base_probability -= uint16((100 * adversary.value) / character.value / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#499-503)
	- base_probability += uint16((100 * character.value) / adversary.value / config.fightFactor()) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#504-508)
	State variables written after the call(s):
	- castleTreasury (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#523)
	- castleTreasury (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#544-545)
	- numCharactersXType (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#511-513)
	- numCharactersXType (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#541-542)
	- oldest (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#511-513)
	- oldest (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#541-542)
	- oldest (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#546)
	- protection (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#511-513)
	- protection (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#541-542)
Reentrancy in DragonKing.receiveApproval (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#807-866):
	External calls:
	- price = config.teleportPrice() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#810-812)
	- assert(bool)(teleportToken.transferFrom(sender,this,price)) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#819-820)
	State variables written after the call(s):
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#820-821)
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#820-821)
	- numCharactersXType (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#820-821)
	- teleported (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#820-821)
Reentrancy in DragonKing.stop (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#724-725):
	External calls:
	- withdraw() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#725)
	External calls sending eth:
	- payOut() (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#725)
	State variables written after the call(s):
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#725)
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#725)
	- numCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#725)
Reentrancy in DragonKing.triggerVolcanoEruption (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#405-447):
	External calls:
	- require(bool,string)(now >= lastEruptionTimestamp + config.eruptionThreshold(),not enough time passed since last eruption) (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#406-408)
	- howmany = nchars * config.percentageToKill() / 100 (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#415-417)
	State variables written after the call(s):
	- characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#435)
	- ids (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#435)
	- numCharactersXType (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#435)
	- oldest (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#435)
	- protection (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#435)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
DragonKing.toUint32 uses assembly (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol)
	- /unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#assembly-usage[0m
INFO:Detectors:[92m
DragonKingConfig.castleLootDistributionThreshold should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#127-129)
DragonKingConfig.eruptionThreshold should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#126)
DragonKingConfig.fee should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#123)
DragonKingConfig.fightFactor should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#137)
DragonKingConfig.giftTokenAmount should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#117)
DragonKingConfig.luckThreshold should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#143-144)
DragonKingConfig.maxCharacters should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#124-125)
DragonKingConfig.percentageToKill should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#131)
DragonKingConfig.protectionPrice should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#141)
DragonKingConfig.teleportPrice should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#139-141)
ERC20Basic.totalSupply should be constant (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#69-70)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#599-600:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#52-60) should be declared external
ERC20Basic.balanceOf (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#70) should be declared external
ERC20Basic.transfer (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#71) should be declared external
ERC20.allowance (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#81-82) should be declared external
ERC20.transferFrom (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#82-84) should be declared external
ERC20.approve (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#84-85) should be declared external
Destructible.destroyAndSend (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#108-112) should be declared external
DragonKing.giftCharacter (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#275-280) should be declared external
DragonKing.addCharacters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#284-287) should be declared external
DragonKing.exit (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#343-382) should be declared external
DragonKing.triggerVolcanoEruption (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#405-447) should be declared external
DragonKing.fight (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#456-547) should be declared external
DragonKing.collectFees (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#689-699) should be declared external
DragonKing.stop (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#724-725) should be declared external
DragonKing.sellCharacter (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#784-801) should be declared external
DragonKing.receiveApproval (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#807-866) should be declared external
DragonKing.getCharacter (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#902-906) should be declared external
DragonKing.get10Characters (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#930-945) should be declared external
DragonKing.getNumDragons (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#948-955) should be declared external
DragonKing.getNumWizards (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#958-967) should be declared external
DragonKing.getNumArchers (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#972-979) should be declared external
DragonKing.getNumKnights (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol) should be declared external
DragonKing.setConfig (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#35-40) is not in mixedCase
Function 'Destructible.Destructible' (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#97-98) is not in mixedCase
Parameter '_recipient' of Destructible.destroyAndSend (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#108-111) is not in mixedCase
Constant 'DragonKingConfig.CooldownThreshold' (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#132-134) is not in UPPER_CASE_WITH_UNDERSCORES
Parameter '_configAddress' of DragonKing. (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#261) is not in mixedCase
Function 'DragonKing._addCharacters' (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#287-324) is not in mixedCase
Parameter '_value' of DragonKing.setConfig (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol) is not in mixedCase
Constant 'DragonKing.noKing' (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#201-203) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
DragonKingConfig.fee (/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol#123) is never used in DragonKingConfig
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-state-variables[0m
INFO:Slither:/unique_chucks/4/0x70612c87de3628ccb41428a0a3229161ff72262a.sol analyzed (6 contracts), 68 result(s) found