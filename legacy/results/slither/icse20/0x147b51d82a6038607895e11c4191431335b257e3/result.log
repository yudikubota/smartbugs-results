INFO:Slither:Compilation warnings/errors on /unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:50:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Owned() public { owner = msg.sender;}
    ^--------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:113:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function EPRX() public { 
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:13:2: Warning: Functions in interfaces should be declared external.
	function balanceOf(address _owner) public view returns (uint256);
	^---------------------------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:19:2: Warning: Functions in interfaces should be declared external.
	function transfer(address _to, uint256 _value) public returns (bool);
	^-------------------------------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:26:2: Warning: Functions in interfaces should be declared external.
	function transferFrom(address _from, address _to, uint256 _value) public returns (bool);
	^--------------------------------------------------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:32:2: Warning: Functions in interfaces should be declared external.
	function approve(address _spender, uint256 _value) public returns (bool);
	^-----------------------------------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:37:2: Warning: Functions in interfaces should be declared external.
	function allowance(address _owner, address _spender) public view returns (uint256);
	^---------------------------------------------------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:179:3: Warning: Invoking events without "emit" prefix is deprecated.
		Transfer(_from, _to, _amount);
		^---------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:209:9: Warning: Invoking events without "emit" prefix is deprecated.
        Approval(msg.sender, _spender, _amount);
        ^-------------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:245:28: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
            owner.transfer(this.balance);
                           ^----------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:252:9: Warning: Invoking events without "emit" prefix is deprecated.
        ClaimedTokens(_token, owner, balance);
        ^-----------------------------------^
/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:274:13: Warning: Invoking events without "emit" prefix is deprecated.
            SwappedTokens(msg.sender, oldTokenBalance, newTokenAmount);
            ^--------------------------------------------------------^

INFO:Detectors:[93m
EPRX.doTransfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#170-186) uses a dangerous strict equality:
	- _amount == 0
EPRX.doTransfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#170-186) uses a dangerous strict equality:
	- _amount == 0
EPRX.swapProxyTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#263-279) uses a dangerous strict equality:
	- require(bool)(oldToken.balanceOf(msg.sender) == 0)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
EPRX.claimTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#250-258) does not use the value returned by external calls:
	-token.transfer(owner,balance) (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#257-258)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-return[0m
INFO:Detectors:[92m
Reentrancy in EPRX.swapProxyTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#263-279):
	External calls:
	- oldTokenBalance = oldToken.balanceOf(msg.sender) (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#266)
	- oldToken.transferFrom(msg.sender,issuingTokenOwner,oldTokenBalance) (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#272-279)
	- require(bool)(oldToken.balanceOf(msg.sender) == 0) (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#274-277)
	State variables written after the call(s):
	- balanceOf (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
ERC20Token.balanceOf (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#13-15) should be declared external
EPRX.balanceOf (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#190-192) should be declared external
ERC20Token.transfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#19-21) should be declared external
EPRX.transfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#129-136) should be declared external
ERC20Token.transferFrom (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#26-28) should be declared external
EPRX.transferFrom (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#143-159) should be declared external
EPRX.approve (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#200-216) should be declared external
ERC20Token.approve (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#32-34) should be declared external
ERC20Token.allowance (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#37-39) should be declared external
EPRX.allowance (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#228-230) should be declared external
Owned.changeOwner (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#54-61) should be declared external
EPRX.enableTransfers (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#238-240) should be declared external
EPRX.claimTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#250-258) should be declared external
EPRX.swapProxyTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#263-279) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol:
	- pragma solidity^0.4.18 (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Owned.Owned' (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#52) is not in mixedCase
Parameter '_newOwner' of Owned.changeOwner (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#55-56) is not in mixedCase
Parameter '_owner' of EPRX.balanceOf (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#191) is not in mixedCase
Parameter '_to' of EPRX.transfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#129-130) is not in mixedCase
Parameter '_amount' of EPRX.transfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#130-131) is not in mixedCase
Parameter '_from' of EPRX.transferFrom (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#143) is not in mixedCase
Parameter '_to' of EPRX.transferFrom (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#144) is not in mixedCase
Parameter '_amount' of EPRX.transferFrom (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#144) is not in mixedCase
Parameter '_spender' of EPRX.approve (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#200-202) is not in mixedCase
Parameter '_amount' of EPRX.approve (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#202) is not in mixedCase
Parameter '_owner' of EPRX.allowance (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#228) is not in mixedCase
Parameter '_spender' of EPRX.allowance (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#228) is not in mixedCase
Function 'EPRX.EPRX' (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#115-123) is not in mixedCase
Parameter '_from' of EPRX.doTransfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#170) is not in mixedCase
Parameter '_to' of EPRX.doTransfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#170-171) is not in mixedCase
Parameter '_amount' of EPRX.doTransfer (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#171) is not in mixedCase
Parameter '_transfersEnabled' of EPRX.enableTransfers (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#239) is not in mixedCase
Parameter '_token' of EPRX.claimTokens (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#250) is not in mixedCase
Constant 'EPRX.totalSupply' (/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol#93) is not in UPPER_CASE_WITH_UNDERSCORES
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0x147b51d82a6038607895e11c4191431335b257e3.sol analyzed (4 contracts), 38 result(s) found