INFO:Slither:Compilation warnings/errors on /unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol:
/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol:119:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function EtherCartel() public {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
EtherCartel.BuyUpgrade (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#456-468) uses a dangerous strict equality:
	- require(bool)(miners[msg.sender].hasUpgrade[idx] == 0)
EtherCartel.BuyUpgrade (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#456-468) uses a dangerous strict equality:
	- require(bool)(miners[msg.sender].hasUpgrade[idx] == 0)
EtherCartel.StartNewMiner (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#349-370) uses a dangerous strict equality:
	- require(bool)(miners[msg.sender].lastUpdateTime == 0)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[92m
EtherCartel.StartNewMiner (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#349-370) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(miners[msg.sender].lastUpdateTime == 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#351-352)
EtherCartel.UpdateMoney (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#418-437) uses timestamp for comparisons
	Dangerous comparisons:
	- revenue > 0 (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#433-436)
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#420-423)
	- require(bool)(block.timestamp >= miners[msg.sender].lastUpdateTime) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#424-427)
EtherCartel.UpdateMoneyAt (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#438-456) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp >= miners[addr].lastUpdateTime) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#444-446)
	- revenue > 0 (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#451-456)
	- require(bool)(miners[addr].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#440-444)
EtherCartel.BuyUpgrade (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#456-468) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(miners[msg.sender].hasUpgrade[idx] == 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#461)
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#461-462)
EtherCartel.BuyBooster (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#475-508) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#479)
EtherCartel.Attack (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#543-628) uses timestamp for comparisons
	Dangerous comparisons:
	- (count * troopData[i].attackPower) > defensepower (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#597-600)
	- attackpower > defensepower (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#573-628)
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#545-547)
	- require(bool)(miners[defenderAddr].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#547-549)
	- require(bool)(block.timestamp > attacker.exhaustTime) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#553-554)
	- defender.immunityTime < block.timestamp + 14400 (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#573-577)
	- require(bool)(block.timestamp > defender.immunityTime) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#554)
	- (count * troopData[i].defensePower) > attackpower (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#619-622)
	- attacker.immunityTime > block.timestamp (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#557-560)
EtherCartel.ReleaseICO (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#635-658) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(nextPotDistributionTime <= block.timestamp) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#639-641)
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#636-639)
EtherCartel.FundICO (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#659-673) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#660-661)
EtherCartel.WithdrawICOEarnings (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#673-695) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(miners[msg.sender].lastUpdateTime != 0) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#677-679)
	- require(bool)(miners[msg.sender].lastPotClaimIndex < cycleCount) (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#679-680)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#block-timestamp[0m
INFO:Detectors:[92m
EtherCartel.GetMinerData (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#172-201) should be declared external
EtherCartel.GetTotalMinerCount (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#202-207) should be declared external
EtherCartel.GetMinerAt (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#207-210) should be declared external
EtherCartel.GetPotInfo (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#210-220) should be declared external
EtherCartel.GetGlobalProduction (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#240-250) should be declared external
EtherCartel.GetBoosterData (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#251-264) should be declared external
EtherCartel.GetPVPData (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#271-293) should be declared external
EtherCartel.GetCurrentICOCycle (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#293-298) should be declared external
EtherCartel.GetICOData (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#299-309) should be declared external
EtherCartel.GetMinerICOData (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#309-325) should be declared external
EtherCartel.GetMinerUnclaimedICOShare (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#325-345) should be declared external
EtherCartel.WithdrawPotShare (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol) should be declared external
EtherCartel.WithdrawDevFunds (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol) should be declared external
EtherCartel.fallback (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol:
	- pragma solidity^0.4.18 (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'EtherCartel.EtherCartel' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#122-169) is not in mixedCase
Function 'EtherCartel.GetMinerData' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#172-201) is not in mixedCase
Function 'EtherCartel.GetTotalMinerCount' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#202-207) is not in mixedCase
Function 'EtherCartel.GetMinerAt' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#207-210) is not in mixedCase
Function 'EtherCartel.GetPotInfo' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#210-220) is not in mixedCase
Function 'EtherCartel.GetProductionPerSecond' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#220-239) is not in mixedCase
Function 'EtherCartel.GetGlobalProduction' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#240-250) is not in mixedCase
Function 'EtherCartel.GetBoosterData' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#251-264) is not in mixedCase
Function 'EtherCartel.HasBooster' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#266-271) is not in mixedCase
Function 'EtherCartel.GetPVPData' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#271-293) is not in mixedCase
Function 'EtherCartel.GetCurrentICOCycle' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#293-298) is not in mixedCase
Function 'EtherCartel.GetICOData' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#299-309) is not in mixedCase
Function 'EtherCartel.GetMinerICOData' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#309-325) is not in mixedCase
Function 'EtherCartel.GetMinerUnclaimedICOShare' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#325-345) is not in mixedCase
Function 'EtherCartel.StartNewMiner' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#349-370) is not in mixedCase
Function 'EtherCartel.UpgradeRig' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#370-393) is not in mixedCase
Function 'EtherCartel.UpgradeRigETH' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#394-418) is not in mixedCase
Function 'EtherCartel.UpdateMoney' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#418-437) is not in mixedCase
Function 'EtherCartel.UpdateMoneyAt' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#438-456) is not in mixedCase
Function 'EtherCartel.BuyUpgrade' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#456-468) is not in mixedCase
Function 'EtherCartel.BuyBooster' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#475-508) is not in mixedCase
Function 'EtherCartel.BuyTroop' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#513-543) is not in mixedCase
Function 'EtherCartel.Attack' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#543-628) is not in mixedCase
Function 'EtherCartel.ReleaseICO' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#635-658) is not in mixedCase
Function 'EtherCartel.FundICO' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#659-673) is not in mixedCase
Function 'EtherCartel.WithdrawICOEarnings' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#673-695) is not in mixedCase
Function 'EtherCartel.BuyHandler' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol#706-718) is not in mixedCase
Function 'EtherCartel.WithdrawPotShare' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol) is not in mixedCase
Function 'EtherCartel.WithdrawDevFunds' (/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/5/0x7300ec2d49be15cde7adac31e7e8523e49b65471.sol analyzed (3 contracts), 55 result(s) found