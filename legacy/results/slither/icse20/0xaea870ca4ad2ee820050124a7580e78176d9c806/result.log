INFO:Slither:Compilation warnings/errors on /unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:
/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:33:3: Warning: No visibility specified. Defaulting to "public". 
  function transferOwnership(address newOwner) onlyOwner 
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:247:35: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
		(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_tokenPledge, _tokenBorrow);
		                                ^-------------------------------------------------------------------------------^
/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:413:2: Warning: Function state mutability can be restricted to view
	function getActualInterest(LoanInfo _li) private returns (uint256) {
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:465:36: Warning: Function declared as view, but this expression (potentially) modifies the state and thus requires non-payable (the default) or payable.
			(uint256 _num, uint256 _denom)= IMarketData(contractMarketData).getTokenExchangeRatio(_li.tokenPledge, _li.tokenBorrow);
			                                ^-------------------------------------------------------------------------------------^

INFO:Detectors:[93m
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) uses a dangerous strict equality:
	- require(bool)(_amount > 0 && _li.borrower != address(0) && _li.borrower == msg.sender)
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) uses a dangerous strict equality:
	- require(bool)(_amount > 0 && _li.borrower != address(0) && _li.borrower == msg.sender)
LoanLogic.deleteLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#355-431) uses a dangerous strict equality:
	- borrower2LoanInfoId[_li.borrower][_indexOne] == _li.id
	- lender2LoanInfoId[_li.lender][_indexTwo] == _li.id
	- allLoanId[i] == _li.id
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) uses a dangerous strict equality:
	- require(bool)(_amount > 0 && _li.borrower != address(0) && _li.borrower == msg.sender)
LoanLogic.deleteLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#355-431) uses a dangerous strict equality:
	- borrower2LoanInfoId[_li.borrower][_indexOne] == _li.id
	- lender2LoanInfoId[_li.lender][_indexTwo] == _li.id
	- allLoanId[i] == _li.id
LoanLogic.getTotalBorrowAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#179-205) uses a dangerous strict equality:
	- _token == _li.tokenBorrow
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) uses a dangerous strict equality:
	- require(bool)(_amount > 0 && _li.borrower != address(0) && _li.borrower == msg.sender)
LoanLogic.deleteLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#355-431) uses a dangerous strict equality:
	- borrower2LoanInfoId[_li.borrower][_indexOne] == _li.id
	- lender2LoanInfoId[_li.lender][_indexTwo] == _li.id
	- allLoanId[i] == _li.id
LoanLogic.getTotalBorrowAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#179-205) uses a dangerous strict equality:
	- _token == _li.tokenBorrow
LoanLogic.getTotalPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#151-179) uses a dangerous strict equality:
	- _li.borrower == _account && _token == _li.tokenPledge
	- _li.borrower == _account && _token == _li.tokenPledge
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) uses a dangerous strict equality:
	- require(bool)(_amount > 0 && _li.borrower != address(0) && _li.borrower == msg.sender)
LoanLogic.deleteLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#355-431) uses a dangerous strict equality:
	- borrower2LoanInfoId[_li.borrower][_indexOne] == _li.id
	- lender2LoanInfoId[_li.lender][_indexTwo] == _li.id
	- allLoanId[i] == _li.id
LoanLogic.getTotalBorrowAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#179-205) uses a dangerous strict equality:
	- _token == _li.tokenBorrow
LoanLogic.getTotalPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#151-179) uses a dangerous strict equality:
	- _li.borrower == _account && _token == _li.tokenPledge
	- _li.borrower == _account && _token == _li.tokenPledge
LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#207-247) uses a dangerous strict equality:
	- id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenBorrow == _tokenBorrow && id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenPledge == _tokenPledge
	- id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenBorrow == _tokenBorrow && id2LoanInfo[borrower2LoanInfoId[_account][i]].tokenPledge == _tokenPledge
	- id2LoanInfo[lender2LoanInfoId[_account][i]].tokenBorrow == _tokenBorrow && id2LoanInfo[lender2LoanInfoId[_account][i]].tokenPledge == _tokenPledge
	- id2LoanInfo[lender2LoanInfoId[_account][i]].tokenBorrow == _tokenBorrow && id2LoanInfo[lender2LoanInfoId[_account][i]].tokenPledge == _tokenPledge
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[92m
Reentrancy in LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#265-301):
	External calls:
	- _cerForceCloseLine = getForceCloseLine(_tokenPledge,_tokenBorrow,_amountPledge,_amount) (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#275-277)
	State variables written after the call(s):
	- allLoanId (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#299)
	- borrower2LoanInfoId (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#297)
	- id2LoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#299)
	- incrementalId (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#277)
	- lender2LoanInfoId (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#297-299)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
Ownable.transferOwnership (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#33-47) should be declared external
LoanLogic.setBiLinkLoanContract (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#121-129) should be declared external
LoanLogic.getLoanDataPart (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#129-137) should be declared external
LoanLogic.getLoanDataFull (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#137-151) should be declared external
LoanLogic.getTotalPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#151-179) should be declared external
LoanLogic.getTotalBorrowAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#179-205) should be declared external
LoanLogic.hasUnpaidLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#205-207) should be declared external
LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#207-247) should be declared external
LoanLogic.getPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#247-265) should be declared external
LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#265-301) should be declared external
LoanLogic.updateDataAfterRepay (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#323-355) should be declared external
LoanLogic.checkForceClose (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#455-469) should be declared external
LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#511-535) should be declared external
IMarketData.getTokenExchangeRatio (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol:
	- pragma solidity^0.4.13 (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Parameter '_owner' of Ownable. (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#11-12) is not in mixedCase
Parameter '_contractMarketData' of LoanLogic. (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#113-119) is not in mixedCase
Parameter '_contractBiLinkLoan' of LoanLogic.setBiLinkLoanContract (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#127) is not in mixedCase
Parameter '_id' of LoanLogic.getLoanDataPart (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#131) is not in mixedCase
Parameter '_id' of LoanLogic.getLoanDataFull (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#139) is not in mixedCase
Parameter '_token' of LoanLogic.getTotalPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#151) is not in mixedCase
Parameter '_account' of LoanLogic.getTotalPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#151-153) is not in mixedCase
Parameter '_token' of LoanLogic.getTotalBorrowAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#179-181) is not in mixedCase
Parameter '_account' of LoanLogic.hasUnpaidLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#205) is not in mixedCase
Parameter '_tokenPledge' of LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#207) is not in mixedCase
Parameter '_tokenBorrow' of LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#207) is not in mixedCase
Parameter '_account' of LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#207-209) is not in mixedCase
Parameter '_borrowOrLend' of LoanLogic.getUnpaiedLoanInfo (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#209-213) is not in mixedCase
Parameter '_tokenPledge' of LoanLogic.getPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#249-251) is not in mixedCase
Parameter '_tokenBorrow' of LoanLogic.getPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#251) is not in mixedCase
Parameter '_amount' of LoanLogic.getPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#251) is not in mixedCase
Parameter '_ratioPledge' of LoanLogic.getPledgeAmount (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#251-253) is not in mixedCase
Parameter '_tokenPledge' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#269) is not in mixedCase
Parameter '_tokenBorrow' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#269) is not in mixedCase
Parameter '_borrower' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#269) is not in mixedCase
Parameter '_lender' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#269) is not in mixedCase
Parameter '_amount' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#269-271) is not in mixedCase
Parameter '_amountPledge' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#273) is not in mixedCase
Parameter '_amountInterest' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#273-275) is not in mixedCase
Parameter '_periodDays' of LoanLogic.updateDataAfterTrade (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#275) is not in mixedCase
Parameter '_tokenPledge' of LoanLogic.getForceCloseLine (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#301) is not in mixedCase
Parameter '_tokenBorrow' of LoanLogic.getForceCloseLine (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#301) is not in mixedCase
Parameter '_amountPledge' of LoanLogic.getForceCloseLine (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#301-303) is not in mixedCase
Parameter '_amount' of LoanLogic.getForceCloseLine (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#303) is not in mixedCase
Parameter '_id' of LoanLogic.updateDataAfterRepay (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#323) is not in mixedCase
Parameter '_availableAmountOfBorrower' of LoanLogic.updateDataAfterRepay (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#323) is not in mixedCase
Parameter '_li' of LoanLogic.deleteLoan (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#355-357) is not in mixedCase
Parameter '_li' of LoanLogic.getActualInterest (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#435) is not in mixedCase
Parameter '_id' of LoanLogic.needForceClose (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#477-478) is not in mixedCase
Parameter '_id' of LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#513) is not in mixedCase
Parameter '_amount' of LoanLogic.addMargin (/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol#513-517) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/30/0xaea870ca4ad2ee820050124a7580e78176d9c806.sol analyzed (4 contracts), 57 result(s) found