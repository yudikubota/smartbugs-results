INFO:Slither:Compilation warnings/errors on /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:5:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:10:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (msg.sender != owner) throw;
                                 ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:39:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function token(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:54:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
                                            ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:55:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:81:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
                                       ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:82:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
                                                      ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:83:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance
                                                   ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:93:9: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        throw;     // Prevents accidental sending of ether
        ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:110:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function t_swap(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:123:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
                                            ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:124:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:125:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[msg.sender]) throw;                // Check if frozen
                                       ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:134:35: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (frozenAccount[_from]) throw;                        // Check if frozen            
                                  ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:135:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
                                       ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:136:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
                                                      ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:137:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance
                                                   ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:163:39: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell
                                      ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:184:34: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if(claimStatus == false) throw;                // checks if party can make a claim
                                 ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:185:46: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell
                                             ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:189:13: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
            throw;                                         // to do this last to avoid recursion attacks
            ^---^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:58:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:87:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);
        ^--------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:128:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:141:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);
        ^--------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:148:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(0, this, mintedAmount);
        ^-----------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:149:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(this, target, mintedAmount);
        ^----------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:154:9: Warning: Invoking events without "emit" prefix is deprecated.
        FrozenFunds(target, freeze);
        ^-------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:166:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(this, msg.sender, amount);                // execute an event reflecting the change
        ^--------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:191:13: Warning: Invoking events without "emit" prefix is deprecated.
            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change
            ^--------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:5:5: Warning: No visibility specified. Defaulting to "public". 
    function owned() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:14:5: Warning: No visibility specified. Defaulting to "public". 
    function transferOwnership(address newOwner) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:19:27: Warning: No visibility specified. Defaulting to "public". 
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
                          ^----------------------------------------------------------------------------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:39:5: Warning: No visibility specified. Defaulting to "public". 
    function token(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:53:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:62:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:65:9: Warning: Unused local variable.
        tokenRecipient spender = tokenRecipient(_spender);
        ^--------------------^
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:70:5: Warning: No visibility specified. Defaulting to "public". 
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:80:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:92:5: Warning: No visibility specified. Defaulting to "public". 
    function () {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:110:5: Warning: No visibility specified. Defaulting to "public". 
    function t_swap(
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:122:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:133:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:145:5: Warning: No visibility specified. Defaulting to "public". 
    function mintToken(address target, uint256 mintedAmount) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:152:5: Warning: No visibility specified. Defaulting to "public". 
    function freezeAccount(address target, bool freeze) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:157:5: Warning: No visibility specified. Defaulting to "public". 
    function setPrices(uint256 newBuyPrice) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:161:5: Warning: No visibility specified. Defaulting to "public". 
    function buy() payable {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:171:5: Warning: No visibility specified. Defaulting to "public". 
    function setClaim(uint256 _claim)  onlyOwner{
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:176:5: Warning: No visibility specified. Defaulting to "public". 
    function setClaimStatus(bool _status) onlyOwner {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:183:5: Warning: No visibility specified. Defaulting to "public". 
    function sell(uint256 amount) {
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[91m
t_swap.totalSupply (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#104) shadows:
	- token.totalSupply (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#30-31)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variable-shadowing[0m
INFO:Detectors:[93m
token (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#22-100) has incorrect ERC20 function interface(s):
	-transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#54-61)
t_swap (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#101-194) has incorrect ERC20 function interface(s):
	-transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#123-133)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[92m
token.generalTerms should be constant (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#28-29)
token.standard should be constant (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#23-24)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#11:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#55:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#56:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#82:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#83:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#84:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#97-99:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#124:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#126:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#126:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#135:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#136:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#138:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#139:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#165:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#186:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#187:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#191:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
owned.transferOwnership (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#14-19) should be declared external
tokenRecipient.receiveApproval (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#19-21) should be declared external
t_swap.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#123-133) should be declared external
token.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#54-61) should be declared external
token.approveAndCall (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#70-80) should be declared external
token.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#80-92) should be declared external
t_swap.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#134-147) should be declared external
token.fallback (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#97-100) should be declared external
t_swap.mintToken (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#147-155) should be declared external
t_swap.freezeAccount (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#157-162) should be declared external
t_swap.setPrices (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#162-163) should be declared external
t_swap.buy (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#163-176) should be declared external
t_swap.setClaim (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#177-183) should be declared external
t_swap.setClaimStatus (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#184-185) should be declared external
t_swap.sell (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#185-194) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol:
	- pragma solidity^0.4.6 (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Contract 'owned' (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#2-19) is not in CapWords
Contract 'tokenRecipient' (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#19-21) is not in CapWords
Contract 'token' (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#22-100) is not in CapWords
Parameter '_to' of token.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#54) is not in mixedCase
Parameter '_value' of token.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#54) is not in mixedCase
Parameter '_spender' of token.approve (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#63-64) is not in mixedCase
Parameter '_value' of token.approve (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#64) is not in mixedCase
Parameter '_spender' of token.approveAndCall (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#71) is not in mixedCase
Parameter '_value' of token.approveAndCall (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#71-72) is not in mixedCase
Parameter '_extraData' of token.approveAndCall (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#72) is not in mixedCase
Parameter '_from' of token.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#81) is not in mixedCase
Parameter '_to' of token.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#81) is not in mixedCase
Parameter '_value' of token.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#81) is not in mixedCase
Contract 't_swap' (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#101-194) is not in CapWords
Parameter '_to' of t_swap.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#123-124) is not in mixedCase
Parameter '_value' of t_swap.transfer (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#124) is not in mixedCase
Parameter '_from' of t_swap.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#134) is not in mixedCase
Parameter '_to' of t_swap.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#134) is not in mixedCase
Parameter '_value' of t_swap.transferFrom (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#134-135) is not in mixedCase
Function 't_swap.t_swap' (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#114-123) is not in mixedCase
Parameter '_claim' of t_swap.setClaim (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#181) is not in mixedCase
Parameter '_status' of t_swap.setClaimStatus (/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol#184) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0x77eec19c8ba79b1c7c79311ec810cbf88d924751.sol analyzed (4 contracts), 60 result(s) found