INFO:Slither:Compilation warnings/errors on /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:33:7: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
      throw;
      ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:62:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function HZ() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:73:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead
                        ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:74:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:75:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
                                            ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:76:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
                                                      ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:85:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:93:25: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead
                        ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:94:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:95:40: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
                                       ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:96:55: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
                                                      ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:97:52: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance
                                                   ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:106:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough
                                            ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:107:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:115:45: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough
                                            ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:116:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:124:44: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
        if (freezeOf[msg.sender] < _value) throw;            // Check if the sender has enough
                                           ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:125:20: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if (_value <= 0) throw; 
		                 ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:134:27: Warning: "throw" is deprecated in favour of "revert()", "require()" and "assert()".
		if(msg.sender != owner) throw;
		                        ^---^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:31:3: Warning: This declaration shadows a builtin symbol.
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:79:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
        ^-------------------------------^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:101:9: Warning: Invoking events without "emit" prefix is deprecated.
        Transfer(_from, _to, _value);
        ^--------------------------^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:110:9: Warning: Invoking events without "emit" prefix is deprecated.
        Burn(msg.sender, _value);
        ^----------------------^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:119:9: Warning: Invoking events without "emit" prefix is deprecated.
        Freeze(msg.sender, _value);
        ^------------------------^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:128:9: Warning: Invoking events without "emit" prefix is deprecated.
        Unfreeze(msg.sender, _value);
        ^--------------------------^
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:62:5: Warning: No visibility specified. Defaulting to "public". 
    function HZ() {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:72:5: Warning: No visibility specified. Defaulting to "public". 
    function transfer(address _to, uint256 _value) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:83:5: Warning: No visibility specified. Defaulting to "public". 
    function approve(address _spender, uint256 _value)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:92:5: Warning: No visibility specified. Defaulting to "public". 
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:105:5: Warning: No visibility specified. Defaulting to "public". 
    function burn(uint256 _value) returns (bool success) {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:114:2: Warning: No visibility specified. Defaulting to "public". 
	function freeze(uint256 _value) returns (bool success) {
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:123:2: Warning: No visibility specified. Defaulting to "public". 
	function unfreeze(uint256 _value) returns (bool success) {
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:133:2: Warning: No visibility specified. Defaulting to "public". 
	function withdrawEther(uint256 amount) {
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:139:2: Warning: No visibility specified. Defaulting to "public". 
	function() payable {
 ^ (Relevant source part starts here and spans across multiple lines).
/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:31:3: Warning: Function state mutability can be restricted to pure
  function assert(bool assertion) internal {
  ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[93m
HZ (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#38-141) has incorrect ERC20 function interface(s):
	-transfer (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#73-83)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-erc20-interface[0m
INFO:Detectors:[92m
SafeMath.assert (function @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#31-38) shadows built-in symbol "assert"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#builtin-symbol-shadowing[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#37:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#73:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#75:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#76:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#77:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#88-89:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#93-94:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#95:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#96:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#97:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#98:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#108:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#108:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#117:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#117:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#126:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#126:
	- Usage of "throw" should be replaced with "revert()"
Deprecated standard detected @ /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:
	- Usage of "throw" should be replaced with "revert()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
HZ.transfer (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#73-83) should be declared external
HZ.approve (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#84-92) should be declared external
HZ.transferFrom (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#93-106) should be declared external
HZ.burn (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#106-115) should be declared external
HZ.freeze (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#115-124) should be declared external
HZ.unfreeze (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#124-135) should be declared external
HZ.withdrawEther (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#139-141) should be declared external
HZ.fallback (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol:
	- pragma solidity^0.4.12 (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'HZ.HZ' (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#63-72) is not in mixedCase
Parameter '_to' of HZ.transfer (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#73) is not in mixedCase
Parameter '_value' of HZ.transfer (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#73) is not in mixedCase
Parameter '_spender' of HZ.approve (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#85-86) is not in mixedCase
Parameter '_value' of HZ.approve (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#86) is not in mixedCase
Parameter '_from' of HZ.transferFrom (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#93) is not in mixedCase
Parameter '_to' of HZ.transferFrom (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#93) is not in mixedCase
Parameter '_value' of HZ.transferFrom (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#93) is not in mixedCase
Parameter '_value' of HZ.burn (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#106) is not in mixedCase
Parameter '_value' of HZ.freeze (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#115) is not in mixedCase
Parameter '_value' of HZ.unfreeze (/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol#124-125) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_contracts/0x305f9d359cdbfc033f64c2e11cafa3d833b79faf.sol analyzed (2 contracts), 40 result(s) found