INFO:Slither:Compilation warnings/errors on /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:105:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:179:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function EternalStorage() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:854:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Board(address storageAddress, address configAddress, address _paymentHolder) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:6:1: Warning: Source file does not specify required compiler version!Consider adding "pragma solidity ^0.4.25;"
library SafeMath {
^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:529:31: Warning: This declaration shadows an existing declaration.
    function setPaymentHolder(address paymentHolder) external;
                              ^-------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:511:5: The shadowed declaration is here:
    address public paymentHolder;
    ^--------------------------^

/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:533:23: Warning: This declaration shadows an existing declaration.
    function setAdmin(address admin) external;
                      ^-----------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:510:5: The shadowed declaration is here:
    address public admin;
    ^------------------^

/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:138:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return uint(keccak256(block.timestamp, block.blockhash(block.number))) % (max - min) + min;
                    ^-------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:174:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(addressStorage[keccak256("contract.address", msg.sender)] != 0x0 || msg.sender == owner);
                               ^---------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:181:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", msg.sender)] = msg.sender;
                       ^---------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:186:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", owner)] = 0x0;
                       ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:188:24: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        addressStorage[keccak256("contract.address", msg.sender)] = msg.sender;
                       ^---------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:329:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referees.voted", caseId, referee));
                                                      ^-----------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:334:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setAddress(keccak256("case.referees.vote", caseId, forApplicant, index), referee);
                                                  ^----------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:339:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.referees.vote", caseId, forApplicant, index));
                                                         ^----------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:343:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.votes.count", caseId, forApplicant));
                                                      ^----------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:347:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.votes.count", caseId, forApplicant), votes);
                                               ^----------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:351:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.count", caseId));
                                                      ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:355:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.count", caseId), value);
                                               ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:359:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.referees", caseId, index));
                                                         ^---------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:363:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referees", caseId, referee));
                                                      ^-----------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:368:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.referees", caseId, index), referee);
                      ^---------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:369:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.referees", caseId, referee), true);
                   ^-----------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:373:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBytes32(keccak256("case.referees.vote.hash", caseId, referee));
                                                         ^---------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:378:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBool(keccak256("case.referees.voted", caseId, referee), true);
                                               ^-----------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:379:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.referees.vote.hash", caseId, referee), voteHash);
                                                  ^---------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:380:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("case.referees.vote.hash.count", caseId), caseCount + 1);
                                               ^------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:384:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referees.vote.hash.count", caseId));
                                                      ^------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:412:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("vote.token.balance", account));
                                                      ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:424:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint(keccak256("vote.token.balance", account), value);
                                               ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:451:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("referee.applied", referee), applied);
                   ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:452:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("referee.address", id), referee);
                      ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:456:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("referee.applied", referee));
                                                      ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:460:48: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBool(keccak256("referee.applied", referee), applied);
                                               ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:464:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("referee.address", id));
                                                         ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:586:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        applicant = st.getAddress(keccak256("case.applicant", caseId));
                                  ^---------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:587:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        respondent = st.getAddress(keccak256("case.respondent", caseId));
                                   ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:588:30: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        deal = st.getBytes32(keccak256("case.deal", caseId));
                             ^----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:589:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        amount = st.getUint(keccak256("case.amount", caseId));
                            ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:590:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        won = st.getBool(keccak256("case.won", caseId));
                         ^---------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:591:30: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        status = st.getUint8(keccak256("case.status", caseId));
                             ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:592:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        canceledCode = st.getUint8(keccak256("case.canceled.cause.code", caseId));
                                   ^-------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:593:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        refereeAward = st.getUint(keccak256("case.referee.award", caseId));
                                  ^-------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:594:31: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        title = st.getBytes32(keccak256("case.title", caseId));
                              ^-----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:595:50: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        applicantDescriptionHash = st.getBytes32(keccak256("case.applicant.description", caseId));
                                                 ^---------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:596:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        respondentDescriptionHash = st.getBytes32(keccak256("case.respondent.description", caseId));
                                                  ^----------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:597:40: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        isEthRefereeAward = st.getBool(keccak256("case.referee.award.eth", caseId));
                                       ^-----------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:604:27: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        date = st.getUint(keccak256("case.date", caseId));
                          ^----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:605:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        votingDate = st.getUint(keccak256("case.date.voting", caseId));
                                ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:606:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        revealingDate = st.getUint(keccak256("case.date.revealing", caseId));
                                   ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:607:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        closeDate = st.getUint(keccak256("case.date.close", caseId));
                               ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:620:18: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        caseId = keccak256(applicant, respondent, deal, dates[0], title, amount);
                 ^-------------------------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:621:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.applicant", caseId), applicant);
                      ^---------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:622:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setAddress(keccak256("case.respondent", caseId), respondent);
                      ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:623:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.deal", caseId), deal);
                      ^----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:624:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.amount", caseId), amount);
                   ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:625:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date", caseId), dates[0]);
                   ^----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:626:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.voting", caseId), dates[1]);
                   ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:627:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.revealing", caseId), dates[2]);
                   ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:628:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.date.close", caseId), dates[3]);
                   ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:629:21: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint8(keccak256("case.status", caseId), 0);//OPENED
                    ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:630:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.referee.award", caseId), refereeAward);
                   ^-------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:631:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.title", caseId), title);
                      ^-----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:632:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                      ^---------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:632:72: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                                                                       ^-----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:632:72: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        st.setBytes32(keccak256("case.applicant.description", caseId), keccak256(applicantDescription));
                                                                       ^-----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:633:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.referee.award.eth", caseId), isEthRefereeAward);
                   ^-----------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:634:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setUint(keccak256("case.referee.count.need", caseId), refereeCountNeed);
                   ^------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:640:20: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        st.setBool(keccak256("case.won", caseId), won);
                   ^---------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:647:49: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint8(keccak256("case.status", caseId), statusCode);
                                                ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:651:67: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return CaseStatus(EternalStorage(storageAddress).getUint8(keccak256("case.status", caseId)));
                                                                  ^------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:658:49: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setUint8(keccak256("case.canceled.cause.code", caseId), causeCode);
                                                ^-------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:662:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date", caseId));
                                                      ^----------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:666:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBytes32(keccak256("case.respondent.description", caseId));
                                                         ^----------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:670:51: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                  ^----------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:670:101: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                                                                    ^--------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:670:101: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.
        EternalStorage(storageAddress).setBytes32(keccak256("case.respondent.description", caseId), keccak256(description));
                                                                                                    ^--------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:674:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.applicant", caseId));
                                                         ^---------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:678:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getAddress(keccak256("case.respondent", caseId));
                                                         ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:682:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referee.award", caseId));
                                                      ^-------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:686:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.voting", caseId));
                                                      ^-----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:690:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.revealing", caseId));
                                                      ^--------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:694:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.date.close", caseId));
                                                      ^----------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:698:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getUint(keccak256("case.referee.count.need", caseId));
                                                      ^------------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:702:55: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return EternalStorage(storageAddress).getBool(keccak256("case.referee.award.eth", caseId));
                                                      ^-----------------------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:1026:16: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return keccak256(voteOption, salt);
               ^-------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:1031:59: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return lib.getRefereeVoteHash(caseId, referee) == keccak256(voteOption, salt);
                                                          ^-------------------------^
/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol:138:48: Warning: "block.blockhash()" has been deprecated in favor of "blockhash()"
        return uint(keccak256(block.timestamp, block.blockhash(block.number))) % (max - min) + min;
                                               ^-------------^

INFO:Detectors:[91m
PaymentHolder.withdrawEth (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#836-847) sends eth to arbitrary user
	Dangerous calls:
	- to.transfer(amount) (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#844-845)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[92m
IBoard.setPaymentHolder.paymentHolder (local variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#543-545) shadows:
	- IBoard.paymentHolder (state variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#529-531)
IBoard.setAdmin.admin (local variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#547) shadows:
	- IBoard.admin (state variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#529)
CasesLib.getCase.isEthRefereeAward (local variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#593) shadows:
	- CasesLib.isEthRefereeAward (function @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#721-725)
CasesLib.addCase.isEthRefereeAward (local variable @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#627) shadows:
	- CasesLib.isEthRefereeAward (function @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#721-725)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#local-variable-shadowing[0m
INFO:Detectors:[92m
PaymentHolder.migrate has external calls inside a loop:
	- balance = Token(token).balanceOf(this) (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#807-811)
PaymentHolder.migrate has external calls inside a loop:
	- require(bool)(Token(token).transfer(newHolder,balance)) (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#812-813)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
EIP20.totalSupply should be constant (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#61)
IBoardConfig.version should be constant (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#728)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Deprecated standard detected @ /unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#143-145:
	- Usage of "block.blockhash()" should be replaced with "blockhash()"
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#deprecated-standards[0m
INFO:Detectors:[92m
EIP20.balanceOf (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#63-65) should be declared external
EIP20.transfer (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#69-71) should be declared external
EIP20.transferFrom (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#76-78) should be declared external
EIP20.approve (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#82-85) should be declared external
EIP20.allowance (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#87-90) should be declared external
Ownable.transferOwnership (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#123-130) should be declared external
BkxToken.increaseApproval (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#131-135) should be declared external
BkxToken.decreaseApproval (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#135) should be declared external
Token.balanceOf (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#145-147) should be declared external
Token.transfer (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#147-149) should be declared external
Token.transferFrom (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#149-151) should be declared external
Token.approve (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#151-156) should be declared external
Token.allowance (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#156-161) should be declared external
EternalStorage.setOwner (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#188-195) should be declared external
RefereeCasesLib.setRefereesToCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#328-332) should be declared external
RefereeCasesLib.isRefereeVoted (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#332-335) should be declared external
RefereeCasesLib.setRefereeVote (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#335-342) should be declared external
RefereeCasesLib.isRefereeSetToCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#367-372) should be declared external
RefereeCasesLib.getRefereeVoteHash (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#377-379) should be declared external
RefereeCasesLib.setRefereeVoteHash (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#379-389) should be declared external
RefereeCasesLib.getRefereesFor (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#393-409) should be declared external
RefereeCasesLib.getRefereesByCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#409-417) should be declared external
VoteTokenLib.increaseVotes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#423-431) should be declared external
VoteTokenLib.decreaseVotes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#432-437) should be declared external
RefereesLib.addReferee (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#445-450) should be declared external
RefereesLib.isRefereeApplied (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#463-467) should be declared external
RefereesLib.setRefereeApplied (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#467-470) should be declared external
RefereesLib.getRandomRefereesToCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#475-497) should be declared external
Board.createVoteHash (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#1047-1049) should be declared external
IBoard.createVoteHash (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#557-561) should be declared external
CasesLib.getCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#588-612) should be declared external
CasesLib.getCaseDates (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#612-622) should be declared external
CasesLib.addCase (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#623-651) should be declared external
CasesLib.setCaseWon (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#651-655) should be declared external
CasesLib.setCaseStatus (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#656-661) should be declared external
CasesLib.getCaseStatus (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#661-665) should be declared external
CasesLib.setCaseCanceledCode (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#666-673) should be declared external
CasesLib.getCaseDate (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#673-675) should be declared external
CasesLib.getRespondentDescription (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#677-681) should be declared external
CasesLib.setRespondentDescription (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#681-685) should be declared external
CasesLib.getApplicant (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#685-689) should be declared external
CasesLib.getRespondent (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#689-693) should be declared external
CasesLib.getRefereeAward (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#693-697) should be declared external
CasesLib.getVotingDate (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#697-701) should be declared external
CasesLib.getRevealingDate (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#701-708) should be declared external
CasesLib.getCloseDate (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#709-715) should be declared external
CasesLib.getRefereeCountNeed (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#716-721) should be declared external
CasesLib.isEthRefereeAward (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#721-725) should be declared external
IBoardConfig.getCaseDatesFromNow (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#778-780) should be declared external
PaymentHolder.depositEth (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#832-836) should be declared external
PaymentHolder.withdrawEth (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#836-847) should be declared external
PaymentHolder.withdrawToken (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#849-857) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Function 'Ownable.Ownable' (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#110-113) is not in mixedCase
Function 'EternalStorage.EternalStorage' (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#184-188) is not in mixedCase
Parameter '_key' of EternalStorage.getAddress (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#199-200) is not in mixedCase
Parameter '_key' of EternalStorage.getUint (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#204-205) is not in mixedCase
Parameter '_key' of EternalStorage.getUint8 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#211) is not in mixedCase
Parameter '_key' of EternalStorage.getString (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#216) is not in mixedCase
Parameter '_key' of EternalStorage.getBytes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#221) is not in mixedCase
Parameter '_key' of EternalStorage.getBytes32 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#226) is not in mixedCase
Parameter '_key' of EternalStorage.getBool (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#231-234) is not in mixedCase
Parameter '_key' of EternalStorage.getInt (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#237) is not in mixedCase
Parameter '_key' of EternalStorage.setAddress (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#243) is not in mixedCase
Parameter '_value' of EternalStorage.setAddress (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#243-244) is not in mixedCase
Parameter '_key' of EternalStorage.setUint (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#248) is not in mixedCase
Parameter '_value' of EternalStorage.setUint (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#248-250) is not in mixedCase
Parameter '_key' of EternalStorage.setUint8 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#253) is not in mixedCase
Parameter '_value' of EternalStorage.setUint8 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#253-256) is not in mixedCase
Parameter '_key' of EternalStorage.setString (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#258) is not in mixedCase
Parameter '_value' of EternalStorage.setString (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#259-261) is not in mixedCase
Parameter '_key' of EternalStorage.setBytes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#263-264) is not in mixedCase
Parameter '_value' of EternalStorage.setBytes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#264-266) is not in mixedCase
Parameter '_key' of EternalStorage.setBytes32 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#268-271) is not in mixedCase
Parameter '_value' of EternalStorage.setBytes32 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#271) is not in mixedCase
Parameter '_key' of EternalStorage.setBool (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#276) is not in mixedCase
Parameter '_value' of EternalStorage.setBool (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#276) is not in mixedCase
Parameter '_key' of EternalStorage.setInt (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#280) is not in mixedCase
Parameter '_value' of EternalStorage.setInt (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#280-283) is not in mixedCase
Parameter '_key' of EternalStorage.deleteAddress (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#288-289) is not in mixedCase
Parameter '_key' of EternalStorage.deleteUint (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#294) is not in mixedCase
Parameter '_key' of EternalStorage.deleteUint8 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#299) is not in mixedCase
Parameter '_key' of EternalStorage.deleteString (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#304) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBytes (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#309) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBytes32 (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#314) is not in mixedCase
Parameter '_key' of EternalStorage.deleteBool (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#321) is not in mixedCase
Parameter '_key' of EternalStorage.deleteInt (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#323) is not in mixedCase
Parameter '_updater' of PaymentHolder.setUpdater (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#792-795) is not in mixedCase
Parameter '_allowed' of PaymentHolder.migrate (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#798-800) is not in mixedCase
Parameter '_allowed' of PaymentHolder.update (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#813-814) is not in mixedCase
Parameter '_paymentHolder' of Board.setPaymentHolder (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#914-915) is not in mixedCase
Parameter '_refereePaymentHolder' of Board.setRefereePaymentHolder (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#918) is not in mixedCase
Function 'Board.Board' (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#875-891) is not in mixedCase
Parameter '_paymentHolder' of Board.Board (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#876) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Detectors:[92m
IBoardConfig.decimals (/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol#727-728) is never used in IBoardConfig
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#unused-state-variables[0m
INFO:Slither:/unique_chucks/16/0xa2a5df962c0a9276b83fffb269c6270339aeb627.sol analyzed (16 contracts), 103 result(s) found