INFO:Slither:Compilation warnings/errors on /unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:12:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function BLAccess() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:57:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function BLStorage() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:25:9: Warning: Invoking events without "emit" prefix is deprecated.
        UpdatedMainAccount(_newMainAddress);
        ^---------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:65:9: Warning: Invoking events without "emit" prefix is deprecated.
        StorageUpdated(newAddress);
        ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:69:15: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        key = keccak256(x, ":", y);
              ^------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:83:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return s.getUInt(keccak256(msg.sender, "balance"));
                         ^------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:88:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return s.getUInt(keccak256(_account, "balance"));
                         ^----------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:92:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return s.getUInt(keccak256(_account, "promoAllowance"));
                         ^-----------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:96:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        return s.getUInt(keccak256(msg.sender, "promoAllowance"));
                         ^-------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:101:44: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint existingAllowance = s.getUInt(keccak256(beneficiary, "promoAllowance"));
                                           ^--------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:103:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(beneficiary, "promoAllowance"), existingAllowance);
                  ^--------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:104:9: Warning: Invoking events without "emit" prefix is deprecated.
        AllowanceGranted(beneficiary, allowance);
        ^--------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:109:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint balance = s.getUInt(keccak256(msg.sender, "balance"));
                                 ^------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:111:9: Warning: Invoking events without "emit" prefix is deprecated.
        WithdrawBalance(msg.sender, balance);
        ^----------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:123:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint mainBalance = s.getUInt(keccak256(mainAddress, "balance"));
                                     ^-------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:125:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(mainAddress, "balance"), mainBalance);
                  ^-------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:126:9: Warning: Invoking events without "emit" prefix is deprecated.
        SentFeeToPlatform(fee);
        ^--------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:133:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            rewardBalance = s.getUInt(keccak256(mainAddress, "balance"));
                                      ^-------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:135:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            s.setUInt(keccak256(mainAddress, "balance"), rewardBalance);
                      ^-------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:136:13: Warning: Invoking events without "emit" prefix is deprecated.
            SentAmountToOwner(amount, mainAddress);
            ^------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:138:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            rewardBalance = s.getUInt(keccak256(owner, "balance"));
                                      ^-------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:140:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            s.setUInt(keccak256(owner, "balance"), rewardBalance);
                      ^-------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:141:13: Warning: Invoking events without "emit" prefix is deprecated.
            SentAmountToOwner(amount, owner);
            ^------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:206:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        address owner = s.getAdd(keccak256(key, "owner"));
                                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:207:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint allowance = s.getUInt(keccak256(msg.sender, "promoAllowance"));
                                   ^-------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:213:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            s.setUInt(keccak256(key, "price"), msg.value);
                      ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:216:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            s.setUInt(keccak256(msg.sender, "promoAllowance"), allowance);
                      ^-------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:217:23: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            s.setUInt(keccak256(key, "price"), initialPrice);
                      ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:219:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "name"), name);
                     ^--------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:220:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "description"), description);
                     ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:221:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "url"), url);
                     ^-------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:222:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "imageURL"), imageURL);
                     ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:223:18: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setAdd(keccak256(key, "owner"), msg.sender);
                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:228:9: Warning: Invoking events without "emit" prefix is deprecated.
        CreatedBlock(x,
        ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:250:27: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        price = s.getUInt(keccak256(key, "price"));
                          ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:251:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        name = s.getBytes32(keccak256(key, "name"));
                            ^--------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:252:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        description = s.getBytes32(keccak256(key, "description"));
                                   ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:253:28: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        url = s.getBytes32(keccak256(key, "url"));
                           ^-------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:254:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        imageURL = s.getBytes32(keccak256(key, "imageURL"));
                                ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:255:29: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        forSale = s.getUInt(keccak256(key, "forSale"));
                            ^-----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:256:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        pricePerDay = s.getUInt(keccak256(key, "pricePerDay"));
                                ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:257:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        owner = s.getAdd(keccak256(key, "owner"));
                         ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:263:36: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint basePrice = s.getUInt(keccak256(key, "price"));
                                   ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:264:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(s.getAdd(keccak256(key, "owner")) == msg.sender);
                         ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:266:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "forSale"), price);
                  ^-----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:267:9: Warning: Invoking events without "emit" prefix is deprecated.
        SetBlockForSale(x, y, price, msg.sender);
        ^--------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:273:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(s.getAdd(keccak256(key, "owner")) == msg.sender);
                         ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:274:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "forSale"), 0);
                  ^-----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:275:9: Warning: Invoking events without "emit" prefix is deprecated.
        UnsetBlockForSale(x, y, msg.sender);
        ^---------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:288:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint price = s.getUInt(keccak256(key, "price"));
                               ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:289:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint forSale = s.getUInt(keccak256(key, "forSale"));
                                 ^-----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:290:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        address owner = s.getAdd(keccak256(key, "owner"));
                                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:295:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "price"), msg.value);
                  ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:296:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "name"), name);
                     ^--------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:297:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "description"), description);
                     ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:298:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "url"), url);
                     ^-------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:299:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "imageURL"), imageURL);
                     ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:300:18: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setAdd(keccak256(key, "owner"), msg.sender);
                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:301:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "forSale"), 0);
                  ^-----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:302:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "pricePerDay"), 0);
                  ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:304:9: Warning: Invoking events without "emit" prefix is deprecated.
        BoughtBlock(x, y, msg.value, msg.sender,
        ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:306:9: Warning: Invoking events without "emit" prefix is deprecated.
        SoldBlock(x, y, price, msg.value, feePercentage, owner);
        ^-----------------------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:319:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        address owner = s.getAdd(keccak256(key, "owner"));
                                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:321:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "name"), name);
                     ^--------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:322:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "description"), description);
                     ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:323:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "url"), url);
                     ^-------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:324:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "imageURL"), imageURL);
                     ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:325:9: Warning: Invoking events without "emit" prefix is deprecated.
        UpdatedBlock(x, y, name, description, url, imageURL, msg.sender);
        ^--------------------------------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:368:32: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint price = s.getUInt(keccak256(key, "price"));
                               ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:369:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(s.getAdd(keccak256(key, "owner")) == msg.sender);
                         ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:371:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "pricePerDay"), pricePerDay);
                  ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:372:9: Warning: Invoking events without "emit" prefix is deprecated.
        ToRent(x, y, pricePerDay, msg.sender);
        ^-----------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:381:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        address owner = s.getAdd(keccak256(key, "owner"));
                                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:383:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "pricePerDay"), 0);
                  ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:384:9: Warning: Invoking events without "emit" prefix is deprecated.
        NotToRent(x, y, msg.sender);
        ^-------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:398:38: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint pricePerDay = s.getUInt(keccak256(key, "pricePerDay"));
                                     ^---------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:401:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        require(now >= s.getUInt(keccak256(key, "expiry")));
                                 ^----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:402:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        address owner = s.getAdd(keccak256(key, "owner"));
                                 ^---------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:406:19: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setUInt(keccak256(key, "expiry"), expiry);
                  ^----------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:407:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "tenantName"), tenantName);
                     ^--------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:408:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "tenantDescription"), tenantDescription);
                     ^---------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:409:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "tenantURL"), tenantURL);
                     ^-------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:410:22: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        s.setBytes32(keccak256(key, "tenantImageURL"), tenantImageURL);
                     ^------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:412:9: Warning: Invoking events without "emit" prefix is deprecated.
        RentedBlock(x, y, msg.value, feePercentage, owner);
        ^------------------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:413:9: Warning: Invoking events without "emit" prefix is deprecated.
        LeasedBlock(x, y, msg.value, expiry, tenantName, tenantDescription, tenantURL, tenantImageURL, msg.sender);
        ^--------------------------------------------------------------------------------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:425:28: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        expiry = s.getUInt(keccak256(key, "tenantExpiry"));
                           ^----------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:426:35: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        tenantName = s.getBytes32(keccak256(key, "tenantName"));
                                  ^--------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:427:42: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        tenantDescription = s.getBytes32(keccak256(key, "tenantDescription"));
                                         ^---------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:428:34: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        tenantURL = s.getBytes32(keccak256(key, "tenantURL"));
                                 ^-------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:429:39: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        tenantImageURL = s.getBytes32(keccak256(key, "tenantImageURL"));
                                      ^------------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:451:9: Warning: Invoking events without "emit" prefix is deprecated.
        ChangedInitialPrice(price);
        ^------------------------^
/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:457:9: Warning: Invoking events without "emit" prefix is deprecated.
        ChangedFeePercentage(feePercentage);
        ^---------------------------------^

INFO:Detectors:[92m
DataStorageInterface.getUInt (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#35-36) should be declared external
DataStorageInterface.setUInt (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#36-37) should be declared external
DataStorageInterface.getAdd (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#37-38) should be declared external
DataStorageInterface.setAdd (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#38-39) should be declared external
DataStorageInterface.getBytes32 (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#39-40) should be declared external
DataStorageInterface.setBytes32 (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#40-41) should be declared external
DataStorageInterface.getBool (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#41-42) should be declared external
DataStorageInterface.setBool (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#42-43) should be declared external
DataStorageInterface.withdraw (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#43-47) should be declared external
BLStorage.setDataStorage (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#62-68) should be declared external
BLBalances.getBalance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#83-87) should be declared external
BLBalances.getAccountBalance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#88-91) should be declared external
BLBalances.getAccountAllowance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#92-96) should be declared external
BLBalances.getMyAllowance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#96-100) should be declared external
BLBalances.grantAllowance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#101-109) should be declared external
BLBalances.withdraw (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#110-115) should be declared external
BLBlocks.createBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#204-246) should be declared external
BLBlocks.getBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#247-265) should be declared external
BLBlocks.sellBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#266-275) should be declared external
BLBlocks.cancelSellBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#278-288) should be declared external
BLBlocks.buyBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#289-319) should be declared external
BLBlocks.updateBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#321-347) should be declared external
BLTenancies.setForRent (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#372-387) should be declared external
BLTenancies.cancelRent (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#389-399) should be declared external
BLTenancies.leaseBlock (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#400-427) should be declared external
BLTenancies.getTenancy (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#427-448) should be declared external
BLMain.totalSupply (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#455-460) should be declared external
BLMain.setInitialPrice (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#461-466) should be declared external
BLMain.setFeePercentage (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#467-469) should be declared external
BLMain.getInitialPrice (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol) should be declared external
BLMain.getFeePercentage (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol:
	- pragma solidity^0.4.18 (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'BLAccess.BLAccess' (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#12-16) is not in mixedCase
Parameter '_newMainAddress' of BLAccess.setPrimaryAccount (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#22) is not in mixedCase
Function 'BLStorage.BLStorage' (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#58-61) is not in mixedCase
Parameter '_account' of BLBalances.getAccountBalance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#88) is not in mixedCase
Parameter '_account' of BLBalances.getAccountAllowance (/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol#92) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/8/0x618bb37e5644da4946f052c50d7819f95d327c8b.sol analyzed (7 contracts), 37 result(s) found