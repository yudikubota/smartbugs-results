INFO:Slither:Compilation warnings/errors on /unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:109:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function Minewar() public
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:157:53: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint256 balance = SafeMath.div(SafeMath.mul(this.balance, 90), 100);
                                                    ^----------^
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:158:58: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        administrator.transfer(SafeMath.div(SafeMath.mul(this.balance, 5), 100));
                                                         ^----------^
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:515:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        return this.balance;
               ^----------^
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:403:5: Warning: Function state mutability can be restricted to view
    function getLowestUnitPriceIdxFromBuy() public returns(uint256 lowestIdx)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:492:5: Warning: Function state mutability can be restricted to view
    function getHighestUnitPriceIdxFromSell() public returns(uint256 highestIdx)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:509:5: Warning: Function state mutability can be restricted to pure
    function devFee(uint256 amount) public view returns(uint256)
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:583:5: Warning: Function state mutability can be restricted to view
    function inRankList(address addr) internal returns(bool)
    ^ (Relevant source part starts here and spans across multiple lines).

INFO:Detectors:[91m
Minewar.lottery (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#158-174) sends eth to arbitrary user
	Dangerous calls:
	- administrator.transfer(SafeMath.div(SafeMath.mul(this.balance,5),100)) (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#160-162)
Minewar.becomeSponsor (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#176-184) sends eth to arbitrary user
	Dangerous calls:
	- sponsor.transfer(getCurrentPrice(sponsorLevel)) (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#180-182)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[93m
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.hasBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#325-334) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.hasBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#325-334) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr
Minewar.sellCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#363-383) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.hasBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#325-334) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr
Minewar.sellCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#363-383) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.sellCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#427-456) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.hasBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#325-334) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr
Minewar.sellCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#363-383) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.sellCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#427-456) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.withdrawBuyDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#384-401) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.hasBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#325-334) uses a dangerous strict equality:
	- boostData[revert_i].owner == addr
Minewar.sellCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#363-383) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.sellCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#427-456) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.withdrawBuyDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#384-401) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Minewar.withdrawSellDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#475-492) uses a dangerous strict equality:
	- require(bool)(players[msg.sender].round == round)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[92m
Minewar.lottery has external calls inside a loop:
	- rankList[idx].transfer(SafeMath.div(SafeMath.mul(balance,profit[idx]),100)) (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#167-171)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation/_edit#calls-inside-a-loop[0m
INFO:Detectors:[92m
Minewar.BASE_PRICE should be constant (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#57-59)
Minewar.CRTSTAL_MINING_PERIOD should be constant (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#53)
Minewar.HALF_TIME should be constant (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#55-56)
Minewar.RANK_LIST_LIMIT should be constant (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#59)
Minewar.ROUND_TIME should be constant (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#56-57)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
Minewar.lottery (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#158-174) should be declared external
Minewar.getRankList (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#174-176) should be declared external
Minewar.becomeSponsor (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#176-184) should be declared external
Minewar.getFreeMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#192-219) should be declared external
Minewar.buyMiner (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#219-257) should be declared external
Minewar.getPlayerData (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#257-274) should be declared external
Minewar.buyBooster (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#288-307) should be declared external
Minewar.getBoosterData (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#307-318) should be declared external
Minewar.buyCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#339-362) should be declared external
Minewar.sellCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#363-383) should be declared external
Minewar.withdrawBuyDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#384-401) should be declared external
Minewar.getBuyDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#401-412) should be declared external
Minewar.sellCrystalDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#427-456) should be declared external
Minewar.buyCrystal (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#456-475) should be declared external
Minewar.withdrawSellDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#475-492) should be declared external
Minewar.getSellDemand (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#492-504) should be declared external
Minewar.getBalance (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#526-527) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol:
	- pragma solidity^0.4.2 (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#1): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Function 'Minewar.Minewar' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#113-131) is not in mixedCase
Variable 'Minewar.CRTSTAL_MINING_PERIOD' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#53) is not in mixedCase
Variable 'Minewar.SHARE_CRYSTAL' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#53-55) is not in mixedCase
Variable 'Minewar.HALF_TIME' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#55-56) is not in mixedCase
Variable 'Minewar.ROUND_TIME' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#56-57) is not in mixedCase
Variable 'Minewar.BASE_PRICE' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#57-59) is not in mixedCase
Variable 'Minewar.RANK_LIST_LIMIT' (/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol#59) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/unique_chucks/5/0x4a184673b7247ea15227d8f738a0627e0b17d72a.sol analyzed (2 contracts), 38 result(s) found