{"error": null, "issues": [{"address": 1062, "code": "ire((msg.sender == owner) || (msg.sender == manager));\n        _;\n    }\n\n\n    event Issue(address indexed _to, uint256 value);\n \n\n    event Profit(uint256 ", "debug": "calldata_USDBToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_USDBToken_0: 0x453920cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_USDBToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTokenName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xeddcbfebb20935b1fa1d432368c0110755c51334.sol", "function": "changeTokenName(string,string)", "lineno": 481, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8654, "code": "function _burn", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_USDBToken_4: 0xffffffffffffffffffffffffffffffffffffffe000000fffffffffffffff00fe\ncalldatasize_USDBToken: 0x64\ncalldata_USDBToken_32 + 36: 0x10000000000000000000000000000001f87fff0000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_USDBToken_32_+_4: 0xffffffffffffffffffffffffffffffffffffffff80000fffc0ffffffb7ff5ffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x10000000000000000000000000000001f87fff0000000000000000000\ncalldata_USDBToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_USDBToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/25/0xeddcbfebb20935b1fa1d432368c0110755c51334.sol", "function": "transferFrom(address,address,uint256)", "lineno": 436, "title": "Exception state", "type": "Informational"}, {"address": 9437, "code": "value);\n\n  /**", "debug": "The exception is triggered under the following conditions:\n\ncalldata_USDBToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_USDBToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_USDBToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/25/0xeddcbfebb20935b1fa1d432368c0110755c51334.sol", "function": "burn(uint256)", "lineno": 426, "title": "Exception state", "type": "Informational"}, {"address": 11014, "code": "ame(string _tokenname, string _tokensymbol) public onlyOwner\n    {\n        name = _tokenname;\n        symbol = _tokensymbol;\n    }\n    \n    modifier onlyPayloadSize(uint size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n    address public manager = address(0);\n\n\n    function changeManager(address newManager) public onlyOwner {\n        manager = newManager;\n    }\n\n\n    modifier onlyOwnerOrManager() {\n        require((msg.sender == owner) || (msg.sender == manager));\n        _;\n    }\n\n\n    event Issue(address indexed _to, uint256 value);\n \n\n    event Profit(uint256 value);\n\n    function issue(uint256 amount) public onlyOwnerOrManager {\n        require(totalSupply_ + amount > totalSupply_);\n        require(balances[owner] + amount > balances[owner]);\n\n        balances[owner] = balances[owner].add(amount);\n        totalSupply_ = totalSupply_.add(amount);\n        emit Issue(owner, amount);  \n        emit Transfer(owner, address(0), amount);\n    }\n \n\n    \n    function profit(uint256 amount) public onlyOwnerOrManager{\n        require(amount <= balances[owner]);\n        emit Profit(amount);\n    }\n\n    function easyCommit(uint256 _issue, uint256 _redeem, uint256 _profit) public returns(bool)\n    {\n        issue(_issue);\n        burn(_redeem);\n        profit(_profit);\n        return true;\n    }\n\n\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns(bool)\n    {\n        require(!isBlackListed[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns(bool)\n    {\n        require(!isBlackListed[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function getBlackListStatus(address _maker) public view returns(bool) {\n        return isBlackListed[_maker];\n    }\n\n    mapping(address => bool) public isBlackListed;\n\n    function addBlackList(address _evilUser) public onlyOwner {\n        isBlackListed[_evilUser] = true;\n        emit AddedBlackList(_evilUser);\n    }\n\n    function removeBlackList(address _clearedUser) public onlyOwner {\n        isBlackListed[_clearedUser] = false;\n        emit RemovedBlackList(_clearedUser);\n    }\n\n    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n        require(isBlackListed[_blackListedUser]);\n        uint dirtyFunds = balanceOf(_blackListedUser);\n        balances[_blackListedUser] = 0;\n        totalSupply_ = totalSupply_.sub(dirtyFunds);\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n    }\n\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n\n    event AddedBlackList(address _user);\n\n    event RemovedBlackList(address _user);\n}", "debug": "calldata_USDBToken_4 + calldata_USDBToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_USDBToken_0: 0x453920cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_USDBToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTokenName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xeddcbfebb20935b1fa1d432368c0110755c51334.sol", "function": "changeTokenName(string,string)", "lineno": 461, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11028, "code": "ame(string _tokenname, string _tokensymbol) public onlyOwner\n    {\n        name = _tokenname;\n        symbol = _tokensymbol;\n    }\n    \n    modifier onlyPayloadSize(uint size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n    address public manager = address(0);\n\n\n    function changeManager(address newManager) public onlyOwner {\n        manager = newManager;\n    }\n\n\n    modifier onlyOwnerOrManager() {\n        require((msg.sender == owner) || (msg.sender == manager));\n        _;\n    }\n\n\n    event Issue(address indexed _to, uint256 value);\n \n\n    event Profit(uint256 value);\n\n    function issue(uint256 amount) public onlyOwnerOrManager {\n        require(totalSupply_ + amount > totalSupply_);\n        require(balances[owner] + amount > balances[owner]);\n\n        balances[owner] = balances[owner].add(amount);\n        totalSupply_ = totalSupply_.add(amount);\n        emit Issue(owner, amount);  \n        emit Transfer(owner, address(0), amount);\n    }\n \n\n    \n    function profit(uint256 amount) public onlyOwnerOrManager{\n        require(amount <= balances[owner]);\n        emit Profit(amount);\n    }\n\n    function easyCommit(uint256 _issue, uint256 _redeem, uint256 _profit) public returns(bool)\n    {\n        issue(_issue);\n        burn(_redeem);\n        profit(_profit);\n        return true;\n    }\n\n\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns(bool)\n    {\n        require(!isBlackListed[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns(bool)\n    {\n        require(!isBlackListed[_from]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function getBlackListStatus(address _maker) public view returns(bool) {\n        return isBlackListed[_maker];\n    }\n\n    mapping(address => bool) public isBlackListed;\n\n    function addBlackList(address _evilUser) public onlyOwner {\n        isBlackListed[_evilUser] = true;\n        emit AddedBlackList(_evilUser);\n    }\n\n    function removeBlackList(address _clearedUser) public onlyOwner {\n        isBlackListed[_clearedUser] = false;\n        emit RemovedBlackList(_clearedUser);\n    }\n\n    function destroyBlackFunds(address _blackListedUser) public onlyOwner {\n        require(isBlackListed[_blackListedUser]);\n        uint dirtyFunds = balanceOf(_blackListedUser);\n        balances[_blackListedUser] = 0;\n        totalSupply_ = totalSupply_.sub(dirtyFunds);\n        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n    }\n\n    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n\n    event AddedBlackList(address _user);\n\n    event RemovedBlackList(address _user);\n}", "debug": "calldata_USDBToken_4 + calldata_USDBToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_USDBToken_0: 0x453920cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_USDBToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTokenName(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xeddcbfebb20935b1fa1d432368c0110755c51334.sol", "function": "changeTokenName(string,string)", "lineno": 461, "title": "Integer Overflow ", "type": "Warning"}], "success": true}