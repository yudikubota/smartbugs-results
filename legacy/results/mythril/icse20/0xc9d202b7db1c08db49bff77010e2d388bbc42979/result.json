{
  "contract": "0xc9d202b7db1c08db49bff77010e2d388bbc42979",
  "tool": "mythril",
  "start": 1563534563.5479004,
  "end": 1563534673.1830504,
  "duration": 109.63514995574951,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 793,
        "code": "LY_CAP);\n    PerformingDrop(addresses.length);\n\n    assert(addresses.length <= 1000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n  \n  function iPUMP() {\n    totalSupply = SUPPLY_CAP;\n    balances[msg.sender] = SUPPLY_CAP;\n  }\n}",
        "debug": "calldata_iPUMP_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_iPUMP_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "drop(address[],uint256)",
        "lineno": 153,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2923,
        "code": " assert(balanc",
        "debug": "calldata_iPUMP_32 + 4: 0x541250e575bb18197c52e1cf3d6a6eb3bcdb681b1c66122daa075000736d60\nstorage_3: 0x0\ncaller: 0x0\ncalldata_iPUMP_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "drop(address[],uint256)",
        "lineno": 157,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3038,
        "code": "cipient = addresses[i];\n      if",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_iPUMP_32 + 4: 0xb1a24ef4dab2e976d1988e81b87c5dc989cc4715e9206a83ac72644b840cec\ncalldata_iPUMP_4 + calldata_iPUMP_4: 0x3e9\nstorage_3: 0x0\ncaller: 0x0\ncalldata_iPUMP_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "drop(address[],uint256)",
        "lineno": 159,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3150,
        "code": "ent != NULL_ADDRESS) {\n        balances[owner] -=",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_iPUMP_32 + 4: 0x90e7ef3d0f2a147b8d142525ff4316ab123cee72e4cef71e84fb51f062a918\ncalldata_iPUMP_4 + calldata_iPUMP_4: 0x369\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0x8d1d7d7ff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_iPUMP_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "drop(address[],uint256)",
        "lineno": 160,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3459,
        "code": "der] = SUPPLY_CAP;\n  }\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iPUMP_cpy: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffff7b0b100\ncalldata_iPUMP_32 + 4: 0x6afdfac2288402ae860fcf0002da24fa0a729fafb33678b7f7a8989004448a\ncalldata_iPUMP_4 + calldata_iPUMP_4: 0x18b\nstorage_4: 0x0\ncalldata_iPUMP_cpy: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0xfe8572e00\nstorage_3: 0x0\ncaller: 0x0\ncalldata_iPUMP_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "drop(address[],uint256)",
        "lineno": 170,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4400,
        "code": "ress[] add",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_iPUMP_0: 0x911475cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `incNonce()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "incNonce()",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6019,
        "code": "d(uint256 a, u",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_iPUMP_32 + 4: 0x1\ncalldata_iPUMP_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_iPUMP_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "transfer(address,uint256)",
        "lineno": 57,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6037,
        "code": "Basic",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iPUMP_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_iPUMP_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_iPUMP_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xd73dd623`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "_function_0xd73dd623",
        "lineno": 64,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6050,
        "code": "s ERC20Basic {",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iPUMP_4: 0x1\ncalldata_iPUMP_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_iPUMP_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_iPUMP: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0xc9d202b7db1c08db49bff77010e2d388bbc42979.sol",
        "function": "_function_0xd73dd623",
        "lineno": 64,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}