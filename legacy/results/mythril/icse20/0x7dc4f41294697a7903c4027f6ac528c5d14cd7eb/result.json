{
  "contract": "0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb",
  "tool": "mythril",
  "start": 1563475519.76396,
  "end": 1563475706.2115173,
  "duration": 186.44755744934082,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 750,
        "code": "bol = _symbol;\n    }\n\n    //\n    function changeDecimals(uint8 _decimals) o",
        "debug": "calldata_RemiCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RemiCoin_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "changeName(string)",
        "lineno": 154,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1250,
        "code": "   decimals = _decimals;\n    }\n}",
        "debug": "calldata_RemiCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RemiCoin_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "changeSymbol(string)",
        "lineno": 159,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2677,
        "code": "d[from][msg.sender] ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7ffffffffbffffffffffffffffffe3442000a223389a42000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_32_+_4: 0x80e7f12a100000000000000593fee00219071389040411c01800050000080003\ncalldata_RemiCoin_32 + 36: 0x8318136a77ffffffffffff1003f4e3440900210b388410400000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_4: 0x8318136a77ffffffffffff1003f4e3440900210b388410400000000000000001\ncalldata_RemiCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 111,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2900,
        "code": " that this transfer took place\n   ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1fffffffffffffffffffffffffffffffffffff00fe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_32_+_4: 0x7ffffffffffffffe\ncalldata_RemiCoin_32 + 36: 0xffffffffffffffffffffffe00000000000000000000000000000040000000002\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_4: 0xffffffffffffffffffffffe00000000000000000000000000000040000000002\ncalldata_RemiCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 114,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3467,
        "code": "fer(owner,target,mintedAmount);\n",
        "debug": "calldata_RemiCoin_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RemiCoin_0: 0x79c6506800000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mintToken(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "mintToken(address,uint256)",
        "lineno": 138,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3483,
        "code": "//\n    function freezeAccou",
        "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RemiCoin_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RemiCoin_0: 0x79c6506800000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mintToken(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "mintToken(address,uint256)",
        "lineno": 141,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4356,
        "code": "ng the sender balanc",
        "debug": "calldata_RemiCoin_32 + 4: 0x8a98e844a4814ebcdc3894862942463e274c3013833a45868064785aa5e2943a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf2e04839729617ffee181dc48ce8001001fca812ca5e71f3b103093c1d18001e\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RemiCoin_4: 0x8e9346445a33288d93ae0010a542b7bfb2ef0fd3dabb75d6ff676d6edd885b83\ncalldata_RemiCoin_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "transfer(address,uint256)",
        "lineno": 83,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5444,
        "code": "er {\n\n    //Common information about coin\n    string  public name;\n    string  public symbol;\n    uint8   public decimals;\n    uint256 public totalSupply;\n    \n    //Balance property which should be always associate with an address\n    mapping(address => uint256) balances;\n    //frozenAccount property which should be associate with an address\n    mapping (address => bool) public frozenAccount;\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n    \n    //These generates a public event on the blockchain that will notify clients\n    event FrozenFunds(address target, bool frozen);\n    \n    //Construtor for initial supply (The address who deployed the contract will get it) and important information\n    function RemiCoin(uint256 initial_supply, string _name, string _symbol, uint8 _decimal) {\n        balances[msg.sender]  = initial_supply;\n        name                  = _name;\n        symbol                = _symbol;\n        decimals              = _decimal;\n        totalSupply           = initial_supply;\n    }\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //Function for transer the coin from one address to another\n    function transfer(address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the sender should have enough coins\n        if(balances[msg.sender] < value) return false;\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        //substracting the sender balance\n        balances[msg.sender] -= value;\n        //adding the reciever balance\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(msg.sender, to, value);\n\n        return true;\n    }\n\n\n    //Function for transer the coin from one address to another\n    function transferFrom(address from, address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the from should have enough coins\n        if(balances[from] < value) return false;\n\n        //checking for allowance\n        if( allowed[from][msg.sender] >= value ) return false;\n\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        balances[from] -= value;\n        allowed[from][msg.sender] -= value;\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(from, to, value);\n\n        return true;\n    }\n\n    //\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    //\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    //\n    function mintToken(address target, uint256 mintedAmount) onlyOwner{\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        \n        Transfer(0,owner,mintedAmount);\n        Transfer(owner,target,mintedAmount);\n    }\n\n    //\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    //\n    function changeName(string _name) onlyOwner {\n        name = _name;\n    }\n\n    //\n    function changeSymbol(string _symbol) onlyOwner {\n        symbol = _symbol;\n    }\n\n    //\n    function changeDecimals(uint8 _decimals) onlyOwner {\n        decimals = _decimals;\n    }\n}",
        "debug": "calldata_RemiCoin_4 + calldata_RemiCoin_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RemiCoin_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "changeSymbol(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5458,
        "code": "er {\n\n    //Common information about coin\n    string  public name;\n    string  public symbol;\n    uint8   public decimals;\n    uint256 public totalSupply;\n    \n    //Balance property which should be always associate with an address\n    mapping(address => uint256) balances;\n    //frozenAccount property which should be associate with an address\n    mapping (address => bool) public frozenAccount;\n    // Owner of account approves the transfer of an amount to another account\n    mapping(address => mapping (address => uint256)) allowed;\n    \n    //These generates a public event on the blockchain that will notify clients\n    event FrozenFunds(address target, bool frozen);\n    \n    //Construtor for initial supply (The address who deployed the contract will get it) and important information\n    function RemiCoin(uint256 initial_supply, string _name, string _symbol, uint8 _decimal) {\n        balances[msg.sender]  = initial_supply;\n        name                  = _name;\n        symbol                = _symbol;\n        decimals              = _decimal;\n        totalSupply           = initial_supply;\n    }\n\n    // What is the balance of a particular account?\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    //Function for transer the coin from one address to another\n    function transfer(address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the sender should have enough coins\n        if(balances[msg.sender] < value) return false;\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        //substracting the sender balance\n        balances[msg.sender] -= value;\n        //adding the reciever balance\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(msg.sender, to, value);\n\n        return true;\n    }\n\n\n    //Function for transer the coin from one address to another\n    function transferFrom(address from, address to, uint value) returns (bool success) {\n\n        //checking account is freeze or not\n        if (frozenAccount[msg.sender]) return false;\n\n        //checking the from should have enough coins\n        if(balances[from] < value) return false;\n\n        //checking for allowance\n        if( allowed[from][msg.sender] >= value ) return false;\n\n        //checking for overflows\n        if(balances[to] + value < balances[to]) return false;\n        \n        balances[from] -= value;\n        allowed[from][msg.sender] -= value;\n        balances[to] += value;\n        \n        // Notify anyone listening that this transfer took place\n        Transfer(from, to, value);\n\n        return true;\n    }\n\n    //\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    //\n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n    \n    //\n    function mintToken(address target, uint256 mintedAmount) onlyOwner{\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        \n        Transfer(0,owner,mintedAmount);\n        Transfer(owner,target,mintedAmount);\n    }\n\n    //\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    //\n    function changeName(string _name) onlyOwner {\n        name = _name;\n    }\n\n    //\n    function changeSymbol(string _symbol) onlyOwner {\n        symbol = _symbol;\n    }\n\n    //\n    function changeDecimals(uint8 _decimals) onlyOwner {\n        decimals = _decimals;\n    }\n}",
        "debug": "calldata_RemiCoin_4 + calldata_RemiCoin_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_RemiCoin_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_RemiCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0x7dc4f41294697a7903c4027f6ac528c5d14cd7eb.sol",
        "function": "changeSymbol(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}