{"error": null, "issues": [{"address": 1525, "code": "nal view returns (uint[]) {\n        return tokenOfOwnerByIndex[owner];\n    }\n\n    function balanceOf(address owner) exter", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Emojisan_0: 0x8462151c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokensOfOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokensOfOwner(address)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1777, "code": " (uint[]) {\n        return tokenByIndex;\n    }\n\n    function tokensOfOwner(address owne", "debug": "storage_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_Emojisan_0: 0x9d63848a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokens()", "lineno": 40, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3873, "code": "int lastTokenId = tokenOfOwnerByInde", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Emojisan_32_+_36: 0x0\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_0: 0x42842e0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `safeTransferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "safeTransferFrom(address,address,uint256)", "lineno": 88, "title": "Integer Underflow", "type": "Warning"}, {"address": 3959, "code": "stTokenId;\n            indexInTokenO", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_Emojisan_32_+_36: 0x9916614be24c49ba406913000000000000000000000000000000000000000042\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0x184af111a560d3d382c89916614bd6f7824e9c16\ncalldata_Emojisan_0: 0x42842e0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "safeTransferFrom(address,address,uint256)", "lineno": 89, "title": "Exception state", "type": "Informational"}, {"address": 4049, "code": "rom][lastTokenId] = index;\n     ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_Emojisan_32_+_36: 0x8000000000000000020000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x20000800000000000000000000000000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0x8000000000000000000000000000000000000000\ncalldata_Emojisan_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "transferFrom(address,address,uint256)", "lineno": 90, "title": "Exception state", "type": "Informational"}, {"address": 4222, "code": "nId);\n        indexInTokenOfOwnerB", "debug": "storage_keccac_calldata_Emojisan_32_+_36: 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_0: 0x42842e0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `safeTransferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "safeTransferFrom(address,address,uint256)", "lineno": 93, "title": "Integer Underflow", "type": "Warning"}, {"address": 4304, "code": ";\n\ninterface ERC72", "debug": "storage_keccac_calldata_Emojisan_32_+_36: 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "transferFrom(address,address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4343, "code": "       emi", "debug": "storage_keccac_calldata_Emojisan_32_+_36: 0xffffffffffffffffffffff0000000000000000000000000000000000000000ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "transferFrom(address,address,uint256)", "lineno": 98, "title": "Integer Underflow", "type": "Warning"}, {"address": 4642, "code": "uint[]) public tokenOfOwnerByIndex;\n    mapping (addre", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Emojisan_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_0: 0x2f745c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "_function_0x2f745c59", "lineno": 21, "title": "Exception state", "type": "Informational"}, {"address": 4711, "code": "ByIndex;\n    mapping (addr", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Emojisan_4: 0x0\nstorage_4: 0x0\ncalldata_Emojisan_0: 0x4f6ccce700000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "_function_0x4f6ccce7", "lineno": 20, "title": "Exception state", "type": "Informational"}, {"address": 5017, "code": "  function balanceOf(address owne", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Emojisan_0: 0x8462151c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokensOfOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokensOfOwner(address)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5019, "code": "  function balanceOf(address owne", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Emojisan_0: 0x8462151c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokensOfOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokensOfOwner(address)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5164, "code": " tokensOfOwner(addr", "debug": "storage_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Emojisan_0: 0x9d63848a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokens()", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5166, "code": " tokensOfOwner(addr", "debug": "storage_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_Emojisan_0: 0x9d63848a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `tokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "tokens()", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5484, "code": "dexInTokenOfO", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Emojisan_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Emojisan_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "mint(uint256)", "lineno": 134, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5499, "code": ";\n\ninterface ERC72", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Emojisan_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Emojisan_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "mint(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5604, "code": ";\n\ninterface ERC72", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Emojisan_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Emojisan_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "mint(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5643, "code": "e(msg.send", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_Emojisan_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Emojisan_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `mint(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "mint(uint256)", "lineno": 139, "title": "Integer Underflow", "type": "Warning"}, {"address": 7481, "code": "t Emojisan {\n\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool value);\n\n    string public constant name = \"emojisan.github.io\";\n    string public constant symbol = \"EMJS\";\n    address public minter;\n    mapping (bytes4 => bool) public supportsInterface;\n    mapping (uint => address) private tokenToOwner;\n    uint public totalSupply;\n    uint[] public tokenByIndex;\n    mapping (address => uint[]) public tokenOfOwnerByIndex;\n    mapping (address => mapping (uint => uint)) private indexInTokenOfOwnerByIndex;\n    mapping (uint => address) public getApproved;\n    mapping (address => mapping (address => bool)) public isApprovedForAll;\n\n    constructor() public {\n        minter = msg.sender;\n        supportsInterface[0x01ffc9a7] = true;\n        supportsInterface[0x80ac58cd] = true;\n        supportsInterface[0x780e9d63] = true;\n        supportsInterface[0x5b5e139f] = true;\n    }\n\n    function ownerOf(uint tokenId) external view returns (address) {\n        address owner = tokenToOwner[tokenId];\n        require(owner != 0);\n        return owner;\n    }\n\n    function tokens() external view returns (uint[]) {\n        return tokenByIndex;\n    }\n\n    function tokensOfOwner(address owner) external view returns (uint[]) {\n        return tokenOfOwnerByIndex[owner];\n    }\n\n    function balanceOf(address owner) external view returns (uint) {\n        return tokenOfOwnerByIndex[owner].length;\n    }\n\n    function tokenURI(uint tokenId) public view returns (string) {\n        require(tokenToOwner[tokenId] != 0);\n        bytes memory base = \"https://raw.githubusercontent.com/emojisan/data/master/tkn/\";\n        uint length = 0;\n        uint tmp = tokenId;\n        do {\n            tmp /= 62;\n            length++;\n        } while (tmp != 0);\n        bytes memory uri = new bytes(base.length + length);\n        for (uint i = 0; i < base.length; i++) {\n            uri[i] = base[i];\n        }\n        do {\n            length--;\n            tmp = tokenId % 62;\n            if (tmp < 10) tmp += 48;\n            else if (tmp < 36) tmp += 55;\n            else tmp += 61;\n            uri[base.length + length] = bytes1(tmp);\n            tokenId /= 62;\n        } while (length != 0);\n        return string(uri);\n    }\n\n    function transferFrom(address from, address to, uint tokenId) public {\n        require(to != address(this));\n        require(to != 0);\n        address owner = tokenToOwner[tokenId];\n        address approved = getApproved[tokenId];\n        require(from == owner);\n        require(msg.sender == owner || msg.sender == approved || isApprovedForAll[owner][msg.sender]);\n        tokenToOwner[tokenId] = to;\n        uint index = indexInTokenOfOwnerByIndex[from][tokenId];\n        uint lastIndex = tokenOfOwnerByIndex[from].length - 1;\n        if (index != lastIndex) {\n            uint lastTokenId = tokenOfOwnerByIndex[from][lastIndex];\n            tokenOfOwnerByIndex[from][index] = lastTokenId;\n            indexInTokenOfOwnerByIndex[from][lastTokenId] = index;\n        }\n        tokenOfOwnerByIndex[from].length--;\n        uint length = tokenOfOwnerByIndex[to].push(tokenId);\n        indexInTokenOfOwnerByIndex[to][tokenId] = length - 1;\n        if (approved != 0) {\n            delete getApproved[tokenId];\n        }\n        emit Transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint tokenId, bytes data) public {\n        transferFrom(from, to, tokenId);\n        uint size;\n        assembly { size := extcodesize(to) }\n        if (size != 0) {\n            bytes4 magic = ERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\n            require(magic == 0x150b7a02);\n        }\n    }\n\n    function safeTransferFrom(address from, address to, uint tokenId) external {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function approve(address approved, uint tokenId) external {\n        address owner = tokenToOwner[tokenId];\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender]);\n        getApproved[tokenId] = approved;\n        emit Approval(owner, approved, tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool value) external {\n        isApprovedForAll[msg.sender][operator] = value;\n        emit ApprovalForAll(msg.sender, operator, value);\n    }\n\n    function mint(uint tokenId) external {\n        require(msg.sender == minter);\n        require(tokenToOwner[tokenId] == 0);\n        tokenToOwner[tokenId] = msg.sender;\n        totalSupply++;\n        tokenByIndex.push(tokenId);\n        uint length = tokenOfOwnerByIndex[msg.sender].push(tokenId);\n        indexInTokenOfOwnerByIndex[msg.sender][tokenId] = length - 1;\n        emit Transfer(0, msg.sender, tokenId);\n    }\n\n    function setMinter(address newMinter) external {\n        require(msg.sender == minter);\n        minter = newMinter;\n    }\n}", "debug": "storage_keccac_calldata_Emojisan_32_+_36: 0x7167244d6751a60d50ab160000000000000000000000000000000000000000ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x7167244d6751a60d50ab162de79b832e566e9375ae0492e889860f46b4235000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0x94152ed1166137ed3d74d7b9e83beba8d9288a6180349e4eedf7cf56a083f181\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0x2de79b832e566e9375ae0492e889860f46b4234f\ncalldata_Emojisan_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "transferFrom(address,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7483, "code": "t Emojisan {\n\n    event Transfer(address indexed from, address indexed to, uint indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool value);\n\n    string public constant name = \"emojisan.github.io\";\n    string public constant symbol = \"EMJS\";\n    address public minter;\n    mapping (bytes4 => bool) public supportsInterface;\n    mapping (uint => address) private tokenToOwner;\n    uint public totalSupply;\n    uint[] public tokenByIndex;\n    mapping (address => uint[]) public tokenOfOwnerByIndex;\n    mapping (address => mapping (uint => uint)) private indexInTokenOfOwnerByIndex;\n    mapping (uint => address) public getApproved;\n    mapping (address => mapping (address => bool)) public isApprovedForAll;\n\n    constructor() public {\n        minter = msg.sender;\n        supportsInterface[0x01ffc9a7] = true;\n        supportsInterface[0x80ac58cd] = true;\n        supportsInterface[0x780e9d63] = true;\n        supportsInterface[0x5b5e139f] = true;\n    }\n\n    function ownerOf(uint tokenId) external view returns (address) {\n        address owner = tokenToOwner[tokenId];\n        require(owner != 0);\n        return owner;\n    }\n\n    function tokens() external view returns (uint[]) {\n        return tokenByIndex;\n    }\n\n    function tokensOfOwner(address owner) external view returns (uint[]) {\n        return tokenOfOwnerByIndex[owner];\n    }\n\n    function balanceOf(address owner) external view returns (uint) {\n        return tokenOfOwnerByIndex[owner].length;\n    }\n\n    function tokenURI(uint tokenId) public view returns (string) {\n        require(tokenToOwner[tokenId] != 0);\n        bytes memory base = \"https://raw.githubusercontent.com/emojisan/data/master/tkn/\";\n        uint length = 0;\n        uint tmp = tokenId;\n        do {\n            tmp /= 62;\n            length++;\n        } while (tmp != 0);\n        bytes memory uri = new bytes(base.length + length);\n        for (uint i = 0; i < base.length; i++) {\n            uri[i] = base[i];\n        }\n        do {\n            length--;\n            tmp = tokenId % 62;\n            if (tmp < 10) tmp += 48;\n            else if (tmp < 36) tmp += 55;\n            else tmp += 61;\n            uri[base.length + length] = bytes1(tmp);\n            tokenId /= 62;\n        } while (length != 0);\n        return string(uri);\n    }\n\n    function transferFrom(address from, address to, uint tokenId) public {\n        require(to != address(this));\n        require(to != 0);\n        address owner = tokenToOwner[tokenId];\n        address approved = getApproved[tokenId];\n        require(from == owner);\n        require(msg.sender == owner || msg.sender == approved || isApprovedForAll[owner][msg.sender]);\n        tokenToOwner[tokenId] = to;\n        uint index = indexInTokenOfOwnerByIndex[from][tokenId];\n        uint lastIndex = tokenOfOwnerByIndex[from].length - 1;\n        if (index != lastIndex) {\n            uint lastTokenId = tokenOfOwnerByIndex[from][lastIndex];\n            tokenOfOwnerByIndex[from][index] = lastTokenId;\n            indexInTokenOfOwnerByIndex[from][lastTokenId] = index;\n        }\n        tokenOfOwnerByIndex[from].length--;\n        uint length = tokenOfOwnerByIndex[to].push(tokenId);\n        indexInTokenOfOwnerByIndex[to][tokenId] = length - 1;\n        if (approved != 0) {\n            delete getApproved[tokenId];\n        }\n        emit Transfer(from, to, tokenId);\n    }\n\n    function safeTransferFrom(address from, address to, uint tokenId, bytes data) public {\n        transferFrom(from, to, tokenId);\n        uint size;\n        assembly { size := extcodesize(to) }\n        if (size != 0) {\n            bytes4 magic = ERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data);\n            require(magic == 0x150b7a02);\n        }\n    }\n\n    function safeTransferFrom(address from, address to, uint tokenId) external {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    function approve(address approved, uint tokenId) external {\n        address owner = tokenToOwner[tokenId];\n        require(msg.sender == owner || isApprovedForAll[owner][msg.sender]);\n        getApproved[tokenId] = approved;\n        emit Approval(owner, approved, tokenId);\n    }\n\n    function setApprovalForAll(address operator, bool value) external {\n        isApprovedForAll[msg.sender][operator] = value;\n        emit ApprovalForAll(msg.sender, operator, value);\n    }\n\n    function mint(uint tokenId) external {\n        require(msg.sender == minter);\n        require(tokenToOwner[tokenId] == 0);\n        tokenToOwner[tokenId] = msg.sender;\n        totalSupply++;\n        tokenByIndex.push(tokenId);\n        uint length = tokenOfOwnerByIndex[msg.sender].push(tokenId);\n        indexInTokenOfOwnerByIndex[msg.sender][tokenId] = length - 1;\n        emit Transfer(0, msg.sender, tokenId);\n    }\n\n    function setMinter(address newMinter) external {\n        require(msg.sender == minter);\n        minter = newMinter;\n    }\n}", "debug": "storage_keccac_calldata_Emojisan_32_+_36: 0xae267fffffffffffffffff0000000000000000000000000000000000000000ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0xae26800000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Emojisan_4: 0xc9a2800000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_4: 0x0\ncalldata_Emojisan_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Emojisan_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Emojisan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe3f2f807ba194ea0221b9109fb14da600c9e1eb6.sol", "function": "transferFrom(address,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}], "success": true}