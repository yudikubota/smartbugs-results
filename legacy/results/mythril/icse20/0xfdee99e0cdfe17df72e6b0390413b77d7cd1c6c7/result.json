{
  "contract": "0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7",
  "tool": "mythril",
  "start": 1563594847.7276309,
  "end": 1563594945.1495745,
  "duration": 97.42194366455078,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2017,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "claim()",
        "lineno": 392,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2799,
        "code": "amWallet] ){\n            perVa",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "alloc()",
        "lineno": 384,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2799,
        "code": "amWallet] ){\n            perVa",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function alloc(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "alloc()",
        "lineno": 384,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2971,
        "code": "et];\n        }\n        lockBalance[t",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "alloc()",
        "lineno": 385,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2982,
        "code": "= lockBalance[teamWallet].sub(perV",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "alloc()",
        "lineno": 387,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3009,
        "code": "    require(t",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "alloc()",
        "lineno": 388,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3564,
        "code": "rn c;",
        "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZJLTTokenVault_0: 0x8380edb700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZJLTTokenVault: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `isUnlocked()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "isUnlocked()",
        "lineno": 38,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3577,
        "code": "\ncontract ERC2",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZJLTTokenVault_0: 0x8380edb700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZJLTTokenVault: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0xfdee99e0cdfe17df72e6b0390413b77d7cd1c6c7.sol",
        "function": "isUnlocked()",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}