{
  "contract": "0x431fb0eee95fa20d89232f21b9dbdff806b7e974",
  "tool": "mythril",
  "start": 1563341690.832291,
  "end": 1563341845.4619632,
  "duration": 154.62967228889465,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 192,
        "code": "tringToBytes32(name)] = addr;\n    emit NewToken(name, addr);\n  }\n  \n  function checkTransfer(string _token, address _from, address _to, uint256 _amount) publi",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0x17456e5600000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "setTokenAddress(string,address)",
        "lineno": 93,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 329,
        "code": "stringToBytes32(tokenName);\n    RegulatedTokenERC1404I rtoken = RegulatedTokenERC1404I(tokenAddresses[token]);\n    RegulatorServiceI service = rtoken._service();\n    return service.messageForReason(_reason);\n  }\n  \n  function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n    bytes memory tempEm",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0x3a610bde00000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `messageForReason(string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "messageForReason(string,uint8)",
        "lineno": 112,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 678,
        "code": "eturns (uint8) {\n    bytes32 token = stringToBytes32(_token);\n    RegulatedTokenERC1404I rtoken = RegulatedTokenERC1404I(tokenAddresses[token]);\n    RegulatorServiceI service = rtoken._service();\n    return service.check(tokenAddresses[token], _from, _from, _to, _amount);\n  }\n\n  function checkPermission(string tokenName, address addr) public view returns (uint8) {\n    bytes3",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0x8ecde3c400000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `checkTransfer(string,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkTransfer(string,address,address,uint256)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 883,
        "code": "n = stringToBytes32(tokenName);\n    RegulatedTokenERC1404I rtoken = RegulatedTokenERC1404I(tokenAddresses[token]);\n    RegulatorServiceI service = rtoken._service();\n    return service.participants(tokenAddresses[token], addr);\n  }\n  \n  function messageForReason(string tokenName, uint8 _reason) public view returns (string) {\n    bytes32 ",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0x9216f44100000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `checkPermission(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkPermission(string,address)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1046,
        "code": "kenAddresses[stringToBytes32(name)];\n    }\n    \n  function setTokenAddress(string name, address addr) public onlyOwner {\n    tokenA",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0xc409123600000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getTokenAddress(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "getTokenAddress(string)",
        "lineno": 89,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1215,
        "code": "gTest = bytes(source);\n    if (tempEmptyStringTest.length == 0) {\n        return 0x0;\n    }\n\n    assembly {\n        result := mload(add(source, 32))\n    }\n  }\n}",
        "debug": "calldata_RegulatorServiceI_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RegulatorServiceI_0: 0xcfb5192800000000000000000000000000000000000000000000000000000000\ncalldatasize_RegulatorServiceI: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `stringToBytes32(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "stringToBytes32(string)",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1965,
        "code": "source) public pu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "messageForReason(string,uint8)",
        "lineno": 118,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1965,
        "code": "source) public pu",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2143\n",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "messageForReason(string,uint8)",
        "lineno": 118,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1965,
        "code": "source) public pu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function messageForReason(string,uint8). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "messageForReason(string,uint8)",
        "lineno": 118,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2143,
        "code": "tes32 result) {\n    bytes memory ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "messageForReason(string,uint8)",
        "lineno": 118,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2773,
        "code": "\n\n  function chec",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkTransfer(string,address,address,uint256)",
        "lineno": 102,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2773,
        "code": "\n\n  function chec",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3212\n",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkTransfer(string,address,address,uint256)",
        "lineno": 102,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2773,
        "code": "\n\n  function chec",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkTransfer(string,address,address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkTransfer(string,address,address,uint256)",
        "lineno": 102,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3212,
        "code": "ring tokenName, address addr) public view returns (uint8) {\n    ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkTransfer(string,address,address,uint256)",
        "lineno": 104,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3463,
        "code": "ForReason(string ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkPermission(string,address)",
        "lineno": 111,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3463,
        "code": "ForReason(string ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3790\n",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkPermission(string,address)",
        "lineno": 111,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3463,
        "code": "ForReason(string ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkPermission(string,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkPermission(string,address)",
        "lineno": 111,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3790,
        "code": "t8 _reason) public view returns (string) {\n    by",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x431fb0eee95fa20d89232f21b9dbdff806b7e974.sol",
        "function": "checkPermission(string,address)",
        "lineno": 111,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}