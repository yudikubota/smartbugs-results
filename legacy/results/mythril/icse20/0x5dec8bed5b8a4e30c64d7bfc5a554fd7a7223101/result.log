{"error": null, "issues": [{"address": 256, "code": " * 100);\n    if (balanceOf(targetAddre", "debug": "The exception is triggered under the following conditions:\n\ncalldata_PiggyBank_0: 0x6fdde0700000000000000000000000000000000000000000000000000000000\ncalldatasize_PiggyBank: 0x4\nstorage_2: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/23/0x5dec8bed5b8a4e30c64d7bfc5a554fd7a7223101.sol", "function": "fallback", "lineno": 39, "title": "Exception state", "type": "Informational"}, {"address": 1119, "code": ").balance / targetAmount;\n  }\n\n  event Tr", "debug": "balance_at_1461501637330902918203684832716283019655932542975 & 0: 0xe84bfdf7c7fb9820033ffc4f622eeb68bbb46b5a7328a2a6c6e041c245cd065e\nstorage_3: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PiggyBank_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_PiggyBank: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/23/0x5dec8bed5b8a4e30c64d7bfc5a554fd7a7223101.sol", "function": "fallback", "lineno": 33, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1127, "code": ").balance / targetAmount;\n  }\n\n  event Transfer(address ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncalldata_PiggyBank_4: 0x0\ncalldata_PiggyBank_0: 0x70a0823100000000000000000000000000000000000000000000000000000000\ncalldatasize_PiggyBank: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/23/0x5dec8bed5b8a4e30c64d7bfc5a554fd7a7223101.sol", "function": "balanceOf(address)", "lineno": 33, "title": "Exception state", "type": "Informational"}], "success": true}