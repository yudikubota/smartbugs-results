{
  "contract": "0xdbdf54969a4e943bb8c7dd9f04ea853bca018301",
  "tool": "mythril",
  "start": 1563325660.8454547,
  "end": 1563325828.2961214,
  "duration": 167.45066666603088,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1448,
        "code": "unders\n    string   public  foundersKey;          // Public key of founders\n\n    uint     public  openTime;             // Time of window 0 opening\n    uint     public  createFirstRound;       // Toke",
        "debug": "calldata_ONOSale_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ONOSale_0: 0x3974579100000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeWhiteList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "removeWhiteList(address[])",
        "lineno": 462,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3781,
        "code": "   for (uint256 i=0; i < addresses.le",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldatasize_ONOSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "fallback",
        "lineno": 436,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3826,
        "code": "ound].push(msg.sender);\n        }\n\n        emit LogBu",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x7ffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffff\nstorage_9: 0x1\nstorage_10: 0x20d1bc579ffa5bf3a0f080f8322056a9d5565be33812552834f25cd95d16\nstorage_7: 0x7ffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldatasize_ONOSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "fallback",
        "lineno": 596,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3846,
        "code": "g.sender, msg.value);\n    }\n",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x7ffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffff\nstorage_9: 0x1\ncallvalue: 0xde0b6b3a763ffff\nstorage_10: 0x20d1bc579ffa5bf3a0f080f8322056a9d5565be33812552834f25cd95d17\nstorage_7: 0x7ffffffffffffffffffffffffffffffffffbffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldatasize_ONOSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "fallback",
        "lineno": 599,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4570,
        "code": " authorized(bytes4 sig) {\n        assert(",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\nstorage_1: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ONOSale_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "stop()",
        "lineno": 78,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4708,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "stop()",
        "lineno": 692,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4831,
        "code": " authorized(bytes4 sig) {\n        assert(",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\nstorage_1: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ONOSale_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "setOwner(address)",
        "lineno": 78,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5514,
        "code": "\n        }\n    }\n\n    function addWhi",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_ONOSale_0: 0x3974579100000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "removeWhiteList(address[])",
        "lineno": 438,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5683,
        "code": "Collect  (uint amount);\n\n    constructor(\n      ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ONOSale_32 + 4: 0x0\nstorage_keccac_calldata_ONOSale_4: 0x0\ncalldata_ONOSale_0: 0x3a7dab5e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "_function_0x3a7dab5e",
        "lineno": 488,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5862,
        "code": "\n        }\n    }\n\n    function addWhi",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_ONOSale_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "burn(uint256)",
        "lineno": 438,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9206,
        "code": "   if (price > minPrice) {\n",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_9: 0x1\ncalldata_ONOSale_0: 0x379607f500000000000000000000000000000000000000000000000000000000\ncalldatasize_ONOSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "claim(uint256)",
        "lineno": 626,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 13128,
        "code": "nctio",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xd13d64aa46ba1631312dedeccc908566f8ea02413072fe27a3604a1fb0ee588d\ncallvalue: 0xa9e120f2bf0f5fcdb11144f3209de1c7ba73b189bf6adfd7d17faddfb2a71bef\ntimestamp: 0x0\nstorage_7: 0x0\nstorage_9: 0x1\ncalldatasize_ONOSale: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "fallback",
        "lineno": 151,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 13140,
        "code": "   }\n\n    function mul(u",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe28a0007dfb59f4f862288b88e555ebb6d78336a4848c3c64834a08f472c33bd\ntimestamp: 0xfd1673842200000000000810c2a1101108084002850e6fbfdea0400203ffffe7\nstorage_9: 0x9abcd48000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x8a5dffb1a02cd7cb8d32ef38bf8f60637c8470687d7adb063830b2483c5a572d\nstorage_10: 0x19378ecda2a35bf7bb280dfd99500773e296172cbb1f70dd3d853756237b\nstorage_7: 0xfd1673842200000000000810c2a1101108084002850e6fbfdea0400203ffffe7\ncalldatasize_ONOSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "fallback",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 13713,
        "code": "tryExec( address target, bytes ca",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "setOwner(address)",
        "lineno": 98,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 13713,
        "code": "tryExec( address target, bytes ca",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4708\n",
        "filename": "/unique_contracts/0xdbdf54969a4e943bb8c7dd9f04ea853bca018301.sol",
        "function": "stop()",
        "lineno": 98,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}