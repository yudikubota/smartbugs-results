{"error": null, "issues": [{"address": 1263, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1275, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1284, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1290, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1333, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1345, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1354, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1360, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool succe", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3096, "code": "y;\n    totalSupply = ini", "debug": "storage_9: 0x0\nstorage_10: 0x1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `TokenERC20(uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 52, "title": "Integer Underflow", "type": "Warning"}, {"address": 3236, "code": "nction initialize", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3344, "code": "                // a", "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_15: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "buy()", "lineno": 168, "title": "Exception state", "type": "Informational"}, {"address": 3762, "code": "s _to, uint256 _value) public returns (bool success) {\n ", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_16: 0x1\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_14: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transfer(address,uint256)", "lineno": 132, "title": "Exception state", "type": "Informational"}, {"address": 3919, "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "setMinBalance(uint256)", "lineno": 191, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4647, "code": "vent reflecting on the chang", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transfer(address,uint256)", "lineno": 180, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5985, "code": "irdrop2){\n         ", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xfd73ffe400000001ffffffffffffffffffffffffffffffffffffffffffff00ff\ncalldata_x32323_32 + 36: 0xf9fdf9fff2ecfff20000000000000000000000000000000000000000000000e0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x31800b50000001ff80000000000000209300000000015fbfffffe2\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc01\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf9fdf9fff2ecfff20000000000000000000000000000000000000000000000e0\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 67, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6111, "code": "op3-3){\n          ", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff\ncalldata_x32323_32 + 36: 0x3ffffffffffff80000000000000000000000001\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x7ffffffffffffffffffffffff3ffffffffffffbfffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x3ffffffffffff80000000000000000000000001\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 71, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6140, "code": "          ", "debug": "storage_12: 0xc0000000000000000000000000000000000000000000000000000000000001fd\nstorage_8: 0xbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa2a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffff8f09e7a7d7ff73f5ff076f80002a3c200000ffc13f802e000000000037\ncalldata_x32323_32 + 36: 0x315524c2e82e0505b8dc2d40e80b1b998766fef7d7f6fd4cb84229effbb\nstorage_11: 0xbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc80\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x11222e370cf014010395e980005b2438907ee087d785010c81642888037\nstorage_13: 0x2\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x315524c2e82e0505b8dc2d40e80b1b998766fef7d7f6fd4cb84229effbb\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 74, "title": "Integer Underflow", "type": "Warning"}, {"address": 6241, "code": "eward(address _add", "debug": "storage_12: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf7\nstorage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3f6\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x8000000000000003ffe00000000014251406eb68900c4500c1a3d00fae730006\ncalldata_x32323_32 + 36: 0x400000000000202071205eae1ab8c081509a1bcfb53eaff08\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff879\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0xbec3027ffffffffdfffffffffffe01f1080304dd9d84e104d8c032705006fe00\nstorage_13: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee9\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400000000000202071205eae1ab8c081509a1bcfb53eaff08\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 80, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6463, "code": "      balanceOf[_ad", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xfffffffe727ffffffffffff7ffffeffffffffffffffffffe8001ffffcfff0080\ncalldata_x32323_32 + 36: 0x180476dc72b65ff8000000f7ffb7f8000000000004f3b202000200803ec28058\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x103b20ddf6dffbf800000084003ff800000000002fe23effffffff8080711fc0\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01\nstorage_9: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x180476dc72b65ff8000000f7ffb7f8000000000004f3b202000200803ec28058\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 88, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6589, "code": " balanceOf[_addres", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xbc241fdfb7e9c000048001001010023c53fe087c3c4104107aa30202981a00ff\ncalldata_x32323_32 + 36: 0x388b1f7db76c0036b980294b8e026a3793ad38eb1b207c5adb6dfd26762ed611\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbe1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x3202c6e9b0582506489aa761cce059005a00b9908073c3439fedfd0a797e91c9\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffab\nstorage_9: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc3\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x388b1f7db76c0036b980294b8e026a3793ad38eb1b207c5adb6dfd26762ed611\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "transferFrom(address,address,uint256)", "lineno": 92, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6799, "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 totalairdrop = 600000000;\n    uint256 airdrop1 = 1700008000; //1900000000;\n    uint256 airdrop2 = 1700011000; //2100000000;\n    uint256 airdrop3 = 1700012500; //2300000000;\n    \n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool success) {\n\n        if (!initialized[_address]) {\n            initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 2000;\n                totalSupply += 2000;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 800;\n                totalSupply += 800;\n            }\n            if(airdrop2 <= totalSupply && totalSupply <= airdrop3-3){\n                balanceOf[_address] += 300;\n                totalSupply += 300;    \n            }\n\t    \n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\t    if (totalSupply < maxSupply) {\n\t        initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 1000;\n                totalSupply += 1000;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 300;\n                totalSupply += 300;\n            }\n            if(airdrop2 <= totalSupply && totalSupply < airdrop3){\n                balanceOf[_address] += 100;\n                totalSupply += 100;    \n            }\n\t\t\n\t    }\n\t    return true;\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n    \trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6813, "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 totalairdrop = 600000000;\n    uint256 airdrop1 = 1700008000; //1900000000;\n    uint256 airdrop2 = 1700011000; //2100000000;\n    uint256 airdrop3 = 1700012500; //2300000000;\n    \n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n//\u7a7a\u982d//\n    function initialize(address _address) internal returns (bool success) {\n\n        if (!initialized[_address]) {\n            initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 2000;\n                totalSupply += 2000;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 800;\n                totalSupply += 800;\n            }\n            if(airdrop2 <= totalSupply && totalSupply <= airdrop3-3){\n                balanceOf[_address] += 300;\n                totalSupply += 300;    \n            }\n\t    \n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\t    if (totalSupply < maxSupply) {\n\t        initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 1000;\n                totalSupply += 1000;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 300;\n                totalSupply += 300;\n            }\n            if(airdrop2 <= totalSupply && totalSupply < airdrop3){\n                balanceOf[_address] += 100;\n                totalSupply += 100;    \n            }\n\t\t\n\t    }\n\t    return true;\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n    \trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd5906d707e223679395ceb6098dd1da8878b6919.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}], "success": true}