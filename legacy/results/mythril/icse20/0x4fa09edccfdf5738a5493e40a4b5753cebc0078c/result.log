{"error": null, "issues": [{"address": 287, "code": "er(msg.sender, amount*", "debug": "storage_2: 0xe85f3739d8cbbe2a312f083803fb7e7df2db2f24a27def75d31de55e0189f68e\ncallvalue: 0xd696c0a0de743fa93e2e6dc76bfb414184d2af268378ec7dcb39d779bd8cdd2a\nstorage_5: 0xd696c0a0de743fa93e2e6dc76bfb414184d2af268378ec7dcb39d779bd8cdd2a\nstorage_8: 0x0\ncalldata_Token_0: 0x0\ncalldatasize_Token: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "fallback", "lineno": 52, "title": "Integer Overflow ", "type": "Warning"}, {"address": 373, "code": "der, amount, true);\n", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x0\nstorage_5: 0x0\nstorage_8: 0x0\ncalldata_Token_0: 0x1cb3a2000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\nstorage_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "fallback", "lineno": 53, "title": "Exception state", "type": "Informational"}, {"address": 511, "code": "ce);\n        FundTransfer(msg.sender, amount, true);\n ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "fallback", "lineno": 52, "title": "Message call to external contract", "type": "Informational"}, {"address": 1768, "code": "ount, false);\n         ", "debug": "", "description": "In the function `safeWithdrawal()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "safeWithdrawal()", "lineno": 76, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 1768, "code": "ount, false);\n         ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2166\nCall at address: 2166\nCall at address: 2166\nCall at address: 2166\n", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "safeWithdrawal()", "lineno": 76, "title": "Multiple Calls", "type": "Information"}, {"address": 2166, "code": "aised, false);\n            } e", "debug": "", "description": "In the function `safeWithdrawal()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "safeWithdrawal()", "lineno": 85, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 2166, "code": "aised, false);\n            } e", "debug": "", "description": "A possible transaction order independence vulnerability exists in function safeWithdrawal(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/38/0x4fa09edccfdf5738a5493e40a4b5753cebc0078c.sol", "function": "safeWithdrawal()", "lineno": 85, "title": "Transaction order dependence", "type": "Warning"}], "success": true}