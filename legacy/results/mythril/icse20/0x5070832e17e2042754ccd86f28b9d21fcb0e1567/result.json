{
  "contract": "0x5070832e17e2042754ccd86f28b9d21fcb0e1567",
  "tool": "mythril",
  "start": 1563495526.4317756,
  "end": 1563496051.4550111,
  "duration": 525.0232355594635,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2985,
        "code": "getTokensAmount(eth",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "finalize()",
        "lineno": 454,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2985,
        "code": "getTokensAmount(eth",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3316\n",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "finalize()",
        "lineno": 454,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3316,
        "code": "otalSupply()) <= SALE_C",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "finalize()",
        "lineno": 456,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3538,
        "code": " uint(bonuses[level",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "getCurrentBonus()",
        "lineno": 340,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3913,
        "code": "gap*(price*100)/fra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "fallback",
        "lineno": 357,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5373,
        "code": "6 b) internal ",
        "debug": "The exception is triggered under the following conditions:\n\nretval_2985: 0xa56fa60000000000000000\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_TokenSale_0: 0x4bb278f300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x5070832e17e2042754ccd86f28b9d21fcb0e1567.sol",
        "function": "finalize()",
        "lineno": 76,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}