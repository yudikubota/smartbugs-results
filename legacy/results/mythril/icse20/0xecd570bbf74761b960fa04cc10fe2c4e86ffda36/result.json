{
  "contract": "0xecd570bbf74761b960fa04cc10fe2c4e86ffda36",
  "tool": "mythril",
  "start": 1563276496.000184,
  "end": 1563276751.8454137,
  "duration": 255.8452296257019,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 944,
        "code": "eater than zero\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        uint previousTotal = totalSupply;                                  // Start integrity check\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        data[msg.sender] = _data;                                          // Additional data\n        totalSupply = SafeMath.sub(totalSupply, _value);                   // Updates totalSupply\n        assert(previousTotal - _value == totalSupply);                     // End integrity check \n        Burn(msg.sender, _value, _data);\n        return true;\n    }\n\n    // Anyone can freeze the token after transfer time has expired\n    function stop() \n        public\n    {\n        assert(now > timeTransferbleUntil);\n        stopped = true;\n        LogStop();\n    }\n\n  ",
        "debug": "calldata_Token_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 199,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1795,
        "code": "ion getData(address addr) \n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ntimestamp: 0x0\ncalldata_Token_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "stop()",
        "lineno": 226,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2141,
        "code": " frozen on token creation\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xff00\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2166,
        "code": " tokens to a giv",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 115,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2201,
        "code": "[_from] >= _value)",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_32 + 4: 0x0\nstorage_7: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 146,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2276,
        "code": "g.sender]);                  // C",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncalldata_Token_32 + 36: 0x1\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 147,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2412,
        "code": "             // Do not allow transfers to froze",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fe\ncalldata_Token_32 + 36: 0x2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 148,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2430,
        "code": "ub(balances[_from], _v",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fe\ncalldata_Token_32 + 36: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3423,
        "code": "er has enough\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncalldata_Token_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 200,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3498,
        "code": "k\n        balances[msg.sender] = SafeM",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 201,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4016,
        "code": " frozen on token creation\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transfer(address,uint256)",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4041,
        "code": " tokens to a giv",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transfer(address,uint256)",
        "lineno": 115,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4076,
        "code": "      assert(balan",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_7: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transfer(address,uint256)",
        "lineno": 126,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4151,
        "code": "(_to));                               ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Token_32 + 4: 0x1\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transfer(address,uint256)",
        "lineno": 127,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5078,
        "code": "ion transferOwnership(addre",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0xf2fde38b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferOwnership(address)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5190,
        "code": " Ownable {\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xfffbfffffffffffffffffffffffffffffffffffffffffbfffffffffffffb007e\ncalldata_Token_32 + 36: 0x40000000000000000000000000000000002000000000000020040\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0040\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x40000000000000000000000000000000002000000000000020040\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5240,
        "code": "s => uint) balances;\n    mapping (address => mapping (address => uint)) allowances; \n    mapping (address => string) public data;\n    uint    public totalSupply;\n    uint    public timeTransferbleUntil = 1538262000;                        // Transferable until 29/09/2018 23:00 pm UTC\n    bool    public stopped = false;\n \n    event Burn(address indexed from, uint256 value, string data);\n    event LogStop();\n\n    modifier transferable() {\n        assert(!stopped);\n        _;\n    }\n\n    /*\n     *  Public functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success\n    /// @param _to Address of token receiver\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transfer(address _to, uint _value)\n        public      \n        onlyUnfrozen(msg.sender)                                           \n        transferable()\n        returns (bool)        \n    {                         \n        assert(_to != 0x0);                                                // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        assert(!isFrozen(_to));                                            // Do not allow transfers to frozen accounts\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);               // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                                 // Notify anyone listening that this transfer took place\n        return true;       \n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n    /// @param _from Address from where tokens are withdrawn\n    /// @param _to Address to where tokens are sent\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transferFrom(address _from, address _to, uint _value)\n        public    \n        onlyUnfrozen(_from)                                               // Owners can never transfer funds\n        transferable()                 \n        returns (bool)\n    {        \n        assert(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[_from] >= _value);                                // Check if the sender has enough\n        assert(_value <= allowances[_from][msg.sender]);                  // Check allowance\n        assert(!isFrozen(_to));                                           // Do not allow transfers to frozen accounts\n        balances[_from] = SafeMath.sub(balances[_from], _value);          // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);              // Add the same to the recipient\n        allowances[_from][msg.sender] = SafeMath.sub(allowances[_from][msg.sender], _value); \n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success\n    /// @param _spender Address of allowed account\n    /// @param _value Number of approved tokens\n    /// @return Returns success of function call    \n    function approve(address _spender, uint _value)\n        public\n        returns (bool)\n    {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address\n    /// @param _owner Address of token owner\n    /// @param _spender Address of token spender\n    /// @return Returns remaining allowance for spender    \n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint)\n    {\n        return allowances[_owner][_spender];\n    }\n\n    /// @dev Returns number of tokens owned by given address\n    /// @param _owner Address of token owner\n    /// @return Returns balance of owner    \n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint)\n    {\n        return balances[_owner];\n    }\n\n    // @title Burns tokens\n    // @dev remove `_value` tokens from the system irreversibly     \n    // @param _value the amount of tokens to burn   \n    function burn(uint256 _value, string _data) \n        public \n        returns (bool success) \n    {\n        assert(_value > 0);                                                // Amount must be greater than zero\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        uint previousTotal = totalSupply;                                  // Start integrity check\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        data[msg.sender] = _data;                                          // Additional data\n        totalSupply = SafeMath.sub(totalSupply, _value);                   // Updates totalSupply\n        assert(previousTotal - _value == totalSupply);                     // End integrity check \n        Burn(msg.sender, _value, _data);\n        return true;\n    }\n\n    // Anyone can freeze the token after transfer time has expired\n    function stop() \n        public\n    {\n        assert(now > timeTransferbleUntil);\n        stopped = true;\n        LogStop();\n    }\n\n    function totalSupply() \n        constant public \n        returns (uint) \n    {\n        return totalSupply;\n    }\n\n    function getData(address addr) \n        public \n        view\n        returns (string) \n    {\n        return data[addr];\n    }    \n}\n\n\n// Contract Owner 0xb42db275AdCCd23e2cB52CfFc2D4Fe984fbF53B2     \ncontract STP is Token {\n    string  public name = \"STASHPAY\";\n    string  public symbol = \"STP\";\n    uint8   public decimals = 8;\n    uint8   public publicKeySize ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc7c04c845403d89e7489e91f009bcbbfc43effffffffffffffbfffffffffffe1\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe61949a8ac8f30c63e9604907c8fcc68f7e140000000000000050340e2e7ce8\ncalldata_Token_4: 0x47fe7f12ddc17f6386c208105e2010064500000000000000000000000000000\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5269,
        "code": "s => uint) balances;\n    mapping (address => mapping (address => uint)) allowances; \n    mapping (address => string) public data;\n    uint    public totalSupply;\n    uint    public timeTransferbleUntil = 1538262000;                        // Transferable until 29/09/2018 23:00 pm UTC\n    bool    public stopped = false;\n \n    event Burn(address indexed from, uint256 value, string data);\n    event LogStop();\n\n    modifier transferable() {\n        assert(!stopped);\n        _;\n    }\n\n    /*\n     *  Public functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success\n    /// @param _to Address of token receiver\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transfer(address _to, uint _value)\n        public      \n        onlyUnfrozen(msg.sender)                                           \n        transferable()\n        returns (bool)        \n    {                         \n        assert(_to != 0x0);                                                // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        assert(!isFrozen(_to));                                            // Do not allow transfers to frozen accounts\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);               // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                                 // Notify anyone listening that this transfer took place\n        return true;       \n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n    /// @param _from Address from where tokens are withdrawn\n    /// @param _to Address to where tokens are sent\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transferFrom(address _from, address _to, uint _value)\n        public    \n        onlyUnfrozen(_from)                                               // Owners can never transfer funds\n        transferable()                 \n        returns (bool)\n    {        \n        assert(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[_from] >= _value);                                // Check if the sender has enough\n        assert(_value <= allowances[_from][msg.sender]);                  // Check allowance\n        assert(!isFrozen(_to));                                           // Do not allow transfers to frozen accounts\n        balances[_from] = SafeMath.sub(balances[_from], _value);          // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);              // Add the same to the recipient\n        allowances[_from][msg.sender] = SafeMath.sub(allowances[_from][msg.sender], _value); \n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success\n    /// @param _spender Address of allowed account\n    /// @param _value Number of approved tokens\n    /// @return Returns success of function call    \n    function approve(address _spender, uint _value)\n        public\n        returns (bool)\n    {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address\n    /// @param _owner Address of token owner\n    /// @param _spender Address of token spender\n    /// @return Returns remaining allowance for spender    \n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint)\n    {\n        return allowances[_owner][_spender];\n    }\n\n    /// @dev Returns number of tokens owned by given address\n    /// @param _owner Address of token owner\n    /// @return Returns balance of owner    \n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint)\n    {\n        return balances[_owner];\n    }\n\n    // @title Burns tokens\n    // @dev remove `_value` tokens from the system irreversibly     \n    // @param _value the amount of tokens to burn   \n    function burn(uint256 _value, string _data) \n        public \n        returns (bool success) \n    {\n        assert(_value > 0);                                                // Amount must be greater than zero\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        uint previousTotal = totalSupply;                                  // Start integrity check\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        data[msg.sender] = _data;                                          // Additional data\n        totalSupply = SafeMath.sub(totalSupply, _value);                   // Updates totalSupply\n        assert(previousTotal - _value == totalSupply);                     // End integrity check \n        Burn(msg.sender, _value, _data);\n        return true;\n    }\n\n    // Anyone can freeze the token after transfer time has expired\n    function stop() \n        public\n    {\n        assert(now > timeTransferbleUntil);\n        stopped = true;\n        LogStop();\n    }\n\n    function totalSupply() \n        constant public \n        returns (uint) \n    {\n        return totalSupply;\n    }\n\n    function getData(address addr) \n        public \n        view\n        returns (string) \n    {\n        return data[addr];\n    }    \n}\n\n\n// Contract Owner 0xb42db275AdCCd23e2cB52CfFc2D4Fe984fbF53B2     \ncontract STP is Token {\n    string  public name = \"STASHPAY\";\n    string  public symbol = \"STP\";\n    uint8   public decimals = 8;\n    uint8   public publicKeySize ",
        "debug": "calldata_Token_4 + calldata_Token_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5283,
        "code": "s => uint) balances;\n    mapping (address => mapping (address => uint)) allowances; \n    mapping (address => string) public data;\n    uint    public totalSupply;\n    uint    public timeTransferbleUntil = 1538262000;                        // Transferable until 29/09/2018 23:00 pm UTC\n    bool    public stopped = false;\n \n    event Burn(address indexed from, uint256 value, string data);\n    event LogStop();\n\n    modifier transferable() {\n        assert(!stopped);\n        _;\n    }\n\n    /*\n     *  Public functions\n     */\n    /// @dev Transfers sender's tokens to a given address. Returns success\n    /// @param _to Address of token receiver\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transfer(address _to, uint _value)\n        public      \n        onlyUnfrozen(msg.sender)                                           \n        transferable()\n        returns (bool)        \n    {                         \n        assert(_to != 0x0);                                                // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        assert(!isFrozen(_to));                                            // Do not allow transfers to frozen accounts\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);               // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                                 // Notify anyone listening that this transfer took place\n        return true;       \n    }\n\n    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n    /// @param _from Address from where tokens are withdrawn\n    /// @param _to Address to where tokens are sent\n    /// @param _value Number of tokens to transfer\n    /// @return Returns success of function call\n    function transferFrom(address _from, address _to, uint _value)\n        public    \n        onlyUnfrozen(_from)                                               // Owners can never transfer funds\n        transferable()                 \n        returns (bool)\n    {        \n        assert(_to != 0x0);                                               // Prevent transfer to 0x0 address. Use burn() instead\n        assert(balances[_from] >= _value);                                // Check if the sender has enough\n        assert(_value <= allowances[_from][msg.sender]);                  // Check allowance\n        assert(!isFrozen(_to));                                           // Do not allow transfers to frozen accounts\n        balances[_from] = SafeMath.sub(balances[_from], _value);          // Subtract from the sender\n        balances[_to] = SafeMath.add(balances[_to], _value);              // Add the same to the recipient\n        allowances[_from][msg.sender] = SafeMath.sub(allowances[_from][msg.sender], _value); \n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @dev Sets approved amount of tokens for spender. Returns success\n    /// @param _spender Address of allowed account\n    /// @param _value Number of approved tokens\n    /// @return Returns success of function call    \n    function approve(address _spender, uint _value)\n        public\n        returns (bool)\n    {\n        allowances[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Returns number of allowed tokens for given address\n    /// @param _owner Address of token owner\n    /// @param _spender Address of token spender\n    /// @return Returns remaining allowance for spender    \n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint)\n    {\n        return allowances[_owner][_spender];\n    }\n\n    /// @dev Returns number of tokens owned by given address\n    /// @param _owner Address of token owner\n    /// @return Returns balance of owner    \n    function balanceOf(address _owner)\n        public\n        view\n        returns (uint)\n    {\n        return balances[_owner];\n    }\n\n    // @title Burns tokens\n    // @dev remove `_value` tokens from the system irreversibly     \n    // @param _value the amount of tokens to burn   \n    function burn(uint256 _value, string _data) \n        public \n        returns (bool success) \n    {\n        assert(_value > 0);                                                // Amount must be greater than zero\n        assert(balances[msg.sender] >= _value);                            // Check if the sender has enough\n        uint previousTotal = totalSupply;                                  // Start integrity check\n        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value); // Subtract from the sender\n        data[msg.sender] = _data;                                          // Additional data\n        totalSupply = SafeMath.sub(totalSupply, _value);                   // Updates totalSupply\n        assert(previousTotal - _value == totalSupply);                     // End integrity check \n        Burn(msg.sender, _value, _data);\n        return true;\n    }\n\n    // Anyone can freeze the token after transfer time has expired\n    function stop() \n        public\n    {\n        assert(now > timeTransferbleUntil);\n        stopped = true;\n        LogStop();\n    }\n\n    function totalSupply() \n        constant public \n        returns (uint) \n    {\n        return totalSupply;\n    }\n\n    function getData(address addr) \n        public \n        view\n        returns (string) \n    {\n        return data[addr];\n    }    \n}\n\n\n// Contract Owner 0xb42db275AdCCd23e2cB52CfFc2D4Fe984fbF53B2     \ncontract STP is Token {\n    string  public name = \"STASHPAY\";\n    string  public symbol = \"STP\";\n    uint8   public decimals = 8;\n    uint8   public publicKeySize ",
        "debug": "calldata_Token_4 + calldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x7641e6f300000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xecd570bbf74761b960fa04cc10fe2c4e86ffda36.sol",
        "function": "burn(uint256,string)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}