{"error": null, "issues": [{"address": 774, "code": "_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n            }\n        }\n\n         /**\n        * Destroy tokens\n        *\n        * Remove `_value` tokens from the system irreversibly\n        *\n        * @param _value the amount of money to burn\n     ", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x2c9868df00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "approveAndCall(address,uint32,bytes)", "lineno": 153, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1781, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1793, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1802, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1808, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1851, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1863, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1872, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1878, "code": "ing tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2938, "code": "e `_value` tokens from the system irreversibly\n        *\n    ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "approveAndCall(address,uint32,bytes)", "lineno": 163, "title": "Message call to external contract", "type": "Warning"}, {"address": 3213, "code": "ccount\n        *\n    ", "debug": "storage_3: 0xfffffffe00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffff\ncalldata_x32323_4: 0xffffffff\ncalldata_x32323_0: 0x7a5984c400000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burn(uint32)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "burn(uint32)", "lineno": 176, "title": "Integer Underflow", "type": "Warning"}, {"address": 4325, "code": "rposes\n        ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 64, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5919, "code": "alue;\n            // Add the same", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xe2bc16f56019809fc06f72c9e7dc65fa240226b0e0000000000000007bf1c939\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x282504006068a1d640008c7b0ee08fffffffffffffffffffffffffff61056141\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc4428ce2\ncalldata_x32323_32 + 36: 0xc4428ce2\ncalldata_x32323_0: 0x84269ed900000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "transferFrom(address,address,uint32)", "lineno": 90, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6330, "code": "       * Send `_value` tokens to ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0xffddfffffffffffffffffffffffffffffffffffffffffffffffffffffffef7b3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xff57fffffe3000000000000000000000000000000000000000000000003fbff8\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7013b3\ncalldata_x32323_32 + 36: 0x7013b3\ncalldata_x32323_0: 0x84269ed900000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "transferFrom(address,address,uint32)", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6413, "code": "function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            uint8 decimalUnits,\n            string tokenSymbol,\n            address centralMinter\n        ) {\n        if(centralMinter != 0 ) owner = centralMinter;\n        }\n        \n        // Public variables of the token\n        string public name;\n        string public symbol;\n        uint8 public decimals = 0;\n        // 18 decimals is the strongly suggested default, avoid changing it\n        uint32 public totalSupply;\n\n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n\n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint32 value);\n\n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint32 value);\n\n\n\n            /**\n           * Constructor function\n            *\n            * Initializes contract with initial supply tokens to the creator of the contract\n            */\n        function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        */\n    \n        mapping (address => bool) public frozenAccount;\n        event FrozenFunds(address target, bool frozen);\n\n        function freezeAccount(address target, bool freeze) onlyOwner {\n            frozenAccount[target] = freeze;\n            FrozenFunds(target, freeze);\n        }\n    \n        function _transfer(address _from, address _to, uint32 _value) internal {\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != 0x0);\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to] + _value > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from] + balanceOf[_to];\n            // Subtract from the sender\n            balanceOf[_from] -= _value;\n            // Add the same to the recipient\n            balanceOf[_to] += _value;\n            Transfer(_from, _to , _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        }\n\n        /**\n        * Transfer tokens\n        *\n        * Send `_value` tokens to `_to` from your account\n        *\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transfer(address _to, uint32 _value) public {\n            require(!frozenAccount[msg.sender]);\n            _transfer(msg.sender, _to, _value);\n        }\n\n        /**\n        * Transfer tokens from other address\n        *\n        * Send `_value` tokens to `_to` on behalf of `_from`\n        *\n        * @param _from The address of the sender\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transferFrom(address _from, address _to, uint32 _value) public returns (bool success) {\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] -= _value;\n            _transfer(_from, _to, _value);\n            return true;\n        }\n\n        /**\n        * Set allowance for other address\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        */\n        function approve(address _spender, uint32 _value) public\n            returns (bool success) {\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n\n        /**\n        * Set allowance for other address and notify\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        * @param _extraData some extra information to send to the approved contract\n        */\n        function approveAndCall(address _spender, uint32 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n            }\n        }\n\n         /**\n        * Destroy tokens\n        *\n        * Remove `_value` tokens from the system irreversibly\n        *\n        * @param _value the amount of money to burn\n        */\n        function burn(uint32 _value) public returns (bool success) {\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] -= _value;            // Subtract from the sender\n            totalSupply -= _value;                      // Updates totalSupply\n            Burn(msg.sender,  _value);\n            return true;\n        }\n\n        /**\n        * Destroy tokens from other account\n        *\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n        *\n        * @param _from the address of the sender\n        * @param _value the amount of money to burn\n        */\n        function burnFrom(address _from, uint32 _value) public returns (bool success) {\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n            totalSupply -= _value;                              // Update totalSupply\n            Burn(_from,  _value);\n            return true;\n        }\n    }", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 23, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6427, "code": "function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            uint8 decimalUnits,\n            string tokenSymbol,\n            address centralMinter\n        ) {\n        if(centralMinter != 0 ) owner = centralMinter;\n        }\n        \n        // Public variables of the token\n        string public name;\n        string public symbol;\n        uint8 public decimals = 0;\n        // 18 decimals is the strongly suggested default, avoid changing it\n        uint32 public totalSupply;\n\n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n\n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint32 value);\n\n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint32 value);\n\n\n\n            /**\n           * Constructor function\n            *\n            * Initializes contract with initial supply tokens to the creator of the contract\n            */\n        function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        */\n    \n        mapping (address => bool) public frozenAccount;\n        event FrozenFunds(address target, bool frozen);\n\n        function freezeAccount(address target, bool freeze) onlyOwner {\n            frozenAccount[target] = freeze;\n            FrozenFunds(target, freeze);\n        }\n    \n        function _transfer(address _from, address _to, uint32 _value) internal {\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != 0x0);\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to] + _value > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from] + balanceOf[_to];\n            // Subtract from the sender\n            balanceOf[_from] -= _value;\n            // Add the same to the recipient\n            balanceOf[_to] += _value;\n            Transfer(_from, _to , _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        }\n\n        /**\n        * Transfer tokens\n        *\n        * Send `_value` tokens to `_to` from your account\n        *\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transfer(address _to, uint32 _value) public {\n            require(!frozenAccount[msg.sender]);\n            _transfer(msg.sender, _to, _value);\n        }\n\n        /**\n        * Transfer tokens from other address\n        *\n        * Send `_value` tokens to `_to` on behalf of `_from`\n        *\n        * @param _from The address of the sender\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transferFrom(address _from, address _to, uint32 _value) public returns (bool success) {\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] -= _value;\n            _transfer(_from, _to, _value);\n            return true;\n        }\n\n        /**\n        * Set allowance for other address\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        */\n        function approve(address _spender, uint32 _value) public\n            returns (bool success) {\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n\n        /**\n        * Set allowance for other address and notify\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        * @param _extraData some extra information to send to the approved contract\n        */\n        function approveAndCall(address _spender, uint32 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n            }\n        }\n\n         /**\n        * Destroy tokens\n        *\n        * Remove `_value` tokens from the system irreversibly\n        *\n        * @param _value the amount of money to burn\n        */\n        function burn(uint32 _value) public returns (bool success) {\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] -= _value;            // Subtract from the sender\n            totalSupply -= _value;                      // Updates totalSupply\n            Burn(msg.sender,  _value);\n            return true;\n        }\n\n        /**\n        * Destroy tokens from other account\n        *\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n        *\n        * @param _from the address of the sender\n        * @param _value the amount of money to burn\n        */\n        function burnFrom(address _from, uint32 _value) public returns (bool success) {\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n            totalSupply -= _value;                              // Update totalSupply\n            Burn(_from,  _value);\n            return true;\n        }\n    }", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0xbbcb4e3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint32,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x46043c9093ff4d0a796bd1aee7e80254420368dd.sol", "function": "TokenERC20(uint32,string,string)", "lineno": 23, "title": "Integer Overflow ", "type": "Warning"}], "success": true}