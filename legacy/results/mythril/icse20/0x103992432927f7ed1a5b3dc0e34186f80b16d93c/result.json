{
  "contract": "0x103992432927f7ed1a5b3dc0e34186f80b16d93c",
  "tool": "mythril",
  "start": 1563508336.8502254,
  "end": 1563508355.7429488,
  "duration": 18.892723321914673,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1913,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimOwnersEarnings(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "claimOwnersEarnings()",
        "lineno": 175,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1950,
        "code": "ublic tiles;\n    bool pub",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tiles_4: 0x10\ncalldata_Tiles_0: 0x8a3d7cdc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tiles: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "_function_0x8a3d7cdc",
        "lineno": 15,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1967,
        "code": "ublic tiles;\n    bool pub",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tiles_32 + 4: 0x10\ncalldata_Tiles_4: 0xf\ncalldata_Tiles_0: 0x8a3d7cdc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tiles: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "_function_0x8a3d7cdc",
        "lineno": 15,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2650,
        "code": "\n        requ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tiles_4: 0x10\nstorage_517: 0x0\ncalldata_Tiles_0: 0xb8a32c7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tiles: 0x4\nstorage_2: 0x0\ncalldata_Tiles_32 + 36: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "claimTile(uint256,uint256,uint256)",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2667,
        "code": "\n        require(msg.",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tiles_32 + 4: 0x10\ncalldata_Tiles_4: 0xf\nstorage_517: 0x0\ncalldata_Tiles_0: 0xb8a32c7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tiles: 0x4\nstorage_2: 0x0\ncalldata_Tiles_32 + 36: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "claimTile(uint256,uint256,uint256)",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2714,
        "code": "ender);\n        TileClaimed(cur",
        "debug": "storage_3: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\nstorage_0 + 5 + 2*calldata_Tiles_32 + 4 + 32*calldata_Tiles_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Tiles_32 + 4: 0xf\ncalldata_Tiles_4: 0xf\nstorage_517: 0x0\ncalldata_Tiles_0: 0xb8a32c7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tiles: 0x4\nstorage_520: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_Tiles_32 + 36: 0x0\n",
        "description": "A possible integer overflow exists in the function `claimTile(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "claimTile(uint256,uint256,uint256)",
        "lineno": 96,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3621,
        "code": "       }\n            }\n        }\n    }\n\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3621\n",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "cancelContract()",
        "lineno": 131,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3621,
        "code": "       }\n            }\n        }\n    }\n\n",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function cancelContract(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/8/0x103992432927f7ed1a5b3dc0e34186f80b16d93c.sol",
        "function": "cancelContract()",
        "lineno": 131,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}