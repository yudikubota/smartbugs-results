{"error": null, "issues": [{"address": 180, "code": "lic{\n        ERC20 token=ERC20(_token);\n        for(uint256 i=0;i<_to.length;++i){\n            token.transfer(_to[i],_amount[i]);\n        }\n    }\n}", "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x9c7a39e600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `doCustomAirdrop2(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop2(address,address[],uint256[])", "lineno": 78, "title": "Integer Overflow ", "type": "Warning"}, {"address": 381, "code": "t) public{\n        ERC20 token=ERC20(_token);\n        for(uint256 i=0;i<_to.length;++i){\n            token.transfer(_to[i],_amount);\n        }\n    }\n    \n    function doCustomAirdrop(address _token,address[] _to,uint", "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xb61fa7c000000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `doAirdrop2(address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop2(address,address[],uint256)", "lineno": 64, "title": "Integer Overflow ", "type": "Warning"}, {"address": 525, "code": "t) public{\n        ERC20 token=ERC20(_token);\n        for(uint256 i=0;i<_to.length;++i){\n            token.transferFrom(msg.sender,_to[i],_amount[i]);\n        }\n    }\n    \n    function doCustomAirdrop2(address _token,address[] _to,uint256[] ", "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xbe17a8b100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `doCustomAirdrop(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop(address,address[],uint256[])", "lineno": 71, "title": "Integer Overflow ", "type": "Warning"}, {"address": 859, "code": "_amount) public{\n        ERC20 token=ERC20(_token);\n        for(uint256 i=0;i<_to.length;++i){\n            token.transferFrom(msg.sender,_to[i],_amount);\n        }\n    }\n    \n    function doAirdrop2(address _token,address[] _to,ui", "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xc668dfd700000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `doAirdrop(address,address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop(address,address[],uint256)", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1022, "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4 + calldata_ERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x9c7a39e600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop2(address,address[],uint256[])", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 1169, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop2(address,address[],uint256[])", "lineno": 84, "title": "Message call to external contract", "type": "Warning"}, {"address": 1169, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1169\nCall at address: 1169\n", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop2(address,address[],uint256[])", "lineno": 84, "title": "Multiple Calls", "type": "Information"}, {"address": 1453, "code": "doCustomAirdrop(address _token", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop2(address,address[],uint256)", "lineno": 71, "title": "Message call to external contract", "type": "Warning"}, {"address": 1453, "code": "doCustomAirdrop(address _token", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1453\nCall at address: 1453\n", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop2(address,address[],uint256)", "lineno": 71, "title": "Multiple Calls", "type": "Information"}, {"address": 1614, "code": "token,addr", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4 + calldata_ERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0xbe17a8b100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop(address,address[],uint256[])", "lineno": 78, "title": "Exception state", "type": "Informational"}, {"address": 1812, "code": "  function doCustomAirdrop2(address _token,addre", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop(address,address[],uint256[])", "lineno": 78, "title": "Message call to external contract", "type": "Warning"}, {"address": 1812, "code": "  function doCustomAirdrop2(address _token,addre", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1812\n", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doCustomAirdrop(address,address[],uint256[])", "lineno": 78, "title": "Multiple Calls", "type": "Information"}, {"address": 2150, "code": "doAirdrop(address _token,ad", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "transfer(address,address,uint256)", "lineno": 57, "title": "Message call to external contract", "type": "Warning"}, {"address": 2477, "code": "  }\n    \n    function doAirdrop2(address _tok", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop(address,address[],uint256)", "lineno": 62, "title": "Message call to external contract", "type": "Warning"}, {"address": 2477, "code": "  }\n    \n    function doAirdrop2(address _tok", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2477\n", "filename": "/unique_chucks/12/0xc7d020d8c92d099b3ade17321310b4815ef20a90.sol", "function": "doAirdrop(address,address[],uint256)", "lineno": 62, "title": "Multiple Calls", "type": "Information"}], "success": true}