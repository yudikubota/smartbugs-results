{
  "contract": "0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04",
  "tool": "mythril",
  "start": 1563484473.5848174,
  "end": 1563484749.0311613,
  "duration": 275.4463438987732,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 803,
        "code": "int256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return na",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 62,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 815,
        "code": "int256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return na",
        "debug": "calldata_Token_4 + calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 62,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 824,
        "code": "int256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return na",
        "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 62,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 830,
        "code": "int256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return na",
        "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 62,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1774,
        "code": "kenSupply * 100000000",
        "debug": "storage_5: 0x0\ncalldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 68,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3332,
        "code": "ss => uint) balances;\n  \n  string public symbol = \"\";\n  string public name = \"\";\n  uint8 public decimals = 18;\n  uint256 public totalSupply = 0;\n  address owner = 0;\n  bool setupDone = false;\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n  \n  function Token(address adr) {\n\t\towner = adr;        \n    }\n\t\n\tfunction SetupToken(string _tokenName, string _tokenSymbol, uint256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return name;\n  }\n\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n  \n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  function transfer(address _to, uint _value) returns (bool success) {\n      \n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n\t  \n\t  if (balanceOf(_addr) >=0 )\n\t  \n      assembly {\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}",
        "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_5: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3346,
        "code": "ss => uint) balances;\n  \n  string public symbol = \"\";\n  string public name = \"\";\n  uint8 public decimals = 18;\n  uint256 public totalSupply = 0;\n  address owner = 0;\n  bool setupDone = false;\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n  \n  function Token(address adr) {\n\t\towner = adr;        \n    }\n\t\n\tfunction SetupToken(string _tokenName, string _tokenSymbol, uint256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return name;\n  }\n\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n  \n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  function transfer(address _to, uint _value) returns (bool success) {\n      \n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n\t  \n\t  if (balanceOf(_addr) >=0 )\n\t  \n      assembly {\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}",
        "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0xa7d18fd5703fddff6f5377fa44900dfb4a10ffffe39800000000000000000060\nstorage_5: 0x0\ncalldata_Token_4 + calldata_Token_4: 0x7fffffffffffffffffffffffffffffffffffffff3fffffffffffffffffffff41\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3363,
        "code": "ss => uint) balances;\n  \n  string public symbol = \"\";\n  string public name = \"\";\n  uint8 public decimals = 18;\n  uint256 public totalSupply = 0;\n  address owner = 0;\n  bool setupDone = false;\n  \n  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n  \n  function Token(address adr) {\n\t\towner = adr;        \n    }\n\t\n\tfunction SetupToken(string _tokenName, string _tokenSymbol, uint256 _tokenSupply)\n\t{\n\t\tif (msg.sender == owner && setupDone == false)\n\t\t{\n\t\t\tsymbol = _tokenSymbol;\n\t\t\tname = _tokenName;\n\t\t\ttotalSupply = _tokenSupply * 1000000000000000000;\n\t\t\tbalances[owner] = totalSupply;\n\t\t\tsetupDone = true;\n\t\t}\n\t}\n  \n  function name() constant returns (string _name) {\n      return name;\n  }\n\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n  \n  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n      \n    if(isContract(_to)) {\n        return transferToContract(_to, _value, _data);\n    }\n    else {\n        return transferToAddress(_to, _value, _data);\n    }\n}\n  \n  function transfer(address _to, uint _value) returns (bool success) {\n      \n    bytes memory empty;\n    if(isContract(_to)) {\n        return transferToContract(_to, _value, empty);\n    }\n    else {\n        return transferToAddress(_to, _value, empty);\n    }\n}\n\n  function isContract(address _addr) private returns (bool is_contract) {\n      uint length;\n\t  \n\t  if (balanceOf(_addr) >=0 )\n\t  \n      assembly {\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n    if (balanceOf(msg.sender) < _value) throw;\n    balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n    balances[_to] = safeAdd(balanceOf(_to), _value);\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n}\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}",
        "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0x28\nstorage_5: 0x0\ncalldata_Token_4 + calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/4/0x9403ca0f802c3cc1a45372e44cdd7ed0e5cd1a04.sol",
        "function": "SetupToken(string,string,uint256)",
        "lineno": 47,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}