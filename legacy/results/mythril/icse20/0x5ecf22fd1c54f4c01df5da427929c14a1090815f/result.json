{
  "contract": "0x5ecf22fd1c54f4c01df5da427929c14a1090815f",
  "tool": "mythril",
  "start": 1563775061.763813,
  "end": 1563775394.4840362,
  "duration": 332.72022318840027,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 148,
        "code": " to check\n  function verify(string sha256) constant returns (string) {\n    var timestamp =  proofs[sha256];\n    if ( timestamp == 0 ){\n        return \"No data found\";\n    }else{\n        DateTime dt = DateTime(msg.sender);\n        \n        uint16 year = dt.getYear(ti",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0x7183616c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `notarize(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "notarize(string)",
        "lineno": 302,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 666,
        "code": "estamp);\n        uint16 day = dt.getDay(timestamp);\n        uint16 hour = dt.getHour(timestamp);\n        uint16 minute = dt.getMinute(timestamp);\n        uint16 second = dt.getSecond(timestamp);\n        \n        string  memory result = strConcat(bytes32ToString(year) , \"-\" , bytes32ToString(month),\"-\",bytes32ToString(day));\n        result = strConcat(result,\" \");\n        result = strConcat( bytes32ToString(hour) , \":\" , bytes32ToString(minute),\":\",bytes32ToString(second));\n        result = strConcat(result,\" UTC\");\n        \n\n\n        //UTC Format: 2013-10-26 14:37:48 UTC\n\n        return result;\n    }\n  }\n  \n}",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0xbb9c6c3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `verify(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 311,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1196,
        "code": "j < charCount; j++) {\n",
        "debug": "calldata_ProofOfExistence_4: 0x100000000000000000000000000000000000000000000000000000000000000\ncalldata_ProofOfExistence_0: 0x9201de5500000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `bytes32ToString(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "bytes32ToString(bytes32)",
        "lineno": 247,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2126,
        "code": "tes32ToString(year) ,",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 317,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2126,
        "code": "tes32ToString(year) ,",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2298\n",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 317,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2298,
        "code": "th),\"-\",bytes32ToStrin",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 317,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2298,
        "code": "th),\"-\",bytes32ToStrin",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2473\n",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 317,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2473,
        "code": "= strConcat(result,\"",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2473,
        "code": "= strConcat(result,\"",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2648\n",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2648,
        "code": "Concat( bytes32ToStri",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/45/0x5ecf22fd1c54f4c01df5da427929c14a1090815f.sol",
        "function": "verify(string)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}