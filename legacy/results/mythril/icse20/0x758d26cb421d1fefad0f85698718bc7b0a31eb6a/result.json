{
  "contract": "0x758d26cb421d1fefad0f85698718bc7b0a31eb6a",
  "tool": "mythril",
  "start": 1563541066.6626306,
  "end": 1563541250.2542849,
  "duration": 183.5916543006897,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1179,
        "code": " indexed _from, address indexed _to, uint256 _value);\n    event Approval(addr",
        "debug": "calldata_AvatarNetworkToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AvatarNetworkToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "setName(string)",
        "lineno": 108,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1615,
        "code": "\n        _;\n    }\n\n    modi",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_AvatarNetworkToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "stop()",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1671,
        "code": " }\n\n    modifier ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_AvatarNetworkToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "approve(address,uint256)",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1706,
        "code": "    }\n\n    constructor() ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0x0\ncalldata_AvatarNetworkToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "approve(address,uint256)",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2129,
        "code": " }\n\n    modifier ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_AvatarNetworkToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2164,
        "code": "    }\n\n    constructor() ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0x0\ncalldata_AvatarNetworkToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3135,
        "code": " }\n\n    modifier ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_AvatarNetworkToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "transfer(address,uint256)",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3170,
        "code": "    }\n\n    constructor() ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0x0\ncalldata_AvatarNetworkToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "transfer(address,uint256)",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3805,
        "code": "\n        _;\n    }\n\n    modi",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_AvatarNetworkToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "start()",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3923,
        "code": "\n        _;\n    }\n\n    modi",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_AvatarNetworkToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "setName(string)",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4153,
        "code": "ntract AvatarNetworkToken {\n\n    // Token name\n    string public name = \"Avatar_Network_Token\";\n    \n    // Token symbol\n    string public constant symbol = \"ATT\";\n    \n    // Token decimals\n    uint256 public constant decimals = 6;\n    \n    // INIT SUPPLY\n    uint256 public constant INITIAL_SUPPLY = 6000000000 * (10 ** uint256(decimals));\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // Totle supply of Avatar Network Token\n    uint256 public totalSupply = 0;\n    \n    // Is Running\n    bool public stopped = false;\n\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY;\n        balanceOf[msg.sender] = INITIAL_SUPPLY;\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_AvatarNetworkToken_4 + calldata_AvatarNetworkToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_4: 0x0\ncalldata_AvatarNetworkToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4167,
        "code": "ntract AvatarNetworkToken {\n\n    // Token name\n    string public name = \"Avatar_Network_Token\";\n    \n    // Token symbol\n    string public constant symbol = \"ATT\";\n    \n    // Token decimals\n    uint256 public constant decimals = 6;\n    \n    // INIT SUPPLY\n    uint256 public constant INITIAL_SUPPLY = 6000000000 * (10 ** uint256(decimals));\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // Totle supply of Avatar Network Token\n    uint256 public totalSupply = 0;\n    \n    // Is Running\n    bool public stopped = false;\n\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY;\n        balanceOf[msg.sender] = INITIAL_SUPPLY;\n        Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        // ATT token can't be burned\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n        return allowance[_owner][_spender];\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_AvatarNetworkToken_4 + calldata_AvatarNetworkToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_4: 0x0\ncalldata_AvatarNetworkToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_AvatarNetworkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x758d26cb421d1fefad0f85698718bc7b0a31eb6a.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}