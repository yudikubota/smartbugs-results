{"error": null, "issues": [{"address": 337, "code": "    */\n    modifier onlyGlobalAdmin () {\n        require(msg.sender==GlobalAdmin);\n        _;\n    }\n\n    /*", "debug": "calldata_Certifier_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Certifier_0: 0x25a3ba4900000000000000000000000000000000000000000000000000000000\ncalldatasize_Certifier: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCertKey(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "getCertKey(string)", "lineno": 216, "title": "Integer Overflow ", "type": "Warning"}, {"address": 470, "code": " string _CertID,\n                            string _issued,\n                            string _expires,\n                            string _Scope,\n                            string _issuingBody) public onlyCertAdmin {\n        bytes32 certKey = getCertKey(_CertID);\n\n        CertificateAddresses[certKey] = new Certification(_CompanyName,\n                                                               _Norm,\n                                                               _CertID,\n                                                               _issued,\n                                                               _expires,\n                                                               _Scope,\n                                                               _issuingBody);\n        CertificationSet(_CertID, CertificateAddresses[certKey], now);\n    }\n\n    /**\n      * Delete an exisiting certificate.\n      *\n      * This can be done by an certificate administrator only.\n      *\n ", "debug": "calldata_Certifier_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Certifier_0: 0x3216255b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Certifier: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setCertificate(string,string,string,string,string,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "setCertificate(string,string,string,string,string,string,string)", "lineno": 117, "title": "Integer Overflow ", "type": "Warning"}, {"address": 995, "code": "rtificate identifier to be used in the\n      * global mapping CertificateAddresses.\n      *\n      * This is necessary due to certificate identifi", "debug": "calldata_Certifier_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Certifier_0: 0x520e12d700000000000000000000000000000000000000000000000000000000\ncalldatasize_Certifier: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCertAddressByID(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "getCertAddressByID(string)", "lineno": 198, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1342, "code": "cateAddresses[certKey]).deleteCertificate();\n        CertificationDeleted(_CertID, CertificateAddresses[certKey], now);\n        delete CertificateAddresses[certKey];\n    }\n\n    /**\n      * Register a certificate administrator.\n      *\n      * This can be done by the global administrator only.\n      *\n      * @param ", "debug": "calldata_Certifier_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Certifier_0: 0xb96dc96d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Certifier: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `delCertificate(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "delCertificate(string)", "lineno": 144, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3988, "code": "      delete CertificateAddresses[certKey];\n    }\n\n    /**\n     ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "delCertificate(string)", "lineno": 146, "title": "Message call to external contract", "type": "Warning"}, {"address": 4344, "code": " administrator only.\n      *\n      *", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0xc27b9094e8fa5b313b934f6be5969b5d6c8eb9ba.sol", "function": "delCertificate(string)", "lineno": 152, "title": "State change after external call", "type": "Warning"}], "success": true}