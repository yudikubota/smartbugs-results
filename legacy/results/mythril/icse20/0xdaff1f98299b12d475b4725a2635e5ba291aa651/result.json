{
  "contract": "0xdaff1f98299b12d475b4725a2635e5ba291aa651",
  "tool": "mythril",
  "start": 1563606594.2888231,
  "end": 1563606600.2985914,
  "duration": 6.00976824760437,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:762:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n                                            ^---^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:852:71: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n                                                                      ^---^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:855:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (proofVerified == false) throw;\r\n                                    ^---^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:863:14: Warning: Use of the \"var\" keyword is deprecated.\n        for (var i=0; i<prefix.length; i++){\r\n             ^---^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:926:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw; // Should be a better way?\r\n            ^---^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1024:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.16;\r\n^---------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1032:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function owned() { owner = msg.sender; }\r\n    ^--------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1085:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function Cillionaire() {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:776:50: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:776:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:808:21: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (address(sha3(pubkey)) == signer) return true;\r\n                    ^----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:811:29: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n            return (address(sha3(pubkey)) == signer);\r\n                            ^----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:826:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        tosign2[0] = 1; //role\r\n                     ^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:863:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.\n        for (var i=0; i<prefix.length; i++){\r\n             ^-----^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:878:20: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                   ^-----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:878:42: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                         ^---------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:878:37: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:878:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:878:37: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:900:48: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:900:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1041:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        ContractOwnershipTransferred(newOwner);\r\n        ^------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1107:6: Warning: Invoking events without \"emit\" prefix is deprecated.\n    \tNewRoundStarted(beneficiary, startTimestamp, endTimestamp, maxDonors, duration, donation, fee);\r\n    \t^--------------------------------------------------------------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1115:6: Warning: Invoking events without \"emit\" prefix is deprecated.\n    \tNewDonor(msg.sender, amountAfterFee, fee);\r\n    \t^---------------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1118:10: Warning: Invoking events without \"emit\" prefix is deprecated.\n    \t    RoundEnded(beneficiary, donationSum);\r\n    \t    ^----------------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1125:34: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        uint randomNumber = uint(sha3(_result)); // https://gitter.im/oraclize/ethereum-api?at=595b98d7329651f46e5105b7\r\n                                 ^-----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1125:34: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint randomNumber = uint(sha3(_result)); // https://gitter.im/oraclize/ethereum-api?at=595b98d7329651f46e5105b7\r\n                                 ^-----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1125:34: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.\n        uint randomNumber = uint(sha3(_result)); // https://gitter.im/oraclize/ethereum-api?at=595b98d7329651f46e5105b7\r\n                                 ^-----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1126:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        RandomNumber(randomNumber);\r\n        ^------------------------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1143:17: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        require(this.balance > retainBalance);\r\n                ^----------^\n/unique_chucks/22/0xdaff1f98299b12d475b4725a2635e5ba291aa651.sol:1144:23: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        uint amount = this.balance - retainBalance; // leave enough ether for Oraclize\r\n                      ^----------^\n",
    "issues": []
  }
}