{
  "contract": "0xd546551924a883b604d4127b0af309c95ba9ba6d",
  "tool": "mythril",
  "start": 1563490763.013355,
  "end": 1563490822.6510584,
  "duration": 59.63770341873169,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 9204,
        "code": "address(0x0))  //ditto\n        && (restrictedTo",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "upgrade(address)",
        "lineno": 1179,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 9204,
        "code": "address(0x0))  //ditto\n        && (restrictedTo",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 9523\n",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "upgrade(address)",
        "lineno": 1179,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 9523,
        "code": "1]])\n        && ! Compliance(complianceAddress).validateTrade(_addressData",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "upgrade(address)",
        "lineno": 1180,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9787,
        "code": "     )\n         //if they trade more than they have, get 0.\n      |",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "upgrade(address)",
        "lineno": 1182,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10142,
        "code": "l status\n  );\n\n  function Helper() p",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_UberDelta_0: 0xc3257d000000000000000000000000000000000000000000000000000000000\ncalldatasize_UberDelta: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "changeUserClass(address,uint256)",
        "lineno": 114,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11874,
        "code": "er calling the function\n    uint256 _value, // th",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "depositTokenToUser(address,address,uint256)",
        "lineno": 611,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 13251,
        "code": "licit require included.\n    _maker.transfer(_withdra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "_function_0x1d5eeb50",
        "lineno": 1081,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 13783,
        "code": "  bytes32 hash = keccak256(\n      this, \n      _withdrawAm",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "_function_0x1d5eeb50",
        "lineno": 1098,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 14904,
        "code": "nager() public{\n    owner = m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UberDelta_0: 0x1fd2e00600000000000000000000000000000000000000000000000000000000\ncalldatasize_UberDelta: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "changeClassFee(uint256,uint256)",
        "lineno": 68,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 15257,
        "code": "ketAddress,\n    uint256 ticketsCollapsed,\n    bytes32",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "testCanTrade(address,address)",
        "lineno": 1455,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 16061,
        "code": "\n    return(Compliance(complianceAddress).canTrade(_token,",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "testRemoteWithdraw(uint256,uint256,uint256,uint256,address,address,uint8,bytes32,bytes32,address)",
        "lineno": 1382,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 17278,
        "code": "ns (uint256)\n  {\n    if (_token == address(0x0)){\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "depositToken(address,uint256)",
        "lineno": 532,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 50965,
        "code": "c;\n  ",
        "debug": "calldata_UberDelta_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_UberDelta_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_8: 0x0\ncalldata_UberDelta_0: 0x2d95779000000000000000000000000000000000000000000000000000000000\ncalldatasize_UberDelta: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `testRemoteWithdraw(uint256,uint256,uint256,uint256,address,address,uint8,bytes32,bytes32,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0xd546551924a883b604d4127b0af309c95ba9ba6d.sol",
        "function": "testRemoteWithdraw(uint256,uint256,uint256,uint256,address,address,uint8,bytes32,bytes32,address)",
        "lineno": 42,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}