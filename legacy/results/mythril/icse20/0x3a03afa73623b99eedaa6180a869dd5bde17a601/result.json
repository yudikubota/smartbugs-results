{
  "contract": "0x3a03afa73623b99eedaa6180a869dd5bde17a601",
  "tool": "mythril",
  "start": 1563649207.4626207,
  "end": 1563649442.5981185,
  "duration": 235.13549780845642,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1500,
        "code": "\n        _;\n    }\n\n    fu",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_CheapLambos_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "approve(address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2043,
        "code": "h) internal {\n        bal",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function mintMore(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "mintMore(address)",
        "lineno": 88,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2105,
        "code": "\n        _;\n    }\n\n    fu",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_CheapLambos_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3079,
        "code": "value);\n    }\n    \n    f",
        "debug": "storage_24465873643947496235832446106509767096567058095563226156125564318740882468607: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_CheapLambos_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_CheapLambos_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "burn(uint256)",
        "lineno": 68,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3624,
        "code": "\n        _;\n    }\n\n    fu",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_CheapLambos_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "transfer(address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4156,
        "code": "s);\n        emit Transfer(",
        "debug": "10_EXP_storage_2: 0x39857dda4b361b149f11f0dc3772600dde4aaacacca8510e4844280aba67dce7\ncallvalue: 0x1\ncalldata_CheapLambos_4: 0x0\ncalldata_CheapLambos_0: 0x1cb0790200000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\n",
        "description": "A possible integer overflow exists in the function `mintMore(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "mintMore(address)",
        "lineno": 90,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4221,
        "code": " * (10 ** decimals);\n        emit Transfer(",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb902104b00325c67ebe71c29ac7e593006fa88eb8bf5c45810dfe1a69e202bc0\n10_EXP_storage_2: 0x755b23040086398da2014b02041f2d80410c8361377a2296221b07915c1456\ncallvalue: 0x1\ncalldata_CheapLambos_4: 0x0\ncalldata_CheapLambos_0: 0x1cb0790200000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\n",
        "description": "A possible integer overflow exists in the function `mintMore(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "mintMore(address)",
        "lineno": 90,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4296,
        "code": "    }\n    \n\n    event Tran",
        "debug": "10_EXP_storage_2: 0x39857dda4b361b149f11f0dc3772600dde4aaacacca8510e4844280aba67dce7\ncallvalue: 0x1\ncalldata_CheapLambos_4: 0x0\ncalldata_CheapLambos_0: 0x1cb0790200000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\n",
        "description": "A possible integer overflow exists in the function `mintMore(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "mintMore(address)",
        "lineno": 92,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4300,
        "code": "* decimals));\n    }\n    \n\n    event Tran",
        "debug": "10_EXP_storage_2: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncaller: 0x0\ncalldata_CheapLambos_0: 0x9e159db000000000000000000000000000000000000000000000000000000000\ncalldatasize_CheapLambos: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `Lambo()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x3a03afa73623b99eedaa6180a869dd5bde17a601.sol",
        "function": "Lambo()",
        "lineno": 91,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}