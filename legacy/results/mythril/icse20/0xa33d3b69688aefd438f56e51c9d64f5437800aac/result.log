{"error": null, "issues": [{"address": 4630, "code": "cts = new uint128[](c);\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ngasprice: 0x0\nstorage_1: 0xffffffffffffffffff\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_5: 0x1\ntimestamp: 0x800000000000000000000000000004ae\nstorage_4: 0x7ffffffffffffffffffffffffffffffe00\ncalldatasize_Nowhales: 0x3\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 308, "title": "Exception state", "type": "Informational"}, {"address": 4728, "code": "cts = new uint128[](c);\n\n        if(c > 0) {\n     ", "debug": "", "description": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 308, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 4728, "code": "cts = new uint128[](c);\n\n        if(c > 0) {\n     ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 308, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4728, "code": "cts = new uint128[](c);\n\n        if(c > 0) {\n     ", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 308, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 4751, "code": "Index; i<", "debug": "storage_2: 0x80000000010200004005d21202200001\ngasprice: 0x0\nstorage_1: 0x20000000000007d9fffde0000000000018100000000\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_5: 0x1\ntimestamp: 0x9e0000000101fff83fffcd12022003b0\nstorage_4: 0x9e0000000101fff83fffcd12021fff0000\ncalldatasize_Nowhales: 0x3\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 312, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4780, "debug": "callvalue: 0x40000000000000\ngasprice: 0x0\ntimestamp: 0xfd1f\ngas: 0x35b60\ncalldatasize_Nowhales: 0x3\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "fallback", "lineno": 358, "title": "Integer Underflow", "type": "Warning"}, {"address": 5736, "code": "rentStageB", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Nowhales_4: 0x0\nstorage_1: 0x0\ncalldata_Nowhales_0: 0x9f9fb96800000000000000000000000000000000000000000000000000000000\ncalldatasize_Nowhales: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "getDeposit(uint256)", "lineno": 333, "title": "Exception state", "type": "Informational"}, {"address": 6080, "code": "/11/2018", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\nstorage_1: 0x0\nstorage_3: 0x1\ncalldata_Nowhales_0: 0xc67f7df500000000000000000000000000000000000000000000000000000000\ncalldatasize_Nowhales: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xa33d3b69688aefd438f56e51c9d64f5437800aac.sol", "function": "getDepositsCount(address)", "lineno": 342, "title": "Exception state", "type": "Informational"}], "success": true}