{
  "contract": "0x2fca5f257895b8bcede0c0d06141b718ec9a3041",
  "tool": "mythril",
  "start": 1563523122.9821894,
  "end": 1563523666.5822737,
  "duration": 543.6000843048096,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1749,
        "code": "t256[] _nonce, address[] _makeAddress, uint256[] _amount, uint8[] _v, bytes32[] _r, bytes32[] _s) public {\n        for (uint256 i = 0; i < _buyTokenAddress.length; i++) {\n            trade(_buyTokenAddress[i], _buyAmount[i], _sellTokenAddress[i], _sellAmount[i], _takeAddress[i], _baseTokenAddress[i], _expireBlock[i], _nonce[i], _makeAddress[i], _amount[i], _v[i], _r[i], _s[i]);\n        }\n    }\n\n    function trade(address _buyTokenAddress, uint256 _buyAmount, address _sellTokenAddress, uint256 _sellAmount, address _takeAddress, address _baseTokenAddress, uint256 _expireBlock, uint256 _nonce, addr",
        "debug": "calldata_TrexDexMain_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 203,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2655,
        "code": "akeFee) public isOwner {\n        for (uint256 i = 0; i < _tokenAddress.length; i++) {\n            setTokenTrade(_tokenAddress[i], _baseTokenAddress[i], _tradeEnabled[i], _makeFee[i], _takeFee[i]);\n        }\n    }\n\n    function setTokenTrade(address _tokenAddress, address _baseTokenAddress, bool _tradeEnabled, uint256 _makeFee, uint256 _takeFee) p",
        "debug": "calldata_TrexDexMain_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenTrades(address[],address[],bool[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 133,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6030,
        "code": "56 size) {\n        assert(m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setOwner(address)",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6390,
        "code": "eeAddress) public {\n        owner =",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_TrexDexMain: 0x20\ncalldata_TrexDexMain_0: 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "withdraw(uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6878,
        "code": "eeAddress) public {\n        owner =",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_TrexDexMain: 0x4\ncalldata_TrexDexMain_0: 0x338b5dea00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "depositToken(address,uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7220,
        "code": "posit(_tokenAddress, msg.sender, _amount, fee, deposits[_tok",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "depositToken(address,uint256)",
        "lineno": 156,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7781,
        "code": "de(address _b",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7805,
        "code": "TokenAddress, uint25",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7829,
        "code": "_buyAmount, ad",
        "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7853,
        "code": "ess _sellTokenA",
        "debug": "The exception is triggered under the following conditions:\n\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_224 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7877,
        "code": "ress, uint256 _sellA",
        "debug": "The exception is triggered under the following conditions:\n\nmem_224 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_256 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 100: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7901,
        "code": "unt, address _t",
        "debug": "The exception is triggered under the following conditions:\n\nmem_256 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 100: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_224 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x58ffcae000000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_288 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 100 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 132: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "tradeMulti(address[],uint256[],address[],uint256[],address[],address[],uint256[],uint256[],address[],uint256[],uint8[],bytes32[],bytes32[])",
        "lineno": 209,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8179,
        "code": "56 size) {\n        assert(m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8234,
        "code": "address _baseTokenAd",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 139,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8258,
        "code": "ess, bool _trade",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 139,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8282,
        "code": "abled, uint",
        "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 139,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8306,
        "code": "6 _makeFee,",
        "debug": "The exception is triggered under the following conditions:\n\nmem_192 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_4 + calldata_TrexDexMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TrexDexMain_0: 0x63681c4800000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\nmem_224 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 4 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 36 +\n32 +\n32*calldata_TrexDexMain_4 + calldata_TrexDexMain_32 + 68: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrades(address[],address[],bool[],uint256[],uint256[])",
        "lineno": 139,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8430,
        "code": "56 size) {\n        assert(m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x672d17fc00000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTrade(address,address,bool,uint256,uint256)",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8938,
        "code": "eeAddress) public {\n        owner =",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_TrexDexMain: 0x100\ncalldata_TrexDexMain_0: 0x8636c1b900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "order(address,uint256,address,uint256,address,address,uint256,uint256)",
        "lineno": 90,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9646,
        "code": "56 size) {\n        assert(m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x8705fcd400000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setFeeAddress(address)",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9804,
        "code": "56 size) {\n        assert(m",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TrexDexMain_0: 0x87a42e1a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TrexDexMain: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x2fca5f257895b8bcede0c0d06141b718ec9a3041.sol",
        "function": "setTokenTransfers(address[],bool[],bool[],uint256[],uint256[])",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}