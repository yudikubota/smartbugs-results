{
  "contract": "0x3850f1a8104fbdbea60b16fb1323cd3974031990",
  "tool": "mythril",
  "start": 1563294308.2925646,
  "end": 1563298561.0751996,
  "duration": 4252.782634973526,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 162,
        "code": "ngth != 65) {\n      return (address(0));\n    }\n\n    // Divide the signature in r, s and v variables\n    // ecrecover takes the signature parameters, and the only way to get them\n    // currently is to use assembly.\n    // solium-disable-next-line security/no-inline-assembly\n    assembly {\n      r := mload(add(sig, 0x20))\n      s := mload(add(sig, 0x40))\n      v := byte(0, mload(add(sig, 0x60)))\n    }\n\n    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n    if (v < 27) {\n      v += 27;\n    }\n\n    // If the version is correct return the signer address\n    if (v != 27 && v != 28) {\n      return (address(0));\n    } else {\n      return ecrecover(hash, v, r, s);\n    }\n  }\n}",
        "debug": "calldata_ERC777Token_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC777Token_0: 0x19045a2500000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `recover(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "recover(bytes32,bytes)",
        "lineno": 173,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 599,
        "code": "t256 _value,\n    uint256 _fee,\n    uint256 _nonce,\n    bytes _userData,\n    bytes32 _sig_r,\n    bytes32 _sig_s,\n    uint8 _sig_v\n  )\n    external\n  {\n    require(\n      _delegate == address(0) || _delegate == msg.sender,\n      \"_delegate should be address(0) or msg.sender\"\n    );\n\n    // address _signer = recover(_hash, _signature);\n    address _signer = (_sig_v != 27 && _sig_v != 28) ?\n      address(0) :\n      ecrecover(\n        keccak256(abi.encodePacked(\n          address(this),\n          _to,\n          _delegate,\n          _value,\n          _fee,\n          _nonce,\n          _userData\n        )),\n        _sig_v, _sig_r, _sig_s\n      );\n\n    require(\n      _signer != address(0),\n      \"_signature is invalid.\"\n    );\n\n    require(\n      _nonce > usedNonce[_signer],\n      \"_nonce must be greater than the last used nonce of the token holder.\"\n    );\n\n    usedNonce[_signer] = _nonce;\n\n    tokenContract.operatorSend(_signer, _to, _value, _userData, \"\");\n    if (_fee > 0) {\n      tokenContract.operatorSend(_signer, msg.sender, _fee, _userData, \"\");\n    }\n  }\n\n  /**\n    * @notice Hash (keccak256) of the payload used by transferPreSigned\n    * @param _operator address The address of",
        "debug": "calldata_ERC777Token_32 + 132: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC777Token_0: 0x5efd168200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 79,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 825,
        "code": "   uint256 _nonce,\n    bytes _userData\n  )\n    public\n    pure\n    returns (bytes32)\n  {\n    return keccak256(abi.encodePacked(\n      _operator,\n      _to,\n      _delegate,\n      _value,\n      _fee,\n      _nonce,\n      _userData\n    ));\n  }\n\n  /**\n    * @notice Recover signer address from a message by using his signature\n    * @param hash bytes32 message, the hash is the signed message. What is r",
        "debug": "calldata_ERC777Token_32 + 164: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC777Token_0: 0x816413f800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferPreSignedHashing(address,address,address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSignedHashing(address,address,address,uint256,uint256,uint256,bytes)",
        "lineno": 144,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1757,
        "code": "          _fee,\n          _nonce,\n          _userData\n        )),\n        _sig_v, _sig_r, _sig_s\n      );\n\n    require(\n      _signer != address(0),\n      \"_signature i",
        "debug": "calldata_ERC777Token_4 + calldata_ERC777Token_32 + 132: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\ncalldata_ERC777Token_32 + 228: 0x1c\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_0: 0x5efd168200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 103,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1778,
        "code": "* This Source Code Fo",
        "debug": "calldata_ERC777Token_4 + calldata_ERC777Token_32 + 132: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff43\ncalldata_ERC777Token_32 + 228: 0x1c\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_0: 0x5efd168200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 3,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 1779,
        "code": ";\n\n/* This Source Code Form is s",
        "debug": "calldata_ERC777Token_4 + calldata_ERC777Token_32 + 132: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff63\ncalldata_ERC777Token_32 + 228: 0x1c\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC777Token_0: 0x5efd168200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC777Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 1,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2814,
        "code": "gner, msg.sender, _fee, _userData, \"\");\n    }\n  }\n\n  /**\n    * ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 124,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2814,
        "code": "gner, msg.sender, _fee, _userData, \"\");\n    }\n  }\n\n  /**\n    * ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3150\n",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 124,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3150,
        "code": "e payload used by transferPreSigned\n    * @param _operator address T",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x3850f1a8104fbdbea60b16fb1323cd3974031990.sol",
        "function": "transferPreSigned(address,address,uint256,uint256,uint256,bytes,bytes32,bytes32,uint8)",
        "lineno": 129,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}