{
  "contract": "0x0608d0d987ca8371af38fa0b6e028760110b987e",
  "tool": "mythril",
  "start": 1563587949.5971525,
  "end": 1563588791.4138017,
  "duration": 841.8166491985321,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 163,
        "code": ";\n\ninterface token",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_0: 0x0\ncalldatasize_token: 0x4\nstorage_9: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 438,
        "code": "(this, winner, amou",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1345\nCall at address: 1153\nCall at address: 802\nCall at address: 1345\nCall at address: 1153\nCall at address: 802\n",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 35,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 802,
        "code": ") > 0) {tokenReward.transfer(burncon",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 36,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 802,
        "code": ") > 0) {tokenReward.transfer(burncon",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1345\nCall at address: 1153\n",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 36,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1153,
        "code": "));}\n      playerPool.length = 0;   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 36,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1153,
        "code": "));}\n      playerPool.length = 0;   ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1345\n",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 36,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1345,
        "code": "tokenReward.balanceOf(address(this)));}\n      playerPool.length = 0;    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 36,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1503,
        "code": "ess(this).balance)()) { emit Payout(this, maincontract, quot",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 41,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3305,
        "code": "t DeflatLottoBurn {\n\n  string public name = \"DEFLAT LOTTO INVEST\";\n  string public symbol = \"DEFTLI\";\n  string public prob = \"Probability 1 of 10\";\n  string public comment = \"Send 0.002 ETH to burn DEFLAT and try to win 0.018 ETH (-gas), the prize is drawn when the accumulated balance reaches 0.02 ETH\";\n\n  //Send only 0.002 ether, other value will be rejected;\n  //Bids below 0.002 ether generate very low DEFLAT returns when calling the sales contract due to the gas cost, so this is the minimum feasible bid.\n  //Tokens moved from source on first bid and burn on last;\n\n  address[] internal playerPool;\n  address public maincontract = address(0xe36584509F808f865BE1960aA459Ab428fA7A25b); //DEFLAT SALE CONTRACT;\n  address public burncontract = address(0x731468ca17848717CdcBf2ddc0b8301f270b6D36);// BURN FROM LOTTO CONTRACT\n  token public tokenReward = token(0xe1E0DB951844E7fb727574D7dACa68d1C5D1525b);// DEFLAT COIN CONTRACT;\n  uint rounds = 10;\n  uint quota = 0.002 ether;\n  event Payout(address from, address to, uint quantity);\n  function () public payable {\n    require(msg.value == quota);\n    playerPool.push(msg.sender);\n    if (playerPool.length >= rounds) {\n      uint baserand = (block.number-1)+now+block.difficulty;\n      uint winidx = uint(baserand)/10;\n      winidx = baserand - (winidx*10);   \n      address winner = playerPool[winidx];\n      uint amount = address(this).balance;\n      if (winner.send(amount)) { emit Payout(this, winner, amount);}\n      if (tokenReward.balanceOf(address(this)) > 0) {tokenReward.transfer(burncontract, tokenReward.balanceOf(address(this)));}\n      playerPool.length = 0;                \n    } \n    else {\n       if (playerPool.length == 1) {\n           if (maincontract.call.gas(200000).value(address(this).balance)()) { emit Payout(this, maincontract, quota);}           \n       }\n    } \n  }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/23/0x0608d0d987ca8371af38fa0b6e028760110b987e.sol",
        "function": "fallback",
        "lineno": 8,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}