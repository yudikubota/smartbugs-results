{
  "contract": "0x062344dc7fbe2cb6a14eaf84b613af64684252bf",
  "tool": "mythril",
  "start": 1563262682.0790308,
  "end": 1563262930.2263112,
  "duration": 248.14728045463562,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 992,
        "code": " _name;\n    }\n    \n    function setOwner(address _owner) public isOwner {\n   ",
        "debug": "calldata_TronToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TronToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "setName(string)",
        "lineno": 64,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1309,
        "code": "sg.sender);\n        _;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TronToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "stop()",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1427,
        "code": "sg.sender);\n        _;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TronToken_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "setOwner(address)",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1711,
        "code": "}\n\n    event Transfer(ad",
        "debug": "calldata_TronToken_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_24465873643947496235832446106509767096567058095563226156125564318740882468607: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_TronToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "burn(uint256)",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2028,
        "code": "     _;\n    }\n\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0xff00\ncalldata_TronToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "transfer(address,uint256)",
        "lineno": 24,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2063,
        "code": "        _;\n    }\n\n    fun",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_5: 0x0\ncalldata_TronToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "transfer(address,uint256)",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2638,
        "code": "sg.sender);\n        _;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TronToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "start()",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2756,
        "code": "sg.sender);\n        _;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TronToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "setName(string)",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2851,
        "code": "ntract TronToken {\n\n    string   public name ;            //  token name\n    string   public symbol ;          //  token symbol\n    uint256  public decimals ;        //  token digit\n\n    mapping (address => uint256) public balanceOf;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;      //  stopflag: true is stoped,false is not stoped\n\n    uint256 constant valueFounder = 500000000000000000;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function TronToken(address _addressFounder,uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n        owner = msg.sender;\n        if (_addressFounder == 0x0)\n            _addressFounder = msg.sender;\n        if (_initialSupply == 0) \n            _initialSupply = valueFounder;\n        totalSupply = _initialSupply;   // Set the totalSupply \n        name = _tokenName;              // Set the name for display \n        symbol = _tokenSymbol;          // Set the symbol for display \n        decimals = _decimalUnits;       // Amount of decimals for display purposes\n        balanceOf[_addressFounder] = totalSupply;\n        Transfer(0x0, _addressFounder, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function stop() public isOwner {\n        stopped = true;\n    }\n\n    function start() public isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) public isOwner {\n        name = _name;\n    }\n    \n    function setOwner(address _owner) public isOwner {\n        owner = _owner;\n    }\n\n    function burn(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}",
        "debug": "calldata_TronToken_4 + calldata_TronToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_5: 0x0\ncalldata_TronToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2865,
        "code": "ntract TronToken {\n\n    string   public name ;            //  token name\n    string   public symbol ;          //  token symbol\n    uint256  public decimals ;        //  token digit\n\n    mapping (address => uint256) public balanceOf;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;      //  stopflag: true is stoped,false is not stoped\n\n    uint256 constant valueFounder = 500000000000000000;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function TronToken(address _addressFounder,uint256 _initialSupply, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) public {\n        owner = msg.sender;\n        if (_addressFounder == 0x0)\n            _addressFounder = msg.sender;\n        if (_initialSupply == 0) \n            _initialSupply = valueFounder;\n        totalSupply = _initialSupply;   // Set the totalSupply \n        name = _tokenName;              // Set the name for display \n        symbol = _tokenSymbol;          // Set the symbol for display \n        decimals = _decimalUnits;       // Amount of decimals for display purposes\n        balanceOf[_addressFounder] = totalSupply;\n        Transfer(0x0, _addressFounder, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value) public isRunning validAddress returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function stop() public isOwner {\n        stopped = true;\n    }\n\n    function start() public isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) public isOwner {\n        name = _name;\n    }\n    \n    function setOwner(address _owner) public isOwner {\n        owner = _owner;\n    }\n\n    function burn(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}",
        "debug": "calldata_TronToken_4 + calldata_TronToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_5: 0x0\ncalldata_TronToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_TronToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x062344dc7fbe2cb6a14eaf84b613af64684252bf.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}