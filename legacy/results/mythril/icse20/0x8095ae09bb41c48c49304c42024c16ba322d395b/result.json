{
  "contract": "0x8095ae09bb41c48c49304c42024c16ba322d395b",
  "tool": "mythril",
  "start": 1563494231.5724173,
  "end": 1563494274.1779568,
  "duration": 42.60553956031799,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 506,
        "code": "r[i]] = false;\n        }\n    }    \n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n ",
        "debug": "calldata_TraxionWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TraxionWallet_0: 0x8311139700000000000000000000000000000000000000000000000000000000\ncalldatasize_TraxionWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `blacklistAddr(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x8095ae09bb41c48c49304c42024c16ba322d395b.sol",
        "function": "blacklistAddr(address[])",
        "lineno": 146,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 868,
        "code": "dAddr[buyer[i]] = true;\n        }\n    }\n  \n    /** @dev black list an address **/\n    function blacklistAddr(address[] buyer) external onlyOwner {\n        for (uint i = 0; i < buy",
        "debug": "calldata_TraxionWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TraxionWallet_0: 0xb31d61b000000000000000000000000000000000000000000000000000000000\ncalldatasize_TraxionWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `whitelistAddress(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/6/0x8095ae09bb41c48c49304c42024c16ba322d395b.sol",
        "function": "whitelistAddress(address[])",
        "lineno": 139,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2561,
        "code": "feMath for uin",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x874005f2c3ad11ccd7a54639345833b558f90c90da94041a37091c90c6f0894f\ncallvalue: 0xa87ff4c359308b61f517663bc0d4b33e9ae56c9c5cd41e52376d580286f52d6f\nstorage_3: 0xa87ff4c359308b61f517663bc0d4b33e9ae56c9c5cd41e52376d580286f52d6e\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TraxionWallet_0: 0xf00000000000000000000000000000000000000000000000000000000\ncalldatasize_TraxionWallet: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/6/0x8095ae09bb41c48c49304c42024c16ba322d395b.sol",
        "function": "fallback",
        "lineno": 94,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}