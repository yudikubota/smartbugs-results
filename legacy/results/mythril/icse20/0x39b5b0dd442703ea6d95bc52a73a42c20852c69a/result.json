{
  "contract": "0x39b5b0dd442703ea6d95bc52a73a42c20852c69a",
  "tool": "mythril",
  "start": 1563525397.110557,
  "end": 1563526224.047312,
  "duration": 826.9367549419403,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 247,
        "code": "       }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n         ",
        "debug": "calldata_ponzimoon_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ponzimoon_0: 0x1400d1e400000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `checkName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "checkName(string)",
        "lineno": 128,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 628,
        "code": "56 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] =",
        "debug": "calldata_ponzimoon_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 134,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 634,
        "code": "56 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] =",
        "debug": "calldata_ponzimoon_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 134,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1171,
        "code": "           uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMone",
        "debug": "calldata_ponzimoon_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1177,
        "code": "           uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMone",
        "debug": "calldata_ponzimoon_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 150,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1774,
        "code": " SafeMath {\n\n    /**\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\ncalldata_ponzimoon_4: 0x0\nstorage_1: 0x0\nstorage_10: 0x1\ncalldata_ponzimoon_0: 0x1d3f864b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "campaignCaptain(uint256)",
        "lineno": 644,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2018,
        "code": ";\n\ncontract owned ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ponzimoon_4: 0x0\ntimestamp: 0x0\nstorage_1: 0x1\nstorage_10: 0x1\ncalldata_ponzimoon_0: 0x1d3f864b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_6 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n8*calldata_ponzimoon_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `campaignCaptain(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "campaignCaptain(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4393,
        "code": "s = _luckyPayer.earnings.add(_pMoney);\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ponzimoon_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "withdraw()",
        "lineno": 515,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4498,
        "code": "t256 _nextMoonPrizePool = moonPrizePool",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "withdraw()",
        "lineno": 516,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4931,
        "code": ";\n\ncontract owned ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5483,
        "code": "xternal payable {\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 147,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7204,
        "code": "rivate {\n        Pla",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x2\nstorage_2: 0x1\ncalldata_ponzimoon_0: 0x5932840100000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "getPlayerInfo(address)",
        "lineno": 496,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7797,
        "code": ";\n\ncontract owned ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8349,
        "code": "arnings = _sysP.earn",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_2: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 163,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8557,
        "code": "ipId].speed;\n        _ca",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ponzimoon_4: 0x0\nstorage_1: 0x0\ncalldata_ponzimoon_0: 0xc964e49300000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "getSpaceship(uint256)",
        "lineno": 115,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11565,
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000000000\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403010 +\n12*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x80000000000000000000003ffffc400000000000000002002042500402174049\nstorage_7 +\n29102676481673041902632991033461445430619272659676223336789171408008386403010 +\n12*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000000000000000000000fe0400400000000000000000000113d00427d6fe6d\nretval_4498: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x8000000000\ncalldata_ponzimoon_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "withdraw()",
        "lineno": 703,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17790,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n12*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n12*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncallvalue: 0x0\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17819,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "calldata_ponzimoon_4 + calldata_ponzimoon_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17833,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "calldata_ponzimoon_4 + calldata_ponzimoon_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde0\ncallvalue: 0x0\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17855,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "keccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n12*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ponzimoon_4 + calldata_ponzimoon_32 + 4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17918,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "keccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403010_+\n12*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0xfe5302025180000020a00000060000607420066452780000000000000069907e\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403010 +\n12*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0xdad4dfffe0000000000000007fffffffffffffffffffffffffffffffffffffc9\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x2000000000000000000000000000000000000000000000000000000\nstorage_2: 0x2000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17947,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ponzimoon_4 + calldata_ponzimoon_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_2: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_11: 0x0\ncalldata_ponzimoon_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setName(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17961,
        "code": "ing SafeMath for uint256;\n\n\n    Spaceship[] spaceships;\n    Player[] players;\n    mapping(address => uint256) addressMPid;\n    mapping(uint256 => address) pidXAddress;\n    mapping(string => uint256) nameXPid;\n    uint256 playerCount;\n    uint256 totalTicketCount;\n    uint256 airdropPrizePool;\n    uint256 moonPrizePool;\n    uint256 lotteryTime;\n    uint256 editPlayerNamePrice = 0.01 ether;\n    uint256 spaceshipPrice = 0.01 ether;\n    uint256 addSpaceshipPrice = 0.00000001 ether;\n    address maxAirDropAddress;\n    uint256 maxTotalTicket;\n    uint256 round;\n    uint256 totalDividendEarnings;\n    uint256 totalEarnings;\n    uint256 luckyPayerId;\n\n\n    struct Spaceship {\n        uint256 id;\n        string name;\n        uint256 speed;\n        address captain;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 spaceshipPrice;\n        uint256 addSpeed;\n    }\n    struct Player {\n        address addr;\n        string name;\n        uint256 earnings;\n        uint256 ticketCount;\n        uint256 dividendRatio;\n        uint256 distributionEarnings;\n        uint256 dividendEarnings;\n        uint256 withdrawalAmount;\n        uint256 parentId;\n        uint256 dlTicketCount;\n        uint256 xzTicketCount;\n        uint256 jcTicketCount;\n    }\n\n    constructor() public {\n        lotteryTime = now + 12 hours;\n        round = 1;\n\n        spaceships.push(Spaceship(0, \"dalao\", 100000, msg.sender, 0, 20, 15 ether, 2));\n        spaceships.push(Spaceship(1, \"xiaozhuang\", 100000, msg.sender, 0, 50, 15 ether, 5));\n        spaceships.push(Spaceship(2, \"jiucai\", 100000, msg.sender, 0, 80, 15 ether, 8));\n\n        uint256 playerArrayIndex = players.push(Player(msg.sender, \"system\", 0, 0, 3, 0, 0, 0, 0, 0, 0, 0));\n        addressMPid[msg.sender] = playerArrayIndex;\n        pidXAddress[playerArrayIndex] = msg.sender;\n        playerCount = players.length;\n        nameXPid[\"system\"] = playerArrayIndex;\n    }\n\n    function getSpaceship(uint256 _spaceshipId) public view returns (\n        uint256 _id,\n        string _name,\n        uint256 _speed,\n        address _captain,\n        uint256 _ticketCount,\n        uint256 _dividendRatio,\n        uint256 _spaceshipPrice\n    ){\n        _id = spaceships[_spaceshipId].id;\n        _name = spaceships[_spaceshipId].name;\n        _speed = spaceships[_spaceshipId].speed;\n        _captain = spaceships[_spaceshipId].captain;\n        _ticketCount = spaceships[_spaceshipId].ticketCount;\n        _dividendRatio = spaceships[_spaceshipId].dividendRatio;\n        _spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice;\n    }\n    function getNowTime() public view returns (uint256){\n        return now;\n    }\n\n    function checkName(string _name) public view returns (bool){\n        if (nameXPid[_name] == 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function setYxName(address _address, string _name) external onlyOwner {\n        if (addressMPid[_address] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_address, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_address] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _address;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[_address];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n        }\n    }\n\n    function setName(string _name) external payable {\n        require(msg.value >= editPlayerNamePrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, _name, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n            nameXPid[_name] = playerArrayIndex;\n        } else {\n            uint256 _pid = addressMPid[msg.sender];\n            Player storage _p = players[_pid.sub(1)];\n            _p.name = _name;\n            nameXPid[_name] = _pid;\n\n        }\n        Player storage _sysP = players[0];\n        _sysP.earnings = _sysP.earnings.add(msg.value);\n        _sysP.distributionEarnings = _sysP.distributionEarnings.add(msg.value);\n    }\n\n    function _computePayMoney(uint256 _ticketCount, address _addr) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        uint256 _tmpPid = addressMPid[_addr];\n        Player memory _p = players[_tmpPid.sub(1)];\n        if (_p.earnings >= (_initMoney.mul(_ticketCount)) && _p.earnings >= _payMoney) {\n            return true;\n        }\n        return false;\n    }\n\n    function checkTicket(uint256 _ticketCount, uint256 _money) private view returns (bool){\n        uint256 _initMoney = 0.01 ether;\n        uint256 _eachMoney = 0.0001 ether;\n        uint256 _payMoney = (spaceshipPrice.mul(_ticketCount)).add(addSpaceshipPrice.mul((_ticketCount.sub(1))));\n        _payMoney = _payMoney.sub((_eachMoney.mul(_ticketCount)));\n        if (_money >= (_initMoney.mul(_ticketCount)) && _money >= _payMoney) {\n            return true;\n        }\n        return false;\n\n\n    }\n\n    function checkNewPlayer(address _player) private {\n        if (addressMPid[_player] == 0) {\n            uint256 playerArrayIndex = players.push(Player(_player, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[_player] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = _player;\n            playerCount = players.length;\n        }\n    }\n\n    function addTicket(uint256 _ticketCount, uint256 _spaceshipNo, uint256 _pid) private {\n        spaceshipPrice = spaceshipPrice.add(addSpaceshipPrice.mul(_ticketCount));\n\n        totalTicketCount = totalTicketCount.add(_ticketCount);\n        Player storage _p = players[_pid.sub(1)];\n        _p.ticketCount = _p.ticketCount.add(_ticketCount);\n        if (_spaceshipNo == 0) {\n            _p.dlTicketCount = _p.dlTicketCount.add(_ticketCount);\n            Spaceship storage _s = spaceships[0];\n            _s.ticketCount = _s.ticketCount.add(_ticketCount);\n            _s.speed = _s.speed.add(_ticketCount.mul(_s.addSpeed));\n\n        }\n        if (_spaceshipNo == 1) {\n            _p.xzTicketCount = _p.xzTicketCount.add(_ticketCount);\n            Spaceship storage _s1 = spaceships[1];\n            _s1.ticketCount = _s1.ticketCount.add(_ticketCount);\n            _s1.speed = _s1.speed.add(_ticketCount.mul(_s1.addSpeed));\n        }\n        if (_spaceshipNo == 2) {\n            _p.jcTicketCount = _p.jcTicketCount.add(_ticketCount);\n            Spaceship storage _s2 = spaceships[2];\n            _s2.ticketCount = _s2.ticketCount.add(_ticketCount);\n            _s2.speed = _s2.speed.add(_ticketCount.mul(_s2.addSpeed));\n        }\n    }\n\n\n    function _payTicketByEarnings(uint256 _ticketCount, address _addr) private returns (uint256){\n        uint256 _tmpPid = addressMPid[_addr];\n        Player storage _p = players[_tmpPid.sub(1)];\n        uint256 _tmpMoney = spaceshipPrice.mul(_ticketCount);\n        uint256 _tmpMoney2 = addSpaceshipPrice.mul(_ticketCount.sub(1));\n        uint256 _returnMoney = _tmpMoney.add(_tmpMoney2);\n        _p.earnings = _p.earnings.sub(_returnMoney);\n        return _returnMoney;\n    }\n\n\n    function buyTicketByEarnings(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(addressMPid[msg.sender] != 0);\n        require(_computePayMoney(_ticketCount, msg.sender));\n        updateTime();\n        uint256 _money = _payTicketByEarnings(_ticketCount, msg.sender);\n\n\n        totalEarnings = totalEarnings.add(_money);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(_money.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = _money.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = _money.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = _money.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = _cMoney(_money, _SysMoney, _distributionMoney, _airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n    }\n\n    function _cMoney(uint256 _money, uint256 _SysMoney, uint256 _distributionMoney, uint256 _airDropMoney)\n    private pure returns (uint256){\n        uint256 _czSpaceshipMoney = _money.div(100).mul(1).mul(3);\n        return _money.sub(_czSpaceshipMoney).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n    }\n\n    function updateTime() private {\n        if (totalTicketCount < 50000) {\n            lotteryTime = now + 12 hours;\n\n        } else {\n            lotteryTime = now + 1 hours;\n        }\n    }\n\n\n    function buyTicket(uint256 _ticketCount, uint256 _spaceshipNo, string _name) external payable {\n        require(now < lotteryTime);\n        require(_spaceshipNo == 0 || _spaceshipNo == 1 || _spaceshipNo == 2);\n        require(checkTicket(_ticketCount, msg.value));\n        checkNewPlayer(msg.sender);\n        updateTime();\n        totalEarnings = totalEarnings.add(msg.value);\n\n        Player storage _p = players[addressMPid[msg.sender].sub(1)];\n        if (_p.parentId == 0 && nameXPid[_name] != 0) {\n            _p.parentId = nameXPid[_name];\n        }\n        luckyPayerId = addressMPid[msg.sender];\n        addTicket(_ticketCount, _spaceshipNo, addressMPid[msg.sender]);\n\n\n        addSpaceshipMoney(msg.value.div(100).mul(1));\n\n        Player storage _player = players[0];\n        uint256 _SysMoney = msg.value.div(100).mul(5);\n        _player.earnings = _player.earnings.add(_SysMoney);\n        _player.dividendEarnings = _player.dividendEarnings.add(_SysMoney);\n\n\n        uint256 _distributionMoney = msg.value.div(100).mul(10);\n        if (_p.parentId == 0) {\n            _player.earnings = _player.earnings.add(_distributionMoney);\n            _player.distributionEarnings = _player.distributionEarnings.add(_distributionMoney);\n        } else {\n            Player storage _player_ = players[_p.parentId.sub(1)];\n            _player_.earnings = _player_.earnings.add(_distributionMoney);\n            _player_.distributionEarnings = _player_.distributionEarnings.add(_distributionMoney);\n        }\n        if (_ticketCount > maxTotalTicket) {\n            maxTotalTicket = _ticketCount;\n            maxAirDropAddress = msg.sender;\n        }\n\n        uint256 _airDropMoney = msg.value.div(100).mul(2);\n        airdropPrizePool = airdropPrizePool.add(_airDropMoney);\n        if (airdropPrizePool >= 1 ether) {\n            Player storage _playerAirdrop = players[addressMPid[maxAirDropAddress].sub(1)];\n            _playerAirdrop.earnings = _playerAirdrop.earnings.add(airdropPrizePool);\n            _playerAirdrop.dividendEarnings = _playerAirdrop.dividendEarnings.add(airdropPrizePool);\n            airdropPrizePool = 0;\n        }\n\n        uint256 _remainderMoney = msg.value.sub((msg.value.div(100).mul(1)).mul(3)).sub(_SysMoney).\n        sub(_distributionMoney).sub(_airDropMoney);\n\n        updateGameMoney(_remainderMoney, _spaceshipNo, _ticketCount, addressMPid[msg.sender].sub(1));\n\n\n    }\n\n    function getFhMoney(uint256 _spaceshipNo, uint256 _money, uint256 _ticketCount, uint256 _targetNo) private view returns (uint256){\n        Spaceship memory _fc = spaceships[_spaceshipNo];\n        if (_spaceshipNo == _targetNo) {\n            uint256 _Ticket = _fc.ticketCount.sub(_ticketCount);\n            if (_Ticket == 0) {\n                return 0;\n            }\n            return _money.div(_Ticket);\n        } else {\n            if (_fc.ticketCount == 0) {\n                return 0;\n            }\n            return _money.div(_fc.ticketCount);\n        }\n    }\n\n    function updateGameMoney(uint256 _money, uint256 _spaceshipNo, uint256 _ticketCount, uint256 _arrayPid) private {\n        uint256 _lastMoney = addMoonPrizePool(_money, _spaceshipNo);\n        uint256 _dlMoney = _lastMoney.div(100).mul(53);\n        uint256 _xzMoney = _lastMoney.div(100).mul(33);\n        uint256 _jcMoney = _lastMoney.sub(_dlMoney).sub(_xzMoney);\n        uint256 _dlFMoney = getFhMoney(0, _dlMoney, _ticketCount, _spaceshipNo);\n        uint256 _xzFMoney = getFhMoney(1, _xzMoney, _ticketCount, _spaceshipNo);\n        uint256 _jcFMoney = getFhMoney(2, _jcMoney, _ticketCount, _spaceshipNo);\n        _fhMoney(_dlFMoney, _xzFMoney, _jcFMoney, _arrayPid, _spaceshipNo, _ticketCount);\n\n    }\n\n    function _fhMoney(uint256 _dlFMoney, uint256 _xzFMoney, uint256 _jcFMoney, uint256 arrayPid, uint256 _spaceshipNo, uint256 _ticketCount) private {\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            uint256 _totalMoney = 0;\n            if (arrayPid != i) {\n                _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n            } else {\n                if (_spaceshipNo == 0) {\n                    _totalMoney = _totalMoney.add((_tmpP.dlTicketCount.sub(_ticketCount)).mul(_dlFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.dlTicketCount.mul(_dlFMoney));\n                }\n                if (_spaceshipNo == 1) {\n                    _totalMoney = _totalMoney.add((_tmpP.xzTicketCount.sub(_ticketCount)).mul(_xzFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.xzTicketCount.mul(_xzFMoney));\n                }\n                if (_spaceshipNo == 2) {\n                    _totalMoney = _totalMoney.add((_tmpP.jcTicketCount.sub(_ticketCount)).mul(_jcFMoney));\n                } else {\n                    _totalMoney = _totalMoney.add(_tmpP.jcTicketCount.mul(_jcFMoney));\n                }\n            }\n            _tmpP.earnings = _tmpP.earnings.add(_totalMoney);\n            _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_totalMoney);\n        }\n    }\n\n    function addMoonPrizePool(uint256 _money, uint256 _spaceshipNo) private returns (uint){\n        uint256 _tmpMoney;\n        if (_spaceshipNo == 0) {\n            _tmpMoney = _money.div(100).mul(80);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 1) {\n            _tmpMoney = _money.div(100).mul(50);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        if (_spaceshipNo == 2) {\n            _tmpMoney = _money.div(100).mul(20);\n            totalDividendEarnings = totalDividendEarnings.add((_money.sub(_tmpMoney)));\n        }\n        moonPrizePool = moonPrizePool.add(_tmpMoney);\n        return _money.sub(_tmpMoney);\n    }\n\n\n\n    function addSpaceshipMoney(uint256 _money) internal {\n        Spaceship storage _spaceship0 = spaceships[0];\n        uint256 _pid0 = addressMPid[_spaceship0.captain];\n        Player storage _player0 = players[_pid0.sub(1)];\n        _player0.earnings = _player0.earnings.add(_money);\n        _player0.dividendEarnings = _player0.dividendEarnings.add(_money);\n\n\n        Spaceship storage _spaceship1 = spaceships[1];\n        uint256 _pid1 = addressMPid[_spaceship1.captain];\n        Player storage _player1 = players[_pid1.sub(1)];\n        _player1.earnings = _player1.earnings.add(_money);\n        _player1.dividendEarnings = _player1.dividendEarnings.add(_money);\n\n\n\n        Spaceship storage _spaceship2 = spaceships[2];\n        uint256 _pid2 = addressMPid[_spaceship2.captain];\n        Player storage _player2 = players[_pid2.sub(1)];\n        _player2.earnings = _player2.earnings.add(_money);\n        _player2.dividendEarnings = _player2.dividendEarnings.add(_money);\n\n\n    }\n\n    function getPlayerInfo(address _playerAddress) public view returns (\n        address _addr,\n        string _name,\n        uint256 _earnings,\n        uint256 _ticketCount,\n        uint256 _dividendEarnings,\n        uint256 _distributionEarnings,\n        uint256 _dlTicketCount,\n        uint256 _xzTicketCount,\n        uint256 _jcTicketCount\n    ){\n        uint256 _pid = addressMPid[_playerAddress];\n        Player storage _player = players[_pid.sub(1)];\n        _addr = _player.addr;\n        _name = _player.name;\n        _earnings = _player.earnings;\n        _ticketCount = _player.ticketCount;\n        _dividendEarnings = _player.dividendEarnings;\n        _distributionEarnings = _player.distributionEarnings;\n        _dlTicketCount = _player.dlTicketCount;\n        _xzTicketCount = _player.xzTicketCount;\n        _jcTicketCount = _player.jcTicketCount;\n    }\n\n    function addSystemUserEarnings(uint256 _money) private {\n        Player storage _player = players[0];\n        _player.earnings = _player.earnings.add(_money);\n    }\n\n    function withdraw() public {\n        require(addressMPid[msg.sender] != 0);\n        Player storage _player = players[addressMPid[msg.sender].sub(1)];\n        _player.addr.transfer(_player.earnings);\n        _player.withdrawalAmount = _player.withdrawalAmount.add(_player.earnings);\n        _player.earnings = 0;\n        _player.distributionEarnings = 0;\n        _player.dividendEarnings = 0;\n    }\n\n    function makeMoney() public {\n        require(now > lotteryTime);\n        uint256 _pMoney = moonPrizePool.div(2);\n        Player storage _luckyPayer = players[luckyPayerId.sub(1)];\n        _luckyPayer.earnings = _luckyPayer.earnings.add(_pMoney);\n        uint256 _nextMoonPrizePool = moonPrizePool.div(100).mul(2);\n        uint256 _luckyCaptainMoney = moonPrizePool.div(100).mul(5);\n        uint256 _luckyCrewMoney = moonPrizePool.sub(_nextMoonPrizePool).sub(_luckyCaptainMoney).sub(_pMoney);\n        uint256 _no1Spaceship = getFastestSpaceship();\n        Spaceship storage _s = spaceships[_no1Spaceship];\n        uint256 _pid = addressMPid[_s.captain];\n        Player storage _pPayer = players[_pid.sub(1)];\n        _pPayer.earnings = _pPayer.earnings.add(_luckyCaptainMoney);\n\n        uint256 _eachMoney = _getLuckySpaceshipMoney(_no1Spaceship, _luckyCrewMoney);\n        for (uint i = 0; i < players.length; i++) {\n            Player storage _tmpP = players[i];\n            if (_no1Spaceship == 0) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.dlTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 1) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.xzTicketCount.mul(_eachMoney));\n            }\n            if (_no1Spaceship == 2) {\n                _tmpP.earnings = _tmpP.earnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n                _tmpP.dividendEarnings = _tmpP.dividendEarnings.add(_tmpP.jcTicketCount.mul(_eachMoney));\n            }\n            _tmpP.dlTicketCount = 0;\n            _tmpP.xzTicketCount = 0;\n            _tmpP.jcTicketCount = 0;\n            _tmpP.ticketCount = 0;\n        }\n        _initSpaceship();\n        totalTicketCount = 0;\n        airdropPrizePool = 0;\n        moonPrizePool = _nextMoonPrizePool;\n        lotteryTime = now + 12 hours;\n        spaceshipPrice = 0.01 ether;\n        maxAirDropAddress = pidXAddress[1];\n        maxTotalTicket = 0;\n        round = round.add(1);\n        luckyPayerId = 1;\n    }\n\n    function _initSpaceship() private {\n        for (uint i = 0; i < spaceships.length; i++) {\n            Spaceship storage _s = spaceships[i];\n            _s.captain = pidXAddress[1];\n            _s.ticketCount = 0;\n            _s.spaceshipPrice = 15 ether;\n            _s.speed = 100000;\n        }\n\n    }\n\n    function _getLuckySpaceshipMoney(uint256 _spaceshipId, uint256 _luckyMoney) private view returns (uint256){\n        Spaceship memory _s = spaceships[_spaceshipId];\n        uint256 _eachLuckyMoney = _luckyMoney.div(_s.ticketCount);\n        return _eachLuckyMoney;\n\n    }\n\n    function getFastestSpaceship() private view returns (uint256){\n        Spaceship memory _dlSpaceship = spaceships[0];\n        Spaceship memory _xzSpaceship = spaceships[1];\n        Spaceship memory _jcSpaceship = spaceships[2];\n\n        uint256 _maxSpeed;\n        if (_jcSpaceship.speed >= _xzSpaceship.speed) {\n            if (_jcSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 2;\n            } else {\n                _maxSpeed = 0;\n            }\n        } else {\n            if (_xzSpaceship.speed >= _dlSpaceship.speed) {\n                _maxSpeed = 1;\n            } else {\n                _maxSpeed = 0;\n            }\n        }\n        return _maxSpeed;\n\n    }\n\n    function getGameInfo() public view returns (\n        uint256 _totalTicketCount,\n        uint256 _airdropPrizePool,\n        uint256 _moonPrizePool,\n        uint256 _lotteryTime,\n        uint256 _nowTime,\n        uint256 _spaceshipPrice,\n        uint256 _round,\n        uint256 _totalEarnings,\n        uint256 _totalDividendEarnings\n    ){\n        _totalTicketCount = totalTicketCount;\n        _airdropPrizePool = airdropPrizePool;\n        _moonPrizePool = moonPrizePool;\n        _lotteryTime = lotteryTime;\n        _nowTime = now;\n        _spaceshipPrice = spaceshipPrice;\n        _round = round;\n        _totalEarnings = totalEarnings;\n        _totalDividendEarnings = totalDividendEarnings;\n    }\n\n    function _updateSpaceshipPrice(uint256 _spaceshipId) internal {\n        spaceships[_spaceshipId].spaceshipPrice = spaceships[_spaceshipId].spaceshipPrice.add(\n            spaceships[_spaceshipId].spaceshipPrice.mul(3).div(10));\n    }\n\n    function campaignCaptain(uint _spaceshipId) external payable {\n        require(now < lotteryTime);\n        require(msg.value == spaceships[_spaceshipId].spaceshipPrice);\n        if (addressMPid[msg.sender] == 0) {\n            uint256 playerArrayIndex = players.push(Player(msg.sender, \"\", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\n            addressMPid[msg.sender] = playerArrayIndex;\n            pidXAddress[playerArrayIndex] = msg.sender;\n            playerCount = players.length;\n        }\n        spaceships[_spaceshipId].captain.transfer(msg.value);\n        spaceships[_spaceshipId].captain = msg.sender;\n        _updateSpaceshipPrice(_spaceshipId);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (_a == 0) {\n            return 0;\n        }\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n\n        return c;\n    }\n\n    /**\n    * @dev ",
        "debug": "calldata_ponzimoon_32 + 4: 0x40010e4a3fffffffffffffffffffffffffffffffffffffffffffffffffffffe1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ponzimoon_4: 0x40000000000000000000000000000000000000000000000000000\ncalldata_ponzimoon_4 + calldata_ponzimoon_32 + 4: 0xc003bec8bfffffffffffffffffffffffffffffffffffffffffffffffffffffee\nstorage_2: 0x40000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ponzimoon_0: 0x4690db7a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ponzimoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setYxName(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x39b5b0dd442703ea6d95bc52a73a42c20852c69a.sol",
        "function": "setYxName(address,string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}