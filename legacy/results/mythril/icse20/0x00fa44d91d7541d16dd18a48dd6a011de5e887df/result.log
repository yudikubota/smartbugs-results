{"error": null, "issues": [{"address": 769, "code": ".transferFrom(tokenSeller, msg.", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol", "function": "fallback", "lineno": 92, "title": "Message call to external contract", "type": "Informational"}, {"address": 769, "code": ".transferFrom(tokenSeller, msg.", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1127\n", "filename": "/unique_contracts/0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol", "function": "fallback", "lineno": 92, "title": "Multiple Calls", "type": "Information"}, {"address": 769, "code": ".transferFrom(tokenSeller, msg.", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol", "function": "fallback", "lineno": 92, "title": "Transaction order dependence", "type": "Warning"}, {"address": 840, "code": "ens);\n        TokenPurchase(msg", "debug": "The exception is triggered under the following conditions:\n\nretval_769: 0x1\nstorage_4: 0x2\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Sale_0: 0x5507a82a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Sale: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol", "function": "fallback", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 1127, "code": "mount, tokens);\n    }\n\n    function setTokenSeller(", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x00fa44d91d7541d16dd18a48dd6a011de5e887df.sol", "function": "fallback", "lineno": 93, "title": "Message call to external contract", "type": "Informational"}], "success": true}