{
  "contract": "0xd7dbe6f13b002ebed312f7ffb6164475426bdd96",
  "tool": "mythril",
  "start": 1563595009.1125002,
  "end": 1563595014.2778811,
  "duration": 5.165380954742432,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.24;\r\n^---------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:78:54: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    bytes32 constant public sigDestinationTransfer = keccak256(\r\n                                                     ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:88:58: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    bytes32 constant public sigDestinationTransferFrom = keccak256(\r\n                                                         ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:99:53: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    bytes32 constant public sigDestinationApprove = keccak256(\r\n                                                    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:109:60: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    bytes32 constant public sigDestinationApproveAndCall = keccak256(\r\n                                                           ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:204:21: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n                    keccak256(\r\n                    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:219:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n                signer == ecrecover(keccak256(ethSignedMessagePrefix, \"32\", data), v, r, s) // Geth-adopted\r\n                                    ^-------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:221:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n                signer == ecrecover(keccak256(ethSignedMessagePrefix, \"\\x20\", data), v, r, s) // Trezor-adopted\r\n                                    ^---------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:225:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n                signer == ecrecover(keccak256(ethSignedMessagePrefix, \"64\", hexToString(data)), v, r, s) // Geth\r\n                                    ^--------------------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:227:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n                signer == ecrecover(keccak256(ethSignedMessagePrefix, \"\\x40\", hexToString(data)), v, r, s) // Trezor\r\n                                    ^----------------------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:286:13: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            keccak256(address(this), from, to, value, fee, feeRecipient, deadline, sigId),\r\n            ^---------------------------------------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:334:13: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            keccak256(address(this), from, spender, value, fee, feeRecipient, deadline, sigId),\r\n            ^--------------------------------------------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:383:13: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            keccak256(address(this), from, to, value, fee, feeRecipient, deadline, sigId),\r\n            ^---------------------------------------------------------------------------^\n/unique_chucks/23/0xd7dbe6f13b002ebed312f7ffb6164475426bdd96.sol:432:13: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            keccak256(address(this), from, spender, value, extraData, fee, feeRecipient, deadline, sigId),\r\n            ^-------------------------------------------------------------------------------------------^\n",
    "issues": []
  }
}