{
  "contract": "0xec329ffc97d75fe03428ae155fc7793431487f63",
  "tool": "mythril",
  "start": 1563820434.9958396,
  "end": 1563820495.1512802,
  "duration": 60.15544056892395,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 390,
        "code": "send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas",
        "debug": "calldata_TokenSender_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 804,
        "code": "ess _dst, uint _value, bytes _data) onlyOwner {\n        _dst.call.value(_value)(_data);\n    }\n}\n// to get the needed",
        "debug": "calldata_TokenSender_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenSender_0: 0xb61d27f600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `execute(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "execute(address,uint256,bytes)",
        "lineno": 22,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1192,
        "code": ".length; i++ ) {\n            a",
        "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 67,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1347,
        "code": "mount = amount;\n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xc47219cb9fdc02f8ea1edee12ad47bc306adfff070d7fe1ffffeffe000000033\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0x729eeae6c0164657c976d60a7330604cfa6b88b78f884960080100a007ffa5fe\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 72,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1493,
        "code": "nds and tracks the amoun",
        "debug": "storage_4: 0xdfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffcc5e5363b1620803724071c0\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0x1\ncalldata_TokenSender_cpy: 0xed625476982208a430e179c80000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 77,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1560,
        "code": "TokenSender(address _token)",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenSender_4: 0x0\nstorage_4: 0x0\ncalldata_TokenSender_0: 0x9377d71100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x9377d711",
        "lineno": 46,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1999,
        "code": ")(_data);\n    }\n}\n// to get th",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "execute(address,uint256,bytes)",
        "lineno": 23,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1999,
        "code": ")(_data);\n    }\n}\n// to get th",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "execute(address,uint256,bytes)",
        "lineno": 23,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 2342,
        "code": "gth) && ( gas() > 150",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "run()",
        "lineno": 91,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2876,
        "code": "/\n\n    funct",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "run()",
        "lineno": 107,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2946,
        "code": "\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}",
        "debug": "storage_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2950,
        "code": "\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}",
        "debug": "storage_4: 0xd7c7ca000af0053503a7686657c719448890e0ee0e6e3eddfffdfc1d2f82dc52\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0xe9385a2204fc4dc904e489e897034f41e9ecff026b95bc9ffffffc1ffc7bf1f7\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2962,
        "code": "\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}",
        "debug": "storage_4: 0x7ffffff39ffffffffffff9ffffffffe7fffffffe7fffffffffffffffffff9fff\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2964,
        "code": "\n    Token public token; // the token we are working with\n    uint public totalToDistribute;\n\n    uint public next;\n\n\n    struct Transfer {\n        address addr;\n        uint amount;\n    }\n\n    Transfer[] public transfers;\n\n    function TokenSender(address _token) {\n        token = Token(_token);\n    }\n\n    // this is a used to save gas\n    uint constant D160 = 0x0010000000000000000000000000000000000000000;\n\n    // This is the function that makes the list of transfers and various\n    //  checks around that list, it is a little tricky, the data input is\n    //  structured with the `amount` and the (receiving) `addr` combined as one\n    //  long number and then this number is deconstructed in this function to\n    //  save gas and reduce the number of `0`'s that are needed to be stored\n    //   on the blockchain\n    function fill(uint[] data) onlyOwner {\n\n        // If the send has started then we just throw\n        if (next>0) throw;\n\n        uint acc;\n        uint offset = transfers.length;\n        transfers.length = transfers.length + data.length;\n        for (uint i = 0; i < data.length; i++ ) {\n            address addr = address( data[i] & (D160-1) );\n            uint amount = data[i] / D160;\n\n            transfers[offset + i].addr = addr;\n            transfers[offset + i].amount = amount;\n            acc += amount;\n        }\n        totalToDistribute += acc;\n    }\n    // This function actually makes the sends and tracks the amount of gas used\n    //  if it takes more gas than was sent with the transaction then this\n    //  function will need to be called a few times until\n    function run() onlyOwner {\n        if (transfers.length == 0) return;\n\n        // Keep next in the stack var mNext to save gas\n        uint mNext = next;\n\n        // Set the contract as finalized to avoid reentrance\n        next = transfers.length;\n\n        if ((mNext == 0 ) && ( token.balanceOf(this) != totalToDistribute)) throw;\n\n        while ((mNext<transfers.length) && ( gas() > 150000 )) {\n            uint amount = transfers[mNext].amount;\n            address addr = transfers[mNext].addr;\n            if (amount > 0) {\n                if (!token.transfer(addr, transfers[mNext].amount)) throw;\n            }\n            mNext ++;\n        }\n\n        // Set the next to the actual state.\n        next = mNext;\n    }\n\n\n    ///////////////////////\n    // Helper functions\n    ///////////////////////\n\n    function hasTerminated() constant returns (bool) {\n        if (transfers.length == 0) return false;\n        if (next < transfers.length) return false;\n        return true;\n    }\n\n    function nTransfers() constant returns (uint) {\n        return transfers.length;\n    }\n\n    function gas() internal constant returns (uint _gas) {\n        assembly {\n            _gas:= gas\n        }\n    }\n\n}",
        "debug": "storage_4: 0xaa8c38807ff81cf3d1221bb343486044e0fe021e510d040c01f7d85f092fcc20\ncalldata_TokenSender_4 + calldata_TokenSender_4: 0xa2c53000001af34000029baaa02f5ca4a0c01a0280804496020f001100404000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenSender_0: 0x884b5dc200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSender: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x884b5dc2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xec329ffc97d75fe03428ae155fc7793431487f63.sol",
        "function": "_function_0x884b5dc2",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}