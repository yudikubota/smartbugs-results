{
  "contract": "0x4f416e928a2cf93d90772c9d8e070a8b1f5b3f36",
  "tool": "mythril",
  "start": 1563548310.605347,
  "end": 1563548497.8786595,
  "duration": 187.27331256866455,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 413,
        "code": "_data);\n    }\n  }\n\n  /**\n   * @dev Makes sure to accept the code even it matches a valid function signature.\n   */\n  function signChallengeWhenValid() private returns (",
        "debug": "calldata_SignatureChallenge_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SignatureChallenge_0: 0x1cff79cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SignatureChallenge: 0x4\n",
        "description": "A possible integer overflow exists in the function `execute(address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x4f416e928a2cf93d90772c9d8e070a8b1f5b3f36.sol",
        "function": "execute(address,bytes)",
        "lineno": 148,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 566,
        "code": "hallengeWhenValid()) {\n      active = _active;\n      challengeBytes = _challengeBytes;\n      emit ChallengeUpdated(_active, _challengeBytes);\n\n      if (active) {\n        acceptCode(_testCode);\n      }\n    }\n  }\n\n  /**\n   * @dev execute\n   */\n  function execute(address _target, bytes _data)\n    public payable\n  {\n    if (!signChallengeWhenValid()) {",
        "debug": "calldata_SignatureChallenge_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SignatureChallenge_0: 0x7944662a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SignatureChallenge: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateChallenge(bool,uint8,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x4f416e928a2cf93d90772c9d8e070a8b1f5b3f36.sol",
        "function": "updateChallenge(bool,uint8,bytes)",
        "lineno": 130,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2665,
        "code": "e.length == challengeBytes, \"SC05\");",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/11/0x4f416e928a2cf93d90772c9d8e070a8b1f5b3f36.sol",
        "function": "execute(address,bytes)",
        "lineno": 183,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}