{"error": null, "issues": [{"address": 1467, "code": "urn super.transfer(_to, _value);\n  }\n\n  /**\n    * transfer from for unlocked accounts\n    */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(locked[_", "debug": "calldata_WhiteListToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WhiteListToken_0: 0x402962bc00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteListToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `deleteAddressesFromWhitelist(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "deleteAddressesFromWhitelist(address[])", "lineno": 722, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3795, "code": " we have a new contributor\n    if(", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3900\n", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "fallback", "lineno": 614, "title": "Multiple Calls", "type": "Information"}, {"address": 4732, "code": "sesToWhitelist(address[] _", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "retrieveExternalTokens(address,address)", "lineno": 685, "title": "Message call to external contract", "type": "Warning"}, {"address": 4732, "code": "sesToWhitelist(address[] _", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4924\n", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "retrieveExternalTokens(address,address)", "lineno": 685, "title": "Multiple Calls", "type": "Information"}, {"address": 4924, "code": " }\n\n  function addAddressesToWhitelist(address[] _a", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "retrieveExternalTokens(address,address)", "lineno": 683, "title": "Message call to external contract", "type": "Warning"}, {"address": 10748, "code": "b;\n  }\n\n  func", "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x0\ncallvalue: 0x0\nstorage_8: 0x1\nstorage_10: 0x0\nstorage_0: 0x0\ncalldatasize_WhiteListToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "fallback", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 10766, "code": "a == ", "debug": "calldata_WhiteListToken_4: 0xb2ca30ad957af0006ba4e7c6e4a78ea2c02504a9cf8823ed01162c7304015831\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WhiteListToken_0: 0x101e5a3200000000000000000000000000000000000000000000000000000000\ncalldatasize_WhiteListToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setSoftcap(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "setSoftcap(uint256)", "lineno": 20, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10824, "code": " b * ", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldatasize_WhiteListToken: 0x3\nstorage_9: 0x0\nstorage_8: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xc0360a3507655e619cdf7e6ca616d9ddec4dec95.sol", "function": "fallback", "lineno": 27, "title": "Exception state", "type": "Informational"}], "success": true}