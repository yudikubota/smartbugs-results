{
  "contract": "0xb5ae848edb296c21259b7467331467d2647eecdf",
  "tool": "mythril",
  "start": 1563347098.73317,
  "end": 1563347382.1241534,
  "duration": 283.3909833431244,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 351,
        "code": ") {\n        r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_LemoCoin: 0x3\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "fallback",
        "lineno": 167,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2918,
        "code": "    }\n\n}\ncontr",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "stop()",
        "lineno": 92,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4645,
        "code": "ing(address addr) public {\n        FreezingNode[] ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "removeFreezer(address)",
        "lineno": 267,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5390,
        "code": "ezingEvent(address indexed addr, uint end_stamp",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "addFreezer(address)",
        "lineno": 265,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5586,
        "code": "t never less than 0. The neg",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_LemoCoin_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LemoCoin_4: 0x0\ncalldata_LemoCoin_0: 0x78b8336000000000000000000000000000000000000000000000000000000000\ncalldatasize_LemoCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "freezingBalanceInfoOf(address,uint256)",
        "lineno": 321,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8742,
        "code": "}\ncontract DSNote {\n    event Log",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "addFreezer(address)",
        "lineno": 55,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8742,
        "code": "}\ncontract DSNote {\n    event Log",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4645\n",
        "filename": "/unique_contracts/0xb5ae848edb296c21259b7467331467d2647eecdf.sol",
        "function": "removeFreezer(address)",
        "lineno": 55,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}