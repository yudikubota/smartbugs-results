{
  "contract": "0xfa873749f1d325b60a0528a3d457e89f115b1763",
  "tool": "mythril",
  "start": 1563544791.3630364,
  "end": 1563544799.8749511,
  "duration": 8.511914730072021,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.24;\r\n^---------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:768:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n                                            ^---^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:858:71: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n                                                                      ^---^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:861:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (proofVerified == false) throw;\r\n                                    ^---^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:879:14: Warning: Use of the \"var\" keyword is deprecated.\n        for (var i=0; i<prefix.length; i++){\r\n             ^---^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:942:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw; // Should be a better way?\r\n            ^---^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1037:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function Jackypot()\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:782:50: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:782:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:814:21: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (address(sha3(pubkey)) == signer) return true;\r\n                    ^----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:817:29: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n            return (address(sha3(pubkey)) == signer);\r\n                            ^----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:832:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        tosign2[0] = 1; //role\r\n                     ^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:879:14: Warning: The type of this variable was inferred as uint8, which can hold values between 0 and 255. This is probably not desired. Use an explicit type to silence this warning.\n        for (var i=0; i<prefix.length; i++){\r\n             ^-----^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:894:20: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                   ^-----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:894:42: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                         ^---------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:894:37: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:894:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:894:37: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\r\n                                    ^---------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:916:48: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:916:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1122:40: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        if (oraclize_getPrice(\"URL\") > this.balance)\r\n                                       ^----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1124:17: Warning: Invoking events without \"emit\" prefix is deprecated.\n                newOraclizeQuery(\"Oraclize query was NOT sent, please add some ETH to cover for the query fee\");\r\n                ^---------------------------------------------------------------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1142:12: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        if(this.balance<1000 ether)\r\n           ^----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1154:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        logfolio(betid[Oraclize_data]);\r\n        ^----------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1163:8: Warning: Invoking events without \"emit\" prefix is deprecated.\n       logfolio(betid[myid]);\r\n       ^-------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1164:8: Warning: Invoking events without \"emit\" prefix is deprecated.\n       logResult(result);\r\n       ^---------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1216:19: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        pot[_id]= this.balance;\r\n                  ^----------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1220:22: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        betid[_id] = keccak256( add(block.number, uint (_id)) );\r\n                     ^----------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1220:22: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        betid[_id] = keccak256( add(block.number, uint (_id)) );\r\n                     ^----------------------------------------^\n/unique_chucks/14/0xfa873749f1d325b60a0528a3d457e89f115b1763.sol:1394:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        deposit(msg.value);\r\n        ^----------------^\n",
    "issues": []
  }
}