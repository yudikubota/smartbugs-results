{
  "contract": "0x47ba0689fbd72936749b007d18dfb75d34bf241b",
  "tool": "mythril",
  "start": 1563355557.7568264,
  "end": 1563355665.9445763,
  "duration": 108.1877498626709,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3984,
        "code": "rProcess(address _from, address _to",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setOwnerValidatorAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setOffChainManagerAddress(address)",
        "lineno": 372,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3984,
        "code": "rProcess(address _from, address _to",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function setOffChainManagerAddress(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setOffChainManagerAddress(address)",
        "lineno": 372,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4373,
        "code": "erValidator);\n        }\n    }\n\n    ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setOwnerValidatorAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "applyRedenomination()",
        "lineno": 357,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4373,
        "code": "erValidator);\n        }\n    }\n\n    ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function applyRedenomination(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "applyRedenomination()",
        "lineno": 357,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5107,
        "code": "ress _to, address _msgSender, uint2",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setOwnerValidatorAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setOwnerValidatorAddress(address)",
        "lineno": 367,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5107,
        "code": "ress _to, address _msgSender, uint2",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function setOwnerValidatorAddress(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setOwnerValidatorAddress(address)",
        "lineno": 367,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5802,
        "code": "  if (isRedenominated) {\n          ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setOwnerValidatorAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "sendFromOwn(address,uint256)",
        "lineno": 456,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5802,
        "code": "  if (isRedenominated) {\n          ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sendFromOwn(address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "sendFromOwn(address,uint256)",
        "lineno": 456,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6175,
        "code": "edenomination() onlyNotWorkin",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setOwnerValidatorAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setWorking(bool)",
        "lineno": 346,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6175,
        "code": "edenomination() onlyNotWorkin",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function setWorking(bool). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "setWorking(bool)",
        "lineno": 346,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 8234,
        "code": "dress => uint2",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenContractImpl_32_+_4: 0xbd5dfeabad0efffffffffeffffffffffd599ffefbfe6f24271e80e64322c0700\ncalldata_TokenContractImpl_32 + 68: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenContractImpl_4: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_7: 0x0\nstorage_3: 0x0\ncaller: 0x0\nstorage_0: 0xff00\ncalldata_TokenContractImpl_0: 0x15dacbea00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenContractImpl: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x47ba0689fbd72936749b007d18dfb75d34bf241b.sol",
        "function": "transferFrom(address,address,address,uint256)",
        "lineno": 273,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}