{
  "contract": "0x84f710bae3316a74fb0fcb01904d2578a4cc6a26",
  "tool": "mythril",
  "start": 1563558847.8821485,
  "end": 1563558943.4733357,
  "duration": 95.59118723869324,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 6512,
        "code": "count[_address].lock\n                , lockAccoun",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0x8000\ncalldata_TransferFromOperator_0: 0x7238ccdb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "getLockInfo(address)",
        "lineno": 305,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7477,
        "code": "unlock;        \n            emit UnlockAddr(msg.sen",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\nstorage_4: 0x0\ncaller: 0x0\ncalldata_TransferFromOperator_0: 0x7c33ebfd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "transferToMany(address[],uint256[])",
        "lineno": 261,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10393,
        "code": "dexed prevOwner, address indexed newOwner);",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TransferFromOperator_4: 0xa\ncalldata_TransferFromOperator_0: 0xab3d047f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "_function_0xab3d047f",
        "lineno": 127,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 14623,
        "code": "   as",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_TransferFromOperator_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_TransferFromOperator_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TransferFromOperator_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 14,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14636,
        "code": ");\n        ret",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\ncalldata_TransferFromOperator_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_TransferFromOperator_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TransferFromOperator_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 14,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 14814,
        "code": "++) {\n            require(_to[i] != address(0));\n            totValue = totValue.add(_value[i]);\n        }\n        require(balances[msg.sender].sub(keepAmount[msg.sender]) >= totValue);\n\n        for (i = 0; i < _to.length; i++) {\n            balances[msg.sender] = balances[msg.sender].sub(_value[i]);\n            balances[_to[i]] = balances[_to[i]].add(_value[i]);\n            emit Transfer(msg.sender, _to[i], _value[i]);\n        }\n\n        return true;\n    }\n\n    function transferFromOperator(address _to, uint256 _value) onlyOperator checkLockAccount public returns (bool) {\n        require(_to != address(0));\n        require(balances[msg.sender].sub(keepAmount[msg.sender]) >= _value);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n}\n\n// ----------------------------------------------------------------------------\n//\n// ----------------------------------------------------------------------------\ncontract Pausable is OwnableToken {\n    bool public paused = false;\n\n    event Pause();\n    event Unpause();\n\n    modifier whenNotPaused() {\n        require(!paused); \n        _;",
        "debug": "keccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0x200\ntimestamp: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TransferFromOperator_4: 0x0\ncalldata_TransferFromOperator_0: 0x7238ccdb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TransferFromOperator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getLockInfo(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x84f710bae3316a74fb0fcb01904d2578a4cc6a26.sol",
        "function": "getLockInfo(address)",
        "lineno": 320,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}