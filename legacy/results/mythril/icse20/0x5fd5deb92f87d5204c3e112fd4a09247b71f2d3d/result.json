{
  "contract": "0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d",
  "tool": "mythril",
  "start": 1563668286.4912376,
  "end": 1563668804.0751524,
  "duration": 517.5839147567749,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 767,
        "code": "(_spender.call.value(0)(abi.encodeWithSignature(_callback, msg.sender, _value, _data)));\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction transferAndCall(address _to, uint256 _value, bytes _data) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tTokenRecipient(_to).tokenFallback",
        "debug": "calldata_TokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenRecipient_0: 0x9a547bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "approveAndCall(address,uint256,bytes,string)",
        "lineno": 170,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1233,
        "code": "ender, _value, _data);\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction transferAndCall(address _to, uint256 _value, bytes _data, string _callback) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tassert(_to.call.value(",
        "debug": "calldata_TokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenRecipient_0: 0x4000aea000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "transferAndCall(address,uint256,bytes)",
        "lineno": 177,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2002,
        "code": "ublic isOwner {\n\t\townerTemp = _owner;\n\t}\n\t\n\tfunction acceptOwnership() publi",
        "debug": "calldata_TokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenRecipient_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "setSymbol(string)",
        "lineno": 203,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3796,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "_function_0x03c1d1df",
        "lineno": 216,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4833,
        "code": "ytes _data) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tToken",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "approveAndCall(address,uint256,bytes,string)",
        "lineno": 175,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4844,
        "code": "alue, bytes _data) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tTokenR",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenRecipient_4 + calldata_TokenRecipient_32 + 36: 0x30\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenRecipient_4 + calldata_TokenRecipient_32 + 36)): 0x1f\nstorage_6: 0xff00\ncalldata_TokenRecipient_0: 0x9a547bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRecipient: 0x4\nretval_4833: 0x0\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenRecipient_4 + calldata_TokenRecipient_32 + 36)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenRecipient_4 + calldata_TokenRecipient_32 + 68)): 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "approveAndCall(address,uint256,bytes,string)",
        "lineno": 175,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7476,
        "code": "it Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\tf",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "transferAndCall(address,uint256,bytes)",
        "lineno": 73,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 12285,
        "code": "{\n\tmapping (address => uint256) balances;\n\tmapping (address => mapping (address => uint256)) allowed;\n\tuint8 public decimals;\n\tstring public name;\n\tstring public symbol;\n\t\n\tbool public running;\n\taddress public owner;\n\taddress public ownerTemp;\n\t\n\t\n\t\n\tmodifier isOwner {\n\t\trequire(owner == msg.sender);\n\t\t_;\n\t}\n\t\n\tmodifier isRunning {\n\t\trequire(running);\n\t\t_;\n\t}\n\t\n\tfunction isContract(address _addr) private view returns (bool) {\n\t\tuint length;\n\t\tassembly {\n\t\t\tlength := extcodesize(_addr)\n\t\t}\n\t\treturn length > 0;\n\t}\n\t\n\tconstructor() public {\n\t\trunning = true;\n\t\towner = msg.sender;\n\t\tdecimals = 18;\n\t\ttotalSupply = 2 * uint(10)**(decimals + 9);\n\t\tbalances[owner] = totalSupply;\n\t\tname = \"HOTCOIN\";\n\t\tsymbol = \"HCN\";\n\t\temit Transfer(address(0), owner, totalSupply);\n\t}\n\t\n\t\n\t\n\tfunction transfer(address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tif (isContract(_to)) {\n\t\t\tbytes memory empty;\n\t\t\tTokenRecipient(_to).tokenFallback(msg.sender, _value, empty);\n\t\t}\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value, bytes _data) public isRunning returns (bool) {\n\t\trequire(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tif (isContract(_to)) {\n\t\t\tTokenRecipient(_to).tokenFallback(msg.sender, _value, _data);\n\t\t}\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\tfunction transfer(address _to, uint256 _value, bytes _data, string _callback) public isRunning returns (bool) {\n\t\trequire(balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tif (isContract(_to)) {\n\t\t\tassert(_to.call.value(0)(abi.encodeWithSignature(_callback, msg.sender, _value, _data)));\n\t\t}\n\t\temit Transfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\t\n\tfunction transfer(address[] _tos, uint256[] _values) public isRunning returns (bool) {\n\t\tuint cnt = _tos.length;\n\t\trequire(cnt > 0 && cnt <= 1000 && cnt == _values.length);\n\t\tuint256 totalAmount = 0;\n\t\tuint256 val;\n\t\taddress to;\n\t\tuint i;\n\t\t\n\t\tfor (i = 0; i < cnt; i++) {\n\t\t\tval = _values[i];\n\t\t\tto = _tos[i];\n\t\t\trequire(balances[to] + val >= balances[to] && totalAmount + val >= totalAmount);\n\t\t\ttotalAmount += val;\n\t\t}\n\t\t\n\t\trequire(balances[msg.sender] >= totalAmount);\n\t\tbalances[msg.sender] -= totalAmount;\n\t\tbytes memory empty;\n\t\t\n\t\tfor (i = 0; i < cnt; i++) {\n\t\t\tto = _tos[i];\n\t\t\tval = _values[i];\n\t\t\tbalances[to] += val;\n\t\t\tif (isContract(to)) {\n\t\t\t\tTokenRecipient(to).tokenFallback(msg.sender, val, empty);\n\t\t\t}\n\t\t\temit Transfer(msg.sender, to, val);\n\t\t}\n\t\treturn true;\n\t}\n\t\n\t\n\t\n\t\n\tfunction balanceOf(address _owner) public view returns (uint256) {\n\t\treturn balances[_owner];\n\t}\n\t\n\tfunction transferFrom(address _from, address _to, uint256 _value) public isRunning returns (bool) {\n\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]);\n\t\tbalances[_to] += _value;\n\t\tbalances[_from] -= _value;\n\t\tallowed[_from][msg.sender] -= _value;\n\t\temit Transfer(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public isRunning returns (bool) {\n\t\tallowed[msg.sender][_spender] = _value;\n\t\temit Approval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\t\n\tfunction approve(address _spender, uint256 _value, uint256 _check) public isRunning returns (bool) {\n\t\trequire(allowed[msg.sender][_spender] == _check);\n\t\treturn approve(_spender, _value);\n\t}\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n\t  return allowed[_owner][_spender];\n\t}\n\t\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _data) public isRunning returns (bool) {\n\t\tif (approve(_spender, _value)) {\n\t\t\tTokenRecipient(_spender).receiveApproval(msg.sender, _value, this, _data);\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction approveAndCall(address _spender, uint256 _value, bytes _data, string _callback) public isRunning returns (bool) {\n\t\tif (approve(_spender, _value)) {\n\t\t\tassert(_spender.call.value(0)(abi.encodeWithSignature(_callback, msg.sender, _value, _data)));\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction transferAndCall(address _to, uint256 _value, bytes _data) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tTokenRecipient(_to).tokenFallback(msg.sender, _value, _data);\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\tfunction transferAndCall(address _to, uint256 _value, bytes _data, string _callback) public isRunning returns (bool) {\n\t\tif (transfer(_to, _value)) {\n\t\t\tassert(_to.call.value(0)(abi.encodeWithSignature(_callback, msg.sender, _value, _data)));\n\t\t\treturn true;\n\t\t}\n\t}\n\t\n\t\n\t\n\tfunction setName(string _name) public isOwner {\n\t\tname = _name;\n\t}\n\t\n\tfunction setSymbol(string _symbol) public isOwner {\n\t\tsymbol = _symbol;\n\t}\n\t\n\tfunction setRunning(bool _run) public isOwner {\n\t\trunning = _run;\n\t}\n\t\n\tfunction transferOwnership(address _owner) public isOwner {\n\t\townerTemp = _owner;\n\t}\n\t\n\tfunction acceptOwnership() public {\n\t\trequire(msg.sender == ownerTemp);\n\t\towner = ownerTemp;\n\t\townerTemp = address(0);\n\t}\n\t\n\tfunction collectERC20(ERC20 _token, uint _amount) public isRunning isOwner returns (bool success) {\n\t\treturn _token.transfer(owner, _amount);\n\t}\n}",
        "debug": "calldata_TokenRecipient_4 + calldata_TokenRecipient_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_TokenRecipient_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x5fd5deb92f87d5204c3e112fd4a09247b71f2d3d.sol",
        "function": "setSymbol(string)",
        "lineno": 21,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}