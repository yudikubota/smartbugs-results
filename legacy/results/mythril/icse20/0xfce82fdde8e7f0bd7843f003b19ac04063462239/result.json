{
  "contract": "0xfce82fdde8e7f0bd7843f003b19ac04063462239",
  "tool": "mythril",
  "start": 1563618422.7360072,
  "end": 1563618651.5566103,
  "duration": 228.82060313224792,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 894,
        "code": "(_data));\n\n    return true;\n  }\n\n    \n    function transferOwnership(address _owner) onlyOwner public {\n        owner = _owner;\n    }\n    function mintToken(address target, uint256 mintedAmount) public onlyOwner {\n        bal",
        "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x5c17f9f400000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approve(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xfce82fdde8e7f0bd7843f003b19ac04063462239.sol",
        "function": "approve(address,uint256,bytes)",
        "lineno": 192,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3948,
        "code": "56 mintedAmount) pub",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/24/0xfce82fdde8e7f0bd7843f003b19ac04063462239.sol",
        "function": "approve(address,uint256,bytes)",
        "lineno": 201,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7038,
        "code": "}\n\n  /**\n  * @de",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xfce82fdde8e7f0bd7843f003b19ac04063462239.sol",
        "function": "burn(uint256)",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8037,
        "code": "}\n\ncont",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tokenRecipient_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x79c6506800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mintToken(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xfce82fdde8e7f0bd7843f003b19ac04063462239.sol",
        "function": "mintToken(address,uint256)",
        "lineno": 53,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8050,
        "code": "kenERC20 {\n    ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8f0225b2117ff5a5dcbc4dee6008000c0000000000000000000005f762f800d0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xf942ce60671651a400010c44ca088832487011b21cfb014d3ed1638087e7c90f\ncalldata_tokenRecipient_32 + 4: 0x20e3a66450f68dd7f300142087a72cbbab6614fc5efb85ed36dd3af6f6f5f55b\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xfce82fdde8e7f0bd7843f003b19ac04063462239.sol",
        "function": "transfer(address,uint256)",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}