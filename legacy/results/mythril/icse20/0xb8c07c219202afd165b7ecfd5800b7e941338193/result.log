{"error": null, "issues": [{"address": 528, "code": "is);\n        return GlobalToken(gcf).transfer(owner, amount);\n    }\n    \n    event userWalletTransferEther(address indexed _from, address indexed _to, uint256 _ethersValue);\n    function transferEther() onlyOwner returns (bool) {\n\t\tuint256 amount = this.balance;\n        owner.transfer(amount);\n        userWalletTransferEther(this,owner,amount);\n        return true;\n    }\n    \n    f", "debug": "calldata_UserWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UserWallet_0: 0x7e274f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `Reederem(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 499, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1313, "code": "remed = isReederemed(peri", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1484\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "fallback", "lineno": 490, "title": "Multiple Calls", "type": "Information"}, {"address": 1484, "code": "_isReederemed) {\n\t\t\t", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "fallback", "lineno": 491, "title": "Message call to external contract", "type": "Informational"}, {"address": 1484, "code": "_isReederemed) {\n\t\t\t", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1678\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "deposit(uint256)", "lineno": 491, "title": "Multiple Calls", "type": "Information"}, {"address": 1678, "code": "eriod.sub(1));\n\t\t\tisRe", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "deposit(uint256)", "lineno": 492, "title": "Message call to external contract", "type": "Informational"}, {"address": 1783, "code": "st Place Ltd.\nprag", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1678: 0x1000000000000000000000000000000000000000000000000000000\nstorage_keccac_retval_1678: 0x0\nreturndatasize: 0x20\nretval_1484: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1313: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_UserWallet: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2159, "code": "i < investedPeriods.length; i++)", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "kill()", "lineno": 513, "title": "Message call to external contract", "type": "Informational"}, {"address": 2159, "code": "i < investedPeriods.length; i++)", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5336\nCall at address: 2450\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "kill()", "lineno": 513, "title": "Multiple Calls", "type": "Information"}, {"address": 2450, "code": "iod = investedPeriods[i];\n            fu", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "kill()", "lineno": 514, "title": "Message call to external contract", "type": "Informational"}, {"address": 2450, "code": "iod = investedPeriods[i];\n            fu", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5336\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "kill()", "lineno": 514, "title": "Multiple Calls", "type": "Information"}, {"address": 2967, "code": "kill() onlyOwner {\n\t\ttra", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "claimTokens()", "lineno": 534, "title": "Message call to external contract", "type": "Informational"}, {"address": 2967, "code": "kill() onlyOwner {\n\t\ttra", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2967\nCall at address: 2967\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "claimTokens()", "lineno": 534, "title": "Multiple Calls", "type": "Information"}, {"address": 3345, "code": "em[_per];\n\t}\n}", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "claimEthers()", "lineno": 545, "title": "Message call to external contract", "type": "Informational"}, {"address": 3345, "code": "em[_per];\n\t}\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3345\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "claimEthers()", "lineno": 545, "title": "Multiple Calls", "type": "Information"}, {"address": 3777, "code": " indexed _from, address in", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 503, "title": "Message call to external contract", "type": "Informational"}, {"address": 3777, "code": " indexed _from, address in", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3971\n", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 503, "title": "Multiple Calls", "type": "Information"}, {"address": 3971, "code": "lue);\n    function tra", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 503, "title": "Message call to external contract", "type": "Informational"}, {"address": 4473, "code": " onlyOwner returns (uint256 _Pri", "debug": "The exception is triggered under the following conditions:\n\ncalldata_UserWallet_4: 0x0\nstorage_3: 0x0\ncalldata_UserWallet_0: 0xab8f195700000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "_function_0xab8f1957", "lineno": 456, "title": "Exception state", "type": "Informational"}, {"address": 4725, "code": "sInvest(period);\n\t\tif(", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "getActualPeriod()", "lineno": 478, "title": "Message call to external contract", "type": "Informational"}, {"address": 5039, "code": "Amount);\n       ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "getPrices()", "lineno": 475, "title": "Message call to external contract", "type": "Informational"}, {"address": 5114, "code": "\treturn fund.getPrices();\n\t}\n\t\n\t", "debug": "The exception is triggered under the following conditions:\n\ncalldata_UserWallet_4: 0x0\nstorage_4: 0x0\ncalldata_UserWallet_0: 0xc508d8f200000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "_function_0xc508d8f2", "lineno": 457, "title": "Exception state", "type": "Informational"}, {"address": 5336, "code": "iod = reederemPeriods[", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transferEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "transferEther()", "lineno": 523, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5885, "code": "  if(has", "debug": "calldata_UserWallet_4 + calldata_UserWallet_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UserWallet_0: 0x7e274f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `Reederem(string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 410, "title": "Integer Underflow", "type": "Warning"}, {"address": 6080, "code": "   totNu", "debug": "calldata_UserWallet_4 + calldata_UserWallet_4: 0x1\ncalldata_UserWallet_cpy: 0x3000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UserWallet_0: 0x7e274f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `Reederem(string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 417, "title": "Integer Underflow", "type": "Warning"}, {"address": 6150, "code": "    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_UserWallet_4 + calldata_UserWallet_4: 0x1\ncalldata_UserWallet_cpy: 0x2e00000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UserWallet_0: 0x7e274f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_UserWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "Reederem(string)", "lineno": 427, "title": "Exception state", "type": "Informational"}, {"address": 6444, "code": "nd.contractVersion() == 300201712010000);\n\t\t\n        gcf = GlobalCryptoFund(_token);\n        require(gcf.contractVersion() == 200201712010000);\n    }\n\t\n    function getPrices() onlyOwner returns (uint256 _Price) {\n\t\treturn fund.getPrices();\n\t}\n\t\n\tfunction getActualPeriod() onlyOwner returns (uint256) {\n\t\tuint256 period = fund.getActualPeriod();\n\t\treturn period.sub(1);\n\t}\n\t\n\tevent TokensSold(uint256 recivedEthers);\n    function() payable {\n        if(msg.sender == address(fund)) {\n            TokensSold(msg.value);\n        } else {\n            deposit(msg.value);\n        }\n    }\n\t\n    function deposit(uint256 _WeiAmount) payable returns (bool) {\n        fund.transfer(_WeiAmount);\n        fund.buy(_WeiAmount);\n\t\tuint256 period = fund.getActualPeriod();\n\t\tbool _isInvested = isInvest(period);\n\t\tif(!_isInvested) {\n\t\t\tinvestedPeriods.push(period.sub(1));\n\t\t\tisInvested[period] = true;\n\t\t}\n        return true;\n    }\n    \n    function Reederem(string _amount) onlyOwner returns (bool) {\n\t\tuint256 amount = _amount.stringToUint();\n        gcf.transfer(fund, amount);\n        uint256 period = fund.getActualPeriod();\n\t\tbool _isReederemed = isReederemed(period);\n\t\tif(!_isReederemed) {\n\t\t\treederemPeriods.push(period.sub(1));\n\t\t\tisReederem[period] = true;\n\t\t}\n        return fund.Reederem(amount);\n    }\n    \n    function transferTokens() onlyOwner returns (bool) {\n\t\tuint256 amount = GlobalToken(gcf).balanceOf(this);\n        return GlobalToken(gcf).transfer(owner, amount);\n    }\n    \n    event userWalletTransferEther(address indexed _from, address indexed _to, uint256 _ethersValue);\n    function transferEther() onlyOwner returns (bool) {\n\t\tuint256 amount = this.balance;\n        owner.transfer(amount);\n        userWalletTransferEther(this,owner,amount);\n        return true;\n    }\n    \n    function claimTokens() onlyOwner {\n        uint256 period;\n        for(uint256 i = 0; i < investedPeriods.length; i++) {\n            period = investedPeriods[i];\n            fund.claimTokens(period);\n        }\n        investedPeriods.length = 0;\n    }\n\n    function claimEthers() onlyOwner {\n        uint256 period;\n        for(uint256 i = 0; i < reederemPeriods.length; i++) {\n            period = reederemPeriods[i];\n            fund.claimEthers(period);\n        }\n        reederemPeriods.length = 0;\n    }\n  \n    function contractVersion() constant returns(uint256) {\n        /*  contractVersion identifies as 400YYYYMMDDHHMM */\n        return 400201712010000;\n    }\n    \n    function kill() onlyOwner {\n\t\ttransferTokens();\n\t\ttransferEther();\n        selfdestruct(owner);\n    }\n\t\n\tfunction isInvest(uint256 _per) internal returns (bool) {\n\t\treturn isInvested[_per];\n\t}\n\t\n\tfunction isReederemed(uint256 _per) internal returns (bool) {\n\t\treturn isReederem[_per];\n\t}\n}", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/16/0xb8c07c219202afd165b7ecfd5800b7e941338193.sol", "function": "claimEthers()", "lineno": 450, "title": "State change after external call", "type": "Warning"}], "success": true}