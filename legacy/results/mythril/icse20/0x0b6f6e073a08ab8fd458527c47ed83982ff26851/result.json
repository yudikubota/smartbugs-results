{
  "contract": "0x0b6f6e073a08ab8fd458527c47ed83982ff26851",
  "tool": "mythril",
  "start": 1563782666.0769272,
  "end": 1563783040.2797103,
  "duration": 374.20278310775757,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 224,
        "code": "0 minutes, \"Vote",
        "debug": "timestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdb0\ncalldata_VoteFactory_0: 0x600000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 744,
        "code": "on) onlyOwner {\n        // only admin is able to start vote with arbitrary duration\n        startNewVote(duration, description);\n    }\n    \n    function startNewVote(uint duration, stri",
        "debug": "calldata_VoteFactory_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 49,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1532,
        "code": "iption;\n      ",
        "debug": "storage_2: 0x1aa\ntimestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa\ncalldata_VoteFactory_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "fallback",
        "lineno": 59,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1625,
        "code": "ss voteSen",
        "debug": "storage_keccac_storage_1: 0x41\nkeccac_keccac_storage_1: 0x9000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncalldata_VoteFactory_4 + calldata_VoteFactory_32 + 4: 0x0\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 63,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3502,
        "code": "    \n    function VoteFa",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function payOut(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "payOut()",
        "lineno": 35,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3502,
        "code": "    \n    function VoteFa",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "payOut()",
        "lineno": 35,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3659,
        "code": "ntract VoteFactory {\n    address public owner;\n    uint public numPolls;\n    uint public nextEndTime;\n    Vote public yesContract;\n    Vote public noContract;\n    mapping(uint => string) public voteDescription;\n    mapping(address => mapping(uint => bool)) public hasVoted;\n    mapping(uint => uint) public numVoters; // number of voters per round\n    mapping(uint => mapping(uint => address)) public voter; // [voteId][voterNumber] => address\n    mapping(uint => uint) public yesCount; // number of yes for a given round\n    mapping(uint => uint) public noCount;\n    \n    event transferredOwner(address newOwner);\n    event startedNewVote(address initiator, uint duration, string description, uint voteId);\n    event voted(address voter, bool isYes);\n    \n    modifier onlyOwner {\n        if (msg.sender != owner)\n            throw;\n        _;\n    }\n    \n    function transferOwner(address newOwner) onlyOwner {\n        owner = newOwner;\n        transferredOwner(newOwner);\n    }\n\n    function payOut() onlyOwner {\n        // just in case we accumulate a balance here, we have to be able to retrieve it\n        owner.send(this.balance);\n    }\n    \n    function VoteFactory() {\n        owner = msg.sender;\n        // constructor deploys yes and no contract\n        yesContract = new Vote();\n        noContract = new Vote();\n    }\n\n    function() payable {\n        // default function starts new poll if previous poll is over for at least 10 minutes\n        if (nextEndTime < now + 10 minutes)\n            startNewVote(10 minutes, \"Vote on tax reimbursements\");\n    }\n    \n    function newVote(uint duration, string description) onlyOwner {\n        // only admin is able to start vote with arbitrary duration\n        startNewVote(duration, description);\n    }\n    \n    function startNewVote(uint duration, string description) internal {\n        // do not allow to start new vote if there's still something ongoing\n        if (now <= nextEndTime)\n            throw;\n        nextEndTime = now + duration;\n        voteDescription[numPolls] = description;\n        startedNewVote(msg.sender, duration, description, ++numPolls);\n    }\n    \n    function vote(bool isYes, address voteSender) {\n        \n        // voting should just be able via voting contract (use them as SWIS contracts)\n        if (msg.sender != address(yesContract) && msg.sender != address(noContract))\n            throw;\n\n        // throw if time is over\n        if (now > nextEndTime)\n            throw;\n            \n        // throw if sender has already voted before\n        if (hasVoted[voteSender][numPolls])\n            throw;\n        \n        hasVoted[voteSender][numPolls] = true;\n        voter[numPolls][numVoters[numPolls]++] = voteSender;\n        \n        if (isYes)\n            yesCount[numPolls]++;\n        else\n            noCount[numPolls]++;\n\n        voted(voteSender, isYes);\n    }\n}\n\ncontract Vote {\n    VoteFactory public myVoteFactory;\n\n    function Vote() {\n       ",
        "debug": "storage_keccac_storage_1: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_keccac_storage_1: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2: 0x0\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3688,
        "code": "ntract VoteFactory {\n    address public owner;\n    uint public numPolls;\n    uint public nextEndTime;\n    Vote public yesContract;\n    Vote public noContract;\n    mapping(uint => string) public voteDescription;\n    mapping(address => mapping(uint => bool)) public hasVoted;\n    mapping(uint => uint) public numVoters; // number of voters per round\n    mapping(uint => mapping(uint => address)) public voter; // [voteId][voterNumber] => address\n    mapping(uint => uint) public yesCount; // number of yes for a given round\n    mapping(uint => uint) public noCount;\n    \n    event transferredOwner(address newOwner);\n    event startedNewVote(address initiator, uint duration, string description, uint voteId);\n    event voted(address voter, bool isYes);\n    \n    modifier onlyOwner {\n        if (msg.sender != owner)\n            throw;\n        _;\n    }\n    \n    function transferOwner(address newOwner) onlyOwner {\n        owner = newOwner;\n        transferredOwner(newOwner);\n    }\n\n    function payOut() onlyOwner {\n        // just in case we accumulate a balance here, we have to be able to retrieve it\n        owner.send(this.balance);\n    }\n    \n    function VoteFactory() {\n        owner = msg.sender;\n        // constructor deploys yes and no contract\n        yesContract = new Vote();\n        noContract = new Vote();\n    }\n\n    function() payable {\n        // default function starts new poll if previous poll is over for at least 10 minutes\n        if (nextEndTime < now + 10 minutes)\n            startNewVote(10 minutes, \"Vote on tax reimbursements\");\n    }\n    \n    function newVote(uint duration, string description) onlyOwner {\n        // only admin is able to start vote with arbitrary duration\n        startNewVote(duration, description);\n    }\n    \n    function startNewVote(uint duration, string description) internal {\n        // do not allow to start new vote if there's still something ongoing\n        if (now <= nextEndTime)\n            throw;\n        nextEndTime = now + duration;\n        voteDescription[numPolls] = description;\n        startedNewVote(msg.sender, duration, description, ++numPolls);\n    }\n    \n    function vote(bool isYes, address voteSender) {\n        \n        // voting should just be able via voting contract (use them as SWIS contracts)\n        if (msg.sender != address(yesContract) && msg.sender != address(noContract))\n            throw;\n\n        // throw if time is over\n        if (now > nextEndTime)\n            throw;\n            \n        // throw if sender has already voted before\n        if (hasVoted[voteSender][numPolls])\n            throw;\n        \n        hasVoted[voteSender][numPolls] = true;\n        voter[numPolls][numVoters[numPolls]++] = voteSender;\n        \n        if (isYes)\n            yesCount[numPolls]++;\n        else\n            noCount[numPolls]++;\n\n        voted(voteSender, isYes);\n    }\n}\n\ncontract Vote {\n    VoteFactory public myVoteFactory;\n\n    function Vote() {\n       ",
        "debug": "calldata_VoteFactory_4 + calldata_VoteFactory_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3702,
        "code": "ntract VoteFactory {\n    address public owner;\n    uint public numPolls;\n    uint public nextEndTime;\n    Vote public yesContract;\n    Vote public noContract;\n    mapping(uint => string) public voteDescription;\n    mapping(address => mapping(uint => bool)) public hasVoted;\n    mapping(uint => uint) public numVoters; // number of voters per round\n    mapping(uint => mapping(uint => address)) public voter; // [voteId][voterNumber] => address\n    mapping(uint => uint) public yesCount; // number of yes for a given round\n    mapping(uint => uint) public noCount;\n    \n    event transferredOwner(address newOwner);\n    event startedNewVote(address initiator, uint duration, string description, uint voteId);\n    event voted(address voter, bool isYes);\n    \n    modifier onlyOwner {\n        if (msg.sender != owner)\n            throw;\n        _;\n    }\n    \n    function transferOwner(address newOwner) onlyOwner {\n        owner = newOwner;\n        transferredOwner(newOwner);\n    }\n\n    function payOut() onlyOwner {\n        // just in case we accumulate a balance here, we have to be able to retrieve it\n        owner.send(this.balance);\n    }\n    \n    function VoteFactory() {\n        owner = msg.sender;\n        // constructor deploys yes and no contract\n        yesContract = new Vote();\n        noContract = new Vote();\n    }\n\n    function() payable {\n        // default function starts new poll if previous poll is over for at least 10 minutes\n        if (nextEndTime < now + 10 minutes)\n            startNewVote(10 minutes, \"Vote on tax reimbursements\");\n    }\n    \n    function newVote(uint duration, string description) onlyOwner {\n        // only admin is able to start vote with arbitrary duration\n        startNewVote(duration, description);\n    }\n    \n    function startNewVote(uint duration, string description) internal {\n        // do not allow to start new vote if there's still something ongoing\n        if (now <= nextEndTime)\n            throw;\n        nextEndTime = now + duration;\n        voteDescription[numPolls] = description;\n        startedNewVote(msg.sender, duration, description, ++numPolls);\n    }\n    \n    function vote(bool isYes, address voteSender) {\n        \n        // voting should just be able via voting contract (use them as SWIS contracts)\n        if (msg.sender != address(yesContract) && msg.sender != address(noContract))\n            throw;\n\n        // throw if time is over\n        if (now > nextEndTime)\n            throw;\n            \n        // throw if sender has already voted before\n        if (hasVoted[voteSender][numPolls])\n            throw;\n        \n        hasVoted[voteSender][numPolls] = true;\n        voter[numPolls][numVoters[numPolls]++] = voteSender;\n        \n        if (isYes)\n            yesCount[numPolls]++;\n        else\n            noCount[numPolls]++;\n\n        voted(voteSender, isYes);\n    }\n}\n\ncontract Vote {\n    VoteFactory public myVoteFactory;\n\n    function Vote() {\n       ",
        "debug": "calldata_VoteFactory_4 + calldata_VoteFactory_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2: 0x0\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3724,
        "code": "ntract VoteFactory {\n    address public owner;\n    uint public numPolls;\n    uint public nextEndTime;\n    Vote public yesContract;\n    Vote public noContract;\n    mapping(uint => string) public voteDescription;\n    mapping(address => mapping(uint => bool)) public hasVoted;\n    mapping(uint => uint) public numVoters; // number of voters per round\n    mapping(uint => mapping(uint => address)) public voter; // [voteId][voterNumber] => address\n    mapping(uint => uint) public yesCount; // number of yes for a given round\n    mapping(uint => uint) public noCount;\n    \n    event transferredOwner(address newOwner);\n    event startedNewVote(address initiator, uint duration, string description, uint voteId);\n    event voted(address voter, bool isYes);\n    \n    modifier onlyOwner {\n        if (msg.sender != owner)\n            throw;\n        _;\n    }\n    \n    function transferOwner(address newOwner) onlyOwner {\n        owner = newOwner;\n        transferredOwner(newOwner);\n    }\n\n    function payOut() onlyOwner {\n        // just in case we accumulate a balance here, we have to be able to retrieve it\n        owner.send(this.balance);\n    }\n    \n    function VoteFactory() {\n        owner = msg.sender;\n        // constructor deploys yes and no contract\n        yesContract = new Vote();\n        noContract = new Vote();\n    }\n\n    function() payable {\n        // default function starts new poll if previous poll is over for at least 10 minutes\n        if (nextEndTime < now + 10 minutes)\n            startNewVote(10 minutes, \"Vote on tax reimbursements\");\n    }\n    \n    function newVote(uint duration, string description) onlyOwner {\n        // only admin is able to start vote with arbitrary duration\n        startNewVote(duration, description);\n    }\n    \n    function startNewVote(uint duration, string description) internal {\n        // do not allow to start new vote if there's still something ongoing\n        if (now <= nextEndTime)\n            throw;\n        nextEndTime = now + duration;\n        voteDescription[numPolls] = description;\n        startedNewVote(msg.sender, duration, description, ++numPolls);\n    }\n    \n    function vote(bool isYes, address voteSender) {\n        \n        // voting should just be able via voting contract (use them as SWIS contracts)\n        if (msg.sender != address(yesContract) && msg.sender != address(noContract))\n            throw;\n\n        // throw if time is over\n        if (now > nextEndTime)\n            throw;\n            \n        // throw if sender has already voted before\n        if (hasVoted[voteSender][numPolls])\n            throw;\n        \n        hasVoted[voteSender][numPolls] = true;\n        voter[numPolls][numVoters[numPolls]++] = voteSender;\n        \n        if (isYes)\n            yesCount[numPolls]++;\n        else\n            noCount[numPolls]++;\n\n        voted(voteSender, isYes);\n    }\n}\n\ncontract Vote {\n    VoteFactory public myVoteFactory;\n\n    function Vote() {\n       ",
        "debug": "calldata_VoteFactory_4 + calldata_VoteFactory_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_keccac_storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ntimestamp: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VoteFactory_0: 0x54f9cbb300000000000000000000000000000000000000000000000000000000\ncalldatasize_VoteFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVote(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/48/0x0b6f6e073a08ab8fd458527c47ed83982ff26851.sol",
        "function": "newVote(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}