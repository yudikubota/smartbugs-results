{
  "contract": "0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e",
  "tool": "mythril",
  "start": 1563317513.4630764,
  "end": 1563317543.7756078,
  "duration": 30.31253147125244,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 767,
        "code": "[] public shares;\n  boo",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Share_4: 0x0\nstorage_1: 0x0\ncalldata_Share_0: 0x57a858fc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Share: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e.sol",
        "function": "_function_0x57a858fc",
        "lineno": 8,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1587,
        "code": "\n    } else {\n   ",
        "debug": "storage_0: 0x0\ncaller: 0x0\ncalldata_Share_0: 0xcb92042c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Share: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeShare(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e.sol",
        "function": "removeShare(address)",
        "lineno": 55,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 1619,
        "code": "length - 1;\n      return;",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Share_0: 0xcb92042c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Share: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e.sol",
        "function": "removeShare(address)",
        "lineno": 58,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2115,
        "code": "act Share {\n  address public owner;\n  address[] public shares;\n  bool public pause;\n  mapping (address => uint256) public holds;\n\n  function Share() public {\n    owner = msg.sender;\n    shares.push(owner);\n    pause = false;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier whenNotPaused() {\n    require(!pause);\n    _;\n  }\n\n  function pause() public onlyOwner {\n    pause = true;\n  }\n\n  function unpause() public onlyOwner {\n    pause = false;\n  }\n\n  function addShare(address _share) public onlyOwner {\n    for (uint i = 0; i < shares.length; i ++) {\n      if (shares[i] == _share) {\n        return;\n      }\n    }\n    shares.push(_share);\n  }\n\n  function removeShare(address _share) public onlyOwner {\n    uint i = 0;\n    for (; i < shares.length; i ++) {\n      if (shares[i] == _share) {\n        break;\n      }\n    }\n\n    if (i > shares.length - 1) {\n      //not found\n      return;\n    } else {\n      shares[i] = shares[shares.length - 1];\n      shares.length = shares.length - 1;\n      return;\n    }\n  }\n\n  function split(uint256 value) internal {\n    uint256 each = value / shares.length;\n\n    for (uint i = 0; i < shares.length; i ++) {\n      holds[shares[i]] += each;\n    }\n\n    holds[owner] += value - each * shares.length;\n    return;\n  }\n\n  function withdrawal() public whenNotPaused {\n    if (holds[msg.sender] > 0) {\n      uint256 v = holds[msg.sender];\n      holds[msg.sender] = 0;\n      msg.sender.transfer(v);\n    }\n  }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address ",
        "debug": "storage_1: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffe000000000000\ncalldata_Share_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Share_0: 0xcb92042c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Share: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeShare(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e.sol",
        "function": "removeShare(address)",
        "lineno": 6,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2117,
        "code": "act Share {\n  address public owner;\n  address[] public shares;\n  bool public pause;\n  mapping (address => uint256) public holds;\n\n  function Share() public {\n    owner = msg.sender;\n    shares.push(owner);\n    pause = false;\n  }\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier whenNotPaused() {\n    require(!pause);\n    _;\n  }\n\n  function pause() public onlyOwner {\n    pause = true;\n  }\n\n  function unpause() public onlyOwner {\n    pause = false;\n  }\n\n  function addShare(address _share) public onlyOwner {\n    for (uint i = 0; i < shares.length; i ++) {\n      if (shares[i] == _share) {\n        return;\n      }\n    }\n    shares.push(_share);\n  }\n\n  function removeShare(address _share) public onlyOwner {\n    uint i = 0;\n    for (; i < shares.length; i ++) {\n      if (shares[i] == _share) {\n        break;\n      }\n    }\n\n    if (i > shares.length - 1) {\n      //not found\n      return;\n    } else {\n      shares[i] = shares[shares.length - 1];\n      shares.length = shares.length - 1;\n      return;\n    }\n  }\n\n  function split(uint256 value) internal {\n    uint256 each = value / shares.length;\n\n    for (uint i = 0; i < shares.length; i ++) {\n      holds[shares[i]] += each;\n    }\n\n    holds[owner] += value - each * shares.length;\n    return;\n  }\n\n  function withdrawal() public whenNotPaused {\n    if (holds[msg.sender] > 0) {\n      uint256 v = holds[msg.sender];\n      holds[msg.sender] = 0;\n      msg.sender.transfer(v);\n    }\n  }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address ",
        "debug": "storage_1: 0x7ffffffffffff3e4fffffffffffffffffffffffffffffffffffffffffffffffd\ncalldata_Share_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Share_0: 0xcb92042c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Share: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeShare(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x22260d1f2cb61a371bff2625c4620fc5a67f0a8e.sol",
        "function": "removeShare(address)",
        "lineno": 6,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}