{"error": null, "issues": [{"address": 136, "code": "s token, address[] _contributors, uint256[] _balances) public {\n        ERC20 erc20token = ERC20(token);\n        uint8 i =0;\n        require(erc20token.allowance(msg.sender, this) > 0);\n        for(i; i<_contributors.length;i++){\n            erc20token.transferFrom(msg.sender, _contributors[i], _balances[i]);\n        }\n    }\n}", "debug": "calldata_ERC20Sender_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Sender_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Sender: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multisend(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 26, "title": "Integer Overflow ", "type": "Warning"}, {"address": 493, "code": "der, this) > 0);\n        for(i; i<_con", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 29, "title": "Message call to external contract", "type": "Warning"}, {"address": 493, "code": "der, this) > 0);\n        for(i; i<_con", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 844\nCall at address: 844\n", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 29, "title": "Multiple Calls", "type": "Information"}, {"address": 646, "code": "\n}", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20Sender_4 + calldata_ERC20Sender_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*calldata_ERC20Sender_4 + calldata_ERC20Sender_32 + 4 +\n32 +\n32*calldata_ERC20Sender_4 + calldata_ERC20Sender_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_493: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20Sender_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Sender: 0x4\nmem_128 +\n32 +\n32*calldata_ERC20Sender_4 + calldata_ERC20Sender_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 844, "code": "nder, _contributors[i], _balances[i]);\n        }\n    }\n}", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 31, "title": "Message call to external contract", "type": "Warning"}, {"address": 844, "code": "nder, _contributors[i], _balances[i]);\n        }\n    }\n}", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 844\n", "filename": "/unique_chucks/31/0xfaf8cbe7ae1bb6d2986ba94a375458d325832bd8.sol", "function": "multisend(address,address[],uint256[])", "lineno": 31, "title": "Multiple Calls", "type": "Information"}], "success": true}