{"error": null, "issues": [{"address": 421, "code": "ge;\n        }\n    }\n\n    function togglePause(bool paused) public {\n        if (msg.sender == publisher) {\n            isPaused = paused;\n     ", "debug": "calldata_TwoCoinsOneMoonGame_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "putMessage(string)", "lineno": 123, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2001, "code": "kenCount, betAmountETH);\n\n        j", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "betRedCoin(uint256)", "lineno": 164, "title": "Message call to external contract", "type": "Informational"}, {"address": 2726, "code": " depositBalance(uint256 winner", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "withdraw()", "lineno": 187, "title": "Message call to external contract", "type": "Informational"}, {"address": 2726, "code": " depositBalance(uint256 winner", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2915\n", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "withdraw()", "lineno": 187, "title": "Multiple Calls", "type": "Information"}, {"address": 2726, "code": " depositBalance(uint256 winner", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "withdraw()", "lineno": 187, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2866, "code": "or (i = startBetBlue; i", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "withdraw()", "lineno": 190, "title": "State change after external call", "type": "Warning"}, {"address": 3192, "code": "arketCapBlue, tokenCount, betAmount", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "betBlueCoin(uint256)", "lineno": 148, "title": "Message call to external contract", "type": "Informational"}, {"address": 3690, "code": "address => uint) publi", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwoCoinsOneMoonGame_4: 0x0\nstorage_14: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0xa7a38f0b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "_function_0xa7a38f0b", "lineno": 41, "title": "Exception state", "type": "Informational"}, {"address": 3771, "code": "nt[] public history;\n\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwoCoinsOneMoonGame_4: 0x0\nstorage_13: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0xc55f2b1d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "_function_0xc55f2b1d", "lineno": 39, "title": "Exception state", "type": "Informational"}, {"address": 6126, "code": "ract TwoCoinsOneMoonGame {\n    struct Bettor {\n        address account;\n        uint256 amount;\n        uint256 amountEth;\n    }\n\n    struct Event {\n        uint256 winner; //0 - blue; 1 - red\n        uint256 newMoonLevel;\n        uint256 block;\n        uint256 blueCap;\n        uint256 redCap;\n    }\n\n    uint256 public lastLevelChangeBlock;\n    uint256 public lastEventId;\n    uint256 public lastActionBlock;\n    uint256 public moonLevel;\n\n    uint256 public marketCapBlue;\n    uint256 public marketCapRed;\n\n    uint256 public jackpotBlue;\n    uint256 public jackpotRed;\n    \n    uint256 public startBetBlue;\n    uint256 public endBetBlue;\n    uint256 public startBetRed;\n    uint256 public endBetRed;\n\n    Bettor[] public bettorsBlue;\n    Bettor[] public bettorsRed;\n\n    Event[] public history;\n\n    mapping (address => uint) public balance;\n\n    address private feeCollector;\n\n    DiscountToken discountToken;\n\n    string public publisherMessage;\n    address publisher;\n\n    bool isPaused;\n\n    constructor() public {\n        marketCapBlue = 0;\n        marketCapRed = 0;\n\n        jackpotBlue = 0;\n        jackpotRed = 0;\n        \n        startBetBlue = 0;\n        startBetRed = 0;\n\n        endBetBlue = 0;\n        endBetRed = 0;\n\n        publisher = msg.sender;\n        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\n        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\n        lastLevelChangeBlock = block.number;\n\n        lastActionBlock = block.number;\n        moonLevel = 5 * (uint256(10) ** 17);\n        isPaused = false;\n    }\n\n    function getBetAmountGNC(uint256 marketCap, uint256 tokenCount, uint256 betAmount) private view returns (uint256) {\n        require (msg.value >= 100 finney);\n\n        uint256 betAmountGNC = 0;\n        if (marketCap < 1 * moonLevel / 100) {\n            betAmountGNC += 10 * betAmount;\n        }\n        else if (marketCap < 2 * moonLevel / 100) {\n            betAmountGNC += 8 * betAmount;\n        }\n        else if (marketCap < 5 * moonLevel / 100) {\n            betAmountGNC += 5 * betAmount;\n        }\n        else if (marketCap < 10 * moonLevel / 100) {\n            betAmountGNC += 4 * betAmount;\n        }\n        else if (marketCap < 20 * moonLevel / 100) {\n            betAmountGNC += 3 * betAmount;\n        }\n        else if (marketCap < 33 * moonLevel / 100) {\n            betAmountGNC += 2 * betAmount;\n        }\n        else {\n            betAmountGNC += betAmount;\n        }\n\n        if (tokenCount != 0) {\n            if (tokenCount >= 2 && tokenCount <= 4) {\n                betAmountGNC = betAmountGNC *  105 / 100;\n            }\n            if (tokenCount >= 5 && tokenCount <= 9) {\n                betAmountGNC = betAmountGNC *  115 / 100;\n            }\n            if (tokenCount >= 10 && tokenCount <= 20) {\n                betAmountGNC = betAmountGNC *  135 / 100;\n            }\n            if (tokenCount >= 21 && tokenCount <= 41) {\n                betAmountGNC = betAmountGNC *  170 / 100;\n            }\n            if (tokenCount >= 42) {\n                betAmountGNC = betAmountGNC *  200 / 100;\n            }\n        }\n        return betAmountGNC;\n    }\n\n    function putMessage(string message) public {\n        if (msg.sender == publisher) {\n            publisherMessage = message;\n        }\n    }\n\n    function togglePause(bool paused) public {\n        if (msg.sender == publisher) {\n            isPaused = paused;\n        }\n    }\n\n    function getBetAmountETH(uint256 tokenCount) private returns (uint256) {\n        uint256 betAmount = msg.value;\n        if (tokenCount == 0) {\n            uint256 comission = betAmount * 38 / 1000;\n            betAmount -= comission;\n            balance[feeCollector] += comission;\n        }\n        return betAmount;\n    }\n\n    function betBlueCoin(uint256 actionBlock) public payable {\n        require (!isPaused || marketCapBlue > 0 || actionBlock == lastActionBlock);\n\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\n\n        jackpotBlue += betAmountETH;\n        marketCapBlue += betAmountGNC;\n        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth:betAmountETH}));\n        endBetBlue = bettorsBlue.length;\n        lastActionBlock = block.number;\n\n        checkMoon();\n    }\n\n    function betRedCoin(uint256 actionBlock) public payable {\n        require (!isPaused || marketCapRed > 0 || actionBlock == lastActionBlock);\n\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\n\n        jackpotRed += betAmountETH;\n        marketCapRed += betAmountGNC;\n        bettorsRed.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth: betAmountETH}));\n        endBetRed = bettorsRed.length;\n        lastActionBlock = block.number;\n\n        checkMoon();\n    }\n\n    function withdraw() public {\n        if (balance[feeCollector] != 0) {\n            uint256 fee = balance[feeCollector];\n            balance[feeCollector] = 0;\n            feeCollector.call.value(fee)();\n        }\n\n        uint256 amount = balance[msg.sender];\n        balance[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function depositBalance(uint256 winner) private {\n        uint256 i;\n        if (winner == 0) {\n            for (i = startBetBlue; i < bettorsBlue.length; i++) {\n                balance[bettorsBlue[i].account] += bettorsBlue[i].amountEth;\n                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * jackpotRed / 10**18;\n            }\n        }\n        else {\n            for (i = startBetRed; i < bettorsRed.length; i++) {\n                balance[bettorsRed[i].account] += bettorsRed[i].amountEth;\n                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * jackpotBlue / 10**18;\n            }\n        }\n    }\n\n    function addEvent(uint256 winner) private {\n        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\n        lastEventId = history.length - 1;\n        lastLevelChangeBlock = block.number;\n    }\n\n    function burstBubble() private {\n        uint256 winner;\n        if (marketCapBlue == marketCapRed) {\n            winner = block.number % 2;\n        }\n        else if (marketCapBlue > marketCapRed) {\n            winner = 0;\n        }\n        else {\n            winner = 1;\n        }\n        depositBalance(winner);\n        moonLevel = moonLevel * 2;\n        addEvent(winner);\n\n        marketCapBlue = 0;\n        marketCapRed = 0;\n\n        jackpotBlue = 0;\n        jackpotRed = 0;\n        \n        startBetBlue = bettorsBlue.length;\n        startBetRed = bettorsRed.length;\n    }\n\n    function checkMoon() private {\n        if (block.number - lastLevelChangeBlock > 2880) {\n           moonLevel = moonLevel / 2;\n           addEvent(2);\n        }\n        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\n            burstBubble();\n        }\n    }\n}", "debug": "calldata_TwoCoinsOneMoonGame_4 + calldata_TwoCoinsOneMoonGame_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_19: 0x0\ncaller: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "putMessage(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6140, "code": "ract TwoCoinsOneMoonGame {\n    struct Bettor {\n        address account;\n        uint256 amount;\n        uint256 amountEth;\n    }\n\n    struct Event {\n        uint256 winner; //0 - blue; 1 - red\n        uint256 newMoonLevel;\n        uint256 block;\n        uint256 blueCap;\n        uint256 redCap;\n    }\n\n    uint256 public lastLevelChangeBlock;\n    uint256 public lastEventId;\n    uint256 public lastActionBlock;\n    uint256 public moonLevel;\n\n    uint256 public marketCapBlue;\n    uint256 public marketCapRed;\n\n    uint256 public jackpotBlue;\n    uint256 public jackpotRed;\n    \n    uint256 public startBetBlue;\n    uint256 public endBetBlue;\n    uint256 public startBetRed;\n    uint256 public endBetRed;\n\n    Bettor[] public bettorsBlue;\n    Bettor[] public bettorsRed;\n\n    Event[] public history;\n\n    mapping (address => uint) public balance;\n\n    address private feeCollector;\n\n    DiscountToken discountToken;\n\n    string public publisherMessage;\n    address publisher;\n\n    bool isPaused;\n\n    constructor() public {\n        marketCapBlue = 0;\n        marketCapRed = 0;\n\n        jackpotBlue = 0;\n        jackpotRed = 0;\n        \n        startBetBlue = 0;\n        startBetRed = 0;\n\n        endBetBlue = 0;\n        endBetRed = 0;\n\n        publisher = msg.sender;\n        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\n        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\n        lastLevelChangeBlock = block.number;\n\n        lastActionBlock = block.number;\n        moonLevel = 5 * (uint256(10) ** 17);\n        isPaused = false;\n    }\n\n    function getBetAmountGNC(uint256 marketCap, uint256 tokenCount, uint256 betAmount) private view returns (uint256) {\n        require (msg.value >= 100 finney);\n\n        uint256 betAmountGNC = 0;\n        if (marketCap < 1 * moonLevel / 100) {\n            betAmountGNC += 10 * betAmount;\n        }\n        else if (marketCap < 2 * moonLevel / 100) {\n            betAmountGNC += 8 * betAmount;\n        }\n        else if (marketCap < 5 * moonLevel / 100) {\n            betAmountGNC += 5 * betAmount;\n        }\n        else if (marketCap < 10 * moonLevel / 100) {\n            betAmountGNC += 4 * betAmount;\n        }\n        else if (marketCap < 20 * moonLevel / 100) {\n            betAmountGNC += 3 * betAmount;\n        }\n        else if (marketCap < 33 * moonLevel / 100) {\n            betAmountGNC += 2 * betAmount;\n        }\n        else {\n            betAmountGNC += betAmount;\n        }\n\n        if (tokenCount != 0) {\n            if (tokenCount >= 2 && tokenCount <= 4) {\n                betAmountGNC = betAmountGNC *  105 / 100;\n            }\n            if (tokenCount >= 5 && tokenCount <= 9) {\n                betAmountGNC = betAmountGNC *  115 / 100;\n            }\n            if (tokenCount >= 10 && tokenCount <= 20) {\n                betAmountGNC = betAmountGNC *  135 / 100;\n            }\n            if (tokenCount >= 21 && tokenCount <= 41) {\n                betAmountGNC = betAmountGNC *  170 / 100;\n            }\n            if (tokenCount >= 42) {\n                betAmountGNC = betAmountGNC *  200 / 100;\n            }\n        }\n        return betAmountGNC;\n    }\n\n    function putMessage(string message) public {\n        if (msg.sender == publisher) {\n            publisherMessage = message;\n        }\n    }\n\n    function togglePause(bool paused) public {\n        if (msg.sender == publisher) {\n            isPaused = paused;\n        }\n    }\n\n    function getBetAmountETH(uint256 tokenCount) private returns (uint256) {\n        uint256 betAmount = msg.value;\n        if (tokenCount == 0) {\n            uint256 comission = betAmount * 38 / 1000;\n            betAmount -= comission;\n            balance[feeCollector] += comission;\n        }\n        return betAmount;\n    }\n\n    function betBlueCoin(uint256 actionBlock) public payable {\n        require (!isPaused || marketCapBlue > 0 || actionBlock == lastActionBlock);\n\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\n\n        jackpotBlue += betAmountETH;\n        marketCapBlue += betAmountGNC;\n        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth:betAmountETH}));\n        endBetBlue = bettorsBlue.length;\n        lastActionBlock = block.number;\n\n        checkMoon();\n    }\n\n    function betRedCoin(uint256 actionBlock) public payable {\n        require (!isPaused || marketCapRed > 0 || actionBlock == lastActionBlock);\n\n        uint256 tokenCount = discountToken.balanceOf(msg.sender);\n        uint256 betAmountETH = getBetAmountETH(tokenCount);\n        uint256 betAmountGNC = getBetAmountGNC(marketCapBlue, tokenCount, betAmountETH);\n\n        jackpotRed += betAmountETH;\n        marketCapRed += betAmountGNC;\n        bettorsRed.push(Bettor({account:msg.sender, amount:betAmountGNC, amountEth: betAmountETH}));\n        endBetRed = bettorsRed.length;\n        lastActionBlock = block.number;\n\n        checkMoon();\n    }\n\n    function withdraw() public {\n        if (balance[feeCollector] != 0) {\n            uint256 fee = balance[feeCollector];\n            balance[feeCollector] = 0;\n            feeCollector.call.value(fee)();\n        }\n\n        uint256 amount = balance[msg.sender];\n        balance[msg.sender] = 0;\n        msg.sender.transfer(amount);\n    }\n\n    function depositBalance(uint256 winner) private {\n        uint256 i;\n        if (winner == 0) {\n            for (i = startBetBlue; i < bettorsBlue.length; i++) {\n                balance[bettorsBlue[i].account] += bettorsBlue[i].amountEth;\n                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * jackpotRed / 10**18;\n            }\n        }\n        else {\n            for (i = startBetRed; i < bettorsRed.length; i++) {\n                balance[bettorsRed[i].account] += bettorsRed[i].amountEth;\n                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * jackpotBlue / 10**18;\n            }\n        }\n    }\n\n    function addEvent(uint256 winner) private {\n        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\n        lastEventId = history.length - 1;\n        lastLevelChangeBlock = block.number;\n    }\n\n    function burstBubble() private {\n        uint256 winner;\n        if (marketCapBlue == marketCapRed) {\n            winner = block.number % 2;\n        }\n        else if (marketCapBlue > marketCapRed) {\n            winner = 0;\n        }\n        else {\n            winner = 1;\n        }\n        depositBalance(winner);\n        moonLevel = moonLevel * 2;\n        addEvent(winner);\n\n        marketCapBlue = 0;\n        marketCapRed = 0;\n\n        jackpotBlue = 0;\n        jackpotRed = 0;\n        \n        startBetBlue = bettorsBlue.length;\n        startBetRed = bettorsRed.length;\n    }\n\n    function checkMoon() private {\n        if (block.number - lastLevelChangeBlock > 2880) {\n           moonLevel = moonLevel / 2;\n           addEvent(2);\n        }\n        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\n            burstBubble();\n        }\n    }\n}", "debug": "calldata_TwoCoinsOneMoonGame_4 + calldata_TwoCoinsOneMoonGame_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_19: 0x0\ncaller: 0x0\ncalldata_TwoCoinsOneMoonGame_0: 0x26eda1ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TwoCoinsOneMoonGame: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putMessage(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x718f1892987a871fbe81462597e6dcd2900e127f.sol", "function": "putMessage(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}], "success": true}