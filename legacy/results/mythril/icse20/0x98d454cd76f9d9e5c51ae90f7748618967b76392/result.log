{"error": null, "issues": [{"address": 2042, "code": "lances[msg.sender] > 0);\n      migrate();\n      msg.sender.tr", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "migrate()", "lineno": 214, "title": "Message call to external contract", "type": "Informational"}, {"address": 2042, "code": "lances[msg.sender] > 0);\n      migrate();\n      msg.sender.tr", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 403\n", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "fallback", "lineno": 214, "title": "Multiple Calls", "type": "Information"}, {"address": 2042, "code": "lances[msg.sender] > 0);\n      migrate();\n      msg.sender.tr", "debug": "", "description": "A possible transaction order independence vulnerability exists in function migrate(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "migrate()", "lineno": 214, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5753, "code": "eturn a - b;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_UpgradeableToken_0: 0x8fd3ab8000000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeableToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "migrate()", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 5771, "code": "& c >", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeableToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UpgradeableToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_UpgradeableToken_0: 0xac3cb72c00000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeableToken: 0x44\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "addApproval(address,uint256)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5796, "code": "   return c;\n  }\n\n}\n\n/**", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeableToken_4: 0x1\ncalldata_UpgradeableToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UpgradeableToken_0: 0xac3cb72c00000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeableToken: 0x44\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/3/0x98d454cd76f9d9e5c51ae90f7748618967b76392.sol", "function": "addApproval(address,uint256)", "lineno": 29, "title": "Exception state", "type": "Informational"}], "success": true}