{"error": null, "issues": [{"address": 256, "code": "       tokenReward.transfer(msg", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xabbbb0cc8dd4b0201d2000000000000000100208080000000001005009cc07ef\ncallvalue: 0xa8888ffe92536ddfe32000000000000000100208080000000001f44909d6470f\nstorage_2: 0x0\ncalldata_token_0: 0xea00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "fallback", "lineno": 36, "title": "Integer Overflow ", "type": "Warning"}, {"address": 348, "code": "   FundTransfer(msg.sender,", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncalldata_token_0: 0x38af3eec00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_1: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "fallback", "lineno": 37, "title": "Exception state", "type": "Informational"}, {"address": 486, "code": "mount  * 1 ether) / price);\n        FundTransfer(msg.sender, ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "fallback", "lineno": 36, "title": "Message call to external contract", "type": "Informational"}, {"address": 486, "code": "mount  * 1 ether) / price);\n        FundTransfer(msg.sender, ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "fallback", "lineno": 36, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1948, "code": "}\n    \n     function crowdsaleStop() pub", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "safeTokenWithdrawal(uint256)", "lineno": 59, "title": "Message call to external contract", "type": "Informational"}, {"address": 1948, "code": "}\n    \n     function crowdsaleStop() pub", "debug": "", "description": "A possible transaction order independence vulnerability exists in function safeTokenWithdrawal(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/18/0xe8974f5eb57e425be2de1caf25af926dda53217a.sol", "function": "safeTokenWithdrawal(uint256)", "lineno": 59, "title": "Transaction order dependence", "type": "Warning"}], "success": true}