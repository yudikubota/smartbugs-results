{
  "contract": "0x7a23687666b46cb674c2034e1bac94dcb5423dbd",
  "tool": "mythril",
  "start": 1563635932.5370097,
  "end": 1563636427.2744339,
  "duration": 494.73742413520813,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 974,
        "code": "= _name;\n    charities[charityCount].currency = _currency;\n    CharityModifiedEvent(_charity, _name, _currency);\n  }\n\n\n\n  //======== basic operations\n\n  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    chari",
        "debug": "calldata_RDFDM_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RDFDM_0: 0x4e4b95af00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `modifyCharity(uint256,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "modifyCharity(uint256,string,uint8)",
        "lineno": 164,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3026,
        "code": "ccFiat += _fiat;\n    charities[charityCount].f",
        "debug": "calldata_RDFDM_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_2 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x38aed86300000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatCollectedToEth(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 241,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3063,
        "code": "g.value - _operatorCut) - _tokenCut;\n    operatorFeeAc",
        "debug": "storage_8 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x38aed86300000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatCollectedToEth(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 245,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3100,
        "code": "sfer(_operatorCut);\n    token.transfer(_tokenCut);\n    ch",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_7 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x38aed86300000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatCollectedToEth(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 246,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3113,
        "code": "Balance += _c",
        "debug": "callvalue: 0x4000000000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x38aed86300000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatCollectedToEth(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 248,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3131,
        "code": "Count].ethCred",
        "debug": "callvalue: 0x1000000000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x38aed86300000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatCollectedToEth(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 249,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3232,
        "code": "EthEvent(_charity, _fiat, msg.value);\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3337\n",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 251,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3232,
        "code": "EthEvent(_charity, _fiat, msg.value);\n",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fiatCollectedToEth(uint256,uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 251,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3337,
        "code": "function ethToFiatDeliver",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fiatCollectedToEth(uint256,uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatCollectedToEth(uint256,uint256,uint256)",
        "lineno": 254,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3833,
        "code": "eOut += _fiat;\n    //withdraw funds to the caller\n    ",
        "debug": "calldata_RDFDM_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_10 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x406c17f500000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiat(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiat(uint256,uint256,uint256)",
        "lineno": 204,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3870,
        "code": "der.transfer(_eth);\n    EthToFiatEvent(_charity, _et",
        "debug": "calldata_RDFDM_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_9 + keccac_storage_0: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x406c17f500000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiat(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiat(uint256,uint256,uint256)",
        "lineno": 206,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3907,
        "code": "t);\n  }\n\n  function fiatDelivered(uint _ch",
        "debug": "calldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6 + keccac_storage_0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_6 + keccac_calldata_RDFDM_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x406c17f500000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `ethToFiat(uint256,uint256,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiat(uint256,uint256,uint256)",
        "lineno": 207,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3944,
        "code": "uint _fiat, uint _ref) public managerOnly {\n   ",
        "debug": "calldata_RDFDM_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x406c17f500000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiat(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiat(uint256,uint256,uint256)",
        "lineno": 210,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5063,
        "code": "   charities[",
        "debug": "callvalue: 0x5800800000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RDFDM_0: 0x763289fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `ethDonation(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethDonation(uint256)",
        "lineno": 228,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5164,
        "code": "ed += _charityCredit;\n    EthDonationE",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5269\n",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethDonation(uint256)",
        "lineno": 229,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5164,
        "code": "ed += _charityCredit;\n    EthDonationE",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function ethDonation(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethDonation(uint256)",
        "lineno": 229,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5269,
        "code": "harity, msg.value);\n  }\n\n",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function ethDonation(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethDonation(uint256)",
        "lineno": 230,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5772,
        "code": "//withdraw funds to the caller\n    msg.sender.transfer",
        "debug": "calldata_RDFDM_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_10 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x9374e6f700000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiatDelivered(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiatDelivered(uint256,uint256,uint256,uint256)",
        "lineno": 262,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5809,
        "code": "\n    EthToFiatEvent(_charity, _eth, _fiat);\n    char",
        "debug": "calldata_RDFDM_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_9 + keccac_storage_0: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x9374e6f700000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiatDelivered(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiatDelivered(uint256,uint256,uint256,uint256)",
        "lineno": 263,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5846,
        "code": "harityCount].fiatDelivered += _fiat;\n    F",
        "debug": "calldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6 + keccac_storage_0: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_6 + keccac_calldata_RDFDM_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x9374e6f700000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `ethToFiatDelivered(uint256,uint256,uint256,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiatDelivered(uint256,uint256,uint256,uint256)",
        "lineno": 265,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6018,
        "code": "                                       uint _f",
        "debug": "calldata_RDFDM_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_3 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_6 + keccac_calldata_RDFDM_4: 0x0\nretval_5901: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RDFDM_32 + 4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x9374e6f700000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ethToFiatDelivered(uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "ethToFiatDelivered(uint256,uint256,uint256,uint256)",
        "lineno": 272,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6398,
        "code": "kenCut = (msg.value * 4) / 100;\n    uint _operatorCut ",
        "debug": "storage_8 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0xa2d1123900000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatToEth(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 187,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6435,
        "code": "value * 16) / 100;\n    uint _charityCredit = (msg.value -",
        "debug": "callvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_7 + keccac_storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0xa2d1123900000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer overflow exists in the function `fiatToEth(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 188,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6472,
        "code": "torCut) - _tokenCut;\n    operatorFeeAcct.trans",
        "debug": "storage_0 + keccac_storage_0: 0x0\ncalldata_RDFDM_4: 0x0\ncalldata_RDFDM_32 + 4: 0x1\nstorage_0: 0x1\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0xa2d1123900000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\n",
        "description": "A possible integer underflow exists in the function `fiatToEth(uint256,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 189,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6604,
        "code": "   FiatToEthEvent(_charity, _fiat, msg",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6709\n",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 194,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6604,
        "code": "   FiatToEthEvent(_charity, _fiat, msg",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fiatToEth(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 194,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6709,
        "code": ";\n  }\n\n  function ethToFi",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fiatToEth(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "fiatToEth(uint256,uint256)",
        "lineno": 194,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 9407,
        "code": "iatCollectedEvent(uint indexed charity, uint usd, uint ref);\n  event FiatToEthEvent(uint indexed charity, uint usd, uint eth);\n  event EthToFiatEvent(uint indexed charity, uint eth, uint usd);\n  event FiatDeliveredEvent(uint indexed charity, uint usd, uint ref);\n  event EthDonationEvent(uint indexed charity, uint eth);\n\n  //events relating to adding and deleting charities\n  //\n  event CharityAddedEvent(uint indexed charity, string name, uint8 currency);\n  event CharityModifiedEvent(uint indexed charity, string name, uint8 currency);\n\n  //currencies\n  //\n  uint constant  CURRENCY_USD  = 0x01;\n  uint constant  CURRENCY_EURO = 0x02;\n  uint constant  CURRENCY_NIS  = 0x03;\n  uint constant  CURRENCY_YUAN = 0x04;\n\n\n  struct Charity {\n    uint fiatBalanceIn;           // funds in external acct, collected fbo charity\n    uint fiatBalanceOut;          // funds in external acct, pending delivery to charity\n    uint fiatCollected;           // total collected since dawn of creation\n    uint fiatDelivered;           // total delivered since dawn of creation\n    uint ethDonated;              // total eth donated since dawn of creation\n    uint ethCredited;             // total eth credited to this charity since dawn of creation\n    uint ethBalance;              // current eth balance of this charity\n    uint fiatToEthPriceAccEth;    // keep track of fiat to eth conversion price: total eth\n    uint fiatToEthPriceAccFiat;   // keep track of fiat to eth conversion price: total fiat\n    uint ethToFiatPriceAccEth;    // kkep track of eth to fiat conversion price: total eth\n    uint ethToFiatPriceAccFiat;   // kkep track of eth to fiat conversion price: total fiat\n    uint8 currency;               // fiat amounts are in smallest denomination of currency\n    string name;                  // eg. \"Salvation Army\"\n  }\n\n  uint public charityCount;\n  address public owner;\n  address public manager;\n  address public token;           //token-holder fees sent to this address\n  address public operatorFeeAcct; //operations fees sent to this address\n  mapping (uint => Charity) public charities;\n  bool public isLocked;\n\n  modifier ownerOnly {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier managerOnly {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  modifier unlockedOnly {\n    require(!isLocked);\n    _;\n  }\n\n\n  //\n  //constructor\n  //\n  function RDFDM() {\n    owner = msg.sender;\n    manager = msg.sender;\n    token = msg.sender;\n    operatorFeeAcct = msg.sender;\n  }\n  function lock() public ownerOnly { isLocked = true; }\n  function setToken(address _token) public ownerOnly unlockedOnly { token = _token; }\n  function setOperatorFeeAcct(address _operatorFeeAcct) public ownerOnly { operatorFeeAcct = _operatorFeeAcct; }\n  function setManager(address _manager) public managerOnly { manager = _manager; }\n  function deleteManager() public managerOnly { manager = owner; }\n\n\n  function addCharity(string _name, uint8 _currency) public managerOnly {\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityAddedEvent(charityCount, _name, _currency);\n    ++charityCount;\n  }\n\n  function modifyCharity(uint _charity, string _name, uint8 _currency) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityModifiedEvent(_charity, _name, _currency);\n  }\n\n\n\n  //======== basic operations\n\n  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].fiatBalanceIn += _fiat;\n    charities[charityCount].fiatCollected += _fiat;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n  }\n\n  function fiatToEth(uint _charity, uint _fiat) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    charities[charityCount].fiatBalanceIn -= _fiat;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiat(uint _charity, uint _eth, uint _fiat) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    charities[charityCount].fiatBalanceOut += _fiat;\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n  }\n\n  function fiatDelivered(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].fiatBalanceOut >= _fiat);\n    charities[_charity].fiatBalanceOut -= _fiat;\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n  //======== unrelated to round-up\n  function ethDonation(uint _charity) public payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    uint _tokenCut = (msg.value * 1) / 200;\n    uint _operatorCut = (msg.value * 3) / 200;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethDonated += _charityCredit;\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    EthDonationEvent(_charity, msg.value);\n  }\n\n\n  //======== combo operations\n  function fiatCollectedToEth(uint _charity, uint _fiat, uint _ref) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    charities[charityCount].fiatCollected += _fiat;\n    //charities[charityCount].fiatBalanceIn does not change, since we immediately convert to eth\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiatDelivered(uint _charity, uint _eth, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    //charities[charityCount].fiatBalanceOut does not change, since we immediately deliver\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditEthCredited(uint _charity) public constant returns (uint _fiatCollected,\n                                                              uint _fiatToEthNotProcessed,\n                                                              uint _fiatToEthProcessed,\n                                                              uint _fiatToEthPricePerEth,\n                                                              uint _fiatToEthCreditedFinney,\n                                                              uint _fiatToEthAfterFeesFinney,\n                                                              uint _ethDonatedFinney,\n                                                              uint _ethDonatedAfterFeesFinney,\n                                                              uint _totalEthCreditedFinney,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _fiatCollected = charities[charityCount].fiatCollected;                                                //eg. $450 = 45000\n    _fiatToEthNotProcessed = charities[charityCount].fiatBalanceIn;                                        //eg.            0\n    _fiatToEthProcessed = _fiatCollected - _fiatToEthNotProcessed;                                         //eg.        45000\n    if (charities[charityCount].fiatToEthPriceAccEth == 0) {\n      _fiatToEthPricePerEth = 0;\n      _fiatToEthCreditedFinney = 0;\n    } else {\n      _fiatToEthPricePerEth = (charities[charityCount].fiatToEthPriceAccFiat * (1 ether)) /                //eg. 45000 * 10^18 = 45 * 10^21\n                               charities[charityCount].fiatToEthPriceAccEth;                               //eg 1.5 ETH        = 15 * 10^17\n                                                                                                           //               --------------------\n                                                                                                           //                     3 * 10^4 (30000 cents per ether)\n      _fiatToEthCreditedFinney = _fiatToEthProcessed * (1 ether / 1 finney) / _fiatToEthPricePerEth;       //eg. 45000 * 1000 / 30000 = 1500 (finney)\n      _fiatToEthAfterFeesFinney = _fiatToEthCreditedFinney * 8 / 10;                                       //eg. 1500 * 8 / 10 = 1200 (finney)\n    }\n    _ethDonatedFinney = charities[charityCount].ethDonated / (1 finney);                                   //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _ethDonatedAfterFeesFinney = _ethDonatedFinney * 98 / 100;                                             //eg. 1000 * 98/100 = 980 (finney)\n    _totalEthCreditedFinney = _fiatToEthAfterFeesFinney + _ethDonatedAfterFeesFinney;                      //eg 1200 + 980 = 2180 (finney)\n    uint256 tecf = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _quickDiscrepancy = int256(_totalEthCreditedFinney) - int256(tecf);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditFiatDelivered(uint _charity) public constant returns (\n                                                              uint _totalEthCreditedFinney,\n                                                              uint _ethNotProcessedFinney,\n                                                              uint _processedEthCreditedFinney,\n                                                              uint _ethToFiatPricePerEth,\n                                                              uint _ethToFiatCreditedFiat,\n                                                              uint _ethToFiatNotProcessed,\n                                                              uint _ethToFiatProcessed,\n                                                              uint _fiatDelivered,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _totalEthCreditedFinney = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _ethNotProcessedFinney = charities[charityCount].ethBalance / (1 finney);                              //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _processedEthCreditedFinney = _totalEthCreditedFinney - _ethNotProcessedFinney;                        //eg 1180 finney\n    if (charities[charityCount].ethToFiatPriceAccEth == 0) {\n      _ethToFiatPricePerEth = 0;\n      _ethToFiatCreditedFiat = 0;\n    } else {\n      _ethToFiatPricePerEth = (charities[charityCount].ethToFiatPriceAccFiat * (1 ether)) /                //eg. 29400 * 10^18 = 2940000 * 10^16\n                               charities[charityCount].ethToFiatPriceAccEth;                               //eg 0.980 ETH      =      98 * 10^16\n                                                                                                           //               --------------------\n                                                                                                           //                      30000 (30000 cents per ether)\n      _ethToFiatCreditedFiat = _processedEthCreditedFinney * _ethToFiatPricePerEth / (1 ether / 1 finney); //eg. 1180 * 30000 / 1000 = 35400\n    }\n    _ethToFiatNotProcessed = charities[_charity].fiatBalanceOut;\n    _ethToFiatProcessed = _ethToFiatCreditedFiat - _ethToFiatNotProcessed;\n    _fiatDelivered = charities[charityCount].fiatDelivered;\n    _quickDiscrepancy = int256(_ethToFiatProcessed) - int256(_fiatDelivered);\n  }\n\n\n  //\n  // default payable function.\n  //\n  function () payable {\n    revert();\n  }\n\n  //for debug\n  //only available before the contract is locked\n  function haraKiri() ownerOnly unlockedOnly {\n    selfdestruct(owner);\n  }\n\n}",
        "debug": "keccac_12_+_keccac_storage_0: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_12 + keccac_storage_0: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x4e4b95af00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `modifyCharity(uint256,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "modifyCharity(uint256,string,uint8)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9436,
        "code": "iatCollectedEvent(uint indexed charity, uint usd, uint ref);\n  event FiatToEthEvent(uint indexed charity, uint usd, uint eth);\n  event EthToFiatEvent(uint indexed charity, uint eth, uint usd);\n  event FiatDeliveredEvent(uint indexed charity, uint usd, uint ref);\n  event EthDonationEvent(uint indexed charity, uint eth);\n\n  //events relating to adding and deleting charities\n  //\n  event CharityAddedEvent(uint indexed charity, string name, uint8 currency);\n  event CharityModifiedEvent(uint indexed charity, string name, uint8 currency);\n\n  //currencies\n  //\n  uint constant  CURRENCY_USD  = 0x01;\n  uint constant  CURRENCY_EURO = 0x02;\n  uint constant  CURRENCY_NIS  = 0x03;\n  uint constant  CURRENCY_YUAN = 0x04;\n\n\n  struct Charity {\n    uint fiatBalanceIn;           // funds in external acct, collected fbo charity\n    uint fiatBalanceOut;          // funds in external acct, pending delivery to charity\n    uint fiatCollected;           // total collected since dawn of creation\n    uint fiatDelivered;           // total delivered since dawn of creation\n    uint ethDonated;              // total eth donated since dawn of creation\n    uint ethCredited;             // total eth credited to this charity since dawn of creation\n    uint ethBalance;              // current eth balance of this charity\n    uint fiatToEthPriceAccEth;    // keep track of fiat to eth conversion price: total eth\n    uint fiatToEthPriceAccFiat;   // keep track of fiat to eth conversion price: total fiat\n    uint ethToFiatPriceAccEth;    // kkep track of eth to fiat conversion price: total eth\n    uint ethToFiatPriceAccFiat;   // kkep track of eth to fiat conversion price: total fiat\n    uint8 currency;               // fiat amounts are in smallest denomination of currency\n    string name;                  // eg. \"Salvation Army\"\n  }\n\n  uint public charityCount;\n  address public owner;\n  address public manager;\n  address public token;           //token-holder fees sent to this address\n  address public operatorFeeAcct; //operations fees sent to this address\n  mapping (uint => Charity) public charities;\n  bool public isLocked;\n\n  modifier ownerOnly {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier managerOnly {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  modifier unlockedOnly {\n    require(!isLocked);\n    _;\n  }\n\n\n  //\n  //constructor\n  //\n  function RDFDM() {\n    owner = msg.sender;\n    manager = msg.sender;\n    token = msg.sender;\n    operatorFeeAcct = msg.sender;\n  }\n  function lock() public ownerOnly { isLocked = true; }\n  function setToken(address _token) public ownerOnly unlockedOnly { token = _token; }\n  function setOperatorFeeAcct(address _operatorFeeAcct) public ownerOnly { operatorFeeAcct = _operatorFeeAcct; }\n  function setManager(address _manager) public managerOnly { manager = _manager; }\n  function deleteManager() public managerOnly { manager = owner; }\n\n\n  function addCharity(string _name, uint8 _currency) public managerOnly {\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityAddedEvent(charityCount, _name, _currency);\n    ++charityCount;\n  }\n\n  function modifyCharity(uint _charity, string _name, uint8 _currency) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityModifiedEvent(_charity, _name, _currency);\n  }\n\n\n\n  //======== basic operations\n\n  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].fiatBalanceIn += _fiat;\n    charities[charityCount].fiatCollected += _fiat;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n  }\n\n  function fiatToEth(uint _charity, uint _fiat) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    charities[charityCount].fiatBalanceIn -= _fiat;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiat(uint _charity, uint _eth, uint _fiat) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    charities[charityCount].fiatBalanceOut += _fiat;\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n  }\n\n  function fiatDelivered(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].fiatBalanceOut >= _fiat);\n    charities[_charity].fiatBalanceOut -= _fiat;\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n  //======== unrelated to round-up\n  function ethDonation(uint _charity) public payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    uint _tokenCut = (msg.value * 1) / 200;\n    uint _operatorCut = (msg.value * 3) / 200;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethDonated += _charityCredit;\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    EthDonationEvent(_charity, msg.value);\n  }\n\n\n  //======== combo operations\n  function fiatCollectedToEth(uint _charity, uint _fiat, uint _ref) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    charities[charityCount].fiatCollected += _fiat;\n    //charities[charityCount].fiatBalanceIn does not change, since we immediately convert to eth\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiatDelivered(uint _charity, uint _eth, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    //charities[charityCount].fiatBalanceOut does not change, since we immediately deliver\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditEthCredited(uint _charity) public constant returns (uint _fiatCollected,\n                                                              uint _fiatToEthNotProcessed,\n                                                              uint _fiatToEthProcessed,\n                                                              uint _fiatToEthPricePerEth,\n                                                              uint _fiatToEthCreditedFinney,\n                                                              uint _fiatToEthAfterFeesFinney,\n                                                              uint _ethDonatedFinney,\n                                                              uint _ethDonatedAfterFeesFinney,\n                                                              uint _totalEthCreditedFinney,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _fiatCollected = charities[charityCount].fiatCollected;                                                //eg. $450 = 45000\n    _fiatToEthNotProcessed = charities[charityCount].fiatBalanceIn;                                        //eg.            0\n    _fiatToEthProcessed = _fiatCollected - _fiatToEthNotProcessed;                                         //eg.        45000\n    if (charities[charityCount].fiatToEthPriceAccEth == 0) {\n      _fiatToEthPricePerEth = 0;\n      _fiatToEthCreditedFinney = 0;\n    } else {\n      _fiatToEthPricePerEth = (charities[charityCount].fiatToEthPriceAccFiat * (1 ether)) /                //eg. 45000 * 10^18 = 45 * 10^21\n                               charities[charityCount].fiatToEthPriceAccEth;                               //eg 1.5 ETH        = 15 * 10^17\n                                                                                                           //               --------------------\n                                                                                                           //                     3 * 10^4 (30000 cents per ether)\n      _fiatToEthCreditedFinney = _fiatToEthProcessed * (1 ether / 1 finney) / _fiatToEthPricePerEth;       //eg. 45000 * 1000 / 30000 = 1500 (finney)\n      _fiatToEthAfterFeesFinney = _fiatToEthCreditedFinney * 8 / 10;                                       //eg. 1500 * 8 / 10 = 1200 (finney)\n    }\n    _ethDonatedFinney = charities[charityCount].ethDonated / (1 finney);                                   //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _ethDonatedAfterFeesFinney = _ethDonatedFinney * 98 / 100;                                             //eg. 1000 * 98/100 = 980 (finney)\n    _totalEthCreditedFinney = _fiatToEthAfterFeesFinney + _ethDonatedAfterFeesFinney;                      //eg 1200 + 980 = 2180 (finney)\n    uint256 tecf = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _quickDiscrepancy = int256(_totalEthCreditedFinney) - int256(tecf);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditFiatDelivered(uint _charity) public constant returns (\n                                                              uint _totalEthCreditedFinney,\n                                                              uint _ethNotProcessedFinney,\n                                                              uint _processedEthCreditedFinney,\n                                                              uint _ethToFiatPricePerEth,\n                                                              uint _ethToFiatCreditedFiat,\n                                                              uint _ethToFiatNotProcessed,\n                                                              uint _ethToFiatProcessed,\n                                                              uint _fiatDelivered,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _totalEthCreditedFinney = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _ethNotProcessedFinney = charities[charityCount].ethBalance / (1 finney);                              //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _processedEthCreditedFinney = _totalEthCreditedFinney - _ethNotProcessedFinney;                        //eg 1180 finney\n    if (charities[charityCount].ethToFiatPriceAccEth == 0) {\n      _ethToFiatPricePerEth = 0;\n      _ethToFiatCreditedFiat = 0;\n    } else {\n      _ethToFiatPricePerEth = (charities[charityCount].ethToFiatPriceAccFiat * (1 ether)) /                //eg. 29400 * 10^18 = 2940000 * 10^16\n                               charities[charityCount].ethToFiatPriceAccEth;                               //eg 0.980 ETH      =      98 * 10^16\n                                                                                                           //               --------------------\n                                                                                                           //                      30000 (30000 cents per ether)\n      _ethToFiatCreditedFiat = _processedEthCreditedFinney * _ethToFiatPricePerEth / (1 ether / 1 finney); //eg. 1180 * 30000 / 1000 = 35400\n    }\n    _ethToFiatNotProcessed = charities[_charity].fiatBalanceOut;\n    _ethToFiatProcessed = _ethToFiatCreditedFiat - _ethToFiatNotProcessed;\n    _fiatDelivered = charities[charityCount].fiatDelivered;\n    _quickDiscrepancy = int256(_ethToFiatProcessed) - int256(_fiatDelivered);\n  }\n\n\n  //\n  // default payable function.\n  //\n  function () payable {\n    revert();\n  }\n\n  //for debug\n  //only available before the contract is locked\n  function haraKiri() ownerOnly unlockedOnly {\n    selfdestruct(owner);\n  }\n\n}",
        "debug": "calldata_RDFDM_4 + calldata_RDFDM_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x4e4b95af00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `modifyCharity(uint256,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "modifyCharity(uint256,string,uint8)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9450,
        "code": "iatCollectedEvent(uint indexed charity, uint usd, uint ref);\n  event FiatToEthEvent(uint indexed charity, uint usd, uint eth);\n  event EthToFiatEvent(uint indexed charity, uint eth, uint usd);\n  event FiatDeliveredEvent(uint indexed charity, uint usd, uint ref);\n  event EthDonationEvent(uint indexed charity, uint eth);\n\n  //events relating to adding and deleting charities\n  //\n  event CharityAddedEvent(uint indexed charity, string name, uint8 currency);\n  event CharityModifiedEvent(uint indexed charity, string name, uint8 currency);\n\n  //currencies\n  //\n  uint constant  CURRENCY_USD  = 0x01;\n  uint constant  CURRENCY_EURO = 0x02;\n  uint constant  CURRENCY_NIS  = 0x03;\n  uint constant  CURRENCY_YUAN = 0x04;\n\n\n  struct Charity {\n    uint fiatBalanceIn;           // funds in external acct, collected fbo charity\n    uint fiatBalanceOut;          // funds in external acct, pending delivery to charity\n    uint fiatCollected;           // total collected since dawn of creation\n    uint fiatDelivered;           // total delivered since dawn of creation\n    uint ethDonated;              // total eth donated since dawn of creation\n    uint ethCredited;             // total eth credited to this charity since dawn of creation\n    uint ethBalance;              // current eth balance of this charity\n    uint fiatToEthPriceAccEth;    // keep track of fiat to eth conversion price: total eth\n    uint fiatToEthPriceAccFiat;   // keep track of fiat to eth conversion price: total fiat\n    uint ethToFiatPriceAccEth;    // kkep track of eth to fiat conversion price: total eth\n    uint ethToFiatPriceAccFiat;   // kkep track of eth to fiat conversion price: total fiat\n    uint8 currency;               // fiat amounts are in smallest denomination of currency\n    string name;                  // eg. \"Salvation Army\"\n  }\n\n  uint public charityCount;\n  address public owner;\n  address public manager;\n  address public token;           //token-holder fees sent to this address\n  address public operatorFeeAcct; //operations fees sent to this address\n  mapping (uint => Charity) public charities;\n  bool public isLocked;\n\n  modifier ownerOnly {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier managerOnly {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  modifier unlockedOnly {\n    require(!isLocked);\n    _;\n  }\n\n\n  //\n  //constructor\n  //\n  function RDFDM() {\n    owner = msg.sender;\n    manager = msg.sender;\n    token = msg.sender;\n    operatorFeeAcct = msg.sender;\n  }\n  function lock() public ownerOnly { isLocked = true; }\n  function setToken(address _token) public ownerOnly unlockedOnly { token = _token; }\n  function setOperatorFeeAcct(address _operatorFeeAcct) public ownerOnly { operatorFeeAcct = _operatorFeeAcct; }\n  function setManager(address _manager) public managerOnly { manager = _manager; }\n  function deleteManager() public managerOnly { manager = owner; }\n\n\n  function addCharity(string _name, uint8 _currency) public managerOnly {\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityAddedEvent(charityCount, _name, _currency);\n    ++charityCount;\n  }\n\n  function modifyCharity(uint _charity, string _name, uint8 _currency) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityModifiedEvent(_charity, _name, _currency);\n  }\n\n\n\n  //======== basic operations\n\n  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].fiatBalanceIn += _fiat;\n    charities[charityCount].fiatCollected += _fiat;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n  }\n\n  function fiatToEth(uint _charity, uint _fiat) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    charities[charityCount].fiatBalanceIn -= _fiat;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiat(uint _charity, uint _eth, uint _fiat) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    charities[charityCount].fiatBalanceOut += _fiat;\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n  }\n\n  function fiatDelivered(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].fiatBalanceOut >= _fiat);\n    charities[_charity].fiatBalanceOut -= _fiat;\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n  //======== unrelated to round-up\n  function ethDonation(uint _charity) public payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    uint _tokenCut = (msg.value * 1) / 200;\n    uint _operatorCut = (msg.value * 3) / 200;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethDonated += _charityCredit;\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    EthDonationEvent(_charity, msg.value);\n  }\n\n\n  //======== combo operations\n  function fiatCollectedToEth(uint _charity, uint _fiat, uint _ref) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    charities[charityCount].fiatCollected += _fiat;\n    //charities[charityCount].fiatBalanceIn does not change, since we immediately convert to eth\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiatDelivered(uint _charity, uint _eth, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    //charities[charityCount].fiatBalanceOut does not change, since we immediately deliver\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditEthCredited(uint _charity) public constant returns (uint _fiatCollected,\n                                                              uint _fiatToEthNotProcessed,\n                                                              uint _fiatToEthProcessed,\n                                                              uint _fiatToEthPricePerEth,\n                                                              uint _fiatToEthCreditedFinney,\n                                                              uint _fiatToEthAfterFeesFinney,\n                                                              uint _ethDonatedFinney,\n                                                              uint _ethDonatedAfterFeesFinney,\n                                                              uint _totalEthCreditedFinney,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _fiatCollected = charities[charityCount].fiatCollected;                                                //eg. $450 = 45000\n    _fiatToEthNotProcessed = charities[charityCount].fiatBalanceIn;                                        //eg.            0\n    _fiatToEthProcessed = _fiatCollected - _fiatToEthNotProcessed;                                         //eg.        45000\n    if (charities[charityCount].fiatToEthPriceAccEth == 0) {\n      _fiatToEthPricePerEth = 0;\n      _fiatToEthCreditedFinney = 0;\n    } else {\n      _fiatToEthPricePerEth = (charities[charityCount].fiatToEthPriceAccFiat * (1 ether)) /                //eg. 45000 * 10^18 = 45 * 10^21\n                               charities[charityCount].fiatToEthPriceAccEth;                               //eg 1.5 ETH        = 15 * 10^17\n                                                                                                           //               --------------------\n                                                                                                           //                     3 * 10^4 (30000 cents per ether)\n      _fiatToEthCreditedFinney = _fiatToEthProcessed * (1 ether / 1 finney) / _fiatToEthPricePerEth;       //eg. 45000 * 1000 / 30000 = 1500 (finney)\n      _fiatToEthAfterFeesFinney = _fiatToEthCreditedFinney * 8 / 10;                                       //eg. 1500 * 8 / 10 = 1200 (finney)\n    }\n    _ethDonatedFinney = charities[charityCount].ethDonated / (1 finney);                                   //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _ethDonatedAfterFeesFinney = _ethDonatedFinney * 98 / 100;                                             //eg. 1000 * 98/100 = 980 (finney)\n    _totalEthCreditedFinney = _fiatToEthAfterFeesFinney + _ethDonatedAfterFeesFinney;                      //eg 1200 + 980 = 2180 (finney)\n    uint256 tecf = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _quickDiscrepancy = int256(_totalEthCreditedFinney) - int256(tecf);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditFiatDelivered(uint _charity) public constant returns (\n                                                              uint _totalEthCreditedFinney,\n                                                              uint _ethNotProcessedFinney,\n                                                              uint _processedEthCreditedFinney,\n                                                              uint _ethToFiatPricePerEth,\n                                                              uint _ethToFiatCreditedFiat,\n                                                              uint _ethToFiatNotProcessed,\n                                                              uint _ethToFiatProcessed,\n                                                              uint _fiatDelivered,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _totalEthCreditedFinney = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _ethNotProcessedFinney = charities[charityCount].ethBalance / (1 finney);                              //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _processedEthCreditedFinney = _totalEthCreditedFinney - _ethNotProcessedFinney;                        //eg 1180 finney\n    if (charities[charityCount].ethToFiatPriceAccEth == 0) {\n      _ethToFiatPricePerEth = 0;\n      _ethToFiatCreditedFiat = 0;\n    } else {\n      _ethToFiatPricePerEth = (charities[charityCount].ethToFiatPriceAccFiat * (1 ether)) /                //eg. 29400 * 10^18 = 2940000 * 10^16\n                               charities[charityCount].ethToFiatPriceAccEth;                               //eg 0.980 ETH      =      98 * 10^16\n                                                                                                           //               --------------------\n                                                                                                           //                      30000 (30000 cents per ether)\n      _ethToFiatCreditedFiat = _processedEthCreditedFinney * _ethToFiatPricePerEth / (1 ether / 1 finney); //eg. 1180 * 30000 / 1000 = 35400\n    }\n    _ethToFiatNotProcessed = charities[_charity].fiatBalanceOut;\n    _ethToFiatProcessed = _ethToFiatCreditedFiat - _ethToFiatNotProcessed;\n    _fiatDelivered = charities[charityCount].fiatDelivered;\n    _quickDiscrepancy = int256(_ethToFiatProcessed) - int256(_fiatDelivered);\n  }\n\n\n  //\n  // default payable function.\n  //\n  function () payable {\n    revert();\n  }\n\n  //for debug\n  //only available before the contract is locked\n  function haraKiri() ownerOnly unlockedOnly {\n    selfdestruct(owner);\n  }\n\n}",
        "debug": "calldata_RDFDM_4 + calldata_RDFDM_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x4e4b95af00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `modifyCharity(uint256,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "modifyCharity(uint256,string,uint8)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9472,
        "code": "iatCollectedEvent(uint indexed charity, uint usd, uint ref);\n  event FiatToEthEvent(uint indexed charity, uint usd, uint eth);\n  event EthToFiatEvent(uint indexed charity, uint eth, uint usd);\n  event FiatDeliveredEvent(uint indexed charity, uint usd, uint ref);\n  event EthDonationEvent(uint indexed charity, uint eth);\n\n  //events relating to adding and deleting charities\n  //\n  event CharityAddedEvent(uint indexed charity, string name, uint8 currency);\n  event CharityModifiedEvent(uint indexed charity, string name, uint8 currency);\n\n  //currencies\n  //\n  uint constant  CURRENCY_USD  = 0x01;\n  uint constant  CURRENCY_EURO = 0x02;\n  uint constant  CURRENCY_NIS  = 0x03;\n  uint constant  CURRENCY_YUAN = 0x04;\n\n\n  struct Charity {\n    uint fiatBalanceIn;           // funds in external acct, collected fbo charity\n    uint fiatBalanceOut;          // funds in external acct, pending delivery to charity\n    uint fiatCollected;           // total collected since dawn of creation\n    uint fiatDelivered;           // total delivered since dawn of creation\n    uint ethDonated;              // total eth donated since dawn of creation\n    uint ethCredited;             // total eth credited to this charity since dawn of creation\n    uint ethBalance;              // current eth balance of this charity\n    uint fiatToEthPriceAccEth;    // keep track of fiat to eth conversion price: total eth\n    uint fiatToEthPriceAccFiat;   // keep track of fiat to eth conversion price: total fiat\n    uint ethToFiatPriceAccEth;    // kkep track of eth to fiat conversion price: total eth\n    uint ethToFiatPriceAccFiat;   // kkep track of eth to fiat conversion price: total fiat\n    uint8 currency;               // fiat amounts are in smallest denomination of currency\n    string name;                  // eg. \"Salvation Army\"\n  }\n\n  uint public charityCount;\n  address public owner;\n  address public manager;\n  address public token;           //token-holder fees sent to this address\n  address public operatorFeeAcct; //operations fees sent to this address\n  mapping (uint => Charity) public charities;\n  bool public isLocked;\n\n  modifier ownerOnly {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier managerOnly {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  modifier unlockedOnly {\n    require(!isLocked);\n    _;\n  }\n\n\n  //\n  //constructor\n  //\n  function RDFDM() {\n    owner = msg.sender;\n    manager = msg.sender;\n    token = msg.sender;\n    operatorFeeAcct = msg.sender;\n  }\n  function lock() public ownerOnly { isLocked = true; }\n  function setToken(address _token) public ownerOnly unlockedOnly { token = _token; }\n  function setOperatorFeeAcct(address _operatorFeeAcct) public ownerOnly { operatorFeeAcct = _operatorFeeAcct; }\n  function setManager(address _manager) public managerOnly { manager = _manager; }\n  function deleteManager() public managerOnly { manager = owner; }\n\n\n  function addCharity(string _name, uint8 _currency) public managerOnly {\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityAddedEvent(charityCount, _name, _currency);\n    ++charityCount;\n  }\n\n  function modifyCharity(uint _charity, string _name, uint8 _currency) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].name = _name;\n    charities[charityCount].currency = _currency;\n    CharityModifiedEvent(_charity, _name, _currency);\n  }\n\n\n\n  //======== basic operations\n\n  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    charities[charityCount].fiatBalanceIn += _fiat;\n    charities[charityCount].fiatCollected += _fiat;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n  }\n\n  function fiatToEth(uint _charity, uint _fiat) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    charities[charityCount].fiatBalanceIn -= _fiat;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiat(uint _charity, uint _eth, uint _fiat) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    charities[charityCount].fiatBalanceOut += _fiat;\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n  }\n\n  function fiatDelivered(uint _charity, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].fiatBalanceOut >= _fiat);\n    charities[_charity].fiatBalanceOut -= _fiat;\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n  //======== unrelated to round-up\n  function ethDonation(uint _charity) public payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    uint _tokenCut = (msg.value * 1) / 200;\n    uint _operatorCut = (msg.value * 3) / 200;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethDonated += _charityCredit;\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    EthDonationEvent(_charity, msg.value);\n  }\n\n\n  //======== combo operations\n  function fiatCollectedToEth(uint _charity, uint _fiat, uint _ref) public managerOnly payable {\n    require(token != 0);\n    require(_charity < charityCount);\n    charities[charityCount].fiatCollected += _fiat;\n    //charities[charityCount].fiatBalanceIn does not change, since we immediately convert to eth\n    //keep track of fiat to eth conversion price\n    charities[charityCount].fiatToEthPriceAccFiat += _fiat;\n    charities[charityCount].fiatToEthPriceAccEth += msg.value;\n    uint _tokenCut = (msg.value * 4) / 100;\n    uint _operatorCut = (msg.value * 16) / 100;\n    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;\n    operatorFeeAcct.transfer(_operatorCut);\n    token.transfer(_tokenCut);\n    charities[charityCount].ethBalance += _charityCredit;\n    charities[charityCount].ethCredited += _charityCredit;\n    FiatCollectedEvent(_charity, _fiat, _ref);\n    FiatToEthEvent(_charity, _fiat, msg.value);\n  }\n\n  function ethToFiatDelivered(uint _charity, uint _eth, uint _fiat, uint _ref) public managerOnly {\n    require(_charity < charityCount);\n    require(charities[_charity].ethBalance >= _eth);\n    //keep track of fiat to eth conversion price\n    charities[charityCount].ethToFiatPriceAccFiat += _fiat;\n    charities[charityCount].ethToFiatPriceAccEth += _eth;\n    charities[charityCount].ethBalance -= _eth;\n    //charities[charityCount].fiatBalanceOut does not change, since we immediately deliver\n    //withdraw funds to the caller\n    msg.sender.transfer(_eth);\n    EthToFiatEvent(_charity, _eth, _fiat);\n    charities[charityCount].fiatDelivered += _fiat;\n    FiatDeliveredEvent(_charity, _fiat, _ref);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditEthCredited(uint _charity) public constant returns (uint _fiatCollected,\n                                                              uint _fiatToEthNotProcessed,\n                                                              uint _fiatToEthProcessed,\n                                                              uint _fiatToEthPricePerEth,\n                                                              uint _fiatToEthCreditedFinney,\n                                                              uint _fiatToEthAfterFeesFinney,\n                                                              uint _ethDonatedFinney,\n                                                              uint _ethDonatedAfterFeesFinney,\n                                                              uint _totalEthCreditedFinney,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _fiatCollected = charities[charityCount].fiatCollected;                                                //eg. $450 = 45000\n    _fiatToEthNotProcessed = charities[charityCount].fiatBalanceIn;                                        //eg.            0\n    _fiatToEthProcessed = _fiatCollected - _fiatToEthNotProcessed;                                         //eg.        45000\n    if (charities[charityCount].fiatToEthPriceAccEth == 0) {\n      _fiatToEthPricePerEth = 0;\n      _fiatToEthCreditedFinney = 0;\n    } else {\n      _fiatToEthPricePerEth = (charities[charityCount].fiatToEthPriceAccFiat * (1 ether)) /                //eg. 45000 * 10^18 = 45 * 10^21\n                               charities[charityCount].fiatToEthPriceAccEth;                               //eg 1.5 ETH        = 15 * 10^17\n                                                                                                           //               --------------------\n                                                                                                           //                     3 * 10^4 (30000 cents per ether)\n      _fiatToEthCreditedFinney = _fiatToEthProcessed * (1 ether / 1 finney) / _fiatToEthPricePerEth;       //eg. 45000 * 1000 / 30000 = 1500 (finney)\n      _fiatToEthAfterFeesFinney = _fiatToEthCreditedFinney * 8 / 10;                                       //eg. 1500 * 8 / 10 = 1200 (finney)\n    }\n    _ethDonatedFinney = charities[charityCount].ethDonated / (1 finney);                                   //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _ethDonatedAfterFeesFinney = _ethDonatedFinney * 98 / 100;                                             //eg. 1000 * 98/100 = 980 (finney)\n    _totalEthCreditedFinney = _fiatToEthAfterFeesFinney + _ethDonatedAfterFeesFinney;                      //eg 1200 + 980 = 2180 (finney)\n    uint256 tecf = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _quickDiscrepancy = int256(_totalEthCreditedFinney) - int256(tecf);\n  }\n\n\n  //note: contant fcn does not need safe math\n  function quickAuditFiatDelivered(uint _charity) public constant returns (\n                                                              uint _totalEthCreditedFinney,\n                                                              uint _ethNotProcessedFinney,\n                                                              uint _processedEthCreditedFinney,\n                                                              uint _ethToFiatPricePerEth,\n                                                              uint _ethToFiatCreditedFiat,\n                                                              uint _ethToFiatNotProcessed,\n                                                              uint _ethToFiatProcessed,\n                                                              uint _fiatDelivered,\n                                                               int _quickDiscrepancy) {\n    require(_charity < charityCount);\n    _totalEthCreditedFinney = charities[charityCount].ethCredited * (1 ether / 1 finney);\n    _ethNotProcessedFinney = charities[charityCount].ethBalance / (1 finney);                              //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)\n    _processedEthCreditedFinney = _totalEthCreditedFinney - _ethNotProcessedFinney;                        //eg 1180 finney\n    if (charities[charityCount].ethToFiatPriceAccEth == 0) {\n      _ethToFiatPricePerEth = 0;\n      _ethToFiatCreditedFiat = 0;\n    } else {\n      _ethToFiatPricePerEth = (charities[charityCount].ethToFiatPriceAccFiat * (1 ether)) /                //eg. 29400 * 10^18 = 2940000 * 10^16\n                               charities[charityCount].ethToFiatPriceAccEth;                               //eg 0.980 ETH      =      98 * 10^16\n                                                                                                           //               --------------------\n                                                                                                           //                      30000 (30000 cents per ether)\n      _ethToFiatCreditedFiat = _processedEthCreditedFinney * _ethToFiatPricePerEth / (1 ether / 1 finney); //eg. 1180 * 30000 / 1000 = 35400\n    }\n    _ethToFiatNotProcessed = charities[_charity].fiatBalanceOut;\n    _ethToFiatProcessed = _ethToFiatCreditedFiat - _ethToFiatNotProcessed;\n    _fiatDelivered = charities[charityCount].fiatDelivered;\n    _quickDiscrepancy = int256(_ethToFiatProcessed) - int256(_fiatDelivered);\n  }\n\n\n  //\n  // default payable function.\n  //\n  function () payable {\n    revert();\n  }\n\n  //for debug\n  //only available before the contract is locked\n  function haraKiri() ownerOnly unlockedOnly {\n    selfdestruct(owner);\n  }\n\n}",
        "debug": "keccac_12_+_keccac_storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RDFDM_4 + calldata_RDFDM_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\ncalldata_RDFDM_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_RDFDM_0: 0x4e4b95af00000000000000000000000000000000000000000000000000000000\ncalldatasize_RDFDM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `modifyCharity(uint256,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x7a23687666b46cb674c2034e1bac94dcb5423dbd.sol",
        "function": "modifyCharity(uint256,string,uint8)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}