{
  "contract": "0x3d05317111a96a1a6abf31e07b0cfa33173a19aa",
  "tool": "mythril",
  "start": 1563503829.114059,
  "end": 1563503851.0993063,
  "duration": 21.985247373580933,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1066,
        "code": "dAddresses;\n\n  /// Starting time of",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SilentNotaryBountyReward_4: 0x0\nstorage_5: 0x0\ncalldata_SilentNotaryBountyReward_0: 0x2a922d5400000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryBountyReward: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "_function_0x2a922d54",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1710,
        "code": "allet, remainingBalance);\n  }\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "withdrawRemainder()",
        "lineno": 131,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1710,
        "code": "allet, remainingBalance);\n  }\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2017\n",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "withdrawRemainder()",
        "lineno": 131,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2017,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "withdrawRemainder()",
        "lineno": 133,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2432,
        "code": ") >= reward);\n\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x80000000000000000000000000000000000000000000000000000000000b808f\nstorage_6: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8111\ncalldata_SilentNotaryBountyReward_0: 0xb88a802f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryBountyReward: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2626,
        "code": "Rewards[receiver];\n    collect",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 99,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2626,
        "code": "Rewards[receiver];\n    collect",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3079\n",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 99,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2691,
        "code": " bountyRewards[receiver];\n    collectedAddresses",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000000000000000000000002000000080002000000000000000000000000001\ntimestamp: 0x8000000000000000000000000000000000000000000000000000000000099eff\nstorage_6: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff73efe\nretval_2626: 0x7fffffffffffffffffffffffdfffffffffffe000000000000000000000000001\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SilentNotaryBountyReward_0: 0xb88a802f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryBountyReward: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 99,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2759,
        "code": "    collectedAddresses.push(re",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 101,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2772,
        "code": ";\n\n    token.transfer(rec",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ntimestamp: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffed8b00\nretval_2626: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SilentNotaryBountyReward_0: 0xb88a802f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryBountyReward: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `claimReward()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 101,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2776,
        "code": ";\n\n    token.transfer(rec",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 101,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2787,
        "code": ";\n\n /// @title Own",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x512000000000060000000000000000000000000000000000000000000001\ntimestamp: 0x800000000000000000000000000000000000000000000000000000000000e801\nstorage_6: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0217\nretval_2626: 0xfdff2cdfffff7fff993000000000000000000000000000000000000000000000\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SilentNotaryBountyReward_0: 0xb88a802f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotaryBountyReward: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `claimReward()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2790,
        "code": " contract - base contra",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 3,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2877,
        "code": "reward);\n    Claimed(receiver, re",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 103,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3079,
        "code": "}\n\n  /// @dev Import bounty rewa",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/8/0x3d05317111a96a1a6abf31e07b0cfa33173a19aa.sol",
        "function": "claimReward()",
        "lineno": 105,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}