{
  "contract": "0xb8be713fee0b3f437be4793a23f96fec7eae4316",
  "tool": "mythril",
  "start": 1563558985.3784492,
  "end": 1563559106.7644606,
  "duration": 121.3860113620758,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 268,
        "code": "s, uint[] _rewardAmounts, uint duration) public {\n        require(\n            winners.length == 0 &&\n            _winners.length > 0 &&\n            _winners.length == _rewardAmounts.length &&\n            msg.sender == operator\n        );\n\n        uint totalAmount = 0;\n        for(uint i = 0; i < _winners.length; i++) {\n            totalAmount += _rewardAmounts[i];\n            rewardAmounts[_winners[i]] = _rewardAmounts[i];\n        }\n\n        require(rewardToken.transferFrom(msg.sender, this, totalAmount));\n\n        winners = _winners;\n        guaranteedClaimEndTime = now + duration;\n    }\n\n    function claimReward() public {\n        require(winner",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x553eb4db00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x553eb4db`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "_function_0x553eb4db",
        "lineno": 43,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1371,
        "code": ";\n\n        winners = _winners;\n        guaranteedClaimE",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "_function_0x553eb4db",
        "lineno": 57,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1469,
        "code": "n claimReward() public {\n        requir",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "_function_0x553eb4db",
        "lineno": 63,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1535,
        "code": "ping (address => uint) p",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_2: 0x0\ncalldata_Token_0: 0xa2fb117500000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "_function_0xa2fb1175",
        "lineno": 35,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1861,
        "code": "       rewardAmounts[msg.sender] = 0;\n    }\n\n    function r",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "claimReward()",
        "lineno": 65,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1997,
        "code": "s() public {\n        require(",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "claimReward()",
        "lineno": 68,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2611,
        "code": "}\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "retractRewards()",
        "lineno": 85,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2741,
        "code": "    Token public rewardToken;\n    address public operator;\n    address[] public winners;\n    mapping (address => uint) public rewardAmounts;\n    uint public guaranteedClaimEndTime;\n\n    function RewardClaimHandler(Token _rewardToken) public {\n        rewardToken = _rewardToken;\n        operator = msg.sender;\n    }\n\n    function registerRewards(address[] _winners, uint[] _rewardAmounts, uint duration) public {\n        require(\n            winners.length == 0 &&\n            _winners.length > 0 &&\n            _winners.length == _rewardAmounts.length &&\n            msg.sender == operator\n        );\n\n        uint totalAmount = 0;\n        for(uint i = 0; i < _winners.length; i++) {\n            totalAmount += _rewardAmounts[i];\n            rewardAmounts[_winners[i]] = _rewardAmounts[i];\n        }\n\n        require(rewardToken.transferFrom(msg.sender, this, totalAmount));\n\n        winners = _winners;\n        guaranteedClaimEndTime = now + duration;\n    }\n\n    function claimReward() public {\n        require(winners.length > 0 && rewardToken.transfer(msg.sender, rewardAmounts[msg.sender]));\n        rewardAmounts[msg.sender] = 0;\n    }\n\n    function retractRewards() public {\n        require(winners.length > 0 && msg.sender == operator && now >= guaranteedClaimEndTime);\n\n        uint totalAmount = 0;\n        for(uint i = 0; i < winners.length; i++) {\n            totalAmount += rewardAmounts[winners[i]];\n            rewardAmounts[winners[i]] = 0;\n            // We don't use:\n            //     winners[i] = 0;\n            // because of this:\n            // https://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit\n            // This is a more gas efficient overall if more than one run happens\n        }\n\n        require(rewardToken.transfer(msg.sender, totalAmount));\n\n        winners.length = 0;\n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "_function_0x553eb4db",
        "lineno": 32,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2878,
        "code": "    Token public rewardToken;\n    address public operator;\n    address[] public winners;\n    mapping (address => uint) public rewardAmounts;\n    uint public guaranteedClaimEndTime;\n\n    function RewardClaimHandler(Token _rewardToken) public {\n        rewardToken = _rewardToken;\n        operator = msg.sender;\n    }\n\n    function registerRewards(address[] _winners, uint[] _rewardAmounts, uint duration) public {\n        require(\n            winners.length == 0 &&\n            _winners.length > 0 &&\n            _winners.length == _rewardAmounts.length &&\n            msg.sender == operator\n        );\n\n        uint totalAmount = 0;\n        for(uint i = 0; i < _winners.length; i++) {\n            totalAmount += _rewardAmounts[i];\n            rewardAmounts[_winners[i]] = _rewardAmounts[i];\n        }\n\n        require(rewardToken.transferFrom(msg.sender, this, totalAmount));\n\n        winners = _winners;\n        guaranteedClaimEndTime = now + duration;\n    }\n\n    function claimReward() public {\n        require(winners.length > 0 && rewardToken.transfer(msg.sender, rewardAmounts[msg.sender]));\n        rewardAmounts[msg.sender] = 0;\n    }\n\n    function retractRewards() public {\n        require(winners.length > 0 && msg.sender == operator && now >= guaranteedClaimEndTime);\n\n        uint totalAmount = 0;\n        for(uint i = 0; i < winners.length; i++) {\n            totalAmount += rewardAmounts[winners[i]];\n            rewardAmounts[winners[i]] = 0;\n            // We don't use:\n            //     winners[i] = 0;\n            // because of this:\n            // https://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit\n            // This is a more gas efficient overall if more than one run happens\n        }\n\n        require(rewardToken.transfer(msg.sender, totalAmount));\n\n        winners.length = 0;\n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xb8be713fee0b3f437be4793a23f96fec7eae4316.sol",
        "function": "retractRewards()",
        "lineno": 32,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}