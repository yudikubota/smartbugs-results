{
  "contract": "0x7090a6e22c838469c9e67851d6489ba9c933a43f",
  "tool": "mythril",
  "start": 1563471857.3142467,
  "end": 1563471932.701494,
  "duration": 75.38724732398987,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 187,
        "code": "ay_count + 2))) ",
        "debug": "storage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_ZuckBucks: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 116,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 212,
        "code": "y / (giveaway_co",
        "debug": "callvalue: 0xfffffffffffffffffffffffffffffffffffffffffffffffffa0fec34a41c0000\ncalldatasize_ZuckBucks: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 117,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 218,
        "code": "+ 1)) + (starting_",
        "debug": "storage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_ZuckBucks: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 117,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 227,
        "code": "ay / (giveaway_count + 1)) + (starting_g",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZuckBucks: 0x3\nstorage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 117,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 241,
        "code": "       next_giveaway = (starting_g",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZuckBucks: 0x3\nstorage_10: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 117,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 261,
        "code": "       circulating",
        "debug": "storage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldatasize_ZuckBucks: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 270,
        "code": " -= giveaway_value;\n        circulatingS",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZuckBucks: 0x3\nstorage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 121,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 278,
        "code": "\n        balances[",
        "debug": "storage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_ZuckBucks: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 120,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 287,
        "code": "r] += giveaway_value;\n        balances[o",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ZuckBucks: 0x3\nstorage_10: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/1/0x7090a6e22c838469c9e67851d6489ba9c933a43f.sol",
        "function": "fallback",
        "lineno": 120,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}