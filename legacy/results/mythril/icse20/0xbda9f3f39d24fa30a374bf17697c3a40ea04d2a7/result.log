{"error": null, "issues": [{"address": 430, "code": " true;\n  }\n\n  /", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xff00\ncalldatasize_YobiToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "fallback", "lineno": 215, "title": "Exception state", "type": "Informational"}, {"address": 2617, "code": "   uint tokens = ms", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_19: 0x1\nstorage_3: 0x0\ncalldatasize_YobiToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "fallback", "lineno": 329, "title": "Exception state", "type": "Informational"}, {"address": 2632, "code": ") investorCount++;\n", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffff7ffffffffffff\nstorage_20: 0xfffffffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffe\nstorage_19: 0xfffffffffffffffffffffffffffffffffffffffffffffffffff7ffffffffffff\nstorage_3: 0x0\ncalldatasize_YobiToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "fallback", "lineno": 331, "title": "Exception state", "type": "Informational"}, {"address": 2657, "code": "s);\n        collectedEt", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffff\nstorage_12: 0xff00\nstorage_20: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffff\nstorage_19: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffffff\nstorage_3: 0x0\ncalldatasize_YobiToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "fallback", "lineno": 336, "title": "Exception state", "type": "Informational"}, {"address": 2711, "code": "ached = true;\n ", "debug": "timestamp: 0x0\nstorage_18: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0x0\nstorage_20: 0x0\nstorage_19: 0x0\nstorage_3: 0x0\ncalldatasize_YobiToken: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "fallback", "lineno": 340, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4964, "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_12: 0x0\nstorage_20: 0x1\ncalldata_YobiToken_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Exception state", "type": "Informational"}, {"address": 5141, "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_8: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_12: 0xff00\nstorage_20: 0x1\ncalldata_YobiToken_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Exception state", "type": "Informational"}, {"address": 5241, "debug": "", "description": "In the function `withdraw()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 5241, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5357\n", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Multiple Calls", "type": "Information"}, {"address": 5241, "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5357, "debug": "", "description": "In the function `withdraw()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 5357, "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "withdraw()", "lineno": 369, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5481, "code": "le is Ownable {\n  bool publ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_YobiToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "burn(uint256)", "lineno": 200, "title": "Exception state", "type": "Informational"}, {"address": 5968, "code": "le is Ownable {\n  bool publ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_YobiToken_0: 0x5ed7ca5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "halt()", "lineno": 200, "title": "Exception state", "type": "Informational"}, {"address": 8598, "code": "eturn a - b;\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_YobiToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_YobiToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "burn(uint256)", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 8616, "code": "\n    ", "debug": "calldata_YobiToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_YobiToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_YobiToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_YobiToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_YobiToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8629, "code": "c;\n  }\n}\n\n/**\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_YobiToken_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_YobiToken_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_YobiToken_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_YobiToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_YobiToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_YobiToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xbda9f3f39d24fa30a374bf17697c3a40ea04d2a7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 29, "title": "Exception state", "type": "Informational"}], "success": true}