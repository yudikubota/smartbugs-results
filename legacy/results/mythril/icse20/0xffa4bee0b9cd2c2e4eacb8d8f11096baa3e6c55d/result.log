{"error": null, "issues": [{"address": 2087, "code": "dmin);\n        admin = newAdmin", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WrapEtheremonPermissions_4: 0x0\nstorage_1: 0x0\ncalldata_WrapEtheremonPermissions_0: 0xfc5bf0f200000000000000000000000000000000000000000000000000000000\ncalldatasize_WrapEtheremonPermissions: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/12/0xffa4bee0b9cd2c2e4eacb8d8f11096baa3e6c55d.sol", "function": "_function_0xfc5bf0f2", "lineno": 520, "title": "Exception state", "type": "Informational"}, {"address": 2161, "code": "tors[msg.sender]);\n        _;\n    }\n\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        emit TransferAdmin(newAdmin);\n        admin = newAdmin;\n    }\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]);\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        emit OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                emit OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\ncontract WrapEtheremon is WrapEtheremonInterface, WrapEtheremonPermissions, Utils2 {\n    event SwapTokenChange(uint startTokenBalance, uint change);\n    event CaughtWithToken(address indexed sender, uint monsterId, ERC20 token, uint amount);\n    event ETHReceived(address indexed sender, uint amount);\n\n    address public KyberNetwork;\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    /// @dev Contract contstructor\n    /// @param _KyberNetwork KyberNetwork main contract address\n    co", "debug": "storage_1: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffe000000000000\ncalldata_WrapEtheremonPermissions_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WrapEtheremonPermissions_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WrapEtheremonPermissions_0: 0xac8a584a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WrapEtheremonPermissions: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xac8a584a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xffa4bee0b9cd2c2e4eacb8d8f11096baa3e6c55d.sol", "function": "_function_0xac8a584a", "lineno": 514, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2163, "code": "tors[msg.sender]);\n        _;\n    }\n\n    function transferAdmin(address newAdmin) public onlyAdmin {\n        require(newAdmin != address(0));\n        emit TransferAdmin(newAdmin);\n        admin = newAdmin;\n    }\n\n    function addOperator(address newOperator) public onlyAdmin {\n        require(!operators[newOperator]);\n        require(operatorsGroup.length < MAX_GROUP_SIZE);\n\n        emit OperatorAdded(newOperator, true);\n        operators[newOperator] = true;\n        operatorsGroup.push(newOperator);\n    }\n\n    function removeOperator (address operator) public onlyAdmin {\n        require(operators[operator]);\n        operators[operator] = false;\n\n        for (uint i = 0; i < operatorsGroup.length; ++i) {\n            if (operatorsGroup[i] == operator) {\n                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n                operatorsGroup.length -= 1;\n                emit OperatorAdded(operator, false);\n                break;\n            }\n        }\n    }\n}\n\ncontract WrapEtheremon is WrapEtheremonInterface, WrapEtheremonPermissions, Utils2 {\n    event SwapTokenChange(uint startTokenBalance, uint change);\n    event CaughtWithToken(address indexed sender, uint monsterId, ERC20 token, uint amount);\n    event ETHReceived(address indexed sender, uint amount);\n\n    address public KyberNetwork;\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    /// @dev Contract contstructor\n    /// @param _KyberNetwork KyberNetwork main contract address\n    co", "debug": "storage_1: 0x7ffffffffffff3e4fffffffffffffffffffffffffffffffffffffffffffffffd\ncalldata_WrapEtheremonPermissions_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WrapEtheremonPermissions_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WrapEtheremonPermissions_0: 0xac8a584a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WrapEtheremonPermissions: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xac8a584a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xffa4bee0b9cd2c2e4eacb8d8f11096baa3e6c55d.sol", "function": "_function_0xac8a584a", "lineno": 514, "title": "Integer Overflow ", "type": "Warning"}], "success": true}