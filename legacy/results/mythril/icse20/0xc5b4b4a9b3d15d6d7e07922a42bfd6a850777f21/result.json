{
  "contract": "0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21",
  "tool": "mythril",
  "start": 1563592735.0358763,
  "end": 1563592934.8679287,
  "duration": 199.83205246925354,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1566,
        "code": "ytes?\n    } // total 78 bytes = 3 sstore per operation (32 per sstore)\n\n    mapping (address => TokenGrant[]) public grants;\n\n    event NewTokenGrant(address index",
        "debug": "calldata_WemarkToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WemarkToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 568,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5193,
        "code": "_to,\n        uint256 _value,\n        uint64 _st",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WemarkToken_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_WemarkToken_4: 0x0\ncalldata_WemarkToken_0: 0x2c71e60a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "_function_0x2c71e60a",
        "lineno": 584,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7183,
        "code": "ens(\n            grant.va",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WemarkToken_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WemarkToken_4: 0x0\ncalldata_WemarkToken_0: 0x600e85b700000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "tokenGrant(address,uint256)",
        "lineno": 755,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 15525,
        "code": " @dev Adds two",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_WemarkToken_4: 0x1\ncalldata_WemarkToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "burn(uint256)",
        "lineno": 54,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 17156,
        "code": " canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\n        // Call BasicToken.transfer()\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n     * @param _from The address that will send the tokens.\n     * @param _to The address that will receive the tokens.\n     * @param _value The amount of tokens to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint _value)\n        validDestination(_to)\n        canTransferReleasable(_from)\n        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Can upgrade token contract only if token is released and super class allows too.\n     */\n    function canUpgrade() public constant returns(bool) {\n        return released && super.canUpgrade();\n    }\n\n    /**\n     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\n     * @param holder address The address of the holder\n     * @return An uint256 representing a holder's total amount of transferable tokens.\n     */\n    function transferableTokensNow(address holder) public constant returns (uint) {\n        return transferableTokens(holder, uint64(now));\n    }\n\n    function () payable {\n        // If ether is sent to this address, send it back\n        revert();\n    }\n}",
        "debug": "calldata_WemarkToken_4 + calldata_WemarkToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WemarkToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 811,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 17170,
        "code": " canTransferLimitedTransferToken(msg.sender, _value) public returns (bool) {\n        // Call BasicToken.transfer()\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev Checks modifier and allows transfer if tokens are not locked or not released.\n     * @param _from The address that will send the tokens.\n     * @param _to The address that will receive the tokens.\n     * @param _value The amount of tokens to be transferred.\n     */\n    function transferFrom(address _from, address _to, uint _value)\n        validDestination(_to)\n        canTransferReleasable(_from)\n        canTransferLimitedTransferToken(_from, _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling approve()\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.approve(_spender, _value);\n    }\n\n    /**\n     * @dev Prevent accounts that are blocked for transferring their tokens, from calling increaseApproval()\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Call StandardToken.transferForm()\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    /**\n     * @dev Can upgrade token contract only if token is released and super class allows too.\n     */\n    function canUpgrade() public constant returns(bool) {\n        return released && super.canUpgrade();\n    }\n\n    /**\n     * @dev Calculate the total amount of transferable tokens of a holder for the current moment of calling.\n     * @param holder address The address of the holder\n     * @return An uint256 representing a holder's total amount of transferable tokens.\n     */\n    function transferableTokensNow(address holder) public constant returns (uint) {\n        return transferableTokens(holder, uint64(now));\n    }\n\n    function () payable {\n        // If ether is sent to this address, send it back\n        revert();\n    }\n}",
        "debug": "calldata_WemarkToken_4 + calldata_WemarkToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WemarkToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_WemarkToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0xc5b4b4a9b3d15d6d7e07922a42bfd6a850777f21.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 811,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}