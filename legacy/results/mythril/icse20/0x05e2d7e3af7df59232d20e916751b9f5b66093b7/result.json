{
  "contract": "0x05e2d7e3af7df59232d20e916751b9f5b66093b7",
  "tool": "mythril",
  "start": 1563654652.6764872,
  "end": 1563655761.787068,
  "duration": 1109.1105806827545,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 191,
        "code": "puts.length % 3 == 0);        \n        \n        uint256 rollingPriceRequired = 0;\n        \n        for(uint256 i = 0; i < inputs.length; i+=3)\n        {\n            uint256 x = inputs[i];\n            uint256 y = inputs[i+1];\n        \n            uint256 lastPaid = startingPriceWei;\n            uint256 pixelKey =  x + (y * 10000000);\n            Pixel storage pixel = PixelKeyToPixel[pixelKey];\n            \n            if(pixel.lastUpdatedTime != 0) {\n                lastPaid = pixel.lastPricePaid;\n            }\n    \t\t\n    \t\trollingPriceRequired += lastPaid + ((lastPaid * 2) / 10);\n        }\n        \n        require(msg.value >= rollingPriceRequired);\n        \n        for(uint256 z = 0; z < inputs.length; z+=3)\n        {\n            uint256 x1 = inputs[z];\n            uint256 y1 = inputs[z+1];\n            uint256 colorId = inputs[z+2];\n            bid(x1, y1, colorId, optionlReferrer);\n        }\n    }\n    \n    function bid(uint256 x, uint256 y, uint256 colorId, address optionlReferrer) internal {\n        uint256 lastPaid = startingPriceWei;\n        address curren",
        "debug": "calldata_PixelsMain_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PixelsMain_0: 0x5a1a859300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelsMain: 0x4\n",
        "description": "A possible integer overflow exists in the function `bidBatch(uint256[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x05e2d7e3af7df59232d20e916751b9f5b66093b7.sol",
        "function": "bidBatch(uint256[],address)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 197,
        "code": "puts.length % 3 == 0);        \n        \n        uint256 rollingPriceRequired = 0;\n        \n        for(uint256 i = 0; i < inputs.length; i+=3)\n        {\n            uint256 x = inputs[i];\n            uint256 y = inputs[i+1];\n        \n            uint256 lastPaid = startingPriceWei;\n            uint256 pixelKey =  x + (y * 10000000);\n            Pixel storage pixel = PixelKeyToPixel[pixelKey];\n            \n            if(pixel.lastUpdatedTime != 0) {\n                lastPaid = pixel.lastPricePaid;\n            }\n    \t\t\n    \t\trollingPriceRequired += lastPaid + ((lastPaid * 2) / 10);\n        }\n        \n        require(msg.value >= rollingPriceRequired);\n        \n        for(uint256 z = 0; z < inputs.length; z+=3)\n        {\n            uint256 x1 = inputs[z];\n            uint256 y1 = inputs[z+1];\n            uint256 colorId = inputs[z+2];\n            bid(x1, y1, colorId, optionlReferrer);\n        }\n    }\n    \n    function bid(uint256 x, uint256 y, uint256 colorId, address optionlReferrer) internal {\n        uint256 lastPaid = startingPriceWei;\n        address curren",
        "debug": "calldata_PixelsMain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_PixelsMain_0: 0x5a1a859300000000000000000000000000000000000000000000000000000000\ncalldatasize_PixelsMain: 0x4\n",
        "description": "A possible integer overflow exists in the function `bidBatch(uint256[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/29/0x05e2d7e3af7df59232d20e916751b9f5b66093b7.sol",
        "function": "bidBatch(uint256[],address)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1940,
        "code": ";\n        \n\t\tuint256 remain",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/29/0x05e2d7e3af7df59232d20e916751b9f5b66093b7.sol",
        "function": "bidBatch(uint256[],address)",
        "lineno": 194,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}