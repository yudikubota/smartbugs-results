{
  "contract": "0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5",
  "tool": "mythril",
  "start": 1563578060.0694528,
  "end": 1563578534.026997,
  "duration": 473.9575443267822,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 400,
        "code": "eUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    ",
        "debug": "calldata_ERC721_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 406,
        "code": "eUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    ",
        "debug": "calldata_ERC721_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1728,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "withdraw()",
        "lineno": 148,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1938,
        "code": "ly() public vie",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC721_4: 0x0\nstorage_0: 0x0\ncalldata_ERC721_4 + calldata_ERC721_32 + 4: 0x3ff\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 110,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2137,
        "code": "edAt;\n    }\n\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC721_4: 0x0\nstorage_0: 0x0\ncalldata_ERC721_0: 0x3dea6b9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "getMeme(uint256)",
        "lineno": 101,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3250,
        "code": ";\n\ncontract ERC721",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3302,
        "code": "Created(_owner, newMemeId, _url, _hash, now);\n        _transf",
        "debug": "mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 77,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3669,
        "code": "       memeIndexToOwner[_t",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0xb2e6ceeb00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `takeOwnership(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "takeOwnership(uint256)",
        "lineno": 70,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3749,
        "code": "to;\n        delete memeAppro",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_ERC721_4,_256): 0x0\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0xb2e6ceeb00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `takeOwnership(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "takeOwnership(uint256)",
        "lineno": 70,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4093,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "keccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_ERC721_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*calldata_ERC721_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_ERC721_4: 0x0\nstorage_0: 0x1\ncalldata_ERC721_4 + calldata_ERC721_32 + 4: 0x3ff\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4136,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "calldata_ERC721_4 + calldata_ERC721_32 + 4: 0x2a\ncalldata_ERC721_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0\ncalldata_ERC721_4: 0x0\nstorage_0: 0x1\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4153,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "calldata_ERC721_4 + calldata_ERC721_32 + 4: 0x22\ncalldata_ERC721_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffaa\ncalldata_ERC721_4: 0x0\nstorage_0: 0x1\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4158,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "calldata_ERC721_4 + calldata_ERC721_32 + 4: 0x23\ncalldata_ERC721_32 + 4: 0x1ffffffffffffff9efffffffffffffffffffffffffffffffffffffffffffffdc\nkeccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_ERC721_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC721_4: 0x0\nstorage_0: 0x1\ncaller: 0x0\nstorage_keccac_calldata_ERC721_4: 0x0\ncalldata_ERC721_0: 0x3d49ba0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `updateMemeUrl(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "updateMemeUrl(uint256,string)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4221,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "keccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*storage_0: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4250,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "mem_mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4264,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4281,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0x25\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4286,
        "code": "s is ERC721 {\n\n    event Transfer(address from, address to, uint256 tokenId);\n    event Created(address owner, uint256 tokenId, string url, uint256 hash, uint256 createdAt);\n    event UrlUpdated(address owner, uint256 tokenId, string url);\n\n    modifier onlyOwnerOf(uint256 tokenId) {\n        require(memeIndexToOwner[tokenId] == msg.sender);\n        _;\n    }\n\n    modifier onlyOwnerOfContract() {\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    struct Meme {\n        string url;\n        uint256 hash;\n        uint256 createdAt;\n    }\n\n    Meme[] memes;\n\n    //the owner can adjust the meme price\n    address contractOwner;\n\n    //the price user must pay to create a meme\n    uint price;\n\n    mapping(uint256 => address) memeIndexToOwner;\n    mapping(address => uint256) ownershipTokenCount;\n    mapping(uint => address) memeApprovals;\n\n    function CryptoMemes() public {\n        contractOwner = msg.sender;\n        price = 0.005 ether;\n    }\n\n    function getPrice() external view returns (uint) {\n        return price;\n    }\n\n    function getContractOwner() external view returns (address) {\n        return contractOwner;\n    }\n\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        ownershipTokenCount[_to]++;\n        ownershipTokenCount[_from]--;\n        memeIndexToOwner[_tokenId] = _to;\n        delete memeApprovals[_tokenId];\n        Transfer(_from, _to, _tokenId);\n    }\n\n    function _createMeme(string _url, uint256 _hash, address _owner) internal returns (uint256) {\n        uint256 newMemeId = memes.push(Meme({url : _url, hash : _hash, createdAt : now})) - 1;\n        Created(_owner, newMemeId, _url, _hash, now);\n        _transfer(0, _owner, newMemeId);\n        return newMemeId;\n    }\n\n    function createMeme(string _url, uint256 _hash) payable external {\n        _validateUrl(_url);\n        require(msg.value == price);\n        _createMeme(_url, _hash, msg.sender);\n    }\n\n    //validates the url cannot be of ambiguous length\n    function _validateUrl(string _url) pure internal {\n        require(bytes(_url).length < 1024);\n    }\n\n    function getMeme(uint256 _tokenId) public view returns (\n        string url,\n        uint256 hash,\n        uint256 createdAt\n    ) {\n        Meme storage meme = memes[_tokenId];\n        url = meme.url;\n        hash = meme.hash;\n        createdAt = meme.createdAt;\n    }\n\n    function updateMemeUrl(uint256 _tokenId, string _url) external onlyOwnerOf(_tokenId) {\n        _validateUrl(_url);\n        memes[_tokenId].url = _url;\n        UrlUpdated(msg.sender, _tokenId, _url);\n    }\n\n    function totalSupply() public view returns (uint256 total) {\n        return memes.length;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        return memeIndexToOwner[_tokenId];\n    }\n\n    function approve(address _to, uint256 _tokenId) onlyOwnerOf(_tokenId) public {\n        memeApprovals[_tokenId] = _to;\n        Approval(msg.sender, _to, _tokenId);\n    }\n\n    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    function takeOwnership(uint256 _tokenId) public {\n        require(memeApprovals[_tokenId] == msg.sender);\n        address owner = ownerOf(_tokenId);\n        _transfer(owner, msg.sender, _tokenId);\n    }\n\n    function updatePrice(uint _price) external onlyOwnerOfContract() {\n        price = _price;\n    }\n\n    function transferContractOwnership(address _newOwner) external onlyOwnerOfContract() {\n        contractOwner = _newOwner;\n    }\n\n    function withdraw() external onlyOwnerOfContract() {\n        contractOwner.transfer(address(this).balance);\n    }\n}",
        "debug": "mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_192 +\n64*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_ERC721_4 + calldata_ERC721_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\ncalldata_ERC721_4 + calldata_ERC721_4: 0x3ff\ncalldata_ERC721_0: 0x55765e9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC721: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createMeme(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x8c3cd81e8987e44b8d8702ed6d5791b346d0e1e5.sol",
        "function": "createMeme(string,uint256)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}