{
  "contract": "0x070d026502014919ba0b80cb470ee461210185fe",
  "tool": "mythril",
  "start": 1563583267.1182094,
  "end": 1563583471.622696,
  "duration": 204.50448656082153,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1181,
        "code": "        require(balanceOf[msg.sender] >= _value);\n        balanceOf[ms",
        "debug": "calldata_LBCToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_LBCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "setName(string)",
        "lineno": 112,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1617,
        "code": " modifier isRunning {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_LBCToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "stop()",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1673,
        "code": "Address {\n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_LBCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "approve(address,uint256)",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1708,
        "code": "CToken(address _addressFo",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_LBCToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "approve(address,uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2131,
        "code": "Address {\n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_LBCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2166,
        "code": "CToken(address _addressFo",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_LBCToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3165,
        "code": "rom, address indexed _to",
        "debug": "calldata_LBCToken_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_24465873643947496235832446106509767096567058095563226156125564318740882468607: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_LBCToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "burn(uint256)",
        "lineno": 118,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3482,
        "code": "Address {\n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_LBCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "transfer(address,uint256)",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3517,
        "code": "CToken(address _addressFo",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_LBCToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "transfer(address,uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4117,
        "code": " modifier isRunning {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_LBCToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "start()",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4235,
        "code": " modifier isRunning {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_LBCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "setName(string)",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4367,
        "code": "g LBCCoin for uint;\n\n    string public name = \"LeiBaoCoin\";      //  token name\n    string public symbol = \"LBC\";           //  token symbol\n    uint256 public decimals = 6;            //  token digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 63000000000000;\n    address owner = 0x0;\n\n    modifier onlyPayloadSize(uint size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function LBCToken(address _addressFounder) {\n        owner = msg.sender;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        Transfer(0x0, _addressFounder, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress onlyPayloadSize(2 * 32) returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress onlyPayloadSize(3 * 32) returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner {\n        stopped = true;\n    }\n\n    function start() isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner {\n        name = _name;\n    }\n\n    function burn(uint256 _value) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_LBCToken_4 + calldata_LBCToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_LBCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "setName(string)",
        "lineno": 30,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4381,
        "code": "g LBCCoin for uint;\n\n    string public name = \"LeiBaoCoin\";      //  token name\n    string public symbol = \"LBC\";           //  token symbol\n    uint256 public decimals = 6;            //  token digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 63000000000000;\n    address owner = 0x0;\n\n    modifier onlyPayloadSize(uint size) {\n        require(!(msg.data.length < size + 4));\n        _;\n    }\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function LBCToken(address _addressFounder) {\n        owner = msg.sender;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        Transfer(0x0, _addressFounder, valueFounder);\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress onlyPayloadSize(2 * 32) returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress onlyPayloadSize(3 * 32) returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner {\n        stopped = true;\n    }\n\n    function start() isOwner {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner {\n        name = _name;\n    }\n\n    function burn(uint256 _value) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_LBCToken_4 + calldata_LBCToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_LBCToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_LBCToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x070d026502014919ba0b80cb470ee461210185fe.sol",
        "function": "setName(string)",
        "lineno": 30,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}