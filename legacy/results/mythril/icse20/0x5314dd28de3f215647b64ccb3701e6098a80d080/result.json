{
  "contract": "0x5314dd28de3f215647b64ccb3701e6098a80d080",
  "tool": "mythril",
  "start": 1563514130.9151628,
  "end": 1563514170.70924,
  "duration": 39.79407715797424,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1609,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1609,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2496\nCall at address: 2310\nCall at address: 1874\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1874,
        "code": ".setBonusReceived(msg.sender,",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 406,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1874,
        "code": ".setBonusReceived(msg.sender,",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2496\nCall at address: 2310\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 406,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2310,
        "code": "  NewBonusAtom(msg.sender,id);\n    }\n   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 408,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2310,
        "code": "  NewBonusAtom(msg.sender,id);\n    }\n   ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2496\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 408,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2496,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "evolveByAtom(uint256)",
        "lineno": 411,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2912,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "receiveBonus()",
        "lineno": 411,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2912,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3346\nCall at address: 3188\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "receiveBonus()",
        "lineno": 411,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3188,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "receiveBonus()",
        "lineno": 411,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3188,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3346\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "receiveBonus()",
        "lineno": 411,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3346,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "receiveBonus()",
        "lineno": 411,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3723,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "rentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3723,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3993\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "rentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3993,
        "code": "difier onlyReady(uint _atomId",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "rentByAtom(uint256,uint256)",
        "lineno": 306,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6028,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6028,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6519\nCall at address: 6519\nCall at address: 6273\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 288,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6273,
        "code": "Id)) == _flag);\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6273,
        "code": "Id)) == _flag);\n    ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6519\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 288,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6519,
        "code": "    modifier onlyRen",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 292,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6689,
        "code": "DataContract.setAtom",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setFee(uint128)",
        "lineno": 341,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6881,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsRentByAtom(uint256,uint128)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6881,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7544\nCall at address: 7150\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsRentByAtom(uint256,uint128)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7150,
        "code": "difier onlyReady(uint _atomId",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsRentByAtom(uint256,uint128)",
        "lineno": 306,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7150,
        "code": "difier onlyReady(uint _atomId",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7544\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsRentByAtom(uint256,uint128)",
        "lineno": 306,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7544,
        "code": "dress);\n        CaCoreContrac",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsRentByAtom(uint256,uint128)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8340,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "autoRentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8340,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8878\nCall at address: 8610\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "autoRentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 8610,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "autoRentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8610,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8878\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "autoRentByAtom(uint256,uint256)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 8878,
        "code": "dress);\n        CaCoreContrac",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "autoRentByAtom(uint256,uint256)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10169,
        "code": "Mode == false);\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "kill()",
        "lineno": 283,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10495,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsBuyByAtom(uint256,uint128)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10495,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10764\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsBuyByAtom(uint256,uint128)",
        "lineno": 299,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10764,
        "code": "_atomId1, uint _atomId2) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setIsBuyByAtom(uint256,uint128)",
        "lineno": 313,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 11600,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setLevelup(uint8[4])",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 11600,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 12091\nCall at address: 11845\n",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setLevelup(uint8[4])",
        "lineno": 288,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 11845,
        "code": "Id)) == _flag);\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setLevelup(uint8[4])",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 12091,
        "code": "    modifier onlyRen",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setLevelup(uint8[4])",
        "lineno": 292,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 12414,
        "code": "ng(uint _atomId, bool _flag) {\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "unsetIsBuyByAtom(uint256)",
        "lineno": 299,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 13534,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setGiftMode(bool)",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 14182,
        "code": ", uint atom);\n    event NewUnsetRent(address sender, uint atom);\n    event NewUnsetBuy(address sender, uint atom);\n    event NewAutoRentAtom(address sender, uint atom);\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SetCoreInterface_4: 0x4\ncalldata_SetCoreInterface_0: 0xe47ca0cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_SetCoreInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "_function_0xe47ca0cc",
        "lineno": 260,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 14346,
        "code": "nder == CaDataContra",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x5314dd28de3f215647b64ccb3701e6098a80d080.sol",
        "function": "setPauseMode(bool)",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}