{"error": null, "issues": [{"address": 584, "code": "= address(0)) {\n      totalStores++;\n    }\n    stores[keccak256(_appNickname)] = _store;\n    ContractRegistered(storeKey, _appNickname, _store);\n  }\n\n\n  /**\n   * @dev Gets the store managing the specified app\n   * @param _appNickname The nickname of the app\n   */\n  function getStore(\n    string _appNickname\n  )\n  public\n ", "debug": "calldata_TweedentityRegistry_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TweedentityRegistry_0: 0x543a9ce400000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityRegistry: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAStore(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "setAStore(string,address)", "lineno": 170, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1465, "code": " looks ready\n   */\n  function isReady()\n  external\n  constant returns(bool)\n  {\n    Pausable pausable = Pausable(manager);\n    return totalSto", "debug": "calldata_TweedentityRegistry_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TweedentityRegistry_0: 0xffc3121500000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityRegistry: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getStore(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "getStore(string)", "lineno": 193, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1976, "code": "e specified a", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TweedentityRegistry_4 + calldata_TweedentityRegistry_4: 0x80\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_TweedentityRegistry_4_+_calldata_TweedentityRegistry_4))): 0x0\ncalldata_TweedentityRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TweedentityRegistry_0: 0x543a9ce400000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityRegistry: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAStore(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "setAStore(string,address)", "lineno": 179, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3238, "code": "ntract Pausable {\n\n  boo", "debug": "", "description": "A possible transaction order independence vulnerability exists in function reclaimEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "reclaimEther()", "lineno": 86, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3250, "code": "sol\n\ncontract Pausable {\n\n  bool", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TweedentityRegistry_0: 0x9f727c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityRegistry: 0x4\nretval_3238: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "reclaimEther()", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 3595, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "isReady()", "lineno": 203, "title": "Message call to external contract", "type": "Informational"}, {"address": 3595, "debug": "", "description": "A possible transaction order independence vulnerability exists in function isReady(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x0a66d93d08ff6c2720267936d48655452745652c.sol", "function": "isReady()", "lineno": 203, "title": "Transaction order dependence", "type": "Warning"}], "success": true}