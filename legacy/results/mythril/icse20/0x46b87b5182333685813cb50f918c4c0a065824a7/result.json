{
  "contract": "0x46b87b5182333685813cb50f918c4c0a065824a7",
  "tool": "mythril",
  "start": 1563248616.6884656,
  "end": 1563248945.7426512,
  "duration": 329.054185628891,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3213,
        "code": "ion a",
        "debug": "callvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_104513464218712855467029158844991719757099254475393801857726014260308378355740: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldatasize_ldoh: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "fallback",
        "lineno": 481,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3278,
        "code": "ic {\n        \n        ABCDtoken ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_4: 0x0\nstorage_18: 0x0\ncalldata_ldoh_0: 0x1c019a5200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "_function_0x1c019a52",
        "lineno": 94,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3920,
        "code": "ontractaddress[tokenAddress] =",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 352,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3920,
        "code": "ontractaddress[tokenAddress] =",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4155\n",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 352,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4155,
        "code": "contribution[tokenAddress] =",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 353,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5656,
        "code": " (\n                    (onlyAB",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawTokenFees(address)",
        "lineno": 412,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5656,
        "code": " (\n                    (onlyAB",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5891\n",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawTokenFees(address)",
        "lineno": 412,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5891,
        "code": "= ABCDtoken) ||\n                  ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "WithdrawTokenFees(address)",
        "lineno": 413,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7484,
        "code": "unt > 0); \n        requ",
        "debug": "calldata_ldoh_4: 0x4e209dc598153d0f8cb487042bfe7ba375f31aed6a9264e209dc598153d0f9\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x79883bba00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ChangeHodlingTime(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "ChangeHodlingTime(uint256)",
        "lineno": 384,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14780,
        "code": "a Values\n\tfunction GetSafe(uin",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x46b87b5182333685813cb50f918c4c0a065824a7.sol",
        "function": "ClaimTokens(address,uint256)",
        "lineno": 308,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}