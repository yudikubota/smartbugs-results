{
  "contract": "0xc0ce30001efeb23420d9574ca9f54a8537103c3d",
  "tool": "mythril",
  "start": 1563624959.0114427,
  "end": 1563625370.0921738,
  "duration": 411.08073115348816,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 203,
        "code": "tName = newName;\n       emit ChangeName(newName);\n    }\n    \n    function getCurrentRoundLeft() public view returns(uint left,uint ",
        "debug": "calldata_agame_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_agame_0: 0xb5ee00600000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setContractName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "setContractName(string)",
        "lineno": 75,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 416,
        "code": ";\n    }\n    \n    function gameInfo() public view returns(string _gameName,uint _roundCount,uint _remaining,",
        "debug": "storage_11: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_agame_0: 0x8222e88b00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gettAddressList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "gettAddressList()",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1516,
        "code": "oundCount,uint _re",
        "debug": "storage_11: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_agame_0: 0x8222e88b00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gettAddressList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "gettAddressList()",
        "lineno": 103,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1518,
        "code": "oundCount,uint _re",
        "debug": "storage_11: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_agame_0: 0x8222e88b00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gettAddressList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "gettAddressList()",
        "lineno": 103,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2968,
        "code": "yer(sender,value,now",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0xfffffffffffffffffffffffffffffffffffffffffffff02806de745237dffead\ncallvalue: 0x13eee178412fd7f7943e\nstorage_5: 0x13a8609d035183df808d\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nretval_2531: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_3: 0x0\ncalldata_agame_0: 0xd96a094a00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\n",
        "description": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "buy(uint256)",
        "lineno": 143,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3192,
        "code": ";\n\ncontract agame ",
        "debug": "callvalue: 0x12254204c0a326000000\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x6040211808013000000\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_2531: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_3: 0x0\ncalldata_agame_0: 0xd96a094a00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\n",
        "description": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "buy(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4236,
        "code": "\n        roundSupportMapping[roundCount] = currentRoundSupport;\n        startTime = ",
        "debug": "storage_4: 0x7ebec8a000008000d555ad555555600000000000000000000000000000000000\ncallvalue: 0x43c05c7a14eb7800000\nstorage_5: 0x43c05c7a14eb7800000\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_3: 0x0\ncalldata_agame_0: 0xd96a094a00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\n",
        "description": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "buy(uint256)",
        "lineno": 154,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4274,
        "code": " onlyOwner r",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x2d02c7e14aff9acc00\nstorage_5: 0x2d02c7e14aff9acc00\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_3: 0x0\ncalldata_agame_0: 0xd96a094a00000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\n",
        "description": "A possible integer overflow exists in the function `buy(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "buy(uint256)",
        "lineno": 160,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4384,
        "code": "ntract agame {\n   \n    address internal owner;\n    uint256 internal startCount;\n    \n    uint internal roundCount; \n    uint internal startTime;\n    uint internal currentRoundSupport;\n    uint internal currentRoundLeft;\n    uint internal timeout;\n    mapping(uint => uint) roundSupportMapping;\n   \n    uint constant internal decimals = 18;\n    uint constant internal min_wei = 1e9;\n    uint constant internal dividendFee = 10;\n    uint constant internal dynamicDividendFee = 6;\n    uint constant internal platformDividendFee = 4;\n   \n    constructor(uint _startCount,uint timeout_) public{\n        require(_startCount>0);\n        owner = msg.sender;\n        startCount = _startCount * 1e14;\n        currentRoundLeft = startCount;\n        currentRoundSupport = startCount;\n        roundCount = 1;\n        startTime = now;\n        timeout = timeout_;\n        roundSupportMapping[roundCount] = currentRoundLeft;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier running() {\n        require((now - startTime) < timeout,'time is out');\n        _;\n    }\n    \n    modifier correctValue(uint256 _eth) {\n        require(_eth >= min_wei, \"can not lessthan 1 gwei \");\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\n        _;\n    }\n    \n   string contractName = \"OGAME\";\n   \n   mapping(address => Buyer) buyerList;\n   mapping(address => Buyer) buyerList_next;\n   address[] addressList;\n   address[] addressList_next;\n   \n   event ChangeName(string name_);\n   event BuySuccess(address who,uint256 value,uint againCount);\n   event SendDivedend(address who,uint256 value);\n   event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    event ReturnValue(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    function getContractName() public view returns(string name_){    \n        return contractName;\n    }\n   \n    function setContractName(string newName) public onlyOwner{\n       contractName = newName;\n       emit ChangeName(newName);\n    }\n    \n    function getCurrentRoundLeft() public view returns(uint left,uint _all){\n        return (currentRoundLeft,currentRoundSupport);\n    }\n    \n    function transfer(address to_,uint256 amount) public onlyOwner returns(bool success_){\n        to_.transfer(amount);\n        emit Transfer(address(this), to_, amount);\n        return true;\n    }\n   \n    function dealDivedendOfBuyers() internal onlyOwner returns(bool success_){\n        for (uint128 i = 0; i < addressList.length; i++) {\n            uint256 _amount = buyerList[addressList[i]].amount*(100+dividendFee)/100;\n            address _to = addressList[i];\n            _to.transfer(_amount);\n            emit SendDivedend(_to, _amount);\n        }\n        return true;\n    }\n   \n    function gettAddressList() public view returns(address[] addressList_){\n        return addressList;\n    }\n    \n    function gameInfo() public view returns(string _gameName,uint _roundCount,uint _remaining,uint _all,uint _leftTime){\n        return (contractName,roundCount,currentRoundLeft,currentRoundSupport,timeout-(now - startTime));\n    }\n   \n    struct Buyer{\n        address who;\n        uint256 amount;\n        uint time;\n        uint againCount;\n        bool isValue;\n    }\n  \n    function buy(uint againCount_) payable correctValue(msg.value) running public{\n\n        uint256 value = msg.value;\n        address sender = msg.sender;\n        uint returnValue = 0;\n        if(currentRoundLeft <= value){\n           returnValue = value - currentRoundLeft;\n           value = currentRoundLeft;\n        }\n\n        currentRoundLeft -= value;\n\n        if(currentRoundLeft == 0){\n            _initNextRound();\n        }\n\n        if(returnValue > 0){\n            sender.transfer(returnValue);\n            emit ReturnValue(address(this), sender, returnValue);\n        }\n\n        Buyer memory buyer;\n        if(buyerList[sender].isValue){\n            buyer = buyerList[sender];\n            buyer.amount = buyer.amount + value;\n            buyerList[sender] = (buyer);\n        }else{\n            addressList.push(sender);\n            buyer = Buyer(sender,value,now,againCount_,true);\n            buyerList[sender] = (buyer);\n        }\n        emit BuySuccess(sender,value,againCount_);\n       \n    }\n    \n    // \u5185\u90e8\u65b9\u6cd5\n    function _initNextRound() internal{ \n        currentRoundSupport = currentRoundSupport * (100 + dividendFee + dynamicDividendFee + platformDividendFee)/100;\n        currentRoundLeft = currentRoundSupport;\n        roundCount++;\n        roundSupportMapping[roundCount] = currentRoundSupport;\n        startTime = now;\n    }\n    \n    // view\n    function mybalance() public view onlyOwner returns(uint256 balance){\n        return address(this).balance;\n    }\n    \n    function userAmount(address user) public view returns(uint256 _amount,uint256 _devidend){\n        return (buyerList[user].amount,(buyerList[user].amount * (100+dividendFee) / 100));\n    }\n    \n    function userDevidend(address user) public view returns(uint256 _amount){\n        return (buyerList[user].amount * (100+dividendFee) / 100);\n    }\n  \n}",
        "debug": "calldata_agame_4 + calldata_agame_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_agame_0: 0xb5ee00600000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setContractName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "setContractName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4398,
        "code": "ntract agame {\n   \n    address internal owner;\n    uint256 internal startCount;\n    \n    uint internal roundCount; \n    uint internal startTime;\n    uint internal currentRoundSupport;\n    uint internal currentRoundLeft;\n    uint internal timeout;\n    mapping(uint => uint) roundSupportMapping;\n   \n    uint constant internal decimals = 18;\n    uint constant internal min_wei = 1e9;\n    uint constant internal dividendFee = 10;\n    uint constant internal dynamicDividendFee = 6;\n    uint constant internal platformDividendFee = 4;\n   \n    constructor(uint _startCount,uint timeout_) public{\n        require(_startCount>0);\n        owner = msg.sender;\n        startCount = _startCount * 1e14;\n        currentRoundLeft = startCount;\n        currentRoundSupport = startCount;\n        roundCount = 1;\n        startTime = now;\n        timeout = timeout_;\n        roundSupportMapping[roundCount] = currentRoundLeft;\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier running() {\n        require((now - startTime) < timeout,'time is out');\n        _;\n    }\n    \n    modifier correctValue(uint256 _eth) {\n        require(_eth >= min_wei, \"can not lessthan 1 gwei \");\n        require(_eth <= 100000000000000000000000, \"no vitalik, no\");\n        _;\n    }\n    \n   string contractName = \"OGAME\";\n   \n   mapping(address => Buyer) buyerList;\n   mapping(address => Buyer) buyerList_next;\n   address[] addressList;\n   address[] addressList_next;\n   \n   event ChangeName(string name_);\n   event BuySuccess(address who,uint256 value,uint againCount);\n   event SendDivedend(address who,uint256 value);\n   event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    event ReturnValue(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    function getContractName() public view returns(string name_){    \n        return contractName;\n    }\n   \n    function setContractName(string newName) public onlyOwner{\n       contractName = newName;\n       emit ChangeName(newName);\n    }\n    \n    function getCurrentRoundLeft() public view returns(uint left,uint _all){\n        return (currentRoundLeft,currentRoundSupport);\n    }\n    \n    function transfer(address to_,uint256 amount) public onlyOwner returns(bool success_){\n        to_.transfer(amount);\n        emit Transfer(address(this), to_, amount);\n        return true;\n    }\n   \n    function dealDivedendOfBuyers() internal onlyOwner returns(bool success_){\n        for (uint128 i = 0; i < addressList.length; i++) {\n            uint256 _amount = buyerList[addressList[i]].amount*(100+dividendFee)/100;\n            address _to = addressList[i];\n            _to.transfer(_amount);\n            emit SendDivedend(_to, _amount);\n        }\n        return true;\n    }\n   \n    function gettAddressList() public view returns(address[] addressList_){\n        return addressList;\n    }\n    \n    function gameInfo() public view returns(string _gameName,uint _roundCount,uint _remaining,uint _all,uint _leftTime){\n        return (contractName,roundCount,currentRoundLeft,currentRoundSupport,timeout-(now - startTime));\n    }\n   \n    struct Buyer{\n        address who;\n        uint256 amount;\n        uint time;\n        uint againCount;\n        bool isValue;\n    }\n  \n    function buy(uint againCount_) payable correctValue(msg.value) running public{\n\n        uint256 value = msg.value;\n        address sender = msg.sender;\n        uint returnValue = 0;\n        if(currentRoundLeft <= value){\n           returnValue = value - currentRoundLeft;\n           value = currentRoundLeft;\n        }\n\n        currentRoundLeft -= value;\n\n        if(currentRoundLeft == 0){\n            _initNextRound();\n        }\n\n        if(returnValue > 0){\n            sender.transfer(returnValue);\n            emit ReturnValue(address(this), sender, returnValue);\n        }\n\n        Buyer memory buyer;\n        if(buyerList[sender].isValue){\n            buyer = buyerList[sender];\n            buyer.amount = buyer.amount + value;\n            buyerList[sender] = (buyer);\n        }else{\n            addressList.push(sender);\n            buyer = Buyer(sender,value,now,againCount_,true);\n            buyerList[sender] = (buyer);\n        }\n        emit BuySuccess(sender,value,againCount_);\n       \n    }\n    \n    // \u5185\u90e8\u65b9\u6cd5\n    function _initNextRound() internal{ \n        currentRoundSupport = currentRoundSupport * (100 + dividendFee + dynamicDividendFee + platformDividendFee)/100;\n        currentRoundLeft = currentRoundSupport;\n        roundCount++;\n        roundSupportMapping[roundCount] = currentRoundSupport;\n        startTime = now;\n    }\n    \n    // view\n    function mybalance() public view onlyOwner returns(uint256 balance){\n        return address(this).balance;\n    }\n    \n    function userAmount(address user) public view returns(uint256 _amount,uint256 _devidend){\n        return (buyerList[user].amount,(buyerList[user].amount * (100+dividendFee) / 100));\n    }\n    \n    function userDevidend(address user) public view returns(uint256 _amount){\n        return (buyerList[user].amount * (100+dividendFee) / 100);\n    }\n  \n}",
        "debug": "calldata_agame_4 + calldata_agame_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_agame_0: 0xb5ee00600000000000000000000000000000000000000000000000000000000\ncalldatasize_agame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setContractName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc0ce30001efeb23420d9574ca9f54a8537103c3d.sol",
        "function": "setContractName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}