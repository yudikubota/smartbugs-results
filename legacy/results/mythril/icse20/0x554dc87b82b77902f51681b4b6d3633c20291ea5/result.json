{
  "contract": "0x554dc87b82b77902f51681b4b6d3633c20291ea5",
  "tool": "mythril",
  "start": 1563549652.0889516,
  "end": 1563549805.6338696,
  "duration": 153.54491806030273,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1235,
        "code": "e(msg.sender != sendToke",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Multisig: 0xa0\ncalldata_Multisig_4: 0x0\nstorage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0x437a4b00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "fallback",
        "lineno": 141,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2018,
        "code": "   token.claimTeamReserve();\n    }\n\n    function claimEcoSystemReservePart1() pu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "fallback",
        "lineno": 153,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2018,
        "code": "   token.claimTeamReserve();\n    }\n\n    function claimEcoSystemReservePart1() pu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "fallback",
        "lineno": 153,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2269,
        "code": "\n/**\n * @title ERC",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Multisig: 0x400000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0xd241c0f00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createTransferTokensRequest(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "createTransferTokensRequest(address,uint256)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2472,
        "code": " created ETH transfer request.\n",
        "debug": "The exception is triggered under the following conditions:\n\nkeccac_2_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n4*storage_2: 0x200000000000000000000000000000000000000000007fffffffffffff\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Multisig: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n4*storage_2: 0x2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0xd241c0f00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "createTransferTokensRequest(address,uint256)",
        "lineno": 133,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2697,
        "code": "confirmators.length; i++) {\n\t ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Multisig: 0xa0\ncalldata_Multisig_4: 0x0\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0x3af8e60000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "approveEtherWithdrawRequest(uint256)",
        "lineno": 109,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3328,
        "code": "createTransferTokensRequest creates a new Token transfer request\n     * @param _toAdd",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function approveEtherWithdrawRequest(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "approveEtherWithdrawRequest(uint256)",
        "lineno": 122,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3369,
        "code": "Struct[] public sendTokens;\n\n\tuint public ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Multisig: 0xa0\ncalldata_Multisig_4: 0x0\nstorage_1: 0x0\ncalldata_Multisig_0: 0x3bed33ce00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "_function_0x3bed33ce",
        "lineno": 57,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3681,
        "code": "ion claimEcoSystemReserv",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimTeamReserve()",
        "lineno": 160,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3681,
        "code": "ion claimEcoSystemReserv",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimTeamReserve(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimTeamReserve()",
        "lineno": 160,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3928,
        "code": " function recoverToken(address _to",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimEcoSystemReservePart1()",
        "lineno": 164,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3928,
        "code": " function recoverToken(address _to",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimEcoSystemReservePart1(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimEcoSystemReservePart1()",
        "lineno": 164,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4115,
        "code": "\n/**\n * @title ERC",
        "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Multisig: 0x400000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0x890c518900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createNewEtherWithdrawRequest(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "createNewEtherWithdrawRequest(address,uint256)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4316,
        "code": "eEtherWithdrawRequest approve already",
        "debug": "The exception is triggered under the following conditions:\n\nkeccac_2_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n4*storage_1: 0x200000000000000000000000000000000000000000007fffffffffffff\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Multisig: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*storage_1: 0x2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0x890c518900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "createNewEtherWithdrawRequest(address,uint256)",
        "lineno": 102,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4718,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "recoverToken(address)",
        "lineno": 167,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4718,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function recoverToken(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "recoverToken(address)",
        "lineno": 167,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5213,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimEcoSystemReservePart2()",
        "lineno": 167,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5213,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimEcoSystemReservePart2(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "claimEcoSystemReservePart2()",
        "lineno": 167,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5250,
        "code": "irmationCount;\n\tmapping(address => b",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Multisig: 0xa0\ncalldata_Multisig_4: 0x0\nstorage_2: 0x0\ncalldata_Multisig_0: 0xf5c6ca0800000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "_function_0xf5c6ca08",
        "lineno": 59,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5393,
        "code": "herStruct {\n\t\taddress payable toAddr;\n\t\tuint amount;\n\t\taddress[] confirmators;\n\t\tbool completed;\n\t}\n\t\n\tstruct SendTokensStruct {\n\t\taddress toAddr;\n\t\tuint amount;\n\t\taddress[] confirmators;\n\t\tbool completed;\n\t}\n\t\n\tIERC20 public token;\n\n\tWithdrawEtherStruct[] public withdrawEther;\n\tSendTokensStruct[] public sendTokens;\n\n\tuint public confirmationCount;\n\tmapping(address => bool) public owners;\n\n\tmodifier onlyOwners { \n\t\trequire(owners[msg.sender]); \n\t\t_; \n\t}\n\t\n\tconstructor(address _tokenAddress, address[] memory _addresses, uint _confirmationCount) public {\n\t\trequire(_addresses.length >= _confirmationCount && _confirmationCount > 1);\n\t\t\n\t\tfor (uint i = 0; i < _addresses.length; i++){\n\t\t\towners[_addresses[i]] = true;\n\t\t}\n\t\t\n\t\ttoken = IERC20(_tokenAddress);\n\n\t\tconfirmationCount = _confirmationCount;\n\t}\n\n\t/**\n     * @dev changeTokenAddress changing token address only when it is not set yet.\n     * @param _tokenAddress New token address.\n     */\n\tfunction changeTokenAddress(address _tokenAddress) public  {\n\t\trequire (owners[msg.sender]);\n\t\trequire (token == IERC20(address(0)));\n\t\ttoken = IERC20(_tokenAddress);\n\t}\n\t\n    \n    /**\n     * @dev createNewEtherWithdrawRequest creates a new ETH transfer request\n     * @param _toAddr The addresses that will receive ETH.\n     * @param _amount The number of ETH that can be received.\n     */\n\tfunction createNewEtherWithdrawRequest(address payable _toAddr, uint _amount) public onlyOwners {\n\t\taddress[] memory conf;\n\t\twithdrawEther.push(WithdrawEtherStruct(_toAddr, _amount, conf, false));\n\t\twithdrawEther[withdrawEther.length-1].confirmators.push(msg.sender);\n\t}\n\t\n\t/**\n     * @dev approveEtherWithdrawRequest approve already created ETH transfer request.\n     * This function can be used only by one of owners.\n     * @param withdrawEtherId means position of withdrawEther array.\n     */\n\tfunction approveEtherWithdrawRequest(uint withdrawEtherId) public onlyOwners {\n\t    require(!withdrawEther[withdrawEtherId].completed);\n\t    \n\t    for (uint i = 0; i < withdrawEther[withdrawEtherId].confirmators.length; i++) {\n\t        require (msg.sender != withdrawEther[withdrawEtherId].confirmators[i]);\n\t    }\n\t    \n\t    withdrawEther[withdrawEtherId].confirmators.push(msg.sender);\n\t    \n\t    if (withdrawEther[withdrawEtherId].confirmators.length >= confirmationCount) {\n\t        withdrawEther[withdrawEtherId].completed = true;\n\t        withdrawEther[withdrawEtherId].toAddr.transfer(withdrawEther[withdrawEtherId].amount);\n\t    }\n\t}\n\t\n\t/**\n     * @dev createTransferTokensRequest creates a new Token transfer request\n     * @param _toAddr The addresses that will receive tokens.\n     * @param _amount The number of tokens that can be received.\n     */\n\tfunction createTransferTokensRequest(address _toAddr, uint _amount) public onlyOwners {\n\t    address[] memory conf;\n\t\tsendTokens.push(SendTokensStruct(_toAddr, _amount, conf, false));\n\t\tsendTokens[sendTokens.length-1].confirmators.push(msg.sender);\n\t}\n\t\n\t/**\n     * @dev approveEtherWithdrawRequest approve already created ETH transfer request.\n     * This function can be used only by one of owners.\n     * @param sendTokensId means position of sendTokens array.\n     */\n\tfunction approveTransferTokensRequest(uint sendTokensId) public onlyOwners {\n\t    require(!sendTokens[sendTokensId].completed);\n\t    \n\t    for (uint i = 0; i < sendTokens[sendTokensId].confirmators.length; i++) {\n\t        require(msg.sender != sendTokens[sendTokensId].confirmators[i]);\n\t    }\n\t    \n\t    sendTokens[sendTokensId].confirmators.push(msg.sender);\n\t    \n\t    if (sendTokens[sendTokensId].confirmators.length >= confirmationCount) {\n\t       sendTokens[sendTokensId].completed = true;\n\t       token.transfer(sendTokens[sendTokensId].toAddr, sendTokens[sendTokensId].amount);\n\t    }\n\t}\n\n\tfunction claimTeamReserve() public onlyOwners {\n        token.claimTeamReserve();\n    }\n\n    function claimEcoSystemReservePart1() public onlyOwners {\n    \ttoken.claimEcoSystemReservePart1();\n    }\n\n    function claimEcoSystemReservePart2() public onlyOwners {\n    \ttoken.claimEcoSystemReservePart2();\n    }\n\n    function recoverToken(address _token) public onlyOwners {\n    \ttoken.recoverToken(_token);\n    }\n}",
        "debug": "keccac_2_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n4*storage_1: 0xce8020bf5c6c303b9b5944775dc2abc6efd7f18c338b9b0b5c4501f04f910366\nstorage_2 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*storage_1: 0x948230a9cb6bbbbb19130d447c1f5338efe77c2bbb741bec5a7591fd4fedf909\ncalldatasize_Multisig: 0x80000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Multisig_0: 0x890c518900000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createNewEtherWithdrawRequest(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x554dc87b82b77902f51681b4b6d3633c20291ea5.sol",
        "function": "createNewEtherWithdrawRequest(address,uint256)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}