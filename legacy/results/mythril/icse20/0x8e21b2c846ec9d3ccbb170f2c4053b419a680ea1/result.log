{"error": null, "issues": [{"address": 2700, "code": ";\n\n// File: /home/", "debug": "calldata_SocialTrading_32 + 4: 0xb8779ffb0f503efca75784f584bf9e48aa017b4fa3ef41c70865eac46fd3e9ee\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n1,\n_____256): 0x14af83fc0f96e0cc7c0fbd91fe04ffd0e0f11ef8bf0206831f52253fdcff5c\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n0,\n_____256): 0x380e75c024c09ca0e073a2b540ce7a2dbced180b0ac2d27631713915448257f7\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n2,\n_____256): 0x872a3b94cfffa7d59bf7d1b7cb5bc584c1627dafc8dfd9bca7b7709f5a5e4939\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n3,\n_____256): 0x883aff2bffdfe5ac0fc0f6dfdd181d0506cdfdd68faf0ffff9154c09d67ace1b\ncalldata_SocialTrading_0: 0xec8337000000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `follow(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "follow(address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2792, "code": "leader to stop copy trade.\n   */\n  function unfollow", "debug": "calldata_SocialTrading_32 + 4: 0xc05aa44ef3d2f7fefe8ffbefffcd9c17cd27bb5ffd15a8043ffdc0bec1b78115\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n1,\n_____256): 0x3fdfdf8d1fef117c273b089ff785de807e105ff002028ff9fefee04f2c3239e\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n0,\n_____256): 0x79fd7f4a7bb52021ec9de70280ae3260e3e03a21010406008665c6048677a69b\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n2,\n_____256): 0xa3c5ef239cb06fa336545f43df479c55176cafb001aca51a001ff855c4737a97\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n3,\n_____256): 0x1de3ef4a21c887241c0a0d3fa0c4374a2faa54d0001983e6ffffffea39dec915\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SocialTrading_0: 0xec8337000000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `follow(address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "follow(address,uint256)", "lineno": 196, "title": "Integer Underflow", "type": "Warning"}, {"address": 3506, "code": "indexed leader, address indexed follower, uint percentage);", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SocialTrading_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x0\ncalldata_SocialTrading_0: 0x5f4daa1c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "_function_0x5f4daa1c", "lineno": 150, "title": "Exception state", "type": "Informational"}, {"address": 3621, "code": "ollowers;\n  mapping(address => address[]) public leaderToFo", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SocialTrading_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x0\ncalldata_SocialTrading_0: 0x6515485c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "_function_0x6515485c", "lineno": 145, "title": "Exception state", "type": "Informational"}, {"address": 5153, "code": "feeToken.transferFrom(_follower, relay, _rel", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "distributeReward(address,address,uint256,uint256,bytes32[4])", "lineno": 282, "title": "Message call to external contract", "type": "Informational"}, {"address": 5153, "code": "feeToken.transferFrom(_follower, relay, _rel", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5403\n", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "distributeReward(address,address,uint256,uint256,bytes32[4])", "lineno": 282, "title": "Multiple Calls", "type": "Information"}, {"address": 5403, "code": "ward(\n        _leader,\n      ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "distributeReward(address,address,uint256,uint256,bytes32[4])", "lineno": 283, "title": "Message call to external contract", "type": "Informational"}, {"address": 7082, "code": "elete;\n    followerToLeadersIndex[_follower].length -= 1;\n\n    uint8 rowToDelet", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 206, "title": "Exception state", "type": "Informational"}, {"address": 7207, "code": "nt8(leaderToFollowers[_leader][_follower]);\n  ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x60\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x60\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 209, "title": "Exception state", "type": "Informational"}, {"address": 7785, "code": "rToFollowersIndex[_leader].length -= 1;\n    emit UnFollow(_leader, _followe", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfd\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7ffffffffffffffffbfffffffffffffffffffffffffffffffffffffffffffefa\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0xfc\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 213, "title": "Exception state", "type": "Informational"}, {"address": 7910, "code": "\n\n  function getFriends(address _user) public", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe000000000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5fffffffffffdfffffffffffffffffff7fffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0xfd\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x0\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 215, "title": "Exception state", "type": "Informational"}, {"address": 8958, "code": "ibUserInfo.Following)) public followerToLeaders; // Following list\n  mapping(address => address[]) public followerToLeadersIndex; // Following list\n  mapping(address => mapping(address => uint8)) public leaderToFollowers;\n  mapping(address => address[]) public leaderToFollowersIndex; // Follower list\n\n  mapping(address => bool) public relays;\n\n  event Follow(address indexed leader, address indexed follower, uint percentage);\n  event UnFollow(address indexed leader, address indexed follower);\n  event AddRelay(address indexed relay);\n  event RemoveRelay(address indexed relay);\n  event PaidReward(\n    address indexed leader,\n    address indexed follower,\n    address indexed relay,\n    uint rewardAndFee,\n    bytes32 leaderOpenOrderHash,\n    bytes32 leaderCloseOrderHash,\n    bytes32 followerOpenOrderHash,\n    bytes32 followercloseOrderHash\n  );\n\n  constructor (\n    address _feeWallet,\n    ERC20 _feeToken\n  ) public\n  {\n    feeWallet = _feeWallet;\n    feeToken = _feeToken;\n  }\n\n  function() public {\n    revert();\n  }\n\n  /**\n   * @dev Follow leader to copy trade.\n   */\n  function follow(address _leader, uint256 _percentage) external {\n    require(getCurrentPercentage(msg.sender) + _percentage <= 100 ether, \"Following percentage more than 100%.\");\n    uint8 index = uint8(followerToLeadersIndex[msg.sender].push(_leader) - 1);\n    followerToLeaders[msg.sender][_leader] = LibUserInfo.Following(\n      _leader,\n      _percentage,\n      index\n    );\n\n    uint8 index2 = uint8(leaderToFollowersIndex[_leader].push(msg.sender) - 1);\n    leaderToFollowers[_leader][msg.sender] = index2;\n    emit Follow(_leader, msg.sender, _percentage);\n  }\n\n  /**\n   * @dev UnFollow leader to stop copy trade.\n   */\n  function unfollow(address _leader) external {\n    _unfollow(msg.sender, _leader);\n  }\n\n  function _unfollow(address _follower, address _leader) private {\n    uint8 rowToDelete = uint8(followerToLeaders[_follower][_leader].index);\n    address keyToMove = followerToLeadersIndex[_follower][followerToLeadersIndex[_follower].length - 1];\n    followerToLeadersIndex[_follower][rowToDelete] = keyToMove;\n    followerToLeaders[_follower][keyToMove].index = rowToDelete;\n    followerToLeadersIndex[_follower].length -= 1;\n\n    uint8 rowToDelete2 = uint8(leaderToFollowers[_leader][_follower]);\n    address keyToMove2 = leaderToFollowersIndex[_leader][leaderToFollowersIndex[_leader].length - 1];\n    leaderToFollowersIndex[_leader][rowToDelete2] = keyToMove2;\n    leaderToFollowers[_leader][keyToMove2] = rowToDelete2;\n    leaderToFollowersIndex[_leader].length -= 1;\n    emit UnFollow(_leader, _follower);\n  }\n\n  function getFriends(address _user) public view returns (address[]) {\n    address[] memory result = new address[](followerToLeadersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      result[counter] = followerToLeadersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getFollowers(address _user) public view returns (address[]) {\n    address[] memory result = new address[](leaderToFollowersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < leaderToFollowersIndex[_user].length; i++) {\n      result[counter] = leaderToFollowersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getCurrentPercentage(address _user) internal view returns (uint) {\n    uint sum = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      address leader = followerToLeadersIndex[_user][i];\n      sum += followerToLeaders[_user][leader].percentage;\n    }\n    return sum;\n  }\n\n  /**\n   * @dev Register relay to contract by the owner.\n   */\n  function registerRelay(address _relay) onlyOwner external {\n    relays[_relay] = true;\n    emit AddRelay(_relay);\n  }\n\n  /**\n   * @dev Remove relay.\n   */\n  function removeRelay(address _relay) onlyOwner external {\n    relays[_relay] = false;\n    emit RemoveRelay(_relay);\n  }\n\n  function distributeReward(\n    address _leader,\n    address _follower,\n    uint _reward,\n    uint _relayFee,\n    bytes32[4] _orderHashes\n  ) external\n  {\n    // orderHashes[0] = leaderOpenOrderHash\n    // orderHashes[1] = leaderCloseOrderHash\n    // orderHashes[2] = followerOpenOrderHash\n    // orderHashes[3] = followerCloseOrderHash\n    address relay = msg.sender;\n    require(relays[relay]);\n    // Accept only trusted relay\n    uint256 allowance = feeToken.allowance(_follower, address(this));\n    uint256 balance = feeToken.balanceOf(_follower);\n    uint rewardAndFee = _reward + _relayFee;\n    if ((balance >= rewardAndFee) && (allowance >= rewardAndFee)) {\n      feeToken.transferFrom(_follower, _leader, _reward);\n      feeToken.transferFrom(_follower, relay, _relayFee);\n      emit PaidReward(\n        _leader,\n        _follower,\n        relay,\n        rewardAndFee,\n        _orderHashes[0],\n        _orderHashes[1],\n        _orderHashes[2],\n        _orderHashes[3]\n      );\n    } else {\n      _unfollow(_follower, _leader);\n    }\n  }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xdde8c45c6fbca9a944ff30c36141355562587812256b141752088f254c7924c5\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x90127ac22196f53997f8a2c301213aa6735f7fd085f046d1dc139e20456ff6e5\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0xc5\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `unfollow(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 143, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8960, "code": "ibUserInfo.Following)) public followerToLeaders; // Following list\n  mapping(address => address[]) public followerToLeadersIndex; // Following list\n  mapping(address => mapping(address => uint8)) public leaderToFollowers;\n  mapping(address => address[]) public leaderToFollowersIndex; // Follower list\n\n  mapping(address => bool) public relays;\n\n  event Follow(address indexed leader, address indexed follower, uint percentage);\n  event UnFollow(address indexed leader, address indexed follower);\n  event AddRelay(address indexed relay);\n  event RemoveRelay(address indexed relay);\n  event PaidReward(\n    address indexed leader,\n    address indexed follower,\n    address indexed relay,\n    uint rewardAndFee,\n    bytes32 leaderOpenOrderHash,\n    bytes32 leaderCloseOrderHash,\n    bytes32 followerOpenOrderHash,\n    bytes32 followercloseOrderHash\n  );\n\n  constructor (\n    address _feeWallet,\n    ERC20 _feeToken\n  ) public\n  {\n    feeWallet = _feeWallet;\n    feeToken = _feeToken;\n  }\n\n  function() public {\n    revert();\n  }\n\n  /**\n   * @dev Follow leader to copy trade.\n   */\n  function follow(address _leader, uint256 _percentage) external {\n    require(getCurrentPercentage(msg.sender) + _percentage <= 100 ether, \"Following percentage more than 100%.\");\n    uint8 index = uint8(followerToLeadersIndex[msg.sender].push(_leader) - 1);\n    followerToLeaders[msg.sender][_leader] = LibUserInfo.Following(\n      _leader,\n      _percentage,\n      index\n    );\n\n    uint8 index2 = uint8(leaderToFollowersIndex[_leader].push(msg.sender) - 1);\n    leaderToFollowers[_leader][msg.sender] = index2;\n    emit Follow(_leader, msg.sender, _percentage);\n  }\n\n  /**\n   * @dev UnFollow leader to stop copy trade.\n   */\n  function unfollow(address _leader) external {\n    _unfollow(msg.sender, _leader);\n  }\n\n  function _unfollow(address _follower, address _leader) private {\n    uint8 rowToDelete = uint8(followerToLeaders[_follower][_leader].index);\n    address keyToMove = followerToLeadersIndex[_follower][followerToLeadersIndex[_follower].length - 1];\n    followerToLeadersIndex[_follower][rowToDelete] = keyToMove;\n    followerToLeaders[_follower][keyToMove].index = rowToDelete;\n    followerToLeadersIndex[_follower].length -= 1;\n\n    uint8 rowToDelete2 = uint8(leaderToFollowers[_leader][_follower]);\n    address keyToMove2 = leaderToFollowersIndex[_leader][leaderToFollowersIndex[_leader].length - 1];\n    leaderToFollowersIndex[_leader][rowToDelete2] = keyToMove2;\n    leaderToFollowers[_leader][keyToMove2] = rowToDelete2;\n    leaderToFollowersIndex[_leader].length -= 1;\n    emit UnFollow(_leader, _follower);\n  }\n\n  function getFriends(address _user) public view returns (address[]) {\n    address[] memory result = new address[](followerToLeadersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      result[counter] = followerToLeadersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getFollowers(address _user) public view returns (address[]) {\n    address[] memory result = new address[](leaderToFollowersIndex[_user].length);\n    uint counter = 0;\n    for (uint i = 0; i < leaderToFollowersIndex[_user].length; i++) {\n      result[counter] = leaderToFollowersIndex[_user][i];\n      counter++;\n    }\n    return result;\n  }\n\n  function getCurrentPercentage(address _user) internal view returns (uint) {\n    uint sum = 0;\n    for (uint i = 0; i < followerToLeadersIndex[_user].length; i++) {\n      address leader = followerToLeadersIndex[_user][i];\n      sum += followerToLeaders[_user][leader].percentage;\n    }\n    return sum;\n  }\n\n  /**\n   * @dev Register relay to contract by the owner.\n   */\n  function registerRelay(address _relay) onlyOwner external {\n    relays[_relay] = true;\n    emit AddRelay(_relay);\n  }\n\n  /**\n   * @dev Remove relay.\n   */\n  function removeRelay(address _relay) onlyOwner external {\n    relays[_relay] = false;\n    emit RemoveRelay(_relay);\n  }\n\n  function distributeReward(\n    address _leader,\n    address _follower,\n    uint _reward,\n    uint _relayFee,\n    bytes32[4] _orderHashes\n  ) external\n  {\n    // orderHashes[0] = leaderOpenOrderHash\n    // orderHashes[1] = leaderCloseOrderHash\n    // orderHashes[2] = followerOpenOrderHash\n    // orderHashes[3] = followerCloseOrderHash\n    address relay = msg.sender;\n    require(relays[relay]);\n    // Accept only trusted relay\n    uint256 allowance = feeToken.allowance(_follower, address(this));\n    uint256 balance = feeToken.balanceOf(_follower);\n    uint rewardAndFee = _reward + _relayFee;\n    if ((balance >= rewardAndFee) && (allowance >= rewardAndFee)) {\n      feeToken.transferFrom(_follower, _leader, _reward);\n      feeToken.transferFrom(_follower, relay, _relayFee);\n      emit PaidReward(\n        _leader,\n        _follower,\n        relay,\n        rewardAndFee,\n        _orderHashes[0],\n        _orderHashes[1],\n        _orderHashes[2],\n        _orderHashes[3]\n      );\n    } else {\n      _unfollow(_follower, _leader);\n    }\n  }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x40400000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffc00000000000000000000000000000000000000000000000000000000000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SocialTrading_4: 0x0\ncalldata_SocialTrading_0: 0x15a4ead00000000000000000000000000000000000000000000000000000000\ncalldatasize_SocialTrading: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `unfollow(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0x8e21b2c846ec9d3ccbb170f2c4053b419a680ea1.sol", "function": "unfollow(address)", "lineno": 143, "title": "Integer Overflow ", "type": "Warning"}], "success": true}