{
  "contract": "0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de",
  "tool": "mythril",
  "start": 1563616780.1307518,
  "end": 1563617017.70038,
  "duration": 237.56962823867798,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 352,
        "code": "  // What is the balance of a particu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "fallback",
        "lineno": 69,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 882,
        "code": "c onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "calldata_Finafex_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 175,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 894,
        "code": "c onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "calldata_Finafex_4 + calldata_Finafex_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 175,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 903,
        "code": "c onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "calldata_Finafex_4 + calldata_Finafex_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 175,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 909,
        "code": "c onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "calldata_Finafex_4 + calldata_Finafex_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 175,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5028,
        "code": "  }\n\n      function decreaseApproval (addres",
        "debug": "calldata_Finafex_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Finafex_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Finafex_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xd73dd623`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "_function_0xd73dd623",
        "lineno": 151,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5633,
        "code": "erface, FNXInterface {\n      string public symbol = \"FNX\";\n      string public name = \"Finafex\";\n      uint8 public constant decimals = 18;\n      uint256 _totalSupply = 600000000000000000000000000;\n      \n      // Owner of this contract\n      address public owner;\n   \n      // Balances for each account\n      mapping(address => uint256) balances;\n   \n      // Owner of account approves the transfer of an amount to another account\n      mapping(address => mapping (address => uint256)) allowed;\n   \n      // Functions with this modifier can only be executed by the owner\n      modifier onlyOwner() {\n          \n\t\t  require(msg.sender == owner);\n          _;\n      }\n\t  \n\t  modifier notThisContract(address _to) {\n\t\t\n\t\t  require(_to != address(this));\n\t\t  _;\t\t\n\t  }\n   \n      // Constructor\n      constructor() public {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n      \n      function () public payable {\n          if(address(this).balance > 1000000000000000000){\n            owner.transfer(address(this).balance);\n          }\n      }\n\n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant public returns (uint256 balance) {\n          return balances[_owner];\n      }\n\t  \n\t  function totalSupply() constant public returns (uint256 totSupply) {\n          //totalSupply = _totalSupply;\n\t\t  return _totalSupply;\n      }\n\t    \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) notThisContract(_to) public returns (bool success) {\n          require(_to != 0x0);\n\t\t  require(_amount > 0);\n\t\t  require(balances[msg.sender] >= _amount);\n\t\t  require(balances[_to] + _amount > balances[_to]);\n\t\t  balances[msg.sender] -= _amount;\n          balances[_to] += _amount;\t\t  \n\t\t  emit Transfer(msg.sender, _to, _amount);\n\t\t  return true;\n\t \n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom (\n          address _from,\n          address _to,\n          uint256 _amount\n      ) notThisContract(_to) public returns (bool success) {\n\t  \n\t\t   require(balances[_from] >= _amount);\n\t\t   require(allowed[_from][msg.sender] >= _amount);\n\t\t   require(_amount > 0);\n\t\t   require(balances[_to] + _amount > balances[_to]);\n\t\t   \n\t\t   balances[_from] -= _amount;\n           allowed[_from][msg.sender] -= _amount;\n           balances[_to] += _amount;\n           emit Transfer(_from, _to, _amount);\n           return true;\n\t  \n         \n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     /*function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }*/\n     \n    function approve(address _spender, uint256 _amount) public returns (bool) {\n\n\t\t// To change the approve amount you first have to reduce the addresses`\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n\t\t//  already 0 to mitigate the race condition described here:\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\t\tallowed[msg.sender][_spender] = _amount;\n\t\temit Approval(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n     \n     /**\n       * approve should be called when allowed[_spender] == 0. To increment\n       * allowed value is better to use this function to avoid 2 calls (and wait until \n       * the first transaction is mined)\n       * From MonolithDAO Token.sol\n       */\n      function increaseApproval (address _spender, uint _addedValue) public\n        returns (bool success) {\n        //allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        allowed[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n\n      function decreaseApproval (address _spender, uint _subtractedValue) public\n        returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n          allowed[msg.sender][_spender] = 0;\n        } else {\n          //allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n          allowed[msg.sender][_spender] -= _subtractedValue;\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n  \n     function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n     \n    function changeNameSymbol(string _name, string _symbol) public onlyOwner {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t}\n\t  \n\tfunction transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff40\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Finafex_4 + calldata_Finafex_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Finafex_4 + calldata_Finafex_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 29,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5647,
        "code": "erface, FNXInterface {\n      string public symbol = \"FNX\";\n      string public name = \"Finafex\";\n      uint8 public constant decimals = 18;\n      uint256 _totalSupply = 600000000000000000000000000;\n      \n      // Owner of this contract\n      address public owner;\n   \n      // Balances for each account\n      mapping(address => uint256) balances;\n   \n      // Owner of account approves the transfer of an amount to another account\n      mapping(address => mapping (address => uint256)) allowed;\n   \n      // Functions with this modifier can only be executed by the owner\n      modifier onlyOwner() {\n          \n\t\t  require(msg.sender == owner);\n          _;\n      }\n\t  \n\t  modifier notThisContract(address _to) {\n\t\t\n\t\t  require(_to != address(this));\n\t\t  _;\t\t\n\t  }\n   \n      // Constructor\n      constructor() public {\n          owner = msg.sender;\n          balances[owner] = _totalSupply;\n      }\n      \n      function () public payable {\n          if(address(this).balance > 1000000000000000000){\n            owner.transfer(address(this).balance);\n          }\n      }\n\n      // What is the balance of a particular account?\n      function balanceOf(address _owner) constant public returns (uint256 balance) {\n          return balances[_owner];\n      }\n\t  \n\t  function totalSupply() constant public returns (uint256 totSupply) {\n          //totalSupply = _totalSupply;\n\t\t  return _totalSupply;\n      }\n\t    \n      // Transfer the balance from owner's account to another account\n      function transfer(address _to, uint256 _amount) notThisContract(_to) public returns (bool success) {\n          require(_to != 0x0);\n\t\t  require(_amount > 0);\n\t\t  require(balances[msg.sender] >= _amount);\n\t\t  require(balances[_to] + _amount > balances[_to]);\n\t\t  balances[msg.sender] -= _amount;\n          balances[_to] += _amount;\t\t  \n\t\t  emit Transfer(msg.sender, _to, _amount);\n\t\t  return true;\n\t \n      }\n   \n      // Send _value amount of tokens from address _from to address _to\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n      // fees in sub-currencies; the command should fail unless the _from account has\n      // deliberately authorized the sender of the message via some mechanism; we propose\n      // these standardized APIs for approval:\n      function transferFrom (\n          address _from,\n          address _to,\n          uint256 _amount\n      ) notThisContract(_to) public returns (bool success) {\n\t  \n\t\t   require(balances[_from] >= _amount);\n\t\t   require(allowed[_from][msg.sender] >= _amount);\n\t\t   require(_amount > 0);\n\t\t   require(balances[_to] + _amount > balances[_to]);\n\t\t   \n\t\t   balances[_from] -= _amount;\n           allowed[_from][msg.sender] -= _amount;\n           balances[_to] += _amount;\n           emit Transfer(_from, _to, _amount);\n           return true;\n\t  \n         \n     }\n  \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     /*function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         return true;\n     }*/\n     \n    function approve(address _spender, uint256 _amount) public returns (bool) {\n\n\t\t// To change the approve amount you first have to reduce the addresses`\n\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n\t\t//  already 0 to mitigate the race condition described here:\n\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n\n\t\tallowed[msg.sender][_spender] = _amount;\n\t\temit Approval(msg.sender, _spender, _amount);\n\t\treturn true;\n\t}\n     \n     /**\n       * approve should be called when allowed[_spender] == 0. To increment\n       * allowed value is better to use this function to avoid 2 calls (and wait until \n       * the first transaction is mined)\n       * From MonolithDAO Token.sol\n       */\n      function increaseApproval (address _spender, uint _addedValue) public\n        returns (bool success) {\n        //allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        allowed[msg.sender][_spender] += _addedValue;\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n\n      function decreaseApproval (address _spender, uint _subtractedValue) public\n        returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n          allowed[msg.sender][_spender] = 0;\n        } else {\n          //allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n          allowed[msg.sender][_spender] -= _subtractedValue;\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n      }\n  \n     function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n     }\n     \n    function changeNameSymbol(string _name, string _symbol) public onlyOwner {\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t}\n\t  \n\tfunction transferOwnership(address newOwner) public onlyOwner {\n        owner = newOwner;\n    }\n }",
        "debug": "calldata_Finafex_4 + calldata_Finafex_4: 0x0\nstorage_1: 0xa0222022202220222022200200003e0000000000ff7f7eefeeefff77f00\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Finafex_4 + calldata_Finafex_4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Finafex_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Finafex: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xb82ba563ea46c366c2c18b9d7a6fce12600ac5de.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 29,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}