{"error": null, "issues": [{"address": 699, "code": "\tfunction withdraw() onlyOwner {\n\t\tmsg.sender.transfer(this.balan", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "setNotice(string)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2603, "code": "nt amount) onlyOw", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "withdrawToken(address)", "lineno": 84, "title": "Message call to external contract", "type": "Warning"}, {"address": 2603, "code": "nt amount) onlyOw", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2795\n", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "withdrawToken(address)", "lineno": 84, "title": "Multiple Calls", "type": "Information"}, {"address": 2795, "code": "ken, address sender, uint amount) onlyOwn", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "withdrawToken(address)", "lineno": 84, "title": "Message call to external contract", "type": "Warning"}, {"address": 3282, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "refundToken(address,address,uint256)", "lineno": 88, "title": "Message call to external contract", "type": "Warning"}, {"address": 4012, "code": "Sale {\n\taddress public owner;    // contract owner\n\taddress public newOwner; // new contract owner for two-way ownership handshake\n\tstring public notice;    // arbitrary public notice text\n\tuint public start;       // start time of sale\n\tuint public end;         // end time of sale\n\tuint public cap;         // Ether hard cap\n\tbool public live;        // sale is live right now\n\n\tevent StartSale();\n\tevent EndSale();\n\tevent EtherIn(address from, uint amount);\n\n\tfunction Sale() {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction () payable {\n\t\trequire(block.timestamp >= start);\n\t\tif (block.timestamp > end || this.balance > cap) {\n\t\t\trequire(live);\n\t\t\tlive = false;\n\t\t\tEndSale();\n\t\t} else if (!live) {\n\t\t\tlive = true;\n\t\t\tStartSale();\n\t\t}\n\t\tEtherIn(msg.sender, msg.value);\n\t}\n\n\tfunction init(uint _start, uint _end, uint _cap) onlyOwner {\n\t\tstart = _start;\n\t\tend = _end;\n\t\tcap = _cap;\n\t}\n\n\tfunction softCap(uint _newend) onlyOwner {\n\t\trequire(_newend >= block.timestamp && _newend >= start && _newend <= end);\n\t\tend = _newend;\n\t}\n\n\tfunction changeOwner(address next) onlyOwner {\n\t\tnewOwner = next;\n\t}\n\n\tfunction acceptOwnership() {\n\t\trequire(msg.sender == newOwner);\n\t\towner = msg.sender;\n\t\tnewOwner = 0;\n\t}\n\n\tfunction setNotice(string note) onlyOwner {\n\t\tnotice = note;\n\t}\n\n\tfunction withdraw() onlyOwner {\n\t\tmsg.sender.transfer(this.balance);\n\t}\n\n\tfunction withdrawSome(uint value) onlyOwner {\n\t\trequire(value <= this.balance);\n\t\tmsg.sender.transfer(value);\n\t}\n\n\tfunction withdrawToken(address token) onlyOwner {\n\t\tToken t = Token(token);\n\t\trequire(t.transfer(msg.sender, t.balanceOf(this)));\n\t}\n\n\tfunction refundToken(address token, address sender, uint amount) onlyOwner {\n\t\tToken t = Token(token);\n\t\trequire(t.transfer(sender, amount));\n\t}\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "setNotice(string)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4026, "code": "Sale {\n\taddress public owner;    // contract owner\n\taddress public newOwner; // new contract owner for two-way ownership handshake\n\tstring public notice;    // arbitrary public notice text\n\tuint public start;       // start time of sale\n\tuint public end;         // end time of sale\n\tuint public cap;         // Ether hard cap\n\tbool public live;        // sale is live right now\n\n\tevent StartSale();\n\tevent EndSale();\n\tevent EtherIn(address from, uint amount);\n\n\tfunction Sale() {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\tfunction () payable {\n\t\trequire(block.timestamp >= start);\n\t\tif (block.timestamp > end || this.balance > cap) {\n\t\t\trequire(live);\n\t\t\tlive = false;\n\t\t\tEndSale();\n\t\t} else if (!live) {\n\t\t\tlive = true;\n\t\t\tStartSale();\n\t\t}\n\t\tEtherIn(msg.sender, msg.value);\n\t}\n\n\tfunction init(uint _start, uint _end, uint _cap) onlyOwner {\n\t\tstart = _start;\n\t\tend = _end;\n\t\tcap = _cap;\n\t}\n\n\tfunction softCap(uint _newend) onlyOwner {\n\t\trequire(_newend >= block.timestamp && _newend >= start && _newend <= end);\n\t\tend = _newend;\n\t}\n\n\tfunction changeOwner(address next) onlyOwner {\n\t\tnewOwner = next;\n\t}\n\n\tfunction acceptOwnership() {\n\t\trequire(msg.sender == newOwner);\n\t\towner = msg.sender;\n\t\tnewOwner = 0;\n\t}\n\n\tfunction setNotice(string note) onlyOwner {\n\t\tnotice = note;\n\t}\n\n\tfunction withdraw() onlyOwner {\n\t\tmsg.sender.transfer(this.balance);\n\t}\n\n\tfunction withdrawSome(uint value) onlyOwner {\n\t\trequire(value <= this.balance);\n\t\tmsg.sender.transfer(value);\n\t}\n\n\tfunction withdrawToken(address token) onlyOwner {\n\t\tToken t = Token(token);\n\t\trequire(t.transfer(msg.sender, t.balanceOf(this)));\n\t}\n\n\tfunction refundToken(address token, address sender, uint amount) onlyOwner {\n\t\tToken t = Token(token);\n\t\trequire(t.transfer(sender, amount));\n\t}\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x0a34dfb1f68b68518ac53ec9ba4115ccd8922816.sol", "function": "setNotice(string)", "lineno": 10, "title": "Integer Overflow ", "type": "Warning"}], "success": true}