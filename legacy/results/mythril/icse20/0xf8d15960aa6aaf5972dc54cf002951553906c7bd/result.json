{
  "contract": "0xf8d15960aa6aaf5972dc54cf002951553906c7bd",
  "tool": "mythril",
  "start": 1563552097.168743,
  "end": 1563552204.5537534,
  "duration": 107.38501048088074,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 490,
        "code": "cutedCntr,\n            order.feesBaseOrCntr, order.feesRwrd);\n  }\n\n  // Public Order View - get mutable details of an order.\n  //\n  // If the orderId does not exist, status will be Unknown.\n  //\n  function getOrderState(uint128 orderId) public constant returns (\n    Status status, ReasonCode reasonCode, uint executedBase, uint executedCntr,\n    uint feesBaseOrCntr, uint feesRwrd) {\n    Order storage order = orderForOrderId[orderId];\n    return (order.status, order.reasonCode, order.executedBase, order.exec",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xfc00\ncalldata_ERC20_0: 0x117d412800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getOrder(uint128)",
        "lineno": 445,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 936,
        "code": " for one client.\n  //\n  // Not really designed for use from a smart contract transaction.\n  //\n  // Idea is:\n  //  - client ensures order ids are generated so that most-signficant part is time-based;\n  //  - client decides they want all orders after a certain point-in-time,\n  //    and chooses minClosedOrderIdCutoff accordingly;\n  //  - before that point-in-time they just get open ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncalldata_ERC20_0: 0x31f9a21100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getOrderState(uint128)",
        "lineno": 461,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2115,
        "code": "/\n  function sumDepth(uin",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4: 0x7e32\ncalldata_ERC20_0: 0x3adcbd200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "walkBook(uint16)",
        "lineno": 1236,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4220,
        "code": "f someone owns pow(2,255) ETH we have ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferBase(uint256)",
        "lineno": 389,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4793,
        "code": "sonCode, uint executedBase, uint execu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferRwrd(uint256)",
        "lineno": 441,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5085,
        "code": "   // overflow safe - checked less than ba",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_ERC20_0: 0x6044514200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n",
        "description": "A possible integer overflow exists in the function `depositCntr()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "depositCntr()",
        "lineno": 400,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5474,
        "code": "PaymentEventType.TransferFrom, Ba",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromBase()",
        "lineno": 365,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5474,
        "code": "PaymentEventType.TransferFrom, Ba",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6110\nCall at address: 5798\n",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromBase()",
        "lineno": 365,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5798,
        "code": " function transferBase(uint amountBase) public {",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromBase()",
        "lineno": 370,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5798,
        "code": " function transferBase(uint amountBase) public {",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6110\n",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromBase()",
        "lineno": 370,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6110,
        "code": "equire(amountBase > 0);\n    requi",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromBase()",
        "lineno": 372,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6833,
        "code": "ress client = msg.sender;\n    address book",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getClientBalances(address)",
        "lineno": 354,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6833,
        "code": "ress client = msg.sender;\n    address book",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7384\nCall at address: 7135\n",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getClientBalances(address)",
        "lineno": 354,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7135,
        "code": "rust the ERC20 token contract not to do na",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getClientBalances(address)",
        "lineno": 356,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7135,
        "code": "rust the ERC20 token contract not to do na",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7384\n",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getClientBalances(address)",
        "lineno": 356,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7384,
        "code": "k into us -\n    // if we ca",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "getClientBalances(address)",
        "lineno": 356,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8183,
        "code": "eType.Rwrd, int(amountRwrd));\n  }",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromRwrd()",
        "lineno": 419,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8183,
        "code": "eType.Rwrd, int(amountRwrd));\n  }",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8508\n",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromRwrd()",
        "lineno": 419,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 8508,
        "code": "ddress client = msg.sender;\n    require(amountRw",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "transferFromRwrd()",
        "lineno": 425,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9508,
        "code": "turns (\n      Direction dir",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\nUDiv(storage_keccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_32_+_4,\n_____256): 0xf800\ncalldata_ERC20_32 + 36: 0x2\nstorage_keccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_32_+_4: 0x100\ncalldata_ERC20_32 + 4: 0xffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0xa87d8b6b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "walkClientOrders(address,uint128,uint128)",
        "lineno": 501,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10379,
        "code": "nitialSize || sizeBase > baseMaxSize) {\n      order.status = Status.Rejected;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_32 + 68: 0xfc\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0xbbec376800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "_function_0xbbec3768",
        "lineno": 608,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12274,
        "code": " orderForOrderId[orderId];\n    ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncaller: 0x0\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_0: 0xbd5acbd600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "continueOrder(uint128,uint256)",
        "lineno": 674,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12690,
        "code": "storage order = order",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncaller: 0x0\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_0: 0xdbc9139600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8d15960aa6aaf5972dc54cf002951553906c7bd.sol",
        "function": "cancelOrder(uint128)",
        "lineno": 655,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}