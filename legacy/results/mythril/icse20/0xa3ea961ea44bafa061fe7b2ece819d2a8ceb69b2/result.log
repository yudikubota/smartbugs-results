{"error": null, "issues": [{"address": 1718, "code": ") ownerOnly public {\n\n    require(state == 1);\n ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "withdrawTokens()", "lineno": 193, "title": "Message call to external contract", "type": "Informational"}, {"address": 1718, "code": ") ownerOnly public {\n\n    require(state == 1);\n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawTokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "withdrawTokens()", "lineno": 193, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2008, "code": "hCollected.sub(weiAmount);\n  }", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2327\n", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "refund()", "lineno": 170, "title": "Multiple Calls", "type": "Information"}, {"address": 2327, "code": "nction withdraw() ownerOnly public {\n    \n ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "refund()", "lineno": 173, "title": "Message call to external contract", "type": "Informational"}, {"address": 2327, "code": "nction withdraw() ownerOnly public {\n    \n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function refund(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "refund()", "lineno": 173, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2452, "code": "ire(state == 3);\n    owner.", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "fallback", "lineno": 175, "title": "State change after external call", "type": "Warning"}, {"address": 2521, "code": "r(ethCollected);\n    eth", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "fallback", "lineno": 176, "title": "State change after external call", "type": "Warning"}, {"address": 2548, "code": "ed = 0;\n    state = 4;\n  }\n\n  function wit", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "fallback", "lineno": 177, "title": "State change after external call", "type": "Warning"}, {"address": 3636, "code": "der] > 0);\n    token.transfe", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "withdraw()", "lineno": 183, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4867, "code": " 4) && msg.value == 0) {\n      return withdraw", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "tokensLeft()", "lineno": 122, "title": "Message call to external contract", "type": "Informational"}, {"address": 4867, "code": " 4) && msg.value == 0) {\n      return withdraw", "debug": "", "description": "A possible transaction order independence vulnerability exists in function tokensLeft(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "tokensLeft()", "lineno": 122, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5520, "code": " b;\n  }\n  \n  /", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nreturndatasize: 0x20\nretval_2327: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2008: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x200\ncalldata_TydoPreIco_0: 0x590e1ae300000000000000000000000000000000000000000000000000000000\ncalldatasize_TydoPreIco: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "refund()", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 5556, "code": "asser", "debug": "callvalue: 0x57619f0fb38a94d242e6bdc8057619f0fb38a94d242e6bdc8057619f0fb39\nstorage_6: 0x100\ncalldatasize_TydoPreIco: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xa3ea961ea44bafa061fe7b2ece819d2a8ceb69b2.sol", "function": "fallback", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}], "success": true}