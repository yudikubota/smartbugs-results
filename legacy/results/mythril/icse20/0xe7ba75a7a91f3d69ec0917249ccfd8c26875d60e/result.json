{
  "contract": "0xe7ba75a7a91f3d69ec0917249ccfd8c26875d60e",
  "tool": "mythril",
  "start": 1563720069.9964979,
  "end": 1563720121.008644,
  "duration": 51.01214623451233,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 440,
        "code": "gth > 0); \n        require(_feeIndexes.length > 0);  \n        require(_values.length == _feeIndexes.length); \n        require(exFees.length == 3);\n        \n        uint256[] memory _totalFees = new uint256[](_values.length);\n        // For Every token Value \n        for (uint256 i = 0; i < _values.length; i++){  \n            _totalFees[i] =  calcTradeFee(_values[i], _feeIndexes[i]);\n        }\n        require(_totalFees.length > 0);\n        require(_values.length == _totalFees.length);  \n        return _totalFees;\n    }\n}",
        "debug": "calldata_TradeFeeCalculator_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TradeFeeCalculator_0: 0xb8baed2c00000000000000000000000000000000000000000000000000000000\ncalldatasize_TradeFeeCalculator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `calcTradeFeeMulti(uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe7ba75a7a91f3d69ec0917249ccfd8c26875d60e.sol",
        "function": "calcTradeFeeMulti(uint256[],uint256[])",
        "lineno": 132,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 674,
        "code": "p owner\n     */\n    func",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TradeFeeCalculator_4: 0x3\ncalldata_TradeFeeCalculator_0: 0x4a88f9c700000000000000000000000000000000000000000000000000000000\ncalldatasize_TradeFeeCalculator: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe7ba75a7a91f3d69ec0917249ccfd8c26875d60e.sol",
        "function": "_function_0x4a88f9c7",
        "lineno": 73,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}