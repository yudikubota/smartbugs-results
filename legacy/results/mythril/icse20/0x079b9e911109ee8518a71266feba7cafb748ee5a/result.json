{
  "contract": "0x079b9e911109ee8518a71266feba7cafb748ee5a",
  "tool": "mythril",
  "start": 1563604372.7272584,
  "end": 1563606011.2031794,
  "duration": 1638.4759209156036,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 373,
        "code": "s, uint[] _amounts) {\n\n    if (_offset < voters.length) {\n      uint count = 0;\n      uint resultLength = voters.length - _offset > _limit ? _limit : voters.length - _offset;\n      uint _block = _blockNumber > endBlock ? endBlock : _blockNumber;\n      _voters = new address[](resultLength);\n      _candidates = new uint8[](resultLength);\n      _amounts = new uint[](resultLength);\n      for(uint i = _offset; (i < voters.length) && (count < _limit); i++) {\n        _voters[count] = voters[i];\n        _candidates[count] = votes[voters[i]];\n        _amounts[count] = msp.balanceOfAt(voters[i], _block);\n        count++;\n      }\n\n      return(_voters, _candidates, _amounts);\n    }\n  }\n\n  function getSummary() constant returns (uint8[] _candidates, uint[] _summary) {\n    uint _block = getBlockNumber() > endBlock ? endBlock : getBlo",
        "debug": "storage_4: 0x1\ncalldata_Voting_4: 0x0\nmem_128 + 32 + 32*calldata_Voting_32 + 4: 0x800000f80000003df000000000000000007be03e2108421083def7c1f0741f40\nstorage_2: 0x0\ncalldata_Voting_32 + 36: 0x0\ncalldata_Voting_0: 0x4830ddd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncalldata_Voting_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getVotersAt(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getVotersAt(uint256,uint256,uint256)",
        "lineno": 132,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 439,
        "code": "s, uint[] _amounts) {\n\n    if (_offset < voters.length) {\n      uint count = 0;\n      uint resultLength = voters.length - _offset > _limit ? _limit : voters.length - _offset;\n      uint _block = _blockNumber > endBlock ? endBlock : _blockNumber;\n      _voters = new address[](resultLength);\n      _candidates = new uint8[](resultLength);\n      _amounts = new uint[](resultLength);\n      for(uint i = _offset; (i < voters.length) && (count < _limit); i++) {\n        _voters[count] = voters[i];\n        _candidates[count] = votes[voters[i]];\n        _amounts[count] = msp.balanceOfAt(voters[i], _block);\n        count++;\n      }\n\n      return(_voters, _candidates, _amounts);\n    }\n  }\n\n  function getSummary() constant returns (uint8[] _candidates, uint[] _summary) {\n    uint _block = getBlockNumber() > endBlock ? endBlock : getBlo",
        "debug": "storage_4: 0x1\ncalldata_Voting_4: 0x0\nmem_160 +\n32*calldata_Voting_32 + 4 +\n32 +\n32*calldata_Voting_32 + 4: 0x800000f80000003df000000000000000007be03e2108421083def7c1f0741f40\nmem_128 + 32 + 32*calldata_Voting_32 + 4: 0x2\nstorage_2: 0x0\ncalldata_Voting_32 + 36: 0x0\ncalldata_Voting_0: 0x4830ddd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncalldata_Voting_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getVotersAt(uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getVotersAt(uint256,uint256,uint256)",
        "lineno": 132,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 664,
        "code": "er();\n\n    // Fill the candidates IDs list\n    _candidates = new uint8[](candidates);\n    for(uint8 c = 1; c <= candidates; c++) {\n      _candidates[c - 1] = c;\n    }\n\n    // Get MSP impact map for each candidate\n    _summary = new uint[](candidates);\n    uint8 _candidateIndex;\n    for(uint i = 0; i < voters.length; i++) {\n      _candidateIndex = votes[voters[i]] - 1;\n      _summary[_candidateIndex] = _summary[_candidateIndex] + msp.balanceOfAt(voters[i], _block);\n    }\n\n    return (_candidates, _summary);\n  }\n\n  /// @dev This method can be used by the owner to extract mistakenly\n  ///  sent tokens to this contract.\n  /// @param _token The address of the token contract that y",
        "debug": "mem_128 + 32 + 32*Concat(0, Extract(15, 8, storage_0)): 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\nstorage_0: 0x0\nblock_number: 0x0\ncalldata_Voting_0: 0x4051ddac00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getSummary()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getSummary()",
        "lineno": 153,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2190,
        "code": "oters, _candidates",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1\ncalldata_Voting_4: 0x0\ncalldata_Voting_32 + 4: 0x7ffffffffffffffffffffffffffffffffffbfffffffffffffffffffffdffffff\nstorage_2: 0x0\ncalldata_Voting_32 + 36: 0x0\ncalldata_Voting_0: 0x4830ddd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\nmem_128 +\n32 +\n32*storage_4 +\n115792089237316195423570985008687907853269984665640564039457584007913129639904*\ncalldata_Voting_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getVotersAt(uint256,uint256,uint256)",
        "lineno": 148,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2470,
        "code": "constant returns (uint8[] _candida",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getVotersAt(uint256,uint256,uint256)",
        "lineno": 152,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2539,
        "code": "tion getSummary",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1\ncalldata_Voting_4: 0x0\ncalldata_Voting_32 + 4: 0x7ffffffffffffffffffffffffffffffffffbfffffffffffffffffffffdffffff\nstorage_2: 0x0\nreturndatasize: 0x20\nretval_2470: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*storage_4 +\n115792089237316195423570985008687907853269984665640564039457584007913129639904*\ncalldata_Voting_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Voting_32 + 36: 0x1\ncalldata_Voting_0: 0x4830ddd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\nmem_160 +\n32*storage_4 +\n115792089237316195423570985008687907853269984665640564039457584007913129639904*\ncalldata_Voting_4 +\n32 +\n32*storage_4 +\n115792089237316195423570985008687907853269984665640564039457584007913129639904*\ncalldata_Voting_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getVotersAt(uint256,uint256,uint256)",
        "lineno": 152,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3294,
        "code": " tokens to this contract.\n  /// @p",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getSummary()",
        "lineno": 173,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3366,
        "code": "tract mistakenly\n  ///  s",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*Concat(0, Extract(15, 8, storage_0)): 0x0\nstorage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_62514009886607029107290561805838585334079798074568712924583230797734656856475,\n_____256): 0x100\nreturndatasize: 0x20\nretval_3294: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nblock_number: 0x0\ncalldata_Voting_0: 0x4051ddac00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "getSummary()",
        "lineno": 172,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3663,
        "code": "ters.push(msg.sender);\n    }\n    votes[msg.sender] = ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x1\nblock_number: 0x2\nstorage_0: 0xff00\ncalldata_Voting_4: 0xff\ncalldata_Voting_0: 0xb3f98adc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "vote(uint8)",
        "lineno": 100,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3762,
        "code": ";\n\n/*\n  Copyright ",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x40000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nblock_number: 0x40000000000000000000000000\nstorage_0: 0xff00\ncalldata_Voting_4: 0xff\ncalldata_Voting_0: 0xb3f98adc00000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `vote(uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "vote(uint8)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4063,
        "code": "_candidatesCount Number",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Voting_4: 0x0\nstorage_4: 0x0\ncalldata_Voting_0: 0xda58c7d900000000000000000000000000000000000000000000000000000000\ncalldatasize_Voting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "_function_0xda58c7d9",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4340,
        "code": "laimedTokens(_token, owner, ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimTokens(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "claimTokens(address)",
        "lineno": 185,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4529,
        "code": "ckNumber() internal c",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "claimTokens(address)",
        "lineno": 189,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4529,
        "code": "ckNumber() internal c",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4786\n",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "claimTokens(address)",
        "lineno": 189,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4786,
        "code": " returns (uint) {\n    return b",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0x079b9e911109ee8518a71266feba7cafb748ee5a.sol",
        "function": "claimTokens(address)",
        "lineno": 189,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}