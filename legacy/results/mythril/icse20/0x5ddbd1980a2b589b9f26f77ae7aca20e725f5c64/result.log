{"error": null, "issues": [{"address": 489, "code": "(Rounds[roundID].validrollsXaddr[adr]);\n    }\n    \n    \n    function readnationnameXteam()\n    view\n    public\n    returns(bytes32[256]){\n       ", "debug": "calldata_RISK_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RISK_0: 0xe95e12700000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `readpriceXname(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "readpriceXname(string)", "lineno": 584, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1415, "code": "uire(_temp[0] != 0x20 && _temp[_length-1] != 0x20, \"string cannot start or end with space\");\n        \n        // check\n        for (uint256 i = 0; i < _length; i++)\n        {\n                require\n                (\n                    // require character is a space\n                    _temp[i] == 0x20 || \n                    // OR lowercase a-z\n                    (_temp[i] > 0x60 && _temp[i] < 0x7b) \n                );\n                // make sure theres not 2x spaces in a row\n                if (_temp[i] == 0x20){\n                    \n                    require( _temp[i+1] != 0x20, \"string cannot contain consecutive spaces\");\n                }\n            }\n        bytes32 _ret;\n        assembly {\n            _ret := mload(add(_temp, 32))\n        }\n        return (_ret);\n    }\n    \n    \n    //retrieve arrays and mappings from inside the struct array\n    function readowners()\n    view\n    public\n    returns(uint256[101])\n    {\n        return(Rounds[roundID].owners);\n    }\n    \n    \n    function readownerXname(string name)\n    view\n    public\n    returns(address)\n    {\n        return(ownerXname[nameFilter(name)]);\n    }\n    \n    \n    function readisnameregistered(string name)\n    view\n    public\n    returns(bool)\n    {\n        return(Rounds[roundID].isnameregistered[nameFilter(name)", "debug": "calldata_RISK_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RISK_0: 0x42f9192a00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `nameFilter(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "nameFilter(string)", "lineno": 492, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4328, "code": "owner=owne", "debug": "storage_6466: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RISK_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\nextcodesize: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdraw()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "withdraw()", "lineno": 287, "title": "Integer Underflow", "type": "Warning"}, {"address": 7461, "code": "oad the a", "debug": "storage_6466: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_RISK_0: 0x44816e2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `readhistoricalrounds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "readhistoricalrounds()", "lineno": 642, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7462, "code": "oad the adj", "debug": "storage_6466: 0x0\ncalldata_RISK_0: 0x44816e2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `readhistoricalrounds()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "readhistoricalrounds()", "lineno": 642, "title": "Integer Underflow", "type": "Warning"}, {"address": 7570, "code": "unction ad", "debug": "The exception is triggered under the following conditions:\n\nstorage_6466: 0x2\ncalldata_RISK_0: 0x44816e2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "readhistoricalrounds()", "lineno": 643, "title": "Exception state", "type": "Informational"}, {"address": 7948, "code": "Filter(string _input) //Versioned from", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RISK_0: 0x62c5c03a00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getbalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "getbalance(uint256)", "lineno": 481, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8350, "code": "       require (_length <= 32 && _length > 0, \"string must be between 1 and 64 characters\");\n       ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x100000000000200000000000400000000000005\nstorage_6466: 0x100000000000200000000000400000000000007\ncalldata_RISK_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_RISK: 0x4\nstorage_keccac_65535_&\n65535_&\n65535_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\nextcodesize: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0x5ddbd1980a2b589b9f26f77ae7aca20e725f5c64.sol", "function": "withdraw()", "lineno": 490, "title": "Exception state", "type": "Informational"}], "success": true}