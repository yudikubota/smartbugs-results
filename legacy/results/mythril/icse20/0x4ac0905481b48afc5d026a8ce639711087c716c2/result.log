{"error": null, "issues": [{"address": 805, "code": "ess _owner) external view returns (address[]) { return ownerToEtherBoxes[_owner]; }\n  function isExpired(addre", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_BackMeApp_0: 0x71a8ba2500000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEtherBoxes(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "getEtherBoxes(address)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1047, "code": ", string _ownerUrl, uint _lifespan) external onlyWhenRunning() payable {\n      require(ownerToEtherBoxes[msg.sender].length < 10);\n      assert(bytes(_ownerUrl).length <= 200);\n      address etherBoxAddress = address(keccak256(msg.sender, now));\n      ownerToEtherBoxes[msg.sender].push(etherBoxAddress);\n      etherBoxes[etherBoxAddress] = EtherBox({\n        label: _label,\n        owner: msg.sender,\n        ownerUrl: _ownerUrl,\n        expiration: now + _lifespan\n      });\n      emit EtherBoxPublished(msg.sender, nicknames[msg.sender], etherBoxAddress, _label, now);\n      if(msg.value > 0){ owner.transfer(msg.value); }\n  }\n\n  function deleteEtherBox(address _etherBoxAddress)", "debug": "calldata_BackMeApp_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BackMeApp_0: 0x8f5e619b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x8f5e619b`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "_function_0x8f5e619b", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1528, "code": "= 300);\n    EtherBox storage etherBox", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BackMeApp_4 + calldata_BackMeApp_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_BackMeApp_0: 0x31363c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "esteem(bytes32,string,address)", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 1704, "code": "));\n    nicknames[msg.sender] = _nic", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BackMeApp_4 + calldata_BackMeApp_32 + 4: 0x0\ntimestamp: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_32_+_36: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_32_+_36: 0x1\ncalldata_BackMeApp_0: 0x31363c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "esteem(bytes32,string,address)", "lineno": 35, "title": "Exception state", "type": "Informational"}, {"address": 2497, "code": "external onlyOwner() { isShutDown = i", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawBalance(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "withdrawBalance()", "lineno": 75, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2788, "code": "wner]; }\n  function isExpired(ad", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_BackMeApp_0: 0x71a8ba2500000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEtherBoxes(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "getEtherBoxes(address)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2790, "code": "wner]; }\n  function isExpired(ad", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_BackMeApp_0: 0x71a8ba2500000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEtherBoxes(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "getEtherBoxes(address)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3238, "code": " newLength = 0;\n    for(uint i = 0; i < tempEther", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ntimestamp: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncaller: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncalldata_BackMeApp_0: 0x82c0287e00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `deleteEtherBox(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "deleteEtherBox(address)", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3240, "code": " newLength = 0;\n    for(uint i = 0; i < tempEther", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ntimestamp: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncaller: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncalldata_BackMeApp_0: 0x82c0287e00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `deleteEtherBox(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "deleteEtherBox(address)", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4065, "code": "    address etherBoxAddress = address(", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BackMeApp_4 + calldata_BackMeApp_32 + 4: 0xe0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9\nstorage_0: 0x0\ncalldata_BackMeApp_0: 0x8f5e619b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "_function_0x8f5e619b", "lineno": 44, "title": "Exception state", "type": "Informational"}, {"address": 5088, "code": "s => address[]) public ownerToEtherBoxes;\n  mapping (ad", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BackMeApp_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncalldata_BackMeApp_0: 0xf1636d5a00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "_function_0xf1636d5a", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 5408, "code": "ntract BackMeApp {\n  address public owner;\n  bool public isShutDown;\n  uint256 public minEsteemAmount;\n\n  struct EtherBox {\n    bytes32 label;\n    address owner;\n    string ownerUrl;\n    uint256 expiration;\n  }\n\n  mapping (address => bytes32) public nicknames;\n  mapping (address => address[]) public ownerToEtherBoxes;\n  mapping (address => EtherBox) public etherBoxes;\n\n  event NewEsteem(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, bytes32 etherBoxLabel, string message, uint amount, uint256 timestamp);\n  event EtherBoxPublished(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, bytes32 etherBoxLabel, uint256 timestamp);\n  event EtherBoxDeleted(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, uint256 timestamp);\n  modifier onlyOwner() { require(msg.sender == owner); _; }\n  modifier onlyWhenRunning() { require(isShutDown == false); _; }\n\n  constructor() public { owner = msg.sender; minEsteemAmount = 1 finney; }\n  function() public payable {}\n\n  function getEtherBoxes(address _owner) external view returns (address[]) { return ownerToEtherBoxes[_owner]; }\n  function isExpired(address _etherBoxAddress) external view returns(bool) { return etherBoxes[_etherBoxAddress].expiration <= now ? true : false; }\n\n  function esteem(bytes32 _nickname, string _message, address _to) external payable {\n    assert(bytes(_message).length <= 300);\n    EtherBox storage etherBox = etherBoxes[_to];\n    require(etherBox.expiration > now);\n    assert(etherBox.owner != address(0));\n    nicknames[msg.sender] = _nickname;\n    emit NewEsteem(msg.sender, _nickname, _to, etherBox.label, _message, msg.value, now);\n    etherBox.owner.transfer(msg.value);\n  }\n\n  function publishEtherBox (bytes32 _label, string _ownerUrl, uint _lifespan) external onlyWhenRunning() payable {\n      require(ownerToEtherBoxes[msg.sender].length < 10);\n      assert(bytes(_ownerUrl).length <= 200);\n      address etherBoxAddress = address(keccak256(msg.sender, now));\n      ownerToEtherBoxes[msg.sender].push(etherBoxAddress);\n      etherBoxes[etherBoxAddress] = EtherBox({\n        label: _label,\n        owner: msg.sender,\n        ownerUrl: _ownerUrl,\n        expiration: now + _lifespan\n      });\n      emit EtherBoxPublished(msg.sender, nicknames[msg.sender], etherBoxAddress, _label, now);\n      if(msg.value > 0){ owner.transfer(msg.value); }\n  }\n\n  function deleteEtherBox(address _etherBoxAddress) external {\n    require(etherBoxes[_etherBoxAddress].owner == msg.sender);\n    require(etherBoxes[_etherBoxAddress].expiration <= now);\n    address[] storage ownedEtherBoxes = ownerToEtherBoxes[msg.sender];\n    address[] memory tempEtherBoxes = ownedEtherBoxes;\n    uint newLength = 0;\n    for(uint i = 0; i < tempEtherBoxes.length; i++){\n      if(tempEtherBoxes[i] != _etherBoxAddress){\n        ownedEtherBoxes[newLength] = tempEtherBoxes[i];\n        newLength++;\n      }\n    }\n    ownedEtherBoxes.length = newLength;\n    delete etherBoxes[_etherBoxAddress];\n    emit EtherBoxDeleted(msg.sender, nicknames[msg.sender], _etherBoxAddress, now);\n  }\n\n  function getBalance() external view returns(uint) { return address(this).balance; }\n  function withdrawBalance() external onlyOwner() { owner.transfer(address(this).balance); }\n  function toggleFactoryPower() external onlyOwner() { isShutDown = isShutDown == false ? true : false; }\n  function destroyFactory() external onlyOwner() { selfdestruct(owner); }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4 +\n2: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4_+\n2: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\ntimestamp: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncaller: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_BackMeApp_4: 0x0\ncalldata_BackMeApp_0: 0x82c0287e00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `deleteEtherBox(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "deleteEtherBox(address)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5462, "code": "ntract BackMeApp {\n  address public owner;\n  bool public isShutDown;\n  uint256 public minEsteemAmount;\n\n  struct EtherBox {\n    bytes32 label;\n    address owner;\n    string ownerUrl;\n    uint256 expiration;\n  }\n\n  mapping (address => bytes32) public nicknames;\n  mapping (address => address[]) public ownerToEtherBoxes;\n  mapping (address => EtherBox) public etherBoxes;\n\n  event NewEsteem(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, bytes32 etherBoxLabel, string message, uint amount, uint256 timestamp);\n  event EtherBoxPublished(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, bytes32 etherBoxLabel, uint256 timestamp);\n  event EtherBoxDeleted(address indexed senderAddress, bytes32 senderNickname, address indexed etherBoxAddress, uint256 timestamp);\n  modifier onlyOwner() { require(msg.sender == owner); _; }\n  modifier onlyWhenRunning() { require(isShutDown == false); _; }\n\n  constructor() public { owner = msg.sender; minEsteemAmount = 1 finney; }\n  function() public payable {}\n\n  function getEtherBoxes(address _owner) external view returns (address[]) { return ownerToEtherBoxes[_owner]; }\n  function isExpired(address _etherBoxAddress) external view returns(bool) { return etherBoxes[_etherBoxAddress].expiration <= now ? true : false; }\n\n  function esteem(bytes32 _nickname, string _message, address _to) external payable {\n    assert(bytes(_message).length <= 300);\n    EtherBox storage etherBox = etherBoxes[_to];\n    require(etherBox.expiration > now);\n    assert(etherBox.owner != address(0));\n    nicknames[msg.sender] = _nickname;\n    emit NewEsteem(msg.sender, _nickname, _to, etherBox.label, _message, msg.value, now);\n    etherBox.owner.transfer(msg.value);\n  }\n\n  function publishEtherBox (bytes32 _label, string _ownerUrl, uint _lifespan) external onlyWhenRunning() payable {\n      require(ownerToEtherBoxes[msg.sender].length < 10);\n      assert(bytes(_ownerUrl).length <= 200);\n      address etherBoxAddress = address(keccak256(msg.sender, now));\n      ownerToEtherBoxes[msg.sender].push(etherBoxAddress);\n      etherBoxes[etherBoxAddress] = EtherBox({\n        label: _label,\n        owner: msg.sender,\n        ownerUrl: _ownerUrl,\n        expiration: now + _lifespan\n      });\n      emit EtherBoxPublished(msg.sender, nicknames[msg.sender], etherBoxAddress, _label, now);\n      if(msg.value > 0){ owner.transfer(msg.value); }\n  }\n\n  function deleteEtherBox(address _etherBoxAddress) external {\n    require(etherBoxes[_etherBoxAddress].owner == msg.sender);\n    require(etherBoxes[_etherBoxAddress].expiration <= now);\n    address[] storage ownedEtherBoxes = ownerToEtherBoxes[msg.sender];\n    address[] memory tempEtherBoxes = ownedEtherBoxes;\n    uint newLength = 0;\n    for(uint i = 0; i < tempEtherBoxes.length; i++){\n      if(tempEtherBoxes[i] != _etherBoxAddress){\n        ownedEtherBoxes[newLength] = tempEtherBoxes[i];\n        newLength++;\n      }\n    }\n    ownedEtherBoxes.length = newLength;\n    delete etherBoxes[_etherBoxAddress];\n    emit EtherBoxDeleted(msg.sender, nicknames[msg.sender], _etherBoxAddress, now);\n  }\n\n  function getBalance() external view returns(uint) { return address(this).balance; }\n  function withdrawBalance() external onlyOwner() { owner.transfer(address(this).balance); }\n  function toggleFactoryPower() external onlyOwner() { isShutDown = isShutDown == false ? true : false; }\n  function destroyFactory() external onlyOwner() { selfdestruct(owner); }\n}", "debug": "storage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(keccac_79228162514264337593543950336*\nConcat(0,_Extract(159,_0,_caller)),\n_____1): 0x7c77fffffffffffffffffffffe0820023feeff4fd81e900000000000000000c3\ncalldata_BackMeApp_4 + calldata_BackMeApp_32 + 4: 0xa\nkeccac_2_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(keccac_79228162514264337593543950336*\nConcat(0,_Extract(159,_0,_caller)),\n_____1): 0xfe21e1400000000000020000000800000200480b0220e9040800000000000018\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9\nstorage_0: 0x0\ncalldata_BackMeApp_0: 0x8f5e619b00000000000000000000000000000000000000000000000000000000\ncalldatasize_BackMeApp: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x8f5e619b`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x4ac0905481b48afc5d026a8ce639711087c716c2.sol", "function": "_function_0x8f5e619b", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}