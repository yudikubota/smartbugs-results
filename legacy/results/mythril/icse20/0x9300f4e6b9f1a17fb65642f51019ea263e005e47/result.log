{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.20;\r\n^---------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:768:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n                                            ^---^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:858:71: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n                                                                      ^---^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:861:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (proofVerified == false) throw;\r\n                                    ^---^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:935:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw; // Should be a better way?\r\n            ^---^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1110:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function nbagame() public {\r\n  ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:782:50: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:782:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^-----------------------------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:814:21: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (address(sha3(pubkey)) == signer) return true;\r\n                    ^----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:817:29: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n            return (address(sha3(pubkey)) == signer);\r\n                            ^----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:832:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        tosign2[0] = 1; //role\r\n                     ^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:892:15: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n              ^-----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:892:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                                    ^---------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:892:32: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:892:32: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:892:32: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:910:48: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:910:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1146:9: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    if (keccak256(TEAM_NAMES[0]) == keccak256(result)) { \r\n        ^----------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1146:9: Warning: The provided argument of type string storage ref is not implicitly convertible to expected type bytes memory.\n    if (keccak256(TEAM_NAMES[0]) == keccak256(result)) { \r\n        ^----------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1146:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    if (keccak256(TEAM_NAMES[0]) == keccak256(result)) { \r\n                                    ^---------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1146:37: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.\n    if (keccak256(TEAM_NAMES[0]) == keccak256(result)) { \r\n                                    ^---------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1149:14: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    else if (keccak256(TEAM_NAMES[1]) == keccak256(result)) {\r\n             ^----------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1149:14: Warning: The provided argument of type string storage ref is not implicitly convertible to expected type bytes memory.\n    else if (keccak256(TEAM_NAMES[1]) == keccak256(result)) {\r\n             ^----------------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1149:42: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    else if (keccak256(TEAM_NAMES[1]) == keccak256(result)) {\r\n                                         ^---------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1149:42: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.\n    else if (keccak256(TEAM_NAMES[1]) == keccak256(result)) {\r\n                                         ^---------------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1172:26: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n    uint storedBalance = this.balance;\r\n                         ^----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1239:37: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n    uint losingChunk = SafeMath.sub(this.balance, totalAmountsBet[uint(winningTeam)]);\r\n                                    ^----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1279:9: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n    if (this.balance > 0) {\r\n        ^----------^\n/unique_chucks/25/0x9300f4e6b9f1a17fb65642f51019ea263e005e47.sol:1280:26: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        creator.transfer(this.balance);\r\n                         ^----------^\n", "issues": []}