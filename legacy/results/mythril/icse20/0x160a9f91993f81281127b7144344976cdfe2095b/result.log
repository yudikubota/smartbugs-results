{"error": null, "issues": [{"address": 601, "code": "= true;\n\t   }else {\n\t\t\tisRunning = false;\n\t   }\n\t   \n       return isRunning;\n    }\n \n    /**\n     * @dev Set min number of enteri", "debug": "storage_3: 0x1000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0x5aa68ac000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getParticipants()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getParticipants()", "lineno": 304, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1335, "code": " returns (uint2", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WinEtherPot10_4: 0x0\nstorage_3: 0x0\ncalldata_WinEtherPot10_0: 0x61e494f00000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getBet(uint256)", "lineno": 354, "title": "Exception state", "type": "Informational"}, {"address": 1834, "code": " List of Participants\n ", "debug": "SOLVER OUTPUT:\ncalldata_WinEtherPot10_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "In the function `withdraw()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "withdraw()", "lineno": 291, "title": "Ether send", "type": "Warning"}, {"address": 2317, "code": "   }\n \n    /**\n     * ", "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0x5aa68ac000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getParticipants()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getParticipants()", "lineno": 310, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2319, "code": "   }\n \n    /**\n     * ", "debug": "storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0x5aa68ac000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getParticipants()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getParticipants()", "lineno": 310, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2461, "code": "in number o", "debug": "storage_3: 0x1000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0x5aa68ac000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getParticipants()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getParticipants()", "lineno": 313, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2463, "code": "in number o", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0x5aa68ac000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getParticipants()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "getParticipants()", "lineno": 313, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3303, "code": "Hash));\n        \n\t\tuint256 _randomInt = uint256(_f", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_8: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WinEtherPot10_0: 0xb2185bb100000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "drawWinner()", "lineno": 203, "title": "Exception state", "type": "Informational"}, {"address": 5651, "code": "atestBlockNumber), cumulative", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x0\nstorage_12: 0x1\nstorage_11: 0xff00\ncalldata_WinEtherPot10_0: 0xf90f456000000000000000000000000000000000000000000000000000000000\ncalldatasize_WinEtherPot10: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x160a9f91993f81281127b7144344976cdfe2095b.sol", "function": "placeBet()", "lineno": 91, "title": "Exception state", "type": "Informational"}], "success": true}