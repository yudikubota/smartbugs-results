{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.23;\r\n^---------------------^\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:40:9: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n        function owned() public {\r\n        ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:80:9: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n        function TokenERC20(\r\n        ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:223:9: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n        function CRYPTOBITECOIN(\r\n        ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:54:32: Warning: Functions in interfaces should be declared external.\n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\r\n                               ^-----------------------------------------------------------------------------------------------^\n/unique_chucks/26/0x55a15cffd4deef3ba6e1a2b928a60fb35180e36b.sol:277:21: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n            require(this.balance >= amount.mul(sellPrice));      // checks if the contract has enough ether to buy\r\n                    ^----------^\n", "issues": []}