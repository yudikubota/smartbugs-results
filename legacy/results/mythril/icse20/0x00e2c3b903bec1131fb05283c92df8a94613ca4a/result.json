{
  "contract": "0x00e2c3b903bec1131fb05283c92df8a94613ca4a",
  "tool": "mythril",
  "start": 1563594927.6132693,
  "end": 1563595017.455604,
  "duration": 89.84233474731445,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 370,
        "code": "             removeFromWhitelist(addr);\n            }\n        }\n    }\n}\n\n/**\n * @title BitGuildFeeProvider\n * @dev Fee definition, supports custom fees by seller or buyer or token combinations\n */\ncontract BitGuildFeeProvider is BitGuildAccessAdmin {\n    // @dev Since default uint value is zero, need to distinguish Default vs No Fee\n    uint constant NO_FEE = 10000;\n\n    // @dev default % fee. Fixed is not supported. use",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x62e7707e00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `whitelistAddresses(address[],bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x00e2c3b903bec1131fb05283c92df8a94613ca4a.sol",
        "function": "whitelistAddresses(address[],bool)",
        "lineno": 353,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4768,
        "code": "\n    event OwnershipTransf",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_4: 0x0\nstorage_1: 0x0\ncalldata_tokenRecipient_0: 0xe28d490600000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x00e2c3b903bec1131fb05283c92df8a94613ca4a.sol",
        "function": "_function_0xe28d4906",
        "lineno": 161,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5594,
        "code": " addres",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x0\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_tokenRecipient_0: 0xe43252d700000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addToWhitelist(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x00e2c3b903bec1131fb05283c92df8a94613ca4a.sol",
        "function": "addToWhitelist(address)",
        "lineno": 324,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}