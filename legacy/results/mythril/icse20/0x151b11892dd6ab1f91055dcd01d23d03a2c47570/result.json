{
  "contract": "0x151b11892dd6ab1f91055dcd01d23d03a2c47570",
  "tool": "mythril",
  "start": 1563814476.7437866,
  "end": 1563815343.3142476,
  "duration": 866.5704610347748,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 159,
        "code": "sContract(_addr));\n\n        registry[keccak256(_namespace)] = Registry({\n            addr: _addr,\n            updated: now,\n            ttl: _ttl\n        });\n\n        // saves reverse record. \n        ptr[_addr] = _namespace;\n        \n        Set(_namespace, _addr, _ttl);\n    }\n\n    /**\n     * @dev Removes a service locator registry\n     * @param _namespace - namespace string for the ",
        "debug": "calldata_ServiceLocator_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ServiceLocator_0: 0x3ba9a5a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set(string,address,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "set(string,address,uint32)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 312,
        "code": " {\n        Registry storage r = registry[keccak256(_namespace)];\n        \n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return address(0);\n        }\n        return r.addr;\n    }\n\n    /**\n     * @dev Gets the namespace for a provided address \n     * ",
        "debug": "calldata_ServiceLocator_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ServiceLocator_0: 0x693ec85e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `get(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "get(string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 481,
        "code": "r[ registry[h].addr ];\n        delete registry[ h ];\n        \n        Remove(_namespace);\n    }\n\n    /**\n     * @dev Checks if the provided address is a contract.\n     * @param _addr - ethereum address\n     * @return ",
        "debug": "calldata_ServiceLocator_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ServiceLocator_0: 0x80599e4b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `remove(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "remove(string)",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1827,
        "code": "        return r.",
        "debug": "storage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_ServiceLocator_4_+_calldata_ServiceLocator_4))): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff9f0fa7ed\ncalldata_ServiceLocator_4 + calldata_ServiceLocator_4: 0xe0\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_ServiceLocator_4_+_calldata_ServiceLocator_4))): 0x9fc3c40900\ncalldata_ServiceLocator_0: 0x693ec85e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `get(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "get(string)",
        "lineno": 72,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2791,
        "code": "\n\n    /**\n     * ",
        "debug": "storage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff097016db\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ServiceLocator_4: 0x20\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128): 0xfffff4d100\ncalldata_ServiceLocator_0: 0xd39451e300000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getNamespace(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "getNamespace(address)",
        "lineno": 89,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3391,
        "code": " struct Registry {\n        // address to resolve \n        address addr;\n        // last updated time\n        uint256 updated;\n        // time to live for this record\n        uint32 ttl; \n    }\n\n    mapping (bytes32 => Registry) registry;\n    mapping (address => string) ptr;\n\n    // EVENTS\n    event Set(string namespace, address registryAddr, uint32 ttl);\n    event Remove(string namespace);\n\n    /**\n     * @dev Gets the address for a provided namespace \n     *  in the service locator. \n     * @param _namespace - namespace string for the record.\n     * @return address for the stored record\n     */\n    function get(string _namespace) constant public returns (address) {\n        Registry storage r = registry[keccak256(_namespace)];\n        \n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return address(0);\n        }\n        return r.addr;\n    }\n\n    /**\n     * @dev Gets the namespace for a provided address \n     *  in the service locator. \n     * @param _addr - address for the record.\n     * @return namespace for the stored record\n     */\n    function getNamespace(address _addr) constant public returns (string) {\n        string storage ns = ptr[_addr];\n\n        Registry storage r = registry[keccak256(ns)];\n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return \"\";\n        }\n        return ns;\n    }\n\n    /**\n     * @dev Sets or Updates service locator registry\n     * @param _namespace - namespace string for the record.\n     * @param _addr - address of the contract to be stored.\n     * @param _ttl - How long in seconds will the record be valid. (0 means no ttl).\n     */\n    function set(string _namespace, address _addr, uint32 _ttl) onlyOwner public {\n        require(isContract(_addr));\n\n        registry[keccak256(_namespace)] = Registry({\n            addr: _addr,\n            updated: now,\n            ttl: _ttl\n        });\n\n        // saves reverse record. \n        ptr[_addr] = _namespace;\n        \n        Set(_namespace, _addr, _ttl);\n    }\n\n    /**\n     * @dev Removes a service locator registry\n     * @param _namespace - namespace string for the record.\n     */\n    function remove(string _namespace) onlyOwner public {\n        bytes32 h = keccak256(_namespace);\n\n        delete ptr[ registry[h].addr ];\n        delete registry[ h ];\n        \n        Remove(_namespace);\n    }\n\n    /**\n     * @dev Checks if the provided address is a contract.\n     * @param _addr - ethereum address\n     * @return bool true if provided address is a contract.\n     */\n    function isContract(address _addr) private view returns (bool) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ServiceLocator_32_+_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_ServiceLocator_4 + calldata_ServiceLocator_4: 0x80\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ServiceLocator_32_+_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nextcodesize: 0xffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ServiceLocator_0: 0x3ba9a5a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set(string,address,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "set(string,address,uint32)",
        "lineno": 44,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3456,
        "code": " struct Registry {\n        // address to resolve \n        address addr;\n        // last updated time\n        uint256 updated;\n        // time to live for this record\n        uint32 ttl; \n    }\n\n    mapping (bytes32 => Registry) registry;\n    mapping (address => string) ptr;\n\n    // EVENTS\n    event Set(string namespace, address registryAddr, uint32 ttl);\n    event Remove(string namespace);\n\n    /**\n     * @dev Gets the address for a provided namespace \n     *  in the service locator. \n     * @param _namespace - namespace string for the record.\n     * @return address for the stored record\n     */\n    function get(string _namespace) constant public returns (address) {\n        Registry storage r = registry[keccak256(_namespace)];\n        \n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return address(0);\n        }\n        return r.addr;\n    }\n\n    /**\n     * @dev Gets the namespace for a provided address \n     *  in the service locator. \n     * @param _addr - address for the record.\n     * @return namespace for the stored record\n     */\n    function getNamespace(address _addr) constant public returns (string) {\n        string storage ns = ptr[_addr];\n\n        Registry storage r = registry[keccak256(ns)];\n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return \"\";\n        }\n        return ns;\n    }\n\n    /**\n     * @dev Sets or Updates service locator registry\n     * @param _namespace - namespace string for the record.\n     * @param _addr - address of the contract to be stored.\n     * @param _ttl - How long in seconds will the record be valid. (0 means no ttl).\n     */\n    function set(string _namespace, address _addr, uint32 _ttl) onlyOwner public {\n        require(isContract(_addr));\n\n        registry[keccak256(_namespace)] = Registry({\n            addr: _addr,\n            updated: now,\n            ttl: _ttl\n        });\n\n        // saves reverse record. \n        ptr[_addr] = _namespace;\n        \n        Set(_namespace, _addr, _ttl);\n    }\n\n    /**\n     * @dev Removes a service locator registry\n     * @param _namespace - namespace string for the record.\n     */\n    function remove(string _namespace) onlyOwner public {\n        bytes32 h = keccak256(_namespace);\n\n        delete ptr[ registry[h].addr ];\n        delete registry[ h ];\n        \n        Remove(_namespace);\n    }\n\n    /**\n     * @dev Checks if the provided address is a contract.\n     * @param _addr - ethereum address\n     * @return bool true if provided address is a contract.\n     */\n    function isContract(address _addr) private view returns (bool) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n}",
        "debug": "calldata_ServiceLocator_4 + calldata_ServiceLocator_4: 0x40\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ServiceLocator_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ServiceLocator_0: 0x3ba9a5a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set(string,address,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "set(string,address,uint32)",
        "lineno": 44,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3537,
        "code": " struct Registry {\n        // address to resolve \n        address addr;\n        // last updated time\n        uint256 updated;\n        // time to live for this record\n        uint32 ttl; \n    }\n\n    mapping (bytes32 => Registry) registry;\n    mapping (address => string) ptr;\n\n    // EVENTS\n    event Set(string namespace, address registryAddr, uint32 ttl);\n    event Remove(string namespace);\n\n    /**\n     * @dev Gets the address for a provided namespace \n     *  in the service locator. \n     * @param _namespace - namespace string for the record.\n     * @return address for the stored record\n     */\n    function get(string _namespace) constant public returns (address) {\n        Registry storage r = registry[keccak256(_namespace)];\n        \n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return address(0);\n        }\n        return r.addr;\n    }\n\n    /**\n     * @dev Gets the namespace for a provided address \n     *  in the service locator. \n     * @param _addr - address for the record.\n     * @return namespace for the stored record\n     */\n    function getNamespace(address _addr) constant public returns (string) {\n        string storage ns = ptr[_addr];\n\n        Registry storage r = registry[keccak256(ns)];\n        if (r.ttl > 0 && r.updated + r.ttl < now) {\n            return \"\";\n        }\n        return ns;\n    }\n\n    /**\n     * @dev Sets or Updates service locator registry\n     * @param _namespace - namespace string for the record.\n     * @param _addr - address of the contract to be stored.\n     * @param _ttl - How long in seconds will the record be valid. (0 means no ttl).\n     */\n    function set(string _namespace, address _addr, uint32 _ttl) onlyOwner public {\n        require(isContract(_addr));\n\n        registry[keccak256(_namespace)] = Registry({\n            addr: _addr,\n            updated: now,\n            ttl: _ttl\n        });\n\n        // saves reverse record. \n        ptr[_addr] = _namespace;\n        \n        Set(_namespace, _addr, _ttl);\n    }\n\n    /**\n     * @dev Removes a service locator registry\n     * @param _namespace - namespace string for the record.\n     */\n    function remove(string _namespace) onlyOwner public {\n        bytes32 h = keccak256(_namespace);\n\n        delete ptr[ registry[h].addr ];\n        delete registry[ h ];\n        \n        Remove(_namespace);\n    }\n\n    /**\n     * @dev Checks if the provided address is a contract.\n     * @param _addr - ethereum address\n     * @return bool true if provided address is a contract.\n     */\n    function isContract(address _addr) private view returns (bool) {\n        uint32 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return (size > 0);\n    }\n}",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_0_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_ServiceLocator_4_+_calldata_ServiceLocator_4))),\n_____256): 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_0_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_ServiceLocator_4_+_calldata_ServiceLocator_4))),\n_____256): 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\ncalldata_ServiceLocator_4 + calldata_ServiceLocator_4: 0xa0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ServiceLocator_0: 0x80599e4b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ServiceLocator: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `remove(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x151b11892dd6ab1f91055dcd01d23d03a2c47570.sol",
        "function": "remove(string)",
        "lineno": 44,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}