{"error": null, "issues": [{"address": 228, "code": "e) whenDropIsActive onlyOwner external {\n    uint256 i = 0;\n    uint256 toSend = value * 10**18;\n    while (i < dests.length) {\n        sendInternally(dests[i] , toSend, value);\n        i++;\n    }\n  }  \n\n  function sendInternally(address recipient, uint256 tokensToSe", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x54919a6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sendTokensSingleValue(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokensSingleValue(address[],uint256)", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 234, "code": "e) whenDropIsActive onlyOwner external {\n    uint256 i = 0;\n    uint256 toSend = value * 10**18;\n    while (i < dests.length) {\n        sendInternally(dests[i] , toSend, value);\n        i++;\n    }\n  }  \n\n  function sendInternally(address recipient, uint256 tokensToSe", "debug": "calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Token_0: 0x54919a6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sendTokensSingleValue(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokensSingleValue(address[],uint256)", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 473, "code": "ues) whenDropIsActive onlyOwner external {\n    uint256 i = 0;\n    while (i < dests.length) {\n        uint256 toSend = values[i] * 10**18;\n        sendInternally(dests[i] , toSend, values[i]);\n        i++;\n    }\n  }\n\n  // this function can be used when you want to send sa", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xd8b66ae100000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sendTokens(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokens(address[],uint256[])", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1012, "code": " tokensAvailable();\n ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x939c0a66`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokens(address[],uint256[])", "lineno": 87, "title": "Message call to external contract", "type": "Warning"}, {"address": 1012, "code": " tokensAvailable();\n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1424\n", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "destroy()", "lineno": 87, "title": "Multiple Calls", "type": "Information"}, {"address": 1012, "code": " tokensAvailable();\n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function sendTokens(address[],uint256[]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokens(address[],uint256[])", "lineno": 87, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1424, "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x939c0a66`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "destroy()", "lineno": 92, "title": "Message call to external contract", "type": "Warning"}, {"address": 1424, "debug": "", "description": "A possible transaction order independence vulnerability exists in function destroy(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "destroy()", "lineno": 92, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1817, "code": " toSend, ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\nreturndatasize: 0x20\nretval_1012: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0xd8b66ae100000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncalldata_Token_4 + calldata_Token_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x2d25d6bf8830608cefa00c9443d89988f9a38874.sol", "function": "sendTokens(address[],uint256[])", "lineno": 55, "title": "Exception state", "type": "Informational"}], "success": true}