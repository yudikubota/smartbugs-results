{
  "contract": "0xccfd7490d9f4a44d3664cdcf5e2721863c507e81",
  "tool": "mythril",
  "start": 1563739753.5551522,
  "end": 1563739821.9781623,
  "duration": 68.4230101108551,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 622,
        "code": ";\ncontract random{",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_random_4: 0x0\ncaller: 0x0\nstorage_2: 0x0\ncalldata_random_0: 0x42f1181e00000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "addAuthorizedAddress(address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 947,
        "code": ".encodePacked(\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_random_0: 0x6e77218d00000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ncalldata_random_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "rand(uint256,uint256,address,uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1164,
        "code": "(block.gaslimit).add\n            (block.number)\n            ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_random_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_random_0: 0x6e77218d00000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ntimestamp: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "rand(uint256,uint256,address,uint256)",
        "lineno": 80,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2176,
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\ncalldata_random_32 + 68: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncalldata_random_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_random_0: 0x6e77218d00000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "rand(uint256,uint256,address,uint256)",
        "lineno": 123,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2213,
        "code": "ontract random{\n    using SafeMath for uint;\n    \n    uint256 constant private FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\n    \n    address[] private authorities;\n    mapping (address => bool) private authorized;\n    //This is adminstrator address ,only the administartor can add the authorized address or remove it\n    address private adminAddress=0x154210143d7814F8A60b957f3CDFC35357fFC89C;\n\n     modifier onlyAuthorized {\n        require(authorized[msg.sender]);\n        _;\n    }\n\n     modifier onlyAuthorizedAdmin {\n        require(adminAddress == msg.sender);\n        _;\n    }\n    modifier targetAuthorized(address target) {\n        require(authorized[target]);\n        _;\n    }\n\n    modifier targetNotAuthorized(address target) {\n        require(!authorized[target]);\n        _;\n    }\n\n    //################Event#######################################\n    event LOG_RANDOM(uint256 indexed roundIndex  ,uint256 randomNumber);\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\n\n\n    //################Authorized function#########################\n    function addAuthorizedAddress(address target)\n        public\n        onlyAuthorizedAdmin\n        targetNotAuthorized(target)\n    {\n        authorized[target] = true;\n        authorities.push(target);\n        emit LogAuthorizedAddressAdded(target, msg.sender);\n    }\n\n    ///  Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        public\n        onlyAuthorizedAdmin\n        targetAuthorized(target)\n    {\n        delete authorized[target];\n        for (uint i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    //################Random number generate function#########################\n    function rand(uint min, uint max,address tokenAddress, uint256 roundIndex)\n      public  \n      onlyAuthorized\n      returns(uint256) \n      {\n        uint256 factor = FACTOR * 100 / max;\n   \n  \n        uint256 seed = uint256(keccak256(abi.encodePacked(\n            (roundIndex).add\n            (block.timestamp).add\n            (block.difficulty).add\n            ((uint256(keccak256(abi.encodePacked(tokenAddress)))) / (now)).add\n            (block.gaslimit).add\n            (block.number)\n            \n        )));\n       \n        uint256 r=uint256(uint256(seed) / factor)  % max +min;\n\n         emit LOG_RANDOM(roundIndex,r);\n         return(r);\n       \n}\n    \n}\n\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal pure returns (uint) {\n    if",
        "debug": "storage_0: 0xe0700000001000000000100010000008041000000000000000000000a0080000\ncalldata_random_4: 0x0\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_random_4: 0xff00\ncaller: 0x0\nstorage_2: 0x0\ncalldata_random_0: 0x7071293900000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "removeAuthorizedAddress(address)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2215,
        "code": "ontract random{\n    using SafeMath for uint;\n    \n    uint256 constant private FACTOR = 1157920892373161954235709850086879078532699846656405640394575840079131296399;\n    \n    address[] private authorities;\n    mapping (address => bool) private authorized;\n    //This is adminstrator address ,only the administartor can add the authorized address or remove it\n    address private adminAddress=0x154210143d7814F8A60b957f3CDFC35357fFC89C;\n\n     modifier onlyAuthorized {\n        require(authorized[msg.sender]);\n        _;\n    }\n\n     modifier onlyAuthorizedAdmin {\n        require(adminAddress == msg.sender);\n        _;\n    }\n    modifier targetAuthorized(address target) {\n        require(authorized[target]);\n        _;\n    }\n\n    modifier targetNotAuthorized(address target) {\n        require(!authorized[target]);\n        _;\n    }\n\n    //################Event#######################################\n    event LOG_RANDOM(uint256 indexed roundIndex  ,uint256 randomNumber);\n    event LogAuthorizedAddressAdded(address indexed target, address indexed caller);\n    event LogAuthorizedAddressRemoved(address indexed target, address indexed caller);\n\n\n    //################Authorized function#########################\n    function addAuthorizedAddress(address target)\n        public\n        onlyAuthorizedAdmin\n        targetNotAuthorized(target)\n    {\n        authorized[target] = true;\n        authorities.push(target);\n        emit LogAuthorizedAddressAdded(target, msg.sender);\n    }\n\n    ///  Removes authorizion of an address.\n    /// @param target Address to remove authorization from.\n    function removeAuthorizedAddress(address target)\n        public\n        onlyAuthorizedAdmin\n        targetAuthorized(target)\n    {\n        delete authorized[target];\n        for (uint i = 0; i < authorities.length; i++) {\n            if (authorities[i] == target) {\n                authorities[i] = authorities[authorities.length - 1];\n                authorities.length -= 1;\n                break;\n            }\n        }\n        emit LogAuthorizedAddressRemoved(target, msg.sender);\n    }\n\n    //################Random number generate function#########################\n    function rand(uint min, uint max,address tokenAddress, uint256 roundIndex)\n      public  \n      onlyAuthorized\n      returns(uint256) \n      {\n        uint256 factor = FACTOR * 100 / max;\n   \n  \n        uint256 seed = uint256(keccak256(abi.encodePacked(\n            (roundIndex).add\n            (block.timestamp).add\n            (block.difficulty).add\n            ((uint256(keccak256(abi.encodePacked(tokenAddress)))) / (now)).add\n            (block.gaslimit).add\n            (block.number)\n            \n        )));\n       \n        uint256 r=uint256(uint256(seed) / factor)  % max +min;\n\n         emit LOG_RANDOM(roundIndex,r);\n         return(r);\n       \n}\n    \n}\n\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal pure returns (uint) {\n    if",
        "debug": "storage_0: 0xff70000000300c0300fc180033c38003fffffffffffffffffffffffffffffffe\ncalldata_random_4: 0x0\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_random_4: 0xff00\ncaller: 0x0\nstorage_2: 0x0\ncalldata_random_0: 0x7071293900000000000000000000000000000000000000000000000000000000\ncalldatasize_random: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `removeAuthorizedAddress(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xccfd7490d9f4a44d3664cdcf5e2721863c507e81.sol",
        "function": "removeAuthorizedAddress(address)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}