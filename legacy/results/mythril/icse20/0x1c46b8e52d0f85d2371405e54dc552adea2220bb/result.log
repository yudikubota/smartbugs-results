{"error": null, "issues": [{"address": 491, "code": "ng reference) \n        onlyOwner \n        noEdit(goeureka_audit_ref) \n        public {\n            records[goeureka_audit_ref].reference = reference;\n            records[goeureka_audit_ref].exist = true;\n    }\n\n    function get(bytes32 goeureka_audit_ref) publ", "debug": "calldata_SimpleAudit_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SimpleAudit_0: 0xb480003300000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleAudit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1c46b8e52d0f85d2371405e54dc552adea2220bb.sol", "function": "set(bytes32,string)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1544, "code": "Audit {\n    \n    struct Audit {\n        string reference;        // a hash of two reference code from supplier and goeureka\n        bool exist;              // checks if the reference exists\n    }\n    \n    address creator;\n    mapping(bytes32 => Audit) public records;\n    \n    constructor() public {\n        creator = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(\n            msg.sender == creator, \"Only owner can call this function.\"\n        );\n        _;\n    }\n    \n    modifier noEdit(bytes32 goeureka_audit_ref) {\n        \n        require(\n            records[goeureka_audit_ref].exist == false, \n            \"Already set, audit log cannot be modified\"\n        );\n        _;\n    }\n\n    function set(bytes32 goeureka_audit_ref, string reference) \n        onlyOwner \n        noEdit(goeureka_audit_ref) \n        public {\n            records[goeureka_audit_ref].reference = reference;\n            records[goeureka_audit_ref].exist = true;\n    }\n\n    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n        return records[goeureka_audit_ref].reference;\n    }\n    \n}", "debug": "keccac_0_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SimpleAudit_0: 0xb480003300000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleAudit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1c46b8e52d0f85d2371405e54dc552adea2220bb.sol", "function": "set(bytes32,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1573, "code": "Audit {\n    \n    struct Audit {\n        string reference;        // a hash of two reference code from supplier and goeureka\n        bool exist;              // checks if the reference exists\n    }\n    \n    address creator;\n    mapping(bytes32 => Audit) public records;\n    \n    constructor() public {\n        creator = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(\n            msg.sender == creator, \"Only owner can call this function.\"\n        );\n        _;\n    }\n    \n    modifier noEdit(bytes32 goeureka_audit_ref) {\n        \n        require(\n            records[goeureka_audit_ref].exist == false, \n            \"Already set, audit log cannot be modified\"\n        );\n        _;\n    }\n\n    function set(bytes32 goeureka_audit_ref, string reference) \n        onlyOwner \n        noEdit(goeureka_audit_ref) \n        public {\n            records[goeureka_audit_ref].reference = reference;\n            records[goeureka_audit_ref].exist = true;\n    }\n\n    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n        return records[goeureka_audit_ref].reference;\n    }\n    \n}", "debug": "calldata_SimpleAudit_4 + calldata_SimpleAudit_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SimpleAudit_0: 0xb480003300000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleAudit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1c46b8e52d0f85d2371405e54dc552adea2220bb.sol", "function": "set(bytes32,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1587, "code": "Audit {\n    \n    struct Audit {\n        string reference;        // a hash of two reference code from supplier and goeureka\n        bool exist;              // checks if the reference exists\n    }\n    \n    address creator;\n    mapping(bytes32 => Audit) public records;\n    \n    constructor() public {\n        creator = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(\n            msg.sender == creator, \"Only owner can call this function.\"\n        );\n        _;\n    }\n    \n    modifier noEdit(bytes32 goeureka_audit_ref) {\n        \n        require(\n            records[goeureka_audit_ref].exist == false, \n            \"Already set, audit log cannot be modified\"\n        );\n        _;\n    }\n\n    function set(bytes32 goeureka_audit_ref, string reference) \n        onlyOwner \n        noEdit(goeureka_audit_ref) \n        public {\n            records[goeureka_audit_ref].reference = reference;\n            records[goeureka_audit_ref].exist = true;\n    }\n\n    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n        return records[goeureka_audit_ref].reference;\n    }\n    \n}", "debug": "calldata_SimpleAudit_4 + calldata_SimpleAudit_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SimpleAudit_0: 0xb480003300000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleAudit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1c46b8e52d0f85d2371405e54dc552adea2220bb.sol", "function": "set(bytes32,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1609, "code": "Audit {\n    \n    struct Audit {\n        string reference;        // a hash of two reference code from supplier and goeureka\n        bool exist;              // checks if the reference exists\n    }\n    \n    address creator;\n    mapping(bytes32 => Audit) public records;\n    \n    constructor() public {\n        creator = msg.sender;\n    }\n    \n    modifier onlyOwner {\n        require(\n            msg.sender == creator, \"Only owner can call this function.\"\n        );\n        _;\n    }\n    \n    modifier noEdit(bytes32 goeureka_audit_ref) {\n        \n        require(\n            records[goeureka_audit_ref].exist == false, \n            \"Already set, audit log cannot be modified\"\n        );\n        _;\n    }\n\n    function set(bytes32 goeureka_audit_ref, string reference) \n        onlyOwner \n        noEdit(goeureka_audit_ref) \n        public {\n            records[goeureka_audit_ref].reference = reference;\n            records[goeureka_audit_ref].exist = true;\n    }\n\n    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n        return records[goeureka_audit_ref].reference;\n    }\n    \n}", "debug": "calldata_SimpleAudit_4 + calldata_SimpleAudit_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_0_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SimpleAudit_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SimpleAudit_0: 0xb480003300000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleAudit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1c46b8e52d0f85d2371405e54dc552adea2220bb.sol", "function": "set(bytes32,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}], "success": true}