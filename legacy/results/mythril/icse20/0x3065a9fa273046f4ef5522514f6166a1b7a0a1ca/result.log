{"error": null, "issues": [{"address": 429, "code": "ready exists or used in the past. Please choose a new endpoint\");\n\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\"));\n        registry.initiateProviderCurve(endpoint, curve, address(this));\n\n        curves[endpoint] = newToken(bytes32ToString(endpoint), bytes32ToString(symbol));\n        curves_list.push(endpoint);\n        registry.setProviderParameter(endpoint, toBytes(curves[endpoint]));\n\n        DotTokenCreated(curves[endpoint]);\n        return curves[endpoint];\n    }\n\n    //whether this contract holds tokens or coming from msg.sender,etc\n    function bond(bytes32 endpoint, uint numDots) public  {\n        require( status == ContestStatus.Initialized, \" contest is not initiated\");\n\n        bondage = BondageInterface(coord.getContract(\"BONDAGE\"));\n   ", "debug": "calldata_ZapCoordinatorInterface_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 277, "title": "Integer Overflow ", "type": "Warning"}, {"address": 620, "code": "blic curves_list; // array ", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x200d2ed200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "_function_0x200d2ed2", "lineno": 172, "title": "Exception state", "type": "Informational"}, {"address": 1108, "code": "\n      return false;\n    }\n\n    // https://ethereum.stackexchange.com/questions/884/how-t", "debug": "storage_12: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_ZapCoordinatorInterface_0: 0x5d7c83f100000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEndpoints()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "getEndpoints()", "lineno": 398, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1195, "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "_function_0x5ef6228c", "lineno": 426, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3296, "code": "toBytes(curves[endpoint]));\n\n", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 284, "title": "Message call to external contract", "type": "Informational"}, {"address": 3296, "code": "toBytes(curves[endpoint]));\n\n", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3601\nCall at address: 3601\nCall at address: 3601\nCall at address: 3601\nCall at address: 3601\nCall at address: 3601\nCall at address: 3601\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 284, "title": "Multiple Calls", "type": "Information"}, {"address": 3526, "code": "okenCreated(curves[endpoint]);\n        return curves[endpoint]", "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0x800000000000000000000000000000000000000000000000000000000000000\nreturndatasize: 0x20\nretval_3296: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 286, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3601, "code": "okenCreated(curves[endpoint]);\n        return curves[endpoint]", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "initializeCurve(bytes32,bytes32,int256[])", "lineno": 286, "title": "Message call to external contract", "type": "Warning"}, {"address": 4414, "code": "      // redeemable value of e", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x11da60b400000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 238, "title": "Exception state", "type": "Informational"}, {"address": 4729, "code": "< curves_list.length; i++) {", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 240, "title": "Message call to external contract", "type": "Informational"}, {"address": 4729, "code": "< curves_list.length; i++) {", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5985\nCall at address: 5985\nCall at address: 5412\nCall at address: 5059\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 240, "title": "Multiple Calls", "type": "Information"}, {"address": 4848, "code": "     for( uint256 i = 0; i < curves_list.length; i++) {\n", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 240, "title": "State change after external call", "type": "Warning"}, {"address": 5059, "code": "ge.getDotsIssued(address(this), curves_list[", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 242, "title": "Message call to external contract", "type": "Informational"}, {"address": 5059, "code": "ge.getDotsIssued(address(this), curves_list[", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5985\nCall at address: 5985\nCall at address: 5412\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 242, "title": "Multiple Calls", "type": "Information"}, {"address": 5412, "code": ")) / numWin;\n\n        status = ContestStatus.Settled", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 248, "title": "Message call to external contract", "type": "Informational"}, {"address": 5985, "code": "re(msg.sender == oracle);\n        req", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 257, "title": "Message call to external contract", "type": "Informational"}, {"address": 6056, "code": "      require(msg.sender == oracle);\n        require(stat", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 257, "title": "State change after external call", "type": "Warning"}, {"address": 6092, "code": "Status.Settled || status == Co", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "settle()", "lineno": 258, "title": "State change after external call", "type": "Warning"}, {"address": 6229, "code": "getContract(\"CURRENT_COST\"));\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x4d8de4fc00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 322, "title": "Exception state", "type": "Informational"}, {"address": 6544, "code": "eCost = currentCost._costOfN", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 324, "title": "Message call to external contract", "type": "Informational"}, {"address": 6544, "code": "eCost = currentCost._costOfN", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7402\nCall at address: 7148\nCall at address: 6872\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 324, "title": "Multiple Calls", "type": "Information"}, {"address": 6663, "code": "to send\n        uint reserveCost = currentCost._costOfND", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 323, "title": "State change after external call", "type": "Warning"}, {"address": 6872, "code": "nt, issued + 1 - numDots, numDots - 1);\n\n     ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 324, "title": "Message call to external contract", "type": "Informational"}, {"address": 6872, "code": "nt, issued + 1 - numDots, numDots - 1);\n\n     ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7402\nCall at address: 7148\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 324, "title": "Multiple Calls", "type": "Information"}, {"address": 7148, "code": "= FactoryTokenInterface(curves[endpoint]);\n\n  ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Message call to external contract", "type": "Informational"}, {"address": 7148, "code": "= FactoryTokenInterface(curves[endpoint]);\n\n  ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7402\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 326, "title": "Multiple Calls", "type": "Information"}, {"address": 7402, "code": " status == ContestStatus.Canceled", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 328, "title": "Message call to external contract", "type": "Informational"}, {"address": 7521, "code": "tus == ContestStatus.Initialized || status == ContestStatus.Canceled)", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "unbond(bytes32,uint256)", "lineno": 328, "title": "State change after external call", "type": "Warning"}, {"address": 10094, "code": " public pure", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x4e69d56000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "getStatus()", "lineno": 403, "title": "Exception state", "type": "Informational"}, {"address": 10150, "code": "_COST\"));\n        uint256 numReserv", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ZapCoordinatorInterface_0: 0x51f9321500000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 297, "title": "Exception state", "type": "Informational"}, {"address": 10465, "code": ");\n\n        require(\n       ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 298, "title": "Message call to external contract", "type": "Informational"}, {"address": 10465, "code": ");\n\n        require(\n       ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11048\nCall at address: 10793\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 298, "title": "Multiple Calls", "type": "Information"}, {"address": 10584, "code": "nt, issued + 1, numDots - 1);\n\n        require(\n        ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 298, "title": "State change after external call", "type": "Warning"}, {"address": 10793, "code": "m(msg.sender, address(this), numReserve),\n    ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 301, "title": "Message call to external contract", "type": "Informational"}, {"address": 10793, "code": "m(msg.sender, address(this), numReserve),\n    ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11048\n", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 301, "title": "Multiple Calls", "type": "Information"}, {"address": 11048, "code": "sfer\"\n        );\n\n        reserve", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "bond(bytes32,uint256)", "lineno": 302, "title": "Message call to external contract", "type": "Informational"}, {"address": 13023, "code": "ge.com/questions/8", "debug": "storage_12: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_ZapCoordinatorInterface_0: 0x5d7c83f100000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEndpoints()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "getEndpoints()", "lineno": 402, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13025, "code": "ge.com/questions/8", "debug": "storage_12: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_ZapCoordinatorInterface_0: 0x5d7c83f100000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getEndpoints()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "getEndpoints()", "lineno": 402, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13087, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "_function_0x5ef6228c", "lineno": 426, "title": "Integer Underflow", "type": "Warning"}, {"address": 13096, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "_function_0x5ef6228c", "lineno": 426, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13256, "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x1\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "_function_0x5ef6228c", "lineno": 426, "title": "Integer Underflow", "type": "Warning"}, {"address": 13876, "code": "      for(uint256 i=0; i<curv", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x3065a9fa273046f4ef5522514f6166a1b7a0a1ca.sol", "function": "getTokenAddress(bytes32)", "lineno": 394, "title": "Message call to external contract", "type": "Informational"}], "success": true}