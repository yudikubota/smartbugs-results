{
  "contract": "0x9e40f1da2400e74e33a51d84b83d6a40736ef68f",
  "tool": "mythril",
  "start": 1563554026.9393249,
  "end": 1563554857.1855762,
  "duration": 830.2462513446808,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 357,
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\ncalldatasize_Token: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 357,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1951,
        "code": " stage = Stages",
        "debug": "timestamp: 0x0\nstorage_9: 0x1\ncalldata_Token_0: 0xb60d428800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\n",
        "description": "A possible integer underflow exists in the function `fund()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fund()",
        "lineno": 135,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2254,
        "code": "nsSent + tokenCount ",
        "debug": "storage_15: 0x300\ncallvalue: 0xf77124b52a24e057d8a070024000e4e0e29fe1280e6ec1bac4ce6c09cd081036\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_9: 0x0\ncalldatasize_Token: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 177,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2262,
        "code": "ensSent + tokenCount > CAP) {\n        ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x300\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_9: 0x0\ncalldatasize_Token: 0x3\nstorage_11: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 177,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2302,
        "code": " back to user.\n ",
        "debug": "storage_15: 0x300\nstorage_5: 0x0\ncallvalue: 0x11b1c7675666dbe70fd3ca35a051f929bb0c6bb2c97db19fff1fcd9a041\nstorage_11: 0x1648000008004088010000000908800400440000000800080008000000040000\nstorage_12: 0x1\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_9: 0x0\ncalldatasize_Token: 0x3\n",
        "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 184,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2407,
        "code": "        contributions[msg.sender] += cont",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2794\n",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 190,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2794,
        "code": "lNotReached) {\n            if (tokensSent >= TOKE",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 197,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3170,
        "code": " stage = Stages",
        "debug": "timestamp: 0x0\nstorage_9: 0x1\ncalldata_Token_0: 0xd616d2000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdrawContribution()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawContribution()",
        "lineno": 135,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3222,
        "code": "es.GoingAndGoalReached) {\n            ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\nstorage_6: 0x0\ntimestamp: 0x0\nstorage_9: 0x0\ncalldata_Token_0: 0xd616d2000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawContribution()",
        "lineno": 136,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3395,
        "code": "stage2) {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_9: 0x0\ncalldata_Token_0: 0xd616d2000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawContribution()",
        "lineno": 123,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3829,
        "code": "r];\n        contributions[msg.sender] = 0;\n        fundBalance -",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawContribution()",
        "lineno": 230,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4030,
        "code": "rn contribution;\n    }\n\n    /",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 238,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4046,
        "code": "hdraws ETH to workshop addr",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "fallback",
        "lineno": 241,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4744,
        "code": "stage2) {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\nstorage_8: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x7da63c5900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "changeValuePerToken(uint256)",
        "lineno": 123,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4866,
        "code": " stage = Stages",
        "debug": "timestamp: 0x0\nstorage_9: 0x1\ncalldata_Token_0: 0xad1aa25200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdrawUnsentTokensForOwner()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawUnsentTokensForOwner()",
        "lineno": 135,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4918,
        "code": "es.GoingAndGoalReached) {\n            ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\nstorage_6: 0x0\ntimestamp: 0x0\nstorage_9: 0x0\ncalldata_Token_0: 0xad1aa25200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawUnsentTokensForOwner()",
        "lineno": 136,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5091,
        "code": "stage2) {\n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x8000\nstorage_6: 0x1\ntimestamp: 0x0\nstorage_9: 0x0\ncalldata_Token_0: 0xad1aa25200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x9e40f1da2400e74e33a51d84b83d6a40736ef68f.sol",
        "function": "withdrawUnsentTokensForOwner()",
        "lineno": 123,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}