{"error": null, "issues": [{"address": 1092, "code": "t ownerIndex = ", "debug": "storage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_multiowned_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_multiowned_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_multiowned: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/7/0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol", "function": "removeOwner(address)", "lineno": 222, "title": "Integer Underflow", "type": "Warning"}, {"address": 1704, "code": "      m_ownerIn", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_multiowned_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_multiowned: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_multiowned_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol", "function": "addOwner(address)", "lineno": 203, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2822, "code": "0; i < m_numOwners; i++)", "debug": "The exception is triggered under the following conditions:\n\ncalldata_multiowned_4: 0xff\ncalldata_multiowned_0: 0xc41a360a00000000000000000000000000000000000000000000000000000000\ncalldatasize_multiowned: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol", "function": "getOwner(uint256)", "lineno": 255, "title": "Exception state", "type": "Informational"}, {"address": 3558, "code": " confirmed this operation previou", "debug": "storage_1: 0xeb\nstorage_260: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_multiowned_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_multiowned: 0x4\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128): 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_multiowned_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol", "function": "addOwner(address)", "lineno": 338, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4465, "code": "ing[_operation].yetNeeded;\n    }\n\n\n    function asse", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfb\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_multiowned_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_multiowned_0: 0xb75c7dc600000000000000000000000000000000000000000000000000000000\ncalldatasize_multiowned: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xec270e8f52b492dd0c2dcd43fc6f868e78f49f18.sol", "function": "revoke(bytes32)", "lineno": 404, "title": "Exception state", "type": "Informational"}], "success": true}