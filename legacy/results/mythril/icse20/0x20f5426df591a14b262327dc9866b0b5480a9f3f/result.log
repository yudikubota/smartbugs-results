{"error": null, "issues": [{"address": 4398, "debug": "", "description": "A possible transaction order independence vulnerability exists in function reclaimEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/19/0x20f5426df591a14b262327dc9866b0b5480a9f3f.sol", "function": "reclaimEther()", "lineno": 307, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4410, "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0x0\ncalldata_iBitcoin_0: 0x9f727c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_iBitcoin: 0x4\nretval_4398: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x20f5426df591a14b262327dc9866b0b5480a9f3f.sol", "function": "reclaimEther()", "lineno": 307, "title": "Exception state", "type": "Informational"}, {"address": 4676, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0x20f5426df591a14b262327dc9866b0b5480a9f3f.sol", "function": "reclaimTokien(address,address,uint256)", "lineno": 307, "title": "Message call to external contract", "type": "Warning"}, {"address": 6417, "code": "\n\n/**", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iBitcoin_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_iBitcoin_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_iBitcoin_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_iBitcoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x20f5426df591a14b262327dc9866b0b5480a9f3f.sol", "function": "increaseApproval(address,uint256)", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6430, "code": "tle Basic toke", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iBitcoin_4: 0x1\ncalldata_iBitcoin_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_iBitcoin_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_iBitcoin: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x20f5426df591a14b262327dc9866b0b5480a9f3f.sol", "function": "increaseApproval(address,uint256)", "lineno": 60, "title": "Exception state", "type": "Informational"}], "success": true}