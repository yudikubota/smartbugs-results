{
  "contract": "0x4dd28be042f85e287e9aace4147152bf1cd835e9",
  "tool": "mythril",
  "start": 1563537661.2757864,
  "end": 1563537783.2189474,
  "duration": 121.94316101074219,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 4765,
        "code": "  }\n\n    // returns 2 lists: first of voter addresses, s",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setGlobalDelegation(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "resolveDelegation(address,address)",
        "lineno": 118,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4765,
        "code": "  }\n\n    // returns 2 lists: first of voter addresses, s",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function resolveDelegation(address,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "resolveDelegation(address,address)",
        "lineno": 118,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 10750,
        "code": "           tokenContracts = _appendMemArray(tokenContracts,",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `setGlobalDelegation(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "findPossibleDelegatorsOf(address)",
        "lineno": 198,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 10750,
        "code": "           tokenContracts = _appendMemArray(tokenContracts,",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function findPossibleDelegatorsOf(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "findPossibleDelegatorsOf(address)",
        "lineno": 198,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 11020,
        "code": "   return (d.thisDel",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SVDelegationV0101_4: 0x0\nstorage_4: 0x0\ncalldata_SVDelegationV0101_0: 0xdbf1ede300000000000000000000000000000000000000000000000000000000\ncalldatasize_SVDelegationV0101: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "_getLogTokenContract(uint256)",
        "lineno": 227,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12694,
        "code": ";\n\n// DELEGATION S",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SVDelegationV0101_4: 0x0\ncalldata_SVDelegationV0101_0: 0xdf6e7a5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SVDelegationV0101: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenDelegation(address,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x4dd28be042f85e287e9aace4147152bf1cd835e9.sol",
        "function": "setTokenDelegation(address,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}