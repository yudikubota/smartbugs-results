{"error": null, "issues": [{"address": 793, "code": "   *  @param _arbitrator The chosen a", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x8000\ncalldata_PermissionInterface_0: 0x48f343f300000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "_function_0x48f343f3", "lineno": 240, "title": "Exception state", "type": "Informational"}, {"address": 2465, "code": "allenger = msg.sender;\n            item.balance", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 369, "title": "Message call to external contract", "type": "Informational"}, {"address": 2465, "code": "allenger = msg.sender;\n            item.balance", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3091\n", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 369, "title": "Multiple Calls", "type": "Information"}, {"address": 2583, "code": "  item.disputeID = arbitrator.createDispute", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x8000\nstorage_1: 0x20\nretval_2465: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PermissionInterface_0: 0x342d9a0400000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 372, "title": "Exception state", "type": "Informational"}, {"address": 2758, "code": "ester is not high enough", "debug": "storage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x600\ncallvalue: 0x0\nstorage_1: 0x20\nretval_2465: 0x1\nstorage_4 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x1\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PermissionInterface_0: 0x342d9a0400000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\n", "description": "A possible integer underflow exists in the function `challengeClearing(bytes32)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 375, "title": "Integer Underflow", "type": "Warning"}, {"address": 2768, "code": "osit of the requester is not high enough", "debug": "storage_4 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x600\ncallvalue: 0x7fffdfffffffffffffffffffffffffffffffffffffffffffffffffdfffffffff\nstorage_1: 0x20\nretval_2465: 0x1\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x0\nstorage_3: 0x7fffdfffffffffffffffffffffffffffffffffffffffffffffffffdffffffffe\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PermissionInterface_0: 0x342d9a0400000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\n", "description": "A possible integer overflow exists in the function `challengeClearing(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 375, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3091, "code": "aringRequested)\n                item.status = ItemStatus.Registered;\n", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 376, "title": "Message call to external contract", "type": "Informational"}, {"address": 3155, "code": "== ItemStatus.ClearingRequested)\n                item.status = ItemStatus.Registered;\n", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 376, "title": "State change after external call", "type": "Warning"}, {"address": 3187, "code": "e\n                item.status = ItemStat", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 378, "title": "State change after external call", "type": "Warning"}, {"address": 3438, "code": "disputed);\n    }\n\n    /**\n     ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 388, "title": "State change after external call", "type": "Warning"}, {"address": 3528, "code": "ling. Anyone can appeal to preven", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3592\n", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 392, "title": "Multiple Calls", "type": "Information"}, {"address": 3528, "code": "ling. Anyone can appeal to preven", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 392, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 3543, "code": "alue of the item", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeClearing(bytes32)", "lineno": 393, "title": "State change after external call", "type": "Warning"}, {"address": 4268, "code": "cts.\n     *  @param _cursor The pagin", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776: 0x8000\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776: 0x0\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PermissionInterface_0: 0x81a1fa0200000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "itemsCounts()", "lineno": 516, "title": "Exception state", "type": "Informational"}, {"address": 5959, "code": "  item.status = ItemStatus.PreventiveClearingRe", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "requestClearing(bytes32)", "lineno": 308, "title": "Message call to external contract", "type": "Informational"}, {"address": 6982, "code": "   item.challenger = msg.sender;\n            it", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "challengeRegistration(bytes32)", "lineno": 335, "title": "Message call to external contract", "type": "Informational"}, {"address": 8696, "code": "= ItemStatus.Resubmitted;\n        else\n        ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "requestRegistration(bytes32)", "lineno": 280, "title": "Message call to external contract", "type": "Informational"}, {"address": 9437, "code": "itrator. Note that 0 is reserved for ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_PermissionInterface_4: 0x8000\ncalldata_PermissionInterface_0: 0xbeabdb7b00000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "isPermitted(bytes32)", "lineno": 441, "title": "Exception state", "type": "Informational"}, {"address": 9570, "code": " the arbitrator contract.\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_PermissionInterface_4: 0x0\nstorage_7: 0x0\ncalldata_PermissionInterface_0: 0xc2bd9d9500000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "_function_0xc2bd9d95", "lineno": 241, "title": "Exception state", "type": "Informational"}, {"address": 10815, "code": "  item.balance -= toSend;\n       ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x8000\nstorage_2: 0xff00\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncalldata_PermissionInterface_32 + 4: 0x1\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 453, "title": "Exception state", "type": "Informational"}, {"address": 11101, "code": "     if (item.status==ItemStatus.Resubmitted ||", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 456, "title": "Message call to external contract", "type": "Informational"}, {"address": 11101, "code": "     if (item.status==ItemStatus.Resubmitted ||", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11272\n", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 456, "title": "Multiple Calls", "type": "Information"}, {"address": 11169, "code": "s.Submitted)\n         ", "debug": "storage_3: 0x8c200b5830c32043cf13bc5fe04802680060002120009e9da8ca3095c23bb845\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x400\nretval_11101: 0xd0cf94644a473b5f4f22a00f12000a001065c2aca00138b84aed1883a2bca765\nstorage_1: 0x8\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncalldata_PermissionInterface_32 + 4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `rule(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 456, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11180, "code": "in case of reverting f", "debug": "storage_3: 0x130c00080000000000000000000000000000000000000000000000000000000\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x400\nretval_11101: 0xfee14000159400020018200000000001000ffc006b97787fec90361ff83e9dfd\nstorage_1: 0x20\nstorage_4 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x120000959400020018200000000001000ffc006b97787fec90361ff83e9dfe\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncalldata_PermissionInterface_32 + 4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `rule(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 457, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11272, "code": " else\n                    i", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 458, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 11343, "code": "ItemStatus.PreventiveClearingReques", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x8000\nstorage_2: 0x0\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncalldata_PermissionInterface_32 + 4: 0x1\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 464, "title": "Exception state", "type": "Informational"}, {"address": 11488, "code": "        item.submitter.send(item.", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 465, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 11587, "code": "lse { // Split the balance 50-50 a", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 470, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 11690, "code": "  else if (item.status==ItemStatus.ClearingRequested)", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x8000\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncalldata_PermissionInterface_32 + 4: 0x2\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 473, "title": "Exception state", "type": "Informational"}, {"address": 11835, "code": "else\n                item.status ", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 475, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 11934, "code": ".submitter.send(item.balance / 2);", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 477, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 12025, "code": "ItemStatus.Submitted && _ruling==RE", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0x8000\ncalldata_PermissionInterface_32 + 4: 0x0\nstorage_5 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nstorage_keccac_calldata_PermissionInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PermissionInterface_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_PermissionInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 482, "title": "Exception state", "type": "Informational"}, {"address": 12306, "code": "puteID], item.status, item.disputed);", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 12412\n", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 487, "title": "Multiple Calls", "type": "Information"}, {"address": 12306, "code": "puteID], item.status, item.disputed);", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 487, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 12412, "code": "Interface Views */\n\n    /**\n     *  @d", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 490, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 12448, "code": " the list.\n     *  @r", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_contracts/0xb7faddf3ecd2402a7e48cea6d2637d90eeb5a7e6.sol", "function": "rule(uint256,uint256)", "lineno": 493, "title": "State change after external call", "type": "Warning"}], "success": true}