{"error": null, "issues": [{"address": 289, "code": "   view\n        returns(uint64 value, uint8 decimals)\n    {\n        value = prices[currency].value;\n        decimals = prices[currency].decimals;\n    }\n\n    //Value is returned with accuracy of 18 decimals (same a", "debug": "calldata_ExternalCurrencyPrice_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ExternalCurrencyPrice_0: 0x524f388900000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getPrice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "getPrice(string)", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 545, "code": "e, uint8 decimals)\n        public\n        onlyAdministrator\n    {\n        prices[currency].value = value;\n        prices[currency].decimals = decimals;\n        PriceSet(currency, value, decimals);\n    }\n\n    function getPrice(string currency)\n        publ", "debug": "calldata_ExternalCurrencyPrice_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ExternalCurrencyPrice_0: 0x90faa3e900000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setPrice(string,uint64,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "setPrice(string,uint64,uint8)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1024, "code": "ic\n        view\n        returns (uint88 amount)\n    {\n        require(prices[currency].value > 0);\n        require(value >= prices[currency].value);\n\n        amount = uint88( ( uint(value) * ( 10**18 ) ) / prices[currency].value );\n    }\n\n    function calculatePrice(string currency, uint88 amount)\n        public\n", "debug": "calldata_ExternalCurrencyPrice_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ExternalCurrencyPrice_0: 0xd6424ea700000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `calculateAmount(string,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "calculateAmount(string,uint64)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1195, "code": "ic\n        onlyAdministrator\n        returns (uint newTransactionId)\n    {\n        require(prices[currency].value > 0);\n\n        newTransactionId = transactions.length;\n\n        Transaction memory transaction;\n\n        transaction.currency = currency;\n        transaction.value = value;\n        transaction.decimals = prices[currency].decimals;\n        transaction.price = prices[currency].value;\n        transaction.transactionId = transactionId;\n\n        transactions.push(transaction);\n\n        NewTransaction(transaction.currency, transaction.value, transaction.transactionId,\n            transaction.price, transaction.decimals);\n    }\n\n    function getNumTransactions()\n        public\n        constant\n        returns(uint length)\n    {\n       ", "debug": "calldata_ExternalCurrencyPrice_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ExternalCurrencyPrice_0: 0xe2dc9aa100000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addTransaction(string,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1498, "code": "view\n        returns (uint64 price)\n    {\n        require(prices[currency].value > 0);\n\n        price = uint64( amount * prices[currency].value );\n    }\n\n    function addTransaction(string currency, uint64 value, string transactionId)\n    ", "debug": "calldata_ExternalCurrencyPrice_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ExternalCurrencyPrice_0: 0xf241335d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `calculatePrice(string,uint88)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "calculatePrice(string,uint88)", "lineno": 82, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1939, "code": "c refundTransactions;\n\n    address owner;\n\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ExternalCurrencyPrice_4: 0x0\nstorage_2: 0x0\ncalldata_ExternalCurrencyPrice_0: 0x87369e0400000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "_function_0x87369e04", "lineno": 26, "title": "Exception state", "type": "Informational"}, {"address": 2057, "code": " }\n\n    f", "debug": "", "description": "Function setPrice(string,uint64,uint8) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "setPrice(string,uint64,uint8)", "lineno": 38, "title": "Use of tx.origin", "type": "Warning"}, {"address": 2592, "code": "nsactions;\n    RefundTransaction[", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ExternalCurrencyPrice_4: 0x0\nstorage_1: 0x0\ncalldata_ExternalCurrencyPrice_0: 0x9ace38c200000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "_function_0x9ace38c2", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 3573, "code": " }\n\n    f", "debug": "", "description": "Function addTransaction(string,uint64,string) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 38, "title": "Use of tx.origin", "type": "Warning"}, {"address": 4132, "code": ";\n\n\ncontract Exter", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nKECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n160): 0xffffffffffffffff00\ncalldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4: 0x1f\nstorage_3: 0x0\norigin: 0x0\ncalldata_ExternalCurrencyPrice_0: 0xe2dc9aa100000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addTransaction(string,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4184, "code": "on.transactionId,\n            ", "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0 +\nKECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n160): 0xffffffffffffffff00\ncalldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4: 0x1f\nstorage_3: 0x0\norigin: 0x0\ncalldata_ExternalCurrencyPrice_0: 0xe2dc9aa100000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addTransaction(string,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 109, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4787, "code": " }\n\n    f", "debug": "", "description": "Function addRefundTransaction(uint256,uint88) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addRefundTransaction(uint256,uint88)", "lineno": 38, "title": "Use of tx.origin", "type": "Warning"}, {"address": 4906, "code": ";\n\n\ncontract Exter", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ExternalCurrencyPrice_4: 0x0\nstorage_1: 0x1\nstorage_3: 0x0\norigin: 0x0\ncalldata_ExternalCurrencyPrice_0: 0xe689010500000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRefundTransaction(uint256,uint88)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addRefundTransaction(uint256,uint88)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5558, "code": "tract ExternalCurrencyPrice {\n    struct CurrencyValue {\n        uint64 value;\n        uint8 decimals;\n    }\n\n    struct Transaction {\n        string currency;\n        uint64 value;\n        string transactionId;\n        uint64 price;\n        uint8  decimals;\n    }\n\n    struct RefundTransaction {\n        uint sourceTransaction;\n        uint88 refundAmount;\n    }\n\n    mapping(string => CurrencyValue) prices;\n\n    Transaction[] public transactions;\n    RefundTransaction[] public refundTransactions;\n\n    address owner;\n\n    event NewTransaction(string currency, uint64 value, string transactionId,\n                                                            uint64 price, uint8 decimals);\n    event NewRefundTransaction(uint sourceTransaction, uint88 refundAmount);\n    event PriceSet(string currency, uint64 value, uint8 decimals);\n\n    modifier onlyAdministrator() {\n        require(tx.origin == owner);\n        _;\n    }\n\n    function ExternalCurrencyPrice()\n        public\n    {\n        owner = tx.origin;\n    }\n\n    //Example: 0.00007115 BTC will be setPrice(\"BTC\", 7115, 8)\n    function setPrice(string currency, uint64 value, uint8 decimals)\n        public\n        onlyAdministrator\n    {\n        prices[currency].value = value;\n        prices[currency].decimals = decimals;\n        PriceSet(currency, value, decimals);\n    }\n\n    function getPrice(string currency)\n        public\n        view\n        returns(uint64 value, uint8 decimals)\n    {\n        value = prices[currency].value;\n        decimals = prices[currency].decimals;\n    }\n\n    //Value is returned with accuracy of 18 decimals (same as token)\n    //Example: to calculate value of 1 BTC call\n    // should look like calculateAmount(\"BTC\", 100000000)\n    // See setPrice example (8 decimals)\n    function calculateAmount(string currency, uint64 value)\n        public\n        view\n        returns (uint88 amount)\n    {\n        require(prices[currency].value > 0);\n        require(value >= prices[currency].value);\n\n        amount = uint88( ( uint(value) * ( 10**18 ) ) / prices[currency].value );\n    }\n\n    function calculatePrice(string currency, uint88 amount)\n        public\n        view\n        returns (uint64 price)\n    {\n        require(prices[currency].value > 0);\n\n        price = uint64( amount * prices[currency].value );\n    }\n\n    function addTransaction(string currency, uint64 value, string transactionId)\n        public\n        onlyAdministrator\n        returns (uint newTransactionId)\n    {\n        require(prices[currency].value > 0);\n\n        newTransactionId = transactions.length;\n\n        Transaction memory transaction;\n\n        transaction.currency = currency;\n        transaction.value = value;\n        transaction.decimals = prices[currency].decimals;\n        transaction.price = prices[currency].value;\n        transaction.transactionId = transactionId;\n\n        transactions.push(transaction);\n\n        NewTransaction(transaction.currency, transaction.value, transaction.transactionId,\n            transaction.price, transaction.decimals);\n    }\n\n    function getNumTransactions()\n        public\n        constant\n        returns(uint length)\n    {\n        length = transactions.length;\n    }\n\n    function addRefundTransaction(uint sourceTransaction, uint88 refundAmount)\n        public\n        onlyAdministrator\n        returns (uint newTransactionId)\n    {\n        require(sourceTransaction < transactions.length);\n\n        newTransactionId = refundTransactions.length;\n\n        RefundTransaction memory transaction;\n\n        transaction.sourceTransaction = sourceTransaction;\n        transaction.refundAmount = refundAmount;\n\n        refundTransactions.push(transaction);\n\n        NewRefundTransaction(transaction.sourceTransaction, transaction.refundAmount);\n    }\n\n    function getNumRefundTransactions()\n        public\n        constant\n        returns(uint length)\n    {\n        length = refundTransactions.length;\n    }\n}", "debug": "mem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\nKECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n160): 0xffffffffffffffff00\ncalldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4: 0x1f\nstorage_3: 0x0\norigin: 0x0\ncalldata_ExternalCurrencyPrice_0: 0xe2dc9aa100000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addTransaction(string,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5572, "code": "tract ExternalCurrencyPrice {\n    struct CurrencyValue {\n        uint64 value;\n        uint8 decimals;\n    }\n\n    struct Transaction {\n        string currency;\n        uint64 value;\n        string transactionId;\n        uint64 price;\n        uint8  decimals;\n    }\n\n    struct RefundTransaction {\n        uint sourceTransaction;\n        uint88 refundAmount;\n    }\n\n    mapping(string => CurrencyValue) prices;\n\n    Transaction[] public transactions;\n    RefundTransaction[] public refundTransactions;\n\n    address owner;\n\n    event NewTransaction(string currency, uint64 value, string transactionId,\n                                                            uint64 price, uint8 decimals);\n    event NewRefundTransaction(uint sourceTransaction, uint88 refundAmount);\n    event PriceSet(string currency, uint64 value, uint8 decimals);\n\n    modifier onlyAdministrator() {\n        require(tx.origin == owner);\n        _;\n    }\n\n    function ExternalCurrencyPrice()\n        public\n    {\n        owner = tx.origin;\n    }\n\n    //Example: 0.00007115 BTC will be setPrice(\"BTC\", 7115, 8)\n    function setPrice(string currency, uint64 value, uint8 decimals)\n        public\n        onlyAdministrator\n    {\n        prices[currency].value = value;\n        prices[currency].decimals = decimals;\n        PriceSet(currency, value, decimals);\n    }\n\n    function getPrice(string currency)\n        public\n        view\n        returns(uint64 value, uint8 decimals)\n    {\n        value = prices[currency].value;\n        decimals = prices[currency].decimals;\n    }\n\n    //Value is returned with accuracy of 18 decimals (same as token)\n    //Example: to calculate value of 1 BTC call\n    // should look like calculateAmount(\"BTC\", 100000000)\n    // See setPrice example (8 decimals)\n    function calculateAmount(string currency, uint64 value)\n        public\n        view\n        returns (uint88 amount)\n    {\n        require(prices[currency].value > 0);\n        require(value >= prices[currency].value);\n\n        amount = uint88( ( uint(value) * ( 10**18 ) ) / prices[currency].value );\n    }\n\n    function calculatePrice(string currency, uint88 amount)\n        public\n        view\n        returns (uint64 price)\n    {\n        require(prices[currency].value > 0);\n\n        price = uint64( amount * prices[currency].value );\n    }\n\n    function addTransaction(string currency, uint64 value, string transactionId)\n        public\n        onlyAdministrator\n        returns (uint newTransactionId)\n    {\n        require(prices[currency].value > 0);\n\n        newTransactionId = transactions.length;\n\n        Transaction memory transaction;\n\n        transaction.currency = currency;\n        transaction.value = value;\n        transaction.decimals = prices[currency].decimals;\n        transaction.price = prices[currency].value;\n        transaction.transactionId = transactionId;\n\n        transactions.push(transaction);\n\n        NewTransaction(transaction.currency, transaction.value, transaction.transactionId,\n            transaction.price, transaction.decimals);\n    }\n\n    function getNumTransactions()\n        public\n        constant\n        returns(uint length)\n    {\n        length = transactions.length;\n    }\n\n    function addRefundTransaction(uint sourceTransaction, uint88 refundAmount)\n        public\n        onlyAdministrator\n        returns (uint newTransactionId)\n    {\n        require(sourceTransaction < transactions.length);\n\n        newTransactionId = refundTransactions.length;\n\n        RefundTransaction memory transaction;\n\n        transaction.sourceTransaction = sourceTransaction;\n        transaction.refundAmount = refundAmount;\n\n        refundTransactions.push(transaction);\n\n        NewRefundTransaction(transaction.sourceTransaction, transaction.refundAmount);\n    }\n\n    function getNumRefundTransactions()\n        public\n        constant\n        returns(uint length)\n    {\n        length = refundTransactions.length;\n    }\n}", "debug": "mem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_0 +\nKECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_32 + 36)) +\n160): 0xffffffffffffffff00\ncalldata_ExternalCurrencyPrice_4 + calldata_ExternalCurrencyPrice_4: 0x1f\nstorage_3: 0x0\norigin: 0x0\ncalldata_ExternalCurrencyPrice_0: 0xe2dc9aa100000000000000000000000000000000000000000000000000000000\ncalldatasize_ExternalCurrencyPrice: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addTransaction(string,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x26ed62ba64c9d174298edb527506ae1df419cfae.sol", "function": "addTransaction(string,uint64,string)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}], "success": true}