{"error": null, "issues": [{"address": 1209, "code": "int count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "calldata_MultiSigWallet_4: 0xb894e3f8fc03bd6f006d0784632ad5021800000000000007ffbc098287ab0026\ncalldata_MultiSigWallet_32 + 4: 0x4102040800084406008900240000c00420000000000000080000101008002021\nmem_128 + 32 + 32*storage_6: 0x41f062108000000000000000000003e01f082e8b04000070798bc51a841086f8\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 244, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1675, "code": " address public delayed", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x0\nstorage_3: 0x0\ncalldata_MultiSigWallet_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "_function_0x025e7c27", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 2655, "debug": "storage_6: 0x1\ncalldata_MultiSigWallet_32 + 4: 0x0\ncalldata_MultiSigWallet_4: 0x1\ncalldata_MultiSigWallet_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184120: 0xff00\ncalldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getTransactionIds(uint256,uint256,bool,bool)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 257, "title": "Integer Underflow", "type": "Warning"}, {"address": 2729, "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigWallet_4: 0x1fffd0000003f81dc0800618f66bc096c6c0037143e6012e84288ce6b983960\ncalldata_MultiSigWallet_32 + 4: 0x10ff000000004c02802001204011002000000040005000900810010100008444\ncalldata_MultiSigWallet_0: 0xa8abe69a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "getTransactionIds(uint256,uint256,bool,bool)", "lineno": 257, "title": "Exception state", "type": "Informational"}, {"address": 3161, "code": "nder] = true;", "debug": "timestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed700\nstorage_0 + keccac_calldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_4: 0x0\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0xc01a8c8400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `confirmTransaction(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "confirmTransaction(uint256)", "lineno": 159, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5827, "code": "ract MultiSigWallet {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address indexed sender, uint indexed transactionId);\n    event Submission(uint indexed transactionId);\n    event Execution(uint indexed transactionId);\n    event ExecutionFailure(uint indexed transactionId);\n    event Deposit(address indexed sender, uint value);\n    event OwnerChange(address indexed oldOwner, address indexed newOwner);\n\n    /*\n     *  Constants\n     */\n    uint constant public REQUIRED = 3;\n\n    /*\n     *  Storage\n     */\n    mapping (uint => Transaction) public transactions;\n    \n    mapping (uint => mapping (address => bool)) public confirmations;\n    \n    mapping (address => bool) public isOwner;\n    address[] public owners;\n\n    address public delayedOwner;\n    // This value is the timestamp when the confirmation becomes valid.\n    mapping (uint => uint) public delayedConfirmations;\n\n    uint public transactionCount;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    /*\n     *  Modifiers\n     */\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner] && owner != delayedOwner);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner] || owner == delayedOwner);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n// as of now this could be refactored out - there is verification in code\n    modifier confirmed(uint transactionId, address owner) {\n        require(confirmations[transactionId][owner] || (owner == delayedOwner && delayedConfirmations[transactionId] < now));\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function() public\n        payable\n    {\n        if (msg.value > 0)\n            emit Deposit(msg.sender, msg.value);\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _delayedOwner an additional owner whose confirmation is delayed.\n    constructor(address[] _owners, address _delayedOwner)\n        public\n    {\n        uint _length = _owners.length;\n        require(_length == REQUIRED);\n        delayedOwner = _delayedOwner;\n        \n        for (uint i = 0; i < _length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerChange(owner, newOwner);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        ownerExists(msg.sender)\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n    {\n        if (msg.sender == delayedOwner)\n        {\n            delayedConfirmations[transactionId] = now + 2 weeks;\n            emit Confirmation(msg.sender, transactionId);\n        }\n        else\n        {\n            confirmations[transactionId][msg.sender] = true;\n            emit Confirmation(msg.sender, transactionId);\n            executeTransaction(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (txn.destination.call.value(txn.value)(txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == REQUIRED)\n                return true;\n        }\n        if (delayedConfirmations[transactionId] > 0 && delayedConfirmations[transactionId] < now)\n        {\n            count += 1;\n            if (count == REQUIRED)\n                return true;\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0xc642747400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/30/0xc65484367bdd9265d487d905a5aae228e9ee1000.sol", "function": "submitTransaction(address,uint256,bytes)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}], "success": true}