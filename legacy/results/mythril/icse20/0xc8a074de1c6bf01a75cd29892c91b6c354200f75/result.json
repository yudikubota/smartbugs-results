{
  "contract": "0xc8a074de1c6bf01a75cd29892c91b6c354200f75",
  "tool": "mythril",
  "start": 1563599282.6163096,
  "end": 1563599609.195135,
  "duration": 326.5788254737854,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 417,
        "code": "ansfer(address _to, uint2",
        "debug": "storage_8: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_6: 0x0\ncalldatasize_token: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "fallback",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1492,
        "code": "ire(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n      ",
        "debug": "calldata_token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_token_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setSymbol(string)",
        "lineno": 146,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1597,
        "code": "   symbol = _symbol;\n    }\n\n    function burn(uint256 _value) public {\n      ",
        "debug": "calldata_token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_token_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setName(string)",
        "lineno": 142,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2277,
        "code": "wner(address _newOwner) p",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_token_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "approve(address,uint256)",
        "lineno": 70,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2710,
        "code": "wner(address _newOwner) p",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 70,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3684,
        "code": "transfer(_value);\n    }\n",
        "debug": "calldata_token_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_24465873643947496235832446106509767096567058095563226156125564318740882468607: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "burn(uint256)",
        "lineno": 153,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4050,
        "code": "validAddress {\n        asse",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_token_0: 0x9d8803af00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "ethReverse(uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4133,
        "code": ", address indexed _spe",
        "debug": "SOLVER OUTPUT:\ncaller: 0x0\nstorage_6: 0x0\ncalldata_token_0: 0x9d8803af00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "In the function `ethReverse(uint256)` a non-zero amount of Ether is sent to an address taken from storage slot 6.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `ChangeOwner(address)`.\n\nThere is a check on storage index 6. This storage slot can be written to by calling the function `ChangeOwner(address)`.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "ethReverse(uint256)",
        "lineno": 157,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 4133,
        "code": ", address indexed _spe",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function ethReverse(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "ethReverse(uint256)",
        "lineno": 157,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4198,
        "code": "wner(address _newOwner) p",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncalldata_token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "transfer(address,uint256)",
        "lineno": 70,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5542,
        "code": "validAddress {\n        asse",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_token_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setSymbol(string)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5657,
        "code": "validAddress {\n        asse",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_token_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setName(string)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5828,
        "code": "validAddress {\n        asse",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_token_0: 0xe39dca1c00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "ToggleFeed(bool)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6014,
        "code": "validAddress {\n        asse",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_token_0: 0xf655e48c00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "SetTPE(uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6239,
        "code": "ct FrontToken {\n\n\n    string public name = \"FrontierCoin\";      //  token name\n    string public symbol = \"FRONT\";           //  token symbol\n    uint256 public decimals = 6;            //  token digit\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool feed = false;\n    uint256 constant valueFounder = 100000000000000000;\n    uint256 constant valuePub = 100000000000000000;\n    address owner = 0x0;\n    bool public crowdsaleClosed = false;\n    token tokenReward;\n    uint256 public amountRaised;\n    uint256 public tpe;\n\n    function SetTPE(uint256 _value) public isOwner {\n        tpe = _value;\n    }\n\n    function ToggleFeed(bool enabled) public isOwner {\n        feed = enabled;\n    }\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) public {\n        owner = _newOwner;\n    }\n\n    function FrontToken() public {\n        owner = msg.sender;\n        totalSupply = valueFounder + valuePub;\n        balanceOf[msg.sender] = valueFounder;\n        balanceOf[this] = valuePub;\n        Transfer(0x0, msg.sender, valueFounder);\n        Transfer(0x0, this, valuePub);\n        tokenReward = token(this);\n        tpe = 10000000;\n    }\n\n    function ToggleCrowdsale(bool enabled) public isOwner {\n        crowdsaleClosed = enabled;\n    }\n\n    function () payable public {\n        require(!crowdsaleClosed);\n        uint ethAmount = msg.value;\n        uint256 tokens = ethAmount * tpe / 0.000001 ether;\n        balanceOf[msg.sender] += tokens;\n        amountRaised += ethAmount;\n        Transfer(this, msg.sender, tokens);\n    }\n\n    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\n        if(feed) {\n            uint256 fee = div(_value, 97);\n            uint256 newValue = _value - fee;\n            require(balanceOf[msg.sender] >= newValue);\n            require(balanceOf[_to] + newValue >= balanceOf[_to]);\n            balanceOf[msg.sender] -= newValue;\n            balanceOf[_to] += newValue;\n            Transfer(msg.sender, _to, newValue);\n            balanceOf[owner] += fee;\n            Transfer(msg.sender, owner, fee);\n        }\n        else {\n            require(balanceOf[msg.sender] >= _value);\n            require(balanceOf[_to] + _value >= balanceOf[_to]);\n            balanceOf[msg.sender] -= _value;\n            balanceOf[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n        }\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n    function setSymbol(string _symbol) isOwner public {\n        symbol = _symbol;\n    }\n\n    function burn(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    function ethReverse(uint256 _value) isOwner public {\n        owner.transfer(_value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_token_4 + calldata_token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_token_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setName(string)",
        "lineno": 7,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6253,
        "code": "ct FrontToken {\n\n\n    string public name = \"FrontierCoin\";      //  token name\n    string public symbol = \"FRONT\";           //  token symbol\n    uint256 public decimals = 6;            //  token digit\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        // uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return a / b;\n    }\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool feed = false;\n    uint256 constant valueFounder = 100000000000000000;\n    uint256 constant valuePub = 100000000000000000;\n    address owner = 0x0;\n    bool public crowdsaleClosed = false;\n    token tokenReward;\n    uint256 public amountRaised;\n    uint256 public tpe;\n\n    function SetTPE(uint256 _value) public isOwner {\n        tpe = _value;\n    }\n\n    function ToggleFeed(bool enabled) public isOwner {\n        feed = enabled;\n    }\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    function ChangeOwner(address _newOwner) public {\n        owner = _newOwner;\n    }\n\n    function FrontToken() public {\n        owner = msg.sender;\n        totalSupply = valueFounder + valuePub;\n        balanceOf[msg.sender] = valueFounder;\n        balanceOf[this] = valuePub;\n        Transfer(0x0, msg.sender, valueFounder);\n        Transfer(0x0, this, valuePub);\n        tokenReward = token(this);\n        tpe = 10000000;\n    }\n\n    function ToggleCrowdsale(bool enabled) public isOwner {\n        crowdsaleClosed = enabled;\n    }\n\n    function () payable public {\n        require(!crowdsaleClosed);\n        uint ethAmount = msg.value;\n        uint256 tokens = ethAmount * tpe / 0.000001 ether;\n        balanceOf[msg.sender] += tokens;\n        amountRaised += ethAmount;\n        Transfer(this, msg.sender, tokens);\n    }\n\n    function transfer(address _to, uint256 _value) validAddress public returns (bool success) {\n        if(feed) {\n            uint256 fee = div(_value, 97);\n            uint256 newValue = _value - fee;\n            require(balanceOf[msg.sender] >= newValue);\n            require(balanceOf[_to] + newValue >= balanceOf[_to]);\n            balanceOf[msg.sender] -= newValue;\n            balanceOf[_to] += newValue;\n            Transfer(msg.sender, _to, newValue);\n            balanceOf[owner] += fee;\n            Transfer(msg.sender, owner, fee);\n        }\n        else {\n            require(balanceOf[msg.sender] >= _value);\n            require(balanceOf[_to] + _value >= balanceOf[_to]);\n            balanceOf[msg.sender] -= _value;\n            balanceOf[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n        }\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) validAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n    function setSymbol(string _symbol) isOwner public {\n        symbol = _symbol;\n    }\n\n    function burn(uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        Transfer(msg.sender, 0x0, _value);\n    }\n\n    function ethReverse(uint256 _value) isOwner public {\n        owner.transfer(_value);\n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}",
        "debug": "calldata_token_4 + calldata_token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_token_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xc8a074de1c6bf01a75cd29892c91b6c354200f75.sol",
        "function": "setName(string)",
        "lineno": 7,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}