{
  "contract": "0x598af135e0249528835f3c2736f80257d725715a",
  "tool": "mythril",
  "start": 1563778471.1688154,
  "end": 1563778716.5915637,
  "duration": 245.42274832725525,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 440,
        "code": " _decimals, string _symbol) \n        public \n    returns (address) {\n\n        ERC20 newToken = (new ERC20(_initialAmount, _name, _decimals, _symbol));\n        \n        initialOwnerToToken[_initialOwner].push(address(newToken));\n        tokenToInitialOwner[address(newToken)] = _initialOwner;\n        \n        newToken.transfer(_initialOwner, _initialAmount); \n\n        return address(newToken);\n    }\n\n}",
        "debug": "calldata_EtherZaarFactory_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EtherZaarFactory_0: 0x907b030500000000000000000000000000000000000000000000000000000000\ncalldatasize_EtherZaarFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createERC20(address,uint256,string,uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x598af135e0249528835f3c2736f80257d725715a.sol",
        "function": "createERC20(address,uint256,string,uint8,string)",
        "lineno": 88,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 735,
        "code": "address) public tokenToInitialOwner;\n\n    function Ether",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EtherZaarFactory_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_EtherZaarFactory_4: 0x0\ncalldata_EtherZaarFactory_0: 0x6d8396c200000000000000000000000000000000000000000000000000000000\ncalldatasize_EtherZaarFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/45/0x598af135e0249528835f3c2736f80257d725715a.sol",
        "function": "_function_0x6d8396c2",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}