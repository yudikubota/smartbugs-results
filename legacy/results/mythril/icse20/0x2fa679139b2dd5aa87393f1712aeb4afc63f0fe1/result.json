{
  "contract": "0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1",
  "tool": "mythril",
  "start": 1563258922.3569617,
  "end": 1563259268.5824292,
  "duration": 346.2254674434662,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1190,
        "code": " Fact(_owner, _filename);\n    }\n\n    func",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 18,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1416,
        "code": "ontract BitRecord {\n    struct Fact {\n        address owner;\n        string filename;\n    }\n\n    mapping(bytes16 => Fact) facts;\n    mapping(bytes16 => mapping(address => bool)) signatures;\n\n    constructor() public {}\n\n    function getFact(bytes16 _fact_id) public constant returns (string _filename) {\n        _filename = facts[_fact_id].filename;\n    }\n\n    function postFact(bytes16 _fact_id, address _owner, string _filename) public {\n        facts[_fact_id] = Fact(_owner, _filename);\n    }\n\n    function isSigned(bytes16 _fact_id, address _signer) public constant returns (bool _signed){\n      if (signatures[_fact_id][_signer] == true){\n          return true;\n      }else{\n          return false;\n      }\n    }\n\n    function signFact(bytes16 _fact_id) public {\n        signatures[_fact_id][msg.sender] = true;\n    }\n}",
        "debug": "keccac_1_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\ncalldata_BitRecord_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\ncalldata_BitRecord_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1445,
        "code": "ontract BitRecord {\n    struct Fact {\n        address owner;\n        string filename;\n    }\n\n    mapping(bytes16 => Fact) facts;\n    mapping(bytes16 => mapping(address => bool)) signatures;\n\n    constructor() public {}\n\n    function getFact(bytes16 _fact_id) public constant returns (string _filename) {\n        _filename = facts[_fact_id].filename;\n    }\n\n    function postFact(bytes16 _fact_id, address _owner, string _filename) public {\n        facts[_fact_id] = Fact(_owner, _filename);\n    }\n\n    function isSigned(bytes16 _fact_id, address _signer) public constant returns (bool _signed){\n      if (signatures[_fact_id][_signer] == true){\n          return true;\n      }else{\n          return false;\n      }\n    }\n\n    function signFact(bytes16 _fact_id) public {\n        signatures[_fact_id][msg.sender] = true;\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1459,
        "code": "ontract BitRecord {\n    struct Fact {\n        address owner;\n        string filename;\n    }\n\n    mapping(bytes16 => Fact) facts;\n    mapping(bytes16 => mapping(address => bool)) signatures;\n\n    constructor() public {}\n\n    function getFact(bytes16 _fact_id) public constant returns (string _filename) {\n        _filename = facts[_fact_id].filename;\n    }\n\n    function postFact(bytes16 _fact_id, address _owner, string _filename) public {\n        facts[_fact_id] = Fact(_owner, _filename);\n    }\n\n    function isSigned(bytes16 _fact_id, address _signer) public constant returns (bool _signed){\n      if (signatures[_fact_id][_signer] == true){\n          return true;\n      }else{\n          return false;\n      }\n    }\n\n    function signFact(bytes16 _fact_id) public {\n        signatures[_fact_id][msg.sender] = true;\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1476,
        "code": "ontract BitRecord {\n    struct Fact {\n        address owner;\n        string filename;\n    }\n\n    mapping(bytes16 => Fact) facts;\n    mapping(bytes16 => mapping(address => bool)) signatures;\n\n    constructor() public {}\n\n    function getFact(bytes16 _fact_id) public constant returns (string _filename) {\n        _filename = facts[_fact_id].filename;\n    }\n\n    function postFact(bytes16 _fact_id, address _owner, string _filename) public {\n        facts[_fact_id] = Fact(_owner, _filename);\n    }\n\n    function isSigned(bytes16 _fact_id, address _signer) public constant returns (bool _signed){\n      if (signatures[_fact_id][_signer] == true){\n          return true;\n      }else{\n          return false;\n      }\n    }\n\n    function signFact(bytes16 _fact_id) public {\n        signatures[_fact_id][msg.sender] = true;\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0x25\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1481,
        "code": "ontract BitRecord {\n    struct Fact {\n        address owner;\n        string filename;\n    }\n\n    mapping(bytes16 => Fact) facts;\n    mapping(bytes16 => mapping(address => bool)) signatures;\n\n    constructor() public {}\n\n    function getFact(bytes16 _fact_id) public constant returns (string _filename) {\n        _filename = facts[_fact_id].filename;\n    }\n\n    function postFact(bytes16 _fact_id, address _owner, string _filename) public {\n        facts[_fact_id] = Fact(_owner, _filename);\n    }\n\n    function isSigned(bytes16 _fact_id, address _signer) public constant returns (bool _signed){\n      if (signatures[_fact_id][_signer] == true){\n          return true;\n      }else{\n          return false;\n      }\n    }\n\n    function signFact(bytes16 _fact_id) public {\n        signatures[_fact_id][msg.sender] = true;\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BitRecord_4 + calldata_BitRecord_32 + 36)) +\n32: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_1_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n340282366920938463463374607431768211455_&\ncalldata_BitRecord_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BitRecord_0: 0xaa3ef24800000000000000000000000000000000000000000000000000000000\ncalldatasize_BitRecord: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `postFact(bytes16,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2fa679139b2dd5aa87393f1712aeb4afc63f0fe1.sol",
        "function": "postFact(bytes16,address,string)",
        "lineno": 2,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}