{
  "contract": "0x4fc550cd2312ed67cb3938378c90c2a76fae0142",
  "tool": "mythril",
  "start": 1563584824.770077,
  "end": 1563585012.4282389,
  "duration": 187.65816187858582,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3341,
        "code": "ocked)\nfu",
        "debug": "",
        "description": "Function freezeTransfers() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "freezeTransfers()",
        "lineno": 178,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 3955,
        "code": "         ",
        "debug": "",
        "description": "Function importAmountForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "importAmountForAddresses(uint256[],address[])",
        "lineno": 257,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 4058,
        "code": "nt256[] am",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncalldata_tme_4 + calldata_tme_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "importAmountForAddresses(uint256[],address[])",
        "lineno": 265,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4141,
        "code": "ressesToRemoveFrom) public {\n   ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nmem_0_+_192_+_32*calldata_tme_4_+_calldata_tme_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tme_cpy: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `importAmountForAddresses(uint256[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "importAmountForAddresses(uint256[],address[])",
        "lineno": 265,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4157,
        "code": "ddress) { // Dev ad",
        "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tme_cpy: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `importAmountForAddresses(uint256[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "importAmountForAddresses(uint256[],address[])",
        "lineno": 266,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4274,
        "code": "unction\nf",
        "debug": "",
        "description": "Function setTMEXAddress(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "setTMEXAddress(address)",
        "lineno": 205,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 4797,
        "code": "if (_to==TMEXAddress)  ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\ncalldata_tme_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_9: 0x0\ncalldata_tme_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5282,
        "code": "         ",
        "debug": "",
        "description": "Function removeAmountForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "removeAmountForAddresses(uint256[],address[])",
        "lineno": 271,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 5385,
        "code": "tme tmeCon",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncalldata_tme_4 + calldata_tme_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "removeAmountForAddresses(uint256[],address[])",
        "lineno": 280,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5468,
        "code": "595aE400a30FFBA37883363Fbf293e24e);\n ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nmem_0_+_192_+_32*calldata_tme_4_+_calldata_tme_4: 0x0\ncalldata_tme_cpy: 0x1\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeAmountForAddresses(uint256[],address[])`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "removeAmountForAddresses(uint256[],address[])",
        "lineno": 280,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5484,
        "code": "dsUsed=tmeContract.",
        "debug": "storage_4: 0x0\ncalldata_tme_cpy: 0x1\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeAmountForAddresses(uint256[],address[])`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "removeAmountForAddresses(uint256[],address[])",
        "lineno": 281,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5842,
        "code": "  {\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).returnChildAdd",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "returnIsParentAddress(address)",
        "lineno": 191,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5998,
        "code": "addressTo",
        "debug": "",
        "description": "Function setNumRewardsAvailableForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "setNumRewardsAvailableForAddresses(uint256[],address[])",
        "lineno": 162,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 9230,
        "code": "Produce(address pro",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_32_+_4: 0x10a429f0df3c5d904380008abaaabb80131200000002e2601804015ba0640082\ncalldata_tme_32 + 36: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_4: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a2020087f\nstorage_14: 0x0\ncalldata_tme_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_4: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_9: 0x0\ncalldata_tme_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 213,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9505,
        "code": " return burnAmountAllowed[producingAddress];\n}\n\n// Locks up all chan",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 14. This storage slot can be written to by calling the function `setTMEXAddress(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 214,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 9505,
        "code": " return burnAmountAllowed[producingAddress];\n}\n\n// Locks up all chan",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transferFrom(address,address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 214,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 9594,
        "code": "balances\nfunction lockBalan",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/21/0x4fc550cd2312ed67cb3938378c90c2a76fae0142.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 217,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}