{"error": null, "issues": [{"address": 433, "code": "ppId,\n    address _address,\n    string _uid\n  )\n  external\n  constant returns (uint)\n  {\n    ITweedentityStore _store = __getStore(_ap", "debug": "calldata_TweedentityManager_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TweedentityManager_0: 0x1343ed0500000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityManager: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `isStoreSet(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "isStoreSet(string)", "lineno": 408, "title": "Integer Overflow ", "type": "Warning"}, {"address": 882, "code": "ddress != address(0));\n    ITweedentityStore _store = ITweedentityStore(_address);\n    require(_store.getAppNickname() == _appNickname32);\n    uint _appId = _store.getAppId();\n    require(appNicknames32[_appId] == 0x0);\n    appNicknames32[_appId] = _appNickname32;\n    appNicknames[_appId] = _appNickname;\n    __appIds[_appNickname] = _appId;\n\n    __stores[_appId] = Store(\n      ITweedentityStore(_address),\n      _address\n    );\n  }\n\n\n  /**\n   * @dev Sets the claimer which will verify the ownership and call to set a tweedentity\n   * @param _address Address of the claimer\n   */\n  function setClaimer(\n    address _address\n  )\n  public\n  onlyOwner\n  {\n    requi", "debug": "calldata_TweedentityManager_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TweedentityManager_0: 0x543a9ce400000000000000000000000000000000000000000000000000000000\ncalldatasize_TweedentityManager: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAStore(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "setAStore(string,address)", "lineno": 217, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3240, "code": "nction changeMinimumTimeBefore", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "unsetIdentity(uint256,address)", "lineno": 520, "title": "Message call to external contract", "type": "Warning"}, {"address": 3240, "code": "nction changeMinimumTimeBefore", "debug": "", "description": "A possible transaction order independence vulnerability exists in function unsetIdentity(uint256,address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "unsetIdentity(uint256,address)", "lineno": 520, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3885, "code": "pIds[_appNickname] = _a", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "setAStore(string,address)", "lineno": 224, "title": "Message call to external contract", "type": "Warning"}, {"address": 3885, "code": "pIds[_appNickname] = _a", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4060\n", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "setAStore(string,address)", "lineno": 224, "title": "Multiple Calls", "type": "Information"}, {"address": 4060, "code": "   ITweedentitySt", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "setAStore(string,address)", "lineno": 227, "title": "Message call to external contract", "type": "Warning"}, {"address": 4975, "code": ";\n    for (i = 0; i < b.length; ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "unsetMyIdentity(uint256)", "lineno": 543, "title": "Message call to external contract", "type": "Warning"}, {"address": 4975, "code": ";\n    for (i = 0; i < b.length; ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function unsetMyIdentity(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/34/0x010a1a80541018e3ca4b38aaf47e2e64567afbac.sol", "function": "unsetMyIdentity(uint256)", "lineno": 543, "title": "Transaction order dependence", "type": "Warning"}], "success": true}