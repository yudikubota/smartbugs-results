{"error": null, "issues": [{"address": 390, "code": "  * @return the unlocktime time of the token vesting.\n   */\n  function unlocktime() pu", "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_VT201811004_0: 0x38af3eed00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `beneficiary()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "beneficiary()", "lineno": 99, "title": "Integer Overflow ", "type": "Warning"}, {"address": 683, "code": "   */\n    function setLockTime(uint256  locktimeParam,uint256  unlocktimePar", "debug": "storage_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_VT201811004_0: 0xaa8c217c00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `amount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "amount()", "lineno": 119, "title": "Integer Overflow ", "type": "Warning"}, {"address": 770, "code": "ime){\n             _beneficiary = beneficiaryParam;\n\t         _amount = amountParam;\n        }\n    } \n \n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  functio", "debug": "calldata_VT201811004_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VT201811004_0: 0xf0f31b6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUserInfo(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "setUserInfo(address[],uint256[])", "lineno": 128, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1047, "code": "  \n\n  /**\n", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_3: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VT201811004_0: 0x1916558700000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x19165587", "lineno": 150, "title": "Exception state", "type": "Informational"}, {"address": 1209, "code": "          }\n       }\n  } \n  \n  \n  \n\n  /**\n   * @notice ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x19165587", "lineno": 145, "title": "Message call to external contract", "type": "Warning"}, {"address": 1686, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x1a9e6aab", "lineno": 169, "title": "Message call to external contract", "type": "Warning"}, {"address": 1686, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1878\n", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x1a9e6aab", "lineno": 169, "title": "Multiple Calls", "type": "Information"}, {"address": 1878, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x1a9e6aab", "lineno": 169, "title": "Message call to external contract", "type": "Warning"}, {"address": 1959, "code": " function unlocktim", "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_VT201811004_0: 0x38af3eed00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `beneficiary()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "beneficiary()", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1961, "code": " function unlocktim", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_VT201811004_0: 0x38af3eed00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `beneficiary()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "beneficiary()", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2257, "code": "nt256  unlockt", "debug": "storage_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_VT201811004_0: 0xaa8c217c00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `amount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "amount()", "lineno": 120, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2259, "code": "nt256  unlockt", "debug": "storage_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_VT201811004_0: 0xaa8c217c00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `amount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "amount()", "lineno": 120, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2511, "code": "a);\n\t", "debug": "storage_4: 0x80\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856476: 0x9a8fd130a61d1eb3a50ff40d00d9a3f38554f550313eb3a990bb00ce7beed0d3\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x88e3e13f1f5eb12a348bf7edfedcb3a47a4a62d03d802123a031fefe630093d3\ncalldata_VT201811004_0: 0x1a9e6aab00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x1a9e6aab`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x1a9e6aab", "lineno": 23, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2524, "code": "rn c;\n\t}\n\tfunc", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xffff7fffffffffffffffffffffffffffffffffffffff7fffffffffffffffffff\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x1\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856476: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VT201811004_0: 0x1a9e6aab00000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "_function_0x1a9e6aab", "lineno": 24, "title": "Exception state", "type": "Informational"}, {"address": 2553, "code": "Released(uint256 amounts);\nevent InvalidCaller(address caller);\n\n   address public owner;\n\n  address[] private _beneficiary ;\n  uint256 private _locktime;  \n  uint256 private _unlocktime;  \n  uint256[] private _amount;\n\n  constructor() public\n  {\n    owner = msg.sender;\n     _unlocktime =0;\n  }\n  \n  \n   /*\n     * MODIFIERS\n     */\n\n   modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @return the beneficiary of the tokens.\n   */\n  function beneficiary() public view returns(address[]) {\n    return _beneficiary;\n  }\n\n  /**\n   * @return the unlocktime time of the token vesting.\n   */\n  function unlocktime() public view returns(uint256) {\n    return _unlocktime;\n  }\n    /**\n   * @return the locktime time of the token vesting.\n   */\n  function locktime() public view returns(uint256) {\n    return _locktime;\n  }\n  \n   /**\n   * @return the amount of the tokens.\n   */\n  function amount() public view returns(uint256[]) {\n    return _amount;\n  }\n  /**\n   * @notice Setting lock time.\n   */\n    function setLockTime(uint256  locktimeParam,uint256  unlocktimeParam) public onlyOwner{\n\t         _unlocktime = unlocktimeParam;\n\t        _locktime = locktimeParam;\n    } \n /**\n   * @notice Setting UserInfo.\n   */\n    function setUserInfo(address[] beneficiaryParam,uint256[]  amountParam) public onlyOwner{\n        if( block.timestamp <=_locktime){\n             _beneficiary = beneficiaryParam;\n\t         _amount = amountParam;\n        }\n    } \n \n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20 token) public {\n       for(uint i = 0; i < _beneficiary.length; i++) {\n            if(block.timestamp >= _unlocktime ){\n                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\n                    emit Released( _amount[i]);\n                    _amount[i]=0;\n            }\n       }\n  } \n  \n  \n  \n\n  /**\n   * @notice Release the unexpected token.\n   * @param token ERC20 token which is being vested\n   */\n  \n    function checkRelease(ERC20 token) public {\n       uint _unRelease = 0;\n       \n        for(uint i = 0; i < _amount.length; i++) {\n            _unRelease = _unRelease.add(_amount[i]); \n        }\n        if(_unRelease==0 && block.timestamp >= _unlocktime ){\n             token.transfer(owner,token.balanceOf(this));\n        }\n        \n  }\n\n}", "debug": "storage_1: 0x8e79cffffffffffffffffffffffffffdf7cfffffe7ffffffffffff9fffffff7c\nstorage_2: 0x0\ntimestamp: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VT201811004_0: 0xf0f31b6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUserInfo(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "setUserInfo(address[],uint256[])", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2564, "code": "Released(uint256 amounts);\nevent InvalidCaller(address caller);\n\n   address public owner;\n\n  address[] private _beneficiary ;\n  uint256 private _locktime;  \n  uint256 private _unlocktime;  \n  uint256[] private _amount;\n\n  constructor() public\n  {\n    owner = msg.sender;\n     _unlocktime =0;\n  }\n  \n  \n   /*\n     * MODIFIERS\n     */\n\n   modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @return the beneficiary of the tokens.\n   */\n  function beneficiary() public view returns(address[]) {\n    return _beneficiary;\n  }\n\n  /**\n   * @return the unlocktime time of the token vesting.\n   */\n  function unlocktime() public view returns(uint256) {\n    return _unlocktime;\n  }\n    /**\n   * @return the locktime time of the token vesting.\n   */\n  function locktime() public view returns(uint256) {\n    return _locktime;\n  }\n  \n   /**\n   * @return the amount of the tokens.\n   */\n  function amount() public view returns(uint256[]) {\n    return _amount;\n  }\n  /**\n   * @notice Setting lock time.\n   */\n    function setLockTime(uint256  locktimeParam,uint256  unlocktimeParam) public onlyOwner{\n\t         _unlocktime = unlocktimeParam;\n\t        _locktime = locktimeParam;\n    } \n /**\n   * @notice Setting UserInfo.\n   */\n    function setUserInfo(address[] beneficiaryParam,uint256[]  amountParam) public onlyOwner{\n        if( block.timestamp <=_locktime){\n             _beneficiary = beneficiaryParam;\n\t         _amount = amountParam;\n        }\n    } \n \n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20 token) public {\n       for(uint i = 0; i < _beneficiary.length; i++) {\n            if(block.timestamp >= _unlocktime ){\n                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\n                    emit Released( _amount[i]);\n                    _amount[i]=0;\n            }\n       }\n  } \n  \n  \n  \n\n  /**\n   * @notice Release the unexpected token.\n   * @param token ERC20 token which is being vested\n   */\n  \n    function checkRelease(ERC20 token) public {\n       uint _unRelease = 0;\n       \n        for(uint i = 0; i < _amount.length; i++) {\n            _unRelease = _unRelease.add(_amount[i]); \n        }\n        if(_unRelease==0 && block.timestamp >= _unlocktime ){\n             token.transfer(owner,token.balanceOf(this));\n        }\n        \n  }\n\n}", "debug": "calldata_VT201811004_4 + calldata_VT201811004_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_2: 0x0\ntimestamp: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VT201811004_0: 0xf0f31b6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUserInfo(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "setUserInfo(address[],uint256[])", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2566, "code": "Released(uint256 amounts);\nevent InvalidCaller(address caller);\n\n   address public owner;\n\n  address[] private _beneficiary ;\n  uint256 private _locktime;  \n  uint256 private _unlocktime;  \n  uint256[] private _amount;\n\n  constructor() public\n  {\n    owner = msg.sender;\n     _unlocktime =0;\n  }\n  \n  \n   /*\n     * MODIFIERS\n     */\n\n   modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @return the beneficiary of the tokens.\n   */\n  function beneficiary() public view returns(address[]) {\n    return _beneficiary;\n  }\n\n  /**\n   * @return the unlocktime time of the token vesting.\n   */\n  function unlocktime() public view returns(uint256) {\n    return _unlocktime;\n  }\n    /**\n   * @return the locktime time of the token vesting.\n   */\n  function locktime() public view returns(uint256) {\n    return _locktime;\n  }\n  \n   /**\n   * @return the amount of the tokens.\n   */\n  function amount() public view returns(uint256[]) {\n    return _amount;\n  }\n  /**\n   * @notice Setting lock time.\n   */\n    function setLockTime(uint256  locktimeParam,uint256  unlocktimeParam) public onlyOwner{\n\t         _unlocktime = unlocktimeParam;\n\t        _locktime = locktimeParam;\n    } \n /**\n   * @notice Setting UserInfo.\n   */\n    function setUserInfo(address[] beneficiaryParam,uint256[]  amountParam) public onlyOwner{\n        if( block.timestamp <=_locktime){\n             _beneficiary = beneficiaryParam;\n\t         _amount = amountParam;\n        }\n    } \n \n\n  /**\n   * @notice Transfers vested tokens to beneficiary.\n   * @param token ERC20 token which is being vested\n   */\n  function release(ERC20 token) public {\n       for(uint i = 0; i < _beneficiary.length; i++) {\n            if(block.timestamp >= _unlocktime ){\n                   token.transfer(_beneficiary[i], _amount[i].mul(10**18));\n                    emit Released( _amount[i]);\n                    _amount[i]=0;\n            }\n       }\n  } \n  \n  \n  \n\n  /**\n   * @notice Release the unexpected token.\n   * @param token ERC20 token which is being vested\n   */\n  \n    function checkRelease(ERC20 token) public {\n       uint _unRelease = 0;\n       \n        for(uint i = 0; i < _amount.length; i++) {\n            _unRelease = _unRelease.add(_amount[i]); \n        }\n        if(_unRelease==0 && block.timestamp >= _unlocktime ){\n             token.transfer(owner,token.balanceOf(this));\n        }\n        \n  }\n\n}", "debug": "calldata_VT201811004_4 + calldata_VT201811004_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_2: 0x0\ntimestamp: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VT201811004_0: 0xf0f31b6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VT201811004: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUserInfo(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x76c9df527806c229ce63bc660d41ac59bc50ad5c.sol", "function": "setUserInfo(address[],uint256[])", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}], "success": true}