{
  "contract": "0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d",
  "tool": "mythril",
  "start": 1563598799.9594145,
  "end": 1563598989.9061713,
  "duration": 189.9467568397522,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1261,
        "code": "ly);\n        listTINAmotley.push(_text);\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        return true;\n    }\n\n    // Transfer by owner to address. Transferring to address(0) will\n    // make line available to be claimed.\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (i",
        "debug": "calldata__List_Glory__4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 278,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1267,
        "code": "ly);\n        listTINAmotley.push(_text);\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        return true;\n    }\n\n    // Transfer by owner to address. Transferring to address(0) will\n    // make line available to be claimed.\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (i",
        "debug": "calldata__List_Glory__4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 278,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4529,
        "code": "Id) external returns(bool){\n        require (_tokenId < listTINA",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2_+_keccac_calldata__List_Glory__4,_256): 0xdf8f5db8a5d76fd8657b10ad555fffffffffffe00000000000000c4000000107\ncallvalue: 0xc0186147707ff790ae86022ffff0000000000020000000000000000000000001\nstorage_3 + keccac_calldata__List_Glory__4: 0x7f8888bf088706c55504bf9fffe0000000000020000000000000000000000001\ncalldata__List_Glory__4: 0x0\ncaller: 0x0\nstorage_keccac_calldata__List_Glory__4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_4: 0x1\ncalldata__List_Glory__0: 0x74f7841200000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\n",
        "description": "A possible integer overflow exists in the function `market_DeclareBid(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "market_DeclareBid(uint256)",
        "lineno": 381,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5561,
        "code": "ool){\n        require (_tokenId < listTINAmotleyTotal",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2_+_keccac_calldata__List_Glory__4,_256): 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3 + keccac_calldata__List_Glory__4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata__List_Glory__4: 0x0\nstorage_2 + keccac_calldata__List_Glory__4: 0x0\nstorage_0 + keccac_calldata__List_Glory__4: 0xff00\ncaller: 0x0\nstorage_keccac_calldata__List_Glory__4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_4: 0x1\ncalldata__List_Glory__0: 0x9bdbb4c700000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `market_WithdrawBid(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "market_WithdrawBid(uint256)",
        "lineno": 398,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5946,
        "code": "f[msg.sender]++;\n        re",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 282,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5979,
        "code": "e array listTINAmo",
        "debug": "storage_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7687,
        "code": "ss[_tokenId];\n        re",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata__List_Glory__4: 0x0\nstorage_3: 0x0\nstorage_4: 0x1\ncalldata__List_Glory__0: 0xdfcc525d00000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "info_SeeTINAmotleyLine(uint256)",
        "lineno": 249,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9268,
        "debug": "calldata__List_Glory__4: 0x0\ncallvalue: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata__List_Glory__4,_256): 0x0\nstorage_keccac_calldata__List_Glory__4: 0x0\nstorage_2 + keccac_calldata__List_Glory__4: 0x0\nstorage_3 + keccac_calldata__List_Glory__4: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4 + keccac_calldata__List_Glory__4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0 + keccac_calldata__List_Glory__4: 0xff00\nstorage_4: 0x1\ncalldata__List_Glory__0: 0xa384af0000000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\n",
        "description": "A possible integer underflow exists in the function `market_BuyForSale(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "market_BuyForSale(uint256)",
        "lineno": 451,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9347,
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__4: 0x0\ncallvalue: 0x0\nstorage_keccac_calldata__List_Glory__4: 0x0\nstorage_2 + keccac_calldata__List_Glory__4: 0x0\nstorage_3 + keccac_calldata__List_Glory__4: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4 + keccac_calldata__List_Glory__4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0 + keccac_calldata__List_Glory__4: 0xff00\nstorage_4: 0x1\ncalldata__List_Glory__0: 0xa384af0000000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\n",
        "description": "A possible integer overflow exists in the function `market_BuyForSale(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "market_BuyForSale(uint256)",
        "lineno": 451,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10067,
        "code": "ame;\n    string public info_Symbol;\n\n    address public info_OwnerOfContract;\n    // Contains the list\n    string[] private listTINAmotley;\n    // Contains the total number of elements in the list\n    uint256 private listTINAmotleyTotalSupply;\n    \n    mapping (uint => address) private listTINAmotleyIndexToAddress;\n    mapping(address => uint256) private listTINAmotleyBalanceOf;\n \n    // Put list element up for sale by owner. Can be linked to specific \n    // potential buyer\n    struct forSaleInfo {\n        bool isForSale;\n        uint256 tokenIndex;\n        address seller;\n        uint256 minValue;          //in wei.... everything in wei\n        address onlySellTo;     // specify to sell only to a specific person\n    }\n\n    // Place bid for specific list element\n    struct bidInfo {\n        bool hasBid;\n        uint256 tokenIndex;\n        address bidder;\n        uint256 value;\n    }\n\n    // Public info about tokens for sale.\n    mapping (uint256 => forSaleInfo) public info_ForSaleInfoByIndex;\n    // Public info about highest bid for each token.\n    mapping (uint256 => bidInfo) public info_BidInfoByIndex;\n    // Information about withdrawals (in units of wei) available  \n    //  ... for addresses due to failed bids, successful sales, etc...\n    mapping (address => uint256) public info_PendingWithdrawals;\n\n//Events\n\n\n    event Claim(uint256 tokenId, address indexed to);\n    event Transfer(uint256 tokenId, address indexed from, address indexed to);\n    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, \n        uint256 minValue,address indexed to);\n    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);\n    event ForSaleBought(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    event BidDeclared(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidAccepted(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    \n    constructor () public {\n        info_OwnerOfContract = msg.sender;\n\t    info_Name = \"List, Glory\";\n\t    info_Symbol = \"L, G\";\n        listTINAmotley.push(\"Now that, that there, that's for everyone\");\n        listTINAmotleyIndexToAddress[0] = address(0);\n        listTINAmotley.push(\"Everyone's invited\");\n        listTINAmotleyIndexToAddress[1] = address(0);\n        listTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[2] = address(0);\n \tlistTINAmotley.push(\"The for godsakes of surveillance\");\n        listTINAmotleyIndexToAddress[3] = address(0);\n \tlistTINAmotley.push(\"The shitabranna of there is no alternative\");\n        listTINAmotleyIndexToAddress[4] = address(0);\n \tlistTINAmotley.push(\"The clew-bottom of trustless memorials\");\n        listTINAmotleyIndexToAddress[5] = address(0);\n\tlistTINAmotley.push(\"The churning ballock of sadness\");\n        listTINAmotleyIndexToAddress[6] = address(0);\n\tlistTINAmotley.push(\"The bagpiped bravado of TINA\");\n        listTINAmotleyIndexToAddress[7] = address(0);\n\tlistTINAmotley.push(\"There T\");\n        listTINAmotleyIndexToAddress[8] = address(0);\n\tlistTINAmotley.push(\"Is I\");\n        listTINAmotleyIndexToAddress[9] = address(0);\n\tlistTINAmotley.push(\"No N\");\n        listTINAmotleyIndexToAddress[10] = address(0);\n\tlistTINAmotley.push(\"Alternative A\");\n        listTINAmotleyIndexToAddress[11] = address(0);\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[12] = address(0);\n\tlistTINAmotley.push(\"Motley\");\n        listTINAmotleyIndexToAddress[13] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"There is no alternative\");\n        listTINAmotleyIndexToAddress[14] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Machines made of sunshine\");\n        listTINAmotleyIndexToAddress[15] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Infidel heteroglossia\");\n        listTINAmotleyIndexToAddress[16] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA and the cyborg, Margaret and motley\");\n        listTINAmotleyIndexToAddress[17] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Motley fecundity, be fruitful and multiply\");\n        listTINAmotleyIndexToAddress[18] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Perverts! Mothers! Leninists!\");\n        listTINAmotleyIndexToAddress[19] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Space!\");\n        listTINAmotleyIndexToAddress[20] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the exosphere\");\n        listTINAmotleyIndexToAddress[21] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the stratosphere\");\n        listTINAmotleyIndexToAddress[22] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the troposphere\");\n        listTINAmotleyIndexToAddress[23] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the chandelier\");\n        listTINAmotleyIndexToAddress[24] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the lithosphere\");\n        listTINAmotleyIndexToAddress[25] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the crust\");\n        listTINAmotleyIndexToAddress[26] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[27] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[28] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Be fruitful!\");\n        listTINAmotleyIndexToAddress[29] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Fill the atmosphere, the heavens, the ether\");\n        listTINAmotleyIndexToAddress[30] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Glory! Glory. TINA TINA Glory.\");\n        listTINAmotleyIndexToAddress[31] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the stratosphere\");\n        listTINAmotleyIndexToAddress[32] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the mesosphere\");\n        listTINAmotleyIndexToAddress[33] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the troposphere\");\n        listTINAmotleyIndexToAddress[34] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of bags of space\");\n        listTINAmotleyIndexToAddress[35] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over backbones and bags of ether\");\n        listTINAmotleyIndexToAddress[36] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Now TINA, TINA has a backbone\");\n        listTINAmotleyIndexToAddress[37] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"And motley confetti lists\");\n        listTINAmotleyIndexToAddress[38] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti arms, confetti feet, confetti mouths, confetti faces\");\n        listTINAmotleyIndexToAddress[39] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti assholes\");\n        listTINAmotleyIndexToAddress[40] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti cunts and confetti cocks\");\n        listTINAmotleyIndexToAddress[41] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti offspring, splendid suns\");\n        listTINAmotleyIndexToAddress[42] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"The moon and rings, the countless combinations and effects\");\n        listTINAmotleyIndexToAddress[43] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Such-like, and good as such-like\");\n        listTINAmotleyIndexToAddress[44] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"(Mumbled)\");\n        listTINAmotleyIndexToAddress[45] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Everything's for sale\");\n        listTINAmotleyIndexToAddress[46] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[47] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Micro resurrections\");\n        listTINAmotleyIndexToAddress[48] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Paddle steamers\");\n        listTINAmotleyIndexToAddress[49] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Windmills\");\n        listTINAmotleyIndexToAddress[50] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Anti-anti-utopias\");\n        listTINAmotleyIndexToAddress[51] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Rocinante lists\");\n        listTINAmotleyIndexToAddress[52] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"In memoriam lists\");\n        listTINAmotleyIndexToAddress[53] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[54] = info_OwnerOfContract;\n       \n\n        listTINAmotleyBalanceOf[info_OwnerOfContract] = 42;\n        listTINAmotleyBalanceOf[address(0)] = 13;\n        listTINAmotleyTotalSupply = 55;\n     }\n     \n    function info_TotalSupply() public view returns (uint256 total){\n        total = listTINAmotleyTotalSupply;\n        return total;\n    }\n\n    //Number of list elements owned by an account.\n    function info_BalanceOf(address _owner) public view \n            returns (uint256 balance){\n        balance = listTINAmotleyBalanceOf[_owner];\n        return balance;\n    }\n    \n    //Shows text of a list element.\n    function info_SeeTINAmotleyLine(uint256 _tokenId) external view \n            returns(string){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        return listTINAmotley[_tokenId];\n    }\n    \n    function info_OwnerTINAmotleyLine(uint256 _tokenId) external view \n            returns (address owner){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        owner = listTINAmotleyIndexToAddress[_tokenId];\n        return owner;\n    }\n\n    // Is the line available to be claimed?\n    function info_CanBeClaimed(uint256 _tokenId) external view returns(bool){\n \trequire(_tokenId < listTINAmotleyTotalSupply);\n\tif (listTINAmotleyIndexToAddress[_tokenId] == address(0))\n\t  return true;\n\telse\n\t  return false;\n\t  }\n\t\n    // Claim line owned by address(0).\n    function gift_ClaimTINAmotleyLine(uint256 _tokenId) external returns(bool){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        require(listTINAmotleyIndexToAddress[_tokenId] == address(0));\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        listTINAmotleyBalanceOf[address(0)]--;\n        emit Claim(_tokenId, msg.sender);\n        return true;\n    }\n\n   // Create new list element. \n    function gift_CreateTINAmotleyLine(string _text) external returns(bool){ \n        require (msg.sender != address(0));\n        uint256  oldTotalSupply = listTINAmotleyTotalSupply;\n        listTINAmotleyTotalSupply++;\n        require (listTINAmotleyTotalSupply > oldTotalSupply);\n        listTINAmotley.push(_text);\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        return true;\n    }\n\n    // Transfer by owner to address. Transferring to address(0) will\n    // make line available to be claimed.\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (initialOwner == msg.sender);\n        require (_tokenId < listTINAmotleyTotalSupply);\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (initialOwner, _to, _tokenId);\n        // Remove new owner's bid, if it exists.\n        clearNewOwnerBid(_to, _tokenId);\n        return true;\n    }\n\n    // Let anyone interested know that the owner put a token up for sale. \n    // Anyone can obtain it by sending an amount of wei equal to or\n    // larger than  _minPriceInWei. \n    function market_DeclareForSale(uint256 _tokenId, uint256 _minPriceInWei) \n            external returns (bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, address(0));\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, address(0));\n        return true;\n    }\n    \n    // Let anyone interested know that the owner put a token up for sale. \n    // Only the address _to can obtain it by sending an amount of wei equal \n    // to or larger than _minPriceInWei.\n    function market_DeclareForSaleToAddress(uint256 _tokenId, uint256 \n            _minPriceInWei, address _to) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, _to);\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, _to);\n        return true;\n    }\n\n    // Owner no longer wants token for sale, or token has changed owner, \n    // so previously posted for sale is no longer valid.\n    function market_WithdrawForSale(uint256 _tokenId) public returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (msg.sender == listTINAmotleyIndexToAddress[_tokenId]);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(false, _tokenId, \n            address(0), 0, address(0));\n        emit ForSaleWithdrawn(_tokenId, msg.sender);\n        return true;\n    }\n    \n    // I'll take it. Must send at least as many wei as minValue in \n    // forSale structure.\n    function market_BuyForSale(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        forSaleInfo storage existingForSale = info_ForSaleInfoByIndex[_tokenId];\n        require(existingForSale.isForSale);\n        require(existingForSale.onlySellTo == address(0) || \n            existingForSale.onlySellTo == msg.sender);\n        require(msg.value >= existingForSale.minValue); \n        require(existingForSale.seller == \n            listTINAmotleyIndexToAddress[_tokenId]); \n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        rawTransfer(seller, msg.sender, _tokenId);\n        // must withdrawal for sale after transfer to make sure msg.sender\n        //  is the current owner.\n        market_WithdrawForSale(_tokenId);\n        // clear bid of new owner, if it exists\n        clearNewOwnerBid(msg.sender, _tokenId);\n        info_PendingWithdrawals[seller] += msg.value;\n        emit ForSaleBought(_tokenId, msg.value, seller, msg.sender);\n        return true;\n    }\n    \n    // Let anyone interested know that potential buyer put up money for a token.\n    function market_DeclareBid(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        require (msg.value > 0);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        // Keep only the highest bid.\n        require (msg.value > existingBid.value);\n        if (existingBid.value > 0){\n            info_PendingWithdrawals[existingBid.bidder] += existingBid.value;\n        }\n        info_BidInfoByIndex[_tokenId] = bidInfo(true, _tokenId, \n            msg.sender, msg.value);\n        emit BidDeclared(_tokenId, msg.value, msg.sender);\n        return true;\n    }\n    \n    // Potential buyer changes mind and withdrawals bid.\n    function market_WithdrawBid(uint256 _tokenId) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        require (existingBid.bidder == msg.sender);\n        uint256 amount = existingBid.value;\n        // Refund\n        info_PendingWithdrawals[existingBid.bidder] += amount;\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0), 0);\n        emit BidWithdrawn(_tokenId, amount, msg.sender);\n        return true;\n    }\n    \n    // Accept bid, and transfer money and token. All money in wei.\n    function market_AcceptBid(uint256 _tokenId, uint256 minPrice) \n            external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        require (seller == msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        //Bid must be larger than minPrice\n        require (existingBid.value > minPrice);\n        address buyer = existingBid.bidder;\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (seller, buyer, _tokenId);\n        uint256 amount = existingBid.value;\n        // Remove bid.\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0),0);\n        info_PendingWithdrawals[seller] += amount;\n        emit BidAccepted(_tokenId, amount, seller, buyer);\n        return true;\n    }\n    \n    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.\n    //  All in wei. Note that refunds, income, etc. are NOT automatically\n    // deposited in the user's address. The user must withdraw the funds.\n    function market_WithdrawWei() external returns(bool) {\n       uint256 amount = info_PendingWithdrawals[msg.sender];\n       require (amount > 0);\n       info_PendingWithdrawals[msg.sender] = 0;\n       msg.sender.transfer(amount);\n       return true;\n    } \n    \n    function clearNewOwnerBid(address _to, uint256 _tokenId) internal {\n        // clear bid when become owner via transfer or forSaleBuy\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        if (existingBid.bidder == _to){\n            uint256 amount = existingBid.value;\n            info_PendingWithdrawals[_to] += amount;\n            info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, \n                address(0), 0);\n            emit BidWithdrawn(_tokenId, amount, _to);\n        }\n      \n    }\n    \n    function rawTransfer(address _from, address _to, uint256 _tokenId) \n            internal {\n        listTINAmotleyBalanceOf[_from]--;\n        listTINAmotleyBalanceOf[_to]++;\n        listTINAmotleyIndexToAddress[_tokenId] = _to;\n        emit Transfer(_tokenId, _from, _to);\n    }\n    \n    \n}",
        "debug": "storage_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nstorage_3: 0x87fffff336ffffffffffffffffffffffffffffffffffffffffffffffffffffc9\nkeccac_87903029871075914254377627908054574944891091886930582284385770809450030037083_+\nstorage_3: 0xff7000003a4900d03b0000000712d8802083fffa142320000001801000894220\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10096,
        "code": "ame;\n    string public info_Symbol;\n\n    address public info_OwnerOfContract;\n    // Contains the list\n    string[] private listTINAmotley;\n    // Contains the total number of elements in the list\n    uint256 private listTINAmotleyTotalSupply;\n    \n    mapping (uint => address) private listTINAmotleyIndexToAddress;\n    mapping(address => uint256) private listTINAmotleyBalanceOf;\n \n    // Put list element up for sale by owner. Can be linked to specific \n    // potential buyer\n    struct forSaleInfo {\n        bool isForSale;\n        uint256 tokenIndex;\n        address seller;\n        uint256 minValue;          //in wei.... everything in wei\n        address onlySellTo;     // specify to sell only to a specific person\n    }\n\n    // Place bid for specific list element\n    struct bidInfo {\n        bool hasBid;\n        uint256 tokenIndex;\n        address bidder;\n        uint256 value;\n    }\n\n    // Public info about tokens for sale.\n    mapping (uint256 => forSaleInfo) public info_ForSaleInfoByIndex;\n    // Public info about highest bid for each token.\n    mapping (uint256 => bidInfo) public info_BidInfoByIndex;\n    // Information about withdrawals (in units of wei) available  \n    //  ... for addresses due to failed bids, successful sales, etc...\n    mapping (address => uint256) public info_PendingWithdrawals;\n\n//Events\n\n\n    event Claim(uint256 tokenId, address indexed to);\n    event Transfer(uint256 tokenId, address indexed from, address indexed to);\n    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, \n        uint256 minValue,address indexed to);\n    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);\n    event ForSaleBought(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    event BidDeclared(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidAccepted(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    \n    constructor () public {\n        info_OwnerOfContract = msg.sender;\n\t    info_Name = \"List, Glory\";\n\t    info_Symbol = \"L, G\";\n        listTINAmotley.push(\"Now that, that there, that's for everyone\");\n        listTINAmotleyIndexToAddress[0] = address(0);\n        listTINAmotley.push(\"Everyone's invited\");\n        listTINAmotleyIndexToAddress[1] = address(0);\n        listTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[2] = address(0);\n \tlistTINAmotley.push(\"The for godsakes of surveillance\");\n        listTINAmotleyIndexToAddress[3] = address(0);\n \tlistTINAmotley.push(\"The shitabranna of there is no alternative\");\n        listTINAmotleyIndexToAddress[4] = address(0);\n \tlistTINAmotley.push(\"The clew-bottom of trustless memorials\");\n        listTINAmotleyIndexToAddress[5] = address(0);\n\tlistTINAmotley.push(\"The churning ballock of sadness\");\n        listTINAmotleyIndexToAddress[6] = address(0);\n\tlistTINAmotley.push(\"The bagpiped bravado of TINA\");\n        listTINAmotleyIndexToAddress[7] = address(0);\n\tlistTINAmotley.push(\"There T\");\n        listTINAmotleyIndexToAddress[8] = address(0);\n\tlistTINAmotley.push(\"Is I\");\n        listTINAmotleyIndexToAddress[9] = address(0);\n\tlistTINAmotley.push(\"No N\");\n        listTINAmotleyIndexToAddress[10] = address(0);\n\tlistTINAmotley.push(\"Alternative A\");\n        listTINAmotleyIndexToAddress[11] = address(0);\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[12] = address(0);\n\tlistTINAmotley.push(\"Motley\");\n        listTINAmotleyIndexToAddress[13] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"There is no alternative\");\n        listTINAmotleyIndexToAddress[14] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Machines made of sunshine\");\n        listTINAmotleyIndexToAddress[15] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Infidel heteroglossia\");\n        listTINAmotleyIndexToAddress[16] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA and the cyborg, Margaret and motley\");\n        listTINAmotleyIndexToAddress[17] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Motley fecundity, be fruitful and multiply\");\n        listTINAmotleyIndexToAddress[18] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Perverts! Mothers! Leninists!\");\n        listTINAmotleyIndexToAddress[19] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Space!\");\n        listTINAmotleyIndexToAddress[20] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the exosphere\");\n        listTINAmotleyIndexToAddress[21] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the stratosphere\");\n        listTINAmotleyIndexToAddress[22] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the troposphere\");\n        listTINAmotleyIndexToAddress[23] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the chandelier\");\n        listTINAmotleyIndexToAddress[24] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the lithosphere\");\n        listTINAmotleyIndexToAddress[25] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the crust\");\n        listTINAmotleyIndexToAddress[26] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[27] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[28] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Be fruitful!\");\n        listTINAmotleyIndexToAddress[29] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Fill the atmosphere, the heavens, the ether\");\n        listTINAmotleyIndexToAddress[30] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Glory! Glory. TINA TINA Glory.\");\n        listTINAmotleyIndexToAddress[31] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the stratosphere\");\n        listTINAmotleyIndexToAddress[32] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the mesosphere\");\n        listTINAmotleyIndexToAddress[33] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the troposphere\");\n        listTINAmotleyIndexToAddress[34] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of bags of space\");\n        listTINAmotleyIndexToAddress[35] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over backbones and bags of ether\");\n        listTINAmotleyIndexToAddress[36] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Now TINA, TINA has a backbone\");\n        listTINAmotleyIndexToAddress[37] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"And motley confetti lists\");\n        listTINAmotleyIndexToAddress[38] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti arms, confetti feet, confetti mouths, confetti faces\");\n        listTINAmotleyIndexToAddress[39] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti assholes\");\n        listTINAmotleyIndexToAddress[40] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti cunts and confetti cocks\");\n        listTINAmotleyIndexToAddress[41] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti offspring, splendid suns\");\n        listTINAmotleyIndexToAddress[42] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"The moon and rings, the countless combinations and effects\");\n        listTINAmotleyIndexToAddress[43] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Such-like, and good as such-like\");\n        listTINAmotleyIndexToAddress[44] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"(Mumbled)\");\n        listTINAmotleyIndexToAddress[45] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Everything's for sale\");\n        listTINAmotleyIndexToAddress[46] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[47] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Micro resurrections\");\n        listTINAmotleyIndexToAddress[48] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Paddle steamers\");\n        listTINAmotleyIndexToAddress[49] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Windmills\");\n        listTINAmotleyIndexToAddress[50] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Anti-anti-utopias\");\n        listTINAmotleyIndexToAddress[51] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Rocinante lists\");\n        listTINAmotleyIndexToAddress[52] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"In memoriam lists\");\n        listTINAmotleyIndexToAddress[53] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[54] = info_OwnerOfContract;\n       \n\n        listTINAmotleyBalanceOf[info_OwnerOfContract] = 42;\n        listTINAmotleyBalanceOf[address(0)] = 13;\n        listTINAmotleyTotalSupply = 55;\n     }\n     \n    function info_TotalSupply() public view returns (uint256 total){\n        total = listTINAmotleyTotalSupply;\n        return total;\n    }\n\n    //Number of list elements owned by an account.\n    function info_BalanceOf(address _owner) public view \n            returns (uint256 balance){\n        balance = listTINAmotleyBalanceOf[_owner];\n        return balance;\n    }\n    \n    //Shows text of a list element.\n    function info_SeeTINAmotleyLine(uint256 _tokenId) external view \n            returns(string){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        return listTINAmotley[_tokenId];\n    }\n    \n    function info_OwnerTINAmotleyLine(uint256 _tokenId) external view \n            returns (address owner){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        owner = listTINAmotleyIndexToAddress[_tokenId];\n        return owner;\n    }\n\n    // Is the line available to be claimed?\n    function info_CanBeClaimed(uint256 _tokenId) external view returns(bool){\n \trequire(_tokenId < listTINAmotleyTotalSupply);\n\tif (listTINAmotleyIndexToAddress[_tokenId] == address(0))\n\t  return true;\n\telse\n\t  return false;\n\t  }\n\t\n    // Claim line owned by address(0).\n    function gift_ClaimTINAmotleyLine(uint256 _tokenId) external returns(bool){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        require(listTINAmotleyIndexToAddress[_tokenId] == address(0));\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        listTINAmotleyBalanceOf[address(0)]--;\n        emit Claim(_tokenId, msg.sender);\n        return true;\n    }\n\n   // Create new list element. \n    function gift_CreateTINAmotleyLine(string _text) external returns(bool){ \n        require (msg.sender != address(0));\n        uint256  oldTotalSupply = listTINAmotleyTotalSupply;\n        listTINAmotleyTotalSupply++;\n        require (listTINAmotleyTotalSupply > oldTotalSupply);\n        listTINAmotley.push(_text);\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        return true;\n    }\n\n    // Transfer by owner to address. Transferring to address(0) will\n    // make line available to be claimed.\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (initialOwner == msg.sender);\n        require (_tokenId < listTINAmotleyTotalSupply);\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (initialOwner, _to, _tokenId);\n        // Remove new owner's bid, if it exists.\n        clearNewOwnerBid(_to, _tokenId);\n        return true;\n    }\n\n    // Let anyone interested know that the owner put a token up for sale. \n    // Anyone can obtain it by sending an amount of wei equal to or\n    // larger than  _minPriceInWei. \n    function market_DeclareForSale(uint256 _tokenId, uint256 _minPriceInWei) \n            external returns (bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, address(0));\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, address(0));\n        return true;\n    }\n    \n    // Let anyone interested know that the owner put a token up for sale. \n    // Only the address _to can obtain it by sending an amount of wei equal \n    // to or larger than _minPriceInWei.\n    function market_DeclareForSaleToAddress(uint256 _tokenId, uint256 \n            _minPriceInWei, address _to) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, _to);\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, _to);\n        return true;\n    }\n\n    // Owner no longer wants token for sale, or token has changed owner, \n    // so previously posted for sale is no longer valid.\n    function market_WithdrawForSale(uint256 _tokenId) public returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (msg.sender == listTINAmotleyIndexToAddress[_tokenId]);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(false, _tokenId, \n            address(0), 0, address(0));\n        emit ForSaleWithdrawn(_tokenId, msg.sender);\n        return true;\n    }\n    \n    // I'll take it. Must send at least as many wei as minValue in \n    // forSale structure.\n    function market_BuyForSale(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        forSaleInfo storage existingForSale = info_ForSaleInfoByIndex[_tokenId];\n        require(existingForSale.isForSale);\n        require(existingForSale.onlySellTo == address(0) || \n            existingForSale.onlySellTo == msg.sender);\n        require(msg.value >= existingForSale.minValue); \n        require(existingForSale.seller == \n            listTINAmotleyIndexToAddress[_tokenId]); \n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        rawTransfer(seller, msg.sender, _tokenId);\n        // must withdrawal for sale after transfer to make sure msg.sender\n        //  is the current owner.\n        market_WithdrawForSale(_tokenId);\n        // clear bid of new owner, if it exists\n        clearNewOwnerBid(msg.sender, _tokenId);\n        info_PendingWithdrawals[seller] += msg.value;\n        emit ForSaleBought(_tokenId, msg.value, seller, msg.sender);\n        return true;\n    }\n    \n    // Let anyone interested know that potential buyer put up money for a token.\n    function market_DeclareBid(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        require (msg.value > 0);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        // Keep only the highest bid.\n        require (msg.value > existingBid.value);\n        if (existingBid.value > 0){\n            info_PendingWithdrawals[existingBid.bidder] += existingBid.value;\n        }\n        info_BidInfoByIndex[_tokenId] = bidInfo(true, _tokenId, \n            msg.sender, msg.value);\n        emit BidDeclared(_tokenId, msg.value, msg.sender);\n        return true;\n    }\n    \n    // Potential buyer changes mind and withdrawals bid.\n    function market_WithdrawBid(uint256 _tokenId) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        require (existingBid.bidder == msg.sender);\n        uint256 amount = existingBid.value;\n        // Refund\n        info_PendingWithdrawals[existingBid.bidder] += amount;\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0), 0);\n        emit BidWithdrawn(_tokenId, amount, msg.sender);\n        return true;\n    }\n    \n    // Accept bid, and transfer money and token. All money in wei.\n    function market_AcceptBid(uint256 _tokenId, uint256 minPrice) \n            external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        require (seller == msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        //Bid must be larger than minPrice\n        require (existingBid.value > minPrice);\n        address buyer = existingBid.bidder;\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (seller, buyer, _tokenId);\n        uint256 amount = existingBid.value;\n        // Remove bid.\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0),0);\n        info_PendingWithdrawals[seller] += amount;\n        emit BidAccepted(_tokenId, amount, seller, buyer);\n        return true;\n    }\n    \n    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.\n    //  All in wei. Note that refunds, income, etc. are NOT automatically\n    // deposited in the user's address. The user must withdraw the funds.\n    function market_WithdrawWei() external returns(bool) {\n       uint256 amount = info_PendingWithdrawals[msg.sender];\n       require (amount > 0);\n       info_PendingWithdrawals[msg.sender] = 0;\n       msg.sender.transfer(amount);\n       return true;\n    } \n    \n    function clearNewOwnerBid(address _to, uint256 _tokenId) internal {\n        // clear bid when become owner via transfer or forSaleBuy\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        if (existingBid.bidder == _to){\n            uint256 amount = existingBid.value;\n            info_PendingWithdrawals[_to] += amount;\n            info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, \n                address(0), 0);\n            emit BidWithdrawn(_tokenId, amount, _to);\n        }\n      \n    }\n    \n    function rawTransfer(address _from, address _to, uint256 _tokenId) \n            internal {\n        listTINAmotleyBalanceOf[_from]--;\n        listTINAmotleyBalanceOf[_to]++;\n        listTINAmotleyIndexToAddress[_tokenId] = _to;\n        emit Transfer(_tokenId, _from, _to);\n    }\n    \n    \n}",
        "debug": "storage_4: 0x3ffffffffffffffffffffffffffff\ncalldata__List_Glory__4 + calldata__List_Glory__4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10110,
        "code": "ame;\n    string public info_Symbol;\n\n    address public info_OwnerOfContract;\n    // Contains the list\n    string[] private listTINAmotley;\n    // Contains the total number of elements in the list\n    uint256 private listTINAmotleyTotalSupply;\n    \n    mapping (uint => address) private listTINAmotleyIndexToAddress;\n    mapping(address => uint256) private listTINAmotleyBalanceOf;\n \n    // Put list element up for sale by owner. Can be linked to specific \n    // potential buyer\n    struct forSaleInfo {\n        bool isForSale;\n        uint256 tokenIndex;\n        address seller;\n        uint256 minValue;          //in wei.... everything in wei\n        address onlySellTo;     // specify to sell only to a specific person\n    }\n\n    // Place bid for specific list element\n    struct bidInfo {\n        bool hasBid;\n        uint256 tokenIndex;\n        address bidder;\n        uint256 value;\n    }\n\n    // Public info about tokens for sale.\n    mapping (uint256 => forSaleInfo) public info_ForSaleInfoByIndex;\n    // Public info about highest bid for each token.\n    mapping (uint256 => bidInfo) public info_BidInfoByIndex;\n    // Information about withdrawals (in units of wei) available  \n    //  ... for addresses due to failed bids, successful sales, etc...\n    mapping (address => uint256) public info_PendingWithdrawals;\n\n//Events\n\n\n    event Claim(uint256 tokenId, address indexed to);\n    event Transfer(uint256 tokenId, address indexed from, address indexed to);\n    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, \n        uint256 minValue,address indexed to);\n    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);\n    event ForSaleBought(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    event BidDeclared(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidWithdrawn(uint256 indexed tokenId, uint256 value, \n        address indexed from);\n    event BidAccepted(uint256 indexed tokenId, uint256 value, \n        address indexed from, address indexed to);\n    \n    constructor () public {\n        info_OwnerOfContract = msg.sender;\n\t    info_Name = \"List, Glory\";\n\t    info_Symbol = \"L, G\";\n        listTINAmotley.push(\"Now that, that there, that's for everyone\");\n        listTINAmotleyIndexToAddress[0] = address(0);\n        listTINAmotley.push(\"Everyone's invited\");\n        listTINAmotleyIndexToAddress[1] = address(0);\n        listTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[2] = address(0);\n \tlistTINAmotley.push(\"The for godsakes of surveillance\");\n        listTINAmotleyIndexToAddress[3] = address(0);\n \tlistTINAmotley.push(\"The shitabranna of there is no alternative\");\n        listTINAmotleyIndexToAddress[4] = address(0);\n \tlistTINAmotley.push(\"The clew-bottom of trustless memorials\");\n        listTINAmotleyIndexToAddress[5] = address(0);\n\tlistTINAmotley.push(\"The churning ballock of sadness\");\n        listTINAmotleyIndexToAddress[6] = address(0);\n\tlistTINAmotley.push(\"The bagpiped bravado of TINA\");\n        listTINAmotleyIndexToAddress[7] = address(0);\n\tlistTINAmotley.push(\"There T\");\n        listTINAmotleyIndexToAddress[8] = address(0);\n\tlistTINAmotley.push(\"Is I\");\n        listTINAmotleyIndexToAddress[9] = address(0);\n\tlistTINAmotley.push(\"No N\");\n        listTINAmotleyIndexToAddress[10] = address(0);\n\tlistTINAmotley.push(\"Alternative A\");\n        listTINAmotleyIndexToAddress[11] = address(0);\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[12] = address(0);\n\tlistTINAmotley.push(\"Motley\");\n        listTINAmotleyIndexToAddress[13] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"There is no alternative\");\n        listTINAmotleyIndexToAddress[14] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Machines made of sunshine\");\n        listTINAmotleyIndexToAddress[15] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Infidel heteroglossia\");\n        listTINAmotleyIndexToAddress[16] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA and the cyborg, Margaret and motley\");\n        listTINAmotleyIndexToAddress[17] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Motley fecundity, be fruitful and multiply\");\n        listTINAmotleyIndexToAddress[18] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Perverts! Mothers! Leninists!\");\n        listTINAmotleyIndexToAddress[19] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Space!\");\n        listTINAmotleyIndexToAddress[20] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the exosphere\");\n        listTINAmotleyIndexToAddress[21] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the stratosphere\");\n        listTINAmotleyIndexToAddress[22] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the troposphere\");\n        listTINAmotleyIndexToAddress[23] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the chandelier\");\n        listTINAmotleyIndexToAddress[24] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of the lithosphere\");\n        listTINAmotleyIndexToAddress[25] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the crust\");\n        listTINAmotleyIndexToAddress[26] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[27] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"You're the top\");\n        listTINAmotleyIndexToAddress[28] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Be fruitful!\");\n        listTINAmotleyIndexToAddress[29] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Fill the atmosphere, the heavens, the ether\");\n        listTINAmotleyIndexToAddress[30] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Glory! Glory. TINA TINA Glory.\");\n        listTINAmotleyIndexToAddress[31] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the stratosphere\");\n        listTINAmotleyIndexToAddress[32] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the mesosphere\");\n        listTINAmotleyIndexToAddress[33] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over the troposphere\");\n        listTINAmotleyIndexToAddress[34] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"On top of bags of space\");\n        listTINAmotleyIndexToAddress[35] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Over backbones and bags of ether\");\n        listTINAmotleyIndexToAddress[36] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Now TINA, TINA has a backbone\");\n        listTINAmotleyIndexToAddress[37] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"And motley confetti lists\");\n        listTINAmotleyIndexToAddress[38] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti arms, confetti feet, confetti mouths, confetti faces\");\n        listTINAmotleyIndexToAddress[39] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti assholes\");\n        listTINAmotleyIndexToAddress[40] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti cunts and confetti cocks\");\n        listTINAmotleyIndexToAddress[41] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Confetti offspring, splendid suns\");\n        listTINAmotleyIndexToAddress[42] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"The moon and rings, the countless combinations and effects\");\n        listTINAmotleyIndexToAddress[43] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Such-like, and good as such-like\");\n        listTINAmotleyIndexToAddress[44] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"(Mumbled)\");\n        listTINAmotleyIndexToAddress[45] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Everything's for sale\");\n        listTINAmotleyIndexToAddress[46] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Just bring your lists\");\n        listTINAmotleyIndexToAddress[47] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Micro resurrections\");\n        listTINAmotleyIndexToAddress[48] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Paddle steamers\");\n        listTINAmotleyIndexToAddress[49] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Windmills\");\n        listTINAmotleyIndexToAddress[50] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Anti-anti-utopias\");\n        listTINAmotleyIndexToAddress[51] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"Rocinante lists\");\n        listTINAmotleyIndexToAddress[52] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"In memoriam lists\");\n        listTINAmotleyIndexToAddress[53] = info_OwnerOfContract;\n\tlistTINAmotley.push(\"TINA TINA TINA\");\n        listTINAmotleyIndexToAddress[54] = info_OwnerOfContract;\n       \n\n        listTINAmotleyBalanceOf[info_OwnerOfContract] = 42;\n        listTINAmotleyBalanceOf[address(0)] = 13;\n        listTINAmotleyTotalSupply = 55;\n     }\n     \n    function info_TotalSupply() public view returns (uint256 total){\n        total = listTINAmotleyTotalSupply;\n        return total;\n    }\n\n    //Number of list elements owned by an account.\n    function info_BalanceOf(address _owner) public view \n            returns (uint256 balance){\n        balance = listTINAmotleyBalanceOf[_owner];\n        return balance;\n    }\n    \n    //Shows text of a list element.\n    function info_SeeTINAmotleyLine(uint256 _tokenId) external view \n            returns(string){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        return listTINAmotley[_tokenId];\n    }\n    \n    function info_OwnerTINAmotleyLine(uint256 _tokenId) external view \n            returns (address owner){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        owner = listTINAmotleyIndexToAddress[_tokenId];\n        return owner;\n    }\n\n    // Is the line available to be claimed?\n    function info_CanBeClaimed(uint256 _tokenId) external view returns(bool){\n \trequire(_tokenId < listTINAmotleyTotalSupply);\n\tif (listTINAmotleyIndexToAddress[_tokenId] == address(0))\n\t  return true;\n\telse\n\t  return false;\n\t  }\n\t\n    // Claim line owned by address(0).\n    function gift_ClaimTINAmotleyLine(uint256 _tokenId) external returns(bool){\n        require(_tokenId < listTINAmotleyTotalSupply);\n        require(listTINAmotleyIndexToAddress[_tokenId] == address(0));\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        listTINAmotleyBalanceOf[address(0)]--;\n        emit Claim(_tokenId, msg.sender);\n        return true;\n    }\n\n   // Create new list element. \n    function gift_CreateTINAmotleyLine(string _text) external returns(bool){ \n        require (msg.sender != address(0));\n        uint256  oldTotalSupply = listTINAmotleyTotalSupply;\n        listTINAmotleyTotalSupply++;\n        require (listTINAmotleyTotalSupply > oldTotalSupply);\n        listTINAmotley.push(_text);\n        uint256 _tokenId = listTINAmotleyTotalSupply - 1;\n        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;\n        listTINAmotleyBalanceOf[msg.sender]++;\n        return true;\n    }\n\n    // Transfer by owner to address. Transferring to address(0) will\n    // make line available to be claimed.\n    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {\n        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (initialOwner == msg.sender);\n        require (_tokenId < listTINAmotleyTotalSupply);\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (initialOwner, _to, _tokenId);\n        // Remove new owner's bid, if it exists.\n        clearNewOwnerBid(_to, _tokenId);\n        return true;\n    }\n\n    // Let anyone interested know that the owner put a token up for sale. \n    // Anyone can obtain it by sending an amount of wei equal to or\n    // larger than  _minPriceInWei. \n    function market_DeclareForSale(uint256 _tokenId, uint256 _minPriceInWei) \n            external returns (bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, address(0));\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, address(0));\n        return true;\n    }\n    \n    // Let anyone interested know that the owner put a token up for sale. \n    // Only the address _to can obtain it by sending an amount of wei equal \n    // to or larger than _minPriceInWei.\n    function market_DeclareForSaleToAddress(uint256 _tokenId, uint256 \n            _minPriceInWei, address _to) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];\n        require (msg.sender == tokenOwner);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, \n            msg.sender, _minPriceInWei, _to);\n        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, _to);\n        return true;\n    }\n\n    // Owner no longer wants token for sale, or token has changed owner, \n    // so previously posted for sale is no longer valid.\n    function market_WithdrawForSale(uint256 _tokenId) public returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (msg.sender == listTINAmotleyIndexToAddress[_tokenId]);\n        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(false, _tokenId, \n            address(0), 0, address(0));\n        emit ForSaleWithdrawn(_tokenId, msg.sender);\n        return true;\n    }\n    \n    // I'll take it. Must send at least as many wei as minValue in \n    // forSale structure.\n    function market_BuyForSale(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        forSaleInfo storage existingForSale = info_ForSaleInfoByIndex[_tokenId];\n        require(existingForSale.isForSale);\n        require(existingForSale.onlySellTo == address(0) || \n            existingForSale.onlySellTo == msg.sender);\n        require(msg.value >= existingForSale.minValue); \n        require(existingForSale.seller == \n            listTINAmotleyIndexToAddress[_tokenId]); \n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        rawTransfer(seller, msg.sender, _tokenId);\n        // must withdrawal for sale after transfer to make sure msg.sender\n        //  is the current owner.\n        market_WithdrawForSale(_tokenId);\n        // clear bid of new owner, if it exists\n        clearNewOwnerBid(msg.sender, _tokenId);\n        info_PendingWithdrawals[seller] += msg.value;\n        emit ForSaleBought(_tokenId, msg.value, seller, msg.sender);\n        return true;\n    }\n    \n    // Let anyone interested know that potential buyer put up money for a token.\n    function market_DeclareBid(uint256 _tokenId) payable external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        require (msg.value > 0);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        // Keep only the highest bid.\n        require (msg.value > existingBid.value);\n        if (existingBid.value > 0){\n            info_PendingWithdrawals[existingBid.bidder] += existingBid.value;\n        }\n        info_BidInfoByIndex[_tokenId] = bidInfo(true, _tokenId, \n            msg.sender, msg.value);\n        emit BidDeclared(_tokenId, msg.value, msg.sender);\n        return true;\n    }\n    \n    // Potential buyer changes mind and withdrawals bid.\n    function market_WithdrawBid(uint256 _tokenId) external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));\n        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        require (existingBid.bidder == msg.sender);\n        uint256 amount = existingBid.value;\n        // Refund\n        info_PendingWithdrawals[existingBid.bidder] += amount;\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0), 0);\n        emit BidWithdrawn(_tokenId, amount, msg.sender);\n        return true;\n    }\n    \n    // Accept bid, and transfer money and token. All money in wei.\n    function market_AcceptBid(uint256 _tokenId, uint256 minPrice) \n            external returns(bool){\n        require (_tokenId < listTINAmotleyTotalSupply);\n        address seller = listTINAmotleyIndexToAddress[_tokenId];\n        require (seller == msg.sender);\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        require (existingBid.hasBid);\n        //Bid must be larger than minPrice\n        require (existingBid.value > minPrice);\n        address buyer = existingBid.bidder;\n        // Remove for sale.\n        market_WithdrawForSale(_tokenId);\n        rawTransfer (seller, buyer, _tokenId);\n        uint256 amount = existingBid.value;\n        // Remove bid.\n        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0),0);\n        info_PendingWithdrawals[seller] += amount;\n        emit BidAccepted(_tokenId, amount, seller, buyer);\n        return true;\n    }\n    \n    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.\n    //  All in wei. Note that refunds, income, etc. are NOT automatically\n    // deposited in the user's address. The user must withdraw the funds.\n    function market_WithdrawWei() external returns(bool) {\n       uint256 amount = info_PendingWithdrawals[msg.sender];\n       require (amount > 0);\n       info_PendingWithdrawals[msg.sender] = 0;\n       msg.sender.transfer(amount);\n       return true;\n    } \n    \n    function clearNewOwnerBid(address _to, uint256 _tokenId) internal {\n        // clear bid when become owner via transfer or forSaleBuy\n        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];\n        if (existingBid.bidder == _to){\n            uint256 amount = existingBid.value;\n            info_PendingWithdrawals[_to] += amount;\n            info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, \n                address(0), 0);\n            emit BidWithdrawn(_tokenId, amount, _to);\n        }\n      \n    }\n    \n    function rawTransfer(address _from, address _to, uint256 _tokenId) \n            internal {\n        listTINAmotleyBalanceOf[_from]--;\n        listTINAmotleyBalanceOf[_to]++;\n        listTINAmotleyIndexToAddress[_tokenId] = _to;\n        emit Transfer(_tokenId, _from, _to);\n    }\n    \n    \n}",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__4 + calldata__List_Glory__4: 0xfffffedffcf1ffffdfffffc1018000001dfebf0080a00000000000000032ffee\ncalldata__List_Glory__4: 0x3fffffffffffffffffffffffffffffffbff140ff7f7fffffffffffffffbcfffd\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata__List_Glory__0: 0xa2eb0d0100000000000000000000000000000000000000000000000000000000\ncalldatasize__List_Glory_: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `gift_CreateTINAmotleyLine(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4bb0f20cf2e4cd470ed9537b1b69aa7a2c53707d.sol",
        "function": "gift_CreateTINAmotleyLine(string)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}