{"error": null, "issues": [{"address": 557, "code": ".length; i++) {\n      transfer(receivers[i], amounts[i]);\n    }\n  }\n\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n    _allowed[m", "debug": "calldata_TearFiat_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TearFiat_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_TearFiat: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multiTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xf19d446c35570eff44cf9871ee389067ebd6e962.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2285, "code": "ress(0));\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TearFiat_4 + calldata_TearFiat_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TearFiat_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_TearFiat: 0x4\nmem_128 + 32 + 32*calldata_TearFiat_4 + calldata_TearFiat_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xf19d446c35570eff44cf9871ee389067ebd6e962.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 131, "title": "Exception state", "type": "Informational"}, {"address": 6225, "code": " b;\n  }\n\n  fun", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TearFiat_4: 0x0\nstorage_6: 0x0\ncalldata_TearFiat_0: 0xa6a6860600000000000000000000000000000000000000000000000000000000\ncalldatasize_TearFiat: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xf19d446c35570eff44cf9871ee389067ebd6e962.sol", "function": "findOnePercent(uint256)", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 6243, "code": "rn c;", "debug": "calldata_TearFiat_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TearFiat_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_TearFiat_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TearFiat_0: 0x3950935100000000000000000000000000000000000000000000000000000000\ncalldatasize_TearFiat: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseAllowance(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xf19d446c35570eff44cf9871ee389067ebd6e962.sol", "function": "increaseAllowance(address,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6256, "code": " function ceil", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TearFiat_4: 0x1\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TearFiat_0: 0xa6a6860600000000000000000000000000000000000000000000000000000000\ncalldatasize_TearFiat: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xf19d446c35570eff44cf9871ee389067ebd6e962.sol", "function": "findOnePercent(uint256)", "lineno": 41, "title": "Exception state", "type": "Informational"}], "success": true}