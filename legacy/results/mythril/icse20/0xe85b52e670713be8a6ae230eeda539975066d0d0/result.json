{
  "contract": "0xe85b52e670713be8a6ae230eeda539975066d0d0",
  "tool": "mythril",
  "start": 1563524286.2070048,
  "end": 1563525034.3167489,
  "duration": 748.1097440719604,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 225,
        "code": "   \n        user",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x81b273200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_1: 0x0\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 74,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 315,
        "code": "nder, msg.val",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_2: 0x0\nstorage_1: 0x1\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 382,
        "code": "18;\n\ncontract Ethe",
        "debug": "storage_3: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x1\nstorage_1: 0x1\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x500000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 529,
        "code": "tart counting blocks..",
        "debug": "storage_3: 0x2\nstorage_4: 0xc186c66c89d893573dd214f5b2b3e358e356cf37f8090e94c1f4d76dc3c6fef5\ncallvalue: 0x685ec734734abae43d71a814b69b0c5ae294af6ff87b3b37c185d76dd3390009\nstorage_2: 0x3\nstorage_1: 0x3\ncalldata_Etherumble_0: 0xe00000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 551,
        "code": "   uint sum = 0;\n",
        "debug": "block_number: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_3: 0x1\nstorage_6: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 84,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1404,
        "code": "er);\n    }\n\n    func",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withrawFee(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "withrawFee()",
        "lineno": 119,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1463,
        "code": "constant re",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Etherumble_4: 0x0\nstorage_2: 0x0\ncalldata_Etherumble_0: 0x3fa1930d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "getPlayerBet(uint256)",
        "lineno": 56,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1669,
        "code": "Bet(uint index",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Etherumble_4: 0x0\nstorage_1: 0x0\ncalldata_Etherumble_0: 0x6522566500000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "getPlayerAddress(uint256)",
        "lineno": 53,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1800,
        "code": "bUsers; i++) {\n            sum += users[i].amount;\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x12\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x83b272200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 87,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1833,
        "code": "is contr",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x1\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_0: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 91,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2126,
        "code": " isOwner {\n        owner.transfer(f",
        "debug": "",
        "description": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.number\n- block.number\n",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 114,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2126,
        "code": " isOwner {\n        owner.transfer(f",
        "debug": "",
        "description": "In the function `fallback` predictable expression 'block.blockhash(block.number - 1)' is used to determine Ether recipient",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 114,
        "title": "Dependence on predictable variable",
        "type": "Warning"
      },
      {
        "address": 2126,
        "code": " isOwner {\n        owner.transfer(f",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "fallback",
        "lineno": 114,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2241,
        "code": "ntract Etherumble {\n\n    struct PlayerBets {\n        address addPlayer;\n        uint amount;\n    }\n\n    PlayerBets[] users;\n    \n    address[] players = new address[](20);\n    uint[] bets = new uint[](20);\n\n    uint nbUsers = 0;\n    uint totalBets = 0;\n    uint fees = 0;\n    uint endBlock = 0;\n\n    address owner;\n    \n    address lastWinner;\n    uint lastWinnerTicket=0;\n    uint totalGames = 0;\n    \n    modifier isOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier hasValue() {\n        require(msg.value >= 10000000000000000 && nbUsers < 19); //0.01 ether min\n        _;\n    }\n\n    modifier onlyIf(bool _condition) {\n        require(_condition);\n        _;\n    }\n\n    function Etherumble() public {\n        owner = msg.sender;\n    }\n    \n    function getActivePlayers() public constant returns(uint) {\n        return nbUsers;\n    }\n    \n    function getPlayerAddress(uint index) public constant returns(address) {\n        return players[index];\n    }\n    \n    function getPlayerBet(uint index) public constant returns(uint) {\n        return bets[index];\n    }\n    function getEndBlock() public constant returns(uint) {\n        return endBlock;\n    }\n    function getLastWinner() public constant returns(address) {\n        return lastWinner;\n    }\n    function getLastWinnerTicket() public constant returns(uint) {\n        return lastWinnerTicket;\n    }\n    function getTotalGames() public constant returns(uint) {\n        return totalGames;\n    }\n    \n\n    function() public payable hasValue {\n        checkinter();//first check if it's a good block for ending a game. this way there is no new user after the winner block hash is calculated\n        players[nbUsers] = msg.sender;\n        bets[nbUsers] = msg.value;\n        \n        users.push(PlayerBets(msg.sender, msg.value));\n        nbUsers++;\n        totalBets += msg.value;\n        if (nbUsers == 2) { //at the 2nd player it start counting blocks...\n            endBlock = block.number + 15;\n        }\n    }\n\n    function endLottery() internal {\n        uint sum = 0;\n        uint winningNumber = uint(block.blockhash(block.number - 1)) % totalBets;\n\n        for (uint i = 0; i < nbUsers; i++) {\n            sum += users[i].amount;\n\n            if (sum >= winningNumber) {\n                // destroy this contract and send the balance to users[i]\n                withrawWin(users[i].addPlayer,winningNumber);\n                return;\n            }\n        }\n    }\n\n    function withrawWin(address winner,uint winticket) internal {\n        uint tempTot = totalBets;\n        lastWinnerTicket = winticket;\n        totalGames++;\n        \n        //reset all values\n        nbUsers = 0;\n        totalBets = 0;\n        endBlock = 0;\n        delete users;\n        \n        fees += tempTot * 5 / 100;\n        winner.transfer(tempTot * 95 / 100);\n        lastWinner = winner;\n    }\n    \n    function withrawFee() public isOwner {\n        owner.transfer(fees);\n        fees = 0;\n    }\n    function destroykill() public isOwner {\n        selfdestruct(owner);\n    }\n\n    function checkinter() internal{ //this can be called by anyone if the timmer freez\n        //check block time\n        if (endBlock <= block.number && endBlock != 0) {\n            endLottery();\n        }\n    }\n    \n    function callback() public isOwner{ //this can be called by anyone if the timmer freez\n        //check block time\n        if (endBlock <= block.number && endBlock != 0) {\n            endLottery();\n        }\n    }\n}",
        "debug": "storage_4: 0x8000000000000000000000000000400000000000000000010\nstorage_3: 0x8000000000000000000000000000000000000000000000000000000000000000\nblockhash_block_block_number - 1: 0x800000000000000000000000003068afe80010000000000208c0000000000101\nstorage_0: 0xebfd0098725c3749c03f1f899df5e001ebfffff94007fd801cf39d003be7c087\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702948: 0x3028afe80010000000000108c0000000000100\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702950: 0x1\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncaller: 0x0\ncalldata_Etherumble_0: 0x83b273200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `callback()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xe85b52e670713be8a6ae230eeda539975066d0d0.sol",
        "function": "callback()",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}