{"error": null, "issues": [{"address": 123, "code": "ddress) {\n        //pass along any ether to the constructor\n        address newBOPAddr = (new BurnableOpenPayment).value(msg.value)(payer, payerString, commitThreshold, defaultAction, defaultTimeoutLength);\n        NewBOP(newBOPAddr);\n        return newBOPAddr;\n    }\n}", "debug": "calldata_BurnableOpenPaymentFactory_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BurnableOpenPaymentFactory_0: 0xcd4fb3be00000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPaymentFactory: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0xcd4fb3be`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0x1442a8fd038e0253ab07fd0e6aa70413d961f315.sol", "function": "_function_0xcd4fb3be", "lineno": 206, "title": "Integer Overflow ", "type": "Warning"}, {"address": 380, "debug": "The exception is triggered under the following conditions:\n\ncalldata_BurnableOpenPaymentFactory_32 + 68: 0x80\ncalldata_BurnableOpenPaymentFactory_0: 0xcd4fb3be00000000000000000000000000000000000000000000000000000000\ncalldatasize_BurnableOpenPaymentFactory: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/25/0x1442a8fd038e0253ab07fd0e6aa70413d961f315.sol", "function": "_function_0xcd4fb3be", "lineno": 212, "title": "Exception state", "type": "Informational"}], "success": true}