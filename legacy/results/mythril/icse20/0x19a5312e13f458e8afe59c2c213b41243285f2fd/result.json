{
  "contract": "0x19a5312e13f458e8afe59c2c213b41243285f2fd",
  "tool": "mythril",
  "start": 1563230726.3683784,
  "end": 1563232151.0110524,
  "duration": 1424.6426739692688,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 741,
        "code": "s _signatures) public {\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 count = _signatures.length / 65;\n        require(count >= threshold, \"MSW: Not enough signatures\");\n        bytes32 txHash = keccak256(abi.encodePacked(byte(0x19), byte(0), address(this), _to, _value, _data, nonce));\n        nonce += 1;\n        uint256 valid;\n        address lastSigner = 0;\n        for(uint256 i = 0; i < count; i++) {\n            (v,r,s) = splitSignature(_signatures, i);\n            address recovered = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\",txHash)), v, r, s);\n            require(recovered > lastSigner, \"MSW: Badly ordered signatures\"); // make sure signers are different\n            lastSigner = recovered;\n            if(isOwner[recovered]) {\n                valid += 1;\n                if(valid >= threshold) {\n                    require(_to.call.value(_value)(_data), \"MSW: External call failed\");\n                    emit Executed(_to, _value, _data);\n                    return;\n                }\n            }\n        }\n        // If we reach that point then the transaction is not executed\n        revert(\"MSW: Not enough valid signatures\");\n    }\n\n    /**\n     * @dev Adds an owner to the multisig. This method can only be called by",
        "debug": "calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigWallet_0: 0xda0980c700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `execute(address,uint256,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x19a5312e13f458e8afe59c2c213b41243285f2fd.sol",
        "function": "execute(address,uint256,bytes,bytes)",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3459,
        "code": "        fo",
        "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x60\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)): 0x0\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 68)): 0x1f\nstorage_1: 0x0\ncalldata_MultiSigWallet_0: 0xda0980c700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `execute(address,uint256,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x19a5312e13f458e8afe59c2c213b41243285f2fd.sol",
        "function": "execute(address,uint256,bytes,bytes)",
        "lineno": 71,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}