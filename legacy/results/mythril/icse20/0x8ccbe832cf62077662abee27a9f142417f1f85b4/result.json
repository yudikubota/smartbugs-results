{
  "contract": "0x8ccbe832cf62077662abee27a9f142417f1f85b4",
  "tool": "mythril",
  "start": 1563499901.0683382,
  "end": 1563499911.5605967,
  "duration": 10.492258548736572,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 376,
        "code": "let size := returndatasize\n\t\t\tlet ptr := mload(0x40)\n\t\t\tretu",
        "debug": "",
        "description": "This contract forwards its call data via DELEGATECALL in its fallback function. This means that any function in the called contract can be executed. Note that the callee contract will have access to the storage of the calling contract.\n DELEGATECALL target: Concat(0, Extract(167, 8, storage_3))",
        "filename": "/unique_chucks/8/0x8ccbe832cf62077662abee27a9f142417f1f85b4.sol",
        "function": "fallback",
        "lineno": 66,
        "title": "Call data forwarded with delegatecall()",
        "type": "Informational"
      },
      {
        "address": 376,
        "code": "let size := returndatasize\n\t\t\tlet ptr := mload(0x40)\n\t\t\tretu",
        "debug": "",
        "description": "Be aware that the called contract gets unrestricted access to this contract's state.",
        "filename": "/unique_chucks/8/0x8ccbe832cf62077662abee27a9f142417f1f85b4.sol",
        "function": "fallback",
        "lineno": 66,
        "title": "DELEGATECALL to a user-supplied address",
        "type": "Informational"
      },
      {
        "address": 919,
        "code": "] public contracts;\n\n\tbool p",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_BdpEntryPoint_4: 0x10\ncalldata_BdpEntryPoint_0: 0x474da79a00000000000000000000000000000000000000000000000000000000\ncalldatasize_BdpEntryPoint: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0x8ccbe832cf62077662abee27a9f142417f1f85b4.sol",
        "function": "_function_0x474da79a",
        "lineno": 11,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}