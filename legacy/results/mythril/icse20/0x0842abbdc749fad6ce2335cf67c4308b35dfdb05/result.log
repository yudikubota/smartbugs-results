{"error": null, "issues": [{"address": 3777, "code": "  mp.payPlatformIncomingTransactionCommis", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "fromPaymentGateway(address)", "lineno": 203, "title": "Message call to external contract", "type": "Informational"}, {"address": 3777, "code": "  mp.payPlatformIncomingTransactionCommis", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4297\nCall at address: 4030\n", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "fromPaymentGateway(address)", "lineno": 203, "title": "Multiple Calls", "type": "Information"}, {"address": 4030, "code": "Payment.platformCommission)(member);\n                emit PlatformIn", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "fromPaymentGateway(address)", "lineno": 203, "title": "Message call to external contract", "type": "Informational"}, {"address": 4297, "code": "\n            }\n            /* Required code end */\n        }\n\n        emit IncomingPayment(memb", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "fromPaymentGateway(address)", "lineno": 204, "title": "Message call to external contract", "type": "Informational"}, {"address": 4557, "code": "or;\n    uint256 public ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MarketplaceProxy_4: 0x0\nstorage_5: 0x0\ncalldata_MarketplaceProxy_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "_function_0x025e7c27", "lineno": 51, "title": "Exception state", "type": "Informational"}, {"address": 4990, "code": "th);\n        emit", "debug": "storage_5: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MarketplaceProxy_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_MarketplaceProxy_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "removeOwner(address)", "lineno": 269, "title": "Integer Underflow", "type": "Warning"}, {"address": 5034, "code": "  }\n\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MarketplaceProxy_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_MarketplaceProxy_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "removeOwner(address)", "lineno": 271, "title": "Exception state", "type": "Informational"}, {"address": 7275, "code": "owner.\n    functi", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MarketplaceProxy_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MarketplaceProxy_4: 0x0\nstorage_6: 0x0\ncaller: 0x0\ncalldata_MarketplaceProxy_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "addOwner(address)", "lineno": 255, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15637, "code": " {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address sender, uint256 transactionId);\n    event Revocation(address sender, uint256 transactionId);\n    event Submission(uint256 transactionId);\n    event Execution(uint256 transactionId);\n    event ExecutionFailure(uint256 transactionId);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequirementChange(uint256 required);\n    event MemberAdded(address member);\n    event MemberBlocked(address member);\n    event MemberUnblocked(address member);\n    event FeeAmountChanged(uint256 feeAmount);\n    event NextMemberPaymentAdded(address member, uint256 expectingAmount, uint256 platformCommission);\n    event NextMemberPaymentUpdated(address member, uint256 expectingAmount, uint256 platformCommission);\n    event IncomingPayment(address sender, uint256 value);\n    event Claim(address to, uint256 value);\n    event Transfer(address to, uint256 value);\n\n    /*\n     *  Constants\n     */\n    uint256 constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint256 => Transaction) public transactions;\n    mapping (uint256 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    mapping (address => Member) public members;\n    mapping (address => NextMemberPayment) public nextMemberPayments;\n    address[] public owners;\n    address public creator;\n    uint256 public required;\n    uint256 public transactionCount;\n    uint256 public feeAmount;   // amount in wei\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n    struct Member {\n        bool exists;\n        bool blocked;\n    }\n    struct NextMemberPayment {\n        bool exists;\n        uint256 expectingValue;       // wei, value that we wait in member incoiming transaction\n        uint256 platformCommission;   // wei, value that we send to Marketplace contract\n    }\n\n    /* Required code start */\n    MarketplaceProxy public mp;\n    event PlatformIncomingTransactionCommission(uint256 amount, address clientAddress);\n    event PlatformOutgoingTransactionCommission(uint256 amount);\n    event Blocked();\n    /* Required code end */\n\n    /*\n     *  Modifiers\n     */\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint256 transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint256 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint256 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint256 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the creator.\n     */\n    modifier onlyCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    /**\n     * @dev Throws if member does not exist.\n     */\n    modifier memberExists(address member) {\n        require(members[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if member exists.\n     */\n    modifier memberDoesNotExist(address member) {\n        require(!members[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if does not exist.\n     */\n    modifier nextMemberPaymentExists(address member) {\n        require(nextMemberPayments[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if exists.\n     */\n    modifier nextMemberPaymentDoesNotExist(address member) {\n        require(!nextMemberPayments[member].exists);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        public\n        payable\n    {\n        handleIncomingPayment(msg.sender);\n    }\n\n    /**\n     * @dev Handles payment gateway transactions\n     * @param member when payment method is fiat money\n     */\n    function fromPaymentGateway(address member)\n        public\n        memberExists(member)\n        nextMemberPaymentExists(member)\n        payable\n    {\n        handleIncomingPayment(member);\n    }\n\n    /**\n     * @dev Send commission to marketplace\n     * @param member address\n     */\n    function handleIncomingPayment(address member)\n        private\n    {\n        if (nextMemberPayments[member].exists) {\n            NextMemberPayment storage nextMemberPayment = nextMemberPayments[member];\n\n            require(nextMemberPayment.expectingValue == msg.value);\n\n            /* Required code start */\n            // Send all incoming eth if user blocked\n            if (mp.isUserBlockedByContract(address(this))) {\n                mp.payPlatformIncomingTransactionCommission.value(msg.value)(member);\n                emit Blocked();\n            } else {\n                mp.payPlatformIncomingTransactionCommission.value(nextMemberPayment.platformCommission)(member);\n                emit PlatformIncomingTransactionCommission(nextMemberPayment.platformCommission, member);\n            }\n            /* Required code end */\n        }\n\n        emit IncomingPayment(member, msg.value);\n    }\n\n    /**\n     * @dev Creator can add ETH to contract without commission\n     */\n    function addEth()\n        public\n        onlyCreator\n        payable\n    {\n\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    constructor()\n        public\n    {\n        required = 1;           // Initial value\n        creator = msg.sender;\n\n        /* Required code start */\n        // NOTE: CHANGE ADDRESS ON PRODUCTION\n        mp = MarketplaceProxy(0x7b71342582610452641989D599a684501922Cb57);\n        /* Required code end */\n\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyCreator\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyCreator\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint256 i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyCreator\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint256 i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint256 _required)\n        public\n        onlyCreator\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows a creator to init a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function initTransaction(address destination, uint256 value)\n        public\n        onlyCreator\n        returns (uint256 transactionId)\n    {\n        transactionId = addTransaction(destination, value);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint256 value, uint256 dataLength, bytes data) private returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint256 transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint256 count = 0;\n        for (uint256 i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /**\n     * @dev Block existing member.\n     * @param member address\n     */\n    function blockMember(address member)\n        public\n        onlyCreator\n        memberExists(member)\n    {\n        members[member].blocked = true;\n        emit MemberBlocked(member);\n    }\n\n    /**\n     * @dev Unblock existing member.\n     * @param member address\n     */\n    function unblockMember(address member)\n        public\n        onlyCreator\n        memberExists(member)\n    {\n        members[member].blocked = false;\n        emit MemberUnblocked(member);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function isMemberBlocked(address member)\n        public\n        view\n        memberExists(member)\n        returns (bool)\n    {\n        return members[member].blocked;\n    }\n\n    /**\n     * @dev Add a new member to structure.\n     * @param member address\n     */\n    function addMember(address member)\n        public\n        onlyCreator\n        notNull(member)\n        memberDoesNotExist(member)\n    {\n        members[member] = Member(\n            true,   // exists\n            false   // blocked\n        );\n        emit MemberAdded(member);\n    }\n\n    /**\n     * @param _feeAmount new amount in wei\n     */\n    function setFeeAmount(uint256 _feeAmount)\n        public\n        onlyCreator\n    {\n        feeAmount = _feeAmount;\n        emit FeeAmountChanged(_feeAmount);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function addNextMemberPayment(address member, uint256 expectingValue, uint256 platformCommission)\n        public\n        onlyCreator\n        memberExists(member)\n        nextMemberPaymentDoesNotExist(member)\n    {\n        nextMemberPayments[member] = NextMemberPayment(\n            true,\n            expectingValue,\n            platformCommission\n        );\n        emit NextMemberPaymentAdded(member, expectingValue, platformCommission);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function updateNextMemberPayment(address member, uint256 _expectingValue, uint256 _platformCommission)\n        public\n        onlyCreator\n        memberExists(member)\n        nextMemberPaymentExists(member)\n    {\n        nextMemberPayments[member].expectingValue = _expectingValue;\n        nextMemberPayments[member].platformCommission = _platformCommission;\n        emit NextMemberPaymentUpdated(member, _expectingValue, _platformCommission);\n    }\n\n    /**\n     * @param to send ETH on this address\n     * @param amount 18 decimals (wei)\n     */\n    function claim(address to, uint256 amount)\n        public\n        onlyCreator\n        memberExists(to)\n    {\n        /* Required code start */\n        // Get commission amount from marketplace\n        uint256 commission = mp.calculatePlatformCommission(amount);\n        require(address(this).balance > (amount + commission));\n\n        // Send commission to marketplace\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\n        emit PlatformOutgoingTransactionCommission(commission);\n        /* Required code end */\n\n        to.transfer(amount);\n\n        emit Claim(to, amount);\n    }\n\n    /**\n     * @param to send ETH on this address\n     * @param amount 18 decimals (wei)\n     */\n    function transfer(address to, uint256 amount)\n        public\n        onlyCreator\n        ownerExists(to)\n    {\n        /* Required code start */\n        require(address(this).balance > amount);\n        /* Required code end */\n\n        to.transfer(amount);\n\n        emit Transfer(to, amount);\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint256 value)\n        internal\n        notNull(destination)\n        returns (uint256 transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: \"\",\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint256 transactionId)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint256 transactionId)\n        public\n        view\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint256 count = 0;\n        uint256 i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed)\n        public\n        view\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint256 count = 0;\n        uint256 i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "storage_5: 0xfe00000020000000000000000000000000000000000000000000000000000000\ncalldata_MarketplaceProxy_4: 0x0\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MarketplaceProxy_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_MarketplaceProxy_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "removeOwner(address)", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15639, "code": " {\n\n    /*\n     *  Events\n     */\n    event Confirmation(address sender, uint256 transactionId);\n    event Revocation(address sender, uint256 transactionId);\n    event Submission(uint256 transactionId);\n    event Execution(uint256 transactionId);\n    event ExecutionFailure(uint256 transactionId);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequirementChange(uint256 required);\n    event MemberAdded(address member);\n    event MemberBlocked(address member);\n    event MemberUnblocked(address member);\n    event FeeAmountChanged(uint256 feeAmount);\n    event NextMemberPaymentAdded(address member, uint256 expectingAmount, uint256 platformCommission);\n    event NextMemberPaymentUpdated(address member, uint256 expectingAmount, uint256 platformCommission);\n    event IncomingPayment(address sender, uint256 value);\n    event Claim(address to, uint256 value);\n    event Transfer(address to, uint256 value);\n\n    /*\n     *  Constants\n     */\n    uint256 constant public MAX_OWNER_COUNT = 50;\n\n    /*\n     *  Storage\n     */\n    mapping (uint256 => Transaction) public transactions;\n    mapping (uint256 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    mapping (address => Member) public members;\n    mapping (address => NextMemberPayment) public nextMemberPayments;\n    address[] public owners;\n    address public creator;\n    uint256 public required;\n    uint256 public transactionCount;\n    uint256 public feeAmount;   // amount in wei\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n    struct Member {\n        bool exists;\n        bool blocked;\n    }\n    struct NextMemberPayment {\n        bool exists;\n        uint256 expectingValue;       // wei, value that we wait in member incoiming transaction\n        uint256 platformCommission;   // wei, value that we send to Marketplace contract\n    }\n\n    /* Required code start */\n    MarketplaceProxy public mp;\n    event PlatformIncomingTransactionCommission(uint256 amount, address clientAddress);\n    event PlatformOutgoingTransactionCommission(uint256 amount);\n    event Blocked();\n    /* Required code end */\n\n    /*\n     *  Modifiers\n     */\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint256 transactionId) {\n        require(transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint256 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint256 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint256 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint256 ownerCount, uint256 _required) {\n        require(ownerCount <= MAX_OWNER_COUNT\n            && _required <= ownerCount\n            && _required != 0\n            && ownerCount != 0);\n        _;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the creator.\n     */\n    modifier onlyCreator() {\n        require(msg.sender == creator);\n        _;\n    }\n\n    /**\n     * @dev Throws if member does not exist.\n     */\n    modifier memberExists(address member) {\n        require(members[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if member exists.\n     */\n    modifier memberDoesNotExist(address member) {\n        require(!members[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if does not exist.\n     */\n    modifier nextMemberPaymentExists(address member) {\n        require(nextMemberPayments[member].exists);\n        _;\n    }\n\n    /**\n     * @dev Throws if exists.\n     */\n    modifier nextMemberPaymentDoesNotExist(address member) {\n        require(!nextMemberPayments[member].exists);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        public\n        payable\n    {\n        handleIncomingPayment(msg.sender);\n    }\n\n    /**\n     * @dev Handles payment gateway transactions\n     * @param member when payment method is fiat money\n     */\n    function fromPaymentGateway(address member)\n        public\n        memberExists(member)\n        nextMemberPaymentExists(member)\n        payable\n    {\n        handleIncomingPayment(member);\n    }\n\n    /**\n     * @dev Send commission to marketplace\n     * @param member address\n     */\n    function handleIncomingPayment(address member)\n        private\n    {\n        if (nextMemberPayments[member].exists) {\n            NextMemberPayment storage nextMemberPayment = nextMemberPayments[member];\n\n            require(nextMemberPayment.expectingValue == msg.value);\n\n            /* Required code start */\n            // Send all incoming eth if user blocked\n            if (mp.isUserBlockedByContract(address(this))) {\n                mp.payPlatformIncomingTransactionCommission.value(msg.value)(member);\n                emit Blocked();\n            } else {\n                mp.payPlatformIncomingTransactionCommission.value(nextMemberPayment.platformCommission)(member);\n                emit PlatformIncomingTransactionCommission(nextMemberPayment.platformCommission, member);\n            }\n            /* Required code end */\n        }\n\n        emit IncomingPayment(member, msg.value);\n    }\n\n    /**\n     * @dev Creator can add ETH to contract without commission\n     */\n    function addEth()\n        public\n        onlyCreator\n        payable\n    {\n\n    }\n\n    /*\n     * Public functions\n     */\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    constructor()\n        public\n    {\n        required = 1;           // Initial value\n        creator = msg.sender;\n\n        /* Required code start */\n        // NOTE: CHANGE ADDRESS ON PRODUCTION\n        mp = MarketplaceProxy(0x7b71342582610452641989D599a684501922Cb57);\n        /* Required code end */\n\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyCreator\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        emit OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyCreator\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint256 i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        emit OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param newOwner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyCreator\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint256 i=0; i<owners.length; i++)\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        emit OwnerRemoval(owner);\n        emit OwnerAddition(newOwner);\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint256 _required)\n        public\n        onlyCreator\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n    /// @dev Allows a creator to init a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function initTransaction(address destination, uint256 value)\n        public\n        onlyCreator\n        returns (uint256 transactionId)\n    {\n        transactionId = addTransaction(destination, value);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint256 transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId];\n            txn.executed = true;\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\n                emit Execution(transactionId);\n            else {\n                emit ExecutionFailure(transactionId);\n                txn.executed = false;\n            }\n        }\n    }\n\n    // call has been separated into its own function in order to take advantage\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n    function external_call(address destination, uint256 value, uint256 dataLength, bytes data) private returns (bool) {\n        bool result;\n        assembly {\n            let x := mload(0x40)   // \"Allocate\" memory for output (0x40 is where \"free memory\" pointer is stored by convention)\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n            result := call(\n                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n                destination,\n                value,\n                d,\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n                x,\n                0                  // Output is ignored, therefore the output size is zero\n            )\n        }\n        return result;\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint256 transactionId)\n        public\n        view\n        returns (bool)\n    {\n        uint256 count = 0;\n        for (uint256 i=0; i<owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /**\n     * @dev Block existing member.\n     * @param member address\n     */\n    function blockMember(address member)\n        public\n        onlyCreator\n        memberExists(member)\n    {\n        members[member].blocked = true;\n        emit MemberBlocked(member);\n    }\n\n    /**\n     * @dev Unblock existing member.\n     * @param member address\n     */\n    function unblockMember(address member)\n        public\n        onlyCreator\n        memberExists(member)\n    {\n        members[member].blocked = false;\n        emit MemberUnblocked(member);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function isMemberBlocked(address member)\n        public\n        view\n        memberExists(member)\n        returns (bool)\n    {\n        return members[member].blocked;\n    }\n\n    /**\n     * @dev Add a new member to structure.\n     * @param member address\n     */\n    function addMember(address member)\n        public\n        onlyCreator\n        notNull(member)\n        memberDoesNotExist(member)\n    {\n        members[member] = Member(\n            true,   // exists\n            false   // blocked\n        );\n        emit MemberAdded(member);\n    }\n\n    /**\n     * @param _feeAmount new amount in wei\n     */\n    function setFeeAmount(uint256 _feeAmount)\n        public\n        onlyCreator\n    {\n        feeAmount = _feeAmount;\n        emit FeeAmountChanged(_feeAmount);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function addNextMemberPayment(address member, uint256 expectingValue, uint256 platformCommission)\n        public\n        onlyCreator\n        memberExists(member)\n        nextMemberPaymentDoesNotExist(member)\n    {\n        nextMemberPayments[member] = NextMemberPayment(\n            true,\n            expectingValue,\n            platformCommission\n        );\n        emit NextMemberPaymentAdded(member, expectingValue, platformCommission);\n    }\n\n    /**\n     * @param member address\n     * @return bool\n     */\n    function updateNextMemberPayment(address member, uint256 _expectingValue, uint256 _platformCommission)\n        public\n        onlyCreator\n        memberExists(member)\n        nextMemberPaymentExists(member)\n    {\n        nextMemberPayments[member].expectingValue = _expectingValue;\n        nextMemberPayments[member].platformCommission = _platformCommission;\n        emit NextMemberPaymentUpdated(member, _expectingValue, _platformCommission);\n    }\n\n    /**\n     * @param to send ETH on this address\n     * @param amount 18 decimals (wei)\n     */\n    function claim(address to, uint256 amount)\n        public\n        onlyCreator\n        memberExists(to)\n    {\n        /* Required code start */\n        // Get commission amount from marketplace\n        uint256 commission = mp.calculatePlatformCommission(amount);\n        require(address(this).balance > (amount + commission));\n\n        // Send commission to marketplace\n        mp.payPlatformOutgoingTransactionCommission.value(commission)();\n        emit PlatformOutgoingTransactionCommission(commission);\n        /* Required code end */\n\n        to.transfer(amount);\n\n        emit Claim(to, amount);\n    }\n\n    /**\n     * @param to send ETH on this address\n     * @param amount 18 decimals (wei)\n     */\n    function transfer(address to, uint256 amount)\n        public\n        onlyCreator\n        ownerExists(to)\n    {\n        /* Required code start */\n        require(address(this).balance > amount);\n        /* Required code end */\n\n        to.transfer(amount);\n\n        emit Transfer(to, amount);\n    }\n\n    /*\n     * Internal functions\n     */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint256 value)\n        internal\n        notNull(destination)\n        returns (uint256 transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: \"\",\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint256 transactionId)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    /// @dev Returns total number of transactions after filers are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        view\n        returns (uint256 count)\n    {\n        for (uint256 i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n                count += 1;\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        view\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint256 transactionId)\n        public\n        view\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint256 count = 0;\n        uint256 i;\n        for (i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        _confirmations = new address[](count);\n        for (i=0; i<count; i++)\n            _confirmations[i] = confirmationsTemp[i];\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint256 from, uint256 to, bool pending, bool executed)\n        public\n        view\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint256 count = 0;\n        uint256 i;\n        for (i=0; i<transactionCount; i++)\n            if (   pending && !transactions[i].executed\n                || executed && transactions[i].executed)\n            {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        _transactionIds = new uint[](to - from);\n        for (i=from; i<to; i++)\n            _transactionIds[i - from] = transactionIdsTemp[i];\n    }\n}", "debug": "storage_5: 0xfe001c7bca580006000000000000000078f81e017b0000000201000000006010\ncalldata_MarketplaceProxy_4: 0x0\nstorage_1546678032441257452667456735582814959992782782816731922691272282333561699760: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MarketplaceProxy_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_MarketplaceProxy_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketplaceProxy: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x0842abbdc749fad6ce2335cf67c4308b35dfdb05.sol", "function": "removeOwner(address)", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}], "success": true}