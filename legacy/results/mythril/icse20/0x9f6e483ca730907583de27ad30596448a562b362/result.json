{
  "contract": "0x9f6e483ca730907583de27ad30596448a562b362",
  "tool": "mythril",
  "start": 1563555634.260881,
  "end": 1563555677.240741,
  "duration": 42.979860067367554,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1343,
        "code": "m, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { \n            revert();\n        }\n        return true;\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value)\n        public\n        canTransfer\n        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n        returns (bool success)\n   {\n        require(_to != address(0));\n ",
        "debug": "calldata_standardToken_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_standardToken_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_standardToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 248,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6327,
        "code": "uint256 _value)\n        public\n        canTransfer\n        releaseTokenValid(msg.sender, balances[msg.sender].sub(_value))\n      ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 257,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7556,
        "code": " function add(",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_standardToken_32 + 4: 0x1\nstorage_6: 0x0\ncalldata_standardToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_standardToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "transfer(address,uint256)",
        "lineno": 53,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8312,
        "code": "}\n}\n\n",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_standardToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_standardToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_standardToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_standardToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8325,
        "code": "C20Token {\n\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_standardToken_4: 0x1\ncalldata_standardToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_standardToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_standardToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8652,
        "code": "n sub",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_5: 0x0\ncalldata_standardToken_0: 0x55f78af800000000000000000000000000000000000000000000000000000000\ncalldatasize_standardToken: 0x4\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_standardToken_4: 0x1\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x9f6e483ca730907583de27ad30596448a562b362.sol",
        "function": "getLockBalance(address)",
        "lineno": 48,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}