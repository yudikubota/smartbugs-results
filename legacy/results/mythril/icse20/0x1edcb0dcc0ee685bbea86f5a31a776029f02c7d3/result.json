{
  "contract": "0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3",
  "tool": "mythril",
  "start": 1563224045.2475834,
  "end": 1563224125.1692646,
  "duration": 79.92168116569519,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 212,
        "code": "ddress[] _addresses, uint[] _values) public onlyOwner\n    {\n        for(uint i = 0; i < _addresses.length ; i++)\n        {\n            Token(_token).transfer(_addresses[i], _values[i] * E18);  \n        }\n    }\n}",
        "debug": "calldata_TokenDistribute_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenDistribute_0: 0x806f331900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenDistribute: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x806f3319`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3.sol",
        "function": "_function_0x806f3319",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 682,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenDistribute_4 + calldata_TokenDistribute_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenDistribute_0: 0x806f331900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenDistribute: 0x4\nmem_128 +\n32 +\n32*\ncalldata_TokenDistribute_4 + calldata_TokenDistribute_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3.sol",
        "function": "_function_0x806f3319",
        "lineno": 58,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 830,
        "code": ");  \n        }\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3.sol",
        "function": "_function_0x806f3319",
        "lineno": 55,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 830,
        "code": ");  \n        }\n    }\n}",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 830\n",
        "filename": "/unique_contracts/0x1edcb0dcc0ee685bbea86f5a31a776029f02c7d3.sol",
        "function": "_function_0x806f3319",
        "lineno": 55,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}