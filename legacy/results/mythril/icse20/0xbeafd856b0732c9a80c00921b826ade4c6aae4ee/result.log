{"error": null, "issues": [{"address": 225, "code": "lue;\n        if ", "debug": "callvalue: 0x200024448e041042b936adc03422252c124014908019505c2524442448d00412\ncalldatasize_Token: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "fallback", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 233, "code": "lue;\n        if (msg.value ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldatasize_Token: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "fallback", "lineno": 96, "title": "Exception state", "type": "Informational"}, {"address": 352, "code": "dress(this), ", "debug": "storage_1: 0x6d2531002373f782ff1ee97fbc00199999999999999b40000268000000000002\ncallvalue: 0x38d7ea4c68000\ncalldatasize_Token: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "fallback", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 376, "code": "function set(s", "debug": "storage_2: 0x1a00d8dca0a08067020000001c2809f0c11c68000870231c08800881089bc000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x38d7ea4c68000\ncalldatasize_Token: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "fallback", "lineno": 104, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1615, "code": "= _name;\n        symbol = _symbol;\n    }\n\n    function rescueTokens(address _address, uint256 _amount) public {\n        Token(_address).transfer(ow", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xe942b51600000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "set(string,string)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2623, "code": ".balance) {\n      ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x200000000020200004000000000000000000000000000000000000000000001\nstorage_2: 0x2000000000201dfff400000000000000000000000000117c6de0304201f7ffd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x200000000020200004000000000000000000000000000000000000000000000\ncalldata_Token_32 + 4: 0x0\ncalldata_Token_32 + 36: 0x200000000020200004000000000000000000000000000000000000000000002\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "transferFrom(address,address,uint256)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3304, "code": "       return true;\n   ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000000000000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x800000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xffffffffffffffffffffffffffffeffffffffffffffffffffffffffffffffffe\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_32 + 36: 0x800000000000000000000000000000000000002\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "transferFrom(address,address,uint256)", "lineno": 83, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3636, "code": " _value) public returns (bool success);\n", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "rescueTokens(address,uint256)", "lineno": 116, "title": "Message call to external contract", "type": "Warning"}, {"address": 4554, "code": "fer(msg.sender, _to, _v", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000001\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "transfer(address,uint256)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4921, "code": "{\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    uint256 public buyPrice; // finney/BB\n    uint256 public sellPrice; // finney/BB\n    string public name = \"BB\";\n    string public symbol = \"BB\";\n    mapping (address => mapping (address => uint256)) public allowance;\n    address owner;\n    mapping (address => uint256) balances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function BB() public {\n        totalSupply = 1000 * 1e18;\n        buyPrice = 100;\n        sellPrice = 98;\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner] + uint256(uint8(_owner)) * 1e16;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if (_value > balances[msg.sender]) {\n            _value = balances[msg.sender];\n        }\n        if (_to == address(this)) {\n            uint256 ethValue = _value * sellPrice / 1000;\n            if (ethValue > address(this).balance) {\n                ethValue = address(this).balance;\n                _value = ethValue * 1000 / sellPrice;\n            }\n            balances[msg.sender] -= _value;\n            totalSupply -= _value;\n            msg.sender.transfer(ethValue);\n        } else {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if (_value > allowance[_from][msg.sender]) {\n            _value = allowance[_from][msg.sender];\n        }\n        if (_value > balances[_from]) {\n            _value = balances[_from];\n        }\n        if (_to == address(this)) {\n            uint256 ethValue = _value * sellPrice / 1000;\n            if (ethValue > address(this).balance) {\n                ethValue = address(this).balance;\n                _value = ethValue * 1000 / sellPrice;\n            }\n            allowance[_from][msg.sender] -= _value;\n            balances[_from] -= _value;\n            totalSupply -= _value;\n            msg.sender.transfer(ethValue);\n        } else {\n            allowance[_from][msg.sender] -= _value;\n            balances[_from] -= _value;\n            balances[_to] += _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function () public payable {\n        require (msg.data.length == 0);\n        uint256 value = msg.value * 1000 / buyPrice;\n        balances[msg.sender] += value;\n        totalSupply += value;\n        if (msg.value == 1 finney) {\n            buyPrice = buyPrice * 10 / 7;\n            sellPrice = sellPrice * 10 / 7;\n        }\n        emit Transfer(address(this), msg.sender, value);\n    }\n\n    function set(string _name, string _symbol) public {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function rescueTokens(address _address, uint256 _amount) public {\n        Token(_address).transfer(owner, _amount);\n    }\n}\n\ncontract Token {\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Token_0: 0xe942b51600000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "set(string,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4935, "code": "{\n    uint8 public constant decimals = 18;\n    uint256 public totalSupply;\n    uint256 public buyPrice; // finney/BB\n    uint256 public sellPrice; // finney/BB\n    string public name = \"BB\";\n    string public symbol = \"BB\";\n    mapping (address => mapping (address => uint256)) public allowance;\n    address owner;\n    mapping (address => uint256) balances;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function BB() public {\n        totalSupply = 1000 * 1e18;\n        buyPrice = 100;\n        sellPrice = 98;\n        owner = msg.sender;\n        balances[owner] = totalSupply;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner] + uint256(uint8(_owner)) * 1e16;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        if (_value > balances[msg.sender]) {\n            _value = balances[msg.sender];\n        }\n        if (_to == address(this)) {\n            uint256 ethValue = _value * sellPrice / 1000;\n            if (ethValue > address(this).balance) {\n                ethValue = address(this).balance;\n                _value = ethValue * 1000 / sellPrice;\n            }\n            balances[msg.sender] -= _value;\n            totalSupply -= _value;\n            msg.sender.transfer(ethValue);\n        } else {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n        }\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        if (_value > allowance[_from][msg.sender]) {\n            _value = allowance[_from][msg.sender];\n        }\n        if (_value > balances[_from]) {\n            _value = balances[_from];\n        }\n        if (_to == address(this)) {\n            uint256 ethValue = _value * sellPrice / 1000;\n            if (ethValue > address(this).balance) {\n                ethValue = address(this).balance;\n                _value = ethValue * 1000 / sellPrice;\n            }\n            allowance[_from][msg.sender] -= _value;\n            balances[_from] -= _value;\n            totalSupply -= _value;\n            msg.sender.transfer(ethValue);\n        } else {\n            allowance[_from][msg.sender] -= _value;\n            balances[_from] -= _value;\n            balances[_to] += _value;\n        }\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function () public payable {\n        require (msg.data.length == 0);\n        uint256 value = msg.value * 1000 / buyPrice;\n        balances[msg.sender] += value;\n        totalSupply += value;\n        if (msg.value == 1 finney) {\n            buyPrice = buyPrice * 10 / 7;\n            sellPrice = sellPrice * 10 / 7;\n        }\n        emit Transfer(address(this), msg.sender, value);\n    }\n\n    function set(string _name, string _symbol) public {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function rescueTokens(address _address, uint256 _amount) public {\n        Token(_address).transfer(owner, _amount);\n    }\n}\n\ncontract Token {\n    function transfer(address _to, uint256 _value) public returns (bool success);\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Token_0: 0xe942b51600000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `set(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xbeafd856b0732c9a80c00921b826ade4c6aae4ee.sol", "function": "set(string,string)", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}], "success": true}