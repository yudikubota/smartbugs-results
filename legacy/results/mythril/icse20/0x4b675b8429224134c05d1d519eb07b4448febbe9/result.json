{
  "contract": "0x4b675b8429224134c05d1d519eb07b4448febbe9",
  "tool": "mythril",
  "start": 1563594165.4784763,
  "end": 1563594172.3965583,
  "duration": 6.918081998825073,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity ^0.4.26;\r\n^----------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:936:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\r\n                                            ^---^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1055:71: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\r\n                                                                      ^---^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1058:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (proofVerified == false) throw;\r\n                                    ^---^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1076:39: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n\tif (prefix.length != n_random_bytes) throw;\r\n\t                                     ^---^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1134:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw; // Should be a better way?\r\n            ^---^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:213:21: Warning: Result of exponentiation has type uint8 and thus might overflow. Silence this warning by converting the literal to the expected type.\n        return x * (2 ** y);\r\n                    ^----^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:979:50: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n                                                 ^--------------------------------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:979:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, sha3(delay_bytes8_left, args[1], sha256(args[0]), args[2]));\r\n                                                 ^--------------------------------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1011:21: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (address(sha3(pubkey)) == signer) return true;\r\n                    ^----------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1014:29: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n            return (address(sha3(pubkey)) == signer);\r\n                            ^----------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1029:22: Warning: Decimal literal assigned to bytesXX variable will be left-aligned. Use an explicit conversion to silence this warning.\n        tosign2[0] = 1; //role\r\n                     ^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1091:15: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n              ^-----------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1091:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                                    ^---------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1091:32: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1091:32: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1091:32: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        if (!(sha3(keyhash) == sha3(sha256(context_name, queryId)))) return false;\r\n                               ^---------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1109:48: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1109:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^---------------------------------------^\n/unique_chucks/19/0x4b675b8429224134c05d1d519eb07b4448febbe9.sol:1307:21: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n    _seed = uint256(keccak256(_seed, myrng));\r\n                    ^---------------------^\n",
    "issues": []
  }
}