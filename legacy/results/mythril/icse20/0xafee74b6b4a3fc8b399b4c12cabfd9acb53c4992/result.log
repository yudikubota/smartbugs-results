{"error": null, "issues": [{"address": 158, "code": "tisendToken(address tokAddress, address[] _dests, uint256[] _amounts) public {\n    ERC20 tok = ERC20(tokAddress);\n    for (uint i = 0; i < _dests.length; i++){\n        tok.transferFrom(msg.sender, _dests[i], _amounts[i]);\n    }\n  }\n\n  function mult", "debug": "calldata_MultiSender_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSender_0: 0xb66f3f500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSender: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multisendToken(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendToken(address,address[],uint256[])", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 314, "code": "th(address[] _dests, uint256[] _amounts) public payable {\n    for (uint i = 0; i < _dests.length; i++){\n        _dests[i].transfer(_amounts[i]);\n    }\n    require(this.balance == 0);\n  }\n}", "debug": "calldata_MultiSender_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSender_0: 0x106524a500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSender: 0x4\n", "description": "A possible integer overflow exists in the function `multisendEth(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendEth(address[],uint256[])", "lineno": 20, "title": "Integer Overflow ", "type": "Warning"}, {"address": 682, "code": "   }\n  }\n\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSender_4 + calldata_MultiSender_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSender_0: 0xb66f3f500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSender: 0x4\nmem_128 +\n32 +\n32*calldata_MultiSender_4 + calldata_MultiSender_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendToken(address,address[],uint256[])", "lineno": 17, "title": "Exception state", "type": "Informational"}, {"address": 880, "code": "m(msg.sender, _dests[i], _amounts[i]);\n    }\n  }\n\n  ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendToken(address,address[],uint256[])", "lineno": 16, "title": "Message call to external contract", "type": "Warning"}, {"address": 880, "code": "m(msg.sender, _dests[i], _amounts[i]);\n    }\n  }\n\n  ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 880\nCall at address: 880\n", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendToken(address,address[],uint256[])", "lineno": 16, "title": "Multiple Calls", "type": "Information"}, {"address": 1034, "code": "   require(", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSender_4 + calldata_MultiSender_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSender_0: 0x106524a500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSender: 0x4\nmem_128 +\n32 +\n32*calldata_MultiSender_4 + calldata_MultiSender_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendEth(address[],uint256[])", "lineno": 24, "title": "Exception state", "type": "Informational"}, {"address": 1066, "code": "mounts[i]);\n    }\n    require(t", "debug": "SOLVER OUTPUT:\nmem_128 +\n32 +\n32*calldata_MultiSender_4 + calldata_MultiSender_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSender_4 + calldata_MultiSender_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSender_0: 0x106524a500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSender: 0x4\n", "description": "In the function `multisendEth(address[],uint256[])` a non-zero amount of Ether is sent to an address taken from function arguments.\nIt seems that this function can be called without restrictions.", "filename": "/unique_chucks/15/0xafee74b6b4a3fc8b399b4c12cabfd9acb53c4992.sol", "function": "multisendEth(address[],uint256[])", "lineno": 22, "title": "Ether send", "type": "Warning"}], "success": true}