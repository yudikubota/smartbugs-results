{"error": null, "issues": [{"address": 2005, "code": "t x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n      ", "debug": "calldata_SandwichShop_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SandwichShop_0: 0xce47befd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\n", "description": "A possible integer overflow exists in the function `checkoutCart(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "checkoutCart(string)", "lineno": 152, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2296, "code": "newOrder.sandwichIdNumber", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SandwichShop_4: 0x5\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 112, "title": "Exception state", "type": "Informational"}, {"address": 2436, "code": "         return cart[msg.sender].push(", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nmem_64 +\n160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)): 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 118, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2625, "code": ";\n\ncontract Sandwi", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_64 +\n160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)): 0x0\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2687, "code": " }\n    }\n\n\n    function getCart", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 123, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3904, "code": "r] = 0;\n    }\n\n    fu", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SandwichShop_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SandwichShop_4: 0x0\ncalldata_SandwichShop_0: 0x74bff25700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "getCartItemInfo(address,uint256)", "lineno": 140, "title": "Exception state", "type": "Informational"}, {"address": 5108, "code": "tes) returns (uint)\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SandwichShop_4: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SandwichShop_0: 0x9405c78f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "setQuantity(uint256,uint256)", "lineno": 107, "title": "Exception state", "type": "Informational"}, {"address": 5296, "code": "ch[] ) public cart;\n    mapping( address => uint ) ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SandwichShop_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_SandwichShop_4: 0x0\ncalldata_SandwichShop_0: 0xb564eaaa00000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "_function_0xb564eaaa", "lineno": 34, "title": "Exception state", "type": "Informational"}, {"address": 5958, "code": "                        shopSandwich[ cart[msg.sende", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_0: 0xce47befd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "checkoutCart(string)", "lineno": 157, "title": "Exception state", "type": "Informational"}, {"address": 7152, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "storage_1 +\n3*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n3*\nmem_64 +\n160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_1_+\n3*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n3*\nmem_64_+\n160_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_SandwichShop_4_+_calldata_SandwichShop_32_+_4))_+\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7181, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7195, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7212, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0x25\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7217, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SandwichShop_4 + calldata_SandwichShop_32 + 4)) +\n32: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_1_+\n3*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n3*\nmem_64_+\n160_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_SandwichShop_4_+_calldata_SandwichShop_32_+_4))_+\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5 + 1 + 6*calldata_SandwichShop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SandwichShop_4: 0x4\ncalldata_SandwichShop_0: 0xefe5fb700000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addToCart(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "addToCart(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7251, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfefeeefeeeffffffffffffffffcc5ffe000001ee94fecc37e3ef3fdfff0000aa\ncalldata_SandwichShop_0: 0xa0c8c15600000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `emptyCart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "emptyCart()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7263, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4739d129bcd2b479cc8fc21cc7d8ee30aa138095240e41d5210928710ee4250f\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x510ca602c5308502644fa567c86c9b0ee05d7ba00178817e01147c6db0eb488e\ncalldata_SandwichShop_0: 0xa0c8c15600000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `emptyCart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "emptyCart()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7365, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0x0\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\ncalldata_SandwichShop_0: 0xa0c8c15600000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `emptyCart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "emptyCart()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7434, "code": "ntract SandwichShop\n{\n    address owner;\n\n    modifier onlyOwner()\n    {\n        require(msg.sender == owner);\n        _;\n    }\n\n    struct Sandwich\n    {\n        uint sandwichID;\n        string sandwichName;\n        string sandwichDesc;\n        string calories;\n        uint price;\n        uint quantity;\n    }\n\n    struct OrderedSandwich\n    {\n        uint sandwichIdNumber;\n        string notes;\n        uint price;\n    }\n\n    event NewSandwichTicket( string _name, address _orderer, string _sandName, string _sandChanges );\n    event testSandwichOrder( uint _sandwichId, address _addr );\n\n    Sandwich[5] shopSandwich;\n    mapping( address => OrderedSandwich[] ) public cart;\n    mapping( address => uint ) public subtotal;\n\n    function SandwichShop() public\n    {\n        owner = msg.sender;\n\n        shopSandwich[0].sandwichID = 0;\n        shopSandwich[0].sandwichName = \"100: Ham & Swiss\";\n        shopSandwich[0].sandwichDesc = \"Ham Swiss Mustard Rye\";\n        shopSandwich[0].calories = \"450 calories\";\n        shopSandwich[0].price = 40 finney;\n        shopSandwich[0].quantity = 200;\n\n        shopSandwich[1].sandwichID = 1;\n        shopSandwich[1].sandwichName = \"101: Turkey & Pepperjack\";\n        shopSandwich[1].sandwichDesc = \"Turkey Pepperjack Mayo White Bread\";\n        shopSandwich[1].calories = \"500 calories\";\n        shopSandwich[1].price = 45 finney;\n        shopSandwich[1].quantity = 200;\n\n        shopSandwich[2].sandwichID = 2;\n        shopSandwich[2].sandwichName = \"102: Roast Beef & American\";\n        shopSandwich[2].sandwichDesc = \"Roast Beef Havarti Horseradish White Bread\";\n        shopSandwich[2].calories = \"600 calories\";\n        shopSandwich[2].price = 50 finney;\n        shopSandwich[2].quantity = 200;\n\n        shopSandwich[3].sandwichID = 3;\n        shopSandwich[3].sandwichName = \"103: Reuben\";\n        shopSandwich[3].sandwichDesc = \"Corned Beef Sauerkraut Swiss Rye\";\n        shopSandwich[3].calories = \"550 calories\";\n        shopSandwich[3].price = 50 finney;\n        shopSandwich[3].quantity = 200;\n\n        shopSandwich[4].sandwichID = 4;\n        shopSandwich[4].sandwichName = \"104: Italian\";\n        shopSandwich[4].sandwichDesc = \"Salami Peppers Provolone Oil Vinegar White\";\n        shopSandwich[4].calories = \"500 calories\";\n        shopSandwich[4].price = 40 finney;\n        shopSandwich[4].quantity = 200;\n    }\n\n    function getMenu() constant returns (string, string, string, string, string)\n    {\n        return (shopSandwich[0].sandwichName, shopSandwich[1].sandwichName,\n                shopSandwich[2].sandwichName, shopSandwich[3].sandwichName,\n                shopSandwich[4].sandwichName );\n    }\n\n    function getSandwichInfo(uint _sandwich) constant returns (string, string, string, uint, uint)\n    {\n        if( _sandwich > 4 )\n        {\n            return ( \"wrong ID\", \"wrong ID\", \"zero\", 0, 0);\n        }\n        else\n        {\n            return (shopSandwich[_sandwich].sandwichName, shopSandwich[_sandwich].sandwichDesc,\n                shopSandwich[_sandwich].calories, shopSandwich[_sandwich].price, shopSandwich[_sandwich].quantity);\n        }\n    }\n\n    function decrementQuantity(uint _sandnum) private\n    {\n        shopSandwich[_sandnum].quantity--;\n    }\n\n    function setQuantity(uint _sandnum, uint _quantity) onlyOwner\n    {\n        shopSandwich[_sandnum].quantity = _quantity;\n    }\n\n    function addToCart(uint _sandwichID, string _notes) returns (uint)\n    {\n        if( shopSandwich[_sandwichID].quantity > 0 )\n        {\n            OrderedSandwich memory newOrder;\n            newOrder.sandwichIdNumber = _sandwichID;\n            newOrder.notes = _notes;\n            newOrder.price = shopSandwich[_sandwichID].price;\n            subtotal[msg.sender] += newOrder.price;\n            testSandwichOrder(newOrder.sandwichIdNumber, msg.sender);\n\n            return cart[msg.sender].push(newOrder);\n        }\n        else\n        {\n            return cart[msg.sender].length;\n        }\n    }\n\n\n    function getCartLength(address _curious) constant returns (uint)\n    {\n        return cart[_curious].length;\n    }\n\n    function getCartItemInfo(address _curious, uint _slot) constant returns (string)\n    {\n        return cart[_curious][_slot].notes;\n    }\n\n    function emptyCart() public\n    {\n        delete cart[msg.sender];\n        subtotal[msg.sender] = 0;\n    }\n\n    function getCartSubtotal(address _curious) constant returns (uint)\n    {\n        return subtotal[_curious];\n    }\n\n    function checkoutCart(string _firstname) payable returns (uint)\n    {\n        if( msg.value < subtotal[msg.sender] ){ revert(); }\n\n        for( uint x = 0; x < cart[msg.sender].length; x++ )\n        {\n            if( shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].quantity > 0 )\n            {\n                NewSandwichTicket( _firstname, msg.sender, \n                                   shopSandwich[ cart[msg.sender][x].sandwichIdNumber ].sandwichName,\n                                   cart[msg.sender][x].notes );\n                decrementQuantity( cart[msg.sender][x].sandwichIdNumber );\n            }\n            else\n            {\n                revert();\n            }\n        }\n        subtotal[msg.sender] = 0;\n        delete cart[msg.sender];\n    }\n\n    function transferFromRegister(address addr, uint amount) onlyOwner\n    {\n        if( amount <= this.balance )\n        {\n            addr.transfer(amount);\n        }\n    }\n\n    function kill() onlyOwner\n    {\n        selfdestruct(owner);\n    }\n\n}", "debug": "storage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nkeccac_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller_+\n1: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\ncalldata_SandwichShop_0: 0xa0c8c15600000000000000000000000000000000000000000000000000000000\ncalldatasize_SandwichShop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `emptyCart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7cf5216e59141dd6679a4f8573f22430ef51e75b.sol", "function": "emptyCart()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}