{"error": null, "issues": [{"address": 895, "code": ") public{\n        require(msg.sender==owner);\n        emit HomeSaleEvent(houseid,day,month,year, price100, source);\n    }\n    function addHouse(string memory adr, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_buil", "debug": "calldata_HomesCoin_32 + 132: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_HomesCoin_0: 0x1eb2a1dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makeEvent(uint64,uint8,uint8,uint16,uint64,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "makeEvent(uint64,uint8,uint8,uint16,uint64,string)", "lineno": 110, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1350, "code": "t32 lotsize, uint64 parcel, uint32 zip) public{\n        require(msg.sender==owner);\n        require(bytes(adr).length<128);\n        addresses[num_houses] = adr;\n        sqfts[num_houses]=sqft;\n        bedrooms[num_houses]=bedroom;\n        bathrooms[num_houses]=bathroom;\n        house_type[num_houses]=h_type;\n        year_built[num_houses]=yr_built;\n        lot_size[num_houses] = lotsize;\n        parcel_num[num_houses] = parcel;\n        zipcode[num_houses] = zip;\n        num_houses++;\n    }\n    function resetHouseParams(uint64 num_house, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_built, uint", "debug": "calldata_HomesCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_HomesCoin_0: 0x3d5b8f8800000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)", "lineno": 114, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4819, "code": "  return true;\n    }\n", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_HomesCoin_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_HomesCoin_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_HomesCoin_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_HomesCoin_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_HomesCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "transferFrom(address,address,uint256)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6229, "code": "  function burn(uint am", "debug": "calldata_HomesCoin_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_HomesCoin_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_5: 0x0\ncaller: 0x0\ncalldata_HomesCoin_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "mint(address,uint256)", "lineno": 85, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10652, "code": "Coin is ERC20Interface {\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n    uint price;\n    \n    address owner;\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"HOMt0\";\n        name = \"HomesCoin_test0\";\n        decimals = 18;\n        _totalSupply = 1000000 * 10**uint(decimals);\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        price=100;\n        emit Transfer(owner, address(0), _totalSupply);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to!=address(0));\n        require(tokens<=balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(to!=address(0));\n        require(balances[from]>=tokens);\n        require(allowed[from][msg.sender]>=tokens);\n        balances[from] = balances[from] - tokens;\n        allowed[from][msg.sender] = allowed[from][msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    function mint(address target, uint amt) public{\n        require(msg.sender==owner);\n        balances[target] += amt;\n        emit Transfer(target, address(0), amt);\n    }\n    function burn(uint amt) public{\n        require(msg.sender==owner);\n        require(balances[owner]>=amt);\n        balances[owner]-=amt;\n    }\n    \n    function destroy() public {\n        require(msg.sender==owner);\n        selfdestruct(msg.sender);\n    }\n    \n    event HomeSaleEvent(uint64 houseid, uint8 day, uint8 month, uint16 year, uint64 price100, string source);\n    \n    mapping(uint64=>string) public addresses;\n    mapping(uint64=>uint32) public sqfts;\n    mapping(uint64=>uint8) public bedrooms;\n    mapping(uint64=>uint8) public bathrooms;\n    mapping(uint64=>uint8) public house_type;\n    mapping(uint64=>uint16) public year_built;\n    mapping(uint64=>uint32) public lot_size;\n    mapping(uint64=>uint64) public parcel_num;\n    mapping(uint64=>uint32) public zipcode;\n    \n    uint64 public num_houses = 0;\n    \n    function makeEvent(uint64 houseid, uint8 day, uint8 month, uint16 year, uint64 price100, string memory source) public{\n        require(msg.sender==owner);\n        emit HomeSaleEvent(houseid,day,month,year, price100, source);\n    }\n    function addHouse(string memory adr, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_built, uint32 lotsize, uint64 parcel, uint32 zip) public{\n        require(msg.sender==owner);\n        require(bytes(adr).length<128);\n        addresses[num_houses] = adr;\n        sqfts[num_houses]=sqft;\n        bedrooms[num_houses]=bedroom;\n        bathrooms[num_houses]=bathroom;\n        house_type[num_houses]=h_type;\n        year_built[num_houses]=yr_built;\n        lot_size[num_houses] = lotsize;\n        parcel_num[num_houses] = parcel;\n        zipcode[num_houses] = zip;\n        num_houses++;\n    }\n    function resetHouseParams(uint64 num_house, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_built, uint32 lotsize, uint64 parcel, uint32 zip) public{\n        require(msg.sender==owner);\n        sqfts[num_house]=sqft;\n        bedrooms[num_house]=bedroom;\n        bathrooms[num_house]=bathroom;\n        house_type[num_house]=h_type;\n        year_built[num_house]=yr_built;\n        lot_size[num_house] = lotsize;\n        parcel_num[num_house] = parcel;\n        zipcode[num_house] = zip;\n    }\n    \n    event DonationEvent(address sender, uint value);\n    \n    function ()external payable{\n        emit DonationEvent(msg.sender,msg.value);\n    }\n    \n    function buy(uint tokens)public payable{\n        require(tokens>=100000); // prevents buying and selling absurdly small amounts to cheat the contract arithmetic\n        require(msg.value>=price*tokens/100);\n        require(allowed[owner][address(0)]>=tokens);\n        require(balances[owner]>=tokens);\n        require(msg.sender!=owner);\n        allowed[owner][address(0)]-=tokens;\n        balances[owner]-=tokens;\n        balances[msg.sender]+=tokens;\n        msg.sender.transfer(msg.value-price*tokens);\n    }\n    \n    function sell(uint tokens)public{\n        require(tokens>100000); // prevents buying and selling absurdly small amounts to cheat the contract arithmetic\n        require(balances[msg.sender]>=tokens);\n        require(address(this).balance>price*tokens/100);\n        require(msg.sender!=owner);\n        allowed[owner][address(0)]+=tokens;\n        balances[owner]+=tokens;\n        balances[msg.sender]-=tokens;\n        msg.sender.transfer(price*tokens);\n    }\n    \n    function setPrice(uint newPrice) public{\n        require(msg.sender==owner);\n        price = newPrice;\n    }\n    \n    function collect(uint amount) public{\n        require(msg.sender==owner);\n        require(address(this).balance>=amount+1 ether);\n        msg.sender.transfer(amount);\n    }\n}", "debug": "keccac_keccac_18446744073709551615_&\n18446744073709551615_&\n18446744073709551615_&\nUDiv(storage_17,_256): 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_keccac_18446744073709551615_&\n18446744073709551615_&\n18446744073709551615_&\nUDiv(storage_17,_256): 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_HomesCoin_4 + calldata_HomesCoin_4: 0x7f\nstorage_5: 0x0\ncaller: 0x0\ncalldata_HomesCoin_0: 0x3d5b8f8800000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10717, "code": "Coin is ERC20Interface {\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint _totalSupply;\n    uint price;\n    \n    address owner;\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) allowed;\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"HOMt0\";\n        name = \"HomesCoin_test0\";\n        decimals = 18;\n        _totalSupply = 1000000 * 10**uint(decimals);\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        price=100;\n        emit Transfer(owner, address(0), _totalSupply);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to!=address(0));\n        require(tokens<=balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(to!=address(0));\n        require(balances[from]>=tokens);\n        require(allowed[from][msg.sender]>=tokens);\n        balances[from] = balances[from] - tokens;\n        allowed[from][msg.sender] = allowed[from][msg.sender] - tokens;\n        balances[to] = balances[to] + tokens;\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    function mint(address target, uint amt) public{\n        require(msg.sender==owner);\n        balances[target] += amt;\n        emit Transfer(target, address(0), amt);\n    }\n    function burn(uint amt) public{\n        require(msg.sender==owner);\n        require(balances[owner]>=amt);\n        balances[owner]-=amt;\n    }\n    \n    function destroy() public {\n        require(msg.sender==owner);\n        selfdestruct(msg.sender);\n    }\n    \n    event HomeSaleEvent(uint64 houseid, uint8 day, uint8 month, uint16 year, uint64 price100, string source);\n    \n    mapping(uint64=>string) public addresses;\n    mapping(uint64=>uint32) public sqfts;\n    mapping(uint64=>uint8) public bedrooms;\n    mapping(uint64=>uint8) public bathrooms;\n    mapping(uint64=>uint8) public house_type;\n    mapping(uint64=>uint16) public year_built;\n    mapping(uint64=>uint32) public lot_size;\n    mapping(uint64=>uint64) public parcel_num;\n    mapping(uint64=>uint32) public zipcode;\n    \n    uint64 public num_houses = 0;\n    \n    function makeEvent(uint64 houseid, uint8 day, uint8 month, uint16 year, uint64 price100, string memory source) public{\n        require(msg.sender==owner);\n        emit HomeSaleEvent(houseid,day,month,year, price100, source);\n    }\n    function addHouse(string memory adr, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_built, uint32 lotsize, uint64 parcel, uint32 zip) public{\n        require(msg.sender==owner);\n        require(bytes(adr).length<128);\n        addresses[num_houses] = adr;\n        sqfts[num_houses]=sqft;\n        bedrooms[num_houses]=bedroom;\n        bathrooms[num_houses]=bathroom;\n        house_type[num_houses]=h_type;\n        year_built[num_houses]=yr_built;\n        lot_size[num_houses] = lotsize;\n        parcel_num[num_houses] = parcel;\n        zipcode[num_houses] = zip;\n        num_houses++;\n    }\n    function resetHouseParams(uint64 num_house, uint32 sqft, uint8 bedroom,uint8 bathroom,uint8 h_type, uint16 yr_built, uint32 lotsize, uint64 parcel, uint32 zip) public{\n        require(msg.sender==owner);\n        sqfts[num_house]=sqft;\n        bedrooms[num_house]=bedroom;\n        bathrooms[num_house]=bathroom;\n        house_type[num_house]=h_type;\n        year_built[num_house]=yr_built;\n        lot_size[num_house] = lotsize;\n        parcel_num[num_house] = parcel;\n        zipcode[num_house] = zip;\n    }\n    \n    event DonationEvent(address sender, uint value);\n    \n    function ()external payable{\n        emit DonationEvent(msg.sender,msg.value);\n    }\n    \n    function buy(uint tokens)public payable{\n        require(tokens>=100000); // prevents buying and selling absurdly small amounts to cheat the contract arithmetic\n        require(msg.value>=price*tokens/100);\n        require(allowed[owner][address(0)]>=tokens);\n        require(balances[owner]>=tokens);\n        require(msg.sender!=owner);\n        allowed[owner][address(0)]-=tokens;\n        balances[owner]-=tokens;\n        balances[msg.sender]+=tokens;\n        msg.sender.transfer(msg.value-price*tokens);\n    }\n    \n    function sell(uint tokens)public{\n        require(tokens>100000); // prevents buying and selling absurdly small amounts to cheat the contract arithmetic\n        require(balances[msg.sender]>=tokens);\n        require(address(this).balance>price*tokens/100);\n        require(msg.sender!=owner);\n        allowed[owner][address(0)]+=tokens;\n        balances[owner]+=tokens;\n        balances[msg.sender]-=tokens;\n        msg.sender.transfer(price*tokens);\n    }\n    \n    function setPrice(uint newPrice) public{\n        require(msg.sender==owner);\n        price = newPrice;\n    }\n    \n    function collect(uint amount) public{\n        require(msg.sender==owner);\n        require(address(this).balance>=amount+1 ether);\n        msg.sender.transfer(amount);\n    }\n}", "debug": "calldata_HomesCoin_4 + calldata_HomesCoin_4: 0x20\nkeccac_keccac_18446744073709551615_&\n18446744073709551615_&\n18446744073709551615_&\nUDiv(storage_17,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncaller: 0x0\ncalldata_HomesCoin_0: 0x3d5b8f8800000000000000000000000000000000000000000000000000000000\ncalldatasize_HomesCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x1b5c8afd9739c3d2af5a4859dec0482a6df7667d.sol", "function": "addHouse(string,uint32,uint8,uint8,uint8,uint16,uint32,uint64,uint32)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}], "success": true}