{
  "contract": "0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7",
  "tool": "mythril",
  "start": 1563519632.6613398,
  "end": 1563519663.9211898,
  "duration": 31.259850025177002,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1298,
        "code": "nt\n    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {\n        require(_idPayment < authorizedPayments.length);\n\n        // Overflow test\n        require(_delay <= 10**18);\n\n        Payment storage p = aut",
        "debug": "calldata_Vault_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Vault_0: 0x863da00000000000000000000000000000000000000000000000000000000000\ncalldatasize_Vault: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x863da000`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7.sol",
        "function": "_function_0x863da000",
        "lineno": 496,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4056,
        "code": "thorizedPayment(_idPayment);\n ",
        "debug": "",
        "description": "In the function `disburseAuthorizedPayment(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/5/0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7.sol",
        "function": "disburseAuthorizedPayment(uint256)",
        "lineno": 486,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 4326,
        "code": "d Interface\n/////////\n\n    /// @notice `onlySe",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/5/0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7.sol",
        "function": "disburseAuthorizedPayment(uint256)",
        "lineno": 491,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4326,
        "code": "d Interface\n/////////\n\n    /// @notice `onlySe",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function disburseAuthorizedPayment(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x30f938fed5de6e06a9a7cd2ac3517131c317b1e7.sol",
        "function": "disburseAuthorizedPayment(uint256)",
        "lineno": 491,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}