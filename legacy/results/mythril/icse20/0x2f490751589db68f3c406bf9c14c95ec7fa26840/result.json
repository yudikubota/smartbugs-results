{
  "contract": "0x2f490751589db68f3c406bf9c14c95ec7fa26840",
  "tool": "mythril",
  "start": 1563264553.2342246,
  "end": 1563264617.4521506,
  "duration": 64.21792602539062,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1488,
        "code": "b * c",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UnicornRefunds_0: 0x310ec4a300000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRefunds: 0x4\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "fallback",
        "lineno": 28,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1931,
        "code": "yOwner {\n    ERC20Token toke",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "withdraw()",
        "lineno": 157,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2481,
        "code": "tate.Completed); // Must be a visit that's ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "claimReward(uint256)",
        "lineno": 87,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2481,
        "code": "tate.Completed); // Must be a visit that's ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimReward(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "claimReward(uint256)",
        "lineno": 87,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3941,
        "code": "total = pricePerUnicorn.mul(_unicornCount);\n    msg.sender.trans",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "sell(uint256)",
        "lineno": 106,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3941,
        "code": "total = pricePerUnicorn.mul(_unicornCount);\n    msg.sender.trans",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sell(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "sell(uint256)",
        "lineno": 106,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4475,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 162,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4865,
        "code": ";\n  }\n\n  funct",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UnicornRefunds_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UnicornRefunds_0: 0xe4849b3200000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRefunds: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x2f490751589db68f3c406bf9c14c95ec7fa26840.sol",
        "function": "sell(uint256)",
        "lineno": 34,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}