{"error": null, "issues": [{"address": 317, "code": "largest\n      if (largestHODLE", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "fallback", "lineno": 81, "title": "Message call to external contract", "type": "Informational"}, {"address": 317, "code": "largest\n      if (largestHODLE", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 895\nCall at address: 895\nCall at address: 895\nCall at address: 895\nCall at address: 895\nCall at address: 895\nCall at address: 895\n", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "fallback", "lineno": 81, "title": "Multiple Calls", "type": "Information"}, {"address": 1632, "code": "d, allocationType)) {\n          revert();\n      }\n      else {\n        ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DNNToken_32 + 4: 0x80\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DNNToken_0: 0x3fe9d89800000000000000000000000000000000000000000000000000000000\ncalldatasize_DNNToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 54, "title": "Exception state", "type": "Informational"}, {"address": 1675, "code": "d, allocationType)) {\n          revert();\n      }\n      else {\n        ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 54, "title": "Message call to external contract", "type": "Informational"}, {"address": 1962, "code": "rgestHODLERBalance = largestHODLERBalanc", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 60, "title": "State change after external call", "type": "Warning"}, {"address": 1971, "code": "largestHODLERAddress = 0x0;\n          largestHO", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 61, "title": "State change after external call", "type": "Warning"}, {"address": 2037, "code": " 0;\n      }\n  }\n\n  // Cons", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 62, "title": "State change after external call", "type": "Warning"}, {"address": 2045, "code": "structor() public\n  {\n  ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8663f9d4a2d7fa822318d765d81f472ba38453d0.sol", "function": "_function_0x3fe9d898", "lineno": 67, "title": "State change after external call", "type": "Warning"}], "success": true}