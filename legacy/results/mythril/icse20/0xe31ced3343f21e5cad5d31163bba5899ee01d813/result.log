{"error": null, "issues": [{"address": 470, "code": "TokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name()", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 482, "code": "TokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name()", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 491, "code": "TokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name()", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 497, "code": "TokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name()", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1926, "code": ";\n        _name ", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 17, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5113, "code": "ansfe", "debug": "calldata_ERC20_CRYPTOMILLION_CPMN_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20_CRYPTOMILLION_CPMN_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "increaseApproval(address,uint256)", "lineno": 77, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5126, "code": "to, uint256 _v", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20_CRYPTOMILLION_CPMN_4: 0x1\ncalldata_ERC20_CRYPTOMILLION_CPMN_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "increaseApproval(address,uint256)", "lineno": 77, "title": "Exception state", "type": "Informational"}, {"address": 5205, "code": "ntract ERC20_CRYPTOMILLION_CPMN {\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function CreateTokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name() public view returns (string)\n    {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        if (a == 0)\n            return 0;\n      \n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = sub(balances[msg.sender], _value);\n        balances[_to] = add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = sub(balances[_from], _value);\n        balances[_to] = add(balances[_to], _value);\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}", "debug": "storage_1: 0xbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncalldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4)): 0x0\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5219, "code": "ntract ERC20_CRYPTOMILLION_CPMN {\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function CreateTokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name() public view returns (string)\n    {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        if (a == 0)\n            return 0;\n      \n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = sub(balances[msg.sender], _value);\n        balances[_to] = add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = sub(balances[_from], _value);\n        balances[_to] = add(balances[_to], _value);\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\ncalldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4)): 0x0\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5236, "code": "ntract ERC20_CRYPTOMILLION_CPMN {\n     \n    string internal _name;\n    string internal _symbol;\n    uint8 internal _decimals;\n    uint256 internal _totalSupply;\n\n    mapping (address => uint256) internal balances;\n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function CreateTokenERC20(string name, string symbol, uint8 decimals, uint256 totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n        balances[msg.sender] = totalSupply;\n    }\n\n    function name() public view returns (string)\n    {\n        return _name;\n    }\n\n    function symbol()\n        public\n        view\n        returns (string) {\n        return _symbol;\n    }\n\n    function decimals()\n        public\n        view\n        returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply()\n        public\n        view\n        returns (uint256) {\n        return _totalSupply;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        if (a == 0)\n            return 0;\n      \n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256)\n    {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = sub(balances[msg.sender], _value);\n        balances[_to] = add(balances[_to], _value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = sub(balances[_from], _value);\n        balances[_to] = add(balances[_to], _value);\n        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = add(allowed[msg.sender][_spender], _addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = sub(oldValue, _subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4)): 0x28\ncalldata_ERC20_CRYPTOMILLION_CPMN_4 + calldata_ERC20_CRYPTOMILLION_CPMN_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1\ncalldata_ERC20_CRYPTOMILLION_CPMN_0: 0x9ed7b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20_CRYPTOMILLION_CPMN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `CreateTokenERC20(string,string,uint8,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xe31ced3343f21e5cad5d31163bba5899ee01d813.sol", "function": "CreateTokenERC20(string,string,uint8,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}