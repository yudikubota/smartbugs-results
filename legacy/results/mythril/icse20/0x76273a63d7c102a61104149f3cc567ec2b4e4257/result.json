{
  "contract": "0x76273a63d7c102a61104149f3cc567ec2b4e4257",
  "tool": "mythril",
  "start": 1563612931.4421873,
  "end": 1563613104.004846,
  "duration": 172.56265878677368,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 705,
        "code": "uint _expiresBlock, VisitState _state) {\n    Visit storage v = bookings[_who][_index];\n    return (v.unicornCount, v.t, v.startBlock, v.expiresBlock, v.state);\n  }\n\n  function bookSpaVisit(uint _unicornCount) payable {\n    return addBooking(VisitType.Spa, _unicornCount);\n  }\n  function",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1 +\n5*calldata_UnicornRanch_32 + 4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x8000\ncalldata_UnicornRanch_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x1\ncalldata_UnicornRanch_0: 0xb0edad300000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "getBooking(address,uint256)",
        "lineno": 121,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 737,
        "code": "uint _expiresBlock, VisitState _state) {\n    Visit storage v = bookings[_who][_index];\n    return (v.unicornCount, v.t, v.startBlock, v.expiresBlock, v.state);\n  }\n\n  function bookSpaVisit(uint _unicornCount) payable {\n    return addBooking(VisitType.Spa, _unicornCount);\n  }\n  function",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1 +\n5*calldata_UnicornRanch_32 + 4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x0\nstorage_4 +\n5*calldata_UnicornRanch_32 + 4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x300\ncalldata_UnicornRanch_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x1\ncalldata_UnicornRanch_0: 0xb0edad300000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "getBooking(address,uint256)",
        "lineno": 121,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2865,
        "code": "   if (cardboardUnicornTokenAddress == 0) {\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "fallback",
        "lineno": 265,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2865,
        "code": "   if (cardboardUnicornTokenAddress == 0) {\n    ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3454\nCall at address: 3454\nCall at address: 3099\n",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "fallback",
        "lineno": 265,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3099,
        "code": "));\n  }\n  \n  function donateUnico",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "fallback",
        "lineno": 268,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3099,
        "code": "));\n  }\n  \n  function donateUnico",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3454\nCall at address: 3454\n",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "fallback",
        "lineno": 268,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3454,
        "code": "e the outside contracts used by this contract\n   */\n  function changeCar",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "fallback",
        "lineno": 288,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3667,
        "code": "isit(uint _unicornCoun",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UnicornRanch_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UnicornRanch_4: 0x0\ncalldata_UnicornRanch_0: 0xb0edad300000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "getBooking(address,uint256)",
        "lineno": 126,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4352,
        "code": "icornTokenAddress);\n\n    // Dete",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4 +\n5*calldata_UnicornRanch_4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_UnicornRanch_4: 0x0\nblock_number: 0x0\nstorage_3 +\n5*calldata_UnicornRanch_4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_UnicornRanch_0: 0x1a2b343100000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "completeBooking(uint256)",
        "lineno": 190,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6204,
        "code": ".mul(_unicornCount)); // Mus",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UnicornRanch_4: 0x80\ncalldata_UnicornRanch_0: 0x701513c000000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "_function_0x701513c0",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6556,
        "code": "cornCount);\n    uint expiresBlock = block.number.add(visitLength[uint8(_",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "bookExtendedVisit(uint256)",
        "lineno": 153,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10403,
        "code": " b;\n  }\n\n  fun",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4 +\n5*calldata_UnicornRanch_4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_UnicornRanch_4: 0x0\nblock_number: 0x0\nstorage_2 +\n5*calldata_UnicornRanch_4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_3 +\n5*calldata_UnicornRanch_4 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_UnicornRanch_0: 0x1a2b343100000000000000000000000000000000000000000000000000000000\ncalldatasize_UnicornRanch: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x76273a63d7c102a61104149f3cc567ec2b4e4257.sol",
        "function": "completeBooking(uint256)",
        "lineno": 32,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}