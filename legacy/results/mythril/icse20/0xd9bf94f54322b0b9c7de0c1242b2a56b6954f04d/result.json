{
  "contract": "0xd9bf94f54322b0b9c7de0c1242b2a56b6954f04d",
  "tool": "mythril",
  "start": 1563742459.2196484,
  "end": 1563742503.5812118,
  "duration": 44.36156344413757,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 764,
        "code": "      address blacklistedbuyer = buyer[i];\n        }\n        emit Blacklist(blacklistedbuyer);\n    }\n\n    /**\n     * @dev low level token purchase ***DO NOT OVERRIDE***\n     * @param _beneficiary Address performing the token purchase\n     */\n    function buyTokens(addre",
        "debug": "calldata_YLKWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_YLKWallet_0: 0x8311139700000000000000000000000000000000000000000000000000000000\ncalldatasize_YLKWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `blacklistAddr(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xd9bf94f54322b0b9c7de0c1242b2a56b6954f04d.sol",
        "function": "blacklistAddr(address[])",
        "lineno": 168,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1126,
        "code": "rue;\n            address whitelistedbuyer = buyer[i];\n        }\n        emit Whitelist(whitelistedbuyer);\n    }\n  \n    /** @dev black list an address **/\n    function blacklistAddr(address[] buyer) external onlyOwner {\n        for (uint i = 0; i < buyer.length; i++) {\n   ",
        "debug": "calldata_YLKWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_YLKWallet_0: 0xb31d61b000000000000000000000000000000000000000000000000000000000\ncalldatasize_YLKWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `whitelistAddress(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xd9bf94f54322b0b9c7de0c1242b2a56b6954f04d.sol",
        "function": "whitelistAddress(address[])",
        "lineno": 158,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3763,
        "code": " @title Ownabl",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb506c45220288a08647c53faf40146c35a48430178f8fb08045706ac605b01c0\ncallvalue: 0xc51feb57c82a765f1c6c3803d5b8b6f35d6f02ae7deecb5f1c371e9e695ba9fb\nstorage_3: 0xc51feb57c82a765f1c6c3803d5b8b6f35d6f02ae7deecb5f1c371e9e695ba9fb\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_YLKWallet: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/41/0xd9bf94f54322b0b9c7de0c1242b2a56b6954f04d.sol",
        "function": "fallback",
        "lineno": 50,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}