{
  "contract": "0x209f98bc320133681458125bc57ecc03718311cc",
  "tool": "mythril",
  "start": 1563597363.0138078,
  "end": 1563597872.1888967,
  "duration": 509.1750888824463,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3517,
        "code": "oustNum;\n        ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_bjTest_0: 0x9c505ce00000000000000000000000000000000000000000000000000000000\ncalldatasize_bjTest: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `ApushJoustUser(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x209f98bc320133681458125bc57ecc03718311cc.sol",
        "function": "ApushJoustUser(address)",
        "lineno": 69,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4197,
        "code": " = AllCaptcha; \n      ",
        "debug": "storage_5: 0x0\nstorage_3: 0x1\ncalldata_bjTest_0: 0x5da5f5ab00000000000000000000000000000000000000000000000000000000\ncalldatasize_bjTest: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `Distribution()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x209f98bc320133681458125bc57ecc03718311cc.sol",
        "function": "Distribution()",
        "lineno": 108,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4205,
        "code": "h = AllCaptcha; \n        BJJhis[Joust",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_bjTest_0: 0x5da5f5ab00000000000000000000000000000000000000000000000000000000\ncalldatasize_bjTest: 0x4\nstorage_8: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/23/0x209f98bc320133681458125bc57ecc03718311cc.sol",
        "function": "Distribution()",
        "lineno": 108,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5431,
        "code": "nt[randomA];\n ",
        "debug": "block_number: 0x0\ncalldata_bjTest_0: 0x604a6fa900000000000000000000000000000000000000000000000000000000\ncalldatasize_bjTest: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `Random()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x209f98bc320133681458125bc57ecc03718311cc.sol",
        "function": "Random()",
        "lineno": 151,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9495,
        "code": "g SafeMath for uint256;\n    uint256 public JoustNum = 1; \n    uint256 public NumberOfPart = 0; \n    uint256 public Commission = 0.024 * 1 ether; \n    uint256 public RateEth = 0.3 * 1 ether; \n    uint256 public TotalRate = 2.4 * 1 ether; \n    struct BJJtab { \n        uint256 JoustNumber;\n        uint256 UserNumber;       \n        address UserAddress; \n        uint256 CoincidNum;   \n        uint256 Winning; \n    }\n    mapping(uint256 => mapping(uint256 => BJJtab)) public BJJtable; \n    struct BJJraundHis{\n        uint256 JoustNum; \n        uint256 CapAmouth; \n        uint256 BetOverlap; \n        string Cap1;\n        string Cap2;\n        string Cap3;\n    }\n    mapping(uint256 => BJJraundHis) public BJJhis;\n    uint256 public AllCaptcha = 0; \n    uint256 public BetOverlap = 0; \n    event BJJraund (uint256 UserNum, address User, uint256 CoincidNum, uint256 Winning);\n    event BJJhist (uint256 JoustNum, uint256 CapAllAmouth, uint256 CapPrice, string Cap1, string Cap2, string Cap3);\n    /*\u0412\u0441\u0443\u043f\u043b\u0435\u043d\u0438\u0435 \u0432 \u0438\u0433\u0440\u0443*/\n    function ApushJoustUser(address _address) public onlyOwner{       \n        NumberOfPart += 1;      \n        BJJtable[JoustNum][NumberOfPart].JoustNumber = JoustNum;\n        BJJtable[JoustNum][NumberOfPart].UserNumber = NumberOfPart; \n        BJJtable[JoustNum][NumberOfPart].UserAddress = _address;\n        BJJtable[JoustNum][NumberOfPart].CoincidNum = 0;\n        BJJtable[JoustNum][NumberOfPart].Winning = 0; \n        if(NumberOfPart == 8){\n            toAsciiString();\n            NumberOfPart = 0;\n            JoustNum += 1;\n            AllCaptcha = 0;\n        }\n    }\n    function ArJoust(uint256 _n, uint256 _n2) public view returns(uint256){\n        //var Tab = BJJtable[_n][_n2];\n        return BJJtable[_n][_n2].CoincidNum;\n    }    \n    string public Ast;\n    string public Bst;\n    string public Cst;\n    uint256 public  captcha = 0;     \n    uint public gasprice = tx.gasprice;\n    uint public blockdif = block.difficulty;\n    function substring(string str, uint startIndex, uint endIndex, uint256 Jnum, uint256 Usnum) public returns (string) {\n    bytes memory strBytes = bytes(str);\n    bytes memory result = new bytes(endIndex-startIndex);\n    for(uint i = startIndex; i < endIndex; i++) {\n        result[i-startIndex] = strBytes[i];\n        if(keccak256(strBytes[i]) == keccak256(Ast) || keccak256(strBytes[i]) == keccak256(Bst) || keccak256(strBytes[i]) == keccak256(Cst)){ \n            BJJtable[Jnum][Usnum].CoincidNum += 1; \n            AllCaptcha += 1;\n        }\n    }\n    return string(result);\n    }\n    uint256 public Winn;\n    function Distribution() public {\n\n        BetOverlap = (TotalRate - Commission) / AllCaptcha; \n        BJJhis[JoustNum].JoustNum = JoustNum;\n        BJJhis[JoustNum].CapAmouth = AllCaptcha; \n        BJJhis[JoustNum].BetOverlap = BetOverlap; \n        BJJhis[JoustNum].Cap1 = Ast;\n        BJJhis[JoustNum].Cap2 = Bst;\n        BJJhis[JoustNum].Cap3 = Cst;        \n        emit BJJhist(JoustNum, AllCaptcha, BetOverlap, Ast, Bst, Cst);         \n        for(uint i = 1; i<9; i++){\n            BJJtable[JoustNum][i].Winning = BJJtable[JoustNum][i].CoincidNum * BetOverlap;\n            Winn = BJJtable[JoustNum][i].Winning;\n            emit BJJraund(BJJtable[JoustNum][i].UserNumber, BJJtable[JoustNum][i].UserAddress, BJJtable[JoustNum][i].CoincidNum, Winn);\n        }\n    }\n    function toAsciiString() public returns (string) {\n    Random();\n    for(uint a = 1; a < 9; a++){  \n    address x = BJJtable[JoustNum][a].UserAddress; \n    bytes memory s = new bytes(40);\n    for (uint i = 0; i < 20; i++) {\n        byte b = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n        byte hi = byte(uint8(b) / 16);\n        byte lo = byte(uint8(b) - 16 * uint8(hi));\n        s[2*i] = char(hi);\n        s[2*i+1] = char(lo);            \n    }\n    substring(string(s), 20, 40, JoustNum, a); \n    }\n    Distribution();\n    return string(s);\n    }\n\n    function char(byte b) public pure returns(byte c) {\n        if (b < 10){ return byte(uint8(b) + 0x30); } else {\n            return byte(uint8(b) + 0x57); }\n    }\n    string[] public arrint = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n    string[] public arrstr = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\n    uint256 public randomA;\n    uint256 public randomB;\n    uint256 public randomC;\n    function Random() public{\n        randomA = uint256(block.blockhash(block.number-1))%9 + 1; //uint\n        randomC = uint256(block.timestamp)%9 +1; //uint\n        randomB = uint256(block.timestamp)%5 +1; // str\n        Ast = arrint[randomA];\n        Cst = arrint[randomC]; \n        Bst = arrstr[randomB];\n    }   \n    function kill() public onlyOwner {\n        selfdestruct(msg.sender);\n    }\n\n}",
        "debug": "storage_3 + keccac_storage_1: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_3_+_keccac_storage_1: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_bjTest_0: 0x5da5f5ab00000000000000000000000000000000000000000000000000000000\ncalldatasize_bjTest: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `Distribution()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x209f98bc320133681458125bc57ecc03718311cc.sol",
        "function": "Distribution()",
        "lineno": 39,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}