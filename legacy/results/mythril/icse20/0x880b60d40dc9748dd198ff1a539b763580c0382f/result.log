{"error": null, "issues": [{"address": 152, "code": ";\n\ninterface token", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_0: 0x0\ncalldatasize_token: 0x4\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 427, "code": "t(this, winner, amo", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1087\nCall at address: 802\nCall at address: 1087\nCall at address: 802\n", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 34, "title": "Multiple Calls", "type": "Information"}, {"address": 802, "code": "))/((rounds+1)-playerPool.length);  ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 35, "title": "Message call to external contract", "type": "Informational"}, {"address": 802, "code": "))/((rounds+1)-playerPool.length);  ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1087\n", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 35, "title": "Multiple Calls", "type": "Information"}, {"address": 873, "code": "ress(this))/((rounds+1)-playerPool.length);    \n      if (reward > 0) { toke", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 35, "title": "State change after external call", "type": "Warning"}, {"address": 1087, "code": "ward);}   \n      playerPool.length = 0; ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 36, "title": "Message call to external contract", "type": "Informational"}, {"address": 1245, "code": "ess(this).balance)()) { emit Payout(this, maincontract, quot", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 41, "title": "Message call to external contract", "type": "Informational"}, {"address": 1245, "code": "ess(this).balance)()) { emit Payout(this, maincontract, quot", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1942\nCall at address: 1657\nCall at address: 1942\nCall at address: 1657\n", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 41, "title": "Multiple Calls", "type": "Information"}, {"address": 1464, "code": "f (rewar", "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1245: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_0: 0x0\ncalldatasize_token: 0x4\nstorage_4: 0x0\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1465, "code": "if (reward > 0) { tokenRewar", "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1245: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_4: 0x0\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 44, "title": "Integer Underflow", "type": "Warning"}, {"address": 1657, "code": "nds+1)-playerPool.length);    \n     ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 43, "title": "Message call to external contract", "type": "Informational"}, {"address": 1657, "code": "nds+1)-playerPool.length);    \n     ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1942\n", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 43, "title": "Multiple Calls", "type": "Information"}, {"address": 1721, "code": "nds+1)-playerPool.length);    \n       if (reward > 0) { tokenReward", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_1657: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_token_0: 0x0\ncalldatasize_token: 0x4\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 1728, "code": "s))/((rounds+1)-playerPool.length);    \n       if (reward > 0) { tokenReward", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 43, "title": "State change after external call", "type": "Warning"}, {"address": 1942, "code": "\n    } \n  }\n}", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 44, "title": "Message call to external contract", "type": "Informational"}, {"address": 3434, "code": "t DeflatLottoInvest {\n\n  string public name = \"DEFLAT LOTTO INVEST\";\n  string public symbol = \"DEFTLI\";\n  string public prob = \"Probability 1 of 10\";\n  string public comment = \"Send 0.002 ETH to captalize DEFLAT and try to win 0.018 ETH, the prize is drawn when the accumulated balance reaches 0.02 ETH\";\n\n  //Send only 0.002 ether, other value will be rejected;\n  //Bids below 0.002 ether generate very low DEFLAT returns when calling the sales contract due to the gas cost, so this is the minimum feasible bid.\n\n  address[] internal playerPool;\n  address public maincontract = address(0xe36584509F808f865BE1960aA459Ab428fA7A25b); //DEFLAT SALE CONTRACT;\n  token public tokenReward = token(0xe1E0DB951844E7fb727574D7dACa68d1C5D1525b);// DEFLAT COIN CONTRACT;\n  uint rounds = 10;\n  uint quota = 0.002 ether;\n  uint reward;\n  event Payout(address from, address to, uint quantity);\n  function () public payable {\n    require(msg.value == quota);\n    playerPool.push(msg.sender);\n    if (playerPool.length >= rounds) {\n      uint baserand = (block.number-1)+now+block.difficulty;\n      uint winidx = uint(baserand)/10;\n      winidx = baserand - (winidx*10);   \n      address winner = playerPool[winidx];\n      uint amount = address(this).balance;\n      if (winner.send(amount)) { emit Payout(this, winner, amount);}\n      reward = tokenReward.balanceOf(address(this))/((rounds+1)-playerPool.length);    \n      if (reward > 0) { tokenReward.transfer(msg.sender, reward);}   \n      playerPool.length = 0;                \n    } \n    else {\n       if (playerPool.length == 1) {\n           if (maincontract.call.gas(200000).value(address(this).balance)()) { emit Payout(this, maincontract, quota);}\n       }\n       reward = tokenReward.balanceOf(address(this))/((rounds+1)-playerPool.length);    \n       if (reward > 0) { tokenReward.transfer(msg.sender, reward); }\n    } \n  }\n}", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x880b60d40dc9748dd198ff1a539b763580c0382f.sol", "function": "fallback", "lineno": 8, "title": "State change after external call", "type": "Warning"}], "success": true}