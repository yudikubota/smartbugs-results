{"error": null, "issues": [{"address": 3537, "code": " false if never set up\n\n        if (current_ac", "debug": "block_number: 0x0\nstorage_6 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_WarOfTokens_4: 0x1\nstorage_6: 0x0\ncalldata_WarOfTokens_0: 0x1e5f914900000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getWinner(bytes32)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "getWinner(bytes32)", "lineno": 795, "title": "Integer Underflow", "type": "Warning"}, {"address": 3929, "code": "nction balanceOf(address token,", "debug": "", "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "withdraw(uint256)", "lineno": 594, "title": "Message call to external contract", "type": "Warning"}, {"address": 3940, "code": "\n    function balanceOf(address token, ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_WarOfTokens_4: 0x0\ncalldata_WarOfTokens_0: 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\nretval_3929: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "withdraw(uint256)", "lineno": 593, "title": "Exception state", "type": "Informational"}, {"address": 4590, "code": "ken(address token, uint amount) external {\n        require(", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "depositToken(address,uint256)", "lineno": 582, "title": "Message call to external contract", "type": "Warning"}, {"address": 4924, "code": " token!=0,\n            \"unrecognized token\"\n        );\n        tok", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "depositToken(address,uint256)", "lineno": 584, "title": "State change after external call", "type": "Warning"}, {"address": 6225, "code": "ap);\n        }\n\n        return aggregated_score;", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "isTokenSupported(address)", "lineno": 634, "title": "Message call to external contract", "type": "Informational"}, {"address": 13676, "code": ": a=3,b=2 returns 1\n ", "debug": "The exception is triggered under the following conditions:\n\nblock_number: 0x0\nstorage_6 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_WarOfTokens_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\nstorage_6: 0x0\ncalldata_WarOfTokens_0: 0x1e5f914900000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_WarOfTokens_4: 0x0\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_WarOfTokens_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "getWinner(bytes32)", "lineno": 906, "title": "Exception state", "type": "Informational"}, {"address": 13898, "code": "Adds two numbe", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_WarOfTokens_4: 0x1\ncalldata_WarOfTokens_0: 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "withdraw(uint256)", "lineno": 60, "title": "Exception state", "type": "Informational"}, {"address": 14259, "code": "       cntUserAttacks[attackInfo.att", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "withdraw(uint256)", "lineno": 819, "title": "State change after external call", "type": "Warning"}, {"address": 14271, "code": "lin-s", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_WarOfTokens_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nreturndatasize: 0x20\nretval_4590: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WarOfTokens_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_WarOfTokens_0: 0x338b5dea00000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `depositToken(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "depositToken(address,uint256)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 14284, "code": "/contracts/tok", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_WarOfTokens_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4590: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WarOfTokens_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_WarOfTokens_0: 0x338b5dea00000000000000000000000000000000000000000000000000000000\ncalldatasize_WarOfTokens: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xbbaefe34968c7bc4e4b69bb9439e590554bd9405.sol", "function": "depositToken(address,uint256)", "lineno": 69, "title": "Exception state", "type": "Informational"}], "success": true}