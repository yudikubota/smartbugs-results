{
  "contract": "0x88acc7101d390d33f26e6f4324b575ea8070aad1",
  "tool": "mythril",
  "start": 1563595699.6224422,
  "end": 1563595907.1798072,
  "duration": 207.5573649406433,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 416,
        "code": ";\n\n/**\n  Web: http",
        "debug": "callvalue: 0x4000000000000000\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x35b60\nblock_number: 0x64fe44\ncalldata_InfinytiProfit_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 737,
        "code": "Pay to first investor",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2057\nCall at address: 1749\n",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 41,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1521,
        "code": "     if(mo",
        "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x400000000000000\nstorage_0: 0x0\nstorage_1: 0x1\nretval_737: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x35b60\nblock_number: 0x64fe44\ncalldata_InfinytiProfit_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 60,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1749,
        "code": "            money -= dep.expect;  ",
        "debug": "",
        "description": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.number\n",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1749,
        "code": "            money -= dep.expect;  ",
        "debug": "SOLVER OUTPUT:\ncallvalue: 0x400000000000000\nstorage_0: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n2*storage_1: 0x0\nstorage_1: 0x0\nretval_737: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x35b60\nblock_number: 0x64fe44\ncalldata_InfinytiProfit_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\n",
        "description": "In the function `fallback` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 1749,
        "code": "            money -= dep.expect;  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2057\nCall at address: 1749\n",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1749,
        "code": "            money -= dep.expect;  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2057,
        "code": "             dep.expect -= mo",
        "debug": "",
        "description": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.number\n",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 69,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2057,
        "code": "             dep.expect -= mo",
        "debug": "SOLVER OUTPUT:\ncallvalue: 0x400000000000000\nstorage_0: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n2*storage_1: 0x100\nstorage_1: 0x0\nretval_737: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x35b60\nblock_number: 0x64fe44\ncalldata_InfinytiProfit_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\n",
        "description": "In the function `fallback` a non-zero amount of Ether is sent to an address taken from storage slot 0.\nThere is a check on storage index 0. This storage slot can be written to by calling the function `fallback`.\n\nThere is a check on storage index 0. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `fallback`.",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 69,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 2057,
        "code": "             dep.expect -= mo",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 69,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2118,
        "code": "    break;         ",
        "debug": "callvalue: 0x4b39090c4760000\nstorage_0: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x171009e8075971a95176c6641260efc2a\nretval_2057: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n2*storage_1: 0xcc4f202983680060e3909140914003c100\nstorage_1: 0x0\nretval_737: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x35b60\nblock_number: 0x64fe44\ncalldata_InfinytiProfit_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\n",
        "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "fallback",
        "lineno": 70,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2841,
        "code": "Get the co",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_InfinytiProfit_4: 0x0\nstorage_0: 0x0\ncalldata_InfinytiProfit_0: 0x9f9fb96800000000000000000000000000000000000000000000000000000000\ncalldatasize_InfinytiProfit: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x88acc7101d390d33f26e6f4324b575ea8070aad1.sol",
        "function": "getDeposit(uint256)",
        "lineno": 87,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}