{"error": null, "issues": [{"address": 198, "code": "ract bancorTradingContract, address[] _path, uint256 _amount, uint256 _minReturn) {\n        // ERC20 src = ERC20(0xB8c77482e45F1F44dE1745F52C74426C631bDD52);\n        src.approve(bancorTradingContract, _amount);\n        \n        uint256 destAmount = bancorTradingContract.quickConvert(_path, _amount, _minReturn);\n        \n        Trade(_amount, destAmount);\n    }\n    \n    function getBack() {\n        msg.", "debug": "calldata_TestBancorTrade_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TestBancorTrade_0: 0xfca761700000000000000000000000000000000000000000000000000000000\ncalldatasize_TestBancorTrade: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x0fca7617`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x0fca7617", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 567, "code": "ount);\n        \n        uint256 destAmount ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x0fca7617", "lineno": 39, "title": "Message call to external contract", "type": "Warning"}, {"address": 567, "code": "ount);\n        \n        uint256 destAmount ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 783\nCall at address: 783\nCall at address: 783\nCall at address: 783\nCall at address: 783\nCall at address: 783\nCall at address: 783\nCall at address: 783\n", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x0fca7617", "lineno": 39, "title": "Multiple Calls", "type": "Information"}, {"address": 708, "code": ", _amount, _minReturn);\n        \n        Trade(_amount, destAm", "debug": "calldata_TestBancorTrade_4 + calldata_TestBancorTrade_32 + 36: 0x800000000000000000000000000000000000000000000000000000000000000\nretval_567: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TestBancorTrade_0: 0xfca761700000000000000000000000000000000000000000000000000000000\ncalldatasize_TestBancorTrade: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x0fca7617`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x0fca7617", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 783, "code": ", _amount, _minReturn);\n        \n        Trade(_amount, destAm", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x0fca7617", "lineno": 41, "title": "Message call to external contract", "type": "Warning"}, {"address": 1099, "code": "n case of trade Token", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x1ea4a8d7", "lineno": 59, "title": "Message call to external contract", "type": "Warning"}, {"address": 1099, "code": "n case of trade Token", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1291\n", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x1ea4a8d7", "lineno": 59, "title": "Multiple Calls", "type": "Information"}, {"address": 1291, "code": "}\n    \n    // Receive ETH in case of trade Token ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "_function_0x1ea4a8d7", "lineno": 57, "title": "Message call to external contract", "type": "Warning"}, {"address": 1527, "code": "ckToken(ERC20 token", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "getBackBNB()", "lineno": 55, "title": "Message call to external contract", "type": "Informational"}, {"address": 1527, "code": "ckToken(ERC20 token", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1719\n", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "getBackBNB()", "lineno": 55, "title": "Multiple Calls", "type": "Information"}, {"address": 1719, "code": "}\n    \n    function getBackToken(ERC20 token)", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "getBackBNB()", "lineno": 53, "title": "Message call to external contract", "type": "Informational"}, {"address": 1814, "code": "    function getBackBNB() {\n     ", "debug": "SOLVER OUTPUT:\ncalldata_TestBancorTrade_0: 0x7eae162600000000000000000000000000000000000000000000000000000000\ncalldatasize_TestBancorTrade: 0x4\ncallvalue: 0x0\n", "description": "In the function `getBack()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/unique_contracts/0x19c52a70e63abce84268d2118c10aad76512f888.sol", "function": "getBack()", "lineno": 50, "title": "Ether send", "type": "Warning"}], "success": true}