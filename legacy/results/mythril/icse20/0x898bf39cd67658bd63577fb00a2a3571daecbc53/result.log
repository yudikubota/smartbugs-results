{"error": null, "issues": [{"address": 3485, "code": "y to be l", "debug": "", "description": "Function freezeTransfers() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "freezeTransfers()", "lineno": 169, "title": "Use of tx.origin", "type": "Warning"}, {"address": 4099, "code": ";\n       ", "debug": "", "description": "Function importAmountForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "importAmountForAddresses(uint256[],address[])", "lineno": 247, "title": "Use of tx.origin", "type": "Warning"}, {"address": 4202, "code": "resses(uin", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncalldata_tme_4 + calldata_tme_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "importAmountForAddresses(uint256[],address[])", "lineno": 256, "title": "Exception state", "type": "Informational"}, {"address": 4285, "code": "ess[] addressesToRemoveFrom) pub", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nmem_0_+_192_+_32*calldata_tme_4_+_calldata_tme_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tme_cpy: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `importAmountForAddresses(uint256[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "importAmountForAddresses(uint256[],address[])", "lineno": 256, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4301, "code": "gin==devAddress) { ", "debug": "storage_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tme_cpy: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0xc1838e900000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `importAmountForAddresses(uint256[],address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "importAmountForAddresses(uint256[],address[])", "lineno": 257, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4736, "code": "nt;\n\n    if (_to==ELIXA", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\ncalldata_tme_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_9: 0x0\ncalldata_tme_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "transferFrom(address,address,uint256)", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5131, "code": "om your account, multipl", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "transferFrom(address,address,uint256)", "lineno": 140, "title": "State change after external call", "type": "Warning"}, {"address": 5221, "code": "];\n      ", "debug": "", "description": "Function removeAmountForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "removeAmountForAddresses(uint256[],address[])", "lineno": 261, "title": "Use of tx.origin", "type": "Warning"}, {"address": 5324, "code": "ChildAddre", "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncalldata_tme_4 + calldata_tme_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "removeAmountForAddresses(uint256[],address[])", "lineno": 270, "title": "Exception state", "type": "Informational"}, {"address": 5407, "code": "oSet,uint256 rewardsAvail) public {\n ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nmem_0_+_192_+_32*calldata_tme_4_+_calldata_tme_4: 0x0\ncalldata_tme_cpy: 0x1\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeAmountForAddresses(uint256[],address[])`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "removeAmountForAddresses(uint256[],address[])", "lineno": 270, "title": "Integer Underflow", "type": "Warning"}, {"address": 5423, "code": "vAddress) { // Dev ", "debug": "storage_4: 0x0\ncalldata_tme_cpy: 0x1\ncalldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_tme_4 + calldata_tme_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_9: 0x0\norigin: 0x0\ncalldata_tme_0: 0x24889e3700000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeAmountForAddresses(uint256[],address[])`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "removeAmountForAddresses(uint256[],address[])", "lineno": 271, "title": "Integer Underflow", "type": "Warning"}, {"address": 5708, "code": "(address)  {\n    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).retur", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "returnIsParentAddress(address)", "lineno": 182, "title": "Message call to external contract", "type": "Informational"}, {"address": 5864, "code": " address ", "debug": "", "description": "Function setNumRewardsAvailableForAddresses(uint256[],address[]) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "setNumRewardsAvailableForAddresses(uint256[],address[])", "lineno": 153, "title": "Use of tx.origin", "type": "Warning"}, {"address": 9773, "code": "essCanProduce(addre", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_32_+_4: 0x10a429f0df3c5d904380008abaaabb80131200000002e2601804015ba0640082\ncalldata_tme_32 + 36: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_4: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a2020087f\nstorage_14: 0x0\ncalldata_tme_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tme_4: 0xb49de810bf8cdfa09c8007bfefffeeb03d3600040005e6283ffd294a20200880\nstorage_9: 0x0\ncalldata_tme_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tme: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "transferFrom(address,address,uint256)", "lineno": 204, "title": "Integer Underflow", "type": "Warning"}, {"address": 10048, "code": " {\n    return burnAmountAllowed[producingAddress];\n}\n\n// Locks up", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "transferFrom(address,address,uint256)", "lineno": 204, "title": "Message call to external contract", "type": "Informational"}, {"address": 10137, "code": "anges to balances\nfunction ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/2/0x898bf39cd67658bd63577fb00a2a3571daecbc53.sol", "function": "transferFrom(address,address,uint256)", "lineno": 208, "title": "State change after external call", "type": "Warning"}], "success": true}