{"error": null, "issues": [{"address": 1215, "code": "sg.sender, _spender, _value);\n\n        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n}", "debug": "calldata_WpccToken_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WpccToken_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_WpccToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x4b35e2cee60168b73ed8dea7e3d8e36091f6e86e.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 170, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4569, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/38/0x4b35e2cee60168b73ed8dea7e3d8e36091f6e86e.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 178, "title": "Message call to external contract", "type": "Warning"}, {"address": 4743, "code": "eturn a - b;\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WpccToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WpccToken_32_+_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WpccToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WpccToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WpccToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_WpccToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x4b35e2cee60168b73ed8dea7e3d8e36091f6e86e.sol", "function": "transferFrom(address,address,uint256)", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 4761, "code": "\n    ", "debug": "calldata_WpccToken_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WpccToken_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_WpccToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WpccToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_WpccToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x4b35e2cee60168b73ed8dea7e3d8e36091f6e86e.sol", "function": "transfer(address,uint256)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4774, "code": "c;\n  }\n\n  func", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WpccToken_32 + 4: 0x950dff78e666f73fd36ffedf5fe656f42f732f95edbafb7bf77fedeee4c653a9\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WpccToken_4: 0xf71ca024c4e4c48edb080090575702d73908a831c1b8c07b8480010000f10f3b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x950dff78e666f73fd36ffedf5fe656f42f732f95edbafb7bf77fedeee4c653a9\ncalldata_WpccToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WpccToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_WpccToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x4b35e2cee60168b73ed8dea7e3d8e36091f6e86e.sol", "function": "transfer(address,uint256)", "lineno": 29, "title": "Exception state", "type": "Informational"}], "success": true}