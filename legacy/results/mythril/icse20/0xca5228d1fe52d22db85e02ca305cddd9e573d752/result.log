{"error": null, "issues": [{"address": 1435, "code": "bol) external onlyCentralBanker returns (bool success) {\n    symbol = _newSymbol;\n    return true;\n  }\n}\n\n// Describe the storage mechanism o", "debug": "calldata_FastCashMoneyPlusTransfer_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FastCashMoneyPlusTransfer_0: 0x537f531200000000000000000000000000000000000000000000000000000000\ncalldatasize_FastCashMoneyPlusTransfer: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xca5228d1fe52d22db85e02ca305cddd9e573d752.sol", "function": "updateSymbol(string)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1441, "code": "bol) external onlyCentralBanker returns (bool success) {\n    symbol = _newSymbol;\n    return true;\n  }\n}\n\n// Describe the storage mechanism o", "debug": "calldata_FastCashMoneyPlusTransfer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_FastCashMoneyPlusTransfer_0: 0x537f531200000000000000000000000000000000000000000000000000000000\ncalldatasize_FastCashMoneyPlusTransfer: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xca5228d1fe52d22db85e02ca305cddd9e573d752.sol", "function": "updateSymbol(string)", "lineno": 37, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3714, "code": "ek;\n    if (_week ", "debug": "timestamp: 0x0\nstorage_10: 0x1\ncalldata_FastCashMoneyPlusTransfer_0: 0x3ca967f300000000000000000000000000000000000000000000000000000000\ncalldatasize_FastCashMoneyPlusTransfer: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `getCurrentExchangeRate()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/19/0xca5228d1fe52d22db85e02ca305cddd9e573d752.sol", "function": "getCurrentExchangeRate()", "lineno": 144, "title": "Integer Underflow", "type": "Warning"}, {"address": 3755, "code": "shMoneyPlusStorage() {\n    by", "debug": "The exception is triggered under the following conditions:\n\ncalldata_FastCashMoneyPlusTransfer_4: 0x0\nstorage_6: 0x0\ncalldata_FastCashMoneyPlusTransfer_0: 0x2263e8b700000000000000000000000000000000000000000000000000000000\ncalldatasize_FastCashMoneyPlusTransfer: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0xca5228d1fe52d22db85e02ca305cddd9e573d752.sol", "function": "_function_0x2263e8b7", "lineno": 52, "title": "Exception state", "type": "Informational"}, {"address": 7903, "code": " ) internal returns (bool success) {\n    require(_to != address(0));\n    require(_to != address(this));\n    require(_amount > 0);\n    require(balanceOf[_from] >= _amount);\n    require(balanceOf[_to] + _amount > balanceOf[_to]);\n\n    balanceOf[_from] -= _amount;\n    balanceOf[_to] += _amount;\n\n    Transfer(msg.sender, _to, _amount);\n\n    return true;\n  }\n\n  function transfer(address _to, uint _amount) external returns (bool success) {\n    return _transfer(msg.sender, _to, _amount);\n  }\n\n  function transferFrom(address _from, address _to, uint _amount) external returns (bool success) {\n    require(allowed[_from][msg.sender] >= _amount);\n\n    bool tranferSuccess = _transfer(_from, _to, _amount);\n    if (tranferSuccess) {\n      allowed[_from][msg.sender] -= _amount;\n    } else {\n      return false;\n    }\n  }\n\n  function transferToAccount(bytes32 _toRoutingCode, uint _amount) external returns (bool success) {\n    return _transfer(msg.sender, routingCodeMap[_toRoutingCode], _amount);\n  }\n\n  // need to play around with this to figure out some of the specifics\n  function transferRoutingCode(bytes32 _routingCode, address _to) external returns (bool success) {\n    address owner = routingCodeMap[_routingCode];\n    require(msg.sender == owner);\n\n    routingCodeMap[_routingCode] = _to;\n    return true;\n  }\n\n  function _transferFromBank(address _to, uint _amount) internal returns (bool success) {\n    require(_to != address(0));\n    require(_amount > 0);\n    require(fastCashBank >= _amount);\n    require(balanceOf[_to] + _amount > balanceOf[_to]);\n\n    fastCashBank -= _amount;\n    balanceOf[_to] += _amount;\n\n    Transfer(msg.sender, _to, _amount);\n\n    return true;\n  }\n  function transferFromBank(address _to, uint _amount) external onlyCentralBanker returns (bool success) {\n    return _transferFromBank(_to, _amount);\n  }\n\n  function transferFromBankToAccount(bytes32 _toRoutingCode, uint _amount) external onlyCentralBanker returns (bool success) {\n    return _transferFromBank(routingCodeMap[_toRoutingCode], _amount);\n  }\n}\n\ncontract FastCashMoneyPlus is FastCashMoneyPlusTransfer {\n\n}", "debug": "calldata_FastCashMoneyPlusTransfer_4 + calldata_FastCashMoneyPlusTransfer_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_FastCashMoneyPlusTransfer_0: 0x537f531200000000000000000000000000000000000000000000000000000000\ncalldatasize_FastCashMoneyPlusTransfer: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xca5228d1fe52d22db85e02ca305cddd9e573d752.sol", "function": "updateSymbol(string)", "lineno": 223, "title": "Integer Overflow ", "type": "Warning"}], "success": true}