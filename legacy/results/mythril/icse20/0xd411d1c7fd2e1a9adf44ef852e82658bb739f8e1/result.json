{
  "contract": "0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1",
  "tool": "mythril",
  "start": 1563636478.0923219,
  "end": 1563636576.302846,
  "duration": 98.21052408218384,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 477,
        "code": "{  \n\t\t\tcaltoken();\n\t\t",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_21: 0xfc00\ncalldatasize_Standix: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1.sol",
        "function": "fallback",
        "lineno": 131,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3255,
        "code": "r (uint256 Ethe",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_21: 0xfc00\nstorage_7: 0x0\ncaller: 0x0\ncalldata_Standix_0: 0x2c3d7f600000000000000000000000000000000000000000000000000000000\ncalldatasize_Standix: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1.sol",
        "function": "end_ICO()",
        "lineno": 114,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7630,
        "code": "sert(",
        "debug": "storage_21: 0x100\nstorage_18: 0x52314e170a3ebfb341428f8fdefe14a52051eb8f76bbabb2a61ef2196a3d70b\nstorage_7: 0x0\nstorage_10: 0x0\ntimestamp: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Standix: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1.sol",
        "function": "fallback",
        "lineno": 13,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7653,
        "code": " == b);\n\t\treturn c",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_21: 0x100\nstorage_18: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_7: 0x0\nstorage_10: 0x0\ntimestamp: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Standix: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1.sol",
        "function": "fallback",
        "lineno": 13,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8281,
        "code": " a - b;\n\t}\n\n\tf",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_21: 0x200\nstorage_6: 0x0\nstorage_12: 0x0\nstorage_35801204717903066250771070775406281119611486456094835541658309566371180816796: 0x1\ntimestamp: 0x1\nstorage_7: 0x0\ncaller: 0x0\ncalldata_Standix_0: 0x2c3d7f600000000000000000000000000000000000000000000000000000000\ncalldatasize_Standix: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0xd411d1c7fd2e1a9adf44ef852e82658bb739f8e1.sol",
        "function": "end_ICO()",
        "lineno": 26,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}