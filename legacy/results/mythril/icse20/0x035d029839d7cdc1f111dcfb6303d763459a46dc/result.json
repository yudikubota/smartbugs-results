{
  "contract": "0x035d029839d7cdc1f111dcfb6303d763459a46dc",
  "tool": "mythril",
  "start": 1563505978.1535122,
  "end": 1563506102.1890883,
  "duration": 124.0355761051178,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 563,
        "code": "56[]){\n        return activeEggs;\n    }\n\n    // Get the amount of purchased eggs of a struct",
        "debug": "storage_5: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_EggFactory_0: 0x1a9c457100000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `listEggsIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "listEggsIds()",
        "lineno": 158,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2372,
        "code": "purchased eggs of ",
        "debug": "storage_5: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_EggFactory_0: 0x1a9c457100000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `listEggsIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "listEggsIds()",
        "lineno": 162,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2374,
        "code": "purchased eggs of ",
        "debug": "storage_5: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_EggFactory_0: 0x1a9c457100000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `listEggsIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "listEggsIds()",
        "lineno": 162,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2979,
        "code": ";\n\n/// @title mana",
        "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_EggFactory_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setActiveStatusEgg(uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3018,
        "code": "] = active",
        "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_EggFactory_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `setActiveStatusEgg(uint256,bool)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 183,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3092,
        "code": "iveEggs.length-1];\n            ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncalldata_EggFactory_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 184,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3189,
        "code": "    return true;\n    }\n    \n    funct",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xffffffffffffffffffffffffffffffffe0000000000000000000000000000000\nstorage_keccac_calldata_EggFactory_4: 0xffffffffffffffffffffffffffffffffe0000000000000000000000000000000\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncalldata_EggFactory_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 188,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4304,
        "code": "   } \n    \n    function currentE",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function buyEgg(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "buyEgg(uint256,uint256)",
        "lineno": 230,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4611,
        "code": "ev: owner => ( eggId => egg",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EggFactory_4: 0x0\nstorage_6: 0x0\ncalldata_EggFactory_0: 0x68c95d7500000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "_function_0x68c95d75",
        "lineno": 139,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5212,
        "code": "ing of eggs owned by an addr",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EggFactory_4: 0x0\nstorage_5: 0x0\ncalldata_EggFactory_0: 0xa1fb5fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "_function_0xa1fb5fd2",
        "lineno": 138,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6417,
        "code": "6 amount);\n    event EggBought(address eggOwner, uint256 eggId, uint256 amount);\n    \n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setEggFactoryAddress() call.\n    bool public isEggFactory = true;\n\n    address public vaultAddress;\n\n    // @dev Scheme of egg\n    struct EggScheme{\n        uint256 id;\n        uint256 stock; // max available eggs. zero for unlimited\n        uint256 purchased; // purchased eggs\n        uint256 customGene; // custom gene for future beast\n        uint256 maxAllowedToBuy; // max amount allowed to buy on single transaction. zero for unnlimited\n        \n        uint256 increase; // price increase. zero for no increase\n        uint256 price; // base price of the egg\n        \n        bool active; // is the egg active to be bought\n        bool open; // is the egg active to be opened \n        bool isEggScheme;\n    }\n\n    // Mapping of existing eggs \n    // @dev: uint256 is the ID of the egg scheme\n    mapping (uint256 => EggScheme) public eggs;\n    uint256[] public eggsIndexes;\n    \n    uint256[] public activeEggs;\n    mapping (uint256 => uint256) indexesActiveEggs;\n\n    // Mapping of eggs owned by an address\n    // @dev: owner => ( eggId => eggsAmount )\n    mapping ( address => mapping ( uint256 => uint256 ) ) public eggsOwned;\n    \n\n    // Extend constructor\n    function EggFactory(address _vaultAddress) public {\n        vaultAddress = _vaultAddress;\n        ceoAddress = msg.sender;\n    }\n\n    // Verify existence of id to avoid collision\n    function eggExists( uint _eggId) internal view returns(bool) {\n        return eggs[_eggId].isEggScheme;\n    }\n\n    function listEggsIds() external view returns(uint256[]){\n        return eggsIndexes;\n    }\n    \n    function listActiveEggs() external view returns(uint256[]){\n        return activeEggs;\n    }\n\n    // Get the amount of purchased eggs of a struct\n    function getPurchased(uint256 _eggId) external view returns(uint256){\n        return eggs[_eggId].purchased;\n    }\n\n    // Set a new address for vault contract\n    function setVaultAddress(address _vaultAddress) public onlyCEO returns (bool) {\n        require( _vaultAddress != address(0x0) );\n        vaultAddress = _vaultAddress;\n    }\n    \n    function setActiveStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\n        require(eggExists(_eggId));\n        eggs[_eggId].active = state;\n\n        if(state) {\n            uint newIndex = activeEggs.push(_eggId);\n            indexesActiveEggs[_eggId] = uint256(newIndex-1);\n        }\n        else {\n            indexesActiveEggs[activeEggs[activeEggs.length-1]] = indexesActiveEggs[_eggId];\n            activeEggs[indexesActiveEggs[_eggId]] = activeEggs[activeEggs.length-1]; \n            delete activeEggs[activeEggs.length-1];\n            activeEggs.length--;\n        }\n        \n        return true;\n    }\n    \n    function setOpenStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\n        require(eggExists(_eggId));\n        eggs[_eggId].open = state;\n        return true;\n    }\n\n    // Add modifier of onlyCOO\n    function createEggScheme( uint256 _eggId, uint256 _stock, uint256 _maxAllowedToBuy, uint256 _customGene, uint256 _price, uint256 _increase, bool _active, bool _open ) public onlyCEO returns (bool){\n        require(!eggExists(_eggId));\n        \n        eggs[_eggId].isEggScheme = true;\n        \n        eggs[_eggId].id = _eggId;\n        eggs[_eggId].stock = _stock;\n        eggs[_eggId].maxAllowedToBuy = _maxAllowedToBuy;\n        eggs[_eggId].purchased = 0;\n        eggs[_eggId].customGene = _customGene;\n        eggs[_eggId].price = _price;\n        eggs[_eggId].increase = _increase;\n        \n        setActiveStatusEgg(_eggId,_active);\n        setOpenStatusEgg(_eggId,_open);\n        \n        eggsIndexes.push(_eggId);\n        return true;\n    }\n\n    function buyEgg(uint256 _eggId, uint256 _amount) public payable returns(bool){\n        require(eggs[_eggId].active == true);\n        require((currentEggPrice(_eggId)*_amount) == msg.value);\n        require(eggs[_eggId].maxAllowedToBuy == 0 || _amount<=eggs[_eggId].maxAllowedToBuy);\n        require(eggs[_eggId].stock == 0 || eggs[_eggId].purchased+_amount<=eggs[_eggId].stock); // until max\n        \n        vaultAddress.transfer(msg.value); // transfer the amount to vault\n        \n        eggs[_eggId].purchased += _amount;\n        eggsOwned[msg.sender][_eggId] += _amount;\n\n        emit EggBought(msg.sender, _eggId, _amount);\n    } \n    \n    function currentEggPrice( uint256 _eggId ) public view returns (uint256) {\n        return eggs[_eggId].price + (eggs[_eggId].purchased * eggs[_eggId].increase);\n    }\n    \n    function openEgg(uint256 _eggId, uint256 _amount) external {\n        require(eggs[_eggId].open == true);\n        require(eggsOwned[msg.sender][_eggId] >= _amount);\n        \n        eggsOwned[msg.sender][_eggId] -= _amount;\n        emit EggOpened(msg.sender, _eggId, _amount);\n    }\n}",
        "debug": "storage_6: 0x8825cfffffffffffffff80000000000000000000000000000000000000000000\nstorage_keccac_calldata_EggFactory_4: 0x8825cfffffffffffffff7fffffffffffffffffffffffffffffffffffffffffff\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncalldata_EggFactory_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setActiveStatusEgg(uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6419,
        "code": "6 amount);\n    event EggBought(address eggOwner, uint256 eggId, uint256 amount);\n    \n    // @dev Sanity check that allows us to ensure that we are pointing to the\n    //  right auction in our setEggFactoryAddress() call.\n    bool public isEggFactory = true;\n\n    address public vaultAddress;\n\n    // @dev Scheme of egg\n    struct EggScheme{\n        uint256 id;\n        uint256 stock; // max available eggs. zero for unlimited\n        uint256 purchased; // purchased eggs\n        uint256 customGene; // custom gene for future beast\n        uint256 maxAllowedToBuy; // max amount allowed to buy on single transaction. zero for unnlimited\n        \n        uint256 increase; // price increase. zero for no increase\n        uint256 price; // base price of the egg\n        \n        bool active; // is the egg active to be bought\n        bool open; // is the egg active to be opened \n        bool isEggScheme;\n    }\n\n    // Mapping of existing eggs \n    // @dev: uint256 is the ID of the egg scheme\n    mapping (uint256 => EggScheme) public eggs;\n    uint256[] public eggsIndexes;\n    \n    uint256[] public activeEggs;\n    mapping (uint256 => uint256) indexesActiveEggs;\n\n    // Mapping of eggs owned by an address\n    // @dev: owner => ( eggId => eggsAmount )\n    mapping ( address => mapping ( uint256 => uint256 ) ) public eggsOwned;\n    \n\n    // Extend constructor\n    function EggFactory(address _vaultAddress) public {\n        vaultAddress = _vaultAddress;\n        ceoAddress = msg.sender;\n    }\n\n    // Verify existence of id to avoid collision\n    function eggExists( uint _eggId) internal view returns(bool) {\n        return eggs[_eggId].isEggScheme;\n    }\n\n    function listEggsIds() external view returns(uint256[]){\n        return eggsIndexes;\n    }\n    \n    function listActiveEggs() external view returns(uint256[]){\n        return activeEggs;\n    }\n\n    // Get the amount of purchased eggs of a struct\n    function getPurchased(uint256 _eggId) external view returns(uint256){\n        return eggs[_eggId].purchased;\n    }\n\n    // Set a new address for vault contract\n    function setVaultAddress(address _vaultAddress) public onlyCEO returns (bool) {\n        require( _vaultAddress != address(0x0) );\n        vaultAddress = _vaultAddress;\n    }\n    \n    function setActiveStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\n        require(eggExists(_eggId));\n        eggs[_eggId].active = state;\n\n        if(state) {\n            uint newIndex = activeEggs.push(_eggId);\n            indexesActiveEggs[_eggId] = uint256(newIndex-1);\n        }\n        else {\n            indexesActiveEggs[activeEggs[activeEggs.length-1]] = indexesActiveEggs[_eggId];\n            activeEggs[indexesActiveEggs[_eggId]] = activeEggs[activeEggs.length-1]; \n            delete activeEggs[activeEggs.length-1];\n            activeEggs.length--;\n        }\n        \n        return true;\n    }\n    \n    function setOpenStatusEgg( uint256 _eggId, bool state ) public onlyCEO returns (bool){\n        require(eggExists(_eggId));\n        eggs[_eggId].open = state;\n        return true;\n    }\n\n    // Add modifier of onlyCOO\n    function createEggScheme( uint256 _eggId, uint256 _stock, uint256 _maxAllowedToBuy, uint256 _customGene, uint256 _price, uint256 _increase, bool _active, bool _open ) public onlyCEO returns (bool){\n        require(!eggExists(_eggId));\n        \n        eggs[_eggId].isEggScheme = true;\n        \n        eggs[_eggId].id = _eggId;\n        eggs[_eggId].stock = _stock;\n        eggs[_eggId].maxAllowedToBuy = _maxAllowedToBuy;\n        eggs[_eggId].purchased = 0;\n        eggs[_eggId].customGene = _customGene;\n        eggs[_eggId].price = _price;\n        eggs[_eggId].increase = _increase;\n        \n        setActiveStatusEgg(_eggId,_active);\n        setOpenStatusEgg(_eggId,_open);\n        \n        eggsIndexes.push(_eggId);\n        return true;\n    }\n\n    function buyEgg(uint256 _eggId, uint256 _amount) public payable returns(bool){\n        require(eggs[_eggId].active == true);\n        require((currentEggPrice(_eggId)*_amount) == msg.value);\n        require(eggs[_eggId].maxAllowedToBuy == 0 || _amount<=eggs[_eggId].maxAllowedToBuy);\n        require(eggs[_eggId].stock == 0 || eggs[_eggId].purchased+_amount<=eggs[_eggId].stock); // until max\n        \n        vaultAddress.transfer(msg.value); // transfer the amount to vault\n        \n        eggs[_eggId].purchased += _amount;\n        eggsOwned[msg.sender][_eggId] += _amount;\n\n        emit EggBought(msg.sender, _eggId, _amount);\n    } \n    \n    function currentEggPrice( uint256 _eggId ) public view returns (uint256) {\n        return eggs[_eggId].price + (eggs[_eggId].purchased * eggs[_eggId].increase);\n    }\n    \n    function openEgg(uint256 _eggId, uint256 _amount) external {\n        require(eggs[_eggId].open == true);\n        require(eggsOwned[msg.sender][_eggId] >= _amount);\n        \n        eggsOwned[msg.sender][_eggId] -= _amount;\n        emit EggOpened(msg.sender, _eggId, _amount);\n    }\n}",
        "debug": "storage_6: 0xd08000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_calldata_EggFactory_4: 0xd07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7 + keccac_calldata_EggFactory_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_EggFactory_0: 0x2a3966ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_EggFactory: 0x4\ncalldata_EggFactory_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setActiveStatusEgg(uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x035d029839d7cdc1f111dcfb6303d763459a46dc.sol",
        "function": "setActiveStatusEgg(uint256,bool)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}