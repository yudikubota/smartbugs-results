{"error": null, "issues": [{"address": 1058, "code": " require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n        stdBalance = _stdBalance;\n        totalSupply = _totalSupply;\n        FOMOed = _FOMOed;\n    }\n\n\n    /**\n     * Everyone has tokens!\n     * ... until we decide you don't.\n     */\n    function balanceOf(address _owner)\n        public\n ", "debug": "calldata_FOMO_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FOMO_0: 0x6e3de78a00000000000000000000000000000000000000000000000000000000\ncalldatasize_FOMO: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UNFOMO(string,string,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "UNFOMO(string,string,uint256,uint256,bool)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2198, "code": " true;\n    }\n    \n    /*", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffff0ffffe3c0c0000\ncalldata_FOMO_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_FOMO: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "transferFrom(address,address,uint256)", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2702, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "rescueTokens(address,uint256)", "lineno": 195, "title": "Message call to external contract", "type": "Warning"}, {"address": 3419, "code": "\n        return true;\n  ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffff0ffffe3c0c0000\ncalldata_FOMO_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_FOMO: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "transfer(address,uint256)", "lineno": 109, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3823, "code": "ng public name = \"Fomo www.fomocoin.org\";\n    uint8 public decimals = 18;                \n    string public symbol = \"Fomo www.fomocoin.org\";\n    \n    // Default balance\n    uint256 public stdBalance;\n    mapping (address => uint256) public bonus;\n    \n    // Owner\n    address public owner;\n    bool public FOMOed;\n    \n    // PSA\n    event Message(string message);\n    \n\n    function FOMO()\n        public\n    {\n        owner = msg.sender;\n        totalSupply = 1337 * 1e18;\n        stdBalance = 232 * 1e18;\n        FOMOed = true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transfer(address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Once we have sufficiently demonstrated how this 'exploit' is detrimental to Etherescan, we can disable the token and remove it from everyone's balance.\n     * Our intention for this \"token\" is to prevent a similar but more harmful project in the future that doesn't have your best intentions in mind.\n     */\n    function UNFOMO(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _FOMOed)\n        public\n    {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n        stdBalance = _stdBalance;\n        totalSupply = _totalSupply;\n        FOMOed = _FOMOed;\n    }\n\n\n    /**\n     * Everyone has tokens!\n     * ... until we decide you don't.\n     */\n    function balanceOf(address _owner)\n        public\n        view \n        returns (uint256 balance)\n    {\n        if(FOMOed){\n            if(bonus[_owner] > 0){\n                return stdBalance + bonus[_owner];\n            } else {\n                return stdBalance;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool success) \n    {\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256 remaining)\n    {\n        return 0;\n    }\n    \n    // in case someone accidentally sends ETH to this contract.\n    function()\n        public\n        payable\n    {\n        owner.transfer(this.balance);\n        Message(\"Thanks for your donation.\");\n    }\n    \n    // in case some accidentally sends other tokens to this contract.\n    function rescueTokens(address _address, uint256 _amount)\n        public\n        returns (bool)\n    {\n        return ERC20Interface(_address).transfer(owner, _amount);\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_FOMO_4 + calldata_FOMO_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x5fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\ncalldata_FOMO_4 + calldata_FOMO_4: 0x0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FOMO_0: 0x6e3de78a00000000000000000000000000000000000000000000000000000000\ncalldatasize_FOMO: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UNFOMO(string,string,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "UNFOMO(string,string,uint256,uint256,bool)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3837, "code": "ng public name = \"Fomo www.fomocoin.org\";\n    uint8 public decimals = 18;                \n    string public symbol = \"Fomo www.fomocoin.org\";\n    \n    // Default balance\n    uint256 public stdBalance;\n    mapping (address => uint256) public bonus;\n    \n    // Owner\n    address public owner;\n    bool public FOMOed;\n    \n    // PSA\n    event Message(string message);\n    \n\n    function FOMO()\n        public\n    {\n        owner = msg.sender;\n        totalSupply = 1337 * 1e18;\n        stdBalance = 232 * 1e18;\n        FOMOed = true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transfer(address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Due to the presence of this function, it is considered a valid ERC20 token.\n     * However, due to a lack of actual functionality to support this function, you can never remove this token from your balance.\n     * RIP.\n     */\n   function transferFrom(address _from, address _to, uint256 _value)\n        public\n        returns (bool success)\n    {\n        bonus[msg.sender] = bonus[msg.sender] + 1e18;\n        Message(\"+1 token for you.\");\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    /**\n     * Once we have sufficiently demonstrated how this 'exploit' is detrimental to Etherescan, we can disable the token and remove it from everyone's balance.\n     * Our intention for this \"token\" is to prevent a similar but more harmful project in the future that doesn't have your best intentions in mind.\n     */\n    function UNFOMO(string _name, string _symbol, uint256 _stdBalance, uint256 _totalSupply, bool _FOMOed)\n        public\n    {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n        stdBalance = _stdBalance;\n        totalSupply = _totalSupply;\n        FOMOed = _FOMOed;\n    }\n\n\n    /**\n     * Everyone has tokens!\n     * ... until we decide you don't.\n     */\n    function balanceOf(address _owner)\n        public\n        view \n        returns (uint256 balance)\n    {\n        if(FOMOed){\n            if(bonus[_owner] > 0){\n                return stdBalance + bonus[_owner];\n            } else {\n                return stdBalance;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool success) \n    {\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256 remaining)\n    {\n        return 0;\n    }\n    \n    // in case someone accidentally sends ETH to this contract.\n    function()\n        public\n        payable\n    {\n        owner.transfer(this.balance);\n        Message(\"Thanks for your donation.\");\n    }\n    \n    // in case some accidentally sends other tokens to this contract.\n    function rescueTokens(address _address, uint256 _amount)\n        public\n        returns (bool)\n    {\n        return ERC20Interface(_address).transfer(owner, _amount);\n    }\n}", "debug": "calldata_FOMO_4 + calldata_FOMO_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FOMO_0: 0x6e3de78a00000000000000000000000000000000000000000000000000000000\ncalldatasize_FOMO: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UNFOMO(string,string,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xd3fa5231c03de9f30c610c16b5576396fdaf6b19.sol", "function": "UNFOMO(string,string,uint256,uint256,bool)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}], "success": true}