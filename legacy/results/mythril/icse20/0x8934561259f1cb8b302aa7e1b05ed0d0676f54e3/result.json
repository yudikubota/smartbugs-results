{
  "contract": "0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3",
  "tool": "mythril",
  "start": 1563585742.8218024,
  "end": 1563585797.0019295,
  "duration": 54.18012714385986,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 379,
        "code": "or(uint256 idx = 0; idx < timeArr.length; idx = idx+2) {\n            require(timeArr[idx] < timeArr[idx+1], \"end time must be greater than start time\");\n        }\n        _tradingOpenTime = timeArr;\n    }\n    \n    // quit\n    function inQuitLock(address account) public view returns (bool) {\n        return _quitLock[account];\n    }\n    \n    function setQuitLock(address account) pu",
        "debug": "calldata_TokenLogic_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenLogic_0: 0x63e1b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTradingTime(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "setTradingTime(uint256[])",
        "lineno": 175,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4008,
        "code": " \"sender is not in whiteList\");\n        re",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "approve(address,uint256,address)",
        "lineno": 236,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4008,
        "code": " \"sender is not in whiteList\");\n        re",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function approve(address,uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "approve(address,uint256,address)",
        "lineno": 236,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4179,
        "code": " owner, address spender) ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "totalSupply()",
        "lineno": 208,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4179,
        "code": " owner, address spender) ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function totalSupply(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "totalSupply()",
        "lineno": 208,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5308,
        "code": "addedValue, address owner) external ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "transferFrom(address,address,uint256,address)",
        "lineno": 249,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5308,
        "code": "addedValue, address owner) external ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transferFrom(address,address,uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "transferFrom(address,address,uint256,address)",
        "lineno": 249,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6054,
        "code": "ns (uint256[]) {\n      ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x1\nstorage_111414077815863400510004064629973595961579173665589224203503662149373724986687: 0x0\ntimestamp: 0x1\ncalldata_TokenLogic_0: 0x659a748600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "inTradingTime()",
        "lineno": 168,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6383,
        "code": "ction transfer(address from, a",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "balanceOf(address)",
        "lineno": 212,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6383,
        "code": "ction transfer(address from, a",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function balanceOf(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "balanceOf(address)",
        "lineno": 212,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7528,
        "code": "valueArr) public onlyOwner {\n        ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "decreaseAllowance(address,uint256,address)",
        "lineno": 264,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7528,
        "code": "valueArr) public onlyOwner {\n        ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function decreaseAllowance(address,uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "decreaseAllowance(address,uint256,address)",
        "lineno": 264,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 15796,
        "code": "nStore private _tokenStore;\n    address private _tokenFront;\n    \n    constructor(ITokenStore tokenStore, address tokenFront) public {\n        _tokenStore = tokenStore;\n        _tokenFront = tokenFront;\n        _whiteList[msg.sender] = true;\n    }\n    \n    // getters and setters for tokenStore and tokenFront\n    function tokenStore() public view returns (address) {\n        return _tokenStore;\n    }\n    \n    function setTokenStore(ITokenStore newTokenStore) public onlyOwner {\n        _tokenStore = newTokenStore;\n    }\n    \n    function tokenFront() public view returns (address) {\n        return _tokenFront;\n    }\n    \n    function setTokenFront(address newTokenFront) public onlyOwner {\n        _tokenFront = newTokenFront;\n    }\n    \n    modifier onlyFront() {\n        require(msg.sender == _tokenFront, \"this method MUST be called by tokenFront\");\n        _;\n    }\n    \n    modifier onlyFrontOrOwner() {\n        require((msg.sender == _tokenFront) || isOwner(), \"this method MUST be called by tokenFront or owner\");\n        _;\n    }\n    \n    mapping(address => bool) private _whiteList;\n    mapping(address => bool) private _quitLock;\n    mapping(bytes32 => bool) private _batchRecord;\n    uint256[] private _tradingOpenTime;\n\n    // transfer ownership and balance\n    function transferOwnership(address newOwner) public onlyOwner {\n        _whiteList[newOwner] = true;\n        _tokenStore.transfer(msg.sender, newOwner, _tokenStore.balanceOf(msg.sender));\n        _whiteList[msg.sender] = false;\n        super.transferOwnership(newOwner);\n    }\n    \n    // whitelist\n    function inWhiteList(address account) public view returns (bool) {\n        return _whiteList[account];\n    }\n    \n    function setWhiteList(address[] addressArr, bool[] statusArr) public onlyOwner {\n        require(addressArr.length == statusArr.length, \"The length of address array is not equal to the length of status array!\");\n        \n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n            _whiteList[addressArr[idx]] = statusArr[idx];\n        }\n    }\n    \n    // trading time\n    function inTradingTime() public view returns (bool) {\n        for(uint256 idx = 0; idx < _tradingOpenTime.length; idx = idx+2) {\n            if(now > _tradingOpenTime[idx] && now < _tradingOpenTime[idx+1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    function getTradingTime() public view returns (uint256[]) {\n        return _tradingOpenTime;\n    }\n    \n    function setTradingTime(uint256[] timeArr) public onlyOwner {\n        require(timeArr.length.mod(2) == 0, \"the length of time arr must be even number\");\n        \n        for(uint256 idx = 0; idx < timeArr.length; idx = idx+2) {\n            require(timeArr[idx] < timeArr[idx+1], \"end time must be greater than start time\");\n        }\n        _tradingOpenTime = timeArr;\n    }\n    \n    // quit\n    function inQuitLock(address account) public view returns (bool) {\n        return _quitLock[account];\n    }\n    \n    function setQuitLock(address account) public onlyOwner {\n        require(inWhiteList(account), \"account is not in whiteList\");\n        _quitLock[account] = true;\n    }\n    \n    function removeQuitAccount(address account) public onlyOwner {\n        require(inQuitLock(account), \"the account is not in quit lock status\");\n        \n        _tokenStore.transfer(account, msg.sender, _tokenStore.balanceOf(account));\n        _whiteList[account] = false;\n        _quitLock[account] = false;\n    }\n    \n    // implement for ITokenLogic\n    function totalSupply() external view returns (uint256) {\n        return _tokenStore.totalSupply();\n    }\n    \n    function balanceOf(address account) external view returns (uint256) {\n        return _tokenStore.balanceOf(account);\n    }\n    \n    function allowance(address owner, address spender) external view returns (uint256) {\n        return _tokenStore.allowance(owner, spender);\n    }\n    \n    function transfer(address from, address to, uint256 value) external onlyFront returns (bool) {\n        require(inWhiteList(from), \"sender is not in whiteList\");\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        \n        if(!inQuitLock(from) && from != owner()) {\n            require(inTradingTime(), \"now is not trading time\");\n        }\n        \n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function forceTransferBalance(address from, address to, uint256 value) external onlyOwner returns (bool) {\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function approve(address spender, uint256 value, address owner) external onlyFront returns (bool) {\n        _tokenStore.approve(owner, spender, value);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 value, address spender) external onlyFront returns (bool) {\n        require(inWhiteList(from), \"sender is not in whiteList\");\n        require(inWhiteList(to), \"receiver is not in whiteList\");\n        \n        if(!inQuitLock(from)) {\n            require(inTradingTime(), \"now is not trading time\");\n        }\n        \n        uint256 newAllowance = _tokenStore.allowance(from, spender).sub(value);\n        _tokenStore.approve(from, spender, newAllowance);\n        _tokenStore.transfer(from, to, value);\n        return true;\n    }\n    \n    function increaseAllowance(address spender, uint256 addedValue, address owner) external onlyFront returns (bool) {\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).add(addedValue);\n        _tokenStore.approve(owner, spender, newAllowance);\n        \n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue, address owner) external onlyFront returns (bool) {\n        uint256 newAllowance = _tokenStore.allowance(owner, spender).sub(subtractedValue);\n        _tokenStore.approve(owner, spender, newAllowance);\n        \n        return true;\n    }\n    \n    // batch transfer\n    function batchTransfer(bytes32 batch, address[] addressArr, uint256[] valueArr) public onlyOwner {\n        require(addressArr.length == valueArr.length, \"The length of address array is not equal to the length of value array!\");\n        require(_batchRecord[batch] == false, \"This batch number has already been used!\");\n        \n        for(uint256 idx = 0; idx < addressArr.length; idx++) {\n            require(inWhiteList(addressArr[idx]), \"receiver is not in whiteList\");\n            \n            _tokenStore.transfer(msg.sender, addressArr[idx], valueArr[idx]);\n        }\n        \n        _batchRecord[batch] = true;\n    }\n    \n    // replace account\n    function replaceAccount(address oldAccount, address newAccount) public onlyOwner {\n        require(inWhiteList(oldAccount), \"old account is not in whiteList\");\n        _whiteList[newAccount] = true;\n        _tokenStore.transfer(oldAccount, newAccount, _tokenStore.balanceOf(oldAccount));\n        _whiteList[oldAccount] = false;\n    }\n}\n\n/*\n    TokenFront\n*/\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address who) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function transfer(ad",
        "debug": "storage_6: 0x87068de0fc877c1b563848fc8b7649f0e1a060003ef1613ffe1f70e000740244\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenLogic_0: 0x63e1b7800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncalldata_TokenLogic_4 + calldata_TokenLogic_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTradingTime(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0x8934561259f1cb8b302aa7e1b05ed0d0676f54e3.sol",
        "function": "setTradingTime(uint256[])",
        "lineno": 96,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}