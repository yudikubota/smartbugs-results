{"error": null, "issues": [{"address": 2693, "code": "eId;\n\n  //players info", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WTAGameBook_4: 0x0\nstorage_5: 0x0\ncalldata_WTAGameBook_0: 0x117a5b9000000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "_function_0x117a5b90", "lineno": 67, "title": "Exception state", "type": "Informational"}, {"address": 3018, "code": "c adminId;\n\n  // games ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WTAGameBook_4: 0x0\nstorage_3: 0x0\ncalldata_WTAGameBook_0: 0x14bfd6d000000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "_function_0x14bfd6d0", "lineno": 63, "title": "Exception state", "type": "Informational"}, {"address": 3741, "code": "h--;\n    emit A", "debug": "storage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WTAGameBook_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeAdmin(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "removeAdmin(address)", "lineno": 152, "title": "Integer Underflow", "type": "Warning"}, {"address": 3765, "code": "sender);\n  ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WTAGameBook_4: 0xfffdcf3bfd0201fafdefdfbeffffffffffffffffffffffffffffffffffffffff\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WTAGameBook_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "removeAdmin(address)", "lineno": 153, "title": "Exception state", "type": "Informational"}, {"address": 4056, "code": "ame(address _game) only", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WTAGameBook_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "removeAdmin(address)", "lineno": 157, "title": "Exception state", "type": "Informational"}, {"address": 11308, "code": "uint256;\n\n  string public name = \"WTAGameBook V0.5\";\n  string public version = \"0.5\";\n\n  // admins info\n  address[] public admins;\n  mapping (address => uint256) public adminId;\n\n  // games info\n  address[] public games;\n  mapping (address => uint256) public gameId;\n\n  //players info\n  struct PlayerInfo {\n    uint256 pid;\n    address paddr;\n    uint256 referrer;\n  }\n\n  uint256 public playerNum = 0;\n  mapping (uint256 => PlayerInfo) public player;\n  mapping (address => uint256) public playerId;\n\n  event AdminAdded(address indexed _addr, uint256 _id, address indexed _adder);\n  event AdminRemoved(address indexed _addr, uint256 _id, address indexed _remover);\n  event GameAdded(address indexed _addr, uint256 _id, address indexed _adder);\n  event GameRemoved(address indexed _addr, uint256 _id, address indexed _remover);\n  event PlayerAdded(uint256 _pid, address indexed _paddr, uint256 _ref, address indexed _adder);\n\n  event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount);\n  event WrongEtherEmptied(address indexed _addr, uint256 _amount);\n\n  // check the address is human or contract\n  function isHuman(address _addr) public view returns (bool) {\n    uint256 _codeLength;\n    assembly {_codeLength := extcodesize(_addr)}\n    return (_codeLength == 0);\n  }\n\n  // address not zero\n  modifier validAddress(address _addr) {\n\t\trequire(_addr != 0x0, \"validAddress wrong\");\n\t\t_;\n\t}\n\n  modifier onlyAdmin() {\n    require(adminId[msg.sender] != 0, \"onlyAdmin wrong\");\n    _;\n  }\n\n  modifier onlyAdminOrGame() {\n    require((adminId[msg.sender] != 0) || (gameId[msg.sender] != 0), \"onlyAdminOrGame wrong\");\n    _;\n  }\n\n  // create new GameBook contract, no need arguments\n  constructor() public {\n    // initialization\n    // empty admin with id 0\n    adminId[address(0x0)] = 0;\n    admins.length++;\n    admins[0] = address(0x0);\n\n    // empty game with id 0\n    gameId[address(0x0)] = 0;\n    games.length++;\n    games[0] = address(0x0);\n\n    // first admin is owner\n    addAdmin(owner);\n  }\n\n  // owner may add or remove admins\n  function addAdmin(address _admin) onlyOwner validAddress(_admin) public {\n    require(isHuman(_admin), \"addAdmin human only\");\n\n    uint256 id = adminId[_admin];\n    if (id == 0) {\n      adminId[_admin] = admins.length;\n      id = admins.length++;\n    }\n    admins[id] = _admin;\n    emit AdminAdded(_admin, id, msg.sender);\n  }\n\n  function removeAdmin(address _admin) onlyOwner validAddress(_admin) public {\n    require(adminId[_admin] != 0, \"removeAdmin wrong\");\n\n    uint256 aid = adminId[_admin];\n    adminId[_admin] = 0;\n    for (uint256 i = aid; i<admins.length-1; i++){\n        admins[i] = admins[i+1];\n        adminId[admins[i]] = i;\n    }\n    delete admins[admins.length-1];\n    admins.length--;\n    emit AdminRemoved(_admin, aid, msg.sender);\n  }\n\n  // admins may add or remove games\n  function addGame(address _game) onlyAdmin validAddress(_game) public {\n    require(!isHuman(_game), \"addGame inhuman only\");\n\n    uint256 id = gameId[_game];\n    if (id == 0) {\n      gameId[_game] = games.length;\n      id = games.length++;\n    }\n    games[id] = _game;\n    emit GameAdded(_game, id, msg.sender);\n  }\n\n  function removeGame(address _game) onlyAdmin validAddress(_game) public {\n    require(gameId[_game] != 0, \"removeGame wrong\");\n\n    uint256 gid = gameId[_game];\n    gameId[_game] = 0;\n    for (uint256 i = gid; i<games.length-1; i++){\n        games[i] = games[i+1];\n        gameId[games[i]] = i;\n    }\n    delete games[games.length-1];\n    games.length--;\n    emit GameRemoved(_game, gid, msg.sender);\n  }\n\n  // admins and games may add players, and players cannot be removed\n  function addPlayer(address _addr, uint256 _ref) onlyAdminOrGame validAddress(_addr) public returns (uint256) {\n    require(isHuman(_addr), \"addPlayer human only\");\n    require((_ref < playerNum.add(1)) && (playerId[_addr] == 0), \"addPlayer parameter wrong\");\n    playerId[_addr] = playerNum.add(1);\n    player[playerNum.add(1)] = PlayerInfo({pid: playerNum.add(1), paddr: _addr, referrer: _ref});\n    playerNum++;\n    emit PlayerAdded(playerNum, _addr, _ref, msg.sender);\n    return playerNum;\n  }\n\n  // interface methods\n  function getPlayerIdByAddress(address _addr) validAddress(_addr) public view returns (uint256) {\n    return playerId[_addr];\n  }\n\n  function getPlayerAddressById(uint256 _id) public view returns (address) {\n    require(_id <= playerNum && _id > 0, \"getPlayerAddressById wrong\");\n    return player[_id].paddr;\n  }\n\n  function getPlayerRefById(uint256 _id) public view returns (uint256) {\n    require(_id <= playerNum && _id > 0, \"getPlayerRefById wrong\");\n    return player[_id].referrer;\n  }\n\n  function getGameIdByAddress(address _addr) validAddress(_addr) public view returns (uint256) {\n    return gameId[_addr];\n  }\n\n  function getGameAddressById(uint256 _id) public view returns (address) {\n    require(_id < games.length && _id > 0, \"getGameAddressById wrong\");\n    return games[_id];\n  }\n\n  function isAdmin(address _addr) validAddress(_addr) public view returns (bool) {\n    return (adminId[_addr] > 0);\n  }\n\n  // Safety measures\n  function () public payable {\n    revert();\n  }\n\n  function emptyWrongToken(address _addr) onlyAdmin public {\n    ERC20Token wrongToken = ERC20Token(_addr);\n    uint256 amount = wrongToken.balanceOf(address(this));\n    require(amount > 0, \"emptyToken need more balance\");\n    require(wrongToken.transfer(msg.sender, amount), \"empty Token transfer wrong\");\n\n    emit WrongTokenEmptied(_addr, msg.sender, amount);\n  }\n\n  // shouldn't happen, just in case\n  function emptyWrongEther() onlyAdmin public {\n    uint256 amount = address(this).balance;\n    require(amount > 0, \"emptyEther need more balance\");\n    msg.sender.transfer(amount);\n\n    emit WrongEtherEmptied(msg.sender, amount);\n  }\n\n}", "debug": "storage_3: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WTAGameBook_4: 0xffffffffc000000000000000000000003fffffffffffffffffffffffffffffff\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WTAGameBook_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeAdmin(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "removeAdmin(address)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11310, "code": "uint256;\n\n  string public name = \"WTAGameBook V0.5\";\n  string public version = \"0.5\";\n\n  // admins info\n  address[] public admins;\n  mapping (address => uint256) public adminId;\n\n  // games info\n  address[] public games;\n  mapping (address => uint256) public gameId;\n\n  //players info\n  struct PlayerInfo {\n    uint256 pid;\n    address paddr;\n    uint256 referrer;\n  }\n\n  uint256 public playerNum = 0;\n  mapping (uint256 => PlayerInfo) public player;\n  mapping (address => uint256) public playerId;\n\n  event AdminAdded(address indexed _addr, uint256 _id, address indexed _adder);\n  event AdminRemoved(address indexed _addr, uint256 _id, address indexed _remover);\n  event GameAdded(address indexed _addr, uint256 _id, address indexed _adder);\n  event GameRemoved(address indexed _addr, uint256 _id, address indexed _remover);\n  event PlayerAdded(uint256 _pid, address indexed _paddr, uint256 _ref, address indexed _adder);\n\n  event WrongTokenEmptied(address indexed _token, address indexed _addr, uint256 _amount);\n  event WrongEtherEmptied(address indexed _addr, uint256 _amount);\n\n  // check the address is human or contract\n  function isHuman(address _addr) public view returns (bool) {\n    uint256 _codeLength;\n    assembly {_codeLength := extcodesize(_addr)}\n    return (_codeLength == 0);\n  }\n\n  // address not zero\n  modifier validAddress(address _addr) {\n\t\trequire(_addr != 0x0, \"validAddress wrong\");\n\t\t_;\n\t}\n\n  modifier onlyAdmin() {\n    require(adminId[msg.sender] != 0, \"onlyAdmin wrong\");\n    _;\n  }\n\n  modifier onlyAdminOrGame() {\n    require((adminId[msg.sender] != 0) || (gameId[msg.sender] != 0), \"onlyAdminOrGame wrong\");\n    _;\n  }\n\n  // create new GameBook contract, no need arguments\n  constructor() public {\n    // initialization\n    // empty admin with id 0\n    adminId[address(0x0)] = 0;\n    admins.length++;\n    admins[0] = address(0x0);\n\n    // empty game with id 0\n    gameId[address(0x0)] = 0;\n    games.length++;\n    games[0] = address(0x0);\n\n    // first admin is owner\n    addAdmin(owner);\n  }\n\n  // owner may add or remove admins\n  function addAdmin(address _admin) onlyOwner validAddress(_admin) public {\n    require(isHuman(_admin), \"addAdmin human only\");\n\n    uint256 id = adminId[_admin];\n    if (id == 0) {\n      adminId[_admin] = admins.length;\n      id = admins.length++;\n    }\n    admins[id] = _admin;\n    emit AdminAdded(_admin, id, msg.sender);\n  }\n\n  function removeAdmin(address _admin) onlyOwner validAddress(_admin) public {\n    require(adminId[_admin] != 0, \"removeAdmin wrong\");\n\n    uint256 aid = adminId[_admin];\n    adminId[_admin] = 0;\n    for (uint256 i = aid; i<admins.length-1; i++){\n        admins[i] = admins[i+1];\n        adminId[admins[i]] = i;\n    }\n    delete admins[admins.length-1];\n    admins.length--;\n    emit AdminRemoved(_admin, aid, msg.sender);\n  }\n\n  // admins may add or remove games\n  function addGame(address _game) onlyAdmin validAddress(_game) public {\n    require(!isHuman(_game), \"addGame inhuman only\");\n\n    uint256 id = gameId[_game];\n    if (id == 0) {\n      gameId[_game] = games.length;\n      id = games.length++;\n    }\n    games[id] = _game;\n    emit GameAdded(_game, id, msg.sender);\n  }\n\n  function removeGame(address _game) onlyAdmin validAddress(_game) public {\n    require(gameId[_game] != 0, \"removeGame wrong\");\n\n    uint256 gid = gameId[_game];\n    gameId[_game] = 0;\n    for (uint256 i = gid; i<games.length-1; i++){\n        games[i] = games[i+1];\n        gameId[games[i]] = i;\n    }\n    delete games[games.length-1];\n    games.length--;\n    emit GameRemoved(_game, gid, msg.sender);\n  }\n\n  // admins and games may add players, and players cannot be removed\n  function addPlayer(address _addr, uint256 _ref) onlyAdminOrGame validAddress(_addr) public returns (uint256) {\n    require(isHuman(_addr), \"addPlayer human only\");\n    require((_ref < playerNum.add(1)) && (playerId[_addr] == 0), \"addPlayer parameter wrong\");\n    playerId[_addr] = playerNum.add(1);\n    player[playerNum.add(1)] = PlayerInfo({pid: playerNum.add(1), paddr: _addr, referrer: _ref});\n    playerNum++;\n    emit PlayerAdded(playerNum, _addr, _ref, msg.sender);\n    return playerNum;\n  }\n\n  // interface methods\n  function getPlayerIdByAddress(address _addr) validAddress(_addr) public view returns (uint256) {\n    return playerId[_addr];\n  }\n\n  function getPlayerAddressById(uint256 _id) public view returns (address) {\n    require(_id <= playerNum && _id > 0, \"getPlayerAddressById wrong\");\n    return player[_id].paddr;\n  }\n\n  function getPlayerRefById(uint256 _id) public view returns (uint256) {\n    require(_id <= playerNum && _id > 0, \"getPlayerRefById wrong\");\n    return player[_id].referrer;\n  }\n\n  function getGameIdByAddress(address _addr) validAddress(_addr) public view returns (uint256) {\n    return gameId[_addr];\n  }\n\n  function getGameAddressById(uint256 _id) public view returns (address) {\n    require(_id < games.length && _id > 0, \"getGameAddressById wrong\");\n    return games[_id];\n  }\n\n  function isAdmin(address _addr) validAddress(_addr) public view returns (bool) {\n    return (adminId[_addr] > 0);\n  }\n\n  // Safety measures\n  function () public payable {\n    revert();\n  }\n\n  function emptyWrongToken(address _addr) onlyAdmin public {\n    ERC20Token wrongToken = ERC20Token(_addr);\n    uint256 amount = wrongToken.balanceOf(address(this));\n    require(amount > 0, \"emptyToken need more balance\");\n    require(wrongToken.transfer(msg.sender, amount), \"empty Token transfer wrong\");\n\n    emit WrongTokenEmptied(_addr, msg.sender, amount);\n  }\n\n  // shouldn't happen, just in case\n  function emptyWrongEther() onlyAdmin public {\n    uint256 amount = address(this).balance;\n    require(amount > 0, \"emptyEther need more balance\");\n    msg.sender.transfer(amount);\n\n    emit WrongEtherEmptied(msg.sender, amount);\n  }\n\n}", "debug": "storage_3: 0x5c28000000000000000000000000000002000000000020000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WTAGameBook_4: 0x80000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WTAGameBook_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WTAGameBook_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WTAGameBook: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeAdmin(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/47/0x1359bcedd3ed488709e5b6c22d2b2e6ba165fa3e.sol", "function": "removeAdmin(address)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}], "success": true}