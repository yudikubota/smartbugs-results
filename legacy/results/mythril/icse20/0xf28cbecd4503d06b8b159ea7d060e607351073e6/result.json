{
  "contract": "0xf28cbecd4503d06b8b159ea7d060e607351073e6",
  "tool": "mythril",
  "start": 1563690685.1231687,
  "end": 1563690821.8796797,
  "duration": 136.75651097297668,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1594,
        "code": "rStatus(transferStatus);\n\t}\n}",
        "debug": "calldata_Yachtco_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Yachtco_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_Yachtco: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/34/0xf28cbecd4503d06b8b159ea7d060e607351073e6.sol",
        "function": "setSymbol(string)",
        "lineno": 367,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7305,
        "code": "/**\n ",
        "debug": "calldata_Yachtco_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Yachtco_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Yachtco_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_Yachtco_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Yachtco_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Yachtco: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/34/0xf28cbecd4503d06b8b159ea7d060e607351073e6.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 50,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7318,
        "code": "tle Ownable\n *",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Yachtco_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Yachtco_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Yachtco_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_Yachtco_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_Yachtco_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Yachtco: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/34/0xf28cbecd4503d06b8b159ea7d060e607351073e6.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7940,
        "code": "(10 ** uint256(decimals));\n\n\tbool public transmitStatus = true;\n\tbool public transferStatus = false;\n\n\tevent Transmit(address indexed from, address indexed to, uint256 value);\n\tevent TransmitDisabled();\n\tevent TransferStatus(bool value);\n\n\t/**\n\t * @dev Constructor that gives msg.sender all of existing tokens.\n\t */\n\tfunction Yachtco() public {\n\t\ttotalSupply_ = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t}\n\n\t/**\n\t * @dev if ether is sent to this address, send it back.\n\t */\n\tfunction () public payable {\n\t\trevert();\n\t}\n\n\t/**\n\t\t* @dev transfer token for a specified address\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n\t\trequire(transferStatus || msg.sender == owner);\n\t\treturn super.transfer(_to, _value);\n\t}\n\n\t/**\n\t\t* @dev transferFrom token for a specified address\n\t\t* @param _from The address froms transfer to.\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n\t\trequire(transferStatus || msg.sender == owner);\n\t\treturn super.transferFrom(_from, _to, _value);\n\t}\n\n\t/**\n\t\t* @dev transfer token for a specified address\n\t\t* @param _to The address to transfer to.\n\t\t* @param _value The amount to be transferred.\n\t*/\n\tfunction transmit(address _from, address _to, uint256 _value) public onlyOwner returns (bool) {\n\t\trequire(transmitStatus);\n\t\trequire(_to != address(0) && _from != address(0));\n\t\trequire(_value <= balances[_from]);\n\n\t\t// SafeMath.sub will throw if there is not enough balance.\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransmit(_from, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Disable Transmit functionality for Owner.\n\t*/\n\tfunction disableTransmit() public onlyOwner {\n\t\trequire(transmitStatus);\n\t\ttransmitStatus = false;\n\t\tTransmitDisabled();\n\t}\n\n\t/**\n\t * @dev change token name\n\t*/\n\tfunction setName(string _name) public onlyOwner {\n        name = _name;\n\t}\n\n\t/**\n\t * @dev change token symbol\n\t*/\n\tfunction setSymbol(string _symbol) public onlyOwner {\n        symbol = _symbol;\n\t}\n\n\n\t/**\n\t * @dev Disable Transfer.\n\t*/\n\tfunction disableTransfer() public onlyOwner {\n\t\ttransferStatus = false;\n\t\tTransferStatus(transferStatus);\n\t}\n\n\t/**\n\t * @dev Enable Transfer. \n\t*/\n\tfunction enableTransfer() public onlyOwner {\n\t\ttransferStatus = true;\n\t\tTransferStatus(transferStatus);\n\t}\n}",
        "debug": "calldata_Yachtco_4 + calldata_Yachtco_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Yachtco_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_Yachtco: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/34/0xf28cbecd4503d06b8b159ea7d060e607351073e6.sol",
        "function": "setSymbol(string)",
        "lineno": 268,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}