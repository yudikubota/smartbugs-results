{
  "contract": "0x2a0e7619e69bd8959da98f711f15d1e36f9139b5",
  "tool": "mythril",
  "start": 1563299545.7116506,
  "end": 1563299618.6248703,
  "duration": 72.91321969032288,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2427,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x2a0e7619e69bd8959da98f711f15d1e36f9139b5.sol",
        "function": "retrieveAssets(address)",
        "lineno": 204,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2427,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2651\n",
        "filename": "/unique_contracts/0x2a0e7619e69bd8959da98f711f15d1e36f9139b5.sol",
        "function": "retrieveAssets(address)",
        "lineno": 204,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2651,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x2a0e7619e69bd8959da98f711f15d1e36f9139b5.sol",
        "function": "retrieveAssets(address)",
        "lineno": 204,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3258,
        "code": "thTotal.mul(5",
        "debug": "timestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef8400\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SimpleICO_0: 0x897463aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleICO: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `startContribution()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2a0e7619e69bd8959da98f711f15d1e36f9139b5.sol",
        "function": "startContribution()",
        "lineno": 173,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4728,
        "code": "  return c;\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffff00ff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SimpleICO_0: 0xd7bb99ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleICO: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x2a0e7619e69bd8959da98f711f15d1e36f9139b5.sol",
        "function": "contribute()",
        "lineno": 24,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}