{"error": null, "issues": [{"address": 287, "code": "Effective) <=\n      SafeMath.safeDiv(msg.value, volume)\n    );\n\n    // Return remaining ethers\n    if(address(this).balance > 0) {\n      destinationAddr.transfer(address(this).balance);\n    }\n\n    // Send the tokens\n    transferTradeable(tradeable, destinationAddr, volumeEffective);\n\n    emit Buy(msg.sender, destinationAddr, tradeable, volume, msg.value, volumeEffective, volumeEthEffective);\n  }\n\n  /// @dev sell a token.\n  function sell(\n    ITradeable tradeable,\n    uint volume,\n    uint volumeEth,\n    bytes ordersData,\n    address destinationAddr,\n    address affiliate\n  ) external\n  {\n    require(tradingEnabled);\n\n    // We transfer to ouselves the user's trading volume, to operate on it\n    // note: Our balance is 0 before this\n    require(tradeable.transferFrom(msg.sender, this, volume));\n\n    // Execute the trade (at most fullfilling volume)\n    trade(\n      true,\n      tradeable,\n      volume,\n      ordersData,\n      affiliate\n    );\n\n    // Check how much we traded. Our balance = volume - tradedVolume\n    // then: tradedVolume = volume - balance\n    uint volumeEffective = SafeMath.safeSub(volume, tradeable.balanceOf(this));\n\n    // We make sure that something was traded\n    require(volumeEffective > 0);\n\n    // Collects service fee\n    uint volumeEthEffective = collectSellFee(affiliate);\n\n    // IMPORTANT: Check that: effective_price >= agreed", "debug": "calldata_ZodiacERC20_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZodiacERC20_0: 0x321a9ab900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiacERC20: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x321a9ab9`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 963, "title": "Integer Overflow ", "type": "Warning"}, {"address": 663, "code": "r the seller)\n    require(\n      SafeMath.safeDiv(volumeEthEffective, volumeEffective) >=\n      SafeMath.safeDiv(volumeEth, volume)\n    );\n\n    // Return remaining volume\n    if (volumeEffective < volume) {\n     transferTradeable(tradeable, destinationAddr, SafeMath.safeSub(volume, volumeEffective));\n    }\n\n    // Send ethers obtained\n    destinationAddr.transfer(volumeEthEffective);\n\n    emit Sell(msg.sender, destinationAddr, tradeable, volume, volumeEth, volumeEffective, volumeEthEffective);\n  }\n\n\n  /// @dev Trade buy or sell orders.\n  function trade(\n    bool isSell,\n    ITradeable tradeable,\n    uint volume,\n    bytes ordersData,\n    address affiliate\n  ) internal\n  {\n    uint remainingVolume = volume;\n    uint offset = ordersData.length;\n\n    while(offset > 0 && remainingVolume > 0) {\n      //Get the trader\n      uint8 protocolId = bytesToUint8(offset, ordersData);\n      ITrader trader = traders.getTrader(protocolId);\n      require(trader != address(0));\n\n      //Get the order data\n      uint dataLength = trader.getDataLength();\n      offset = SafeMath.safeSub(offset, dataLength);\n      bytes memory orderData = slice(ordersData, offset, dataLength);\n\n      //Fill order\n      remainingVolume = fillOrder(\n         isSell,\n         tradeable,\n         trader,\n         remainingVolume,\n         orderData,\n         affiliate\n      );\n    }\n  }\n\n  /// @dev Fills a buy order.\n  function fillOrder(\n    bool isSell,\n    ITradeable tradeable,\n    ITrader trader,\n    uint remaining,\n    bytes memory orderData,", "debug": "calldata_ZodiacERC20_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZodiacERC20_0: 0xce68736100000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiacERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xce687361`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1013, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1576, "code": "   uint volume,\n    uint ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 981, "title": "Message call to external contract", "type": "Warning"}, {"address": 2563, "code": " destinationAddr.transfer(volumeEthEffective);\n\n", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1025, "title": "Message call to external contract", "type": "Warning"}, {"address": 2563, "code": " destinationAddr.transfer(volumeEthEffective);\n\n", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2856\nCall at address: 4034\nCall at address: 2856\nCall at address: 4034\n", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1025, "title": "Multiple Calls", "type": "Information"}, {"address": 2856, "code": "int offset = ordersData.l", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1041, "title": "Message call to external contract", "type": "Warning"}, {"address": 4034, "code": "der, volume));\n      } else {", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1091, "title": "Message call to external contract", "type": "Informational"}, {"address": 4034, "code": "der, volume));\n      } else {", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4255\n", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 1091, "title": "Multiple Calls", "type": "Information"}, {"address": 4034, "code": "der, volume));\n      } else {", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0xce687361. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0xce687361", "lineno": 1091, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4255, "code": "eEth = collectBuyFee(v", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 1095, "title": "Message call to external contract", "type": "Warning"}, {"address": 4385, "code": "afeAdd(uint a,", "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ZodiacERC20_4 + calldata_ZodiacERC20_32 + 36)): 0x100000000000000000000000000000000000000000001\ncalldata_ZodiacERC20_4 + calldata_ZodiacERC20_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffff\nretval_4255: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4034: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZodiacERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\ncalldata_ZodiacERC20_0: 0x321a9ab900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiacERC20: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 64, "title": "Exception state", "type": "Informational"}, {"address": 4410, "code": "ub(ui", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ZodiacERC20_4 + calldata_ZodiacERC20_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_1576: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ZodiacERC20_4 + calldata_ZodiacERC20_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\ncalldata_ZodiacERC20_0: 0x321a9ab900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZodiacERC20: 0x4\ncalldata_ZodiacERC20_32 + 4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/39/0xfa5f1b6d36e6e4b1cee699864b518198670712bf.sol", "function": "_function_0x321a9ab9", "lineno": 55, "title": "Exception state", "type": "Informational"}], "success": true}