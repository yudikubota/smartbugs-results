{
  "contract": "0x4e6fb9da2819642283aaa031f585bfeb9548e648",
  "tool": "mythril",
  "start": 1563592578.8524022,
  "end": 1563592616.649937,
  "duration": 37.797534704208374,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 136,
        "code": "n drop(ERC20 token, address[] recipients, uint256[] values) public {\n    for (uint256 i = 0; i < recipients.length; i++) {\n      token.transfer(recipients[i], values[i]);\n    }\n  }\n}",
        "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x7da5efc8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x4e6fb9da2819642283aaa031f585bfeb9548e648.sol",
        "function": "_function_0x7da5efc8",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 351,
        "code": ");\n    }\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4 + calldata_ERC20_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nmem_128 + 32 + 32*calldata_ERC20_4 + calldata_ERC20_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x4e6fb9da2819642283aaa031f585bfeb9548e648.sol",
        "function": "_function_0x7da5efc8",
        "lineno": 10,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 498,
        "code": "nsfer(recipients[i], values[i]);\n    }\n ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/22/0x4e6fb9da2819642283aaa031f585bfeb9548e648.sol",
        "function": "_function_0x7da5efc8",
        "lineno": 10,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 498,
        "code": "nsfer(recipients[i], values[i]);\n    }\n ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 498\nCall at address: 498\n",
        "filename": "/unique_chucks/22/0x4e6fb9da2819642283aaa031f585bfeb9548e648.sol",
        "function": "_function_0x7da5efc8",
        "lineno": 10,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}