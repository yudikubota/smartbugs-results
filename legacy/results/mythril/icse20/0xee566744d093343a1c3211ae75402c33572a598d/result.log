{"error": null, "issues": [{"address": 471, "code": "onstant\n    returns(address[] _voters, int256[] _proposalIds) {\n\n        if (offset < voters.length) {\n            uint256 resultLength = limit;\n            uint256 index = 0;\n\n         \n            if (voters.length - offset < limit) {\n                resultLength = voters.length - offset;\n            }\n\n            _voters = new address[](resultLength);\n            _proposalIds = new int256[](resultLength);\n\n            for(uint256 i = offset; i < offset + resultLength; i++) {\n                _voters[index] = voters[i];\n                _proposalIds[index] = votes[voters[i]];\n                index++;\n            }\n\n            return (_voters, _proposalIds);\n        }\n    }\n\n\tmodifier onlyAdmin() {\n\t\tif (msg.sender != admin) revert();\n\t\t_;\n\t}\n}", "debug": "mem_128 + 32 + 32*calldata_MovementVoting_32 + 4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_MovementVoting_4: 0x0\nstorage_1: 0x1\ncalldata_MovementVoting_0: 0x8884b80700000000000000000000000000000000000000000000000000000000\ncalldatasize_MovementVoting: 0x4\ncalldata_MovementVoting_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getVoters(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xee566744d093343a1c3211ae75402c33572a598d.sol", "function": "getVoters(uint256,uint256)", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1417, "code": "* Decentralized Au", "debug": "storage_2: 0x40000000000000000000000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x40000000000000000000000000\ncalldata_MovementVoting_4: 0x1\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MovementVoting_0: 0x3891c32000000000000000000000000000000000000000000000000000000000\ncalldatasize_MovementVoting: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(int256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xee566744d093343a1c3211ae75402c33572a598d.sol", "function": "vote(int256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2183, "code": "    }\n\n            ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x8000004000000000000000000000000000\ncalldata_MovementVoting_4: 0x8000000000000000000000000000000000\ncalldata_MovementVoting_32 + 4: 0x4000000000000000000000000001\ncalldata_MovementVoting_0: 0x8884b80700000000000000000000000000000000000000000000000000000000\ncalldatasize_MovementVoting: 0x4\nmem_128 +\n32 +\n32*storage_1 +\n115792089237316195423570985008687907853269984665640564039457584007913129639904*\ncalldata_MovementVoting_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xee566744d093343a1c3211ae75402c33572a598d.sol", "function": "getVoters(uint256,uint256)", "lineno": 76, "title": "Exception state", "type": "Informational"}, {"address": 2292, "code": " public voters;\n    uin", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MovementVoting_4: 0x0\nstorage_1: 0x0\ncalldata_MovementVoting_0: 0xda58c7d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MovementVoting: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xee566744d093343a1c3211ae75402c33572a598d.sol", "function": "_function_0xda58c7d9", "lineno": 10, "title": "Exception state", "type": "Informational"}], "success": true}