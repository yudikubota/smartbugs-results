{
  "contract": "0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3",
  "tool": "mythril",
  "start": 1563507514.2563581,
  "end": 1563507548.764151,
  "duration": 34.507792949676514,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1142,
        "code": "der][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        require(_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData));\n        return true;\n    }\n}",
        "debug": "calldata_UUC_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UUC_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_UUC: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 133,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1750,
        "code": "r(address _to, uint256 _amount) onl",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_UUC: 0x60\ncalldata_UUC_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2917,
        "code": " balances[msg.sender]);\n\n   ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "withdraw()",
        "lineno": 124,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3528,
        "code": "r(address _to, uint256 _amount) onl",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_UUC: 0x4\ncalldata_UUC_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "transfer(address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4720,
        "code": "     return true;\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 137,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5109,
        "code": "\n    return a ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UUC_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_UUC_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_UUC: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "burn(uint256)",
        "lineno": 16,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5127,
        "code": ">= a)",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UUC_4: 0xf1592bedbbff7fd743ed18b69e49c6a2d5afe5b9c6df6bd8868438480103db39\ncalldatasize_UUC: 0x1000000000000000000000000000000000000000000000000000000000000044\ncalldata_UUC_32 + 4: 0x6173538839847ecb1c051d3958c52c0d15261637901c038184c1b94b3d5bd9a5\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6173538839847ecb1c051d3958c52c0d15261637901c038184c1b94b3d5bd9a5\ncalldata_UUC_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UUC_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "transfer(address,uint256)",
        "lineno": 22,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5140,
        "code": "eturn c;\n  }\n}",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UUC_4: 0x9000000000000c0000004020000000001b03002097fffecbfc01fe3fd37ff57c\ncalldatasize_UUC: 0x1000000000000000000000000000000000000000000048\ncalldata_UUC_32 + 4: 0x980000000000a3fffffebfbffffffeffe0dfff85a080003bc66c000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x980000000000a3fffffebfbffffffeffe0dfff85a080003bc66c000000000000\ncalldata_UUC_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_UUC_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xb0cc6b00920631cfc5d8b5f15f9886d9f3a48ea3.sol",
        "function": "transfer(address,uint256)",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}