{
  "contract": "0xa20f317e3b6fe80ff76ee908860ecdb3edea4893",
  "tool": "mythril",
  "start": 1563593613.500426,
  "end": 1563593657.9438148,
  "duration": 44.44338870048523,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1923,
        "code": "t TwelveH",
        "debug": "",
        "description": "Function invest(address) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 66,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 2495,
        "code": "ransfer(money);\n            }\n      ",
        "debug": "",
        "description": "In the function `invest(address)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 94,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2495,
        "code": "ransfer(money);\n            }\n      ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function invest(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 94,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2626,
        "code": "\n        else if(msg.value > 0",
        "debug": "",
        "description": "In the function `invest(address)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 98,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2626,
        "code": "\n        else if(msg.value > 0",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function invest(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 98,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3089,
        "code": "  }\n\t\t\tuint256 _profitTHT     = valueDeposit * ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6926\nCall at address: 6764\n",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 106,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4865,
        "code": "FERRAL_PRI",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwelveHourTokenInterface_4: 0x0\nstorage_7: 0x0\ncalldata_TwelveHourTokenInterface_0: 0x9f9fb96800000000000000000000000000000000000000000000000000000000\ncalldatasize_TwelveHourTokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "getDeposit(uint256)",
        "lineno": 186,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5115,
        "code": "eiverIndex = 0; \n\n\tmod",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TwelveHourTokenInterface_4: 0x0\nstorage_7: 0x0\ncalldata_TwelveHourTokenInterface_0: 0xddf0b00900000000000000000000000000000000000000000000000000000000\ncalldatasize_TwelveHourTokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "_function_0xddf0b009",
        "lineno": 52,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6764,
        "code": "n getDeposit(uint idx) public view retur",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 178,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6764,
        "code": "n getDeposit(uint idx) public view retur",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6926\n",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 178,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6926,
        "code": "/\n    function calEthS",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0xa20f317e3b6fe80ff76ee908860ecdb3edea4893.sol",
        "function": "invest(address)",
        "lineno": 163,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}