{"error": null, "issues": [{"address": 1207, "code": "vate{\n        requir", "debug": "block_number: 0x0\nstorage_1: 0x0\nstorage_6: 0x0\nstorage_5: 0xff00\ncalldata_Reternal_0: 0x106ca43100000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 130, "title": "Integer Underflow", "type": "Warning"}, {"address": 1233, "code": "estor not fo", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nblock_number: 0x0\nstorage_6: 0x0\nstorage_5: 0xff00\ncalldata_Reternal_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 131, "title": "Exception state", "type": "Informational"}, {"address": 1615, "code": "rtBlock = ", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x0\nstorage_6: 0x0\nstorage_5: 0xff00\ncalldata_Reternal_0: 0x900000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\nstorage_1: 0x1\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 137, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2007, "code": "              \n                    // Cashback only for the first deposit\n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2078\n", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 166, "title": "Multiple Calls", "type": "Information"}, {"address": 2317, "code": "               // If data ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3415\n", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 176, "title": "Multiple Calls", "type": "Information"}, {"address": 2350, "code": ";\n\n/**\n * \n * \u2588\u2588\u2588\u2588", "debug": "callvalue: 0x200000000000000000000000000003870000000000\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2317: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldata_Reternal_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3197, "code": ");\n          ", "debug": "callvalue: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x2\nblock_number: 0x0\nretval_2797: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184117: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2317: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\nstorage_5: 0xff00\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x1\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 213, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3538, "code": ";\n        uint tota", "debug": "storage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Reternal: 0x1\nblock_number: 0x0\nretval_3415: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184117: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2317: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\nstorage_5: 0xff00\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x1\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 223, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3554, "code": "nk3;\n        uint totalBa", "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8df0000000000000000000004924900e2bfbe24ffd0000000000000000020003\ncallvalue: 0x72100000000000000000003fb6db6ff9a0400850010000000000000000000001\ncalldatasize_Reternal: 0x1\nblock_number: 0x0\nretval_3415: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\nretval_2797: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184117: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2317: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\nstorage_5: 0xff00\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1: 0x1\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 224, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3579, "code": "       \n        if(contractBala", "debug": "storage_4: 0x9db19be7a578446951ed42d5da4eb297f3c3409a5c366bbd49d734f77b36d1ff\ncallvalue: 0xab33d184563e76c55626709d1b6721d4c55c0765a3454aa1a9d464e6243e6780\ncalldatasize_Reternal: 0x1\nretval_3415: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\nretval_2797: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_78338746147236970124700731725183845421594913511827187288591969170390706184117: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2317: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 227, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4289, "code": "   // Investors' dividents", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Reternal_4: 0x0\nstorage_1: 0x0\ncalldata_Reternal_0: 0xedf26d9b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "_function_0xedf26d9b", "lineno": 88, "title": "Exception state", "type": "Informational"}, {"address": 4432, "code": "\n    }\n    \n    function createDep", "debug": "block_number: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_13: 0x1\nstorage_8: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldatasize_Reternal: 0x3\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 148, "title": "Integer Underflow", "type": "Warning"}, {"address": 4502, "code": "ffDividends(msg.sender, amount);\n", "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb00340a36343c0200195061413ac2ba094605afae03400260165713b48d8516e\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_13: 0xb00340a36343c0200195061413ac2ba094605afae03400260165713b48d8516f\nstorage_8: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldatasize_Reternal: 0x3\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 147, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4587, "code": "th\n    uint bank3 = 900e18; // 900 eth\n    uint bank4 = 1500e18; // 1500 eth\n    uint bank5 = 2000e18; // 2000 eth\n    // Investors' dividents increase due to individual deposit amount\n    uint dep1 = 1e18; // 1 ETH\n    uint dep2 = 4e18; // 4 ETH\n    uint dep3 = 12e18; // 12 ETH\n    uint dep4 = 5e19; // 50 ETH\n    \n    event NewInvestor(address indexed investor, uint deposit, address referrer);\n    event PayOffDividends(address indexed investor, uint value);\n    event refPayout(address indexed investor, uint value, address referrer);\n    event NewDeposit(address indexed investor, uint value);\n    event NextRoundStarted(uint round, uint block, address addr, uint value);\n    \n    constructor() public {\n        addresses.length = 1;\n        round = 1;\n        pause = false;\n    }\n\n    function restart() private {\n        address addr;\n\n        for (uint i = addresses.length - 1; i > 0; i--) {\n            addr = addresses[i];\n            addresses.length -= 1;\n            delete investors[addr];\n        }\n        \n        emit NextRoundStarted(round, block.number, msg.sender, msg.value);\n        pause = false;\n        round += 1;\n        totalDepositAmount = 0;\n        \n        createDeposit();\n    }\n\n    function getRaisedPercents(address addr) internal view  returns(uint){\n        // Individual deposit percentage sums up with 'Reternal total fund' percentage\n        uint percent = getIndividualPercent() + getBankPercent();\n        uint256 amount = investors[addr].deposit * percent / 100*(block.number-investors[addr].block)/6000;\n        return(amount / 100);\n    }\n    \n    function payDividends() private{\n        require(investors[msg.sender].id > 0, \"Investor not found.\");\n        // Investor's total raised amount\n        uint amount = getRaisedPercents(msg.sender);\n            \n        if (address(this).balance < amount) {\n            pause = true;\n            restartBlock = block.number + 6000;\n            return;\n        }\n        \n        // Service fee deduction \n        uint FeeToWithdraw = amount * 5 / 100;\n        uint payment = amount - FeeToWithdraw;\n        \n        address(0xD9bE11E7412584368546b1CaE64b6C384AE85ebB).transfer(FeeToWithdraw);\n        msg.sender.transfer(payment);\n        emit PayOffDividends(msg.sender, amount);\n        \n    }\n    \n    function createDeposit() private{\n        Investor storage user = investors[msg.sender];\n        \n        if (user.id == 0) {\n            \n            // Check for malicious smart-contract\n            msg.sender.transfer(0 wei);\n            user.id = addresses.push(msg.sender);\n\n            if (msg.data.length != 0) {\n                address referrer = bytesToAddress(msg.data);\n                \n                // Check for referrer's registration. Check for self referring\n                if (investors[referrer].id > 0 && referrer != msg.sender) {\n                    user.referrer = referrer;\n                    \n                    // Cashback only for the first deposit\n                    if (user.depositCount == 0) {\n                        uint cashback = msg.value / 100;\n                        if (msg.sender.send(cashback)) {\n                            emit refPayout(msg.sender, cashback, referrer);\n                        }\n                    }\n                }\n            } else {\n                // If data is empty:\n                user.referrer = defaultReferrer;\n            }\n            \n            emit NewInvestor(msg.sender, msg.value, referrer);\n            \n        } else {\n            // Dividents payment for an investor\n            payDividends();\n        }\n        \n        // 2% from a referral deposit transfer to a referrer \n        uint payReferrer = msg.value * 2 / 100; \n        \n        if (user.referrer == defaultReferrer) {\n            user.referrer.transfer(payReferrer);\n        } else {\n            investors[referrer].deposit += payReferrer;\n        }\n        \n        \n        user.depositCount++;\n        user.deposit += msg.value;\n        user.block = block.number;\n        totalDepositAmount += msg.value;\n        emit NewDeposit(msg.sender, msg.value);\n    }\n\n    function() external payable {\n        if(pause) {\n            if (restartBlock <= block.number) { restart(); }\n            require(!pause, \"Eternal is restarting, wait for the block in restartBlock\");\n        } else {\n            if (msg.value == 0) {\n                payDividends();\n                return;\n            }\n            require(msg.value >= MINIMUM_INVEST, \"Too small amount, minimum 0.01 ether\");\n            createDeposit();\n        }\n    }\n    \n    function getBankPercent() public view returns(uint){\n        \n        uint contractBalance = address(this).balance;\n        \n        uint totalBank1 = bank1;\n        uint totalBank2 = bank2;\n        uint totalBank3 = bank3;\n        uint totalBank4 = bank4;\n        uint totalBank5 = bank5;\n        \n        if(contractBalance < totalBank1){\n            return(0);\n        }\n        if(contractBalance >= totalBank1 && contractBalance < totalBank2){\n            return(30);\n        }\n        if(contractBalance >= totalBank2 && contractBalance < totalBank3){\n            return(40);\n        }\n        if(contractBalance >= totalBank3 && contractBalance < totalBank4){\n            return(50);\n        }\n        if(contractBalance >= totalBank4 && contractBalance < totalBank5){\n            return(65);\n        }\n        if(contractBalance >= totalBank5){\n            return(80);\n        }\n    }\n\n    function getIndividualPercent() public view returns(uint){\n        \n        uint userBalance = investors[msg.sender].deposit;\n        \n        uint totalDeposit1 = dep1;\n        uint totalDeposit2 = dep2;\n        uint totalDeposit3 = dep3;\n        uint totalDeposit4 = dep4;\n        \n        if(userBalance < totalDeposit1){\n            return(355);\n        }\n        if(userBalance >= totalDeposit1 && userBalance < totalDeposit2){\n            return(365);\n        }\n        if(userBalance >= totalDeposit2 && userBalance < totalDeposit3){\n            return(375);\n        }\n        if(userBalance >= totalDeposit3 && userBalance < totalDeposit4){\n            return(385); \n        }\n        if(userBalance >= totalDeposit4){\n            return(400);\n        }\n    }\n    \n    function getInvestorCount() public view returns (uint) {\n        return addresses.length - 1;\n    }\n    \n    function bytesToAddress(bytes bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n}", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000\nblock_number: 0x0\nstorage_6: 0x0\nstorage_5: 0xff00\ncalldata_Reternal_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 84, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4589, "code": "th\n    uint bank3 = 900e18; // 900 eth\n    uint bank4 = 1500e18; // 1500 eth\n    uint bank5 = 2000e18; // 2000 eth\n    // Investors' dividents increase due to individual deposit amount\n    uint dep1 = 1e18; // 1 ETH\n    uint dep2 = 4e18; // 4 ETH\n    uint dep3 = 12e18; // 12 ETH\n    uint dep4 = 5e19; // 50 ETH\n    \n    event NewInvestor(address indexed investor, uint deposit, address referrer);\n    event PayOffDividends(address indexed investor, uint value);\n    event refPayout(address indexed investor, uint value, address referrer);\n    event NewDeposit(address indexed investor, uint value);\n    event NextRoundStarted(uint round, uint block, address addr, uint value);\n    \n    constructor() public {\n        addresses.length = 1;\n        round = 1;\n        pause = false;\n    }\n\n    function restart() private {\n        address addr;\n\n        for (uint i = addresses.length - 1; i > 0; i--) {\n            addr = addresses[i];\n            addresses.length -= 1;\n            delete investors[addr];\n        }\n        \n        emit NextRoundStarted(round, block.number, msg.sender, msg.value);\n        pause = false;\n        round += 1;\n        totalDepositAmount = 0;\n        \n        createDeposit();\n    }\n\n    function getRaisedPercents(address addr) internal view  returns(uint){\n        // Individual deposit percentage sums up with 'Reternal total fund' percentage\n        uint percent = getIndividualPercent() + getBankPercent();\n        uint256 amount = investors[addr].deposit * percent / 100*(block.number-investors[addr].block)/6000;\n        return(amount / 100);\n    }\n    \n    function payDividends() private{\n        require(investors[msg.sender].id > 0, \"Investor not found.\");\n        // Investor's total raised amount\n        uint amount = getRaisedPercents(msg.sender);\n            \n        if (address(this).balance < amount) {\n            pause = true;\n            restartBlock = block.number + 6000;\n            return;\n        }\n        \n        // Service fee deduction \n        uint FeeToWithdraw = amount * 5 / 100;\n        uint payment = amount - FeeToWithdraw;\n        \n        address(0xD9bE11E7412584368546b1CaE64b6C384AE85ebB).transfer(FeeToWithdraw);\n        msg.sender.transfer(payment);\n        emit PayOffDividends(msg.sender, amount);\n        \n    }\n    \n    function createDeposit() private{\n        Investor storage user = investors[msg.sender];\n        \n        if (user.id == 0) {\n            \n            // Check for malicious smart-contract\n            msg.sender.transfer(0 wei);\n            user.id = addresses.push(msg.sender);\n\n            if (msg.data.length != 0) {\n                address referrer = bytesToAddress(msg.data);\n                \n                // Check for referrer's registration. Check for self referring\n                if (investors[referrer].id > 0 && referrer != msg.sender) {\n                    user.referrer = referrer;\n                    \n                    // Cashback only for the first deposit\n                    if (user.depositCount == 0) {\n                        uint cashback = msg.value / 100;\n                        if (msg.sender.send(cashback)) {\n                            emit refPayout(msg.sender, cashback, referrer);\n                        }\n                    }\n                }\n            } else {\n                // If data is empty:\n                user.referrer = defaultReferrer;\n            }\n            \n            emit NewInvestor(msg.sender, msg.value, referrer);\n            \n        } else {\n            // Dividents payment for an investor\n            payDividends();\n        }\n        \n        // 2% from a referral deposit transfer to a referrer \n        uint payReferrer = msg.value * 2 / 100; \n        \n        if (user.referrer == defaultReferrer) {\n            user.referrer.transfer(payReferrer);\n        } else {\n            investors[referrer].deposit += payReferrer;\n        }\n        \n        \n        user.depositCount++;\n        user.deposit += msg.value;\n        user.block = block.number;\n        totalDepositAmount += msg.value;\n        emit NewDeposit(msg.sender, msg.value);\n    }\n\n    function() external payable {\n        if(pause) {\n            if (restartBlock <= block.number) { restart(); }\n            require(!pause, \"Eternal is restarting, wait for the block in restartBlock\");\n        } else {\n            if (msg.value == 0) {\n                payDividends();\n                return;\n            }\n            require(msg.value >= MINIMUM_INVEST, \"Too small amount, minimum 0.01 ether\");\n            createDeposit();\n        }\n    }\n    \n    function getBankPercent() public view returns(uint){\n        \n        uint contractBalance = address(this).balance;\n        \n        uint totalBank1 = bank1;\n        uint totalBank2 = bank2;\n        uint totalBank3 = bank3;\n        uint totalBank4 = bank4;\n        uint totalBank5 = bank5;\n        \n        if(contractBalance < totalBank1){\n            return(0);\n        }\n        if(contractBalance >= totalBank1 && contractBalance < totalBank2){\n            return(30);\n        }\n        if(contractBalance >= totalBank2 && contractBalance < totalBank3){\n            return(40);\n        }\n        if(contractBalance >= totalBank3 && contractBalance < totalBank4){\n            return(50);\n        }\n        if(contractBalance >= totalBank4 && contractBalance < totalBank5){\n            return(65);\n        }\n        if(contractBalance >= totalBank5){\n            return(80);\n        }\n    }\n\n    function getIndividualPercent() public view returns(uint){\n        \n        uint userBalance = investors[msg.sender].deposit;\n        \n        uint totalDeposit1 = dep1;\n        uint totalDeposit2 = dep2;\n        uint totalDeposit3 = dep3;\n        uint totalDeposit4 = dep4;\n        \n        if(userBalance < totalDeposit1){\n            return(355);\n        }\n        if(userBalance >= totalDeposit1 && userBalance < totalDeposit2){\n            return(365);\n        }\n        if(userBalance >= totalDeposit2 && userBalance < totalDeposit3){\n            return(375);\n        }\n        if(userBalance >= totalDeposit3 && userBalance < totalDeposit4){\n            return(385); \n        }\n        if(userBalance >= totalDeposit4){\n            return(400);\n        }\n    }\n    \n    function getInvestorCount() public view returns (uint) {\n        return addresses.length - 1;\n    }\n    \n    function bytesToAddress(bytes bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n\n}", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffefffdffffffffffffffffffffffffffd\nblock_number: 0x0\nstorage_6: 0x0\nstorage_5: 0xff00\ncalldata_Reternal_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_Reternal: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x660c46a5650fb0619f603a2f4d73a1cdf8cd00d6.sol", "function": "fallback", "lineno": 84, "title": "Integer Overflow ", "type": "Warning"}], "success": true}