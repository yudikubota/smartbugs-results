{
  "contract": "0x6ca935e5c66bcd9ed690e80e2fecee2452e00172",
  "tool": "mythril",
  "start": 1563545092.3237612,
  "end": 1563545340.1998901,
  "duration": 247.87612891197205,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1162,
        "code": "72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\ttoken_price[tokenAddress][1] \t= Currentprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n\t\t\n\t\temit onAddContractAddress(msg.sender, tokenAddress, Currentprice, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(add",
        "debug": "calldata_ldoh_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ldoh_0: 0x315d479200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,uint256,uint256,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "AddContractAddress(address,uint256,uint256,string,uint256)",
        "lineno": 447,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5318,
        "code": "s.cashbackbalance);\n\t\t\t\t\tPayTo",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 513,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5318,
        "code": "s.cashbackbalance);\n\t\t\t\t\tPayTo",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5553\n",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 513,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5553,
        "code": "ress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 514,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8111,
        "code": "\t\t\n\tmapping(address => address[]) \t\tpublic affli",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x4b698aff00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "_function_0x4b698aff",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8728,
        "code": "tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Hold",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "Holdplatform(address,uint256)",
        "lineno": 162,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 23733,
        "code": "t {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed hodler, address indexed contracthodler, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\t\n\tevent onHoldplatformsetting(address indexed hodler, address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime);\t\n\tevent onHoldplatformdeposit(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHoldplatformwithdraw(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onReceiveAirdrop(address indexed hodler, uint256 amount, uint256 datetime);\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 03 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// 04 -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 05 -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 06 -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 07 -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 08 -- > Contract Address \t\n\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 09 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 10 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic TokenBalance; \t\t// 11 -- > Token Balance\t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 12 -- > Maximum Contribution\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 13 -- > Deposit amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 14 -- > Withdraw amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic activeuser; \t\t\t// 15 -- > Active User Status\n\t\n\tmapping(uint256 => uint256) \t\tpublic TXCount; \t\t\t\n\t//1st uint256, Category >>> 1 = Total User, 2 = Total TX Hold, 3 = Total TX Unlock, 4 = Total TX Airdrop, 5 = Total TX Affiliate Withdraw\n\n\tmapping (address => mapping (uint256 => uint256)) \tpublic token_price; \t\t\t\t\n\t//2th uint256, Category >>> 1 = Current Price, 2 = ATH Price, 3 = ATL Price\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_divider; \t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        revert();\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] >= 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t\n\t\t//--o 02\t\n    function HodlTokens2(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t\t\n\t\tHodlTokens3(tokenAddress, amount);\n\t}\n\t\n\t\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t= add(Statistics[EthereumNodes][ERC][3], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens4(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        TokenBalance[ERC] \t\t\t\t\t\t= add(TokenBalance[ERC], AM);  \n\n\t\tif(activeuser[msg.sender] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; TXCount[2]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; TXCount[1]++; TXCount[2]++; TotalUser++;   }\n\t\t\n\t\tactiveuser[msg.sender] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t\t\t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tTXCount[3]++;\n\n\t\tAirdrop(tokenAddress, amount);   \n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), 4);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tTXCount[5]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\ttoken_price[tokenAddress][1] \t= Currentprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n\t\t\n\t\temit onAddContractAddress(msg.sender, tokenAddress, Currentprice, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_divider) public restricted {\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\tuint256 HPM_ratio\t\t\t\t\t= div(100, HPM_divider);\n\t\t\n\t\temit onHoldplatformsetting(msg.sender, tokenAddress, HPM_status, HPM_divider, HPM_ratio, now);\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHoldplatformdeposit(msg.sender, amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHoldplatformwithdraw(msg.sender, amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ldoh_32 + 100: 0x3\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x315d479200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,uint256,uint256,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "AddContractAddress(address,uint256,uint256,string,uint256)",
        "lineno": 38,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 23762,
        "code": "t {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed hodler, address indexed contracthodler, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\t\n\tevent onHoldplatformsetting(address indexed hodler, address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime);\t\n\tevent onHoldplatformdeposit(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHoldplatformwithdraw(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onReceiveAirdrop(address indexed hodler, uint256 amount, uint256 datetime);\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 03 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// 04 -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 05 -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 06 -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 07 -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 08 -- > Contract Address \t\n\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 09 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 10 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic TokenBalance; \t\t// 11 -- > Token Balance\t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 12 -- > Maximum Contribution\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 13 -- > Deposit amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 14 -- > Withdraw amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic activeuser; \t\t\t// 15 -- > Active User Status\n\t\n\tmapping(uint256 => uint256) \t\tpublic TXCount; \t\t\t\n\t//1st uint256, Category >>> 1 = Total User, 2 = Total TX Hold, 3 = Total TX Unlock, 4 = Total TX Airdrop, 5 = Total TX Affiliate Withdraw\n\n\tmapping (address => mapping (uint256 => uint256)) \tpublic token_price; \t\t\t\t\n\t//2th uint256, Category >>> 1 = Current Price, 2 = ATH Price, 3 = ATL Price\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_divider; \t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        revert();\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] >= 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t\n\t\t//--o 02\t\n    function HodlTokens2(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t\t\n\t\tHodlTokens3(tokenAddress, amount);\n\t}\n\t\n\t\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t= add(Statistics[EthereumNodes][ERC][3], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens4(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        TokenBalance[ERC] \t\t\t\t\t\t= add(TokenBalance[ERC], AM);  \n\n\t\tif(activeuser[msg.sender] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; TXCount[2]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; TXCount[1]++; TXCount[2]++; TotalUser++;   }\n\t\t\n\t\tactiveuser[msg.sender] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t\t\t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tTXCount[3]++;\n\n\t\tAirdrop(tokenAddress, amount);   \n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), 4);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tTXCount[5]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\ttoken_price[tokenAddress][1] \t= Currentprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n\t\t\n\t\temit onAddContractAddress(msg.sender, tokenAddress, Currentprice, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_divider) public restricted {\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\tuint256 HPM_ratio\t\t\t\t\t= div(100, HPM_divider);\n\t\t\n\t\temit onHoldplatformsetting(msg.sender, tokenAddress, HPM_status, HPM_divider, HPM_ratio, now);\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHoldplatformdeposit(msg.sender, amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHoldplatformwithdraw(msg.sender, amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender",
        "debug": "calldata_ldoh_4 + calldata_ldoh_32 + 68: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ldoh_32 + 100: 0x8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x315d479200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,uint256,uint256,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "AddContractAddress(address,uint256,uint256,string,uint256)",
        "lineno": 38,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 23776,
        "code": "t {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed hodler, address indexed contracthodler, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\t\n\tevent onHoldplatformsetting(address indexed hodler, address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime);\t\n\tevent onHoldplatformdeposit(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHoldplatformwithdraw(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onReceiveAirdrop(address indexed hodler, uint256 amount, uint256 datetime);\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 03 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// 04 -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 05 -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 06 -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 07 -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 08 -- > Contract Address \t\n\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 09 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 10 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic TokenBalance; \t\t// 11 -- > Token Balance\t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 12 -- > Maximum Contribution\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 13 -- > Deposit amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 14 -- > Withdraw amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic activeuser; \t\t\t// 15 -- > Active User Status\n\t\n\tmapping(uint256 => uint256) \t\tpublic TXCount; \t\t\t\n\t//1st uint256, Category >>> 1 = Total User, 2 = Total TX Hold, 3 = Total TX Unlock, 4 = Total TX Airdrop, 5 = Total TX Affiliate Withdraw\n\n\tmapping (address => mapping (uint256 => uint256)) \tpublic token_price; \t\t\t\t\n\t//2th uint256, Category >>> 1 = Current Price, 2 = ATH Price, 3 = ATL Price\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_divider; \t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        revert();\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] >= 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t\n\t\t//--o 02\t\n    function HodlTokens2(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t\t\n\t\tHodlTokens3(tokenAddress, amount);\n\t}\n\t\n\t\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t= add(Statistics[EthereumNodes][ERC][3], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens4(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        TokenBalance[ERC] \t\t\t\t\t\t= add(TokenBalance[ERC], AM);  \n\n\t\tif(activeuser[msg.sender] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; TXCount[2]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; TXCount[1]++; TXCount[2]++; TotalUser++;   }\n\t\t\n\t\tactiveuser[msg.sender] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t\t\t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tTXCount[3]++;\n\n\t\tAirdrop(tokenAddress, amount);   \n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), 4);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tTXCount[5]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\ttoken_price[tokenAddress][1] \t= Currentprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n\t\t\n\t\temit onAddContractAddress(msg.sender, tokenAddress, Currentprice, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_divider) public restricted {\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\tuint256 HPM_ratio\t\t\t\t\t= div(100, HPM_divider);\n\t\t\n\t\temit onHoldplatformsetting(msg.sender, tokenAddress, HPM_status, HPM_divider, HPM_ratio, now);\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHoldplatformdeposit(msg.sender, amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHoldplatformwithdraw(msg.sender, amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender",
        "debug": "calldata_ldoh_4 + calldata_ldoh_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncalldata_ldoh_32 + 100: 0x5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x315d479200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,uint256,uint256,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "AddContractAddress(address,uint256,uint256,string,uint256)",
        "lineno": 38,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 23798,
        "code": "t {\n\t\n\t/*==============================\n    =            EVENTS            =\n    ==============================*/\n\t\n\tevent onCashbackCode\t(address indexed hodler, address cashbackcode);\t\t\n\tevent onAffiliateBonus\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\n\tevent onClaimTokens\t\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\t\t\n\tevent onHoldplatform\t(address indexed hodler, address indexed tokenAddress, string tokenSymbol, uint256 amount, uint256 endtime);\t\n\tevent onAddContractAddress(address indexed hodler, address indexed contracthodler, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth, uint256 _HodlingTime);\t\n\t\n\tevent onHoldplatformsetting(address indexed hodler, address indexed Tokenairdrop, bool HPM_status, uint256 HPM_divider, uint256 HPM_ratio, uint256 datetime);\t\n\tevent onHoldplatformdeposit(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onHoldplatformwithdraw(address indexed hodler, uint256 amount, uint256 newbalance, uint256 datetime);\t\n\tevent onReceiveAirdrop(address indexed hodler, uint256 amount, uint256 datetime);\t\n\t\n\t/*==============================\n    =          VARIABLES           =\n    ==============================*/   \n\n\t//-------o Affiliate = 12% o-------o Cashback = 16% o-------o Total Receive = 88% o-------o Without Cashback = 72% o-------o\t\n\t\n\t// Struct Database\n\n    struct Safe {\n        uint256 id;\t\t\t\t\t\t// 01 -- > Registration Number\n        uint256 amount;\t\t\t\t\t// 02 -- > Total amount of contribution to this transaction\n        uint256 endtime;\t\t\t\t// 03 -- > The Expiration Of A Hold Platform Based On Unix Time\n        address user;\t\t\t\t\t// 04 -- > The ETH address that you are using\n        address tokenAddress;\t\t\t// 05 -- > The Token Contract Address That You Are Using\n\t\tstring  tokenSymbol;\t\t\t// 06 -- > The Token Symbol That You Are Using\n\t\tuint256 amountbalance; \t\t\t// 07 -- > 88% from Contribution / 72% Without Cashback\n\t\tuint256 cashbackbalance; \t\t// 08 -- > 16% from Contribution / 0% Without Cashback\n\t\tuint256 lasttime; \t\t\t\t// 09 -- > The Last Time You Withdraw Based On Unix Time\n\t\tuint256 percentage; \t\t\t// 10 -- > The percentage of tokens that are unlocked every month ( Default = 3% )\n\t\tuint256 percentagereceive; \t\t// 11 -- > The Percentage You Have Received\n\t\tuint256 tokenreceive; \t\t\t// 12 -- > The Number Of Tokens You Have Received\n\t\tuint256 lastwithdraw; \t\t\t// 13 -- > The Last Amount You Withdraw\n\t\taddress referrer; \t\t\t\t// 14 -- > Your ETH referrer address\n\t\tbool \tcashbackstatus; \t\t// 15 -- > Cashback Status\n    }\n\t\n\tuint256 private idnumber; \t\t\t\t\t\t\t\t\t\t// 01 -- > ID number ( Start from 500 )\t\t\t\t\n\tuint256 public  TotalUser; \t\t\t\t\t\t\t\t\t\t// 02 -- > Total Smart Contract User\t\t\t\t\n\t\t\n\tmapping(address => address) \t\tpublic cashbackcode; \t\t// 03 -- > Cashback Code \t\t\t\t\t\n\tmapping(address => uint256[]) \t\tpublic idaddress;\t\t\t// 04 -- > Search Address by ID\t\t\t\n\tmapping(address => address[]) \t\tpublic afflist;\t\t\t\t// 05 -- > Affiliate List by ID\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic ContractSymbol; \t\t// 06 -- > Contract Address Symbol\t\t\t\t\n\tmapping(uint256 => Safe) \t\t\tprivate _safes; \t\t\t// 07 -- > Struct safe database\t\n\tmapping(address => bool) \t\t\tpublic contractaddress; \t// 08 -- > Contract Address \t\n\t\n\tmapping(address => uint256) \t\tpublic percent; \t\t\t// 09 -- > Monthly Unlock Percentage (Default 3%)\n\tmapping(address => uint256) \t\tpublic hodlingTime; \t\t// 10 -- > Length of hold time in seconds\n\tmapping(address => uint256) \t\tpublic TokenBalance; \t\t// 11 -- > Token Balance\t\t\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic maxcontribution; \t// 12 -- > Maximum Contribution\t\t\t\t\t\n\tmapping(address => uint256) \t\tpublic AllContribution; \t// 13 -- > Deposit amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic AllPayments; \t\t// 14 -- > Withdraw amount for all members\t\t\n\tmapping(address => uint256) \t\tpublic activeuser; \t\t\t// 15 -- > Active User Status\n\t\n\tmapping(uint256 => uint256) \t\tpublic TXCount; \t\t\t\n\t//1st uint256, Category >>> 1 = Total User, 2 = Total TX Hold, 3 = Total TX Unlock, 4 = Total TX Airdrop, 5 = Total TX Affiliate Withdraw\n\n\tmapping (address => mapping (uint256 => uint256)) \tpublic token_price; \t\t\t\t\n\t//2th uint256, Category >>> 1 = Current Price, 2 = ATH Price, 3 = ATL Price\t\t\n\t\t\t\n\tmapping (address => mapping (address => mapping (uint256 => uint256))) public Statistics;\n\t//3rd uint256, Category >>> 1 = LifetimeContribution, 2 = LifetimePayments, 3 = Affiliatevault, 4 = Affiliateprofit, 5 = ActiveContribution\n\t\n\t\t// Airdrop - Hold Platform (HPM)\n\t\t\t\t\t\t\t\t\n\taddress public Holdplatform_address;\t\n\tuint256 public Holdplatform_balance; \t\n\tmapping(address => bool) \tpublic Holdplatform_status;\n\tmapping(address => uint256) public Holdplatform_divider; \t\n\t\n\t/*==============================\n    =          CONSTRUCTOR         =\n    ==============================*/  \t\n   \n    constructor() public {     \t \t\n        idnumber \t\t\t\t= 500;\n\t\tHoldplatform_address\t= 0x23bAdee11Bf49c40669e9b09035f048e9146213e;\t//Change before deploy\n    }\n    \n\t\n\t/*==============================\n    =    AVAILABLE FOR EVERYONE    =\n    ==============================*/  \n\n//-------o Function 01 - Ethereum Payable\n\n    function () public payable {    \n        revert();\t \n    }\n\t\n\t\n//-------o Function 02 - Cashback Code\n\n    function CashbackCode(address _cashbackcode) public {\t\t\n\t\trequire(_cashbackcode != msg.sender);\t\t\n\t\tif (cashbackcode[msg.sender] == 0 && activeuser[_cashbackcode] >= 1) { \n\t\tcashbackcode[msg.sender] = _cashbackcode; }\n\t\telse { cashbackcode[msg.sender] = EthereumNodes; }\t\t\n\t\t\n\temit onCashbackCode(msg.sender, _cashbackcode);\t\t\n    } \n\t\n//-------o Function 03 - Contribute \n\n\t//--o 01\n    function Holdplatform(address tokenAddress, uint256 amount) public {\n        require(tokenAddress != 0x0);\n\t\trequire(amount > 0 && add(Statistics[msg.sender][tokenAddress][5], amount) <= maxcontribution[tokenAddress] );\n\t\t\n\t\tif (contractaddress[tokenAddress] == false) { revert(); } else { \t\t\n\t\tERC20Interface token \t\t\t= ERC20Interface(tokenAddress);       \n        require(token.transferFrom(msg.sender, address(this), amount));\t\n\t\t\n\t\tHodlTokens2(tokenAddress, amount);}\t\t\t\t\t\t\t\n\t}\n\t\n\t\t//--o 02\t\n    function HodlTokens2(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(amount, divider);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t\t\n\t\tHodlTokens3(tokenAddress, amount);\n\t}\n\t\n\t\n\t//--o 03\t\n    function HodlTokens3(address ERC, uint256 amount) private {\n\t\t\n\t\tuint256 AvailableBalances \t\t\t\t\t= div(mul(amount, 72), 100);\t\n\t\t\n\t\tif (cashbackcode[msg.sender] == 0 ) { //--o  Hold without cashback code\n\t\t\n\t\t\taddress ref\t\t\t\t\t\t\t\t= EthereumNodes;\n\t\t\tcashbackcode[msg.sender] \t\t\t\t= EthereumNodes;\n\t\t\tuint256 AvailableCashback \t\t\t\t= 0; \t\t\t\n\t\t\tuint256 zerocashback \t\t\t\t\t= div(mul(amount, 28), 100); \n\t\t\tStatistics[EthereumNodes][ERC][3] \t\t= add(Statistics[EthereumNodes][ERC][3], zerocashback);\n\t\t\tStatistics[EthereumNodes][ERC][4]\t\t= add(Statistics[EthereumNodes][ERC][4], zerocashback); \t\t\n\t\t\t\n\t\t} else { \t//--o  Cashback code has been activated\n\t\t\n\t\t\tref\t\t\t\t\t\t\t\t\t\t= cashbackcode[msg.sender];\n\t\t\tuint256 affcomission \t\t\t\t\t= div(mul(amount, 12), 100); \t\n\t\t\tAvailableCashback \t\t\t\t\t\t= div(mul(amount, 16), 100);\t\t\t\n\t\t\tuint256 ReferrerContribution \t\t\t= Statistics[ref][ERC][5];\t\t\n\t\t\tuint256 ReferralContribution\t\t\t= add(Statistics[ref][ERC][5], amount);\n\t\t\t\n\t\t\tif (ReferrerContribution >= ReferralContribution) { //--o  if referrer contribution >= referral contribution\n\t\t\n\t\t\t\tStatistics[ref][ERC][3] \t\t\t= add(Statistics[ref][ERC][3], affcomission); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], affcomission); \t\n\t\t\t\t\n\t\t\t} else {\t\t\t\t\t\t\t\t\t\t\t//--o  if referral contribution > referrer contribution\n\t\t\t\n\t\t\t\tuint256 Newbie \t\t\t\t\t\t= div(mul(ReferrerContribution, 12), 100); \t\t\t\n\t\t\t\tStatistics[ref][ERC][3]\t\t\t\t= add(Statistics[ref][ERC][3], Newbie); \n\t\t\t\tStatistics[ref][ERC][4] \t\t\t= add(Statistics[ref][ERC][4], Newbie); \n\t\t\t\t\n\t\t\t\tuint256 NodeFunds \t\t\t\t\t= sub(affcomission, Newbie);\t\n\t\t\t\tStatistics[EthereumNodes][ERC][3] \t= add(Statistics[EthereumNodes][ERC][3], NodeFunds);\n\t\t\t\tStatistics[EthereumNodes][ERC][4] \t= add(Statistics[EthereumNodes][ERC][4], NodeFunds); \t\t\t\t\n\t\t\t}\n\t\t} \n\n\t\tHodlTokens4(ERC, amount, AvailableBalances, AvailableCashback, ref); \t\n\t}\n\t//--o 04\t\n    function HodlTokens4(address ERC, uint256 amount, uint256 AvailableBalances, uint256 AvailableCashback, address ref) private {\n\t    \n\t    ERC20Interface token \t= ERC20Interface(ERC); \t\n\t\tuint256 TokenPercent \t= percent[ERC];\t\n\t\tuint256 TokenHodlTime \t= hodlingTime[ERC];\t\n\t\tuint256 HodlTime\t\t= add(now, TokenHodlTime);\n\t\t\n\t\tuint256 AM = amount; \tuint256 AB = AvailableBalances;\t\tuint256 AC = AvailableCashback;\t\n\t\tamount \t= 0; AvailableBalances = 0; AvailableCashback = 0;\n\t\t\n\t\t_safes[idnumber] = Safe(idnumber, AM, HodlTime, msg.sender, ERC, token.symbol(), AB, AC, now, TokenPercent, 0, 0, 0, ref, false);\t\n\t\t\t\t\n\t\tStatistics[msg.sender][ERC][1]\t\t\t= add(Statistics[msg.sender][ERC][1], AM); \n\t\tStatistics[msg.sender][ERC][5]  \t\t= add(Statistics[msg.sender][ERC][5], AM); \t\t\t\n\t\tAllContribution[ERC] \t\t\t\t\t= add(AllContribution[ERC], AM);   \t\n        TokenBalance[ERC] \t\t\t\t\t\t= add(TokenBalance[ERC], AM);  \n\n\t\tif(activeuser[msg.sender] == 1 ) {\n        idaddress[msg.sender].push(idnumber); idnumber++; TXCount[2]++;  }\t\t\n\t\telse { \n\t\tafflist[ref].push(msg.sender); idaddress[msg.sender].push(idnumber); idnumber++; TXCount[1]++; TXCount[2]++; TotalUser++;   }\n\t\t\n\t\tactiveuser[msg.sender] \t\t\t\t\t= 1;  \t\n\t\t\n        emit onHoldplatform(msg.sender, ERC, token.symbol(), AM, HodlTime);\t\t\n\t\t\t\n\t}\n\n//-------o Function 05 - Claim Token That Has Been Unlocked\n    function ClaimTokens(address tokenAddress, uint256 id) public {\n        require(tokenAddress != 0x0);\n        require(id != 0);        \n        \n        Safe storage s = _safes[id];\n        require(s.user == msg.sender);  \n\t\trequire(s.tokenAddress == tokenAddress);\n\t\t\n\t\tif (s.amountbalance == 0) { revert(); } else { UnlockToken2(tokenAddress, id); }\n    }\n    //--o 01\n    function UnlockToken2(address ERC, uint256 id) private {\n        Safe storage s = _safes[id];      \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= s.amountbalance;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\t\t     \n        if(s.endtime < now){ //--o  Hold Complete\n        \n\t\tuint256 amounttransfer \t\t\t\t\t= add(s.amountbalance, s.cashbackbalance);\n\t\tStatistics[msg.sender][ERC][5] \t\t\t= sub(Statistics[s.user][s.tokenAddress][5], s.amount); \t\t\n\t\ts.lastwithdraw \t\t\t\t\t\t\t= s.amountbalance;   s.amountbalance = 0;   s.lasttime = now;  \t\t\n\t\tPayToken(s.user, s.tokenAddress, amounttransfer); \n\t\t\n\t\t    if(s.cashbackbalance > 0 && s.cashbackstatus == false || s.cashbackstatus == true) {\n            s.tokenreceive \t= div(mul(s.amount, 88), 100) ; \ts.percentagereceive = mul(1000000000000000000, 88);\n            }\n\t\t\telse {\n\t\t\ts.tokenreceive \t= div(mul(s.amount, 72), 100) ;     s.percentagereceive = mul(1000000000000000000, 72);\n\t\t\t}\n\t\t\t\n\t\ts.cashbackbalance = 0;\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n\t\t\n        } else { UnlockToken3(ERC, s.id); }\n        \n    }   \n\t//--o 02\n\tfunction UnlockToken3(address ERC, uint256 id) private {\t\t\n\t\tSafe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\t\t\n\t\t\t\n\t\tuint256 timeframe  \t\t\t= sub(now, s.lasttime);\t\t\t                            \n\t\tuint256 CalculateWithdraw \t= div(mul(div(mul(s.amount, s.percentage), 100), timeframe), 2592000); // 2592000 = seconds30days\n\t\t\t\t\t\t\t//--o   = s.amount * s.percentage / 100 * timeframe / seconds30days\t;\n\t\t                         \n\t\tuint256 MaxWithdraw \t\t= div(s.amount, 10);\n\t\t\t\n\t\t//--o Maximum withdraw before unlocked, Max 10% Accumulation\n\t\t\tif (CalculateWithdraw > MaxWithdraw) { uint256 MaxAccumulation = MaxWithdraw; } else { MaxAccumulation = CalculateWithdraw; }\n\t\t\t\n\t\t//--o Maximum withdraw = User Amount Balance   \n\t\t\tif (MaxAccumulation > s.amountbalance) { uint256 realAmount1 = s.amountbalance; } else { realAmount1 = MaxAccumulation; }\n\t\t\t\n\t\tuint256 realAmount\t\t\t= add(s.cashbackbalance, realAmount1); \t\t\t\n\t\tuint256 newamountbalance \t= sub(s.amountbalance, realAmount1);\n\t\ts.cashbackbalance \t\t\t= 0; \n\t\ts.amountbalance \t\t\t= newamountbalance;\n\t\ts.lastwithdraw \t\t\t\t= realAmount; \n\t\ts.lasttime \t\t\t\t\t= now; \t\t\n\t\t\t\n\t\tUnlockToken4(ERC, id, newamountbalance, realAmount);\t\t\n    }   \n\t//--o 03\n    function UnlockToken4(address ERC, uint256 id, uint256 newamountbalance, uint256 realAmount) private {\n        Safe storage s = _safes[id];\n        \n        require(s.id != 0);\n        require(s.tokenAddress == ERC);\n\n        uint256 eventAmount\t\t\t\t= realAmount;\n        address eventTokenAddress \t\t= s.tokenAddress;\n        string memory eventTokenSymbol \t= s.tokenSymbol;\t\t\n\n\t\tuint256 tokenaffiliate \t\t= div(mul(s.amount, 12), 100) ; \n\t\tuint256 maxcashback \t\t= div(mul(s.amount, 16), 100) ; \t\n\t\t\n\t\t\tif (cashbackcode[msg.sender] == EthereumNodes  ) {\n\t\t\tuint256 tokenreceived \t= sub(sub(sub(s.amount, tokenaffiliate), maxcashback), newamountbalance) ;\t\n\t\t\t}else { tokenreceived \t= sub(sub(s.amount, tokenaffiliate), newamountbalance) ;}\n\t\t\t\n\t\tuint256 percentagereceived \t= div(mul(tokenreceived, 100000000000000000000), s.amount) ; \t\n\t\t\n\t\ts.tokenreceive \t\t\t\t\t= tokenreceived; \n\t\ts.percentagereceive \t\t\t= percentagereceived; \t\t\n\n\t\tPayToken(s.user, s.tokenAddress, realAmount);           \t\t\n\t\temit onClaimTokens(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \n\t//--o Pay Token\n    function PayToken(address user, address tokenAddress, uint256 amount) private {\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t\t\t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t\t\t\t= add(AllPayments[tokenAddress], amount);\n\t\tStatistics[msg.sender][tokenAddress][2]  \t= add(Statistics[user][tokenAddress][2], amount); \n\t\t\n\t\tTXCount[3]++;\n\n\t\tAirdrop(tokenAddress, amount);   \n\t}\n\t\n//-------o Function 05 - Airdrop\n\n    function Airdrop(address tokenAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdplatform_status[tokenAddress] == true) {\n\t\trequire(Holdplatform_balance > 0 );\n\t\t\n\t\tuint256 divider \t\t= Holdplatform_divider[tokenAddress];\n\t\tuint256 airdrop\t\t\t= div(div(amount, divider), 4);\n\t\t\n\t\taddress airdropaddress\t= Holdplatform_address;\n\t\tERC20Interface token \t= ERC20Interface(airdropaddress);        \n        token.transfer(msg.sender, airdrop);\n\t\t\n\t\tHoldplatform_balance\t= sub(Holdplatform_balance, airdrop);\n\t\tTXCount[4]++;\n\t\t\n\t\temit onReceiveAirdrop(msg.sender, airdrop, now);\n\t\t}\t\n\t}\n\t\n//-------o Function 06 - Get How Many Contribute ?\n\n    function GetUserSafesLength(address hodler) public view returns (uint256 length) {\n        return idaddress[hodler].length;\n    }\n\t\n//-------o Function 07 - Get How Many Affiliate ?\n\n    function GetTotalAffiliate(address hodler) public view returns (uint256 length) {\n        return afflist[hodler].length;\n    }\n    \n//-------o Function 08 - Get complete data from each user\n\tfunction GetSafe(uint256 _id) public view\n        returns (uint256 id, address user, address tokenAddress, uint256 amount, uint256 endtime, string tokenSymbol, uint256 amountbalance, uint256 cashbackbalance, uint256 lasttime, uint256 percentage, uint256 percentagereceive, uint256 tokenreceive)\n    {\n        Safe storage s = _safes[_id];\n        return(s.id, s.user, s.tokenAddress, s.amount, s.endtime, s.tokenSymbol, s.amountbalance, s.cashbackbalance, s.lasttime, s.percentage, s.percentagereceive, s.tokenreceive);\n    }\n\t\n//-------o Function 09 - Withdraw Affiliate Bonus\n\n    function WithdrawAffiliate(address user, address tokenAddress) public {  \n\t\trequire(tokenAddress != 0x0);\t\t\n\t\trequire(Statistics[user][tokenAddress][3] > 0 );\n\t\t\n\t\tuint256 amount = Statistics[msg.sender][tokenAddress][3];\n\t\tStatistics[msg.sender][tokenAddress][3] = 0;\n\t\t\n\t\tTokenBalance[tokenAddress] \t\t= sub(TokenBalance[tokenAddress], amount); \n\t\tAllPayments[tokenAddress] \t\t= add(AllPayments[tokenAddress], amount);\n\t\t\n\t\tuint256 eventAmount\t\t\t\t= amount;\n        address eventTokenAddress \t\t= tokenAddress;\n        string \tmemory eventTokenSymbol = ContractSymbol[tokenAddress];\t\n        \n        ERC20Interface token = ERC20Interface(tokenAddress);        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(user, amount);\n\t\t\n\t\tStatistics[user][tokenAddress][2] \t= add(Statistics[user][tokenAddress][2], amount);\n\n\t\tTXCount[5]++;\t\t\n\t\t\n\t\temit onAffiliateBonus(msg.sender, eventTokenAddress, eventTokenSymbol, eventAmount, now);\n    } \t\t\n\t\n\t\n\t/*==============================\n    =          RESTRICTED          =\n    ==============================*/  \t\n\n//-------o 01 Add Contract Address\t\n    function AddContractAddress(address tokenAddress, uint256 Currentprice, uint256 _maxcontribution, string _ContractSymbol, uint256 _PercentPermonth) public restricted {\n\t\tuint256 newSpeed\t= _PercentPermonth;\n\t\trequire(newSpeed >= 3 && newSpeed <= 12);\n\t\t\n\t\tpercent[tokenAddress] \t\t\t= newSpeed;\t\n\t\tContractSymbol[tokenAddress] \t= _ContractSymbol;\n\t\tmaxcontribution[tokenAddress] \t= _maxcontribution;\t\n\t\t\n\t\tuint256 _HodlingTime \t\t\t= mul(div(72, newSpeed), 30);\n\t\tuint256 HodlTime \t\t\t\t= _HodlingTime * 1 days;\t\t\n\t\thodlingTime[tokenAddress] \t\t= HodlTime;\t\n\t\t\n\t\ttoken_price[tokenAddress][1] \t= Currentprice;\n\t\tcontractaddress[tokenAddress] \t= true;\n\t\t\n\t\temit onAddContractAddress(msg.sender, tokenAddress, Currentprice, _maxcontribution, _ContractSymbol, _PercentPermonth, HodlTime);\n    }\n\t\n//-------o 02 - Update Token Price (USD)\n\t\n\tfunction TokenPrice(address tokenAddress, uint256 Currentprice, uint256 ATHprice, uint256 ATLprice) public restricted  {\n\t\t\n\t\tif (Currentprice > 0  ) { token_price[tokenAddress][1] = Currentprice; }\n\t\tif (ATHprice > 0  ) { token_price[tokenAddress][2] = ATHprice; }\n\t\tif (ATLprice > 0  ) { token_price[tokenAddress][3] = ATLprice; }\n\n    }\n\t\n//-------o 03 Hold Platform\n    function Holdplatform_Airdrop(address tokenAddress, bool HPM_status, uint256 HPM_divider) public restricted {\n\t\t\n\t\tHoldplatform_status[tokenAddress] \t= HPM_status;\t\n\t\tHoldplatform_divider[tokenAddress] \t= HPM_divider;\t// Airdrop = 100% : Divider\n\t\tuint256 HPM_ratio\t\t\t\t\t= div(100, HPM_divider);\n\t\t\n\t\temit onHoldplatformsetting(msg.sender, tokenAddress, HPM_status, HPM_divider, HPM_ratio, now);\n\t\n    }\t\n\t//--o Deposit\n\tfunction Holdplatform_Deposit(uint256 amount) restricted public {\n\t\trequire(amount > 0 );\n        \n       \tERC20Interface token = ERC20Interface(Holdplatform_address);       \n        require(token.transferFrom(msg.sender, address(this), amount));\n\t\t\n\t\tuint256 newbalance\t\t= add(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n\t\t\n\t\temit onHoldplatformdeposit(msg.sender, amount, newbalance, now);\n    }\n\t//--o Withdraw\n\tfunction Holdplatform_Withdraw(uint256 amount) restricted public {\n        require(Holdplatform_balance > 0);\n        \n\t\tuint256 newbalance\t\t= sub(Holdplatform_balance, amount) ;\n\t\tHoldplatform_balance \t= newbalance;\n        \n        ERC20Interface token = ERC20Interface(Holdplatform_address);\n        \n        require(token.balanceOf(address(this)) >= amount);\n        token.transfer(msg.sender, amount);\n\t\t\n\t\temit onHoldplatformwithdraw(msg.sender, amount, newbalance, now);\n    }\n\t\n//-------o 04 - Return All Tokens To Their Respective Addresses    \n    function ReturnAllTokens() restricted public\n    {\n\n        for(uint256 i = 1; i < idnumber; i++) {            \n            Safe storage s = _safes[i];\n            if (s.id != 0) {\n\t\t\t\t\n\t\t\t\tif(s.amountbalance > 0) {\n\t\t\t\t\tuint256 amount = add(s.amountbalance, s.cashbackbalance);\n\t\t\t\t\tPayToken(s.user, s.tokenAddress, amount);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\n                \n            }\n        }\n\t\t\n    }   \n\t\n\t\n\t/*==============================\n    =      SAFE MATH FUNCTIONS     =\n    ==============================*/  \t\n\t\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b; \n\t\trequire(c / a == b);\n\t\treturn c;\n\t}\n\t\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b > 0); \n\t\tuint256 c = a / b;\n\t\treturn c;\n\t}\n\t\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\trequire(b <= a);\n\t\tuint256 c = a - b;\n\t\treturn c;\n\t}\n\t\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a);\n\t\treturn c;\n\t}\n    \n}\n\n\n\t/*==============================\n    =        ERC20 Interface       =\n    ==============================*/ \n\ncontract ERC20Interface {\n\n    uint256 public totalSupply;\n    uint256 public decimals;\n    \n    function symbol() public view returns (string);\n    function balanceOf(address _owner) public view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ldoh_4 + calldata_ldoh_32 + 68: 0x1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\ncalldata_ldoh_32 + 100: 0x4\nstorage_0: 0x0\ncaller: 0x0\ncalldata_ldoh_0: 0x315d479200000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `AddContractAddress(address,uint256,uint256,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ca935e5c66bcd9ed690e80e2fecee2452e00172.sol",
        "function": "AddContractAddress(address,uint256,uint256,string,uint256)",
        "lineno": 38,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}