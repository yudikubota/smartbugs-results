{"error": null, "issues": [{"address": 1073, "debug": "calldata_LICToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setLockAccInfo(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 415, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2767, "code": "\n\n    modifier authorized(bytes4 sig) {\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_4: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_LICToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "stop()", "lineno": 62, "title": "Exception state", "type": "Informational"}, {"address": 2965, "code": " }\n\n}\n\ncontrac", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "stop()", "lineno": 95, "title": "State change after external call", "type": "Warning"}, {"address": 2996, "code": "pped = true;\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_LICToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "approve(address,uint256)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 3241, "code": "\n\n    modifier authorized(bytes4 sig) {\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_4: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_LICToken_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setOwner(address)", "lineno": 62, "title": "Exception state", "type": "Informational"}, {"address": 3446, "code": "pped = true;\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_LICToken_0: 0x8402181f00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "pull(address,uint128)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 3772, "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 415, "title": "Exception state", "type": "Informational"}, {"address": 3914, "code": "\n\n    modifier authorized(bytes4 sig) {\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_4: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_LICToken_0: 0x69d3e20e00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "mint(uint128)", "lineno": 62, "title": "Exception state", "type": "Informational"}, {"address": 3939, "code": "pped = true;\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncaller: 0x0\ncalldata_LICToken_0: 0x69d3e20e00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "mint(uint128)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 4199, "code": "n transferByLock(address to", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xffffffffffffffffffffffffffffffffffffff0000\ncaller: 0x0\ncalldata_LICToken_0: 0x69d3e20e00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "mint(uint128)", "lineno": 365, "title": "Exception state", "type": "Informational"}, {"address": 6265, "code": "pped = true;\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xff00\ncalldata_LICToken_0: 0x3452f51d00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "push(address,uint128)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 8685, "code": "uth, DSNote {\n\n    bool public st", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "_function_0x7a9e5e4b", "lineno": 82, "title": "Message call to external contract", "type": "Informational"}, {"address": 8685, "code": "uth, DSNote {\n\n    bool public st", "debug": "", "description": "A possible transaction order independence vulnerability exists in function _function_0x7a9e5e4b. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "_function_0x7a9e5e4b", "lineno": 82, "title": "Transaction order dependence", "type": "Warning"}, {"address": 9068, "code": "r(src, dst, wad);\n        \n  ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xfffffffffffffffffffffffffffffffe\ncalldata_LICToken_32 + 4: 0xffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_LICToken_0: 0x8402181f00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "pull(address,uint128)", "lineno": 303, "title": "Exception state", "type": "Informational"}, {"address": 9204, "code": "n true;\n    }\n    \n    function approve(ad", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xffffffffffffffffffffffffffffffff\ncalldata_LICToken_32 + 4: 0xffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_LICToken_0: 0x8402181f00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "pull(address,uint128)", "lineno": 305, "title": "Exception state", "type": "Informational"}, {"address": 9865, "code": "     ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x3000000000000000200000000000000000000000000000001178c0200200004f\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xffffffffffffffffffffffffffffffffe0010000000000000482060560028000\ncalldata_LICToken_32 + 4: 0x80000000000000000000000000000000\nstorage_4: 0x0\ncalldata_LICToken_0: 0x3452f51d00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `push(address,uint128)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "push(address,uint128)", "lineno": 108, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9877, "code": "256 z) {\n        assert(", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffff40000000c5bbbbb87521dcd9f4040028\ncalldata_LICToken_4: 0xffedfedaf3800001c5eab5b25c1407a9\ncaller: 0x0\ncalldata_LICToken_0: 0x69d3e20e00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "mint(uint128)", "lineno": 107, "title": "Exception state", "type": "Informational"}, {"address": 9985, "code": "ss src, address dst, uint wad) publi", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffe\ncalldata_LICToken_32 + 4: 0xffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_LICToken_0: 0x3452f51d00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "push(address,uint128)", "lineno": 295, "title": "Exception state", "type": "Informational"}, {"address": 10463, "code": ") accs;\n    \n    mapping(address => string) accsInfo;\n\n    function LICToken() public {\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    function transferByLock(address to,uint c,uint256 lockTime,uint stages) public {\n        assert(owner == msg.sender);\n        assert(_balances[msg.sender] >= c);\n        assert(stages >= 1);\n        uint256 nowtime = now;\n        assert(lockTime > nowtime);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], c);\n        uint256 waittime = div(sub(lockTime, nowtime), stages);\n        for(uint i = 1; i <= stages; i++){\n            accs[to].push(TokenData(div(c, stages),add(now, mul(i, waittime))));\n        }\n        //\u53d1\u9001\u4e8b\u4ef6\n        Transfer(msg.sender, to, c);\n    }\n\n    function unlock() public {\n        uint[] memory d_list = new uint[](accs[msg.sender].length);\n        uint dlen = 0;\n        for(uint i = 0 ; i < accs[msg.sender].length; i++ ) {\n            if ( accs[msg.sender][i].unlockTime < now){\n                _balances[msg.sender] = add(_balances[msg.sender], accs[msg.sender][i].count);\n                d_list[dlen] = i;\n                dlen++;\n            }\n        }\n        for(i = 0;i<dlen;i++){\n            delete (accs[msg.sender][d_list[i]]);\n        }\n    }\n\n    function getLockAccount(address addr, uint isAvailable) public constant returns (uint256) {\n        uint256 total = 0;\n        for(uint i = 0 ; i < accs[addr].length; i++ ) {\n            if ((isAvailable == 1) && (accs[addr][i].unlockTime > now)) {\n                continue;\n            }\n            total = add(total, accs[addr][i].count);\n        }\n        return total;\n    }\n    \n    function setLockAccInfo(address addr, string info) public {\n        assert(owner == msg.sender);\n        accsInfo[addr] = info;\n    }\n    \n    function getLockAccInfo(address addr) public constant returns (string) {\n        return accsInfo[addr];\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncaller: 0x0\nstorage_4: 0x0\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setLockAccInfo(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 328, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10492, "code": ") accs;\n    \n    mapping(address => string) accsInfo;\n\n    function LICToken() public {\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    function transferByLock(address to,uint c,uint256 lockTime,uint stages) public {\n        assert(owner == msg.sender);\n        assert(_balances[msg.sender] >= c);\n        assert(stages >= 1);\n        uint256 nowtime = now;\n        assert(lockTime > nowtime);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], c);\n        uint256 waittime = div(sub(lockTime, nowtime), stages);\n        for(uint i = 1; i <= stages; i++){\n            accs[to].push(TokenData(div(c, stages),add(now, mul(i, waittime))));\n        }\n        //\u53d1\u9001\u4e8b\u4ef6\n        Transfer(msg.sender, to, c);\n    }\n\n    function unlock() public {\n        uint[] memory d_list = new uint[](accs[msg.sender].length);\n        uint dlen = 0;\n        for(uint i = 0 ; i < accs[msg.sender].length; i++ ) {\n            if ( accs[msg.sender][i].unlockTime < now){\n                _balances[msg.sender] = add(_balances[msg.sender], accs[msg.sender][i].count);\n                d_list[dlen] = i;\n                dlen++;\n            }\n        }\n        for(i = 0;i<dlen;i++){\n            delete (accs[msg.sender][d_list[i]]);\n        }\n    }\n\n    function getLockAccount(address addr, uint isAvailable) public constant returns (uint256) {\n        uint256 total = 0;\n        for(uint i = 0 ; i < accs[addr].length; i++ ) {\n            if ((isAvailable == 1) && (accs[addr][i].unlockTime > now)) {\n                continue;\n            }\n            total = add(total, accs[addr][i].count);\n        }\n        return total;\n    }\n    \n    function setLockAccInfo(address addr, string info) public {\n        assert(owner == msg.sender);\n        accsInfo[addr] = info;\n    }\n    \n    function getLockAccInfo(address addr) public constant returns (string) {\n        return accsInfo[addr];\n    }\n}", "debug": "calldata_LICToken_4 + calldata_LICToken_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_4: 0x0\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setLockAccInfo(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 328, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10506, "code": ") accs;\n    \n    mapping(address => string) accsInfo;\n\n    function LICToken() public {\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    function transferByLock(address to,uint c,uint256 lockTime,uint stages) public {\n        assert(owner == msg.sender);\n        assert(_balances[msg.sender] >= c);\n        assert(stages >= 1);\n        uint256 nowtime = now;\n        assert(lockTime > nowtime);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], c);\n        uint256 waittime = div(sub(lockTime, nowtime), stages);\n        for(uint i = 1; i <= stages; i++){\n            accs[to].push(TokenData(div(c, stages),add(now, mul(i, waittime))));\n        }\n        //\u53d1\u9001\u4e8b\u4ef6\n        Transfer(msg.sender, to, c);\n    }\n\n    function unlock() public {\n        uint[] memory d_list = new uint[](accs[msg.sender].length);\n        uint dlen = 0;\n        for(uint i = 0 ; i < accs[msg.sender].length; i++ ) {\n            if ( accs[msg.sender][i].unlockTime < now){\n                _balances[msg.sender] = add(_balances[msg.sender], accs[msg.sender][i].count);\n                d_list[dlen] = i;\n                dlen++;\n            }\n        }\n        for(i = 0;i<dlen;i++){\n            delete (accs[msg.sender][d_list[i]]);\n        }\n    }\n\n    function getLockAccount(address addr, uint isAvailable) public constant returns (uint256) {\n        uint256 total = 0;\n        for(uint i = 0 ; i < accs[addr].length; i++ ) {\n            if ((isAvailable == 1) && (accs[addr][i].unlockTime > now)) {\n                continue;\n            }\n            total = add(total, accs[addr][i].count);\n        }\n        return total;\n    }\n    \n    function setLockAccInfo(address addr, string info) public {\n        assert(owner == msg.sender);\n        accsInfo[addr] = info;\n    }\n    \n    function getLockAccInfo(address addr) public constant returns (string) {\n        return accsInfo[addr];\n    }\n}", "debug": "calldata_LICToken_4 + calldata_LICToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_4: 0x0\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setLockAccInfo(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 328, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10528, "code": ") accs;\n    \n    mapping(address => string) accsInfo;\n\n    function LICToken() public {\n    }\n\n    function transfer(address dst, uint wad) public stoppable note returns (bool) {\n        return super.transfer(dst, wad);\n    }\n    function transferFrom(\n        address src, address dst, uint wad\n    ) public stoppable note returns (bool) {\n        return super.transferFrom(src, dst, wad);\n    }\n    function approve(address guy, uint wad) public stoppable note returns (bool) {\n        return super.approve(guy, wad);\n    }\n\n    function push(address dst, uint128 wad) public returns (bool) {\n        return transfer(dst, wad);\n    }\n    function pull(address src, uint128 wad) public returns (bool) {\n        return transferFrom(src, msg.sender, wad);\n    }\n\n    function mint(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = add(_balances[msg.sender], wad);\n        _supply = add(_supply, wad);\n    }\n    function burn(uint128 wad) public auth stoppable note {\n        assert(owner == msg.sender);\n        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n        _supply = sub(_supply, wad);\n    }\n\n    function transferByLock(address to,uint c,uint256 lockTime,uint stages) public {\n        assert(owner == msg.sender);\n        assert(_balances[msg.sender] >= c);\n        assert(stages >= 1);\n        uint256 nowtime = now;\n        assert(lockTime > nowtime);\n\n        _balances[msg.sender] = sub(_balances[msg.sender], c);\n        uint256 waittime = div(sub(lockTime, nowtime), stages);\n        for(uint i = 1; i <= stages; i++){\n            accs[to].push(TokenData(div(c, stages),add(now, mul(i, waittime))));\n        }\n        //\u53d1\u9001\u4e8b\u4ef6\n        Transfer(msg.sender, to, c);\n    }\n\n    function unlock() public {\n        uint[] memory d_list = new uint[](accs[msg.sender].length);\n        uint dlen = 0;\n        for(uint i = 0 ; i < accs[msg.sender].length; i++ ) {\n            if ( accs[msg.sender][i].unlockTime < now){\n                _balances[msg.sender] = add(_balances[msg.sender], accs[msg.sender][i].count);\n                d_list[dlen] = i;\n                dlen++;\n            }\n        }\n        for(i = 0;i<dlen;i++){\n            delete (accs[msg.sender][d_list[i]]);\n        }\n    }\n\n    function getLockAccount(address addr, uint isAvailable) public constant returns (uint256) {\n        uint256 total = 0;\n        for(uint i = 0 ; i < accs[addr].length; i++ ) {\n            if ((isAvailable == 1) && (accs[addr][i].unlockTime > now)) {\n                continue;\n            }\n            total = add(total, accs[addr][i].count);\n        }\n        return total;\n    }\n    \n    function setLockAccInfo(address addr, string info) public {\n        assert(owner == msg.sender);\n        accsInfo[addr] = info;\n    }\n    \n    function getLockAccInfo(address addr) public constant returns (string) {\n        return accsInfo[addr];\n    }\n}", "debug": "calldata_LICToken_4 + calldata_LICToken_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_LICToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_4: 0x0\ncalldata_LICToken_0: 0x54e031cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_LICToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setLockAccInfo(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/40/0xe8aeaf2777aa2c6d3d4312b07ac2ead1cf92040e.sol", "function": "setLockAccInfo(address,string)", "lineno": 328, "title": "Integer Overflow ", "type": "Warning"}], "success": true}