{"error": null, "issues": [{"address": 747, "code": "ublic {\n\n        // Make sure this package has not already been claimed (and claim it)\n        uint256 redeemedBlock = _redeemed[index / 256];\n        uint256 redeemedMask = (uint256(1) << uint256(index % 256));\n        require((redeemedBlock & redeemedMask) == 0);\n        _redeemed[index / 256] = redeemedBlock | redeemedMask;\n\n        // Compute the merkle root\n        bytes32 node = keccak256(index, recipient, amount);\n        uint256 path = index;\n        for (uint16 i = 0; i < merkleProof.length; i++) {\n            if ((path & 0x01) == 1) {\n                node = keccak256(merkleProof[i], node);\n            } else {\n                node = keccak256(node, merkleProof[i]);\n            }\n            path /= 2;\n        }\n\n        // Check the merkle proof\n        require(node == _rootHash);\n\n        // Redeem!\n        _balances[recipient] += amount;\n        _totalSupply += amount;\n\n        Transfer(0, recipient, amount);\n    }\n}", "debug": "calldata_AirDropToken_32 + 68: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AirDropToken_0: 0x3289e00400000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `redeemPackage(uint256,address,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "redeemPackage(uint256,address,uint256,bytes32[])", "lineno": 98, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1250, "code": "opToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _rootHash = rootHash;\n\n        if (premine > 0) {\n            _balances[msg.sender] = premine;\n            _totalSupply = premine;\n            Transfer(0, msg.sender, premine);\n        }\n    }\n\n    function name() public co", "debug": "calldata_AirDropToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AirDropToken_0: 0xafc8fbc600000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `MerkleAirDropToken(string,string,uint8,bytes32,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "MerkleAirDropToken(string,string,uint8,bytes32,uint256)", "lineno": 21, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2462, "code": "n true;\n    }\n\n    func", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AirDropToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_AirDropToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AirDropToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_AirDropToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 81, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3136, "debug": "calldata_AirDropToken_4 + calldata_AirDropToken_32 + 68: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AirDropToken_32_+_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_AirDropToken_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_AirDropToken_4: 0x1\n2_EXP_Concat(0, Extract(7, 0, calldata_AirDropToken_4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_UDiv(calldata_AirDropToken_4,_256): 0x0\ncalldata_AirDropToken_0: 0x3289e00400000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\nstorage_4: 0x0\nKECCAC_mem_128 +\n32 +\n32*calldata_AirDropToken_4 + calldata_AirDropToken_32 + 68): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `redeemPackage(uint256,address,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "redeemPackage(uint256,address,uint256,bytes32[])", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3152, "debug": "calldata_AirDropToken_4 + calldata_AirDropToken_32 + 68: 0x1\nstorage_3: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_AirDropToken_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_AirDropToken_4: 0x1\n2_EXP_Concat(0, Extract(7, 0, calldata_AirDropToken_4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_UDiv(calldata_AirDropToken_4,_256): 0x0\ncalldata_AirDropToken_0: 0x3289e00400000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\nstorage_4: 0x0\nKECCAC_mem_128 +\n32 +\n32*calldata_AirDropToken_4 + calldata_AirDropToken_32 + 68): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `redeemPackage(uint256,address,uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "redeemPackage(uint256,address,uint256,bytes32[])", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3793, "code": "ount);\n\n        return ", "debug": "calldata_AirDropToken_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_AirDropToken_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_AirDropToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "transfer(address,uint256)", "lineno": 64, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4371, "code": "ntract AirDropToken {\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n\n    string _name;\n    string _symbol;\n    uint8 _decimals;\n\n    uint256 _totalSupply;\n\n    bytes32 _rootHash;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping(address => uint256)) _allowed;\n\n    mapping (uint256 => uint256) _redeemed;\n\n    function MerkleAirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _rootHash = rootHash;\n\n        if (premine > 0) {\n            _balances[msg.sender] = premine;\n            _totalSupply = premine;\n            Transfer(0, msg.sender, premine);\n        }\n    }\n\n    function name() public constant returns (string name) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string symbol) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8 decimals) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint256 totalSupply) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n         return _balances[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\n        return _allowed[tokenOwner][spender];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool success) {\n        if (_balances[msg.sender] < amount) { return false; }\n\n        _balances[msg.sender] -= amount;\n        _balances[to] += amount;\n\n        Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\n\n        if (_allowed[from][msg.sender] < amount || _balances[from] < amount) {\n            return false;\n        }\n\n        _balances[from] -= amount;\n        _allowed[from][msg.sender] -= amount;\n        _balances[to] += amount;\n\n        Transfer(from, to, amount);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool success) {\n        _allowed[msg.sender][spender] = amount;\n\n        Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function redeemed(uint256 index) public constant returns (bool redeemed) {\n        uint256 redeemedBlock = _redeemed[index / 256];\n        uint256 redeemedMask = (uint256(1) << uint256(index % 256));\n        return ((redeemedBlock & redeemedMask) != 0);\n    }\n\n    function redeemPackage(uint256 index, address recipient, uint256 amount, bytes32[] merkleProof) public {\n\n        // Make sure this package has not already been claimed (and claim it)\n        uint256 redeemedBlock = _redeemed[index / 256];\n        uint256 redeemedMask = (uint256(1) << uint256(index % 256));\n        require((redeemedBlock & redeemedMask) == 0);\n        _redeemed[index / 256] = redeemedBlock | redeemedMask;\n\n        // Compute the merkle root\n        bytes32 node = keccak256(index, recipient, amount);\n        uint256 path = index;\n        for (uint16 i = 0; i < merkleProof.length; i++) {\n            if ((path & 0x01) == 1) {\n                node = keccak256(merkleProof[i], node);\n            } else {\n                node = keccak256(node, merkleProof[i]);\n            }\n            path /= 2;\n        }\n\n        // Check the merkle proof\n        require(node == _rootHash);\n\n        // Redeem!\n        _balances[recipient] += amount;\n        _totalSupply += amount;\n\n        Transfer(0, recipient, amount);\n    }\n}", "debug": "calldata_AirDropToken_4 + calldata_AirDropToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_AirDropToken_0: 0xafc8fbc600000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `MerkleAirDropToken(string,string,uint8,bytes32,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "MerkleAirDropToken(string,string,uint8,bytes32,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4385, "code": "ntract AirDropToken {\n\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n\n    string _name;\n    string _symbol;\n    uint8 _decimals;\n\n    uint256 _totalSupply;\n\n    bytes32 _rootHash;\n\n    mapping (address => uint256) _balances;\n    mapping (address => mapping(address => uint256)) _allowed;\n\n    mapping (uint256 => uint256) _redeemed;\n\n    function MerkleAirDropToken(string name, string symbol, uint8 decimals, bytes32 rootHash, uint256 premine) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n        _rootHash = rootHash;\n\n        if (premine > 0) {\n            _balances[msg.sender] = premine;\n            _totalSupply = premine;\n            Transfer(0, msg.sender, premine);\n        }\n    }\n\n    function name() public constant returns (string name) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string symbol) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8 decimals) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint256 totalSupply) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n         return _balances[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\n        return _allowed[tokenOwner][spender];\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool success) {\n        if (_balances[msg.sender] < amount) { return false; }\n\n        _balances[msg.sender] -= amount;\n        _balances[to] += amount;\n\n        Transfer(msg.sender, to, amount);\n\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 amount) public returns (bool success) {\n\n        if (_allowed[from][msg.sender] < amount || _balances[from] < amount) {\n            return false;\n        }\n\n        _balances[from] -= amount;\n        _allowed[from][msg.sender] -= amount;\n        _balances[to] += amount;\n\n        Transfer(from, to, amount);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool success) {\n        _allowed[msg.sender][spender] = amount;\n\n        Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function redeemed(uint256 index) public constant returns (bool redeemed) {\n        uint256 redeemedBlock = _redeemed[index / 256];\n        uint256 redeemedMask = (uint256(1) << uint256(index % 256));\n        return ((redeemedBlock & redeemedMask) != 0);\n    }\n\n    function redeemPackage(uint256 index, address recipient, uint256 amount, bytes32[] merkleProof) public {\n\n        // Make sure this package has not already been claimed (and claim it)\n        uint256 redeemedBlock = _redeemed[index / 256];\n        uint256 redeemedMask = (uint256(1) << uint256(index % 256));\n        require((redeemedBlock & redeemedMask) == 0);\n        _redeemed[index / 256] = redeemedBlock | redeemedMask;\n\n        // Compute the merkle root\n        bytes32 node = keccak256(index, recipient, amount);\n        uint256 path = index;\n        for (uint16 i = 0; i < merkleProof.length; i++) {\n            if ((path & 0x01) == 1) {\n                node = keccak256(merkleProof[i], node);\n            } else {\n                node = keccak256(node, merkleProof[i]);\n            }\n            path /= 2;\n        }\n\n        // Check the merkle proof\n        require(node == _rootHash);\n\n        // Redeem!\n        _balances[recipient] += amount;\n        _totalSupply += amount;\n\n        Transfer(0, recipient, amount);\n    }\n}", "debug": "calldata_AirDropToken_4 + calldata_AirDropToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_AirDropToken_0: 0xafc8fbc600000000000000000000000000000000000000000000000000000000\ncalldatasize_AirDropToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `MerkleAirDropToken(string,string,uint8,bytes32,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/41/0xcc571c9b0dcc48b8afc34bb16e3b450a5b0fc84f.sol", "function": "MerkleAirDropToken(string,string,uint8,bytes32,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}