{
  "contract": "0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6",
  "tool": "mythril",
  "start": 1563721691.7452908,
  "end": 1563721708.6441262,
  "duration": 16.89883542060852,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1642,
        "code": "voked[token]) {\n     ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/40/0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6.sol",
        "function": "release()",
        "lineno": 204,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1642,
        "code": "voked[token]) {\n     ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function release(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/40/0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6.sol",
        "function": "release()",
        "lineno": 204,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3220,
        "code": " }\n}\n",
        "debug": "storage_6: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nretval_1642: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x0\nstorage_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2,_256): 0x0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x5b94008100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `releasableAmount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6.sol",
        "function": "releasableAmount()",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3233,
        "code": "@title Ownable",
        "debug": "The exception is triggered under the following conditions:\n\nretval_1642: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x86d1a69f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6.sol",
        "function": "release()",
        "lineno": 49,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3257,
        "code": "  }\n\n  /**\n  *",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_2,_256): 0xd44896a57581f566eb2dfdbddb6fab1f7f61029177bf7cb247c25ed6688768c3\nretval_1642: 0x1b4449a8718881496371294150cf13b83e605100043070c307e473d06b350c4b\ntimestamp: 0x0\nstorage_4: 0x1\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x5b94008100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe347c064d8535b2f7d7c0f7bc5d6763125fc2dc6.sol",
        "function": "releasableAmount()",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}