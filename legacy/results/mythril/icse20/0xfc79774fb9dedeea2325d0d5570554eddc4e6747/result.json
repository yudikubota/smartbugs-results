{
  "contract": "0xfc79774fb9dedeea2325d0d5570554eddc4e6747",
  "tool": "mythril",
  "start": 1563460204.156139,
  "end": 1563460256.4886034,
  "duration": 52.33246445655823,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2776,
        "code": "   require(_to != address(0));\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_VotePumpCoin0xToken: 0x60\ncalldata_VotePumpCoin0xToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 178,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3943,
        "code": "sub(_value);\n        totalSu",
        "debug": "SOLVER OUTPUT:\nstorage_1: 0x0\ncaller: 0x0\ncalldata_VotePumpCoin0xToken_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VotePumpCoin0xToken: 0x4\ncallvalue: 0x0\n",
        "description": "In the function `withdraw()` a non-zero amount of Ether is sent to an address taken from storage slot 1.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `VPC0x()`.\n\nThere is a check on storage index 1. This storage slot can be written to by calling the function `VPC0x()`.",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "withdraw()",
        "lineno": 225,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 3943,
        "code": "sub(_value);\n        totalSu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "withdraw()",
        "lineno": 225,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4227,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "withdrawVPC0xTokens(address)",
        "lineno": 236,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4227,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4485\n",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "withdrawVPC0xTokens(address)",
        "lineno": 236,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4485,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "withdrawVPC0xTokens(address)",
        "lineno": 236,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5368,
        "code": "   require(_to != address(0));\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_VotePumpCoin0xToken: 0x4\ncalldata_VotePumpCoin0xToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "transfer(address,uint256)",
        "lineno": 178,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6102,
        "code": "n(uint256 _value",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "getTokenBalance(address,address)",
        "lineno": 221,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7250,
        "code": "rn a - b;\n  }\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VotePumpCoin0xToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_VotePumpCoin0xToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VotePumpCoin0xToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "burn(uint256)",
        "lineno": 26,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7268,
        "code": "  ret",
        "debug": "calldatasize_VotePumpCoin0xToken: 0x64\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VotePumpCoin0xToken_32_+_4: 0xa8511371907d295662825497115ba082b6a492f6b7f433cff7fbddd4ebff6ff5\ncalldata_VotePumpCoin0xToken_32 + 36: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VotePumpCoin0xToken_4: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\ncalldata_VotePumpCoin0xToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VotePumpCoin0xToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 32,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7281,
        "code": "  }\n}\n\ncontrac",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_VotePumpCoin0xToken: 0x20000000000000000000000000000000070\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VotePumpCoin0xToken_32_+_4: 0xeed94dba0409e2901e98bca0e8207863a06e1b0e522bc7310401ec8848abbd31\ncalldata_VotePumpCoin0xToken_32 + 36: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VotePumpCoin0xToken_4: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\ncalldata_VotePumpCoin0xToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VotePumpCoin0xToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xfc79774fb9dedeea2325d0d5570554eddc4e6747.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 33,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}