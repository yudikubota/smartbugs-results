{"error": null, "issues": [{"address": 330, "code": "     players[playersWallets[msg.sender", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_Fibonzi_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "withdraw()", "lineno": 153, "title": "Exception state", "type": "Informational"}, {"address": 1392, "code": "s[msg.sender] = playerCount;\n        Play", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_9247535584797915451057180664748820695544591120644449140157971996739901653371: 0x0\nstorage_0: 0xff00\ncalldata_Fibonzi_0: 0x3fa9fcf800000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "createPlayer()", "lineno": 177, "title": "Exception state", "type": "Informational"}, {"address": 2001, "code": "ssert(msg.sender == players", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x1\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 89, "title": "Exception state", "type": "Informational"}, {"address": 2092, "code": "lets[msg.sender]].wallet);\n        ass", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 89, "title": "Exception state", "type": "Informational"}, {"address": 2283, "code": "[playersWallets[msg.sender]].playerId != pools[poolId].owner);\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 90, "title": "Exception state", "type": "Informational"}, {"address": 2459, "code": "rt(msg.value >= pools[poolId].price);\n        assert( (pools[poolId].owner ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x0\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 2499, "code": " poolCount == 1) || (pools[poolId].owner", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x0\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x1\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xff00\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 2735, "code": "[0].playerId));\n        \n        //send the amount to the owner\n        uint price = pools[poolId].price;", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xff00\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\ncallvalue: 0x0\nstorage_2588077117166263351284689902931333654327841381007133193817924669990258558652: 0xff00\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x0\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xff00\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Fibonzi_4: 0xff\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 2931, "code": " all token holders\n        distributeReward(price);\n        \n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3498\n", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 97, "title": "Multiple Calls", "type": "Information"}, {"address": 2931, "code": " all token holders\n        distributeReward(price);\n        \n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function joinPool(uint8). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 97, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3498, "code": "        //double the price of the pool\n        pools[poolId].price = 2*price;\n      ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function joinPool(uint8). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 109, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3526, "code": "nt++;\n ", "debug": "callvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xff00\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\nretval_3498: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2931: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2588077117166263351284689902931333654327841381007133193817924669990258558652: 0x0\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xff00\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Fibonzi_4: 0xff\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A possible integer overflow exists in the function `joinPool(uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 112, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3867, "code": "s[msg.sender] > 0);\n       ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x1\ncalldata_Fibonzi_0: 0xc83a981c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "openPool(uint8)", "lineno": 59, "title": "Exception state", "type": "Informational"}, {"address": 3958, "code": ".sender == players[playersWallets[msg.", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xc83a981c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "openPool(uint8)", "lineno": 60, "title": "Exception state", "type": "Informational"}, {"address": 4149, "code": "llet);\n        assert(msg.value >= pools[poolId].price);\n       ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xc83a981c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "openPool(uint8)", "lineno": 60, "title": "Exception state", "type": "Informational"}, {"address": 4189, "code": "PlayerUsableTokensCount() > 0);\n        ", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x0\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x1\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_Fibonzi_4: 0x0\ncalldata_Fibonzi_0: 0xc83a981c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "openPool(uint8)", "lineno": 62, "title": "Exception state", "type": "Informational"}, {"address": 7068, "code": "lets[own", "debug": "storage_0: 0xff00\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xeca2d20d801c0a1bc01d3786a35d4037542741c9a970d0cea71acd3bc53b2d02\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0x0\nretval_2931: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2588077117166263351284689902931333654327841381007133193817924669990258558652: 0x0\ncallvalue: 0xeca2d20d801c0a1bc01d3786a35d4037542741c9a970d0cea71acd3bc53b2d02\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xff00\ncaller: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_Fibonzi_4: 0xff\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A possible integer overflow exists in the function `joinPool(uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 144, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8328, "code": ";\n\ncontract Fibonz", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x1e000000000000000000000000000\nstorage_0: 0xf000\nstorage_1: 0x80\nstorage_1 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0x1e000000000000000000000000000\nstorage_0 +\nkeccac_255_&\n255_&\n255_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0xf00\nstorage_3: 0x7f00\nretval_2931: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2588077117166263351284689902931333654327841381007133193817924669990258558652: 0xf00\nstorage_2 + keccac_255_&_255_&_255_&_calldata_Fibonzi_4: 0xf000\ncaller: 0xf\ncalldata_Fibonzi_4: 0xf0\ncalldata_Fibonzi_0: 0xb149ece000000000000000000000000000000000000000000000000000000000\ncalldatasize_Fibonzi: 0x4\n", "description": "A possible integer overflow exists in the function `joinPool(uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/16/0xe8b55deaced913c5c6890331d2926ea0fcbe59ac.sol", "function": "joinPool(uint8)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}], "success": true}