{
  "contract": "0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8",
  "tool": "mythril",
  "start": 1563556257.3712952,
  "end": 1563556473.6494298,
  "duration": 216.27813458442688,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 290,
        "code": " uint[](proposalsName.length);\n      for (uint i = 0; i < proposalsName.length; i++) {\n        uint proposalId = searchProposalId(proposalsName[i]);\n        proposalsId[i]=proposalId;\n      }\n    }\n\n    function searchProposalId(bytes32 proposalName) public view\n          returns (uint proposalId) {\n      for (uint i = 0; i < proposals",
        "debug": "calldata_Ballot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Ballot_0: 0x46fe40d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `batchSearchProposalsId(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "batchSearchProposalsId(bytes32[])",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 390,
        "code": " uint[](proposalsName.length);\n      for (uint i = 0; i < proposalsName.length; i++) {\n        uint proposalId = searchProposalId(proposalsName[i]);\n        proposalsId[i]=proposalId;\n      }\n    }\n\n    function searchProposalId(bytes32 proposalName) public view\n          returns (uint proposalId) {\n      for (uint i = 0; i < proposals",
        "debug": "calldata_Ballot_4 + calldata_Ballot_4: 0x1\nstorage_1: 0x1\nmem_128 + 32 + 32*calldata_Ballot_4 + calldata_Ballot_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_Ballot_0: 0x46fe40d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncalldata_Ballot_cpy: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778999: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `batchSearchProposalsId(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "batchSearchProposalsId(bytes32[])",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 477,
        "code": "rperson public {\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n\n    /// batch vote (delegated to chairperson)\n    function vote(ui",
        "debug": "calldata_Ballot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Ballot_0: 0x8adc09500000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addProposals(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "addProposals(bytes32[])",
        "lineno": 56,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 648,
        "code": "nlyChairperson public {\n\n        require(weights.length == voterNames.length);\n        require(weights.length == proposalIds.length);\n        require(voterNames.length == proposalIds.length);\n\n        for (uint i = 0; i < weights.length; i++) {\n            Voter memory voter = Voter({\n              weight: weights[i],\n              voterName: voterNames[i],\n              proposalId: proposalIds[i]\n            });\n            proposals[voter.proposalId-1].voteCount += voter.weight;\n        }\n\n        BatchVote(msg.sender);\n    }\n\n    /// @dev Computes the winning proposal taking all\n    /// previous votes into accou",
        "debug": "calldata_Ballot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Ballot_0: 0x2a0ce57400000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2a0ce574`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "_function_0x2a0ce574",
        "lineno": 74,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 971,
        "code": "each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    function batchSearchProposalsId(bytes32[] proposalsName) public view\n          returns (uint[] proposalsId) {\n      proposals",
        "debug": "calldata_Ballot_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Ballot_0: 0x580a111a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `resetBallot(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "resetBallot(bytes32[])",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1423,
        "code": "sals;\n\n    event BatchVote(",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Ballot_4: 0x0\nstorage_1: 0x0\ncalldata_Ballot_0: 0x13cf08b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "_function_0x013cf08b",
        "lineno": 24,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1584,
        "code": "Id) {\n      fo",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x2\ncalldata_Ballot_4 + calldata_Ballot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Ballot_0: 0x46fe40d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\nmem_128 + 32 + 32*calldata_Ballot_4 + calldata_Ballot_4: 0x0\ncalldata_Ballot_cpy: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944779002: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778999: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "batchSearchProposalsId(bytes32[])",
        "lineno": 144,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1796,
        "code": ";\n\n/// @title Voti",
        "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Ballot_4 + calldata_Ballot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ballot_0: 0x8adc09500000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addProposals(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "addProposals(bytes32[])",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2303,
        "code": "(msg.sender);\n    }\n\n    /// ",
        "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4: 0xfffffffffffffffffffffffffffffeffffffffffffffffffffffffdfffffffff\ncalldata_Ballot_4 + calldata_Ballot_4: 0xfffffffffffffffffffffffffffffeffffffffffffffffffffffffdfffffffff\nmem_128 + 32 + 32*calldata_Ballot_4 + calldata_Ballot_4: 0xfffffffffffffffffffffffffffffeffffffffffffffffffffffffdfffffffff\nstorage_1: 0x0\nmem_64 +\n320 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 36: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ballot_0: 0x2a0ce57400000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "_function_0x2a0ce574",
        "lineno": 89,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2327,
        "code": "(msg.sender);\n    }\n\n    /// @dev Computes the winning ",
        "debug": "mem_0 +\n320 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 36: 0x80000000000000000000003ffffc400000000000000002002042500402174049\nmem_160 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4: 0x8000000000\ncalldata_Ballot_4 + calldata_Ballot_4: 0x8000000000\nmem_128 + 32 + 32*calldata_Ballot_4 + calldata_Ballot_4: 0x8000000000\nstorage_2 +\n80084422859880547211683076133703299733277748156566366325829078699459944778995 +\n3*\nmem_64 +\n320 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 36: 0x8000000000000000000000fe0400400000000000000000000113d00427d6fe6d\nstorage_1: 0x1\nmem_64 +\n320 +\n32*calldata_Ballot_4 + calldata_Ballot_4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 4 +\n32*calldata_Ballot_4 + calldata_Ballot_32 + 36: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ballot_0: 0x2a0ce57400000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2a0ce574`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "_function_0x2a0ce574",
        "lineno": 89,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3194,
        "code": "top - 1;\n ",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*storage_1: 0x0\ncalldata_Ballot_0: 0x95988a2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "proposalsRank()",
        "lineno": 178,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3232,
        "code": " top = top",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*storage_1: 0x2\ncalldata_Ballot_0: 0x95988a2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "proposalsRank()",
        "lineno": 180,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3337,
        "code": " + 1;\n",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*storage_1: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Ballot_0: 0x95988a2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "proposalsRank()",
        "lineno": 189,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4211,
        "code": "rson public {\n\n        delet",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Ballot_0: 0xe2ba53f000000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "winnerName()",
        "lineno": 115,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4405,
        "code": "tract Ballot {\n    // This declares a new complex type which will\n    // be used for variables later.\n    // It will represent a vote for one batch votes in blockchain.\n    struct Voter {\n        uint weight; // vote number of specified voter and voted proposal\n        bytes32 voterName; // voter's name\n        uint proposalId; // index of the voted proposal\n    }\n\n    // This is a type for a single proposal.\n    struct Proposal {\n        uint proposalId;// proposal's id, equals to proposals' index\n        bytes32 proposalName;   // proposal's description\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    // A dynamically-sized array of `Proposal` structs.\n    Proposal[] public proposals;\n\n    event BatchVote(address indexed _from);\n\n    modifier onlyChairperson {\n      require(msg.sender == chairperson);\n      _;\n    }\n\n    function transferChairperson(address newChairperson) onlyChairperson  public {\n        chairperson = newChairperson;\n    }\n\n    /// Create a new ballot to choose one of `proposalNames`.\n    function Ballot(bytes32[] proposalNames) public {\n        chairperson = msg.sender;\n\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    function addProposals(bytes32[] proposalNames) onlyChairperson public {\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n\n    /// batch vote (delegated to chairperson)\n    function vote(uint[] weights, bytes32[] voterNames, uint[] proposalIds) onlyChairperson public {\n\n        require(weights.length == voterNames.length);\n        require(weights.length == proposalIds.length);\n        require(voterNames.length == proposalIds.length);\n\n        for (uint i = 0; i < weights.length; i++) {\n            Voter memory voter = Voter({\n              weight: weights[i],\n              voterName: voterNames[i],\n              proposalId: proposalIds[i]\n            });\n            proposals[voter.proposalId-1].voteCount += voter.weight;\n        }\n\n        BatchVote(msg.sender);\n    }\n\n    /// @dev Computes the winning proposal taking all\n    /// previous votes into account.\n    function winningProposal() internal\n            returns (uint winningProposal)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal = p;\n            }\n        }\n    }\n\n    // Calls winningProposal() function to get the index\n    // of the winner contained in the proposals array and then\n    // returns the name of the winner\n    function winnerName() public view\n            returns (bytes32 winnerName)\n    {\n        winnerName = proposals[winningProposal()].proposalName;\n    }\n\n    function resetBallot(bytes32[] proposalNames) onlyChairperson public {\n\n        delete proposals;\n\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    function batchSearchProposalsId(bytes32[] proposalsName) public view\n          returns (uint[] proposalsId) {\n      proposalsId = new uint[](proposalsName.length);\n      for (uint i = 0; i < proposalsName.length; i++) {\n        uint proposalId = searchProposalId(proposalsName[i]);\n        proposalsId[i]=proposalId;\n      }\n    }\n\n    function searchProposalId(bytes32 proposalName) public view\n          returns (uint proposalId) {\n      for (uint i = 0; i < proposals.length; i++) {\n          if(proposals[i].proposalName == proposalName){\n            proposalId = proposals[i].proposalId;\n          }\n      }\n    }\n\n    // proposal rank by voteCount\n    function proposalsRank() public view\n          returns (uint[] rankByProposalId,\n          bytes32[] rankByName,\n          uint[] rankByvoteCount) {\n\n    uint n = proposals.length;\n    Proposal[] memory arr = new Proposal[](n);\n\n    uint i;\n    for(i=0; i<n; i++) {\n      arr[i] = proposals[i];\n    }\n\n    uint[] memory stack = new uint[](n+ 2);\n\n    //Push initial lower and higher bound\n    uint top = 1;\n    stack[top] = 0;\n    top = top + 1;\n    stack[top] = n-1;\n\n    //Keep popping from stack while is not empty\n    while (top > 0) {\n\n      uint h = stack[top];\n      top = top - 1;\n      uint l = stack[top];\n      top = top - 1;\n\n      i = l;\n      uint x = arr[h].voteCount;\n\n      for(uint j=l; j<h; j++){\n        if  (arr[j].voteCount <= x) {\n          //Move smaller element\n          (arr[i], arr[j]) = (arr[j],arr[i]);\n          i = i + 1;\n        }\n      }\n      (arr[i], arr[h]) = (arr[h],arr[i]);\n      uint p = i;\n\n      //Push left side to stack\n      if (p > l + 1) {\n        top = top + 1;\n        stack[top] = l;\n        top = top + 1;\n        stack[top] = p - 1;\n      }\n\n      //Push right side to stack\n      if (p+1 < h) {\n        top = top + 1;\n        stack[top] = p + 1;\n        top = top + 1;\n        stack[top] = h;\n      }\n    }\n\n    rankByProposalId = new uint[](n);\n    rankByName = new bytes32[](n);\n    rankByvoteCount = new uint[](n);\n    for(i=0; i<n; i++) {\n      rankByProposalId[i]= arr[n-1-i].proposalId;\n      rankByName[i]=arr[n-1-i].proposalName;\n      rankByvoteCount[i]=arr[n-1-i].voteCount;\n    }\n  }\n}",
        "debug": "storage_1: 0xfefeeefeeeffffffffffffffffcc5ffe000001ee94fecc37e3ef3fdfff0000aa\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ballot_0: 0x580a111a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `resetBallot(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "resetBallot(bytes32[])",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4417,
        "code": "tract Ballot {\n    // This declares a new complex type which will\n    // be used for variables later.\n    // It will represent a vote for one batch votes in blockchain.\n    struct Voter {\n        uint weight; // vote number of specified voter and voted proposal\n        bytes32 voterName; // voter's name\n        uint proposalId; // index of the voted proposal\n    }\n\n    // This is a type for a single proposal.\n    struct Proposal {\n        uint proposalId;// proposal's id, equals to proposals' index\n        bytes32 proposalName;   // proposal's description\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    // A dynamically-sized array of `Proposal` structs.\n    Proposal[] public proposals;\n\n    event BatchVote(address indexed _from);\n\n    modifier onlyChairperson {\n      require(msg.sender == chairperson);\n      _;\n    }\n\n    function transferChairperson(address newChairperson) onlyChairperson  public {\n        chairperson = newChairperson;\n    }\n\n    /// Create a new ballot to choose one of `proposalNames`.\n    function Ballot(bytes32[] proposalNames) public {\n        chairperson = msg.sender;\n\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    function addProposals(bytes32[] proposalNames) onlyChairperson public {\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n\n    /// batch vote (delegated to chairperson)\n    function vote(uint[] weights, bytes32[] voterNames, uint[] proposalIds) onlyChairperson public {\n\n        require(weights.length == voterNames.length);\n        require(weights.length == proposalIds.length);\n        require(voterNames.length == proposalIds.length);\n\n        for (uint i = 0; i < weights.length; i++) {\n            Voter memory voter = Voter({\n              weight: weights[i],\n              voterName: voterNames[i],\n              proposalId: proposalIds[i]\n            });\n            proposals[voter.proposalId-1].voteCount += voter.weight;\n        }\n\n        BatchVote(msg.sender);\n    }\n\n    /// @dev Computes the winning proposal taking all\n    /// previous votes into account.\n    function winningProposal() internal\n            returns (uint winningProposal)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < proposals.length; p++) {\n            if (proposals[p].voteCount > winningVoteCount) {\n                winningVoteCount = proposals[p].voteCount;\n                winningProposal = p;\n            }\n        }\n    }\n\n    // Calls winningProposal() function to get the index\n    // of the winner contained in the proposals array and then\n    // returns the name of the winner\n    function winnerName() public view\n            returns (bytes32 winnerName)\n    {\n        winnerName = proposals[winningProposal()].proposalName;\n    }\n\n    function resetBallot(bytes32[] proposalNames) onlyChairperson public {\n\n        delete proposals;\n\n        // For each of the provided proposal names,\n        // create a new proposal object and add it\n        // to the end of the array.\n        for (uint i = 0; i < proposalNames.length; i++) {\n            // `Proposal({...})` creates a temporary\n            // Proposal object and `proposals.push(...)`\n            // appends it to the end of `proposals`.\n            proposals.push(Proposal({\n                proposalId: proposals.length,\n                proposalName: proposalNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    function batchSearchProposalsId(bytes32[] proposalsName) public view\n          returns (uint[] proposalsId) {\n      proposalsId = new uint[](proposalsName.length);\n      for (uint i = 0; i < proposalsName.length; i++) {\n        uint proposalId = searchProposalId(proposalsName[i]);\n        proposalsId[i]=proposalId;\n      }\n    }\n\n    function searchProposalId(bytes32 proposalName) public view\n          returns (uint proposalId) {\n      for (uint i = 0; i < proposals.length; i++) {\n          if(proposals[i].proposalName == proposalName){\n            proposalId = proposals[i].proposalId;\n          }\n      }\n    }\n\n    // proposal rank by voteCount\n    function proposalsRank() public view\n          returns (uint[] rankByProposalId,\n          bytes32[] rankByName,\n          uint[] rankByvoteCount) {\n\n    uint n = proposals.length;\n    Proposal[] memory arr = new Proposal[](n);\n\n    uint i;\n    for(i=0; i<n; i++) {\n      arr[i] = proposals[i];\n    }\n\n    uint[] memory stack = new uint[](n+ 2);\n\n    //Push initial lower and higher bound\n    uint top = 1;\n    stack[top] = 0;\n    top = top + 1;\n    stack[top] = n-1;\n\n    //Keep popping from stack while is not empty\n    while (top > 0) {\n\n      uint h = stack[top];\n      top = top - 1;\n      uint l = stack[top];\n      top = top - 1;\n\n      i = l;\n      uint x = arr[h].voteCount;\n\n      for(uint j=l; j<h; j++){\n        if  (arr[j].voteCount <= x) {\n          //Move smaller element\n          (arr[i], arr[j]) = (arr[j],arr[i]);\n          i = i + 1;\n        }\n      }\n      (arr[i], arr[h]) = (arr[h],arr[i]);\n      uint p = i;\n\n      //Push left side to stack\n      if (p > l + 1) {\n        top = top + 1;\n        stack[top] = l;\n        top = top + 1;\n        stack[top] = p - 1;\n      }\n\n      //Push right side to stack\n      if (p+1 < h) {\n        top = top + 1;\n        stack[top] = p + 1;\n        top = top + 1;\n        stack[top] = h;\n      }\n    }\n\n    rankByProposalId = new uint[](n);\n    rankByName = new bytes32[](n);\n    rankByvoteCount = new uint[](n);\n    for(i=0; i<n; i++) {\n      rankByProposalId[i]= arr[n-1-i].proposalId;\n      rankByName[i]=arr[n-1-i].proposalName;\n      rankByvoteCount[i]=arr[n-1-i].voteCount;\n    }\n  }\n}",
        "debug": "storage_1: 0xa2904ab8959d41101184012020f00401fd586048d601ba836190055d855635dc\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Ballot_0: 0x580a111a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Ballot: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `resetBallot(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0x57c555591b18cff058e6fabfc57a6b7c7f37c8e8.sol",
        "function": "resetBallot(bytes32[])",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}