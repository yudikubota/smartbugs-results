{
  "contract": "0x2d295c19f405048c576b4c1179ea2458e8e13935",
  "tool": "mythril",
  "start": 1563595248.4594398,
  "end": 1563595509.0571861,
  "duration": 260.5977463722229,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1489,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1501,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1510,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1516,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1559,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1571,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1580,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1586,
        "code": "ing tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1874,
        "code": "= tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n ",
        "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 151,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3025,
        "code": "nt\n     *\n     * Remo",
        "debug": "calldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_x32323_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "burn(uint256)",
        "lineno": 174,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3690,
        "debug": "calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_x32323_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burnFrom(address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "burnFrom(address,uint256)",
        "lineno": 190,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4124,
        "code": "splay purposes\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 71,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5617,
        "code": "m] -= _value;\n        // Add the ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xd9ceecb37d6879d4076e6fb1963e503773c87d138a6eea5c6421fcf9f75300b2\ncalldata_x32323_32 + 4: 0x6401e029104380d806300100020110067f7f9fea013481e19050df9f108dffb7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x88d0cb5c8de383475d72d66983315fc4532fff2205318224645800b977bdeaff\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "transfer(address,uint256)",
        "lineno": 88,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6004,
        "code": "\n     * Send `_value` tokens to `",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa3ed969de0edee8a7a5f33930a77cff98c000400ffbfd6000000000000000040\ncalldata_x32323_32 + 4: 0x436d703a959a291492500e42883b282118000801000000000000000000000400\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x8f12b018b1fde0445238353ebff36ac34e3ff7ffe02d39523fffffffffffffc1\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "transfer(address,uint256)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6087,
        "code": "wned{\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n    function MyToken(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter\n        ) {\n        if(centralMinter != 0 ) owner = centralMinter;\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 0 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 21,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6101,
        "code": "wned{\n\n    mapping (address => bool) public frozenAccount;\n    event FrozenFunds(address target, bool frozen);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n\n    function MyToken(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol,\n        address centralMinter\n        ) {\n        if(centralMinter != 0 ) owner = centralMinter;\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 0;\n    // 0 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = 23000000;  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = \"\u6e2c\u8a663\";                                   // Set the name for display purposes\n        symbol = \"\u6e2c\u8a663\";                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        require(!frozenAccount[msg.sender]);\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` on behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/23/0x2d295c19f405048c576b4c1179ea2458e8e13935.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 21,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}