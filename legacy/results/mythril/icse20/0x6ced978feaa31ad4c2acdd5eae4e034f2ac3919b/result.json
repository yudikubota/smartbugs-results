{
  "contract": "0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b",
  "tool": "mythril",
  "start": 1563540140.2162557,
  "end": 1563540765.0408952,
  "duration": 624.8246395587921,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 522,
        "code": "==========\n    =  ",
        "debug": "timestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c\ncallvalue: 0x10000100000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3c\ncalldatasize_SlowMoon: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b.sol",
        "function": "fallback",
        "lineno": 79,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2932,
        "code": "   \n    /",
        "debug": "",
        "description": "Function fallback retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/16/0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b.sol",
        "function": "fallback",
        "lineno": 48,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 8700,
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x7d00\ncallvalue: 0x0\nstorage_13: 0x3b9ac9ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7d00\ncalldatasize_SlowMoon: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b.sol",
        "function": "fallback",
        "lineno": 762,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8942,
        "code": " uint z = (x + 1) /",
        "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffff90fb0802c080000\ncalldata_SlowMoon_0: 0x4b75033400000000000000000000000000000000000000000000000000000000\ncalldatasize_SlowMoon: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sellPrice()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x6ced978feaa31ad4c2acdd5eae4e034f2ac3919b.sol",
        "function": "sellPrice()",
        "lineno": 709,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}