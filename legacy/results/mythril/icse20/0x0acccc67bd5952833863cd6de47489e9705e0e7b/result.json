{
  "contract": "0x0acccc67bd5952833863cd6de47489e9705e0e7b",
  "tool": "mythril",
  "start": 1563702976.0065227,
  "end": 1563703068.1727955,
  "duration": 92.16627287864685,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 245,
        "code": "unts) public payable returns(bool) {\n        uint toReturn = msg.value;\n        for (uint i = 0; i < _addresses.length; i++) {\n            _safeTransfer(_addresses[i], _amounts[i]);\n            toReturn = SafeMath.sub(toReturn, _amounts[i]);\n            emit MultiTransfer(msg.sender, msg.value, _addresses[i], _amounts[i]);\n        }\n        _safeTransfer(msg.sender, toReturn);\n        return true;\n    }\n\n    function multiERC20Transfer(ERC20 _token, address[] _addres",
        "debug": "calldata_Transfer_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Transfer_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_Transfer: 0x4\n",
        "description": "A possible integer overflow exists in the function `_function_0x1e89d545`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x1e89d545",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 457,
        "code": "t[] _amounts) public payable {\n        for (uint i = 0; i < _addresses.length; i++) {\n            _safeERC20Transfer(_token, _addresses[i], _amounts[i]);\n            emit MultiERC20Transfer(\n                msg.sender,\n                _addresses[i],\n                _amounts[i],\n                _token\n            );\n        }\n    }\n\n    function _safeTransfer(address _to, uint _amount) internal {\n        re",
        "debug": "calldata_Transfer_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Transfer_0: 0x35a2172800000000000000000000000000000000000000000000000000000000\ncalldatasize_Transfer: 0x4\n",
        "description": "A possible integer overflow exists in the function `_function_0x35a21728`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x35a21728",
        "lineno": 68,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 654,
        "code": " _amounts[i",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Transfer_4 + calldata_Transfer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Transfer_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_Transfer: 0x4\nmem_128 + 32 + 32*calldata_Transfer_4 + calldata_Transfer_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x1e89d545",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 973,
        "code": "g.sender,\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Transfer_4 + calldata_Transfer_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Transfer_0: 0x35a2172800000000000000000000000000000000000000000000000000000000\ncalldatasize_Transfer: 0x4\nmem_128 + 32 + 32*calldata_Transfer_4 + calldata_Transfer_32 + 4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x35a21728",
        "lineno": 72,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1427,
        "code": "ss _to, uint _amount)",
        "debug": "SOLVER OUTPUT:\ncalldata_Transfer_cpy: 0xffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*calldata_Transfer_4 + calldata_Transfer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Transfer_4 + calldata_Transfer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Transfer_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_Transfer: 0x4\n",
        "description": "In the function `_function_0x1e89d545` a non-zero amount of Ether is sent to an address taken from function arguments.\nIt seems that this function can be called without restrictions.",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x1e89d545",
        "lineno": 85,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 1427,
        "code": "ss _to, uint _amount)",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1427\n",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x1e89d545",
        "lineno": 85,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1948,
        "code": "unction () public payable {\n        revert(\"C",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/39/0x0acccc67bd5952833863cd6de47489e9705e0e7b.sol",
        "function": "_function_0x35a21728",
        "lineno": 90,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}