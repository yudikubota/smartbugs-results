{
  "contract": "0x79e413a9500c24ceb69b0cc47be330dbf7c9a4af",
  "tool": "mythril",
  "start": 1563540275.3504586,
  "end": 1563540303.7451394,
  "duration": 28.394680738449097,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 147,
        "code": "tokenAddress,\n        address[] recipients,\n        uint256[] amounts) public {\n\n        require(tokenAddress != 0x0);\n        require(amounts.length == recipients.length);\n\n        ERC20 token = ERC20(tokenAddress);\n\n        uint balance = token.balanceOf(msg.sender);\n        uint allowance = token.allowance(msg.sender, address(this));\n        uint available = balance > allowance ? allowance : balance;\n\n        for (uint i = 0; i < recipients.length; i++) {\n            require(available >= amounts[i]);\n            if (isQualitifiedAddress(\n                recipients[i]\n            )) {\n                available -= amounts[i];\n                require(token.transferFrom(msg.sender, recipients[i], amounts[i]));\n\n                AirDropped(recipients[i], amounts[i]);\n            }\n        }\n    }\n\n    function isQualitifiedAddress(address addr)\n      ",
        "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x7da5efc800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `drop(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x79e413a9500c24ceb69b0cc47be330dbf7c9a4af.sol",
        "function": "drop(address,address[],uint256[])",
        "lineno": 31,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 595,
        "code": " allowance = token.allowanc",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0x79e413a9500c24ceb69b0cc47be330dbf7c9a4af.sol",
        "function": "drop(address,address[],uint256[])",
        "lineno": 41,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 595,
        "code": " allowance = token.allowanc",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 863\n",
        "filename": "/unique_chucks/10/0x79e413a9500c24ceb69b0cc47be330dbf7c9a4af.sol",
        "function": "drop(address,address[],uint256[])",
        "lineno": 41,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 863,
        "code": ";\n        uint available = balance > allow",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0x79e413a9500c24ceb69b0cc47be330dbf7c9a4af.sol",
        "function": "drop(address,address[],uint256[])",
        "lineno": 41,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}