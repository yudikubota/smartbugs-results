{
  "contract": "0x80c52dc4232924701d1ed393c1d48f07c177820a",
  "tool": "mythril",
  "start": 1563667024.9845262,
  "end": 1563667390.2556775,
  "duration": 365.271151304245,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1398,
        "code": "mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n     ",
        "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_XKnockoutRegular_0: 0xa50fac0100000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueVIP()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueVIP()",
        "lineno": 270,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1549,
        "code": "     uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256",
        "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_XKnockoutRegular_0: 0xd388954000000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueREG()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueREG()",
        "lineno": 274,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1934,
        "code": "          ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x1\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2: 0x0\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 215,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2436,
        "code": "vip",
        "debug": "storage_2: 0x1\nstorage_6: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_2: 0x0\ntimestamp: 0x0\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `checkRemaining()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 214,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2453,
        "code": "       }\n        //",
        "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `checkRemaining()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 224,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2476,
        "code": "    //If any ETH st",
        "debug": "storage_1: 0x0\nstorage_6: 0x0\nstorage_9: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ntimestamp: 0x0\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `checkRemaining()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 227,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2502,
        "code": "as a bonus\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\nstorage_6: 0x0\ntimestamp: 0x0\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 227,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3107,
        "code": "e.mul(2",
        "debug": "storage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\nretval_8257: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x0\nstorage_5: 0x0\ncalldatasize_XKnockoutRegular: 0x3\nstorage_1: 0x0\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "fallback",
        "lineno": 247,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7954,
        "code": "dress[] public vipList;\n  a",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_XKnockoutRegular_4: 0x0\nstorage_1: 0x0\ncalldata_XKnockoutRegular_0: 0x404cbffb00000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "_function_0x404cbffb",
        "lineno": 35,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8124,
        "code": "[lastVIPkey()];\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x0\nstorage_1: 0x0\ncalldata_XKnockoutRegular_0: 0x6773a72200000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "lastREG()",
        "lineno": 196,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8257,
        "code": "   return entityList;\n ",
        "debug": "",
        "description": "In the function `checkRemaining()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 265,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 8257,
        "code": "   return entityList;\n ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function rewardDev(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "rewardDev()",
        "lineno": 265,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 8304,
        "code": "s dev;\n  uint256 base = ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_XKnockoutRegular_4: 0x0\nstorage_2: 0x0\ncalldata_XKnockoutRegular_0: 0x9dc3454c00000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "_function_0x9dc3454c",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8396,
        "code": "     return 0;",
        "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_XKnockoutRegular_0: 0xa50fac0100000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueVIP()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueVIP()",
        "lineno": 272,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8398,
        "code": "     return 0;",
        "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_XKnockoutRegular_0: 0xa50fac0100000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueVIP()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueVIP()",
        "lineno": 272,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8544,
        "code": " div(uint256 a, u",
        "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_XKnockoutRegular_0: 0xd388954000000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueREG()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueREG()",
        "lineno": 279,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8546,
        "code": " div(uint256 a, u",
        "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_XKnockoutRegular_0: 0xd388954000000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `queueREG()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "queueREG()",
        "lineno": 279,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8957,
        "code": "iscor",
        "debug": "storage_6: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_5: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `checkRemaining()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 301,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8970,
        "code": " YOU RIP THIS ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x1\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 302,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8994,
        "code": "e we realized ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x0\nstorage_6: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffbffffffff\nstorage_11: 0x1\ntimestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffffe\nstorage_5: 0x0\ncalldata_XKnockoutRegular_0: 0x44dce30600000000000000000000000000000000000000000000000000000000\ncalldatasize_XKnockoutRegular: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "checkRemaining()",
        "lineno": 299,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10059,
        "code": "Regular {\n    \n  using SafeMath for uint256;\n\n  struct EntityStruct {\n    bool active;\n    bool vip;\n    uint listPointer;\n    uint256 date;\n    uint256 update;\n    uint256 exit;\n    uint256 profit;\n  }\n  \n  mapping(address => EntityStruct) public entityStructs;\n  address[] public entityList;\n  address[] public vipList;\n  address dev;\n  uint256 base = 500000000000000000; //base is 0.5 ETH\n  uint256 public startedAt = now; //every new deposit updates start timetoRegular\n  uint256 public timeRemaining = 24 hours; //every +100 users in queue half decrease timeRemaining\n  uint256 public devreward; //buy me a coffee\n  uint public round = 1; //when time is up, contract resets automatically to next round\n  uint public shift = 0; //regular queue shift\n  uint public joined = 0; //stats\n  uint public exited = 0; //stats\n  bool public timetoRegular = true; //flag to switch queue\n  \n  constructor() public {\n     dev = msg.sender;\n  }\n  \n  function() public payable {\n    if(checkRemaining()) { msg.sender.transfer(msg.value); \n    } else {\n        if(msg.value == base) {\n            addToList();\n        } else if(msg.value == base.div(10)) {\n            up();\n        } else {\n            revert(\"You should send 0.5 ETH to join the list or 0.05 ETH to up\");\n        }   \n    }\n  }\n  \n  function addToList() internal {\n      if(entityStructs[msg.sender].active) revert(\"You are already in the list\");\n      \n      newEntity(msg.sender, true);\n      joined++;\n\t  startedAt = now;\n      entityStructs[msg.sender].date = now;\n      entityStructs[msg.sender].profit = 0;\n      entityStructs[msg.sender].update = 0;\n      entityStructs[msg.sender].exit = 0;\n      entityStructs[msg.sender].active = true;\n      entityStructs[msg.sender].vip = false;\n    \n      if(timetoRegular) {\n        //Regular queue  \n        entityStructs[entityList[shift]].profit += base;\n          if(entityStructs[entityList[shift]].profit == 2*base) {\n              entityStructs[entityList[shift]].active = false;\n              entityStructs[entityList[shift]].exit = now;\n              entityList[shift].transfer( entityStructs[entityList[shift]].profit.mul(90).div(100) );\n              devreward += entityStructs[entityList[shift]].profit.mul(10).div(100);\n              exitREG();\n              exited++;\n              //Switch queue to vip\n              if(lastVIPkey() != 9999) {\n                  if(vipList[lastVIPkey()] != address(0)) timetoRegular = false;\n              }\n          }\n\n      } else if (!timetoRegular) {\n        //VIP queue\n        uint lastVIP = lastVIPkey();\n        entityStructs[vipList[lastVIP]].profit += base;\n          if(entityStructs[vipList[lastVIP]].profit == 2*base) {\n              entityStructs[vipList[lastVIP]].active = false;\n              entityStructs[vipList[lastVIP]].exit = now;\n              vipList[lastVIP].transfer( entityStructs[vipList[lastVIP]].profit.mul(90).div(100) );\n              devreward += entityStructs[vipList[lastVIP]].profit.mul(10).div(100);\n              exitVIP(vipList[lastVIP]);\n              exited++;\n              //Switch queue to regular\n              timetoRegular = true;\n          }     \n      }\n  }\n  \n  function up() internal {\n      if(joined.sub(exited) < 3) revert(\"You are too alone to up\");\n      if(!entityStructs[msg.sender].active) revert(\"You are not in the list\");\n      if(entityStructs[msg.sender].vip && (now.sub(entityStructs[msg.sender].update)) < 600) revert (\"Up allowed once per 10 min\");\n      \n      if(!entityStructs[msg.sender].vip) {\n          \n          /*\n           * When somebody UP first time, he gives an amazing chance to last one in the list\n           * shift to his place at regular queue\n           */\n           \n            uint rowToDelete = entityStructs[msg.sender].listPointer;\n            address keyToMove = entityList[entityList.length-1];\n            entityList[rowToDelete] = keyToMove;\n            entityStructs[keyToMove].listPointer = rowToDelete;\n            entityList.length--;\n           \n           //Add to VIP\n           entityStructs[msg.sender].update = now;\n           entityStructs[msg.sender].vip = true;\n           newVip(msg.sender, true);\n           \n           devreward += msg.value; //goes to marketing\n           \n      } else if (entityStructs[msg.sender].vip) {\n          \n          //User up again\n          entityStructs[msg.sender].update = now;\n          delete vipList[entityStructs[msg.sender].listPointer];\n          newVip(msg.sender, true);\n          devreward += msg.value; //goes to marketing\n      }\n  }\n\n  function newEntity(address entityAddress, bool entityData) internal returns(bool success) {\n    entityStructs[entityAddress].active = entityData;\n    entityStructs[entityAddress].listPointer = entityList.push(entityAddress) - 1;\n    return true;\n  }\n\n  function exitREG() internal returns(bool success) {\n    delete entityList[shift];\n    shift++;\n    return true;\n  }\n  \n  function getVipCount() public constant returns(uint entityCount) {\n    return vipList.length;\n  }\n\n  function newVip(address entityAddress, bool entityData) internal returns(bool success) {\n    entityStructs[entityAddress].vip = entityData;\n    entityStructs[entityAddress].listPointer = vipList.push(entityAddress) - 1;\n    return true;\n  }\n\n  function exitVIP(address entityAddress) internal returns(bool success) {\n    //Supa dupa method to deal with arrays ^_^ \n    uint rowToDelete = entityStructs[entityAddress].listPointer;\n    address keyToMove = vipList[vipList.length-1];\n    vipList[rowToDelete] = keyToMove;\n    entityStructs[keyToMove].listPointer = rowToDelete;\n    vipList.length--;\n    return true;\n  }\n  \n  function lastVIPkey() public constant returns(uint) {\n    //Dealing with arrays in Solidity is painful x_x\n    if(vipList.length == 0) return 9999;\n    uint limit = vipList.length-1;\n    for(uint l=limit; l >= 0; l--) {\n        if(vipList[l] != address(0)) {\n            return l;\n        } \n    }\n    return 9999;\n  }\n  \n  function lastREG() public view returns (address) {\n     return entityList[shift];\n  }\n  \n  function lastVIP() public view returns (address) {\n      //Dealing with arrays in Solidity is painful x_x\n      if(lastVIPkey() != 9999) {\n        return vipList[lastVIPkey()];\n      }\n      return address(0);\n  }\n  \n  function checkRemaining() public returns (bool) {\n      /* If time has come, reset the contract\n       * It's public because of possible gas issues, but nothing can happen\n       * while now < timeRemaining.add(startedAt)\n       */\n      if(now >= timeRemaining.add(startedAt)) {\n        //Killing VIP struct\n        if(vipList.length > 0) {\n            uint limit = vipList.length-1;\n            for(uint l=limit; l >= 0; l--) {\n                if(vipList[l] != address(0)) {\n                    entityStructs[vipList[l]].active = false;\n                    entityStructs[vipList[l]].vip = false;\n                    entityStructs[vipList[l]].date = 0;\n                } \n            }\n        }\n        //Killing Regular struct\n        if(shift < entityList.length-1) {\n            for(uint r = shift; r < entityList.length-1; r++) {\n                entityStructs[entityList[r]].active = false;\n                entityStructs[entityList[r]].date = 0;\n            }\n        }\n        //Buy me a coffee\n        rewardDev();\n        //If any ETH stored at contract, send it to latest VIP as a bonus\n        if(address(this).balance.sub(devreward) > 0) {\n            if(lastVIPkey() != 9999) {\n                vipList[lastVIPkey()].transfer(address(this).balance);\n            }\n        }\n        //Switch vars to initial state\n        vipList.length=0;\n        entityList.length=0;\n        shift = 0;\n        startedAt = now;\n        timeRemaining = 24 hours;\n        timetoRegular = true;\n        round++;\n        return true;\n      }\n      \n      //Decrease timeRemaining: every 100 users in queue divides it by half \n      uint range = joined.sub(exited).div(100);\n      if(range != 0) {\n        timeRemaining = timeRemaining.div(range.mul(2));  \n      } \n      return false;\n  }    \n  \n  function rewardDev() public {\n      //No one can modify devreward constant, it's safe from manipulations\n      dev.transfer(devreward);\n      devreward = 0;\n  }  \n  \n  function queueVIP() public view returns (address[]) {\n      //Return durty queue\n      return vipList;\n  }\n  \n  function queueREG() public view returns (address[]) {\n      //Return durty queue\n      return entityList;\n  }\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b)",
        "debug": "storage_1: 0xc000106e00e00000001800000000000000000000000000000000000000000000\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_8257: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_9: 0xc000106e00e000000017ffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldatasize_XKnockoutRegular: 0x3\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\nstorage_2: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x80c52dc4232924701d1ed393c1d48f07c177820a.sol",
        "function": "fallback",
        "lineno": 19,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}