{
  "contract": "0x9192e2cb98de04234889d39e70b8f7fa3e591f8a",
  "tool": "mythril",
  "start": 1563642476.4786768,
  "end": 1563642500.5949488,
  "duration": 24.11627197265625,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 5713,
        "code": "\n    ",
        "debug": "calldata_TestPCoin_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TestPCoin_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TestPCoin_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_3: 0x0\ncalldata_TestPCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TestPCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/30/0x9192e2cb98de04234889d39e70b8f7fa3e591f8a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5726,
        "code": "c;\n  }\n}\n\n\n/**",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TestPCoin_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TestPCoin_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TestPCoin_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_3: 0x0\ncalldata_TestPCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TestPCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x9192e2cb98de04234889d39e70b8f7fa3e591f8a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 29,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5750,
        "code": "eturn a - b;\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TestPCoin_4: 0x0\ncalldata_TestPCoin_32 + 36: 0x1\nstorage_3: 0x0\ncalldata_TestPCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TestPCoin: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x9192e2cb98de04234889d39e70b8f7fa3e591f8a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}