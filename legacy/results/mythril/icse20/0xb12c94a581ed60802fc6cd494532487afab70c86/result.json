{
  "contract": "0xb12c94a581ed60802fc6cd494532487afab70c86",
  "tool": "mythril",
  "start": 1563576688.0837767,
  "end": 1563576748.6210878,
  "duration": 60.53731107711792,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 296,
        "code": "ance > 0) {\n         ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x3\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "fallback",
        "lineno": 158,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 636,
        "code": "undsFor(_users[i]);\n        }\n    }\n    \n    function buyTokens(address _user, uint _value) private {\n        assert(_user != 0x0);\n        \n        ethBalances[_user] += _value",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x44dedf4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `returnFundsForUsers(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "returnFundsForUsers(address[])",
        "lineno": 141,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2101,
        "code": "lic payable {\n      ",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Token: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "fallback",
        "lineno": 152,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2172,
        "code": "0);\n        buyTokens(msg.se",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Token: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "fallback",
        "lineno": 153,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2252,
        "code": "alue);\n    }\n    \n    function withdr",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x10000000000000000000000000000000000000000000000000000004\ncallvalue: 0xffffffffefffffffffffffffffffffffffffffffffffffffffffffffffffffef\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Token: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "fallback",
        "lineno": 154,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2525,
        "code": "sender == reserveManager);\n        _;\n    }\n    modifier only",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Token_0: 0x44dedf4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "returnFundsForUsers(address[])",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2673,
        "code": "edTokens;\n    mapping(address ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_4: 0x0\ncalldata_Token_0: 0x5e5f2e2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "_function_0x5e5f2e26",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2898,
        "code": "sender == reserveManager);\n        _;\n    }\n    modifier only",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Token_0: 0x5fa7b58400000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "removeToken(address)",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3738,
        "code": "sender == reserveManager);\n        _;\n    }\n    modifier only",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Token_0: 0x7362377b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "withdrawEther()",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4021,
        "code": "er == reserveManager || msg.sender == address(this));\n        _;\n    }\n\n    function TestIco",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x7dfbdf6d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "returnFundsFor(address)",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4803,
        "code": "  \n    \n    function returnFundsForUs",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "returnFundsFor(address)",
        "lineno": 137,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5327,
        "code": "sender == reserveManager);\n        _;\n    }\n    modifier only",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Token_0: 0xdee1f2af00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "addToken(address,uint256,uint256)",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5362,
        "code": "  assert(_price > 0);",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_1: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Token_0: 0xdee1f2af00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "addToken(address,uint256,uint256)",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6016,
        "code": " = token.allowance(_user, ad",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncalldata_Token_0: 0xe050491000000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "buyWithTokens(address)",
        "lineno": 111,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7800,
        "code": ";\n            uint tokenBalanc",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8060\n",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "withdrawEther()",
        "lineno": 163,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 8060,
        "code": "  \n    function withdrawEther(",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "withdrawEther()",
        "lineno": 170,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 8060,
        "code": "  \n    function withdrawEther(",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawEther(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/18/0xb12c94a581ed60802fc6cd494532487afab70c86.sol",
        "function": "withdrawEther()",
        "lineno": 170,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}