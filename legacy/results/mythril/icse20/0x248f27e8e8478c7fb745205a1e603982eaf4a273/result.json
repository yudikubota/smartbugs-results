{
  "contract": "0x248f27e8e8478c7fb745205a1e603982eaf4a273",
  "tool": "mythril",
  "start": 1563628525.1368656,
  "end": 1563628876.10028,
  "duration": 350.9634144306183,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 265,
        "code": "urrentHighestBid = msg.value;\n        ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x248f27e8e8478c7fb745205a1e603982eaf4a273.sol",
        "function": "fallback",
        "lineno": 51,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 597,
        "code": "herBid auctionNotOver {\n        highBidder.transfer(currentHighestBid);\n        currentHighestBid = msg.value;\n        highBidder = msg.sender;\n        squak = _squak;\n        NewHighestBid(msg.sender, msg.value, _squak);\n\n        }\n    //allow people with basic wallets to send",
        "debug": "calldata_AuctionItem_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AuctionItem_0: 0x7aef951c00000000000000000000000000000000000000000000000000000000\ncalldatasize_AuctionItem: 0x4\n",
        "description": "A possible integer overflow exists in the function `bid(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x248f27e8e8478c7fb745205a1e603982eaf4a273.sol",
        "function": "bid(string)",
        "lineno": 40,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1281,
        "code": "        currentHighestBid = msg.value;",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function bid(string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x248f27e8e8478c7fb745205a1e603982eaf4a273.sol",
        "function": "bid(string)",
        "lineno": 42,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2197,
        "code": "ntract AuctionItem {\n    \n    string public auctionName;\n    address public owner; \n    bool auctionEnded = false;\n    \n    event NewHighestBid(\n        address newHighBidder,\n        uint newHighBid,\n        string squak\n    );\n    \n    uint public currentHighestBid = 0;\n    address public highBidder; \n    string public squak;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier higherBid {\n        require(msg.value > currentHighestBid);\n        _;\n    }\n    \n    modifier auctionNotOver {\n        require(auctionEnded == false);\n        _;\n    }\n    \n    function AuctionItem(string name, uint startingBid) {\n        auctionName = name; \n        owner = msg.sender;\n        currentHighestBid = startingBid;\n    }\n    \n    //allow people using MetaMask/Cipher et. al. to specifically set a taunting message ;)\n    function bid(string _squak) payable higherBid auctionNotOver {\n        highBidder.transfer(currentHighestBid);\n        currentHighestBid = msg.value;\n        highBidder = msg.sender;\n        squak = _squak;\n        NewHighestBid(msg.sender, msg.value, _squak);\n\n        }\n    //allow people with basic wallets to send a bid (QR scan etc.), but no squaking for them \n    function() payable higherBid auctionNotOver{\n        highBidder.transfer(currentHighestBid);\n        currentHighestBid = msg.value;\n        highBidder = msg.sender;\n        NewHighestBid(msg.sender, msg.value, '');\n        \n    }\n    //The owner should be able to end the auction\n    function endAuction() onlyOwner{\n        selfdestruct(owner);\n        auctionEnded = true;\n    }\n\n    \n}",
        "debug": "calldata_AuctionItem_4 + calldata_AuctionItem_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\nretval_1281: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncallvalue: 0x1\ncalldata_AuctionItem_0: 0x7aef951c00000000000000000000000000000000000000000000000000000000\ncalldatasize_AuctionItem: 0x4\n",
        "description": "A possible integer overflow exists in the function `bid(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x248f27e8e8478c7fb745205a1e603982eaf4a273.sol",
        "function": "bid(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2211,
        "code": "ntract AuctionItem {\n    \n    string public auctionName;\n    address public owner; \n    bool auctionEnded = false;\n    \n    event NewHighestBid(\n        address newHighBidder,\n        uint newHighBid,\n        string squak\n    );\n    \n    uint public currentHighestBid = 0;\n    address public highBidder; \n    string public squak;\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    modifier higherBid {\n        require(msg.value > currentHighestBid);\n        _;\n    }\n    \n    modifier auctionNotOver {\n        require(auctionEnded == false);\n        _;\n    }\n    \n    function AuctionItem(string name, uint startingBid) {\n        auctionName = name; \n        owner = msg.sender;\n        currentHighestBid = startingBid;\n    }\n    \n    //allow people using MetaMask/Cipher et. al. to specifically set a taunting message ;)\n    function bid(string _squak) payable higherBid auctionNotOver {\n        highBidder.transfer(currentHighestBid);\n        currentHighestBid = msg.value;\n        highBidder = msg.sender;\n        squak = _squak;\n        NewHighestBid(msg.sender, msg.value, _squak);\n\n        }\n    //allow people with basic wallets to send a bid (QR scan etc.), but no squaking for them \n    function() payable higherBid auctionNotOver{\n        highBidder.transfer(currentHighestBid);\n        currentHighestBid = msg.value;\n        highBidder = msg.sender;\n        NewHighestBid(msg.sender, msg.value, '');\n        \n    }\n    //The owner should be able to end the auction\n    function endAuction() onlyOwner{\n        selfdestruct(owner);\n        auctionEnded = true;\n    }\n\n    \n}",
        "debug": "calldata_AuctionItem_4 + calldata_AuctionItem_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2: 0x0\nretval_1281: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncallvalue: 0x1\ncalldata_AuctionItem_0: 0x7aef951c00000000000000000000000000000000000000000000000000000000\ncalldatasize_AuctionItem: 0x4\n",
        "description": "A possible integer overflow exists in the function `bid(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x248f27e8e8478c7fb745205a1e603982eaf4a273.sol",
        "function": "bid(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}