{
  "contract": "0xc5285cc8da144741c5b7eab79535ea6a71c2e224",
  "tool": "mythril",
  "start": 1563743990.20475,
  "end": 1563744353.140449,
  "duration": 362.93569898605347,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 615,
        "code": "y, string tokenName,string tokenSymbol) public {\n        //setting up admins\n        admin1 = 0xA0dE1197643Bc8177CC8897d939E94BD85871f37;\n        admin2 = 0x6D2442881345B474cfb205D9B8701419B56bb6D5;\n        admin3 = 0x6A8E0CDCc06706E267C8a0DE86f8fcaBA6cB1a70;\n\n        //user creation\n        users[0xA0dE1197643Bc8177CC8897d939E94BD85871f37] = User(false, false, initialSupply, true);\n\n        if(!hasKey(0xA0dE1197643Bc8177CC8897d939E94BD85871f37)) {\n            balancesKeys.push(msg.sender);\n        }\n        totalSupply = initialSupply;\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = 8;                            // Amount of decimals for display purposes\n    }\n\n    //Modifier to limit access to admin function",
        "debug": "calldata_Dignity_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Dignity_0: 0x46e3482300000000000000000000000000000000000000000000000000000000\ncalldatasize_Dignity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x46e34823`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xc5285cc8da144741c5b7eab79535ea6a71c2e224.sol",
        "function": "_function_0x46e34823",
        "lineno": 35,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3002,
        "code": "ser, true);\n    }\n    \n    function destroyCo",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_5,_256): 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Dignity_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Dignity_4: 0xff00\nstorage_7: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Dignity_0: 0x3d22d57100000000000000000000000000000000000000000000000000000000\ncalldatasize_Dignity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x3d22d571`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xc5285cc8da144741c5b7eab79535ea6a71c2e224.sol",
        "function": "_function_0x3d22d571",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10520,
        "code": "ntract Dignity {\n\n   string public standard = 'Token 0.1';\n   string public name;\n   string public symbol;\n   uint8 public decimals;\n   uint256 public totalSupply;\n\n    //Admins declaration\n    address private admin1;\n    address private admin2;\n    address private admin3;\n\n    //User struct\n    struct User {\n        bool frozen;\n        bool banned;\n        uint256 balance;\n        bool isset;\n    }\n    //Mappings\n    mapping(address => User) private users;\n\n    address[] private balancesKeys;\n\n    //Events\n    event FrozenFunds(address indexed target, bool indexed frozen);\n    event BanAccount(address indexed account, bool indexed banned);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Minted(address indexed to, uint256 indexed value);\n\n    //Main contract function\n    function tan (uint256 initialSupply, string tokenName,string tokenSymbol) public {\n        //setting up admins\n        admin1 = 0xA0dE1197643Bc8177CC8897d939E94BD85871f37;\n        admin2 = 0x6D2442881345B474cfb205D9B8701419B56bb6D5;\n        admin3 = 0x6A8E0CDCc06706E267C8a0DE86f8fcaBA6cB1a70;\n\n        //user creation\n        users[0xA0dE1197643Bc8177CC8897d939E94BD85871f37] = User(false, false, initialSupply, true);\n\n        if(!hasKey(0xA0dE1197643Bc8177CC8897d939E94BD85871f37)) {\n            balancesKeys.push(msg.sender);\n        }\n        totalSupply = initialSupply;\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = 8;                            // Amount of decimals for display purposes\n    }\n\n    //Modifier to limit access to admin functions\n    modifier onlyAdmin {\n        if(!(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3)) {\n            revert();\n        }\n        _;\n    }\n\n    modifier unbanned {\n        if(users[msg.sender].banned) {\n            revert();\n        }\n        _;\n    }\n\n    modifier unfrozen {\n        if(users[msg.sender].frozen) {\n            revert();\n        }\n        _;\n    }\n\n    function setSecondAdmin(address newAdmin) onlyAdmin public {\n        admin2 = newAdmin;\n    }\n\n    function setThirdAdmin(address newAdmin) onlyAdmin public {\n        admin3 = newAdmin;\n    }\n\n    //Admins getters\n    function getFirstAdmin() onlyAdmin public constant returns (address) {\n        return admin1;\n    }\n\n    function getSecondAdmin() onlyAdmin public constant returns (address) {\n        return admin2;\n    }\n\n    function getThirdAdmin() onlyAdmin public constant returns (address) {\n        return admin3;\n    }\n\n    //Administrative actions\n    function mintToken(uint256 mintedAmount) onlyAdmin public {\n        if(!users[msg.sender].isset){\n            users[msg.sender] = User(false, false, 0, true);\n        }\n        if(!hasKey(msg.sender)){\n            balancesKeys.push(msg.sender);\n        }\n        users[msg.sender].balance += mintedAmount;\n        totalSupply += mintedAmount;\n        Minted(msg.sender, mintedAmount);\n    }\n\n    function userBanning (address banUser) onlyAdmin public {\n        if(!users[banUser].isset){\n            users[banUser] = User(false, false, 0, true);\n        }\n        users[banUser].banned = true;\n        var userBalance = users[banUser].balance;\n        \n        users[getFirstAdmin()].balance += userBalance;\n        users[banUser].balance = 0;\n        \n        BanAccount(banUser, true);\n    }\n    \n    function destroyCoins (address addressToDestroy, uint256 amount) onlyAdmin public {\n        users[addressToDestroy].balance -= amount;    \n        totalSupply -= amount;\n    }\n\n    function tokenFreezing (address freezAccount, bool isFrozen) onlyAdmin public{\n        if(!users[freezAccount].isset){\n            users[freezAccount] = User(false, false, 0, true);\n        }\n        users[freezAccount].frozen = isFrozen;\n        FrozenFunds(freezAccount, isFrozen);\n    }\n\n    function balanceOf(address target) public returns (uint256){\n        if(!users[target].isset){\n            users[target] = User(false, false, 0, true);\n        }\n        return users[target].balance;\n    }\n\n    function hasKey(address key) private constant returns (bool){\n        for(uint256 i=0;i<balancesKeys.length;i++){\n            address value = balancesKeys[i];\n            if(value == key){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //User actions\n    function transfer(address _to, uint256 _value) unbanned unfrozen public returns (bool success)  {\n        if(!users[msg.sender].isset){\n            users[msg.sender] = User(false, false, 0, true);\n        }\n        if(!users[_to].isset){\n            users[_to] = User(false, false, 0, true);\n        }\n        if(!hasKey(msg.sender)){\n            balancesKeys.push(msg.sender);\n        }\n        if(!hasKey(_to)){\n            balancesKeys.push(_to);\n        }\n        if(users[msg.sender].balance < _value || users[_to].balance + _value < users[_to].balance){\n            revert();\n        }\n\n        users[msg.sender].balance -= _value;\n        users[_to].balance += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function hasNextKey(uint256 balancesIndex) onlyAdmin public constant returns (bool) {\n        return balancesIndex < balancesKeys.length;\n    }\n\n    function nextKey(uint256 balancesIndex) onlyAdmin public constant returns (address) {\n        if(!hasNextKey(balancesIndex)){\n            revert();\n        }\n        return balancesKeys[balancesIndex];\n    }\n\n}",
        "debug": "calldata_Dignity_4 + calldata_Dignity_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_49791959467252497455735130940088646708311117250336157395101362029847983277999: 0xa0de1197643bc8177cc8897d939e94bd85871f3700\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Dignity_0: 0x46e3482300000000000000000000000000000000000000000000000000000000\ncalldatasize_Dignity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x46e34823`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xc5285cc8da144741c5b7eab79535ea6a71c2e224.sol",
        "function": "_function_0x46e34823",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 10534,
        "code": "ntract Dignity {\n\n   string public standard = 'Token 0.1';\n   string public name;\n   string public symbol;\n   uint8 public decimals;\n   uint256 public totalSupply;\n\n    //Admins declaration\n    address private admin1;\n    address private admin2;\n    address private admin3;\n\n    //User struct\n    struct User {\n        bool frozen;\n        bool banned;\n        uint256 balance;\n        bool isset;\n    }\n    //Mappings\n    mapping(address => User) private users;\n\n    address[] private balancesKeys;\n\n    //Events\n    event FrozenFunds(address indexed target, bool indexed frozen);\n    event BanAccount(address indexed account, bool indexed banned);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Minted(address indexed to, uint256 indexed value);\n\n    //Main contract function\n    function tan (uint256 initialSupply, string tokenName,string tokenSymbol) public {\n        //setting up admins\n        admin1 = 0xA0dE1197643Bc8177CC8897d939E94BD85871f37;\n        admin2 = 0x6D2442881345B474cfb205D9B8701419B56bb6D5;\n        admin3 = 0x6A8E0CDCc06706E267C8a0DE86f8fcaBA6cB1a70;\n\n        //user creation\n        users[0xA0dE1197643Bc8177CC8897d939E94BD85871f37] = User(false, false, initialSupply, true);\n\n        if(!hasKey(0xA0dE1197643Bc8177CC8897d939E94BD85871f37)) {\n            balancesKeys.push(msg.sender);\n        }\n        totalSupply = initialSupply;\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = 8;                            // Amount of decimals for display purposes\n    }\n\n    //Modifier to limit access to admin functions\n    modifier onlyAdmin {\n        if(!(msg.sender == admin1 || msg.sender == admin2 || msg.sender == admin3)) {\n            revert();\n        }\n        _;\n    }\n\n    modifier unbanned {\n        if(users[msg.sender].banned) {\n            revert();\n        }\n        _;\n    }\n\n    modifier unfrozen {\n        if(users[msg.sender].frozen) {\n            revert();\n        }\n        _;\n    }\n\n    function setSecondAdmin(address newAdmin) onlyAdmin public {\n        admin2 = newAdmin;\n    }\n\n    function setThirdAdmin(address newAdmin) onlyAdmin public {\n        admin3 = newAdmin;\n    }\n\n    //Admins getters\n    function getFirstAdmin() onlyAdmin public constant returns (address) {\n        return admin1;\n    }\n\n    function getSecondAdmin() onlyAdmin public constant returns (address) {\n        return admin2;\n    }\n\n    function getThirdAdmin() onlyAdmin public constant returns (address) {\n        return admin3;\n    }\n\n    //Administrative actions\n    function mintToken(uint256 mintedAmount) onlyAdmin public {\n        if(!users[msg.sender].isset){\n            users[msg.sender] = User(false, false, 0, true);\n        }\n        if(!hasKey(msg.sender)){\n            balancesKeys.push(msg.sender);\n        }\n        users[msg.sender].balance += mintedAmount;\n        totalSupply += mintedAmount;\n        Minted(msg.sender, mintedAmount);\n    }\n\n    function userBanning (address banUser) onlyAdmin public {\n        if(!users[banUser].isset){\n            users[banUser] = User(false, false, 0, true);\n        }\n        users[banUser].banned = true;\n        var userBalance = users[banUser].balance;\n        \n        users[getFirstAdmin()].balance += userBalance;\n        users[banUser].balance = 0;\n        \n        BanAccount(banUser, true);\n    }\n    \n    function destroyCoins (address addressToDestroy, uint256 amount) onlyAdmin public {\n        users[addressToDestroy].balance -= amount;    \n        totalSupply -= amount;\n    }\n\n    function tokenFreezing (address freezAccount, bool isFrozen) onlyAdmin public{\n        if(!users[freezAccount].isset){\n            users[freezAccount] = User(false, false, 0, true);\n        }\n        users[freezAccount].frozen = isFrozen;\n        FrozenFunds(freezAccount, isFrozen);\n    }\n\n    function balanceOf(address target) public returns (uint256){\n        if(!users[target].isset){\n            users[target] = User(false, false, 0, true);\n        }\n        return users[target].balance;\n    }\n\n    function hasKey(address key) private constant returns (bool){\n        for(uint256 i=0;i<balancesKeys.length;i++){\n            address value = balancesKeys[i];\n            if(value == key){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    //User actions\n    function transfer(address _to, uint256 _value) unbanned unfrozen public returns (bool success)  {\n        if(!users[msg.sender].isset){\n            users[msg.sender] = User(false, false, 0, true);\n        }\n        if(!users[_to].isset){\n            users[_to] = User(false, false, 0, true);\n        }\n        if(!hasKey(msg.sender)){\n            balancesKeys.push(msg.sender);\n        }\n        if(!hasKey(_to)){\n            balancesKeys.push(_to);\n        }\n        if(users[msg.sender].balance < _value || users[_to].balance + _value < users[_to].balance){\n            revert();\n        }\n\n        users[msg.sender].balance -= _value;\n        users[_to].balance += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function hasNextKey(uint256 balancesIndex) onlyAdmin public constant returns (bool) {\n        return balancesIndex < balancesKeys.length;\n    }\n\n    function nextKey(uint256 balancesIndex) onlyAdmin public constant returns (address) {\n        if(!hasNextKey(balancesIndex)){\n            revert();\n        }\n        return balancesKeys[balancesIndex];\n    }\n\n}",
        "debug": "calldata_Dignity_4 + calldata_Dignity_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_49791959467252497455735130940088646708311117250336157395101362029847983277999: 0xa0de1197643bc8177cc8897d939e94bd85871f3700\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Dignity_0: 0x46e3482300000000000000000000000000000000000000000000000000000000\ncalldatasize_Dignity: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x46e34823`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/41/0xc5285cc8da144741c5b7eab79535ea6a71c2e224.sol",
        "function": "_function_0x46e34823",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}