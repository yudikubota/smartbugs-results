{"error": null, "issues": [{"address": 490, "code": " order.feesBaseOrCntr, order.feesRwrd);\n  }\n\n  // Public Order View - get mutable details of an order.\n  //\n  // If the orderId does not exist, status will be Unknown.\n  //\n  function getOrderState(uint128 orderId) public constant returns (\n    Status status, ReasonCode reasonCode, uint executedBase, uint executedCntr,\n    uint feesBaseOrCntr, uint feesRwrd) {\n    Order storage order = orderForOrderId[orderId];\n    return (order.status, order.reasonCode, order.executedBase, order.executedCntr,\n            ", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xfc00\ncalldata_ERC20_0: 0x117d412800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getOrder(uint128)", "lineno": 468, "title": "Exception state", "type": "Informational"}, {"address": 936, "code": "  // Not really designed for use from a smart contract transaction.\n  //\n  // Idea is:\n  //  - client ensures order ids are generated so that most-signficant part is time-based;\n  //  - client decides they want all orders after a certain point-in-time,\n  //    and chooses minClosedOrderIdCutoff accordingly;\n  //  - before that point-in-time they just get open and needs gas orders\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncalldata_ERC20_0: 0x31f9a21100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getOrderState(uint128)", "lineno": 485, "title": "Exception state", "type": "Informational"}, {"address": 2138, "code": "uint128 orderId) internal", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4: 0x7e32\ncalldata_ERC20_0: 0x3adcbd200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "walkBook(uint16)", "lineno": 1259, "title": "Exception state", "type": "Informational"}, {"address": 4237, "code": "55) ETH we have bigger problems\n    ba", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferBase(uint256)", "lineno": 411, "title": "Message call to external contract", "type": "Informational"}, {"address": 5831, "code": "Base, uint executedCntr,\n    uint fees", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferRwrd(uint256)", "lineno": 463, "title": "Message call to external contract", "type": "Informational"}, {"address": 6123, "code": "checked less than balance above\n    balanc", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_ERC20_0: 0x6044514200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `depositCntr()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "depositCntr()", "lineno": 422, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6512, "code": "ferFrom, BalanceType.Base, int(am", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromBase()", "lineno": 387, "title": "Message call to external contract", "type": "Informational"}, {"address": 6512, "code": "ferFrom, BalanceType.Base, int(am", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7148\nCall at address: 6836\n", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromBase()", "lineno": 387, "title": "Multiple Calls", "type": "Information"}, {"address": 6836, "code": "(uint amountBase) public {\n    address client = ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromBase()", "lineno": 392, "title": "Message call to external contract", "type": "Informational"}, {"address": 6836, "code": "(uint amountBase) public {\n    address client = ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7148\n", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromBase()", "lineno": 392, "title": "Multiple Calls", "type": "Information"}, {"address": 7148, "code": ";\n    require(amountBase <= balan", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromBase()", "lineno": 394, "title": "Message call to external contract", "type": "Informational"}, {"address": 7871, "code": "er;\n    address book = address(this);\n    ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getClientBalances(address)", "lineno": 376, "title": "Message call to external contract", "type": "Informational"}, {"address": 7871, "code": "er;\n    address book = address(this);\n    ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8422\nCall at address: 8173\n", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getClientBalances(address)", "lineno": 376, "title": "Multiple Calls", "type": "Information"}, {"address": 8173, "code": "ontract not to do nasty things like call b", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getClientBalances(address)", "lineno": 378, "title": "Message call to external contract", "type": "Informational"}, {"address": 8173, "code": "ontract not to do nasty things like call b", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8422\n", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getClientBalances(address)", "lineno": 378, "title": "Multiple Calls", "type": "Information"}, {"address": 8422, "code": "we cannot trust the token t", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "getClientBalances(address)", "lineno": 379, "title": "Message call to external contract", "type": "Informational"}, {"address": 9221, "code": "Rwrd));\n  }\n\n  // Public Funds Ma", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromRwrd()", "lineno": 441, "title": "Message call to external contract", "type": "Informational"}, {"address": 9221, "code": "Rwrd));\n  }\n\n  // Public Funds Ma", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 9546\n", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromRwrd()", "lineno": 441, "title": "Multiple Calls", "type": "Information"}, {"address": 9546, "code": "nder;\n    require(amountRwrd > 0);\n    require(a", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "transferFromRwrd()", "lineno": 447, "title": "Message call to external contract", "type": "Informational"}, {"address": 11417, "code": " > baseMaxSize) {\n      order.status = Status.Rejected;\n      order.reasonCode = R", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_32 + 68: 0xfc\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0xbbec376800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "_function_0xbbec3768", "lineno": 630, "title": "Exception state", "type": "Informational"}, {"address": 13306, "code": "Id];\n    uint16 price = order.p", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncaller: 0x0\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_0: 0xbd5acbd600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cc6a8f865a71e69c9bc9931c486b6d1cbd90e15.sol", "function": "continueOrder(uint128,uint256)", "lineno": 696, "title": "Exception state", "type": "Informational"}], "success": true}