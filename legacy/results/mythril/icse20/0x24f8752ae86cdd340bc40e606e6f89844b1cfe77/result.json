{
  "contract": "0x24f8752ae86cdd340bc40e606e6f89844b1cfe77",
  "tool": "mythril",
  "start": 1563683257.6076164,
  "end": 1563683271.2167487,
  "duration": 13.609132289886475,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 256,
        "code": "hon\u7684\u88c5\u9970\u5668\u5f88\u76f8\u4f3c\uff09\n    * \u7528\u4e8e\u5728\u51fd\u6570\u6267\u884c\u524d\u68c0\u67e5\u67d0\u79cd\u524d",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf287c016c1fbcd873dbef7be1bc26e23a0cd168189d5539e03da0def7f7fadd9\ncallvalue: 0xfcb8184cfd4208003da806295fc131014b080cec1bda513f3b64a90e407fad93\nstorage_7: 0x0\ncalldata_token_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 60,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 272,
        "code": "\u540e\u624d\u4f1a\u7ee7\u7eed\u6267\u884c\u8be5\u65b9\u6cd5\uff09\n    * _ \u8868\u793a",
        "debug": "storage_2: 0xf287c016c1fbcd873dbef7be1bc26e23a0cd168189d5539e03da0def7f7fadd9\ncallvalue: 0xfcb8184cfd4208003da806295fc131014b080cec1bda513f3b64a90e407fad93\nstorage_7: 0x0\ncalldata_token_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 61,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 354,
        "code": "ne() { if (now",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0x0\ncalldata_token_0: 0x1cb3b2100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 64,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 492,
        "code": "\n    **/\n    modifier afterDeadline() { if (now ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 492,
        "code": "\n    **/\n    modifier afterDeadline() { if (now ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 714\n",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 62,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 714,
        "code": "oalReached() afterDeadli",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "fallback",
        "lineno": 70,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 1776,
        "code": "}",
        "debug": "",
        "description": "In the function `safeWithdrawal()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "safeWithdrawal()",
        "lineno": 106,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1776,
        "code": "}",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2174\nCall at address: 2174\nCall at address: 2174\nCall at address: 2174\n",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "safeWithdrawal()",
        "lineno": 106,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2174,
        "debug": "",
        "description": "In the function `safeWithdrawal()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "safeWithdrawal()",
        "lineno": 106,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2174,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function safeWithdrawal(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/34/0x24f8752ae86cdd340bc40e606e6f89844b1cfe77.sol",
        "function": "safeWithdrawal()",
        "lineno": 106,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}