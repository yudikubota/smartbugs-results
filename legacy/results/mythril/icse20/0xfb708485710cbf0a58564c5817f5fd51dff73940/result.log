{"error": null, "issues": [{"address": 8002, "code": "sol\np", "debug": "calldata_StoToken_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_StoToken_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_3: 0x0\ncalldata_StoToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_StoToken_0: 0x4000aea000000000000000000000000000000000000000000000000000000000\ncalldatasize_StoToken: 0x4\n", "description": "A possible integer overflow exists in the function `transferAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfb708485710cbf0a58564c5817f5fd51dff73940.sol", "function": "transferAndCall(address,uint256,bytes)", "lineno": 123, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8015, "code": "olidity ^0.4.2", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_StoToken_4: 0x1\ncalldata_StoToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_StoToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_StoToken_0: 0x90db623f00000000000000000000000000000000000000000000000000000000\ncalldatasize_StoToken: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xfb708485710cbf0a58564c5817f5fd51dff73940.sol", "function": "increaseApprovalAndCall(address,uint256,bytes)", "lineno": 124, "title": "Exception state", "type": "Informational"}], "success": true}