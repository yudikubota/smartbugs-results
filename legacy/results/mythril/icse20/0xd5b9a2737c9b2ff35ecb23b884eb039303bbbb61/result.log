{"error": null, "issues": [{"address": 1595, "code": "o);\n    }\n\n    // Owner can set any account into freeze state. It is helpful in case if account holder has \n    // lost his key and he want administrator to f", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xab1f792900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMigrationInfo(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "setMigrationInfo(string)", "lineno": 149, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1833, "code": "pender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\n            throw; \n        }\n        return true;\n    }\n\n    // Allows setting a descriptive string, which will aid any users in migrating their token\n    // to a newer version of the contract. T", "debug": "calldata_Token_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 133, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3220, "code": "     Transfer(_from, _t", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf00f02348b47bf775beffffffe5d0000000000009effd0ba0000000010010012\ncalldata_Token_32 + 36: 0xb97eb2a44b47a77315ed77d64e30d07f523d6f77465bce7983df96f369bb80d4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xebbf6c8339a7b84455e007e6fc000d8058214c86717b9969b3dff6ffcb2d5d47\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xb97eb2a44b47a77315ed77d64e30d07f523d6f77465bce7983df96f369bb80d4\nstorage_10: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "transferFrom(address,address,uint256)", "lineno": 113, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4976, "code": " function transferFrom(", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffdfffffffe80003ff000000000000000000000000000000000000001\ncalldata_Token_32 + 4: 0xfffffffff7fffffffd00007fd000000000000000000000000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x800000000000000000bfffd02bffffffffffffffffffffffffffffffffffffff\nstorage_10: 0x0\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "transfer(address,uint256)", "lineno": 105, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6044, "code": "    throw; \n        }\n        return true;\n    }\n\n    // Allows setting a descriptive string, which will aid any users in mi", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 138, "title": "Message call to external contract", "type": "Warning"}, {"address": 6567, "code": "f ether is sent to this address, send it back.\n        throw;\n    }\n     \n    address public owner;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public frozenAccount;\n\n    //// Events ////\n    event MigrationInfoSet(string newMigrationInfo);\n    event FrozenFunds(address target, bool frozen);\n    \n    // This is to be used when migration to a new contract starts.\n    // This string can be used for any authorative information re the migration\n    // (e.g. address to use for migration, or URL to explain where to find more info)\n    string public migrationInfo = \"\";\n\n    modifier onlyOwner{ if (msg.sender != owner) throw; _; }\n\n    /* Public variables of the token */\n    string public name = \"Beth\";\n    uint8 public decimals = 18;\n    string public symbol = \"BTH\";\n    string public version = \"1.0\";\n\n    bool private stopped = false;\n    modifier stopInEmergency { if (!stopped) _; }\n\n    function Beth() {\n        owner = 0xa62dFc3a5bf6ceE820B916d5eF054A29826642e8;\n        balances[0xa62dFc3a5bf6ceE820B916d5eF054A29826642e8] = 2832955 * 1 ether;\n        totalSupply = 2832955* 1 ether;\n    }\n\n\n    function transfer(address _to, uint256 _value) stopInEmergency returns (bool success) {\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n        if (balances[msg.sender] < _value) throw;\n        if (_value <= 0) throw;\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) stopInEmergency  returns (bool success) {\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n        if (balances[_from] < _value) throw;\n        if (allowed[_from][msg.sender] < _value) throw;\n        if (_value <= 0) throw;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\n            throw; \n        }\n        return true;\n    }\n\n    // Allows setting a descriptive string, which will aid any users in migrating their token\n    // to a newer version of the contract. This field provides a kind of 'double-layer' of\n    // authentication for any migration announcement, as it can only be set by WeTrust.\n    /// @param _migrationInfo The information string to be stored on the contract\n    function setMigrationInfo(string _migrationInfo) onlyOwner public {\n        migrationInfo = _migrationInfo;\n        MigrationInfoSet(_migrationInfo);\n    }\n\n    // Owner can set any account into freeze state. It is helpful in case if account holder has \n    // lost his key and he want administrator to freeze account until account key is recovered\n    // @param target The account address\n    // @param freeze The state of account\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // It is called Circuit Breakers (Pause contract functionality), it stop execution if certain conditions are met, \n    // and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a \n    // bug is discovered, so the most feasible option to stop and updated migration message about launching an updated version of contract. \n    // @param _stop Switch the circuite breaker on or off\n    function emergencyStop(bool _stop) onlyOwner {\n        stopped = _stop;\n    }\n\n    // changeOwner is used to change the administrator of the contract. This can be useful if owner account is suspected to be compromised\n    // and you have luck to update owner.\n    // @param _newOwner Address of new owner\n    function changeOwner(address _newOwner) onlyOwner {\n        balances[_newOwner] = balances[owner];\n        balances[owner] = 0;\n        owner = _newOwner;\n        Transfer(owner, _newOwner,balances[_newOwner]);\n    }\n\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xab1f792900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMigrationInfo(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "setMigrationInfo(string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6581, "code": "f ether is sent to this address, send it back.\n        throw;\n    }\n     \n    address public owner;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    mapping (address => bool) public frozenAccount;\n\n    //// Events ////\n    event MigrationInfoSet(string newMigrationInfo);\n    event FrozenFunds(address target, bool frozen);\n    \n    // This is to be used when migration to a new contract starts.\n    // This string can be used for any authorative information re the migration\n    // (e.g. address to use for migration, or URL to explain where to find more info)\n    string public migrationInfo = \"\";\n\n    modifier onlyOwner{ if (msg.sender != owner) throw; _; }\n\n    /* Public variables of the token */\n    string public name = \"Beth\";\n    uint8 public decimals = 18;\n    string public symbol = \"BTH\";\n    string public version = \"1.0\";\n\n    bool private stopped = false;\n    modifier stopInEmergency { if (!stopped) _; }\n\n    function Beth() {\n        owner = 0xa62dFc3a5bf6ceE820B916d5eF054A29826642e8;\n        balances[0xa62dFc3a5bf6ceE820B916d5eF054A29826642e8] = 2832955 * 1 ether;\n        totalSupply = 2832955* 1 ether;\n    }\n\n\n    function transfer(address _to, uint256 _value) stopInEmergency returns (bool success) {\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n        if (balances[msg.sender] < _value) throw;\n        if (_value <= 0) throw;\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) stopInEmergency  returns (bool success) {\n        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n        if (balances[_from] < _value) throw;\n        if (allowed[_from][msg.sender] < _value) throw;\n        if (_value <= 0) throw;\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /* Approves and then calls the receiving contract */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        \n        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\n            throw; \n        }\n        return true;\n    }\n\n    // Allows setting a descriptive string, which will aid any users in migrating their token\n    // to a newer version of the contract. This field provides a kind of 'double-layer' of\n    // authentication for any migration announcement, as it can only be set by WeTrust.\n    /// @param _migrationInfo The information string to be stored on the contract\n    function setMigrationInfo(string _migrationInfo) onlyOwner public {\n        migrationInfo = _migrationInfo;\n        MigrationInfoSet(_migrationInfo);\n    }\n\n    // Owner can set any account into freeze state. It is helpful in case if account holder has \n    // lost his key and he want administrator to freeze account until account key is recovered\n    // @param target The account address\n    // @param freeze The state of account\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // It is called Circuit Breakers (Pause contract functionality), it stop execution if certain conditions are met, \n    // and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a \n    // bug is discovered, so the most feasible option to stop and updated migration message about launching an updated version of contract. \n    // @param _stop Switch the circuite breaker on or off\n    function emergencyStop(bool _stop) onlyOwner {\n        stopped = _stop;\n    }\n\n    // changeOwner is used to change the administrator of the contract. This can be useful if owner account is suspected to be compromised\n    // and you have luck to update owner.\n    // @param _newOwner Address of new owner\n    function changeOwner(address _newOwner) onlyOwner {\n        balances[_newOwner] = balances[owner];\n        balances[owner] = 0;\n        owner = _newOwner;\n        Transfer(owner, _newOwner,balances[_newOwner]);\n    }\n\n}", "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xab1f792900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMigrationInfo(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xd5b9a2737c9b2ff35ecb23b884eb039303bbbb61.sol", "function": "setMigrationInfo(string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}], "success": true}