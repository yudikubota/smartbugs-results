{
  "contract": "0x663374c6e95090803695c430bb06f5f39281a12e",
  "tool": "mythril",
  "start": 1563662421.249234,
  "end": 1563662445.449422,
  "duration": 24.200187921524048,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2471,
        "code": ") public returns (uint) {\n    return token.balan",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/33/0x663374c6e95090803695c430bb06f5f39281a12e.sol",
        "function": "_function_0x16114acd",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5841,
        "code": " marker.\n *\n * @notic",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/33/0x663374c6e95090803695c430bb06f5f39281a12e.sol",
        "function": "_function_0xc45d19db",
        "lineno": 337,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5841,
        "code": " marker.\n *\n * @notic",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2471\n",
        "filename": "/unique_chucks/33/0x663374c6e95090803695c430bb06f5f39281a12e.sol",
        "function": "_function_0x16114acd",
        "lineno": 337,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7932,
        "code": "/20\n ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeableToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_UpgradeableToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_UpgradeableToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeableToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x663374c6e95090803695c430bb06f5f39281a12e.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 152,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7945,
        "code": "ract ERC20 is ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UpgradeableToken_4: 0x1\ncalldata_UpgradeableToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UpgradeableToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_UpgradeableToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x663374c6e95090803695c430bb06f5f39281a12e.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 154,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}