{"error": null, "issues": [{"address": 268, "code": "ress[] _tokens) external view returns (bool)\n    {\n        for (uint i = 0; i < _tokens.length; i++)\n      ", "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenRegistryInterface_0: 0x107e47200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllSupportedTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "getAllSupportedTokens()", "lineno": 148, "title": "Integer Overflow ", "type": "Warning"}, {"address": 454, "code": "      if (_allowedTokens[i] == _currentToken)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Allow buy cuties for token\n    function addToken(ERC20 _tokenContract, PriceOracleInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[a", "debug": "calldata_TokenRegistryInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenRegistryInterface_0: 0x223e6b5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `isTokenInList(address[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "isTokenInList(address[],address)", "lineno": 212, "title": "Integer Overflow ", "type": "Warning"}, {"address": 460, "code": "      if (_allowedTokens[i] == _currentToken)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Allow buy cuties for token\n    function addToken(ERC20 _tokenContract, PriceOracleInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[a", "debug": "calldata_TokenRegistryInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_TokenRegistryInterface_0: 0x223e6b5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `isTokenInList(address[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "isTokenInList(address[],address)", "lineno": 212, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1193, "code": "        if (address(priceOracle[_tokens[i]]) == address(0x0))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getPriceInToken(ERC20 _tokenContract, uint128 priceWei)\n        external\n        view\n        returns (uint128)\n    {\n        if (address(kybe", "debug": "calldata_TokenRegistryInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenRegistryInterface_0: 0x90a308a500000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `areAllTokensAllowed(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "areAllTokensAllowed(address[])", "lineno": 152, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1670, "code": "kens.length; i++", "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TokenRegistryInterface_0: 0x107e47200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllSupportedTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "getAllSupportedTokens()", "lineno": 150, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1672, "code": "kens.length; i++", "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TokenRegistryInterface_0: 0x107e47200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAllSupportedTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "getAllSupportedTokens()", "lineno": 150, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2303, "code": ";\n\n\n\n\n\n// --------", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenRegistryInterface_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenRegistryInterface_0: 0x275d5c800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x0275d5c8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0x0275d5c8", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2461, "code": "act, PriceOracleI", "debug": "calldata_TokenRegistryInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc\ncalldata_TokenRegistryInterface_4 + calldata_TokenRegistryInterface_4: 0x800000000000000000000000000000000000000000000000000000\ncalldata_TokenRegistryInterface_32 + 4: 0x0\ncalldata_TokenRegistryInterface_0 + 36 + calldata_TokenRegistryInterface_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenRegistryInterface_0: 0x223e6b5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `isTokenInList(address[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "isTokenInList(address[],address)", "lineno": 221, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3133, "code": ";\n\n\n\n\n\n// --------", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenRegistryInterface_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenRegistryInterface_0: 0x5476bd7200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5476bd72`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0x5476bd72", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3857, "code": "e;\n    ERC20 constant inte", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenRegistryInterface_4: 0x0\nstorage_2: 0x0\ncalldata_TokenRegistryInterface_0: 0x634282af00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0x634282af", "lineno": 129, "title": "Exception state", "type": "Informational"}, {"address": 4958, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xcda8c715", "lineno": 274, "title": "Message call to external contract", "type": "Warning"}, {"address": 4958, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5182\n", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xcda8c715", "lineno": 274, "title": "Multiple Calls", "type": "Information"}, {"address": 5182, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xcda8c715", "lineno": 274, "title": "Message call to external contract", "type": "Warning"}, {"address": 6004, "code": "urn uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 202, "title": "Message call to external contract", "type": "Warning"}, {"address": 6004, "code": "urn uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6194\n", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 202, "title": "Multiple Calls", "type": "Information"}, {"address": 6194, "code": "dress _currentToken)\n    ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 205, "title": "Message call to external contract", "type": "Warning"}, {"address": 6586, "code": ";\n    }\n\n    func", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 186, "title": "Message call to external contract", "type": "Warning"}, {"address": 6586, "code": ";\n    }\n\n    func", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6747\n", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 186, "title": "Multiple Calls", "type": "Information"}, {"address": 6747, "code": " _tokenContract, uint128 ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0xa01da7b2", "lineno": 189, "title": "Message call to external contract", "type": "Warning"}, {"address": 6898, "code": "e;\n    address[] public allTokens;\n    address operatorAddress;\n    mapping (address => KyberNetworkProxyInterface) public kyberOracle;\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    modifier onlyOperator() {\n        require(msg.sender == operatorAddress || msg.sender == owner);\n        _;\n    }\n\n    function setOperator(address _newOperator) public onlyOwner {\n        require(_newOperator != address(0));\n\n        operatorAddress = _newOperator;\n    }\n\n    function getAllSupportedTokens() external view returns (address[])\n    {\n        return allTokens;\n    }\n\n    function areAllTokensAllowed(address[] _tokens) external view returns (bool)\n    {\n        for (uint i = 0; i < _tokens.length; i++)\n        {\n            if (address(priceOracle[_tokens[i]]) == address(0x0))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getPriceInToken(ERC20 _tokenContract, uint128 priceWei)\n        external\n        view\n        returns (uint128)\n    {\n        if (address(kyberOracle[address(_tokenContract)]) != 0x0)\n        {\n            return getPriceInTokenKyber(_tokenContract, priceWei);\n        }\n        else\n        {\n            return getPriceInTokenCustom(_tokenContract, priceWei);\n        }\n    }\n\n    function getPriceInTokenCustom(ERC20 _tokenContract, uint128 priceWei)\n        internal\n        view\n        returns (uint128)\n    {\n        PriceOracleInterface oracle = priceOracle[address(_tokenContract)];\n        require(address(oracle) != address(0));\n\n        uint256 ethPerToken = oracle.ETHPrice();\n        int256 power = 36 - _tokenContract.decimals();\n        require(power > 0);\n        return uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)));\n    }\n\n    function getPriceInTokenKyber(ERC20 _tokenContract, uint128 priceWei)\n        internal\n        view\n        returns (uint128)\n    {\n        KyberNetworkProxyInterface oracle = kyberOracle[address(_tokenContract)];\n        require(address(oracle) != address(0));\n\n        uint256 ethPerToken;\n        (, ethPerToken) = oracle.getExpectedRate(ETH_TOKEN_ADDRESS, _tokenContract, priceWei);\n        require(ethPerToken > 0);\n        int256 power = 36 - _tokenContract.decimals();\n        require(power > 0);\n        return uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)));\n    }\n\n    function isTokenInList(address[] _allowedTokens, address _currentToken)\n        external\n        pure\n        returns (bool)\n    {\n        for (uint i = 0; i < _allowedTokens.length; i++)\n        {\n            if (_allowedTokens[i] == _currentToken)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Allow buy cuties for token\n    function addToken(ERC20 _tokenContract, PriceOracleInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[address(_tokenContract)]) == address(0x0));\n        require(address(kyberOracle[address(_tokenContract)]) == address(0x0));\n\n        priceOracle[address(_tokenContract)] = _priceOracle;\n        allTokens.push(_tokenContract);\n    }\n\n    /// @dev Allow buy cuties for token\n    function addKyberToken(ERC20 _tokenContract, KyberNetworkProxyInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[address(_tokenContract)]) == address(0x0));\n        require(address(kyberOracle[address(_tokenContract)]) == address(0x0));\n\n        kyberOracle[address(_tokenContract)] = _priceOracle;\n        allTokens.push(_tokenContract);\n    }\n\n    /// @dev Disallow buy cuties for token\n    function removeToken(ERC20 _tokenContract) external onlyOwner\n    {\n        delete priceOracle[address(_tokenContract)];\n        delete kyberOracle[address(_tokenContract)];\n\n        uint256 kindex = 0;\n        while (kindex < allTokens.length)\n        {\n            if (address(allTokens[kindex]) == address(_tokenContract))\n            {\n                allTokens[kindex] = allTokens[allTokens.length-1];\n                allTokens.length--;\n            }\n            else\n            {\n                kindex++;\n            }\n        }\n    }\n\n    // @dev Transfers to _withdrawToAddress all tokens controlled by\n    // contract _tokenContract.\n    function withdrawTokenFromBalance(ERC20 _tokenContract, address _withdrawToAddress) external\n    {\n        require(\n            msg.sender == owner ||\n            msg.sender == operatorAddress\n        );\n        uint256 balance = _tokenContract.balanceOf(address(this));\n        _tokenContract.transfer(_withdrawToAddress, balance);\n    }\n}", "debug": "storage_2: 0xc000000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenRegistryInterface_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenRegistryInterface_0: 0x5fa7b58400000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5fa7b584`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0x5fa7b584", "lineno": 126, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6900, "code": "e;\n    address[] public allTokens;\n    address operatorAddress;\n    mapping (address => KyberNetworkProxyInterface) public kyberOracle;\n    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n\n    modifier onlyOperator() {\n        require(msg.sender == operatorAddress || msg.sender == owner);\n        _;\n    }\n\n    function setOperator(address _newOperator) public onlyOwner {\n        require(_newOperator != address(0));\n\n        operatorAddress = _newOperator;\n    }\n\n    function getAllSupportedTokens() external view returns (address[])\n    {\n        return allTokens;\n    }\n\n    function areAllTokensAllowed(address[] _tokens) external view returns (bool)\n    {\n        for (uint i = 0; i < _tokens.length; i++)\n        {\n            if (address(priceOracle[_tokens[i]]) == address(0x0))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function getPriceInToken(ERC20 _tokenContract, uint128 priceWei)\n        external\n        view\n        returns (uint128)\n    {\n        if (address(kyberOracle[address(_tokenContract)]) != 0x0)\n        {\n            return getPriceInTokenKyber(_tokenContract, priceWei);\n        }\n        else\n        {\n            return getPriceInTokenCustom(_tokenContract, priceWei);\n        }\n    }\n\n    function getPriceInTokenCustom(ERC20 _tokenContract, uint128 priceWei)\n        internal\n        view\n        returns (uint128)\n    {\n        PriceOracleInterface oracle = priceOracle[address(_tokenContract)];\n        require(address(oracle) != address(0));\n\n        uint256 ethPerToken = oracle.ETHPrice();\n        int256 power = 36 - _tokenContract.decimals();\n        require(power > 0);\n        return uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)));\n    }\n\n    function getPriceInTokenKyber(ERC20 _tokenContract, uint128 priceWei)\n        internal\n        view\n        returns (uint128)\n    {\n        KyberNetworkProxyInterface oracle = kyberOracle[address(_tokenContract)];\n        require(address(oracle) != address(0));\n\n        uint256 ethPerToken;\n        (, ethPerToken) = oracle.getExpectedRate(ETH_TOKEN_ADDRESS, _tokenContract, priceWei);\n        require(ethPerToken > 0);\n        int256 power = 36 - _tokenContract.decimals();\n        require(power > 0);\n        return uint128(uint256(priceWei) * ethPerToken / (10 ** uint256(power)));\n    }\n\n    function isTokenInList(address[] _allowedTokens, address _currentToken)\n        external\n        pure\n        returns (bool)\n    {\n        for (uint i = 0; i < _allowedTokens.length; i++)\n        {\n            if (_allowedTokens[i] == _currentToken)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /// @dev Allow buy cuties for token\n    function addToken(ERC20 _tokenContract, PriceOracleInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[address(_tokenContract)]) == address(0x0));\n        require(address(kyberOracle[address(_tokenContract)]) == address(0x0));\n\n        priceOracle[address(_tokenContract)] = _priceOracle;\n        allTokens.push(_tokenContract);\n    }\n\n    /// @dev Allow buy cuties for token\n    function addKyberToken(ERC20 _tokenContract, KyberNetworkProxyInterface _priceOracle) external onlyOwner\n    {\n        // check if not added yet\n        require(address(priceOracle[address(_tokenContract)]) == address(0x0));\n        require(address(kyberOracle[address(_tokenContract)]) == address(0x0));\n\n        kyberOracle[address(_tokenContract)] = _priceOracle;\n        allTokens.push(_tokenContract);\n    }\n\n    /// @dev Disallow buy cuties for token\n    function removeToken(ERC20 _tokenContract) external onlyOwner\n    {\n        delete priceOracle[address(_tokenContract)];\n        delete kyberOracle[address(_tokenContract)];\n\n        uint256 kindex = 0;\n        while (kindex < allTokens.length)\n        {\n            if (address(allTokens[kindex]) == address(_tokenContract))\n            {\n                allTokens[kindex] = allTokens[allTokens.length-1];\n                allTokens.length--;\n            }\n            else\n            {\n                kindex++;\n            }\n        }\n    }\n\n    // @dev Transfers to _withdrawToAddress all tokens controlled by\n    // contract _tokenContract.\n    function withdrawTokenFromBalance(ERC20 _tokenContract, address _withdrawToAddress) external\n    {\n        require(\n            msg.sender == owner ||\n            msg.sender == operatorAddress\n        );\n        uint256 balance = _tokenContract.balanceOf(address(this));\n        _tokenContract.transfer(_withdrawToAddress, balance);\n    }\n}", "debug": "storage_2: 0xdf803800e003cc0f00000c6019e000033ffffffffffffffffffffffffffffffd\ncalldata_TokenRegistryInterface_4: 0x0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenRegistryInterface_0: 0x5fa7b58400000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenRegistryInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x5fa7b584`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x9a62d7b8ed7d5222e35f78407bae71aa86f5ad58.sol", "function": "_function_0x5fa7b584", "lineno": 126, "title": "Integer Overflow ", "type": "Warning"}], "success": true}