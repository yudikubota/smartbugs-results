{
  "contract": "0xd64f60148a99c12d18c9cec6140b772364814c83",
  "tool": "mythril",
  "start": 1563329857.2473242,
  "end": 1563330287.7986758,
  "duration": 430.5513515472412,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1327,
        "code": "2f95Eb1181);\n        votingDescription=description;\n        return true; \n    }\n    \n    \n    function rest()  returns (bool success){    \n        require(balanceOf[msg.sender] >= 5000);         // checks if the s",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x8997538900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVoting(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xd64f60148a99c12d18c9cec6140b772364814c83.sol",
        "function": "newVoting(string)",
        "lineno": 132,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3534,
        "code": "ender, _value);\n     ",
        "debug": "calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffff\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000000\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0xd64f60148a99c12d18c9cec6140b772364814c83.sol",
        "function": "burn(uint256)",
        "lineno": 97,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4101,
        "code": "      return true;\n  ",
        "debug": "calldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burnFrom(address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0xd64f60148a99c12d18c9cec6140b772364814c83.sol",
        "function": "burnFrom(address,uint256)",
        "lineno": 108,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 8110,
        "code": "ract MyToken {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    string public votingDescription;\n    uint256 public sellPrice;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => uint256) public voted;  \n    mapping (address => string) public votedFor;  \n    mapping (address => uint256) public restFinish; \n\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    /* This notifies clients about the voting */\n    event voting(address target, uint256 voteType, string votedDesc);\n    \n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyToken() {\n        balanceOf[msg.sender] = 3000000;              // Give the creator all initial tokens\n        totalSupply = 3000000;                        // Update total supply\n        name = 'GamityTest3';                                   // Set the name for display purposes\n        symbol = 'GMTEST3';                                     // Set the symbol for display purposes\n        decimals = 0;                                       // Amount of decimals for display purposes\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] > _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require (_value < allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    /// @param _extraData some extra information to send to the approved contract\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }        \n\n    /// @notice Remove `_value` tokens from the system irreversibly\n    /// @param _value the amount of money to burn\n    function burn(uint256 _value) returns (bool success) {\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n    \n    \n    \n    \n    \n    function voteFor()  returns (bool success){   \n        voted[msg.sender] = 1;    \n        votedFor[msg.sender] = votingDescription;    \n        voting (msg.sender, 1, votingDescription);          \n        return true;                                  // ends function and returns\n    }\n    \n    function voteAgainst()  returns (bool success){   \n        voted[msg.sender] = 2;\n        votedFor[msg.sender] = votingDescription;   \n        voting (msg.sender, 2, votingDescription);          \n        return true;                                  // ends function and returns\n    }\n    \n    \n    \n   function newVoting(string description)  returns (bool success){    \n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        votingDescription=description;\n        return true; \n    }\n    \n    \n    function rest()  returns (bool success){    \n        require(balanceOf[msg.sender] >= 5000);         // checks if the sender has enough to sell\n        balanceOf[this] += 5000;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= 5000; \n        restFinish[msg.sender] = block.timestamp + 3 days;\n        return true; \n    }\n    \n    \n    \n    \n    function setPrice(uint256 newSellPrice) {\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        sellPrice = newSellPrice;\n    }\n     \n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        require(msg.sender.send(revenue));                // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n    \n    function getTokens() returns (uint amount){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n    \n    function sendEther() payable returns (bool success){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        return true;                                   // ends function and returns\n    }\n\n    \n    function getEther(uint amount)  returns (bool success){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        require(msg.sender.send(amount));                 // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        return true;                                  // ends function and returns\n    }\n    \n    \n    \n    \n    \n    \n}",
        "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x2a97ed35ba18d2f3c351a1bb5bba12f95eb1181\ncalldata_tokenRecipient_0: 0x8997538900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVoting(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xd64f60148a99c12d18c9cec6140b772364814c83.sol",
        "function": "newVoting(string)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8124,
        "code": "ract MyToken {\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    string public votingDescription;\n    uint256 public sellPrice;\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => uint256) public voted;  \n    mapping (address => string) public votedFor;  \n    mapping (address => uint256) public restFinish; \n\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* This notifies clients about the amount burnt */\n    event Burn(address indexed from, uint256 value);\n\n    /* This notifies clients about the voting */\n    event voting(address target, uint256 voteType, string votedDesc);\n    \n    \n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyToken() {\n        balanceOf[msg.sender] = 3000000;              // Give the creator all initial tokens\n        totalSupply = 3000000;                        // Update total supply\n        name = 'GamityTest3';                                   // Set the name for display purposes\n        symbol = 'GMTEST3';                                     // Set the symbol for display purposes\n        decimals = 0;                                       // Amount of decimals for display purposes\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] > _value);                // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                            // Add the same to the recipient\n        Transfer(_from, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` from your account\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transfer(address _to, uint256 _value) {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value the amount to send\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require (_value < allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n    /// @param _spender The address authorized to spend\n    /// @param _value the max amount they can spend\n    /// @param _extraData some extra information to send to the approved contract\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }        \n\n    /// @notice Remove `_value` tokens from the system irreversibly\n    /// @param _value the amount of money to burn\n    function burn(uint256 _value) returns (bool success) {\n        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n        totalSupply -= _value;                                // Updates totalSupply\n        Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        Burn(_from, _value);\n        return true;\n    }\n    \n    \n    \n    \n    \n    function voteFor()  returns (bool success){   \n        voted[msg.sender] = 1;    \n        votedFor[msg.sender] = votingDescription;    \n        voting (msg.sender, 1, votingDescription);          \n        return true;                                  // ends function and returns\n    }\n    \n    function voteAgainst()  returns (bool success){   \n        voted[msg.sender] = 2;\n        votedFor[msg.sender] = votingDescription;   \n        voting (msg.sender, 2, votingDescription);          \n        return true;                                  // ends function and returns\n    }\n    \n    \n    \n   function newVoting(string description)  returns (bool success){    \n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        votingDescription=description;\n        return true; \n    }\n    \n    \n    function rest()  returns (bool success){    \n        require(balanceOf[msg.sender] >= 5000);         // checks if the sender has enough to sell\n        balanceOf[this] += 5000;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= 5000; \n        restFinish[msg.sender] = block.timestamp + 3 days;\n        return true; \n    }\n    \n    \n    \n    \n    function setPrice(uint256 newSellPrice) {\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        sellPrice = newSellPrice;\n    }\n     \n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        require(msg.sender.send(revenue));                // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n    \n    function getTokens() returns (uint amount){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n    \n    function sendEther() payable returns (bool success){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        return true;                                   // ends function and returns\n    }\n\n    \n    function getEther(uint amount)  returns (bool success){\n        require(msg.sender == 0x02A97eD35Ba18D2F3C351a1bB5bBA12f95Eb1181);\n        require(msg.sender.send(amount));                 // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        return true;                                  // ends function and returns\n    }\n    \n    \n    \n    \n    \n    \n}",
        "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x2a97ed35ba18d2f3c351a1bb5bba12f95eb1181\ncalldata_tokenRecipient_0: 0x8997538900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newVoting(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xd64f60148a99c12d18c9cec6140b772364814c83.sol",
        "function": "newVoting(string)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}