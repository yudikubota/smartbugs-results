{"error": null, "issues": [{"address": 2561, "code": "aining ether back to investor address\n            v", "debug": "", "description": "This contract executes a message call to an address found at storage slot 8. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "releaseTokensAndEtherForEmergencyFund()", "lineno": 875, "title": "Message call to external contract", "type": "Warning"}, {"address": 2561, "code": "aining ether back to investor address\n            v", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2722\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "releaseTokensAndEtherForEmergencyFund()", "lineno": 875, "title": "Multiple Calls", "type": "Information"}, {"address": 2771, "code": "   FundingManagerEntity.Vaul", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "releaseTokensAndEtherForEmergencyFund()", "lineno": 879, "title": "State change after external call", "type": "Warning"}, {"address": 3707, "code": "    // get Application Bylaws\n        emergencyFundPercentage ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 647, "title": "Message call to external contract", "type": "Warning"}, {"address": 3707, "code": "    // get Application Bylaws\n        emergencyFundPercentage ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\nCall at address: 4097\nCall at address: 3871\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 647, "title": "Multiple Calls", "type": "Information"}, {"address": 3871, "code": "ation      = ApplicationEntity.g", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 649, "title": "Message call to external contract", "type": "Informational"}, {"address": 3871, "code": "ation      = ApplicationEntity.g", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\nCall at address: 4097\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 649, "title": "Multiple Calls", "type": "Information"}, {"address": 3993, "code": "256(\"cashback_owner_mia_dur\") ;\n    ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 649, "title": "State change after external call", "type": "Warning"}, {"address": 4097, "code": " ApplicationEntity.getBylawUint256(\"c", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 650, "title": "Message call to external contract", "type": "Informational"}, {"address": 4097, "code": " ApplicationEntity.getBylawUint256(\"c", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 650, "title": "Multiple Calls", "type": "Information"}, {"address": 4219, "code": "estor_no\") ;\n        BylawsProposalVotingDuration        = ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 650, "title": "State change after external call", "type": "Warning"}, {"address": 4323, "code": "true;\n        return true;", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 654, "title": "Message call to external contract", "type": "Informational"}, {"address": 4323, "code": "true;\n        return true;", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 654, "title": "Multiple Calls", "type": "Information"}, {"address": 4530, "code": "ments.\n    */\n\n    mapping (uint8 => uint256) public stageAmou", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "initialize(address,address,address,address,address)", "lineno": 662, "title": "Message call to external contract", "type": "Informational"}, {"address": 5550, "code": "ercentage > 0) {\n                tokenBalances[0] = mil", "debug": "", "description": "This contract executes a message call to an address found at storage slot 7. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "getDirectBoughtTokens()", "lineno": 736, "title": "Message call to external contract", "type": "Warning"}, {"address": 5550, "code": "ercentage > 0) {\n                tokenBalances[0] = mil", "debug": "", "description": "A possible transaction order independence vulnerability exists in function getDirectBoughtTokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "getDirectBoughtTokens()", "lineno": 736, "title": "Transaction order dependence", "type": "Warning"}, {"address": 7025, "code": "ethod == 2) {\n                amount_milestone+= pu", "debug": "", "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "addPayment(uint8,uint8)", "lineno": 694, "title": "Message call to external contract", "type": "Warning"}, {"address": 7025, "code": "ethod == 2) {\n                amount_milestone+= pu", "debug": "", "description": "A possible transaction order independence vulnerability exists in function addPayment(uint8,uint8). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "addPayment(uint8,uint8)", "lineno": 694, "title": "Transaction order dependence", "type": "Warning"}, {"address": 7310, "code": "eAmounts[_funding_stage]+=purch", "debug": "callvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_9: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldata_FundingVault_4: 0x1\nreturndatasize: 0x20\nretval_7025: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\nstorage_0: 0xff00\ncalldata_FundingVault_0: 0x3a533d9100000000000000000000000000000000000000000000000000000000\ncalldatasize_FundingVault: 0x4\n", "description": "A possible integer overflow exists in the function `addPayment(uint8,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "addPayment(uint8,uint8)", "lineno": 703, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7353, "code": "      EventPaymentReceived( purchase.payment_method", "debug": "storage_keccac_255_&_255_&_255_&_calldata_FundingVault_32_+_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_FundingVault_4: 0x1\nreturndatasize: 0x20\nretval_7025: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\nstorage_0: 0xff00\ncalldata_FundingVault_0: 0x3a533d9100000000000000000000000000000000000000000000000000000000\ncalldatasize_FundingVault: 0x4\n", "description": "A possible integer overflow exists in the function `addPayment(uint8,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "addPayment(uint8,uint8)", "lineno": 705, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11068, "debug": "", "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkOwnerFailedToSetTimeOnMeeting()", "lineno": 974, "title": "Message call to external contract", "type": "Warning"}, {"address": 11068, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11264\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkOwnerFailedToSetTimeOnMeeting()", "lineno": 974, "title": "Multiple Calls", "type": "Information"}, {"address": 11068, "debug": "", "description": "A possible transaction order independence vulnerability exists in function checkOwnerFailedToSetTimeOnMeeting(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkOwnerFailedToSetTimeOnMeeting()", "lineno": 974, "title": "Transaction order dependence", "type": "Warning"}, {"address": 11264, "debug": "", "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkOwnerFailedToSetTimeOnMeeting()", "lineno": 974, "title": "Message call to external contract", "type": "Warning"}, {"address": 11264, "debug": "", "description": "A possible transaction order independence vulnerability exists in function checkOwnerFailedToSetTimeOnMeeting(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkOwnerFailedToSetTimeOnMeeting()", "lineno": 974, "title": "Transaction order dependence", "type": "Warning"}, {"address": 11571, "code": "her back\n        if( MilestonesEntity.CurrentEntit", "debug": "", "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkMilestoneStateInvestorVotedNoVotingEndedNo()", "lineno": 947, "title": "Message call to external contract", "type": "Warning"}, {"address": 11571, "code": "her back\n        if( MilestonesEntity.CurrentEntit", "debug": "", "description": "A possible transaction order independence vulnerability exists in function checkMilestoneStateInvestorVotedNoVotingEndedNo(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "checkMilestoneStateInvestorVotedNoVotingEndedNo()", "lineno": 947, "title": "Transaction order dependence", "type": "Warning"}, {"address": 12621, "code": "aultOwner) == true) {\n                // now", "debug": "", "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "ReleaseFundsAndTokens()", "lineno": 932, "title": "Message call to external contract", "type": "Warning"}, {"address": 12621, "code": "aultOwner) == true) {\n                // now", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\nCall at address: 13028\nCall at address: 12817\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 932, "title": "Multiple Calls", "type": "Information"}, {"address": 12621, "code": "aultOwner) == true) {\n                // now", "debug": "", "description": "A possible transaction order independence vulnerability exists in function ReleaseFundsAndTokens(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "ReleaseFundsAndTokens()", "lineno": 932, "title": "Transaction order dependence", "type": "Warning"}, {"address": 12817, "code": "getHasVoteForCurrentMilestoneRelea", "debug": "", "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 932, "title": "Message call to external contract", "type": "Warning"}, {"address": 12817, "code": "getHasVoteForCurrentMilestoneRelea", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\nCall at address: 13028\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 932, "title": "Multiple Calls", "type": "Information"}, {"address": 12817, "code": "getHasVoteForCurrentMilestoneRelea", "debug": "", "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 932, "title": "Transaction order dependence", "type": "Warning"}, {"address": 13028, "code": "     }\n            }\n        }\n        return false", "debug": "", "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 936, "title": "Message call to external contract", "type": "Warning"}, {"address": 13028, "code": "     }\n            }\n        }\n        return false", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\n", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 936, "title": "Multiple Calls", "type": "Information"}, {"address": 13028, "code": "     }\n            }\n        }\n        return false", "debug": "", "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 936, "title": "Transaction order dependence", "type": "Warning"}, {"address": 13221, "code": "        return true;\n       ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 935, "title": "Message call to external contract", "type": "Warning"}, {"address": 13221, "code": "        return true;\n       ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/43/0xa018c2e0fcdc3e787c83afddc60d91a2b3b099b0.sol", "function": "canCashBack()", "lineno": 935, "title": "Transaction order dependence", "type": "Warning"}], "success": true}