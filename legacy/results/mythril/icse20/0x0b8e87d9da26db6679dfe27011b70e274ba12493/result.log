{"error": null, "issues": [{"address": 1515, "code": "ateId, candidateN", "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1594, "code": "ateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescri", "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1623, "code": "ateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescri", "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1 + keccac_storage_6: 0x42\nkeccac_1_+_keccac_storage_6: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2535, "debug": "storage_keccac_calldata_Vote_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nkeccac_calldata_Vote_4: 0xff00\ncalldata_Vote_0: 0x2c0a3f8900000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `castVote(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "castVote(uint256,uint256)", "lineno": 98, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3563, "code": "e registered\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n    // Vote cast\n    event VoteCast(uint candidateId);\n\n    struct Candidate {\n        uint candidateId;\n        string candidateName;\n        string candidateDescription;\n    }\n\n    uint internal salt;\n    string public voteName;\n    uint public totalVotes;\n\n    // mapping of candidate IDs to votes\n    mapping (uint => uint) public voteCount;\n    // mapping of scerets to vote status\n    mapping (bytes32 => bool) internal canVote;\n    // counter/mapping of candidates\n    uint public nextCandidateId = 1;\n    mapping (uint => Candidate) public candidateDirectory;\n\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n        salt = _salt;\n        voteName = _voteName;\n        totalVotes = approvedHashes.length;\n        for (uint i; i < approvedHashes.length; i++) {\n            canVote[approvedHashes[i]] = true;\n        }\n    }\n\n    // Allows the owner to register new candidates\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n        uint candidateId = nextCandidateId++;\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n    }\n\n    // get candidate information by id\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n        Candidate storage candidate = candidateDirectory[candidateId];\n        return (candidate.candidateName, candidate.candidateDescription);\n    }\n\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n    function castVote(uint secret, uint candidateId) public {\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\n        canVote[claimedApprovedHash] = false;\n        voteCount[candidateId] += 1;\n\n        emit VoteCast(candidateId);\n    }\n}", "debug": "storage_1 + keccac_storage_6: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_1_+_keccac_storage_6: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3592, "code": "e registered\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n    // Vote cast\n    event VoteCast(uint candidateId);\n\n    struct Candidate {\n        uint candidateId;\n        string candidateName;\n        string candidateDescription;\n    }\n\n    uint internal salt;\n    string public voteName;\n    uint public totalVotes;\n\n    // mapping of candidate IDs to votes\n    mapping (uint => uint) public voteCount;\n    // mapping of scerets to vote status\n    mapping (bytes32 => bool) internal canVote;\n    // counter/mapping of candidates\n    uint public nextCandidateId = 1;\n    mapping (uint => Candidate) public candidateDirectory;\n\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n        salt = _salt;\n        voteName = _voteName;\n        totalVotes = approvedHashes.length;\n        for (uint i; i < approvedHashes.length; i++) {\n            canVote[approvedHashes[i]] = true;\n        }\n    }\n\n    // Allows the owner to register new candidates\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n        uint candidateId = nextCandidateId++;\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n    }\n\n    // get candidate information by id\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n        Candidate storage candidate = candidateDirectory[candidateId];\n        return (candidate.candidateName, candidate.candidateDescription);\n    }\n\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n    function castVote(uint secret, uint candidateId) public {\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\n        canVote[claimedApprovedHash] = false;\n        voteCount[candidateId] += 1;\n\n        emit VoteCast(candidateId);\n    }\n}", "debug": "storage_1 + keccac_storage_6: 0xc0\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\nkeccac_1_+_keccac_storage_6: 0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3606, "code": "e registered\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n    // Vote cast\n    event VoteCast(uint candidateId);\n\n    struct Candidate {\n        uint candidateId;\n        string candidateName;\n        string candidateDescription;\n    }\n\n    uint internal salt;\n    string public voteName;\n    uint public totalVotes;\n\n    // mapping of candidate IDs to votes\n    mapping (uint => uint) public voteCount;\n    // mapping of scerets to vote status\n    mapping (bytes32 => bool) internal canVote;\n    // counter/mapping of candidates\n    uint public nextCandidateId = 1;\n    mapping (uint => Candidate) public candidateDirectory;\n\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n        salt = _salt;\n        voteName = _voteName;\n        totalVotes = approvedHashes.length;\n        for (uint i; i < approvedHashes.length; i++) {\n            canVote[approvedHashes[i]] = true;\n        }\n    }\n\n    // Allows the owner to register new candidates\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n        uint candidateId = nextCandidateId++;\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n    }\n\n    // get candidate information by id\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n        Candidate storage candidate = candidateDirectory[candidateId];\n        return (candidate.candidateName, candidate.candidateDescription);\n    }\n\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n    function castVote(uint secret, uint candidateId) public {\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\n        canVote[claimedApprovedHash] = false;\n        voteCount[candidateId] += 1;\n\n        emit VoteCast(candidateId);\n    }\n}", "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0x4de2421afffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_1 + keccac_storage_6: 0x48\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0xf2231624ffffffffffffffffffffffffffffffffffffffffffffffffffffffea\nkeccac_1_+_keccac_storage_6: 0x8204ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3623, "code": "e registered\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n    // Vote cast\n    event VoteCast(uint candidateId);\n\n    struct Candidate {\n        uint candidateId;\n        string candidateName;\n        string candidateDescription;\n    }\n\n    uint internal salt;\n    string public voteName;\n    uint public totalVotes;\n\n    // mapping of candidate IDs to votes\n    mapping (uint => uint) public voteCount;\n    // mapping of scerets to vote status\n    mapping (bytes32 => bool) internal canVote;\n    // counter/mapping of candidates\n    uint public nextCandidateId = 1;\n    mapping (uint => Candidate) public candidateDirectory;\n\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n        salt = _salt;\n        voteName = _voteName;\n        totalVotes = approvedHashes.length;\n        for (uint i; i < approvedHashes.length; i++) {\n            canVote[approvedHashes[i]] = true;\n        }\n    }\n\n    // Allows the owner to register new candidates\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n        uint candidateId = nextCandidateId++;\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n    }\n\n    // get candidate information by id\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n        Candidate storage candidate = candidateDirectory[candidateId];\n        return (candidate.candidateName, candidate.candidateDescription);\n    }\n\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n    function castVote(uint secret, uint candidateId) public {\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\n        canVote[claimedApprovedHash] = false;\n        voteCount[candidateId] += 1;\n\n        emit VoteCast(candidateId);\n    }\n}", "debug": "mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa5\nstorage_1 + keccac_storage_6: 0xf16ca6f07713781556df6734fa8ad203c90000000000000000000013ffffffc5\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0x23\nkeccac_1_+_keccac_storage_6: 0xfe0263834943c580df46048370462840162c800948c122900028405c1009a0ec\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3628, "code": "e registered\n    event CandidateRegistered(uint candidateId, string candidateName, string candidateDescription);\n    // Vote cast\n    event VoteCast(uint candidateId);\n\n    struct Candidate {\n        uint candidateId;\n        string candidateName;\n        string candidateDescription;\n    }\n\n    uint internal salt;\n    string public voteName;\n    uint public totalVotes;\n\n    // mapping of candidate IDs to votes\n    mapping (uint => uint) public voteCount;\n    // mapping of scerets to vote status\n    mapping (bytes32 => bool) internal canVote;\n    // counter/mapping of candidates\n    uint public nextCandidateId = 1;\n    mapping (uint => Candidate) public candidateDirectory;\n\n    constructor(uint _salt, string _voteName, bytes32[] approvedHashes) public {\n        salt = _salt;\n        voteName = _voteName;\n        totalVotes = approvedHashes.length;\n        for (uint i; i < approvedHashes.length; i++) {\n            canVote[approvedHashes[i]] = true;\n        }\n    }\n\n    // Allows the owner to register new candidates\n    function registerCandidate(string candidateName, string candidateDescription) public onlyOwner {\n        uint candidateId = nextCandidateId++;\n        candidateDirectory[candidateId] = Candidate(candidateId, candidateName, candidateDescription);\n        emit CandidateRegistered(candidateId, candidateName, candidateDescription);\n    }\n\n    // get candidate information by id\n    function candidateInformation(uint candidateId) public view returns (string name, string description) {\n        Candidate storage candidate = candidateDirectory[candidateId];\n        return (candidate.candidateName, candidate.candidateDescription);\n    }\n\n    // Users can only vote by providing a secret uint s.t. candidateDirectory[keccak256(uint, salt)] == true\n    function castVote(uint secret, uint candidateId) public {\n        bytes32 claimedApprovedHash = keccak256(secret, salt); // keccak256(secret) vulnerable to a rainbow table attack\n        require(canVote[claimedApprovedHash], \"Provided secret was not correct.\");\n        canVote[claimedApprovedHash] = false;\n        voteCount[candidateId] += 1;\n\n        emit VoteCast(candidateId);\n    }\n}", "debug": "keccac_2_+_keccac_storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0x9ff9857fffffc9ffede07f1b1b09ffffffffffffffffffffffff800000000015\nstorage_1 + keccac_storage_6: 0x7fefa26ca0000001b4fffffffffffffffffffffffffffffff1ffffffffffffc3\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n64: 0x67ffffffbffffbb1fedb67adffffffffffefffffffffffffffffffffffff\nkeccac_1_+_keccac_storage_6: 0xfe004f9cfffffffe0ffffffffffffffffffffffffffffffffffffffffffffffc\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Vote_4 + calldata_Vote_32 + 4)) +\n32: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Vote_0: 0xdbce4dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vote: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `registerCandidate(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x0b8e87d9da26db6679dfe27011b70e274ba12493.sol", "function": "registerCandidate(string,string)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}], "success": true}