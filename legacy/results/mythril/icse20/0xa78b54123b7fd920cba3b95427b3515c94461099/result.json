{
  "contract": "0xa78b54123b7fd920cba3b95427b3515c94461099",
  "tool": "mythril",
  "start": 1563504408.1656163,
  "end": 1563504560.1616805,
  "duration": 151.9960641860962,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 4138,
        "code": "      \n  ",
        "debug": "",
        "description": "Function BuyStartingSnails() retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/7/0xa78b54123b7fd920cba3b95427b3515c94461099.sol",
        "function": "BuyStartingSnails()",
        "lineno": 346,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 12454,
        "debug": "storage_23: 0xf3ea62cf40dda969f23d7befcff400054ced4d77eabd0731d88048af13e43fd9\nstorage_3: 0xa793701e99a219ba046280f53febcab230229f081642a600db289559c2cc6042\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncaller: 0x0\norigin: 0x0\nstorage_11: 0xff00\ncalldata_SnailFarm2_0: 0x1c3122ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_SnailFarm2: 0x4\ncallvalue: 0xa793701e99a219ba046280f53febcab230229f081642a600db289559c2cc6042\n",
        "description": "A possible integer overflow exists in the function `BuyStartingSnails()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xa78b54123b7fd920cba3b95427b3515c94461099.sol",
        "function": "BuyStartingSnails()",
        "lineno": 555,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 12467,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SnailFarm2_4: 0x1\nstorage_21: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SnailFarm2_0: 0x407ed2e200000000000000000000000000000000000000000000000000000000\ncalldatasize_SnailFarm2: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xa78b54123b7fd920cba3b95427b3515c94461099.sol",
        "function": "ComputeSell(uint256)",
        "lineno": 555,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12491,
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_11: 0xff00\ncalldata_SnailFarm2_0: 0x4ab273f000000000000000000000000000000000000000000000000000000000\ncalldatasize_SnailFarm2: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xa78b54123b7fd920cba3b95427b3515c94461099.sol",
        "function": "SellEggs()",
        "lineno": 555,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12575,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SnailFarm2_0: 0xf8dc27200000000000000000000000000000000000000000000000000000000\ncalldatasize_SnailFarm2: 0x4\nstorage_22: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xa78b54123b7fd920cba3b95427b3515c94461099.sol",
        "function": "ComputeAcornPrice()",
        "lineno": 555,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}