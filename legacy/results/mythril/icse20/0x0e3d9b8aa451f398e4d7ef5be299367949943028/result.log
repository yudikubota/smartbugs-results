{"error": null, "issues": [{"address": 432, "code": "ode(now, msg.sender, randNonce))) ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "fallback", "lineno": 167, "title": "Message call to external contract", "type": "Informational"}, {"address": 1954, "debug": "calldata_VNETAirdrop_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VNETAirdrop_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "setDescription(string)", "lineno": 187, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1960, "debug": "calldata_VNETAirdrop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_VNETAirdrop_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "setDescription(string)", "lineno": 187, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2381, "code": ");\n    }\n\n    /**\n    ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "fallback", "lineno": 72, "title": "Message call to external contract", "type": "Warning"}, {"address": 2381, "code": ");\n    }\n\n    /**\n    ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2638\n", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "fallback", "lineno": 72, "title": "Multiple Calls", "type": "Information"}, {"address": 2638, "code": "ther\n     */\n    function withd", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "fallback", "lineno": 76, "title": "Message call to external contract", "type": "Warning"}, {"address": 3129, "code": "v Math operations with safety checks ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "withdrawEther()", "lineno": 86, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3713, "code": ";\n\n    // Description\n    string public description;\n    \n    // Nonce for random\n    uint256 randNonce = 0;\n\n    // Airdropped\n    mapping(address => bool) public airdopped;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description) public {\n        vnetToken = _vnetToken;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        require(airdopped[msg.sender] != true);\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n\n        uint256 vnetAmount = 100;\n        vnetAmount = vnetAmount.add(uint256(keccak256(abi.encode(now, msg.sender, randNonce))) % 100).mul(10 ** 6);\n        \n        if (vnetAmount <= balance) {\n            assert(vnetToken.transfer(msg.sender, vnetAmount));\n        } else {\n            assert(vnetToken.transfer(msg.sender, balance));\n        }\n\n        randNonce = randNonce.add(1);\n        airdopped[msg.sender] = true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n}", "debug": "calldata_VNETAirdrop_4 + calldata_VNETAirdrop_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETAirdrop_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "setDescription(string)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3727, "code": ";\n\n    // Description\n    string public description;\n    \n    // Nonce for random\n    uint256 randNonce = 0;\n\n    // Airdropped\n    mapping(address => bool) public airdopped;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description) public {\n        vnetToken = _vnetToken;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        require(airdopped[msg.sender] != true);\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n\n        uint256 vnetAmount = 100;\n        vnetAmount = vnetAmount.add(uint256(keccak256(abi.encode(now, msg.sender, randNonce))) % 100).mul(10 ** 6);\n        \n        if (vnetAmount <= balance) {\n            assert(vnetToken.transfer(msg.sender, vnetAmount));\n        } else {\n            assert(vnetToken.transfer(msg.sender, balance));\n        }\n\n        randNonce = randNonce.add(1);\n        airdopped[msg.sender] = true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n}", "debug": "calldata_VNETAirdrop_4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_VNETAirdrop_4 + calldata_VNETAirdrop_4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETAirdrop_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "setDescription(string)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3744, "code": ";\n\n    // Description\n    string public description;\n    \n    // Nonce for random\n    uint256 randNonce = 0;\n\n    // Airdropped\n    mapping(address => bool) public airdopped;\n\n\n    /**\n     * @dev Constructor\n     */\n    constructor(ERC20Basic _vnetToken, string _description) public {\n        vnetToken = _vnetToken;\n        description = _description;\n    }\n\n    /**\n     * @dev receive ETH and send tokens\n     */\n    function () public payable {\n        require(airdopped[msg.sender] != true);\n        uint256 balance = vnetToken.balanceOf(address(this));\n        require(balance > 0);\n\n        uint256 vnetAmount = 100;\n        vnetAmount = vnetAmount.add(uint256(keccak256(abi.encode(now, msg.sender, randNonce))) % 100).mul(10 ** 6);\n        \n        if (vnetAmount <= balance) {\n            assert(vnetToken.transfer(msg.sender, vnetAmount));\n        } else {\n            assert(vnetToken.transfer(msg.sender, balance));\n        }\n\n        randNonce = randNonce.add(1);\n        airdopped[msg.sender] = true;\n    }\n\n    /**\n     * @dev Set Description\n     * \n     * @param _description string\n     */\n    function setDescription(string _description) external onlyOwner {\n        description = _description;\n    }\n}", "debug": "calldata_VNETAirdrop_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_VNETAirdrop_4 + calldata_VNETAirdrop_4: 0x21\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETAirdrop_0: 0x90c3f38f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETAirdrop: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setDescription(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x0e3d9b8aa451f398e4d7ef5be299367949943028.sol", "function": "setDescription(string)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}], "success": true}