{
  "contract": "0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600",
  "tool": "mythril",
  "start": 1563623736.2569087,
  "end": 1563624019.457891,
  "duration": 283.2009823322296,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 309,
        "code": ";\n\n        // Log ",
        "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\ncalldata_GimliToken_0: 0x6fddf0300000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "fallback",
        "lineno": 145,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1136,
        "code": "me, string _symbol) payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToChangeSymbolName)\n        {\n            name = _name;\n            symbol = _symbol;\n        }\n    }\n    \n    \n    function changeOwner (addres",
        "debug": "calldata_GimliToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GimliToken_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1142,
        "code": "me, string _symbol) payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToChangeSymbolName)\n        {\n            name = _name;\n            symbol = _symbol;\n        }\n    }\n    \n    \n    function changeOwner (addres",
        "debug": "calldata_GimliToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_GimliToken_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2408,
        "code": "r `_value` tokens f",
        "debug": "SOLVER OUTPUT:\ncallvalue: 0x1b1ae4d6e2ef500000\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_GimliToken_0: 0x1c02708d00000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "The function `_function_0x1c02708d` executes the SUICIDE instruction. The remaining Ether is sent to a stored address.\n\nThere is a check on storage index 2. This storage index can be written to by calling the function `_function_0xa6f9dae1`.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "_function_0x1c02708d",
        "lineno": 64,
        "title": "Unchecked SUICIDE",
        "type": "Warning"
      },
      {
        "address": 2778,
        "code": "][msg.sender] -= _amoun",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_GimliToken_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\ncalldata_GimliToken_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_GimliToken_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_GimliToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 113,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3175,
        "code": "urn true;\n    }\n    \n\n ",
        "debug": "calldata_GimliToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_GimliToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_GimliToken_0: 0x449a52f800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mintTo(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "mintTo(address,uint256)",
        "lineno": 90,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3837,
        "code": "fer(this.balance);\n      ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3965\n",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "_function_0xa6f9dae1",
        "lineno": 52,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3837,
        "code": "fer(this.balance);\n      ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0xa6f9dae1. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "_function_0xa6f9dae1",
        "lineno": 52,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3965,
        "code": "wowner;\n        }\n    }\n\n   ",
        "debug": "SOLVER OUTPUT:\nretval_3837: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x3635c9adc5dea00000\ncalldata_GimliToken_0: 0xa6f9dae100000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "In the function `_function_0xa6f9dae1` a non-zero amount of Ether is sent to an address taken from storage slot 2.\nThere is a check on storage index 2. This storage slot can be written to by calling the function `_function_0xa6f9dae1`.\nIt seems that this function can be called without restrictions.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "_function_0xa6f9dae1",
        "lineno": 53,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 3965,
        "code": "wowner;\n        }\n    }\n\n   ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0xa6f9dae1. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "_function_0xa6f9dae1",
        "lineno": 53,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4290,
        "code": "       return true;\n   ",
        "debug": "calldata_GimliToken_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_GimliToken_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_GimliToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "transfer(address,uint256)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4511,
        "code": "t GimliToken {\n    string public name = \"Gimli Token\";\n    string public symbol = \"GIM\";\n    uint8 public constant decimals = 8;  \n    address public owner;\n\n    uint256 public constant tokensPerEth = 1;\n    uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether;\n    uint256 public constant howManyEtherInWeiToKillContract = 500 ether;\n    uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether;\n    \n    bool public funding = true;\n\n    // The current total token supply.\n    uint256 totalTokens = 1000;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n    event Refund(address indexed _from, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function GimliToken() public {\n        owner = msg.sender;\n        balances[owner]=1000;\n    }\n\n    function changeNameSymbol(string _name, string _symbol) payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToChangeSymbolName)\n        {\n            name = _name;\n            symbol = _symbol;\n        }\n    }\n    \n    \n    function changeOwner (address _newowner) payable external\n    {\n        if (msg.value>=howManyEtherInWeiToBecomeOwner)\n        {\n            owner.transfer(msg.value);\n            owner.transfer(this.balance);\n            owner=_newowner;\n        }\n    }\n\n    function killContract () payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToKillContract)\n        {\n            selfdestruct(owner);\n        }\n    }\n    /// @notice Transfer `_value` tokens from sender's account\n    /// `msg.sender` to provided account address `_to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Operational\n    /// @param _to The address of the tokens recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n        var senderBalance = balances[msg.sender];\n        if (senderBalance >= _value && _value > 0) {\n            senderBalance -= _value;\n            balances[msg.sender] = senderBalance;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function mintTo(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n    }\n    \n\n    function totalSupply() external constant returns (uint256) {\n        return totalTokens;\n    }\n\n    function balanceOf(address _owner) external constant returns (uint256) {\n        return balances[_owner];\n    }\n\n\n    function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) public returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             return true;\n         } else {\n             return false;\n         }\n  }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         \n         return true;\n     }\n// Crowdfunding:\n\n    /// @notice Create tokens when funding is active.\n    /// @dev Required state: Funding Active\n    /// @dev State transition: -> Funding Success (only if cap reached)\n    function () payable external {\n        // Abort if not in Funding Active state.\n        // The checks are split (instead of using or operator) because it is\n        // cheaper this way.\n        if (!funding) revert();\n        \n        // Do not allow creating 0 or more than the cap tokens.\n        if (msg.value == 0) revert();\n        \n        var numTokens = msg.value * (1000.0/totalTokens);\n        totalTokens += numTokens;\n\n        // Assign new tokens to the sender\n        balances[msg.sender] += numTokens;\n\n        // Log token creation event\n        Transfer(0, msg.sender, numTokens);\n    }\n}",
        "debug": "calldata_GimliToken_4 + calldata_GimliToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x15af1d78b58c400000\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_GimliToken_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4525,
        "code": "t GimliToken {\n    string public name = \"Gimli Token\";\n    string public symbol = \"GIM\";\n    uint8 public constant decimals = 8;  \n    address public owner;\n\n    uint256 public constant tokensPerEth = 1;\n    uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether;\n    uint256 public constant howManyEtherInWeiToKillContract = 500 ether;\n    uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether;\n    \n    bool public funding = true;\n\n    // The current total token supply.\n    uint256 totalTokens = 1000;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n    event Refund(address indexed _from, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function GimliToken() public {\n        owner = msg.sender;\n        balances[owner]=1000;\n    }\n\n    function changeNameSymbol(string _name, string _symbol) payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToChangeSymbolName)\n        {\n            name = _name;\n            symbol = _symbol;\n        }\n    }\n    \n    \n    function changeOwner (address _newowner) payable external\n    {\n        if (msg.value>=howManyEtherInWeiToBecomeOwner)\n        {\n            owner.transfer(msg.value);\n            owner.transfer(this.balance);\n            owner=_newowner;\n        }\n    }\n\n    function killContract () payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToKillContract)\n        {\n            selfdestruct(owner);\n        }\n    }\n    /// @notice Transfer `_value` tokens from sender's account\n    /// `msg.sender` to provided account address `_to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Operational\n    /// @param _to The address of the tokens recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n        var senderBalance = balances[msg.sender];\n        if (senderBalance >= _value && _value > 0) {\n            senderBalance -= _value;\n            balances[msg.sender] = senderBalance;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function mintTo(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n    }\n    \n\n    function totalSupply() external constant returns (uint256) {\n        return totalTokens;\n    }\n\n    function balanceOf(address _owner) external constant returns (uint256) {\n        return balances[_owner];\n    }\n\n\n    function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) public returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             return true;\n         } else {\n             return false;\n         }\n  }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         \n         return true;\n     }\n// Crowdfunding:\n\n    /// @notice Create tokens when funding is active.\n    /// @dev Required state: Funding Active\n    /// @dev State transition: -> Funding Success (only if cap reached)\n    function () payable external {\n        // Abort if not in Funding Active state.\n        // The checks are split (instead of using or operator) because it is\n        // cheaper this way.\n        if (!funding) revert();\n        \n        // Do not allow creating 0 or more than the cap tokens.\n        if (msg.value == 0) revert();\n        \n        var numTokens = msg.value * (1000.0/totalTokens);\n        totalTokens += numTokens;\n\n        // Assign new tokens to the sender\n        balances[msg.sender] += numTokens;\n\n        // Log token creation event\n        Transfer(0, msg.sender, numTokens);\n    }\n}",
        "debug": "calldata_GimliToken_4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_GimliToken_4 + calldata_GimliToken_4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\ncallvalue: 0x15af1d78b58c400000\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_GimliToken_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4542,
        "code": "t GimliToken {\n    string public name = \"Gimli Token\";\n    string public symbol = \"GIM\";\n    uint8 public constant decimals = 8;  \n    address public owner;\n\n    uint256 public constant tokensPerEth = 1;\n    uint256 public constant howManyEtherInWeiToBecomeOwner = 1000 ether;\n    uint256 public constant howManyEtherInWeiToKillContract = 500 ether;\n    uint256 public constant howManyEtherInWeiToChangeSymbolName = 400 ether;\n    \n    bool public funding = true;\n\n    // The current total token supply.\n    uint256 totalTokens = 1000;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n    event Refund(address indexed _from, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    function GimliToken() public {\n        owner = msg.sender;\n        balances[owner]=1000;\n    }\n\n    function changeNameSymbol(string _name, string _symbol) payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToChangeSymbolName)\n        {\n            name = _name;\n            symbol = _symbol;\n        }\n    }\n    \n    \n    function changeOwner (address _newowner) payable external\n    {\n        if (msg.value>=howManyEtherInWeiToBecomeOwner)\n        {\n            owner.transfer(msg.value);\n            owner.transfer(this.balance);\n            owner=_newowner;\n        }\n    }\n\n    function killContract () payable external\n    {\n        if (msg.sender==owner || msg.value >=howManyEtherInWeiToKillContract)\n        {\n            selfdestruct(owner);\n        }\n    }\n    /// @notice Transfer `_value` tokens from sender's account\n    /// `msg.sender` to provided account address `_to`.\n    /// @notice This function is disabled during the funding.\n    /// @dev Required state: Operational\n    /// @param _to The address of the tokens recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n        var senderBalance = balances[msg.sender];\n        if (senderBalance >= _value && _value > 0) {\n            senderBalance -= _value;\n            balances[msg.sender] = senderBalance;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function mintTo(address _to, uint256 _value) public returns (bool) {\n        // Abort if not in Operational state.\n        \n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n    }\n    \n\n    function totalSupply() external constant returns (uint256) {\n        return totalTokens;\n    }\n\n    function balanceOf(address _owner) external constant returns (uint256) {\n        return balances[_owner];\n    }\n\n\n    function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) public returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             return true;\n         } else {\n             return false;\n         }\n  }\n\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n         Approval(msg.sender, _spender, _amount);\n         \n         return true;\n     }\n// Crowdfunding:\n\n    /// @notice Create tokens when funding is active.\n    /// @dev Required state: Funding Active\n    /// @dev State transition: -> Funding Success (only if cap reached)\n    function () payable external {\n        // Abort if not in Funding Active state.\n        // The checks are split (instead of using or operator) because it is\n        // cheaper this way.\n        if (!funding) revert();\n        \n        // Do not allow creating 0 or more than the cap tokens.\n        if (msg.value == 0) revert();\n        \n        var numTokens = msg.value * (1000.0/totalTokens);\n        totalTokens += numTokens;\n\n        // Assign new tokens to the sender\n        balances[msg.sender] += numTokens;\n\n        // Log token creation event\n        Transfer(0, msg.sender, numTokens);\n    }\n}",
        "debug": "calldata_GimliToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_GimliToken_4 + calldata_GimliToken_4: 0x21\ncallvalue: 0x15af1d78b58c400000\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_GimliToken_0: 0x501a4d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_GimliToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `changeNameSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x69c9e34a64b6ba1e39fb15ffaefdc7e75524f600.sol",
        "function": "changeNameSymbol(string,string)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}