{"error": null, "issues": [{"address": 910, "code": "wner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    Pe", "debug": "calldata_VNC_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 210, "title": "Integer Overflow ", "type": "Warning"}, {"address": 922, "code": "wner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    Pe", "debug": "calldata_VNC_4 + calldata_VNC_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 210, "title": "Integer Overflow ", "type": "Warning"}, {"address": 931, "code": "wner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    Pe", "debug": "calldata_VNC_4 + calldata_VNC_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 210, "title": "Integer Overflow ", "type": "Warning"}, {"address": 937, "code": "wner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    Pe", "debug": "calldata_VNC_4 + calldata_VNC_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 210, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1064, "code": "aximum drop is 5000 addresses\n    assert(addresses.length <= 5000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens..\n   */\n  function VNC() {\n    totalSupply = SUPPLY_CAP;\n    balances[msg.sender] = SUPPLY_CAP;\n  }\n}", "debug": "calldata_VNC_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VNC_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "drop(address[],uint256)", "lineno": 216, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3656, "code": "wner] >= amt *", "debug": "calldata_VNC_32 + 4: 0x541250e575bb18197c52e1cf3d6a6eb3bcdb681b1c66122daa075000736d60\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "drop(address[],uint256)", "lineno": 218, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3771, "code": "\n        balances[owner] -= amt;", "debug": "The exception is triggered under the following conditions:\n\ncalldata_VNC_32 + 4: 0xa68f206ee05d785627ffce56e594efbbba2adea5e831822e18164c47ac3c09\ncalldata_VNC_4 + calldata_VNC_4: 0x1389\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "drop(address[],uint256)", "lineno": 221, "title": "Exception state", "type": "Informational"}, {"address": 3883, "code": "  balances[recipient] += amt;\n        Transfer(ow", "debug": "The exception is triggered under the following conditions:\n\ncalldata_VNC_32 + 4: 0x7f8f823e8927b174d79857d020944a246666bc4ca1ef28974de4e5476cfc02\ncalldata_VNC_4 + calldata_VNC_4: 0x5f2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0x85adf63ff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "drop(address[],uint256)", "lineno": 223, "title": "Exception state", "type": "Informational"}, {"address": 4192, "code": "balances[msg.sender] = SUP", "debug": "calldata_VNC_32 + 4: 0x117faf37bb832360824bca2de10ece240fd4b44cce39df49d2061ca4a6680b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VNC_cpy: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffaf21f00\ncalldata_VNC_4 + calldata_VNC_4: 0x92e\nstorage_4: 0x0\ncalldata_VNC_cpy: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0x64b6b1ba00\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x3974874b00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `drop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "drop(address[],uint256)", "lineno": 234, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5133, "code": "ing newNot", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VNC_0: 0x911475cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `incNonce()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "incNonce()", "lineno": 202, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6752, "code": ", uint256 b) i", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_VNC_32 + 4: 0x1\ncalldata_VNC_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VNC_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "transfer(address,uint256)", "lineno": 68, "title": "Exception state", "type": "Informational"}, {"address": 6770, "code": "is ER", "debug": "calldata_VNC_32 + 36: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VNC_32_+_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VNC_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_VNC_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VNC_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 75, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6783, "code": "c {\n  using Sa", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VNC_4: 0x1\ncalldata_VNC_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VNC_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "_function_0xd73dd623", "lineno": 75, "title": "Exception state", "type": "Informational"}, {"address": 6862, "code": " constant SUPPLY_CAP = 38000000 * (10 ** uint256(decimals));\n\n  address NULL_ADDRESS = address(0);\n\n  uint public nonce = 0;\n\nevent NonceTick(uint nonce);\n  function incNonce() {\n    nonce += 1;\n    if(nonce > 100) {\n        nonce = 0;\n    }\n    NonceTick(nonce);\n  }\n\n  // Note intended to act as a source of authorized messaging from development team\n  event NoteChanged(string newNote);\n  string public note = \"Welcome to the future of transportation chain.\";\n  function setNote(string note_) public onlyOwner {\n      note = note_;\n      NoteChanged(note);\n  }\n  \n  event PerformingDrop(uint count);\n  function drop(address[] addresses, uint256 amount) public onlyOwner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    PerformingDrop(addresses.length);\n    \n    // Maximum drop is 5000 addresses\n    assert(addresses.length <= 5000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens..\n   */\n  function VNC() {\n    totalSupply = SUPPLY_CAP;\n    balances[msg.sender] = SUPPLY_CAP;\n  }\n}", "debug": "calldata_VNC_4 + calldata_VNC_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 186, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6876, "code": " constant SUPPLY_CAP = 38000000 * (10 ** uint256(decimals));\n\n  address NULL_ADDRESS = address(0);\n\n  uint public nonce = 0;\n\nevent NonceTick(uint nonce);\n  function incNonce() {\n    nonce += 1;\n    if(nonce > 100) {\n        nonce = 0;\n    }\n    NonceTick(nonce);\n  }\n\n  // Note intended to act as a source of authorized messaging from development team\n  event NoteChanged(string newNote);\n  string public note = \"Welcome to the future of transportation chain.\";\n  function setNote(string note_) public onlyOwner {\n      note = note_;\n      NoteChanged(note);\n  }\n  \n  event PerformingDrop(uint count);\n  function drop(address[] addresses, uint256 amount) public onlyOwner {\n    uint256 amt = amount * 10**8;\n    require(amt > 0);\n    require(amt <= SUPPLY_CAP);\n    PerformingDrop(addresses.length);\n    \n    // Maximum drop is 5000 addresses\n    assert(addresses.length <= 5000);\n    assert(balances[owner] >= amt * addresses.length);\n    for (uint i = 0; i < addresses.length; i++) {\n      address recipient = addresses[i];\n      if(recipient != NULL_ADDRESS) {\n        balances[owner] -= amt;\n        balances[recipient] += amt;\n        Transfer(owner, recipient, amt);\n      }\n    }\n  }\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens..\n   */\n  function VNC() {\n    totalSupply = SUPPLY_CAP;\n    balances[msg.sender] = SUPPLY_CAP;\n  }\n}", "debug": "calldata_VNC_4 + calldata_VNC_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VNC_0: 0x2d7b299d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VNC: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNote(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0x06a336b88d72f471bb54438c42ecb1f9f3cf7df7.sol", "function": "setNote(string)", "lineno": 186, "title": "Integer Overflow ", "type": "Warning"}], "success": true}