{"error": null, "issues": [{"address": 1781, "code": "    }\n    \n    function balanceSub(address tokenAddr, address user, uint amount) priv", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "depositToken(address,uint256)", "lineno": 89, "title": "State change after external call", "type": "Warning"}, {"address": 2058, "code": "enAddr][msg.sender]);\n    }\n    \n    function withdrawE", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "depositToken(address,uint256)", "lineno": 229, "title": "Message call to external contract", "type": "Warning"}, {"address": 5782, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "withdrawToken(address,uint256)", "lineno": 252, "title": "Message call to external contract", "type": "Warning"}, {"address": 8905, "code": "    \n", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\nstorage_3 + keccac_calldata_Token_4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_Token_4: 0x0\nstorage_1 + keccac_calldata_Token_4: 0x0\ncaller: 0x0\nstorage_0 + keccac_calldata_Token_4: 0x0\nstorage_3: 0x1\ncalldata_Token_0: 0x514fcac700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `cancelOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "cancelOrder(uint256)", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8918, "code": "n safeSub(uint", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\nstorage_3 + keccac_calldata_Token_4: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\ncalldata_Token_4: 0x0\nstorage_1 + keccac_calldata_Token_4: 0x0\ncaller: 0x0\nstorage_0 + keccac_calldata_Token_4: 0x0\nstorage_3: 0x1\ncalldata_Token_0: 0x514fcac700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "cancelOrder(uint256)", "lineno": 61, "title": "Exception state", "type": "Informational"}, {"address": 9445, "code": " \n    function balanceAdd(a", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "fillOrder(uint256,uint256)", "lineno": 85, "title": "Message call to external contract", "type": "Warning"}, {"address": 9445, "code": " \n    function balanceAdd(a", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fillOrder(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "fillOrder(uint256,uint256)", "lineno": 85, "title": "Transaction order dependence", "type": "Warning"}, {"address": 9552, "code": " safeMul(uint ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_Token_4: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x72fc493d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0x475a8101fdde7f7246e31be77dd7dcb80f25d735.sol", "function": "decFeeDeposit(uint256)", "lineno": 66, "title": "Exception state", "type": "Informational"}], "success": true}