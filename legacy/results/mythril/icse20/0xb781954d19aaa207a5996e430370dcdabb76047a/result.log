{"error": null, "issues": [{"address": 859, "code": "afeOpt.div(SafeOpt.mul(last", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `issue()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/42/0xb781954d19aaa207a5996e430370dcdabb76047a.sol", "function": "issue()", "lineno": 68, "title": "Message call to external contract", "type": "Warning"}, {"address": 920, "code": "    uint256 amount = SafeOpt.div(SafeOpt.mul(last", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/42/0xb781954d19aaa207a5996e430370dcdabb76047a.sol", "function": "issue()", "lineno": 68, "title": "State change after external call", "type": "Warning"}, {"address": 1166, "code": "t(b <", "debug": "block_number: 0x0\nstorage_2: 0x1\nstorage_1: 0xff00\ncalldata_tokenRecipient_0: 0xd383f64600000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `issue()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/42/0xb781954d19aaa207a5996e430370dcdabb76047a.sol", "function": "issue()", "lineno": 22, "title": "Integer Underflow", "type": "Warning"}, {"address": 1179, "code": "   assert(a ==", "debug": "The exception is triggered under the following conditions:\n\nblock_number: 0x0\nstorage_2: 0x1\nstorage_1: 0xff00\ncalldata_tokenRecipient_0: 0xd383f64600000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/42/0xb781954d19aaa207a5996e430370dcdabb76047a.sol", "function": "issue()", "lineno": 23, "title": "Exception state", "type": "Informational"}], "success": true}