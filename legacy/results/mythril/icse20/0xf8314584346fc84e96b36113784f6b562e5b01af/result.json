{
  "contract": "0xf8314584346fc84e96b36113784f6b562e5b01af",
  "tool": "mythril",
  "start": 1563812066.972975,
  "end": 1563812987.7372708,
  "duration": 920.7642958164215,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 162,
        "code": "estricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contract",
        "debug": "calldata_AraRegistry_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AraRegistry_0: 0x726755b00000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addNewUpgradeableContract(bytes32,string,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "addNewUpgradeableContract(bytes32,string,bytes,bytes)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 174,
        "code": "estricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contract",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_AraRegistry_0: 0x726755b00000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addNewUpgradeableContract(bytes32,string,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "addNewUpgradeableContract(bytes32,string,bytes,bytes)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 183,
        "code": "estricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contract",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_AraRegistry_0: 0x726755b00000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addNewUpgradeableContract(bytes32,string,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "addNewUpgradeableContract(bytes32,string,bytes,bytes)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 189,
        "code": "estricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contract",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_AraRegistry_0: 0x726755b00000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addNewUpgradeableContract(bytes32,string,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "addNewUpgradeableContract(bytes32,string,bytes,bytes)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 534,
        "code": "ntractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractNa",
        "debug": "calldata_AraRegistry_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 546,
        "code": "ntractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractNa",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 555,
        "code": "ntractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractNa",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 561,
        "code": "ntractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractNa",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 126,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 810,
        "code": "ss) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) pu",
        "debug": "calldata_AraRegistry_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AraRegistry_0: 0xf8df27b100000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getUpgradeableContractAddress(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "getUpgradeableContractAddress(bytes32,string)",
        "lineno": 106,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1348,
        "code": "tName].latestVer",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0x726755b00000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addNewUpgradeableContract(bytes32,string,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "addNewUpgradeableContract(bytes32,string,bytes,bytes)",
        "lineno": 118,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2551,
        "code": "ion(deployedAddr",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 133,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2779,
        "code": "rsions_[_version] = deployedAddress;\n\n  ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 136,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3048,
        "code": "  }\n\n  function _deployProxy(bytes32 _contractName, address _im",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 139,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4652,
        "code": "radeableContract) private contracts_; // keccak256(contractname) => struct\n\n  struct UpgradeableContract {\n    bool initialized_;\n\n    address proxy_;\n    string latestVersion_;\n    mapping (string => address) versions_;\n  }\n\n  event UpgradeableContractAdded(bytes32 _contractName, string _version, address _address);\n  event ContractUpgraded(bytes32 _contractName, string _version, address _address);\n  event ProxyDeployed(bytes32 _contractName, address _address);\n\n  constructor() public {\n    owner_ = msg.sender;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getLatestVersionAddress(bytes32 _contractName) public view returns (address) {\n    return contracts_[_contractName].versions_[contracts_[_contractName].latestVersion_];\n  }\n\n  function getUpgradeableContractAddress(bytes32 _contractName, string _version) public view returns (address) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) public restricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contracts_[_contractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractName].proxy_ == address(0), \"Only one proxy can exist per upgradeable contract.\");\n    AraProxy proxy = new AraProxy(address(this), _implementationAddress);\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    contracts_[_contractName].proxy_ = proxy;\n\n    emit ProxyDeployed(_contractName, proxy);\n  }\n}",
        "debug": "keccac_1_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nretval_2779: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4681,
        "code": "radeableContract) private contracts_; // keccak256(contractname) => struct\n\n  struct UpgradeableContract {\n    bool initialized_;\n\n    address proxy_;\n    string latestVersion_;\n    mapping (string => address) versions_;\n  }\n\n  event UpgradeableContractAdded(bytes32 _contractName, string _version, address _address);\n  event ContractUpgraded(bytes32 _contractName, string _version, address _address);\n  event ProxyDeployed(bytes32 _contractName, address _address);\n\n  constructor() public {\n    owner_ = msg.sender;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getLatestVersionAddress(bytes32 _contractName) public view returns (address) {\n    return contracts_[_contractName].versions_[contracts_[_contractName].latestVersion_];\n  }\n\n  function getUpgradeableContractAddress(bytes32 _contractName, string _version) public view returns (address) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) public restricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contracts_[_contractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractName].proxy_ == address(0), \"Only one proxy can exist per upgradeable contract.\");\n    AraProxy proxy = new AraProxy(address(this), _implementationAddress);\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    contracts_[_contractName].proxy_ = proxy;\n\n    emit ProxyDeployed(_contractName, proxy);\n  }\n}",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nretval_2779: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4686,
        "code": "radeableContract) private contracts_; // keccak256(contractname) => struct\n\n  struct UpgradeableContract {\n    bool initialized_;\n\n    address proxy_;\n    string latestVersion_;\n    mapping (string => address) versions_;\n  }\n\n  event UpgradeableContractAdded(bytes32 _contractName, string _version, address _address);\n  event ContractUpgraded(bytes32 _contractName, string _version, address _address);\n  event ProxyDeployed(bytes32 _contractName, address _address);\n\n  constructor() public {\n    owner_ = msg.sender;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getLatestVersionAddress(bytes32 _contractName) public view returns (address) {\n    return contracts_[_contractName].versions_[contracts_[_contractName].latestVersion_];\n  }\n\n  function getUpgradeableContractAddress(bytes32 _contractName, string _version) public view returns (address) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) public restricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contracts_[_contractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractName].proxy_ == address(0), \"Only one proxy can exist per upgradeable contract.\");\n    AraProxy proxy = new AraProxy(address(this), _implementationAddress);\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    contracts_[_contractName].proxy_ = proxy;\n\n    emit ProxyDeployed(_contractName, proxy);\n  }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 76,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4695,
        "code": "radeableContract) private contracts_; // keccak256(contractname) => struct\n\n  struct UpgradeableContract {\n    bool initialized_;\n\n    address proxy_;\n    string latestVersion_;\n    mapping (string => address) versions_;\n  }\n\n  event UpgradeableContractAdded(bytes32 _contractName, string _version, address _address);\n  event ContractUpgraded(bytes32 _contractName, string _version, address _address);\n  event ProxyDeployed(bytes32 _contractName, address _address);\n\n  constructor() public {\n    owner_ = msg.sender;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getLatestVersionAddress(bytes32 _contractName) public view returns (address) {\n    return contracts_[_contractName].versions_[contracts_[_contractName].latestVersion_];\n  }\n\n  function getUpgradeableContractAddress(bytes32 _contractName, string _version) public view returns (address) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) public restricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contracts_[_contractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractName].proxy_ == address(0), \"Only one proxy can exist per upgradeable contract.\");\n    AraProxy proxy = new AraProxy(address(this), _implementationAddress);\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    contracts_[_contractName].proxy_ = proxy;\n\n    emit ProxyDeployed(_contractName, proxy);\n  }\n}",
        "debug": "calldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nretval_2779: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4717,
        "code": "radeableContract) private contracts_; // keccak256(contractname) => struct\n\n  struct UpgradeableContract {\n    bool initialized_;\n\n    address proxy_;\n    string latestVersion_;\n    mapping (string => address) versions_;\n  }\n\n  event UpgradeableContractAdded(bytes32 _contractName, string _version, address _address);\n  event ContractUpgraded(bytes32 _contractName, string _version, address _address);\n  event ProxyDeployed(bytes32 _contractName, address _address);\n\n  constructor() public {\n    owner_ = msg.sender;\n  }\n\n  modifier restricted() {\n    require (\n      msg.sender == owner_,\n      \"Sender not authorized.\"\n    );\n    _;\n  }\n\n  function getLatestVersionAddress(bytes32 _contractName) public view returns (address) {\n    return contracts_[_contractName].versions_[contracts_[_contractName].latestVersion_];\n  }\n\n  function getUpgradeableContractAddress(bytes32 _contractName, string _version) public view returns (address) {\n    return contracts_[_contractName].versions_[_version];\n  }\n\n  function addNewUpgradeableContract(bytes32 _contractName, string _version, bytes _code, bytes _data) public restricted {\n    require(!contracts_[_contractName].initialized_, \"Upgradeable contract already exists. Try upgrading instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    contracts_[_contractName].initialized_ = true;\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n    _deployProxy(_contractName, deployedAddress, _data);\n\n    emit UpgradeableContractAdded(_contractName, _version, deployedAddress);\n  }\n\n  function upgradeContract(bytes32 _contractName, string _version, bytes _code) public restricted {\n    require(contracts_[_contractName].initialized_, \"Upgradeable contract must exist before it can be upgraded. Try adding one instead.\");\n    address deployedAddress;\n    assembly {\n      deployedAddress := create(0, add(_code, 0x20), mload(_code))\n    }\n\n    AraProxy proxy = AraProxy(contracts_[_contractName].proxy_);\n    proxy.setImplementation(deployedAddress);\n\n    contracts_[_contractName].latestVersion_ = _version;\n    contracts_[_contractName].versions_[_version] = deployedAddress;\n\n    emit ContractUpgraded(_contractName, _version, deployedAddress);\n  }\n\n  function _deployProxy(bytes32 _contractName, address _implementationAddress, bytes _data) private {\n    require(contracts_[_contractName].proxy_ == address(0), \"Only one proxy can exist per upgradeable contract.\");\n    AraProxy proxy = new AraProxy(address(this), _implementationAddress);\n    require(address(proxy).call(abi.encodeWithSignature(\"init(bytes)\", _data)), \"Init failed.\");\n    contracts_[_contractName].proxy_ = proxy;\n\n    emit ProxyDeployed(_contractName, proxy);\n  }\n}",
        "debug": "keccac_1_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_AraRegistry_4 + calldata_AraRegistry_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nretval_2779: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AraRegistry_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AraRegistry_0: 0xd4520d2200000000000000000000000000000000000000000000000000000000\ncalldatasize_AraRegistry: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `upgradeContract(bytes32,string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0xf8314584346fc84e96b36113784f6b562e5b01af.sol",
        "function": "upgradeContract(bytes32,string,bytes)",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}