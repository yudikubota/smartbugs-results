{
  "contract": "0xfdfd5db568f2ecf9b06a16116b9201b0500735b4",
  "tool": "mythril",
  "start": 1563503495.1739264,
  "end": 1563503684.6987495,
  "duration": 189.52482318878174,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 968,
        "code": "sender], released);\n    if (released || transferAgents[msg.sender]) {\n      return super.transfer(_to, _value);\n    } else {\n      return false;\n    }\n  }\n\n  function tra",
        "debug": "calldata_VelixIDToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VelixIDToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 386,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6170,
        "code": "sableToken, Bu",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_VelixIDToken_4: 0x1\ncalldata_VelixIDToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "burn(uint256)",
        "lineno": 332,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6599,
        "code": "e upd",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VelixIDToken_32_+_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_VelixIDToken_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_2: 0x0\ncalldata_VelixIDToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 337,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6612,
        "code": "/\n  event Upda",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VelixIDToken_32_+_4: 0x1\ncalldata_VelixIDToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_2: 0x0\ncalldata_VelixIDToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 337,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6691,
        "code": "dress => uint256) balances;\n\n  /**\n   * Construct the token.\n   *\n   * @param _name Token name\n   * @param _symbol Token symbol\n   * @param _initialSupply How many tokens we start with\n   * @param _decimals Number of decimal places\n   */\n  function VelixIDToken(string _name, string _symbol, uint _initialSupply, uint _decimals) public {\n    // Cannot create a token without supply\n    require(_initialSupply != 0);\n\n    owner = msg.sender;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply = _initialSupply;\n\n    decimals = _decimals;\n\n    // Create initially all balance on owner\n    balances[owner] = totalSupply;\n  }\n\n  /**\n   * To update token information at the end.\n   *\n   */\n  function setTokenInformation(string _name, string _symbol) onlyOwner public {\n    name = _name;\n    symbol = _symbol;\n\n    UpdatedTokenInformation(name, symbol);\n  }\n\n  function transfer(address _to, uint _value) public returns (bool success) {\n    // Call StandardToken.transfer()\n    CanTransferChecked(released || transferAgents[msg.sender], msg.sender, transferAgents[msg.sender], released);\n    if (released || transferAgents[msg.sender]) {\n      return super.transfer(_to, _value);\n    } else {\n      return false;\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n    // Call StandardToken.transferForm()\n    CanTransferChecked(released || transferAgents[msg.sender], msg.sender, transferAgents[msg.sender], released);\n    if (released || transferAgents[msg.sender]) {\n      return super.transferFrom(_from, _to, _value);\n    } else {\n      return false;\n    }\n  }\n}",
        "debug": "calldata_VelixIDToken_4 + calldata_VelixIDToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_VelixIDToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 346,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6705,
        "code": "dress => uint256) balances;\n\n  /**\n   * Construct the token.\n   *\n   * @param _name Token name\n   * @param _symbol Token symbol\n   * @param _initialSupply How many tokens we start with\n   * @param _decimals Number of decimal places\n   */\n  function VelixIDToken(string _name, string _symbol, uint _initialSupply, uint _decimals) public {\n    // Cannot create a token without supply\n    require(_initialSupply != 0);\n\n    owner = msg.sender;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply = _initialSupply;\n\n    decimals = _decimals;\n\n    // Create initially all balance on owner\n    balances[owner] = totalSupply;\n  }\n\n  /**\n   * To update token information at the end.\n   *\n   */\n  function setTokenInformation(string _name, string _symbol) onlyOwner public {\n    name = _name;\n    symbol = _symbol;\n\n    UpdatedTokenInformation(name, symbol);\n  }\n\n  function transfer(address _to, uint _value) public returns (bool success) {\n    // Call StandardToken.transfer()\n    CanTransferChecked(released || transferAgents[msg.sender], msg.sender, transferAgents[msg.sender], released);\n    if (released || transferAgents[msg.sender]) {\n      return super.transfer(_to, _value);\n    } else {\n      return false;\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n    // Call StandardToken.transferForm()\n    CanTransferChecked(released || transferAgents[msg.sender], msg.sender, transferAgents[msg.sender], released);\n    if (released || transferAgents[msg.sender]) {\n      return super.transferFrom(_from, _to, _value);\n    } else {\n      return false;\n    }\n  }\n}",
        "debug": "calldata_VelixIDToken_4 + calldata_VelixIDToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_VelixIDToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VelixIDToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0xfdfd5db568f2ecf9b06a16116b9201b0500735b4.sol",
        "function": "setTokenInformation(string,string)",
        "lineno": 346,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}