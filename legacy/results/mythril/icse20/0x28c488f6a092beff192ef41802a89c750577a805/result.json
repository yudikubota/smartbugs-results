{
  "contract": "0x28c488f6a092beff192ef41802a89c750577a805",
  "tool": "mythril",
  "start": 1563537208.8417475,
  "end": 1563537604.2798433,
  "duration": 395.4380958080292,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 341,
        "code": "bytes sigOwner \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n        \n    function getsum(uint[] values) private pure returns (uint s) {\n        s = 0;\n\n        for (uint j = 0; j < values.length; j++) {\n            s += values[j];\n        }\n\n       ",
        "debug": "calldata_TeambrellaWallet_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeambrellaWallet_0: 0x1305d2de00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeAllCosigners2(uint256,address[],bytes,bytes,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "changeAllCosigners2(uint256,address[],bytes,bytes,bytes,bytes)",
        "lineno": 182,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 705,
        "code": "    require(opNum >= m_opNum);\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }    \n\n    function realtransfer(address[] tos, uint[] values) private {\n\n        for (uint i = 0; i < values.length; i++) {\n            tos[i].transfer(values[i]);\n        }\n    }\n\n    function approveDisband() external {\n\n        for ",
        "debug": "calldata_TeambrellaWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeambrellaWallet_0: 0x8f08a60a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x8f08a60a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0x8f08a60a",
        "lineno": 229,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 894,
        "code": "       ) onlyOwner orderedOps(opNum) external {\n\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require (checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }\n\n    function transfer2(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner\n        ) externa",
        "debug": "calldata_TeambrellaWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeambrellaWallet_0: 0x91f34dbd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x91f34dbd`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0x91f34dbd",
        "lineno": 211,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1045,
        "code": "signer1,\n        bytes sigCosigner2 \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n\n    function changeAllCosigners2(\n        uint opNum,\n        address[] newCosigners,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2,\n",
        "debug": "calldata_TeambrellaWallet_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeambrellaWallet_0: 0xa0175b9600000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xa0175b96`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0xa0175b96",
        "lineno": 165,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1253,
        "code": "gners;\n\t\t\tm_teamId = teamId;\n\t\t\tm_owner = newOwner;\n\t\t}\n    }\n       \n    function changeAllCosigners(\n        uint opNum,\n        address[] newCosigners,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n    ",
        "debug": "calldata_TeambrellaWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TeambrellaWallet_0: 0xde41e1a100000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `assignOwner(address[],uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "assignOwner(address[],uint256,address)",
        "lineno": 154,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1259,
        "code": "gners;\n\t\t\tm_teamId = teamId;\n\t\t\tm_owner = newOwner;\n\t\t}\n    }\n       \n    function changeAllCosigners(\n        uint opNum,\n        address[] newCosigners,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n    ",
        "debug": "calldata_TeambrellaWallet_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_TeambrellaWallet_0: 0xde41e1a100000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `assignOwner(address[],uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "assignOwner(address[],uint256,address)",
        "lineno": 154,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1464,
        "code": "] public m_cosignersApprovedDisband;    \n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TeambrellaWallet_4: 0x0\nstorage_4: 0x0\ncalldata_TeambrellaWallet_0: 0xb7b3eb700000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0x0b7b3eb7",
        "lineno": 9,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2190,
        "code": "[] public m_cosigners;\n    a",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TeambrellaWallet_4: 0x0\nstorage_3: 0x0\ncalldata_TeambrellaWallet_0: 0x22c5ec0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0x22c5ec0f",
        "lineno": 8,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5538,
        "code": "yte(uint8(uin",
        "debug": "calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0xc9d65aa24e2728cd00ee66199ac7ecebfd87439405035bd97a835a69b1eeefd5\ncalldata_TeambrellaWallet_4: 0x0\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0xa0175b9600000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xa0175b96`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0xa0175b96",
        "lineno": 141,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5737,
        "code": " {\n        ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0xccccce733333333333333333333333333333400000000000000000000000000\ncalldata_TeambrellaWallet_4: 0x0\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0xa0175b9600000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\nmem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0xa0175b96",
        "lineno": 146,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5847,
        "code": " > 3) {\n        ",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x80\nmem_160 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4 +\n32 +\nConcat(Extract(255,\n               5,\n               31 +\n               20*\n               calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4),\n       0): 0x0\ncalldata_TeambrellaWallet_4: 0x0\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0x1305d2de00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "changeAllCosigners2(uint256,address[],bytes,bytes,bytes,bytes)",
        "lineno": 116,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5979,
        "code": "signed && ecveri",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nmem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x60\nmem_160 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4 +\n32 +\nConcat(Extract(255,\n               5,\n               31 +\n               20*\n               calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4),\n       0): 0x42\ncalldata_TeambrellaWallet_4: 0x0\nmem_224 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4 +\nConcat(Extract(255,\n               5,\n               31 +\n               20*\n               calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4),\n       0) +\n65: 0x7e00000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0x1305d2de00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "changeAllCosigners2(uint256,address[],bytes,bytes,bytes,bytes)",
        "lineno": 118,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6654,
        "code": "2 + i] = byte",
        "debug": "mem_192 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 36 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4 +\n32 +\nConcat(Extract(255,\n               5,\n               31 +\n               20*\n               mem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 36),\n       0): 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TeambrellaWallet_4: 0x0\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0x91f34dbd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\nmem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 36: 0x0\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x91f34dbd`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0x91f34dbd",
        "lineno": 131,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7114,
        "code": "ecverify(hash, sigCosigner1,",
        "debug": "The exception is triggered under the following conditions:\n\nmem_0 +\n192 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4 +\nConcat(Extract(255,\n               5,\n               31 +\n               20*\n               calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4),\n       0): 0x0\ncalldata_TeambrellaWallet_4: 0x0\nstorage_3: 0x0\nmem_128 +\n32 +\n32*\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x1f\nstorage_0: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0xa0175b9600000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\ncalldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "_function_0xa0175b96",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7497,
        "code": "       addr := mload(size)\n        }\n",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "changeAllCosigners2(uint256,address[],bytes,bytes,bytes,bytes)",
        "lineno": 45,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 7594,
        "code": "ntract TeambrellaWallet {\n    \n    uint public m_opNum;\n    uint public m_teamId;\n    address public m_owner;\n    address[] public m_cosigners;\n    address[] public m_cosignersApprovedDisband;    \n    \n    modifier orderedOps(uint opNum) {\n        require(opNum >= m_opNum);\n        _; \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == m_owner);\n        _; \n    }\n    \n    function() public payable { }\n\n\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    function ecrecovery(bytes32 hash, bytes sig) private returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function ecverify(bytes32 hash, bytes sig, address signer) private returns (bool) {\n        bool ret;\n        address addr;\n\n        (ret, addr) = ecrecovery(hash, sig);\n\n        return ret == true && addr == signer;\n    }\n\n    function checkSignatures(\n        bytes32 hash,\n        uint[3] cosignersPos,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[cosignersPos[0]]);\n        if (cosignersNum > 3) {\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[cosignersPos[1]]);\n        }\n        if (cosignersNum > 6) {\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[cosignersPos[2]]);\n        }\n\n        return signed;\n    }\n    \n    function checkSignatures2(\n        bytes32 hash,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        uint pos = uint(sigCosigner0[65]);\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[pos]);\n        if (cosignersNum > 3) {\n            pos = uint(sigCosigner1[65]);\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[pos]);\n        }\n        if (cosignersNum > 6) {\n            pos = uint(sigCosigner2[65]);\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[pos]);\n        }\n        return signed;\n    }\n\n    function toBytes(uint256[] x) private pure returns (bytes b) {\n        b = new bytes(32 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 32; i++) {\n                b[j*32 + i] = byte(uint8(x[j] / (2**(8*(31 - i))))); \n            }\n        }\n    }\n\n    function toBytes(address[] x) private pure returns (bytes b) {\n\n        b = new bytes(20 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 20; i++) {\n                b[j*20 + i] = byte(uint8(uint160(x[j]) / (2**(8*(19 - i))))); \n            }\n        }\n    }\n\n    function TeambrellaWallet() public payable {\n        m_opNum = 1;\n\t\tm_owner = msg.sender;\n    }\n    \n     function assignOwner(address[] cosigners, uint teamId, address newOwner) onlyOwner external {\n\t\tif (m_cosigners.length == 0)\n\t\t{\n\t\t\tm_cosigners = cosigners;\n\t\t\tm_teamId = teamId;\n\t\t\tm_owner = newOwner;\n\t\t}\n    }\n       \n    function changeAllCosigners(\n        uint opNum,\n        address[] newCosigners,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2 \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n\n    function changeAllCosigners2(\n        uint opNum,\n        address[] newCosigners,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n        \n    function getsum(uint[] values) private pure returns (uint s) {\n        s = 0;\n\n        for (uint j = 0; j < values.length; j++) {\n            s += values[j];\n        }\n\n        return s;    \n    }\n        \n    function transfer(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1, \n        bytes sigCosigner2\n        ) onlyOwner orderedOps(opNum) external {\n\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require (checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }\n\n    function transfer2(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner\n        ) external {\n        require(opNum >= m_opNum);\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }    \n\n    function realtransfer(address[] tos, uint[] values) private {\n\n        for (uint i = 0; i < values.length; i++) {\n            tos[i].transfer(values[i]);\n        }\n    }\n\n    function approveDisband() external {\n\n        for (uint pos=0; pos<m_cosignersApprovedDisband.length; pos++) {\n            if (m_cosignersApprovedDisband[pos] == msg.sender) {\n                return;\n            }\n        }\n        for (pos=0; pos<m_cosigners.length; pos++) {\n            if (m_cosigners[pos] == msg.sender) {\n                m_cosignersApprovedDisband.push(msg.sender);\n            }\n        }\n    }\n\n    function disbandTo(address to) onlyOwner external {\n\n        uint cosignersNum = m_cosigners.length;\n        uint approved = m_cosignersApprovedDisband.length;\n        if (cosignersNum > 6) {\n            require(approved > 2);\n        }\n        if (cosignersNum > 3) {\n            require(approved > 1);\n        }\n        require(approved > 0);\n\n        to.transfer(this.balance);\n    }\n}",
        "debug": "calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0xde41e1a100000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `assignOwner(address[],uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "assignOwner(address[],uint256,address)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7596,
        "code": "ntract TeambrellaWallet {\n    \n    uint public m_opNum;\n    uint public m_teamId;\n    address public m_owner;\n    address[] public m_cosigners;\n    address[] public m_cosignersApprovedDisband;    \n    \n    modifier orderedOps(uint opNum) {\n        require(opNum >= m_opNum);\n        _; \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == m_owner);\n        _; \n    }\n    \n    function() public payable { }\n\n\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n\n        return (ret, addr);\n    }\n\n    function ecrecovery(bytes32 hash, bytes sig) private returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n\n    function ecverify(bytes32 hash, bytes sig, address signer) private returns (bool) {\n        bool ret;\n        address addr;\n\n        (ret, addr) = ecrecovery(hash, sig);\n\n        return ret == true && addr == signer;\n    }\n\n    function checkSignatures(\n        bytes32 hash,\n        uint[3] cosignersPos,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[cosignersPos[0]]);\n        if (cosignersNum > 3) {\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[cosignersPos[1]]);\n        }\n        if (cosignersNum > 6) {\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[cosignersPos[2]]);\n        }\n\n        return signed;\n    }\n    \n    function checkSignatures2(\n        bytes32 hash,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2\n        ) private returns(bool) {\n\n        uint cosignersNum = m_cosigners.length;\n        uint pos = uint(sigCosigner0[65]);\n        bool signed = ecverify(hash, sigCosigner0, m_cosigners[pos]);\n        if (cosignersNum > 3) {\n            pos = uint(sigCosigner1[65]);\n            signed = signed && ecverify(hash, sigCosigner1, m_cosigners[pos]);\n        }\n        if (cosignersNum > 6) {\n            pos = uint(sigCosigner2[65]);\n            signed = signed && ecverify(hash, sigCosigner2, m_cosigners[pos]);\n        }\n        return signed;\n    }\n\n    function toBytes(uint256[] x) private pure returns (bytes b) {\n        b = new bytes(32 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 32; i++) {\n                b[j*32 + i] = byte(uint8(x[j] / (2**(8*(31 - i))))); \n            }\n        }\n    }\n\n    function toBytes(address[] x) private pure returns (bytes b) {\n\n        b = new bytes(20 * x.length);\n        for (uint j = 0; j < x.length; j++) {\n            for (uint i = 0; i < 20; i++) {\n                b[j*20 + i] = byte(uint8(uint160(x[j]) / (2**(8*(19 - i))))); \n            }\n        }\n    }\n\n    function TeambrellaWallet() public payable {\n        m_opNum = 1;\n\t\tm_owner = msg.sender;\n    }\n    \n     function assignOwner(address[] cosigners, uint teamId, address newOwner) onlyOwner external {\n\t\tif (m_cosigners.length == 0)\n\t\t{\n\t\t\tm_cosigners = cosigners;\n\t\t\tm_teamId = teamId;\n\t\t\tm_owner = newOwner;\n\t\t}\n    }\n       \n    function changeAllCosigners(\n        uint opNum,\n        address[] newCosigners,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2 \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n\n    function changeAllCosigners2(\n        uint opNum,\n        address[] newCosigners,\n        bytes sigCosigner0, \n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner \n        ) onlyOwner orderedOps(opNum) external {\n\n        bytes32 hash = keccak256(\"NS\", m_teamId, opNum, toBytes(newCosigners));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        m_cosignersApprovedDisband.length = 0;\n        m_cosigners = newCosigners;\n    }\n        \n    function getsum(uint[] values) private pure returns (uint s) {\n        s = 0;\n\n        for (uint j = 0; j < values.length; j++) {\n            s += values[j];\n        }\n\n        return s;    \n    }\n        \n    function transfer(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        uint[3] cosignersPos,\n        bytes sigCosigner0, \n        bytes sigCosigner1, \n        bytes sigCosigner2\n        ) onlyOwner orderedOps(opNum) external {\n\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require (checkSignatures(hash, cosignersPos, sigCosigner0, sigCosigner1, sigCosigner2));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }\n\n    function transfer2(\n        uint opNum,\n        address[] tos, \n        uint[] values,\n        bytes sigCosigner0,\n        bytes sigCosigner1,\n        bytes sigCosigner2,\n        bytes sigOwner\n        ) external {\n        require(opNum >= m_opNum);\n        require (getsum(values) <= this.balance);\n        bytes32 hash = keccak256(\"TR\", m_teamId, opNum, toBytes(tos), toBytes(values));\n        require(checkSignatures2(hash, sigCosigner0, sigCosigner1, sigCosigner2));\n        require(ecverify(hash, sigOwner, m_owner));\n        m_opNum = opNum + 1;\n        realtransfer(tos, values);\n    }    \n\n    function realtransfer(address[] tos, uint[] values) private {\n\n        for (uint i = 0; i < values.length; i++) {\n            tos[i].transfer(values[i]);\n        }\n    }\n\n    function approveDisband() external {\n\n        for (uint pos=0; pos<m_cosignersApprovedDisband.length; pos++) {\n            if (m_cosignersApprovedDisband[pos] == msg.sender) {\n                return;\n            }\n        }\n        for (pos=0; pos<m_cosigners.length; pos++) {\n            if (m_cosigners[pos] == msg.sender) {\n                m_cosignersApprovedDisband.push(msg.sender);\n            }\n        }\n    }\n\n    function disbandTo(address to) onlyOwner external {\n\n        uint cosignersNum = m_cosigners.length;\n        uint approved = m_cosignersApprovedDisband.length;\n        if (cosignersNum > 6) {\n            require(approved > 2);\n        }\n        if (cosignersNum > 3) {\n            require(approved > 1);\n        }\n        require(approved > 0);\n\n        to.transfer(this.balance);\n    }\n}",
        "debug": "calldata_TeambrellaWallet_4 + calldata_TeambrellaWallet_4: 0x7ffffffffffffcb76b8d0f83fb8ffef7fffffdfffffffffd11cdb5dffffffff\ncalldata_TeambrellaWallet_4: 0x670c96825de4b7e4babe61c100020000000001dc64945ffffffffc\nstorage_2: 0x0\ncaller: 0x0\ncalldata_TeambrellaWallet_0: 0xde41e1a100000000000000000000000000000000000000000000000000000000\ncalldatasize_TeambrellaWallet: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `assignOwner(address[],uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x28c488f6a092beff192ef41802a89c750577a805.sol",
        "function": "assignOwner(address[],uint256,address)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}