{"error": null, "issues": [{"address": 1263, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1275, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1284, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1290, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1333, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1345, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1354, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1360, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3096, "code": "y;\n    totalSupply = ini", "debug": "storage_9: 0x0\nstorage_10: 0x1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `TokenERC20(uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 52, "title": "Integer Underflow", "type": "Warning"}, {"address": 3236, "code": "initialize(addres", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3344, "code": "nt;                 ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_15: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "buy()", "lineno": 167, "title": "Exception state", "type": "Informational"}, {"address": 3762, "code": "ddress _to, uint256 _value) public returns (bool success", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_16: 0x1\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_14: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transfer(address,uint256)", "lineno": 131, "title": "Exception state", "type": "Informational"}, {"address": 3919, "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "setMinBalance(uint256)", "lineno": 190, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4647, "code": " an event reflecting on the ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transfer(address,uint256)", "lineno": 179, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5983, "code": "< airdrop2){\n    ", "debug": "storage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xfffffffe7efbffffffffffffffffffffffffffff800000000000fbfaffff00ff\ncalldata_x32323_32 + 36: 0x3ffffc00000000020000000000000023007e8000000001b04dc0020001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x7204c23fffffffffffffffffffffffffffffffffffc00000000094c1bffeffff\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x3ffffc00000000020000000000000023007e8000000001b04dc0020001\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 66, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6106, "code": "rdrop3-3){\n     ", "debug": "storage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffff7fffffffffffff00ff\ncalldata_x32323_32 + 36: 0x1000000000000100000000000000000000001f0001\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x3ffffc66c752aa675280000000000000004800000526fff\nstorage_12: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1000000000000100000000000000000000001f0001\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6135, "code": "          ", "debug": "storage_12: 0x487ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_8: 0x487fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe6\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff\ncalldata_x32323_32 + 36: 0x1\nstorage_11: 0x487ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_13: 0x2\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 73, "title": "Integer Underflow", "type": "Warning"}, {"address": 6234, "code": "n reward(address", "debug": "storage_12: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffe9fdfffc02c7ffbfffffffffffff00ff\ncalldata_x32323_32 + 36: 0x8000000000000000000000000000226c9fc3fffbfffffffffff800000001\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe8\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x7ffefffffffffffffffffffe0000000f3ce1bc23ffffffff7ffffff80c0c01fd\nstorage_13: 0x1\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000000000000000000000000000226c9fc3fffbfffffffffff800000001\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6454, "code": "         balanceO", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xb6bbde0900575706440d008c68b4e87e179cfe1ffdc006fe00000000000000fe\ncalldata_x32323_32 + 36: 0x4ed3321c4464051523c4143010668a7747180615cbdd76fd7feebfdedde3aa8d\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x75b4d35cbcf70d43c8467991420d6044640820419f9508c94008801cd193239d\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4ed3321c4464051523c4143010668a7747180615cbdd76fd7feebfdedde3aa8d\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 87, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6578, "code": "    balanceOf[_a", "debug": "storage_8: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xbfffff2e0c000000000000000000000020000000000000000000000000030040\ncalldata_x32323_32 + 36: 0x3b3491424000000008200000000000024000000000000000000000c00004803f\nstorage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0xa030c9437fffffffffdfffffffffffffffffffffffffffffffffff3fffffffff\nstorage_12: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_9: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x3b3491424000000008200000000000024000000000000000000000c00004803f\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "transferFrom(address,address,uint256)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6787, "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 totalairdrop = 600000000;\n    uint256 airdrop1 = 1700008000; //1900000000;\n    uint256 airdrop2 = 1700011000; //2100000000;\n    uint256 airdrop3 = 1700012500; //2300000000;\n    \n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (!initialized[_address]) {\n            initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 20;\n                totalSupply += 20;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 8;\n                totalSupply += 8;\n            }\n            if(airdrop2 <= totalSupply && totalSupply <= airdrop3-3){\n                balanceOf[_address] += 3;\n                totalSupply += 3;    \n            }\n\t    \n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\t    if (totalSupply < maxSupply) {\n\t        initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 10;\n                totalSupply += 10;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 3;\n                totalSupply += 3;\n            }\n            if(airdrop2 <= totalSupply && totalSupply < airdrop3){\n                balanceOf[_address] += 1;\n                totalSupply += 1;    \n            }\n\t\t\n\t    }\n\t    return true;\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n    \trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6801, "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 totalairdrop = 600000000;\n    uint256 airdrop1 = 1700008000; //1900000000;\n    uint256 airdrop2 = 1700011000; //2100000000;\n    uint256 airdrop3 = 1700012500; //2300000000;\n    \n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n        name = \"\u6e2c\u8a6616\";\n        symbol = \"\u6e2c\u8a6616\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (!initialized[_address]) {\n            initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 20;\n                totalSupply += 20;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 8;\n                totalSupply += 8;\n            }\n            if(airdrop2 <= totalSupply && totalSupply <= airdrop3-3){\n                balanceOf[_address] += 3;\n                totalSupply += 3;    \n            }\n\t    \n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\t    if (totalSupply < maxSupply) {\n\t        initialized[_address] = true ;\n            if(totalSupply < airdrop1){\n                balanceOf[_address] += 10;\n                totalSupply += 10;\n            }\n            if(airdrop1 <= totalSupply && totalSupply < airdrop2){\n                balanceOf[_address] += 3;\n                totalSupply += 3;\n            }\n            if(airdrop2 <= totalSupply && totalSupply < airdrop3){\n                balanceOf[_address] += 1;\n                totalSupply += 1;    \n            }\n\t\t\n\t    }\n\t    return true;\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n    \trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xe1291032766b81488dc565479503a103489f78d7.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}], "success": true}