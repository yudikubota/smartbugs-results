{"error": null, "issues": [{"address": 16539, "code": "r price\n    uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals\n\n    // Referral rewards, 35% for 15 levels\n    uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;\n    uint16[15] private WHITELIST_REF_REWARDS_PCT = [\n        6,  // 6% for Level.1\n        6,  // 6% for Level.2\n        5,  // 5% for Level.3\n        4,  // 4% for Level.4\n        3,  // 3% for Level.5\n        2,  // 2% for Level.6\n        1,  // 1% for Level.7\n        1,  // 1% for Level.8\n        1,  // 1% for Level.9\n        1,  // 1% for Level.10\n        1,  // 1% for Level.11\n        1,  // 1% for Level.12\n        1,  // 1% for Level.13\n        1,  // 1% for Level.14\n        1   // 1% for Level.15\n    ];\n\n    // Wei & Gas\n    uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum\n    uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum\n    uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus\n    uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum\n    uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex\n\n    // Price\n    uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    \n    uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD\n    uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD\n    uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD\n    uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD\n\n    uint256 private _vokenUsdPrice = VOKEN_USD_PRICE_START;\n\n    // Progress\n    uint16 private STAGE_MAX = 60000;   // 60,000 stages total\n    uint16 private SEASON_MAX = 100;    // 100 seasons total\n    uint16 private SEASON_STAGES = 600; // each 600 stages is a season\n\n    uint16 private _stage;\n    uint16 private _season;\n\n    // Sum\n    uint256 private _txs;\n    uint256 private _vokenTxs;\n    uint256 private _vokenBonusTxs;\n    uint256 private _vokenWhitelistTxs;\n    uint256 private _vokenIssued;\n    uint256 private _vokenBonus;\n    uint256 private _vokenWhitelist;\n    uint256 private _weiSold;\n    uint256 private _weiRefRewarded;\n    uint256 private _weiTopSales;\n    uint256 private _weiTeam;\n    uint256 private _weiPending;\n    uint256 private _weiPendingTransfered;\n\n    // Top-Sales\n    uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals\n    uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals\n\n    uint256 private _topSalesRatio = TOP_SALES_RATIO_START;   // 15% + 50% x(_stage/_stageMax)\n\n    // During tx\n    bool private _inWhitelist_;\n    uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n    uint16[] private _rewards_;\n    address[] private _referrers_;\n\n    // Audit ether price auditor\n    mapping (address => bool) private _etherPriceAuditors;\n\n    // Stage\n    mapping (uint16 => uint256) private _stageUsdSold;\n    mapping (uint16 => uint256) private _stageVokenIssued;\n\n    // Season\n    mapping (uint16 => uint256) private _seasonWeiSold;\n    mapping (uint16 => uint256) private _seasonWeiTopSales;\n    mapping (uint16 => uint256) private _seasonWeiTopSalesTransfered;\n\n    // Account\n    mapping (address => uint256) private _accountVokenIssued;\n    mapping (address => uint256) private _accountVokenBonus;\n    mapping (address => uint256) private _accountVokenWhitelisted;\n    mapping (address => uint256) private _accountWeiPurchased;\n    mapping (address => uint256) private _accountWeiRefRewarded;\n\n    // Ref\n    mapping (uint16 => address[]) private _seasonRefAccounts;\n    mapping (uint16 => mapping (address => bool)) private _seasonHasRefAccount;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountPurchased;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountRef;\n\n    // Events\n    event AuditEtherPriceChanged(uint256 value, address indexed account);\n    event AuditEtherPriceAuditorChanged(address indexed account, bool state);\n\n    event VokenBonusTransfered(address indexed to, uint256 amount);\n    event VokenWhitelistTransfered(address indexed to, uint256 amount);\n    event VokenIssuedTransfered(uint16 stageIndex, address indexed to, uint256 vokenAmount, uint256 auditEtherPrice, uint256 weiUsed);\n\n    event StageClosed(uint256 _stageNumber, address indexed account);\n    event SeasonClosed(uint16 _seasonNumber, address indexed account);\n\n    event SeasonTopSalesWeiTransfered(uint16 seasonNumber, address indexed to, uint256 amount);\n    event TeamWeiTransfered(address indexed to, uint256 amount);\n    event PendingWeiTransfered(address indexed to, uint256 amount);\n\n\n    /**\n     * @dev Start timestamp.\n     */\n    function startTimestamp() public view returns (uint32) {\n        return _startTimestamp;\n    }\n\n    /**\n     * @dev Set start timestamp.\n     */\n    function setStartTimestamp(uint32 timestamp) external onlyOwner {\n        _startTimestamp = timestamp;\n    }\n\n    /**\n     * @dev Throws if not ether price auditor.\n     */\n    modifier onlyEtherPriceAuditor() {\n        require(_etherPriceAuditors[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Set audit ether price.\n     */\n    function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {\n        _etherPrice = value;\n        emit AuditEtherPriceChanged(value, msg.sender);\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function etherPriceAuditor(address account) public view returns (bool) {\n        return _etherPriceAuditors[account];\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function setEtherPriceAuditor(address account, bool state) external onlyOwner {\n        _etherPriceAuditors[account] = state;\n        emit AuditEtherPriceAuditorChanged(account, state);\n    }\n\n    /**\n     * @dev Stage Voken price in USD, by stage index.\n     */\n    function stageVokenUsdPrice(uint16 stageIndex) private view returns (uint256) {\n        return VOKEN_USD_PRICE_START.add(VOKEN_USD_PRICE_STEP.mul(stageIndex));\n    }\n\n    /**\n     * @dev wei => USD\n     */\n    function wei2usd(uint256 amount) private view returns (uint256) {\n        return amount.mul(_etherPrice).div(1 ether);\n    }\n\n    /**\n     * @dev USD => wei\n     */\n    function usd2wei(uint256 amount) private view returns (uint256) {\n        return amount.mul(1 ether).div(_etherPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2voken(uint256 usdAmount) private view returns (uint256) {\n        return usdAmount.mul(1000000).div(_vokenUsdPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2vokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {\n        return usdAmount.mul(1000000).div(stageVokenUsdPrice(stageIndex));\n    }\n\n    /**\n     * @dev Calculate season number, by stage index.\n     */\n    function calcSeason(uint16 stageIndex) private view returns (uint16) {\n        if (stageIndex > 0) {\n            uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);\n\n            if (stageIndex.mod(SEASON_STAGES) > 0) {\n                return __seasonNumber.add(1);\n            }\n            \n            return __seasonNumber;\n        }\n        \n        return 1;\n    }\n\n    /**\n     * @dev Transfer Top-Sales wei, by season number.\n     */\n    function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {\n        uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);\n        require(to != address(0));\n        \n        _seasonWeiTopSalesTransfered[seasonNumber] = _seasonWeiTopSalesTransfered[seasonNumber].add(__weiRemain);\n        emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Pending remain, in wei.\n     */\n    function pendingRemain() private view returns (uint256) {\n        return _weiPending.sub(_weiPendingTransfered);\n    }\n\n    /**\n     * @dev Transfer pending wei.\n     */\n    function transferPending(address payable to) external onlyOwner {\n        uint256 __weiRemain = pendingRemain();\n        require(to != address(0));\n\n        _weiPendingTransfered = _weiPendingTransfered.add(__weiRemain);\n        emit PendingWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Transfer team wei.\n     */\n    function transferTeam(address payable to) external onlyOwner {\n        uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        require(to != address(0));\n\n        _weiTeam = _weiTeam.add(__weiRemain);\n        emit TeamWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Status.\n     */\n    function status() public view returns (uint256 auditEtherPrice,\n                                           uint16 stage,\n                                           uint16 season,\n                                           uint256 vokenUsdPrice,\n                                           uint256 currentTopSalesRatio,\n                                           uint256 txs,\n                                           uint256 vokenTxs,\n                                           uint256 vokenBonusTxs,\n                                           uint256 vokenWhitelistTxs,\n                                           uint256 vokenIssued,\n                                           uint256 vokenBonus,\n                                           uint256 vokenWhitelist) {\n        auditEtherPrice = _etherPrice;\n\n        if (_stage > STAGE_MAX) {\n            stage = STAGE_MAX;\n            season = SEASON_MAX;\n        } else {\n            stage = _stage;\n            season = _season;\n        }\n\n        vokenUsdPrice = _vokenUsdPrice;\n        currentTopSalesRatio = _topSalesRatio;\n\n        txs = _txs;\n        vokenTxs = _vokenTxs;\n        vokenBonusTxs = _vokenBonusTxs;\n        vokenWhitelistTxs = _vokenWhitelistTxs;\n        vokenIssued = _vokenIssued;\n        vokenBonus = _vokenBonus;\n        vokenWhitelist = _vokenWhitelist;\n    }\n\n    /**\n     * @dev Sum.\n     */\n    function sum() public view returns(uint256 weiSold,\n                                       uint256 weiReferralRewarded,\n                                       uint256 weiTopSales,\n                                       uint256 weiTeam,\n                                       uint256 weiPending,\n                                       uint256 weiPendingTransfered,\n                                       uint256 weiPendingRemain) {\n        weiSold = _weiSold;\n        weiReferralRewarded = _weiRefRewarded;\n        weiTopSales = _weiTopSales;\n        weiTeam = _weiTeam;\n        weiPending = _weiPending;\n        weiPendingTransfered = _weiPendingTransfered;\n        weiPendingRemain = pendingRemain();\n    }\n\n    /**\n     * @dev Throws if gas is not enough.\n     */\n    modifier enoughGas() {\n        require(gasleft() > GAS_MIN);\n        _;\n    }\n\n    /**\n     * @dev Throws if not started.\n     */\n    modifier onlyOnSale() {\n        require(_startTimestamp > 0 && now > _startTimestamp, \"Voken Public-Sale has not started yet.\");\n        require(_etherPrice > 0, \"Audit ETH price must be greater than zero.\");\n        require(!paused(), \"Voken Public-Sale is paused.\");\n        require(_stage <= STAGE_MAX, \"Voken Public-Sale Closed.\");\n        _;\n    }\n\n    /**\n     * @dev Top-Sales ratio.\n     */\n    function topSalesRatio(uint16 stageIndex) private view returns (uint256) {\n        return TOP_SALES_RATIO_START.add(TOP_SALES_RATIO_DISTANCE.mul(stageIndex).div(STAGE_MAX));\n    }\n\n    /**\n     * @dev USD => wei, for Top-Sales\n     */\n    function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {\n        return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));\n    }\n\n    /**\n     * @dev Calculate stage dollor cap, by stage index.\n     */\n    function stageUsdCap(uint16 stageIndex) private view returns (uint256) {\n        uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex)); \n\n        if (__usdCap > STAGE_USD_CAP_MAX) {\n            return STAGE_USD_CAP_MAX;\n        }\n\n        return __usdCap;\n    }\n\n    /**\n     * @dev Stage Vokdn cap, by stage index.\n     */\n    function stageVokenCap(uint16 stageIndex) private view returns (uint256) {\n        return usd2vokenByStage(stageUsdCap(stageIndex), stageIndex);\n    }\n\n    /**\n     * @dev Stage status, by stage index.\n     */\n    function stageStatus(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,\n                                                                 uint256 vokenCap,\n                                                                 uint256 vokenOnSale,\n                                                                 uint256 vokenSold,\n                                                                 uint256 usdCap,\n                                                                 uint256 usdOnSale,\n                                                                 uint256 usdSold,\n                                                                 uint256 weiTopSalesRatio) {\n        if (stageIndex > STAGE_MAX) {\n            return (0, 0, 0, 0, 0, 0, 0, 0);\n        }\n\n        vokenUsdPrice = stageVokenUsdPrice(stageIndex);\n\n        vokenSold = _stageVokenIssued[stageIndex];\n        vokenCap = stageVokenCap(stageIndex);\n        vokenOnSale = vokenCap.sub(vokenSold);\n\n        usdSold = _stageUsdSold[stageIndex];\n        usdCap = stageUsdCap(stageIndex);\n        usdOnSale = usdCap.sub(usdSold);\n\n        weiTopSalesRatio = topSalesRatio(stageIndex);\n    }\n\n    /**\n     * @dev Season Top-Sales remain, in wei.\n     */\n    function seasonTopSalesRemain(uint16 seasonNumber) private view returns (uint256) {\n        return _seasonWeiTopSales[seasonNumber].sub(_seasonWeiTopSalesTransfered[seasonNumber]);\n    }\n\n    /**\n     * @dev Season Top-Sales rewards, by season number, in wei.\n     */\n    function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,\n                                                                             uint256 weiTopSales,\n                                                                             uint256 weiTopSalesTransfered,\n                                                                             uint256 weiTopSalesRemain) {\n        weiSold = _seasonWeiSold[seasonNumber];\n        weiTopSales = _seasonWeiTopSales[seasonNumber];\n        weiTopSalesTransfered = _seasonWeiTopSalesTransfered[seasonNumber];\n        weiTopSalesRemain = seasonTopSalesRemain(seasonNumber);\n    }\n\n    /**\n     * @dev Query account.\n     */\n    function accountQuery(address account) public view returns (uint256 vokenIssued,\n                                                                uint256 vokenBonus,\n                                                                uint256 vokenWhitelisted,\n                                                                uint256 weiPurchased,\n                                                                uint256 weiReferralRewarded) {\n        vokenIssued = _accountVokenIssued[account];\n        vokenBonus = _accountVokenBonus[account];\n        vokenWhitelisted = _accountVokenWhitelisted[account];\n        weiPurchased = _accountWeiPurchased[account];\n        weiReferralRewarded = _accountWeiRefRewarded[account];\n    }\n\n    /**\n     * @dev Accounts in a specific season.\n     */\n    function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {\n        accounts = _seasonRefAccounts[seasonNumber];\n    }\n\n    /**\n     * @dev Season number => account => USD purchased.\n     */\n    function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountPurchased[seasonNumber][account];\n    }\n\n    /**\n     * @dev Season number => account => referral dollors.\n     */\n    function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountRef[seasonNumber][account];\n    }\n\n    /**\n     * @dev constructor\n     */\n    constructor () public {\n        _etherPriceAuditors[msg.sender] = true;\n        _stage = 0;\n        _season = 1;\n    }\n\n    /**\n     * @dev Receive ETH, and send Vokens.\n     */\n    function () external payable enoughGas onlyOnSale {\n        require(msg.value >= WEI_MIN);\n        require(msg.value <= WEI_MAX);\n\n        // Set temporary variables.\n        setTemporaryVariables();\n        uint256 __usdAmount = wei2usd(msg.value);\n        uint256 __usdRemain = __usdAmount;\n        uint256 __vokenIssued;\n        uint256 __vokenBonus;\n        uint256 __usdUsed;\n        uint256 __weiUsed;\n\n        // USD => Voken\n        while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {\n            uint256 __txVokenIssued;\n            (__txVokenIssued, __usdRemain) = ex(__usdRemain);\n            __vokenIssued = __vokenIssued.add(__txVokenIssued);\n        }\n\n        // Used\n        __usdUsed = __usdAmount.sub(__usdRemain);\n        __weiUsed = usd2wei(__usdUsed);\n\n        // Bonus 10%\n        if (msg.value >= WEI_BONUS) {\n            __vokenBonus = __vokenIssued.div(10);\n            assert(transferVokenBonus(__vokenBonus));\n        }\n\n        // Whitelisted\n        // BUY-ONE-AND-GET-ONE-MORE-FREE\n        if (_inWhitelist_ && __vokenIssued > 0) {\n            // both issued and bonus\n            assert(transferVokenWhitelisted(__vokenIssued.add(__vokenBonus)));\n\n            // 35% for 15 levels\n            sendWhitelistReferralRewards(__weiUsed);\n        }\n\n        // If wei remains, refund.\n        if (__usdRemain > 0) {\n            uint256 __weiRemain = usd2wei(__usdRemain);\n            \n            __weiUsed = msg.value.sub(__weiRemain);\n            \n            // Refund wei back\n            msg.sender.transfer(__weiRemain);\n        }\n\n        // Counter\n        if (__weiUsed > 0) {\n            _txs = _txs.add(1);\n            _weiSold = _weiSold.add(__weiUsed);\n            _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);\n        }\n\n        // Wei team\n        uint256 __weiTeam;\n        if (_season > SEASON_MAX)\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        else\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam).div(0.01 ether).mul(0.01 ether);\n\n        _weiTeam = _weiTeam.add(__weiTeam);\n        _receiver.transfer(__weiTeam);\n\n        // Assert finished\n        assert(true);\n    }\n\n    /**\n     * @dev Set temporary variables.\n     */\n    function setTemporaryVariables() private {\n        delete _referrers_;\n        delete _rewards_;\n\n        _inWhitelist_ = VOKEN.inWhitelist(msg.sender);\n        _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n\n        address __cursor = msg.sender;\n        for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {\n            address __refAccount = VOKEN.referrer(__cursor);\n\n            if (__cursor == __refAccount)\n                break;\n\n            if (VOKEN.refCount(__refAccount) > i) {\n                if (!_seasonHasRefAccount[_season][__refAccount]) {\n                    _seasonRefAccounts[_season].push(__refAccount);\n                    _seasonHasRefAccount[_season][__refAccount] = true;\n                }\n\n                _pending_ = _pending_.sub(WHITELIST_REF_REWARDS_PCT[i]);\n                _rewards_.push(WHITELIST_REF_REWARDS_PCT[i]);                    \n                _referrers_.push(__refAccount);\n            }\n\n            __cursor = __refAccount;\n        }\n    }\n\n    /**\n     * @dev USD => Voken\n     */\n    function ex(uint256 usdAmount) private returns (uint256, uint256) {\n        uint256 __stageUsdCap = stageUsdCap(_stage);\n        uint256 __vokenIssued;\n\n        // in stage\n        if (_stageUsdSold[_stage].add(usdAmount) <= __stageUsdCap) {\n            exCount(usdAmount);\n\n            __vokenIssued = usd2voken(usdAmount);\n            assert(transfervokenIssued(__vokenIssued, usdAmount));\n\n            // close stage, if stage dollor cap reached\n            if (__stageUsdCap == _stageUsdSold[_stage]) {\n                assert(closeStage());\n            }\n\n            return (__vokenIssued, 0);\n        }\n\n        // close stage\n        uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);\n        uint256 __usdRemain = usdAmount.sub(__usdUsed);\n\n        exCount(__usdUsed);\n\n        __vokenIssued = usd2voken(__usdUsed);\n        assert(transfervokenIssued(__vokenIssued, __usdUsed));\n        assert(closeStage());\n\n        return (__vokenIssued, __usdRemain);\n    }\n\n    /**\n     * @dev Ex counter.\n     */\n    function exCount(uint256 usdAmount) private {\n        uint256 __weiSold = usd2wei(usdAmount);\n        uint256 __weiTopSales = usd2weiTopSales(usdAmount);\n\n        _usdSeasonAccountPurchased[_season][msg.sender] = _usdSeasonAccountPurchased[_season][msg.sender].add(usdAmount);   // season => address => purchased, in USD\n        \n        _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD\n        _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei\n        _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei\n        _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei\n\n        // season referral account\n        if (_inWhitelist_) {\n            for (uint16 i = 0; i < _rewards_.length; i++) {\n                _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfer Voken issued.\n     */\n    function transfervokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {\n        _vokenTxs = _vokenTxs.add(1);\n        \n        _vokenIssued = _vokenIssued.add(amount);\n        _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);\n        _accountVokenIssued[msg.sender] = _accountVokenIssued[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken bonus.\n     */\n    function transferVokenBonus(uint256 amount) private returns (bool) {\n        _vokenBonusTxs = _vokenBonusTxs.add(1);\n\n        _vokenBonus = _vokenBonus.add(amount);\n        _accountVokenBonus[msg.sender] = _accountVokenBonus[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenBonusTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken whitelisted.\n     */\n    function transferVokenWhitelisted(uint256 amount) private returns (bool) {\n        _vokenWhitelistTxs = _vokenWhitelistTxs.add(1);\n\n        _vokenWhitelist = _vokenWhitelist.add(amount);\n        _accountVokenWhitelisted[msg.sender] = _accountVokenWhitelisted[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenWhitelistTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * Close current stage.\n     */\n    function closeStage() private returns (bool) {\n        emit StageClosed(_stage, msg.sender);\n        _stage = _stage.add(1);\n        _vokenUsdPrice = stageVokenUsdPrice(_stage);\n        _topSalesRatio = topSalesRatio(_stage);\n\n        // Close current season\n        uint16 __seasonNumber = calcSeason(_stage);\n        if (_season < __seasonNumber) {\n            emit SeasonClosed(_season, msg.sender);\n            _season = __seasonNumber;\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Send whitelist referral rewards.\n     */\n    function sendWhitelistReferralRewards(uint256 weiAmount) private {\n        uint256 __weiRemain = weiAmount;\n        for (uint16 i = 0; i < _rewards_.length; i++) {\n            uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);\n            address payable __receiver = address(uint160(_referrers_[i]));\n\n            _weiRefRewarded = _weiRefRewarded.add(__weiReward);\n            _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);\n            __weiRemain = __weiRemain.sub(__weiReward);\n\n            __receiver.transfer(__weiReward);\n        }\n        \n        if (_pending_ > 0)\n            _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));\n    }\n}", "debug": "gas: 0x1\ntimestamp: 0x2000000000000000000000000fff7fdfc\ncallvalue: 0x0\nstorage_6: 0x0\nstorage_34: 0xc00f58ec6e4e98f1f1f360ffffc7109cc7f7f9fd7c9c7602e2f9ff6071f78ca0\nstorage_1: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xfffffffc00\ncalldatasize_VokenPublicSale: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3.sol", "function": "fallback", "lineno": 288, "title": "Integer Overflow ", "type": "Warning"}, {"address": 16563, "code": "r price\n    uint256 private _etherPrice;    // 1 Ether = xx.xxxxxx USD, with 6 decimals\n\n    // Referral rewards, 35% for 15 levels\n    uint16 private WHITELIST_REF_REWARDS_PCT_SUM = 35;\n    uint16[15] private WHITELIST_REF_REWARDS_PCT = [\n        6,  // 6% for Level.1\n        6,  // 6% for Level.2\n        5,  // 5% for Level.3\n        4,  // 4% for Level.4\n        3,  // 3% for Level.5\n        2,  // 2% for Level.6\n        1,  // 1% for Level.7\n        1,  // 1% for Level.8\n        1,  // 1% for Level.9\n        1,  // 1% for Level.10\n        1,  // 1% for Level.11\n        1,  // 1% for Level.12\n        1,  // 1% for Level.13\n        1,  // 1% for Level.14\n        1   // 1% for Level.15\n    ];\n\n    // Wei & Gas\n    uint72 private WEI_MIN = 0.1 ether;     // 0.1 Ether Minimum\n    uint72 private WEI_MAX = 100 ether;     // 100 Ether Maximum\n    uint72 private WEI_BONUS = 10 ether;    // >10 Ether for Bonus\n    uint24 private GAS_MIN = 3000000;       // 3.0 Mwei gas Mininum\n    uint24 private GAS_EX = 1500000;        // 1.5 Mwei gas for ex\n\n    // Price\n    uint256 private VOKEN_USD_PRICE_START = 1000;       // $      0.00100 USD    \n    uint256 private VOKEN_USD_PRICE_STEP = 10;          // $    + 0.00001 USD\n    uint256 private STAGE_USD_CAP_START = 100000000;    // $    100 USD\n    uint256 private STAGE_USD_CAP_STEP = 1000000;       // $     +1 USD\n    uint256 private STAGE_USD_CAP_MAX = 15100000000;    // $ 15,100 USD\n\n    uint256 private _vokenUsdPrice = VOKEN_USD_PRICE_START;\n\n    // Progress\n    uint16 private STAGE_MAX = 60000;   // 60,000 stages total\n    uint16 private SEASON_MAX = 100;    // 100 seasons total\n    uint16 private SEASON_STAGES = 600; // each 600 stages is a season\n\n    uint16 private _stage;\n    uint16 private _season;\n\n    // Sum\n    uint256 private _txs;\n    uint256 private _vokenTxs;\n    uint256 private _vokenBonusTxs;\n    uint256 private _vokenWhitelistTxs;\n    uint256 private _vokenIssued;\n    uint256 private _vokenBonus;\n    uint256 private _vokenWhitelist;\n    uint256 private _weiSold;\n    uint256 private _weiRefRewarded;\n    uint256 private _weiTopSales;\n    uint256 private _weiTeam;\n    uint256 private _weiPending;\n    uint256 private _weiPendingTransfered;\n\n    // Top-Sales\n    uint256 private TOP_SALES_RATIO_START = 15000000;         // 15%, with 8 decimals\n    uint256 private TOP_SALES_RATIO_DISTANCE = 50000000;      // 50%, with 8 decimals\n\n    uint256 private _topSalesRatio = TOP_SALES_RATIO_START;   // 15% + 50% x(_stage/_stageMax)\n\n    // During tx\n    bool private _inWhitelist_;\n    uint256 private _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n    uint16[] private _rewards_;\n    address[] private _referrers_;\n\n    // Audit ether price auditor\n    mapping (address => bool) private _etherPriceAuditors;\n\n    // Stage\n    mapping (uint16 => uint256) private _stageUsdSold;\n    mapping (uint16 => uint256) private _stageVokenIssued;\n\n    // Season\n    mapping (uint16 => uint256) private _seasonWeiSold;\n    mapping (uint16 => uint256) private _seasonWeiTopSales;\n    mapping (uint16 => uint256) private _seasonWeiTopSalesTransfered;\n\n    // Account\n    mapping (address => uint256) private _accountVokenIssued;\n    mapping (address => uint256) private _accountVokenBonus;\n    mapping (address => uint256) private _accountVokenWhitelisted;\n    mapping (address => uint256) private _accountWeiPurchased;\n    mapping (address => uint256) private _accountWeiRefRewarded;\n\n    // Ref\n    mapping (uint16 => address[]) private _seasonRefAccounts;\n    mapping (uint16 => mapping (address => bool)) private _seasonHasRefAccount;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountPurchased;\n    mapping (uint16 => mapping (address => uint256)) private _usdSeasonAccountRef;\n\n    // Events\n    event AuditEtherPriceChanged(uint256 value, address indexed account);\n    event AuditEtherPriceAuditorChanged(address indexed account, bool state);\n\n    event VokenBonusTransfered(address indexed to, uint256 amount);\n    event VokenWhitelistTransfered(address indexed to, uint256 amount);\n    event VokenIssuedTransfered(uint16 stageIndex, address indexed to, uint256 vokenAmount, uint256 auditEtherPrice, uint256 weiUsed);\n\n    event StageClosed(uint256 _stageNumber, address indexed account);\n    event SeasonClosed(uint16 _seasonNumber, address indexed account);\n\n    event SeasonTopSalesWeiTransfered(uint16 seasonNumber, address indexed to, uint256 amount);\n    event TeamWeiTransfered(address indexed to, uint256 amount);\n    event PendingWeiTransfered(address indexed to, uint256 amount);\n\n\n    /**\n     * @dev Start timestamp.\n     */\n    function startTimestamp() public view returns (uint32) {\n        return _startTimestamp;\n    }\n\n    /**\n     * @dev Set start timestamp.\n     */\n    function setStartTimestamp(uint32 timestamp) external onlyOwner {\n        _startTimestamp = timestamp;\n    }\n\n    /**\n     * @dev Throws if not ether price auditor.\n     */\n    modifier onlyEtherPriceAuditor() {\n        require(_etherPriceAuditors[msg.sender]);\n        _;\n    }\n\n    /**\n     * @dev Set audit ether price.\n     */\n    function setEtherPrice(uint256 value) external onlyEtherPriceAuditor {\n        _etherPrice = value;\n        emit AuditEtherPriceChanged(value, msg.sender);\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function etherPriceAuditor(address account) public view returns (bool) {\n        return _etherPriceAuditors[account];\n    }\n\n    /**\n     * @dev Get ether price auditor state.\n     */\n    function setEtherPriceAuditor(address account, bool state) external onlyOwner {\n        _etherPriceAuditors[account] = state;\n        emit AuditEtherPriceAuditorChanged(account, state);\n    }\n\n    /**\n     * @dev Stage Voken price in USD, by stage index.\n     */\n    function stageVokenUsdPrice(uint16 stageIndex) private view returns (uint256) {\n        return VOKEN_USD_PRICE_START.add(VOKEN_USD_PRICE_STEP.mul(stageIndex));\n    }\n\n    /**\n     * @dev wei => USD\n     */\n    function wei2usd(uint256 amount) private view returns (uint256) {\n        return amount.mul(_etherPrice).div(1 ether);\n    }\n\n    /**\n     * @dev USD => wei\n     */\n    function usd2wei(uint256 amount) private view returns (uint256) {\n        return amount.mul(1 ether).div(_etherPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2voken(uint256 usdAmount) private view returns (uint256) {\n        return usdAmount.mul(1000000).div(_vokenUsdPrice);\n    }\n\n    /**\n     * @dev USD => voken\n     */\n    function usd2vokenByStage(uint256 usdAmount, uint16 stageIndex) public view returns (uint256) {\n        return usdAmount.mul(1000000).div(stageVokenUsdPrice(stageIndex));\n    }\n\n    /**\n     * @dev Calculate season number, by stage index.\n     */\n    function calcSeason(uint16 stageIndex) private view returns (uint16) {\n        if (stageIndex > 0) {\n            uint16 __seasonNumber = stageIndex.div(SEASON_STAGES);\n\n            if (stageIndex.mod(SEASON_STAGES) > 0) {\n                return __seasonNumber.add(1);\n            }\n            \n            return __seasonNumber;\n        }\n        \n        return 1;\n    }\n\n    /**\n     * @dev Transfer Top-Sales wei, by season number.\n     */\n    function transferTopSales(uint16 seasonNumber, address payable to) external onlyOwner {\n        uint256 __weiRemain = seasonTopSalesRemain(seasonNumber);\n        require(to != address(0));\n        \n        _seasonWeiTopSalesTransfered[seasonNumber] = _seasonWeiTopSalesTransfered[seasonNumber].add(__weiRemain);\n        emit SeasonTopSalesWeiTransfered(seasonNumber, to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Pending remain, in wei.\n     */\n    function pendingRemain() private view returns (uint256) {\n        return _weiPending.sub(_weiPendingTransfered);\n    }\n\n    /**\n     * @dev Transfer pending wei.\n     */\n    function transferPending(address payable to) external onlyOwner {\n        uint256 __weiRemain = pendingRemain();\n        require(to != address(0));\n\n        _weiPendingTransfered = _weiPendingTransfered.add(__weiRemain);\n        emit PendingWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Transfer team wei.\n     */\n    function transferTeam(address payable to) external onlyOwner {\n        uint256 __weiRemain = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        require(to != address(0));\n\n        _weiTeam = _weiTeam.add(__weiRemain);\n        emit TeamWeiTransfered(to, __weiRemain);\n        to.transfer(__weiRemain);\n    }\n\n    /**\n     * @dev Status.\n     */\n    function status() public view returns (uint256 auditEtherPrice,\n                                           uint16 stage,\n                                           uint16 season,\n                                           uint256 vokenUsdPrice,\n                                           uint256 currentTopSalesRatio,\n                                           uint256 txs,\n                                           uint256 vokenTxs,\n                                           uint256 vokenBonusTxs,\n                                           uint256 vokenWhitelistTxs,\n                                           uint256 vokenIssued,\n                                           uint256 vokenBonus,\n                                           uint256 vokenWhitelist) {\n        auditEtherPrice = _etherPrice;\n\n        if (_stage > STAGE_MAX) {\n            stage = STAGE_MAX;\n            season = SEASON_MAX;\n        } else {\n            stage = _stage;\n            season = _season;\n        }\n\n        vokenUsdPrice = _vokenUsdPrice;\n        currentTopSalesRatio = _topSalesRatio;\n\n        txs = _txs;\n        vokenTxs = _vokenTxs;\n        vokenBonusTxs = _vokenBonusTxs;\n        vokenWhitelistTxs = _vokenWhitelistTxs;\n        vokenIssued = _vokenIssued;\n        vokenBonus = _vokenBonus;\n        vokenWhitelist = _vokenWhitelist;\n    }\n\n    /**\n     * @dev Sum.\n     */\n    function sum() public view returns(uint256 weiSold,\n                                       uint256 weiReferralRewarded,\n                                       uint256 weiTopSales,\n                                       uint256 weiTeam,\n                                       uint256 weiPending,\n                                       uint256 weiPendingTransfered,\n                                       uint256 weiPendingRemain) {\n        weiSold = _weiSold;\n        weiReferralRewarded = _weiRefRewarded;\n        weiTopSales = _weiTopSales;\n        weiTeam = _weiTeam;\n        weiPending = _weiPending;\n        weiPendingTransfered = _weiPendingTransfered;\n        weiPendingRemain = pendingRemain();\n    }\n\n    /**\n     * @dev Throws if gas is not enough.\n     */\n    modifier enoughGas() {\n        require(gasleft() > GAS_MIN);\n        _;\n    }\n\n    /**\n     * @dev Throws if not started.\n     */\n    modifier onlyOnSale() {\n        require(_startTimestamp > 0 && now > _startTimestamp, \"Voken Public-Sale has not started yet.\");\n        require(_etherPrice > 0, \"Audit ETH price must be greater than zero.\");\n        require(!paused(), \"Voken Public-Sale is paused.\");\n        require(_stage <= STAGE_MAX, \"Voken Public-Sale Closed.\");\n        _;\n    }\n\n    /**\n     * @dev Top-Sales ratio.\n     */\n    function topSalesRatio(uint16 stageIndex) private view returns (uint256) {\n        return TOP_SALES_RATIO_START.add(TOP_SALES_RATIO_DISTANCE.mul(stageIndex).div(STAGE_MAX));\n    }\n\n    /**\n     * @dev USD => wei, for Top-Sales\n     */\n    function usd2weiTopSales(uint256 usdAmount) private view returns (uint256) {\n        return usd2wei(usdAmount.mul(_topSalesRatio).div(100000000));\n    }\n\n    /**\n     * @dev Calculate stage dollor cap, by stage index.\n     */\n    function stageUsdCap(uint16 stageIndex) private view returns (uint256) {\n        uint256 __usdCap = STAGE_USD_CAP_START.add(STAGE_USD_CAP_STEP.mul(stageIndex)); \n\n        if (__usdCap > STAGE_USD_CAP_MAX) {\n            return STAGE_USD_CAP_MAX;\n        }\n\n        return __usdCap;\n    }\n\n    /**\n     * @dev Stage Vokdn cap, by stage index.\n     */\n    function stageVokenCap(uint16 stageIndex) private view returns (uint256) {\n        return usd2vokenByStage(stageUsdCap(stageIndex), stageIndex);\n    }\n\n    /**\n     * @dev Stage status, by stage index.\n     */\n    function stageStatus(uint16 stageIndex) public view returns (uint256 vokenUsdPrice,\n                                                                 uint256 vokenCap,\n                                                                 uint256 vokenOnSale,\n                                                                 uint256 vokenSold,\n                                                                 uint256 usdCap,\n                                                                 uint256 usdOnSale,\n                                                                 uint256 usdSold,\n                                                                 uint256 weiTopSalesRatio) {\n        if (stageIndex > STAGE_MAX) {\n            return (0, 0, 0, 0, 0, 0, 0, 0);\n        }\n\n        vokenUsdPrice = stageVokenUsdPrice(stageIndex);\n\n        vokenSold = _stageVokenIssued[stageIndex];\n        vokenCap = stageVokenCap(stageIndex);\n        vokenOnSale = vokenCap.sub(vokenSold);\n\n        usdSold = _stageUsdSold[stageIndex];\n        usdCap = stageUsdCap(stageIndex);\n        usdOnSale = usdCap.sub(usdSold);\n\n        weiTopSalesRatio = topSalesRatio(stageIndex);\n    }\n\n    /**\n     * @dev Season Top-Sales remain, in wei.\n     */\n    function seasonTopSalesRemain(uint16 seasonNumber) private view returns (uint256) {\n        return _seasonWeiTopSales[seasonNumber].sub(_seasonWeiTopSalesTransfered[seasonNumber]);\n    }\n\n    /**\n     * @dev Season Top-Sales rewards, by season number, in wei.\n     */\n    function seasonTopSalesRewards(uint16 seasonNumber) public view returns (uint256 weiSold,\n                                                                             uint256 weiTopSales,\n                                                                             uint256 weiTopSalesTransfered,\n                                                                             uint256 weiTopSalesRemain) {\n        weiSold = _seasonWeiSold[seasonNumber];\n        weiTopSales = _seasonWeiTopSales[seasonNumber];\n        weiTopSalesTransfered = _seasonWeiTopSalesTransfered[seasonNumber];\n        weiTopSalesRemain = seasonTopSalesRemain(seasonNumber);\n    }\n\n    /**\n     * @dev Query account.\n     */\n    function accountQuery(address account) public view returns (uint256 vokenIssued,\n                                                                uint256 vokenBonus,\n                                                                uint256 vokenWhitelisted,\n                                                                uint256 weiPurchased,\n                                                                uint256 weiReferralRewarded) {\n        vokenIssued = _accountVokenIssued[account];\n        vokenBonus = _accountVokenBonus[account];\n        vokenWhitelisted = _accountVokenWhitelisted[account];\n        weiPurchased = _accountWeiPurchased[account];\n        weiReferralRewarded = _accountWeiRefRewarded[account];\n    }\n\n    /**\n     * @dev Accounts in a specific season.\n     */\n    function seasonRefAccounts(uint16 seasonNumber) public view returns (address[] memory accounts) {\n        accounts = _seasonRefAccounts[seasonNumber];\n    }\n\n    /**\n     * @dev Season number => account => USD purchased.\n     */\n    function usdSeasonAccountPurchased(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountPurchased[seasonNumber][account];\n    }\n\n    /**\n     * @dev Season number => account => referral dollors.\n     */\n    function usdSeasonAccountRef(uint16 seasonNumber, address account) public view returns (uint256) {\n        return _usdSeasonAccountRef[seasonNumber][account];\n    }\n\n    /**\n     * @dev constructor\n     */\n    constructor () public {\n        _etherPriceAuditors[msg.sender] = true;\n        _stage = 0;\n        _season = 1;\n    }\n\n    /**\n     * @dev Receive ETH, and send Vokens.\n     */\n    function () external payable enoughGas onlyOnSale {\n        require(msg.value >= WEI_MIN);\n        require(msg.value <= WEI_MAX);\n\n        // Set temporary variables.\n        setTemporaryVariables();\n        uint256 __usdAmount = wei2usd(msg.value);\n        uint256 __usdRemain = __usdAmount;\n        uint256 __vokenIssued;\n        uint256 __vokenBonus;\n        uint256 __usdUsed;\n        uint256 __weiUsed;\n\n        // USD => Voken\n        while (gasleft() > GAS_EX && __usdRemain > 0 && _stage <= STAGE_MAX) {\n            uint256 __txVokenIssued;\n            (__txVokenIssued, __usdRemain) = ex(__usdRemain);\n            __vokenIssued = __vokenIssued.add(__txVokenIssued);\n        }\n\n        // Used\n        __usdUsed = __usdAmount.sub(__usdRemain);\n        __weiUsed = usd2wei(__usdUsed);\n\n        // Bonus 10%\n        if (msg.value >= WEI_BONUS) {\n            __vokenBonus = __vokenIssued.div(10);\n            assert(transferVokenBonus(__vokenBonus));\n        }\n\n        // Whitelisted\n        // BUY-ONE-AND-GET-ONE-MORE-FREE\n        if (_inWhitelist_ && __vokenIssued > 0) {\n            // both issued and bonus\n            assert(transferVokenWhitelisted(__vokenIssued.add(__vokenBonus)));\n\n            // 35% for 15 levels\n            sendWhitelistReferralRewards(__weiUsed);\n        }\n\n        // If wei remains, refund.\n        if (__usdRemain > 0) {\n            uint256 __weiRemain = usd2wei(__usdRemain);\n            \n            __weiUsed = msg.value.sub(__weiRemain);\n            \n            // Refund wei back\n            msg.sender.transfer(__weiRemain);\n        }\n\n        // Counter\n        if (__weiUsed > 0) {\n            _txs = _txs.add(1);\n            _weiSold = _weiSold.add(__weiUsed);\n            _accountWeiPurchased[msg.sender] = _accountWeiPurchased[msg.sender].add(__weiUsed);\n        }\n\n        // Wei team\n        uint256 __weiTeam;\n        if (_season > SEASON_MAX)\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam);\n        else\n            __weiTeam = _weiSold.sub(_weiRefRewarded).sub(_weiTopSales).sub(_weiPending).sub(_weiTeam).div(0.01 ether).mul(0.01 ether);\n\n        _weiTeam = _weiTeam.add(__weiTeam);\n        _receiver.transfer(__weiTeam);\n\n        // Assert finished\n        assert(true);\n    }\n\n    /**\n     * @dev Set temporary variables.\n     */\n    function setTemporaryVariables() private {\n        delete _referrers_;\n        delete _rewards_;\n\n        _inWhitelist_ = VOKEN.inWhitelist(msg.sender);\n        _pending_ = WHITELIST_REF_REWARDS_PCT_SUM;\n\n        address __cursor = msg.sender;\n        for(uint16 i = 0; i < WHITELIST_REF_REWARDS_PCT.length; i++) {\n            address __refAccount = VOKEN.referrer(__cursor);\n\n            if (__cursor == __refAccount)\n                break;\n\n            if (VOKEN.refCount(__refAccount) > i) {\n                if (!_seasonHasRefAccount[_season][__refAccount]) {\n                    _seasonRefAccounts[_season].push(__refAccount);\n                    _seasonHasRefAccount[_season][__refAccount] = true;\n                }\n\n                _pending_ = _pending_.sub(WHITELIST_REF_REWARDS_PCT[i]);\n                _rewards_.push(WHITELIST_REF_REWARDS_PCT[i]);                    \n                _referrers_.push(__refAccount);\n            }\n\n            __cursor = __refAccount;\n        }\n    }\n\n    /**\n     * @dev USD => Voken\n     */\n    function ex(uint256 usdAmount) private returns (uint256, uint256) {\n        uint256 __stageUsdCap = stageUsdCap(_stage);\n        uint256 __vokenIssued;\n\n        // in stage\n        if (_stageUsdSold[_stage].add(usdAmount) <= __stageUsdCap) {\n            exCount(usdAmount);\n\n            __vokenIssued = usd2voken(usdAmount);\n            assert(transfervokenIssued(__vokenIssued, usdAmount));\n\n            // close stage, if stage dollor cap reached\n            if (__stageUsdCap == _stageUsdSold[_stage]) {\n                assert(closeStage());\n            }\n\n            return (__vokenIssued, 0);\n        }\n\n        // close stage\n        uint256 __usdUsed = __stageUsdCap.sub(_stageUsdSold[_stage]);\n        uint256 __usdRemain = usdAmount.sub(__usdUsed);\n\n        exCount(__usdUsed);\n\n        __vokenIssued = usd2voken(__usdUsed);\n        assert(transfervokenIssued(__vokenIssued, __usdUsed));\n        assert(closeStage());\n\n        return (__vokenIssued, __usdRemain);\n    }\n\n    /**\n     * @dev Ex counter.\n     */\n    function exCount(uint256 usdAmount) private {\n        uint256 __weiSold = usd2wei(usdAmount);\n        uint256 __weiTopSales = usd2weiTopSales(usdAmount);\n\n        _usdSeasonAccountPurchased[_season][msg.sender] = _usdSeasonAccountPurchased[_season][msg.sender].add(usdAmount);   // season => address => purchased, in USD\n        \n        _stageUsdSold[_stage] = _stageUsdSold[_stage].add(usdAmount);                   // stage sold, in USD\n        _seasonWeiSold[_season] = _seasonWeiSold[_season].add(__weiSold);               // season sold, in wei\n        _seasonWeiTopSales[_season] = _seasonWeiTopSales[_season].add(__weiTopSales);   // season Top-Sales, in wei\n        _weiTopSales = _weiTopSales.add(__weiTopSales);                                 // sum Top-Sales, in wei\n\n        // season referral account\n        if (_inWhitelist_) {\n            for (uint16 i = 0; i < _rewards_.length; i++) {\n                _usdSeasonAccountRef[_season][_referrers_[i]] = _usdSeasonAccountRef[_season][_referrers_[i]].add(usdAmount);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfer Voken issued.\n     */\n    function transfervokenIssued(uint256 amount, uint256 usdAmount) private returns (bool) {\n        _vokenTxs = _vokenTxs.add(1);\n        \n        _vokenIssued = _vokenIssued.add(amount);\n        _stageVokenIssued[_stage] = _stageVokenIssued[_stage].add(amount);\n        _accountVokenIssued[msg.sender] = _accountVokenIssued[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenIssuedTransfered(_stage, msg.sender, amount, _etherPrice, usdAmount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken bonus.\n     */\n    function transferVokenBonus(uint256 amount) private returns (bool) {\n        _vokenBonusTxs = _vokenBonusTxs.add(1);\n\n        _vokenBonus = _vokenBonus.add(amount);\n        _accountVokenBonus[msg.sender] = _accountVokenBonus[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenBonusTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * @dev Transfer Voken whitelisted.\n     */\n    function transferVokenWhitelisted(uint256 amount) private returns (bool) {\n        _vokenWhitelistTxs = _vokenWhitelistTxs.add(1);\n\n        _vokenWhitelist = _vokenWhitelist.add(amount);\n        _accountVokenWhitelisted[msg.sender] = _accountVokenWhitelisted[msg.sender].add(amount);\n\n        assert(VOKEN.transfer(msg.sender, amount));\n        emit VokenWhitelistTransfered(msg.sender, amount);\n        return true;\n    }\n\n    /**\n     * Close current stage.\n     */\n    function closeStage() private returns (bool) {\n        emit StageClosed(_stage, msg.sender);\n        _stage = _stage.add(1);\n        _vokenUsdPrice = stageVokenUsdPrice(_stage);\n        _topSalesRatio = topSalesRatio(_stage);\n\n        // Close current season\n        uint16 __seasonNumber = calcSeason(_stage);\n        if (_season < __seasonNumber) {\n            emit SeasonClosed(_season, msg.sender);\n            _season = __seasonNumber;\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Send whitelist referral rewards.\n     */\n    function sendWhitelistReferralRewards(uint256 weiAmount) private {\n        uint256 __weiRemain = weiAmount;\n        for (uint16 i = 0; i < _rewards_.length; i++) {\n            uint256 __weiReward = weiAmount.mul(_rewards_[i]).div(100);\n            address payable __receiver = address(uint160(_referrers_[i]));\n\n            _weiRefRewarded = _weiRefRewarded.add(__weiReward);\n            _accountWeiRefRewarded[__receiver] = _accountWeiRefRewarded[__receiver].add(__weiReward);\n            __weiRemain = __weiRemain.sub(__weiReward);\n\n            __receiver.transfer(__weiReward);\n        }\n        \n        if (_pending_ > 0)\n            _weiPending = _weiPending.add(weiAmount.mul(_pending_).div(100));\n    }\n}", "debug": "storage_33: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4\ngas: 0x40070258\ntimestamp: 0x40000000000000\ncallvalue: 0x8001b678c50e15f252\nstorage_6: 0x8001b678c50e15f25200\nstorage_34: 0xaefcc60e080f7b87fffa0f07e11b911e16ffef4124087d05d7ab1057b66ffff4\nstorage_1: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x200\ncalldatasize_VokenPublicSale: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0xac873993e43a5af7b39ab4a5a50ce1fbdb7191d3.sol", "function": "fallback", "lineno": 288, "title": "Integer Overflow ", "type": "Warning"}], "success": true}