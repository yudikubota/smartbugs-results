{"error": null, "issues": [{"address": 191, "code": "nt) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter", "debug": "calldata_DPOS_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 40, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1143, "code": ", _content);\n        ", "debug": "mem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 43, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1546, "code": " VoteRecord[]) public voteRecords;\n\n    event Cre", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DPOS_32 + 4: 0x0\nstorage_keccac_calldata_DPOS_4: 0x0\ncalldata_DPOS_0: 0xacef697d00000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "_function_0xacef697d", "lineno": 17, "title": "Exception state", "type": "Informational"}, {"address": 1957, "code": "           voteItems[_id].di", "debug": "storage_1 + keccac_calldata_DPOS_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DPOS_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0xe2cdd42a00000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256,address,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "vote(uint256,address,bool)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1999, "code": " VoteRecord memory record = Vot", "debug": "storage_2 + keccac_calldata_DPOS_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0xe2cdd42a00000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncalldata_DPOS_32 + 36: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256,address,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "vote(uint256,address,bool)", "lineno": 53, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2081, "code": ";\n\ncontract DPOS {", "debug": "storage_keccac_calldata_DPOS_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DPOS_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0xe2cdd42a00000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256,address,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "vote(uint256,address,bool)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2375, "code": "ntract DPOS {\n    uint256 public limit;\n    address public owner;\n    struct VoteItem {\n        string content;\n        uint agreeNum;\n        uint disagreeNum;\n    }\n    struct VoteRecord {\n        address voter;\n        bool choice;\n    }\n\n    mapping (uint => VoteItem) public voteItems;\n    mapping (uint => VoteRecord[]) public voteRecords;\n\n    event Create(uint indexed _id, string indexed _content);\n    event Vote(uint indexed _id, address indexed _voter, bool indexed _choice);\n\n    function DPOS() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setLimit(uint256 _limit) public onlyOwner returns (bool) {\n        limit = _limit;\n        return true;\n    }\n\n    function lengthOfRecord(uint256 _id) public view returns (uint length) {\n        return voteRecords[_id].length;\n    }\n\n    function create(uint _id, string _content) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter, bool _choice) public onlyOwner returns (bool) {\n        if (_choice) {\n            voteItems[_id].agreeNum += 1;\n        } else {\n            voteItems[_id].disagreeNum += 1;\n        }\n        VoteRecord memory record = VoteRecord({voter: _voter, choice: _choice});\n        voteRecords[_id].push(record);\n        Vote(_id, _voter, _choice);\n        return true;\n    }\n}", "debug": "keccac_0_+_keccac_calldata_DPOS_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 + keccac_calldata_DPOS_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2404, "code": "ntract DPOS {\n    uint256 public limit;\n    address public owner;\n    struct VoteItem {\n        string content;\n        uint agreeNum;\n        uint disagreeNum;\n    }\n    struct VoteRecord {\n        address voter;\n        bool choice;\n    }\n\n    mapping (uint => VoteItem) public voteItems;\n    mapping (uint => VoteRecord[]) public voteRecords;\n\n    event Create(uint indexed _id, string indexed _content);\n    event Vote(uint indexed _id, address indexed _voter, bool indexed _choice);\n\n    function DPOS() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setLimit(uint256 _limit) public onlyOwner returns (bool) {\n        limit = _limit;\n        return true;\n    }\n\n    function lengthOfRecord(uint256 _id) public view returns (uint length) {\n        return voteRecords[_id].length;\n    }\n\n    function create(uint _id, string _content) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter, bool _choice) public onlyOwner returns (bool) {\n        if (_choice) {\n            voteItems[_id].agreeNum += 1;\n        } else {\n            voteItems[_id].disagreeNum += 1;\n        }\n        VoteRecord memory record = VoteRecord({voter: _voter, choice: _choice});\n        voteRecords[_id].push(record);\n        Vote(_id, _voter, _choice);\n        return true;\n    }\n}", "debug": "mem_mem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2418, "code": "ntract DPOS {\n    uint256 public limit;\n    address public owner;\n    struct VoteItem {\n        string content;\n        uint agreeNum;\n        uint disagreeNum;\n    }\n    struct VoteRecord {\n        address voter;\n        bool choice;\n    }\n\n    mapping (uint => VoteItem) public voteItems;\n    mapping (uint => VoteRecord[]) public voteRecords;\n\n    event Create(uint indexed _id, string indexed _content);\n    event Vote(uint indexed _id, address indexed _voter, bool indexed _choice);\n\n    function DPOS() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setLimit(uint256 _limit) public onlyOwner returns (bool) {\n        limit = _limit;\n        return true;\n    }\n\n    function lengthOfRecord(uint256 _id) public view returns (uint length) {\n        return voteRecords[_id].length;\n    }\n\n    function create(uint _id, string _content) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter, bool _choice) public onlyOwner returns (bool) {\n        if (_choice) {\n            voteItems[_id].agreeNum += 1;\n        } else {\n            voteItems[_id].disagreeNum += 1;\n        }\n        VoteRecord memory record = VoteRecord({voter: _voter, choice: _choice});\n        voteRecords[_id].push(record);\n        Vote(_id, _voter, _choice);\n        return true;\n    }\n}", "debug": "mem_mem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2435, "code": "ntract DPOS {\n    uint256 public limit;\n    address public owner;\n    struct VoteItem {\n        string content;\n        uint agreeNum;\n        uint disagreeNum;\n    }\n    struct VoteRecord {\n        address voter;\n        bool choice;\n    }\n\n    mapping (uint => VoteItem) public voteItems;\n    mapping (uint => VoteRecord[]) public voteRecords;\n\n    event Create(uint indexed _id, string indexed _content);\n    event Vote(uint indexed _id, address indexed _voter, bool indexed _choice);\n\n    function DPOS() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setLimit(uint256 _limit) public onlyOwner returns (bool) {\n        limit = _limit;\n        return true;\n    }\n\n    function lengthOfRecord(uint256 _id) public view returns (uint length) {\n        return voteRecords[_id].length;\n    }\n\n    function create(uint _id, string _content) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter, bool _choice) public onlyOwner returns (bool) {\n        if (_choice) {\n            voteItems[_id].agreeNum += 1;\n        } else {\n            voteItems[_id].disagreeNum += 1;\n        }\n        VoteRecord memory record = VoteRecord({voter: _voter, choice: _choice});\n        voteRecords[_id].push(record);\n        Vote(_id, _voter, _choice);\n        return true;\n    }\n}", "debug": "mem_mem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0x25\nmem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2440, "code": "ntract DPOS {\n    uint256 public limit;\n    address public owner;\n    struct VoteItem {\n        string content;\n        uint agreeNum;\n        uint disagreeNum;\n    }\n    struct VoteRecord {\n        address voter;\n        bool choice;\n    }\n\n    mapping (uint => VoteItem) public voteItems;\n    mapping (uint => VoteRecord[]) public voteRecords;\n\n    event Create(uint indexed _id, string indexed _content);\n    event Vote(uint indexed _id, address indexed _voter, bool indexed _choice);\n\n    function DPOS() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function setLimit(uint256 _limit) public onlyOwner returns (bool) {\n        limit = _limit;\n        return true;\n    }\n\n    function lengthOfRecord(uint256 _id) public view returns (uint length) {\n        return voteRecords[_id].length;\n    }\n\n    function create(uint _id, string _content) public onlyOwner returns (bool) {\n        VoteItem memory item = VoteItem({content: _content, agreeNum: 0, disagreeNum: 0});\n        voteItems[_id] = item;\n        Create(_id, _content);\n        return true;\n    }\n\n    function vote(uint _id, address _voter, bool _choice) public onlyOwner returns (bool) {\n        if (_choice) {\n            voteItems[_id].agreeNum += 1;\n        } else {\n            voteItems[_id].disagreeNum += 1;\n        }\n        VoteRecord memory record = VoteRecord({voter: _voter, choice: _choice});\n        voteRecords[_id].push(record);\n        Vote(_id, _voter, _choice);\n        return true;\n    }\n}", "debug": "mem_mem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nmem_256 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DPOS_4 + calldata_DPOS_32 + 4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_0_+_keccac_calldata_DPOS_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_DPOS_0: 0x118fa4900000000000000000000000000000000000000000000000000000000\ncalldatasize_DPOS: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1f2659bd1f38ea484b3ed7d03749fe157326ad16.sol", "function": "create(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}