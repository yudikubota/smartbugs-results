{"error": null, "issues": [{"address": 292, "code": "     owner.tran", "debug": "callvalue: 0x8000000000000000000000000000000000000000000000000000000000000011\ncalldatasize_Vegan: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "fallback", "lineno": 204, "title": "Integer Overflow ", "type": "Warning"}, {"address": 635, "code": "-------------------------", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "fallback", "lineno": 209, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1885, "code": ", tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n// ------------------------------------------------------------------------\n// --- 700 tokens per 1 ETH\n// ------------------------------------------------------------------------\n\n    func", "debug": "calldata_Vegan_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Vegan_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_Vegan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 189, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2509, "code": "e(c >", "debug": "calldata_Vegan_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Vegan_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_Vegan_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vegan: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "transfer(address,uint256)", "lineno": 23, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4810, "code": "  }\n}", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Vegan_0: 0xb5931f7c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Vegan: 0x4\ncalldata_Vegan_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "safeDiv(uint256,uint256)", "lineno": 36, "title": "Exception state", "type": "Informational"}, {"address": 5394, "code": "-- 700 tokens per 1 ETH\n// ----------------------------------------------------", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x52ab2ef83426ad1fa5d3e402947e38dce2894903.sol", "function": "approveAndCall(address,uint256,bytes)", "lineno": 195, "title": "Message call to external contract", "type": "Warning"}], "success": true}