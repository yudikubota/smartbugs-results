{"error": null, "issues": [{"address": 291, "code": "public\n    payable\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ERC20Basic_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 122, "title": "Exception state", "type": "Informational"}, {"address": 1007, "code": "  }\n\n  /* Modifiers", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ERC20Basic_0: 0xc040e6b800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "_function_0xc040e6b8", "lineno": 82, "title": "Exception state", "type": "Informational"}, {"address": 1263, "code": "\n    _;\n  }\n\n  ", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x8000\ncalldata_ERC20Basic_0: 0xd0febe4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "buyTokens()", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 1386, "code": "TOKENS_SOLD - tokens", "debug": "storage_10: 0x100\ncallvalue: 0x200000000000000000014006b207000000\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_2: 0x0\ntimestamp: 0x1\ncalldatasize_ERC20Basic: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 144, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1417, "code": "nsByAmount = baseTokens + ((", "debug": "storage_10: 0x100\nstorage_8: 0x2d3c8750bd670354b0000001\ncallvalue: 0xe00063007000000\nstorage_2: 0x0\ntimestamp: 0x1\ncalldatasize_ERC20Basic: 0x3\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 147, "title": "Integer Underflow", "type": "Warning"}, {"address": 1436, "code": "00);\n\n    uint256 tokens", "debug": "storage_10: 0x100\ncallvalue: 0xa10713104f525fe015cad15f00c0fbe77f3b54f69e500d017f1e3dab139e2101\nstorage_2: 0x0\ntimestamp: 0x1\ncalldatasize_ERC20Basic: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 147, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1754, "code": "ccepted = msg.value - amountRemaining;\n    wallet.tra", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 166, "title": "Message call to external contract", "type": "Informational"}, {"address": 1754, "code": "ccepted = msg.value - amountRemaining;\n    wallet.tra", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1987\n", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "fallback", "lineno": 166, "title": "Multiple Calls", "type": "Information"}, {"address": 2933, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/8/0x33bd43ba9c71968c132f61246a79c18f9bdf0267.sol", "function": "transferERC20Token(address,address,uint256)", "lineno": 210, "title": "Message call to external contract", "type": "Warning"}], "success": true}