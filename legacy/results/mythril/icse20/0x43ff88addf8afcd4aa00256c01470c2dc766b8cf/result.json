{
  "contract": "0x43ff88addf8afcd4aa00256c01470c2dc766b8cf",
  "tool": "mythril",
  "start": 1563545558.6407654,
  "end": 1563545984.911782,
  "duration": 426.2710165977478,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 810,
        "code": "ender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(ad",
        "debug": "calldata_OneMillionToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 822,
        "code": "ender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(ad",
        "debug": "calldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 831,
        "code": "ender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(ad",
        "debug": "calldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 837,
        "code": "ender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(ad",
        "debug": "calldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3878,
        "code": "_to;\n        \n        balance[_to].pixelOwned.pu",
        "debug": "storage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1_+\nkeccac_16777215_&\n16777215_&\n16777215_&\ncalldata_OneMillionToken_32_+_4,\n_____256): 0x0\ncaller: 0x0\nstorage_1 +\nkeccac_16777215_&\n16777215_&\n16777215_&\ncalldata_OneMillionToken_32_+_4: 0x0\ncalldata_OneMillionToken_32 + 4: 0xf423f\ncalldata_OneMillionToken_0: 0x5b195c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transfer(address,uint24)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "transfer(address,uint24)",
        "lineno": 156,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4246,
        "code": ";\n\ncontract OneMil",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_1 +\nkeccac_16777215_&\n16777215_&\n16777215_&\ncalldata_OneMillionToken_32_+_4: 0x0\ncalldata_OneMillionToken_32 + 4: 0xf423f\ncalldata_OneMillionToken_0: 0x5b195c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint24)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "transfer(address,uint24)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4258,
        "code": "rn true;\n    }\n    \n    function ",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_1 +\nkeccac_16777215_&\n16777215_&\n16777215_&\ncalldata_OneMillionToken_32_+_4: 0x0\ncalldata_OneMillionToken_32 + 4: 0xf423f\ncalldata_OneMillionToken_0: 0x5b195c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transfer(address,uint24)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "transfer(address,uint24)",
        "lineno": 161,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4310,
        "code": "rn true;\n    }\n    \n    function ",
        "debug": "256_EXP_3*\nbvurem_i(storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_4,\n         10): 0xfe79ce539f16fffffffffbccfff12b8420000000000000000000000000000001\ncaller: 0x0\nstorage_1 +\nkeccac_16777215_&\n16777215_&\n16777215_&\ncalldata_OneMillionToken_32_+_4: 0x0\ncalldata_OneMillionToken_32 + 4: 0xbc438\ncalldata_OneMillionToken_0: 0x5b195c8600000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint24)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "transfer(address,uint24)",
        "lineno": 161,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5275,
        "code": ";\n\ncontract OneMil",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_OneMillionToken_32 + 4: 0x6be55eab61840000\ncallvalue: 0xe3c77cad62100020\nstorage_1: 0xe3c77cad62100020\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0x0\ncalldata_OneMillionToken_4: 0xf423f\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5287,
        "code": "o].indexList[_id] = balance[_to].",
        "debug": "calldata_OneMillionToken_32 + 4: 0xedf7b51000\ncallvalue: 0xedf7200000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xedf7200000\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0x0\ncalldata_OneMillionToken_4: 0xf423f\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer underflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 59,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5339,
        "code": "o].indexList[_id] = balance[_to].",
        "debug": "calldata_OneMillionToken_32 + 4: 0x7000002d67200000\ncallvalue: 0x1e3980300100\n256_EXP_3*\nbvurem_i(storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68,\n         10): 0x209fbc2df02fed038e38e38e38e38e38e38e387fffffffffffffffffffffffff\nstorage_1: 0x1e3980300100\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0x0\ncalldata_OneMillionToken_4: 0x9a0a2\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 59,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6328,
        "code": "            Transfer(Image[_id].pixelOwner, _to,",
        "debug": "calldata_OneMillionToken_32 + 4: 0xedf7b51000\ncallvalue: 0xedf7200000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1_+\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4,\n_____256): 0x0\nstorage_0 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xedf7200000\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OneMillionToken_4: 0xf423f\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer underflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 80,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6696,
        "code": ";\n\ncontract OneMil",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_OneMillionToken_32 + 4: 0x6be55eab61840000\ncallvalue: 0xe3c77cad62100020\nstorage_0 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xe3c77cad62100020\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OneMillionToken_4: 0xf423f\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6708,
        "code": "ce[_to].pixelOwned.length;\n      ",
        "debug": "calldata_OneMillionToken_32 + 4: 0xedf7b51000\ncallvalue: 0xedf7200000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xedf7200000\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OneMillionToken_4: 0xf423f\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer underflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 84,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6760,
        "code": "ce[_to].pixelOwned.length;\n      ",
        "debug": "calldata_OneMillionToken_32 + 4: 0x7000002d67200000\ncallvalue: 0x1e3980300100\n256_EXP_3*\nbvurem_i(storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OneMillionToken_32_+_68,\n         10): 0x209fbc2df02fed038e38e38e38e38e38e38e387fffffffffffffffffffffffff\nstorage_0 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0x1e3980300100\nstorage_1 +\nkeccac_16777215_&_16777215_&_16777215_&_calldata_OneMillionToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OneMillionToken_4: 0x9a0a2\ncalldata_OneMillionToken_0: 0x7d91da8700000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyPixelTokenFor(uint24,uint256,uint24,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 84,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7100,
        "code": "      Image[_id].color = ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function buyPixelTokenFor(uint24,uint256,uint24,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "buyPixelTokenFor(uint24,uint256,uint24,address)",
        "lineno": 90,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 9035,
        "code": "ntract OneMillionToken{\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n        }\n    \n    struct PixelToken{\n        uint256 price;\n        uint24 color;\n        address pixelOwner;\n    }\n    \n    struct pixelWallet{\n        mapping (uint24 => uint) indexList;\n        uint24[] pixelOwned;\n        uint24 pixelListlength;\n        string name; \n        string link;\n    }\n    \n    address public owner;\n    \n    string public constant symbol = \"1MT\";\n    string public constant name = \"OneMillionToken\";\n    uint8 public constant decimals = 0;\n    \n    uint private startPrice = 1000000000000000;\n    \n    uint public constant maxPrice = 100000000000000000000;\n    uint public constant minPrice = 1000000000000;\n    \n    \n    mapping (uint24 => PixelToken) private Image;\n    \n    mapping (address => pixelWallet) balance;\n    \n    function getPixelToken(uint24 _id) public view returns(uint256,string,string,uint24,address){\n        return(Image[_id].pixelOwner == address(0) ? startPrice : Image[_id].price,balance[Image[_id].pixelOwner].name,balance[Image[_id].pixelOwner].link,Image[_id].color,Image[_id].pixelOwner);\n    }\n    \n    function buyPixelTokenFor(uint24 _id,uint256 _price,uint24 _color, address _to) public payable returns (bool) {\n        require(_id>=0&&_id<1000000);\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        require(msg.value>=minPrice&&msg.value<=maxPrice);\n        \n        if(Image[_id].pixelOwner== address(0)){\n            \n            require(msg.value>=startPrice);\n            \n            Transfer(owner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(owner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n            \n        }else{\n            require(msg.value>=Image[_id].price);\n            \n            address prevOwner =Image[_id].pixelOwner; \n            \n            balance[Image[_id].pixelOwner].indexList[_id] = 0;\n            balance[Image[_id].pixelOwner].pixelListlength--;\n            \n            \n            Transfer(Image[_id].pixelOwner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(prevOwner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n        }\n    }\n    \n    function buyPixelToken(uint24 _id,uint256 _price,uint24 _color) public payable returns (bool){\n        return buyPixelTokenFor(_id, _price, _color, msg.sender);\n    }\n    \n    function setPixelToken(uint24 _id,uint256 _price,uint24 _color) public returns (bool){\n        require(_id>=0&&_id<1000000);\n        require(_price>=minPrice&&_price<=maxPrice);\n        \n        require(msg.sender==Image[_id].pixelOwner);\n        \n        Image[_id].price = _price;\n        Image[_id].color = _color;\n        \n        ChangePixel(_id);\n        \n        return true;\n    }\n    \n    function OneMillionToken() public {\n        owner = msg.sender;\n    }\n    \n    function setNameLink(string _name,string _link) public{\n        balance[msg.sender].name = _name;\n        balance[msg.sender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(address _tokenOwner) public constant returns (uint){\n        return balance[_tokenOwner].pixelListlength;\n    }\n    \n    function myBalance() public view returns (uint24[]){\n        uint24[] memory list = new uint24[](balance[msg.sender].pixelListlength);\n        \n        uint24 index = 0;\n        \n        for(uint24 i = 0; i < balance[msg.sender].pixelOwned.length;i++){\n            if(balance[msg.sender].indexList[balance[msg.sender].pixelOwned[i]]==i+1){\n                list[index]=balance[msg.sender].pixelOwned[i];\n                index++;\n            }\n        }\n        return list;\n    }\n\n    function transfer(address _to, uint24 _id) public returns (bool success){\n        require(_id>=0&&_id<1000000);\n        require(Image[_id].pixelOwner == msg.sender);\n        \n        balance[Image[_id].pixelOwner].indexList[_id] = 0;\n        balance[Image[_id].pixelOwner].pixelListlength--;\n        \n        Transfer(Image[_id].pixelOwner, _to, _id);\n        \n        Image[_id].pixelOwner = _to;\n        \n        balance[_to].pixelOwned.push(_id);\n        balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n        balance[_to].pixelListlength++;\n        return true;\n    }\n    \n    function pixelblockPrice (uint24 _startx,uint24 _starty,uint24 _endx,uint24 _endy) public view returns (uint){\n        require(_startx>=0&&_startx<1600);\n        require(_starty>=0&&_starty<625);\n        require(_endx>=_startx&&_endx<1600);\n        require(_endy>=_starty&&_endy<625);\n        \n        uint256 price = 0;\n        for(uint24 x = _startx; x<= _endx;x++){\n            for(uint24 y = _starty;y<=_endy;y++ ){\n                uint24 id = y*1600+x;\n                if(Image[id].pixelOwner==address(0)){\n                    price=add(price,startPrice);\n                }else{\n                    price=add(price,Image[id].price);\n                }\n            }\n        }\n        return price;\n    }\n    \n    function setStartPrice(uint _price) public onlyOwner returns (bool){\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        startPrice = _price;\n        return true;\n    }\n    \n    function getStartPrice() public view returns (uint){\n        return startPrice;\n    }\n    \n    modifier onlyOwner{\n        require(msg.sender==owner);\n        _;\n    }\n    \n    event ChangePixel(uint tokens);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n}",
        "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9064,
        "code": "ntract OneMillionToken{\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n        }\n    \n    struct PixelToken{\n        uint256 price;\n        uint24 color;\n        address pixelOwner;\n    }\n    \n    struct pixelWallet{\n        mapping (uint24 => uint) indexList;\n        uint24[] pixelOwned;\n        uint24 pixelListlength;\n        string name; \n        string link;\n    }\n    \n    address public owner;\n    \n    string public constant symbol = \"1MT\";\n    string public constant name = \"OneMillionToken\";\n    uint8 public constant decimals = 0;\n    \n    uint private startPrice = 1000000000000000;\n    \n    uint public constant maxPrice = 100000000000000000000;\n    uint public constant minPrice = 1000000000000;\n    \n    \n    mapping (uint24 => PixelToken) private Image;\n    \n    mapping (address => pixelWallet) balance;\n    \n    function getPixelToken(uint24 _id) public view returns(uint256,string,string,uint24,address){\n        return(Image[_id].pixelOwner == address(0) ? startPrice : Image[_id].price,balance[Image[_id].pixelOwner].name,balance[Image[_id].pixelOwner].link,Image[_id].color,Image[_id].pixelOwner);\n    }\n    \n    function buyPixelTokenFor(uint24 _id,uint256 _price,uint24 _color, address _to) public payable returns (bool) {\n        require(_id>=0&&_id<1000000);\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        require(msg.value>=minPrice&&msg.value<=maxPrice);\n        \n        if(Image[_id].pixelOwner== address(0)){\n            \n            require(msg.value>=startPrice);\n            \n            Transfer(owner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(owner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n            \n        }else{\n            require(msg.value>=Image[_id].price);\n            \n            address prevOwner =Image[_id].pixelOwner; \n            \n            balance[Image[_id].pixelOwner].indexList[_id] = 0;\n            balance[Image[_id].pixelOwner].pixelListlength--;\n            \n            \n            Transfer(Image[_id].pixelOwner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(prevOwner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n        }\n    }\n    \n    function buyPixelToken(uint24 _id,uint256 _price,uint24 _color) public payable returns (bool){\n        return buyPixelTokenFor(_id, _price, _color, msg.sender);\n    }\n    \n    function setPixelToken(uint24 _id,uint256 _price,uint24 _color) public returns (bool){\n        require(_id>=0&&_id<1000000);\n        require(_price>=minPrice&&_price<=maxPrice);\n        \n        require(msg.sender==Image[_id].pixelOwner);\n        \n        Image[_id].price = _price;\n        Image[_id].color = _color;\n        \n        ChangePixel(_id);\n        \n        return true;\n    }\n    \n    function OneMillionToken() public {\n        owner = msg.sender;\n    }\n    \n    function setNameLink(string _name,string _link) public{\n        balance[msg.sender].name = _name;\n        balance[msg.sender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(address _tokenOwner) public constant returns (uint){\n        return balance[_tokenOwner].pixelListlength;\n    }\n    \n    function myBalance() public view returns (uint24[]){\n        uint24[] memory list = new uint24[](balance[msg.sender].pixelListlength);\n        \n        uint24 index = 0;\n        \n        for(uint24 i = 0; i < balance[msg.sender].pixelOwned.length;i++){\n            if(balance[msg.sender].indexList[balance[msg.sender].pixelOwned[i]]==i+1){\n                list[index]=balance[msg.sender].pixelOwned[i];\n                index++;\n            }\n        }\n        return list;\n    }\n\n    function transfer(address _to, uint24 _id) public returns (bool success){\n        require(_id>=0&&_id<1000000);\n        require(Image[_id].pixelOwner == msg.sender);\n        \n        balance[Image[_id].pixelOwner].indexList[_id] = 0;\n        balance[Image[_id].pixelOwner].pixelListlength--;\n        \n        Transfer(Image[_id].pixelOwner, _to, _id);\n        \n        Image[_id].pixelOwner = _to;\n        \n        balance[_to].pixelOwned.push(_id);\n        balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n        balance[_to].pixelListlength++;\n        return true;\n    }\n    \n    function pixelblockPrice (uint24 _startx,uint24 _starty,uint24 _endx,uint24 _endy) public view returns (uint){\n        require(_startx>=0&&_startx<1600);\n        require(_starty>=0&&_starty<625);\n        require(_endx>=_startx&&_endx<1600);\n        require(_endy>=_starty&&_endy<625);\n        \n        uint256 price = 0;\n        for(uint24 x = _startx; x<= _endx;x++){\n            for(uint24 y = _starty;y<=_endy;y++ ){\n                uint24 id = y*1600+x;\n                if(Image[id].pixelOwner==address(0)){\n                    price=add(price,startPrice);\n                }else{\n                    price=add(price,Image[id].price);\n                }\n            }\n        }\n        return price;\n    }\n    \n    function setStartPrice(uint _price) public onlyOwner returns (bool){\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        startPrice = _price;\n        return true;\n    }\n    \n    function getStartPrice() public view returns (uint){\n        return startPrice;\n    }\n    \n    modifier onlyOwner{\n        require(msg.sender==owner);\n        _;\n    }\n    \n    event ChangePixel(uint tokens);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n}",
        "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x23ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_OneMillionToken_4 + calldata_OneMillionToken_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0x0\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9078,
        "code": "ntract OneMillionToken{\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n        }\n    \n    struct PixelToken{\n        uint256 price;\n        uint24 color;\n        address pixelOwner;\n    }\n    \n    struct pixelWallet{\n        mapping (uint24 => uint) indexList;\n        uint24[] pixelOwned;\n        uint24 pixelListlength;\n        string name; \n        string link;\n    }\n    \n    address public owner;\n    \n    string public constant symbol = \"1MT\";\n    string public constant name = \"OneMillionToken\";\n    uint8 public constant decimals = 0;\n    \n    uint private startPrice = 1000000000000000;\n    \n    uint public constant maxPrice = 100000000000000000000;\n    uint public constant minPrice = 1000000000000;\n    \n    \n    mapping (uint24 => PixelToken) private Image;\n    \n    mapping (address => pixelWallet) balance;\n    \n    function getPixelToken(uint24 _id) public view returns(uint256,string,string,uint24,address){\n        return(Image[_id].pixelOwner == address(0) ? startPrice : Image[_id].price,balance[Image[_id].pixelOwner].name,balance[Image[_id].pixelOwner].link,Image[_id].color,Image[_id].pixelOwner);\n    }\n    \n    function buyPixelTokenFor(uint24 _id,uint256 _price,uint24 _color, address _to) public payable returns (bool) {\n        require(_id>=0&&_id<1000000);\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        require(msg.value>=minPrice&&msg.value<=maxPrice);\n        \n        if(Image[_id].pixelOwner== address(0)){\n            \n            require(msg.value>=startPrice);\n            \n            Transfer(owner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(owner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n            \n        }else{\n            require(msg.value>=Image[_id].price);\n            \n            address prevOwner =Image[_id].pixelOwner; \n            \n            balance[Image[_id].pixelOwner].indexList[_id] = 0;\n            balance[Image[_id].pixelOwner].pixelListlength--;\n            \n            \n            Transfer(Image[_id].pixelOwner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(prevOwner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n        }\n    }\n    \n    function buyPixelToken(uint24 _id,uint256 _price,uint24 _color) public payable returns (bool){\n        return buyPixelTokenFor(_id, _price, _color, msg.sender);\n    }\n    \n    function setPixelToken(uint24 _id,uint256 _price,uint24 _color) public returns (bool){\n        require(_id>=0&&_id<1000000);\n        require(_price>=minPrice&&_price<=maxPrice);\n        \n        require(msg.sender==Image[_id].pixelOwner);\n        \n        Image[_id].price = _price;\n        Image[_id].color = _color;\n        \n        ChangePixel(_id);\n        \n        return true;\n    }\n    \n    function OneMillionToken() public {\n        owner = msg.sender;\n    }\n    \n    function setNameLink(string _name,string _link) public{\n        balance[msg.sender].name = _name;\n        balance[msg.sender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(address _tokenOwner) public constant returns (uint){\n        return balance[_tokenOwner].pixelListlength;\n    }\n    \n    function myBalance() public view returns (uint24[]){\n        uint24[] memory list = new uint24[](balance[msg.sender].pixelListlength);\n        \n        uint24 index = 0;\n        \n        for(uint24 i = 0; i < balance[msg.sender].pixelOwned.length;i++){\n            if(balance[msg.sender].indexList[balance[msg.sender].pixelOwned[i]]==i+1){\n                list[index]=balance[msg.sender].pixelOwned[i];\n                index++;\n            }\n        }\n        return list;\n    }\n\n    function transfer(address _to, uint24 _id) public returns (bool success){\n        require(_id>=0&&_id<1000000);\n        require(Image[_id].pixelOwner == msg.sender);\n        \n        balance[Image[_id].pixelOwner].indexList[_id] = 0;\n        balance[Image[_id].pixelOwner].pixelListlength--;\n        \n        Transfer(Image[_id].pixelOwner, _to, _id);\n        \n        Image[_id].pixelOwner = _to;\n        \n        balance[_to].pixelOwned.push(_id);\n        balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n        balance[_to].pixelListlength++;\n        return true;\n    }\n    \n    function pixelblockPrice (uint24 _startx,uint24 _starty,uint24 _endx,uint24 _endy) public view returns (uint){\n        require(_startx>=0&&_startx<1600);\n        require(_starty>=0&&_starty<625);\n        require(_endx>=_startx&&_endx<1600);\n        require(_endy>=_starty&&_endy<625);\n        \n        uint256 price = 0;\n        for(uint24 x = _startx; x<= _endx;x++){\n            for(uint24 y = _starty;y<=_endy;y++ ){\n                uint24 id = y*1600+x;\n                if(Image[id].pixelOwner==address(0)){\n                    price=add(price,startPrice);\n                }else{\n                    price=add(price,Image[id].price);\n                }\n            }\n        }\n        return price;\n    }\n    \n    function setStartPrice(uint _price) public onlyOwner returns (bool){\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        startPrice = _price;\n        return true;\n    }\n    \n    function getStartPrice() public view returns (uint){\n        return startPrice;\n    }\n    \n    modifier onlyOwner{\n        require(msg.sender==owner);\n        _;\n    }\n    \n    event ChangePixel(uint tokens);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n}",
        "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe6bae5de6ddbfbcdafbbadc0000000000000000000000000000000000000001\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffe2f72702028f18470cfc7a018071200d75ae25349a800107f080bbc08a0000\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_OneMillionToken_4 + calldata_OneMillionToken_4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20\ncalldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0x4\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9100,
        "code": "ntract OneMillionToken{\n    \n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n        }\n    \n    struct PixelToken{\n        uint256 price;\n        uint24 color;\n        address pixelOwner;\n    }\n    \n    struct pixelWallet{\n        mapping (uint24 => uint) indexList;\n        uint24[] pixelOwned;\n        uint24 pixelListlength;\n        string name; \n        string link;\n    }\n    \n    address public owner;\n    \n    string public constant symbol = \"1MT\";\n    string public constant name = \"OneMillionToken\";\n    uint8 public constant decimals = 0;\n    \n    uint private startPrice = 1000000000000000;\n    \n    uint public constant maxPrice = 100000000000000000000;\n    uint public constant minPrice = 1000000000000;\n    \n    \n    mapping (uint24 => PixelToken) private Image;\n    \n    mapping (address => pixelWallet) balance;\n    \n    function getPixelToken(uint24 _id) public view returns(uint256,string,string,uint24,address){\n        return(Image[_id].pixelOwner == address(0) ? startPrice : Image[_id].price,balance[Image[_id].pixelOwner].name,balance[Image[_id].pixelOwner].link,Image[_id].color,Image[_id].pixelOwner);\n    }\n    \n    function buyPixelTokenFor(uint24 _id,uint256 _price,uint24 _color, address _to) public payable returns (bool) {\n        require(_id>=0&&_id<1000000);\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        require(msg.value>=minPrice&&msg.value<=maxPrice);\n        \n        if(Image[_id].pixelOwner== address(0)){\n            \n            require(msg.value>=startPrice);\n            \n            Transfer(owner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(owner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n            \n        }else{\n            require(msg.value>=Image[_id].price);\n            \n            address prevOwner =Image[_id].pixelOwner; \n            \n            balance[Image[_id].pixelOwner].indexList[_id] = 0;\n            balance[Image[_id].pixelOwner].pixelListlength--;\n            \n            \n            Transfer(Image[_id].pixelOwner, _to, _id);\n            \n            Image[_id].pixelOwner = _to;\n            balance[_to].pixelOwned.push(_id);\n            balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n            balance[_to].pixelListlength++;\n            \n            require(prevOwner.send(msg.value));\n            \n            Image[_id].price = _price;\n            Image[_id].color = _color;\n            \n            ChangePixel(_id);\n            \n            return true;\n        }\n    }\n    \n    function buyPixelToken(uint24 _id,uint256 _price,uint24 _color) public payable returns (bool){\n        return buyPixelTokenFor(_id, _price, _color, msg.sender);\n    }\n    \n    function setPixelToken(uint24 _id,uint256 _price,uint24 _color) public returns (bool){\n        require(_id>=0&&_id<1000000);\n        require(_price>=minPrice&&_price<=maxPrice);\n        \n        require(msg.sender==Image[_id].pixelOwner);\n        \n        Image[_id].price = _price;\n        Image[_id].color = _color;\n        \n        ChangePixel(_id);\n        \n        return true;\n    }\n    \n    function OneMillionToken() public {\n        owner = msg.sender;\n    }\n    \n    function setNameLink(string _name,string _link) public{\n        balance[msg.sender].name = _name;\n        balance[msg.sender].link = _link;\n    }\n    \n    function totalSupply() public pure returns (uint) {\n        return 1000000;    \n    }\n\n    function balanceOf(address _tokenOwner) public constant returns (uint){\n        return balance[_tokenOwner].pixelListlength;\n    }\n    \n    function myBalance() public view returns (uint24[]){\n        uint24[] memory list = new uint24[](balance[msg.sender].pixelListlength);\n        \n        uint24 index = 0;\n        \n        for(uint24 i = 0; i < balance[msg.sender].pixelOwned.length;i++){\n            if(balance[msg.sender].indexList[balance[msg.sender].pixelOwned[i]]==i+1){\n                list[index]=balance[msg.sender].pixelOwned[i];\n                index++;\n            }\n        }\n        return list;\n    }\n\n    function transfer(address _to, uint24 _id) public returns (bool success){\n        require(_id>=0&&_id<1000000);\n        require(Image[_id].pixelOwner == msg.sender);\n        \n        balance[Image[_id].pixelOwner].indexList[_id] = 0;\n        balance[Image[_id].pixelOwner].pixelListlength--;\n        \n        Transfer(Image[_id].pixelOwner, _to, _id);\n        \n        Image[_id].pixelOwner = _to;\n        \n        balance[_to].pixelOwned.push(_id);\n        balance[_to].indexList[_id] = balance[_to].pixelOwned.length;\n        balance[_to].pixelListlength++;\n        return true;\n    }\n    \n    function pixelblockPrice (uint24 _startx,uint24 _starty,uint24 _endx,uint24 _endy) public view returns (uint){\n        require(_startx>=0&&_startx<1600);\n        require(_starty>=0&&_starty<625);\n        require(_endx>=_startx&&_endx<1600);\n        require(_endy>=_starty&&_endy<625);\n        \n        uint256 price = 0;\n        for(uint24 x = _startx; x<= _endx;x++){\n            for(uint24 y = _starty;y<=_endy;y++ ){\n                uint24 id = y*1600+x;\n                if(Image[id].pixelOwner==address(0)){\n                    price=add(price,startPrice);\n                }else{\n                    price=add(price,Image[id].price);\n                }\n            }\n        }\n        return price;\n    }\n    \n    function setStartPrice(uint _price) public onlyOwner returns (bool){\n        \n        require(_price>=minPrice&&_price<=maxPrice);\n        startPrice = _price;\n        return true;\n    }\n    \n    function getStartPrice() public view returns (uint){\n        return startPrice;\n    }\n    \n    modifier onlyOwner{\n        require(msg.sender==owner);\n        _;\n    }\n    \n    event ChangePixel(uint tokens);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n}",
        "debug": "keccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_OneMillionToken_4 + calldata_OneMillionToken_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\ncalldata_OneMillionToken_0: 0x489ba09200000000000000000000000000000000000000000000000000000000\ncalldatasize_OneMillionToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNameLink(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/14/0x43ff88addf8afcd4aa00256c01470c2dc766b8cf.sol",
        "function": "setNameLink(string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}