{
  "contract": "0x3dc9f0de31389740496a3aac9a63b401813efb06",
  "tool": "mythril",
  "start": 1563710439.7661283,
  "end": 1563710471.9493995,
  "duration": 32.183271169662476,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 213,
        "code": "butors(address[] _address, uint256[] tokenAmount) public {\n        require (msg.sender == address(0xc45e9c64eee1F987F9a5B7A8E0Ad1f760dEFa7d8));\n        for(uint256 a=0;a<_address.length;a++){\n            if(!token.transferFrom(tokenWallet,_address[a],tokenAmount[a])){\n                revert();\n            }\n        }\n    }\n}",
        "debug": "calldata_SeparateDistribution_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SeparateDistribution_0: 0xc80f3c8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SeparateDistribution: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addExisitingContributors(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x3dc9f0de31389740496a3aac9a63b401813efb06.sol",
        "function": "addExisitingContributors(address[],uint256[])",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 700,
        "code": "    revert();\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SeparateDistribution_4 + calldata_SeparateDistribution_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xc45e9c64eee1f987f9a5b7a8e0ad1f760defa7d8\ncalldata_SeparateDistribution_0: 0xc80f3c8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SeparateDistribution: 0x4\nmem_128 +\n32 +\n32*\ncalldata_SeparateDistribution_4 + calldata_SeparateDistribution_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/38/0x3dc9f0de31389740496a3aac9a63b401813efb06.sol",
        "function": "addExisitingContributors(address[],uint256[])",
        "lineno": 32,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 898,
        "code": ",_address[a],tokenAmount[a])){\n                revert();\n ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/38/0x3dc9f0de31389740496a3aac9a63b401813efb06.sol",
        "function": "addExisitingContributors(address[],uint256[])",
        "lineno": 31,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 898,
        "code": ",_address[a],tokenAmount[a])){\n                revert();\n ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 898\n",
        "filename": "/unique_chucks/38/0x3dc9f0de31389740496a3aac9a63b401813efb06.sol",
        "function": "addExisitingContributors(address[],uint256[])",
        "lineno": 31,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}