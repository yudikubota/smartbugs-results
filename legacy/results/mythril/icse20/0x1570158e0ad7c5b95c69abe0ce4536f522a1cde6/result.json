{
  "contract": "0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6",
  "tool": "mythril",
  "start": 1563563006.861638,
  "end": 1563563034.8490765,
  "duration": 27.987438440322876,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1986,
        "code": "8 _boxIndex, uint8 _materialIndex) public view return",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "showBoxAmount(uint8)",
        "lineno": 106,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1986,
        "code": "8 _boxIndex, uint8 _materialIndex) public view return",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function showBoxAmount(uint8). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "showBoxAmount(uint8)",
        "lineno": 106,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2156,
        "code": "r{        \n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_personCall_4: 0x0\nstorage_5: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_personCall_0: 0x297a252f00000000000000000000000000000000000000000000000000000000\ncalldatasize_personCall: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "change_dungeons_address(uint256,address)",
        "lineno": 126,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2888,
        "code": ";\n\n\nlibrary SafeMa",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_personCall_0: 0x941fc8bc00000000000000000000000000000000000000000000000000000000\ncalldatasize_personCall: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `push_dungeons(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "push_dungeons(address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2997,
        "code": "view returns(bool){ \n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_personCall_4: 0x0\nstorage_5: 0x0\ncalldata_personCall_0: 0x956e958a00000000000000000000000000000000000000000000000000000000\ncalldatasize_personCall: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "_function_0x956e958a",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3741,
        "code": ";i<=length;i++){\n             address slave",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "checkSlave()",
        "lineno": 67,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3741,
        "code": ";i<=length;i++){\n             address slave",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3961\n",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "callTreasureMin(uint8,address,uint256)",
        "lineno": 67,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3741,
        "code": ";i<=length;i++){\n             address slave",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkSlave(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "checkSlave()",
        "lineno": 67,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3961,
        "code": "= slave){\n                 return tru",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "callTreasureMin(uint8,address,uint256)",
        "lineno": 69,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3961,
        "code": "= slave){\n                 return tru",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function callTreasureMin(uint8,address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "callTreasureMin(uint8,address,uint256)",
        "lineno": 69,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4330,
        "code": "nt(uint8 _boxIndex, uint8 _materialIndex) public view returns (uint){ ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "showMaterialAmount(uint8,uint8)",
        "lineno": 111,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4330,
        "code": "nt(uint8 _boxIndex, uint8 _materialIndex) public view returns (uint){ ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function showMaterialAmount(uint8,uint8). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/11/0x1570158e0ad7c5b95c69abe0ce4536f522a1cde6.sol",
        "function": "showMaterialAmount(uint8,uint8)",
        "lineno": 111,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}