{"error": null, "issues": [{"address": 1855, "code": " [] public entries ;\n   addres", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Presale_4: 0x0\nstorage_0: 0x0\ncalldata_Presale_0: 0xb30906d400000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "_function_0xb30906d4", "lineno": 13, "title": "Exception state", "type": "Informational"}, {"address": 3301, "code": "RG);\n        \n        if (!presale", "debug": "storage_2: 0x0\ncalldata_Presale_32 + 68: 0x1\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 32, "title": "Integer Underflow", "type": "Warning"}, {"address": 3453, "code": "ry.ethID = adr;\n        e", "debug": "storage_2: 0x3fffffffffffffffffff000001ffffffffffffffffffffffffffffffffffffff\ncalldata_Presale_32 + 68: 0xc000000000000000000000000200000000000000000000000000000000000001\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 40, "title": "Integer Underflow", "type": "Warning"}, {"address": 3573, "code": "\n\ncontract Presale", "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncalldata_Presale_32 + 68: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3696, "code": "rue;\n     }\n     \n ", "debug": "mem_224 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Presale_4 + calldata_Presale_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 100)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 132)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2: 0x0\ncalldata_Presale_32 + 68: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3971, "code": "ntract Presale {\n   struct PresaleEntry {\n        address ethID;\n        string email;\n        string bitcoinSRC;\n        string bitcoinDEST;\n        uint satoshis;\n        uint centiWRG;\n    }\n  \n   PresaleEntry [] public entries ;\n   address public master; // master address\n   uint public presaleAmount;\n   bool public presaleGoing;\n   \n   event presaleMade(string sender, uint satoshis);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n\n    function Presale() {\n     master = msg.sender;\n     presaleAmount = 23970000 * 100; // 6 030 000 was sold to first investors\n     presaleGoing = true;\n    }\n\n    /* Very simple trade function */\n\n    function makePresale(string mail, address adr, uint satoshis, uint centiWRG,string bitcoinSRC, string bitcoinDEST) returns(bool sufficient) {\n        PresaleEntry memory entry;\n        int expectedWRG = int(presaleAmount) - int(centiWRG);\n        \n        if (!presaleGoing) return;\n        \n        if (msg.sender != master) return false; \n        if (expectedWRG < 0) return false;\n        \n        presaleAmount -= centiWRG;\n        entry.ethID = adr;\n        entry.email = mail;\n        entry.satoshis = satoshis;\n        entry.centiWRG = centiWRG;\n        entry.bitcoinSRC = bitcoinSRC;\n        entry.bitcoinDEST = bitcoinDEST;\n        \n        entries.push(entry);\n        \n        return true;\n     }\n     \n     function stopPresale() returns (bool ok) {\n          if (msg.sender != master) return false; \n          presaleGoing = false;\n          return true;\n     }\n     \n     function getAmountLeft() returns (uint amount){\n         return presaleAmount;\n     }\n     \n     function getPresaleNumber() returns (uint length){\n         return entries.length;\n     }\n    \n     function getPresale(uint i) returns (string,address,uint,uint,string,string){\n         uint max = entries.length;\n         if (i >= max) {\n             return (\"NotFound\",0,0,0,\"\",\"\");\n         }\n         return (entries[i].email,entries[i].ethID, entries[i].satoshis, entries[i].centiWRG,entries[i].bitcoinSRC,entries[i].bitcoinDEST);\n     }\n\n}", "debug": "keccac_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n6*storage_0: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*storage_0: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_2: 0x0\ncalldata_Presale_32 + 68: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4000, "code": "ntract Presale {\n   struct PresaleEntry {\n        address ethID;\n        string email;\n        string bitcoinSRC;\n        string bitcoinDEST;\n        uint satoshis;\n        uint centiWRG;\n    }\n  \n   PresaleEntry [] public entries ;\n   address public master; // master address\n   uint public presaleAmount;\n   bool public presaleGoing;\n   \n   event presaleMade(string sender, uint satoshis);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n\n    function Presale() {\n     master = msg.sender;\n     presaleAmount = 23970000 * 100; // 6 030 000 was sold to first investors\n     presaleGoing = true;\n    }\n\n    /* Very simple trade function */\n\n    function makePresale(string mail, address adr, uint satoshis, uint centiWRG,string bitcoinSRC, string bitcoinDEST) returns(bool sufficient) {\n        PresaleEntry memory entry;\n        int expectedWRG = int(presaleAmount) - int(centiWRG);\n        \n        if (!presaleGoing) return;\n        \n        if (msg.sender != master) return false; \n        if (expectedWRG < 0) return false;\n        \n        presaleAmount -= centiWRG;\n        entry.ethID = adr;\n        entry.email = mail;\n        entry.satoshis = satoshis;\n        entry.centiWRG = centiWRG;\n        entry.bitcoinSRC = bitcoinSRC;\n        entry.bitcoinDEST = bitcoinDEST;\n        \n        entries.push(entry);\n        \n        return true;\n     }\n     \n     function stopPresale() returns (bool ok) {\n          if (msg.sender != master) return false; \n          presaleGoing = false;\n          return true;\n     }\n     \n     function getAmountLeft() returns (uint amount){\n         return presaleAmount;\n     }\n     \n     function getPresaleNumber() returns (uint length){\n         return entries.length;\n     }\n    \n     function getPresale(uint i) returns (string,address,uint,uint,string,string){\n         uint max = entries.length;\n         if (i >= max) {\n             return (\"NotFound\",0,0,0,\"\",\"\");\n         }\n         return (entries[i].email,entries[i].ethID, entries[i].satoshis, entries[i].centiWRG,entries[i].bitcoinSRC,entries[i].bitcoinDEST);\n     }\n\n}", "debug": "mem_mem_224 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Presale_4 + calldata_Presale_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 100)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 132)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\ncalldata_Presale_32 + 68: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4014, "code": "ntract Presale {\n   struct PresaleEntry {\n        address ethID;\n        string email;\n        string bitcoinSRC;\n        string bitcoinDEST;\n        uint satoshis;\n        uint centiWRG;\n    }\n  \n   PresaleEntry [] public entries ;\n   address public master; // master address\n   uint public presaleAmount;\n   bool public presaleGoing;\n   \n   event presaleMade(string sender, uint satoshis);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n\n    function Presale() {\n     master = msg.sender;\n     presaleAmount = 23970000 * 100; // 6 030 000 was sold to first investors\n     presaleGoing = true;\n    }\n\n    /* Very simple trade function */\n\n    function makePresale(string mail, address adr, uint satoshis, uint centiWRG,string bitcoinSRC, string bitcoinDEST) returns(bool sufficient) {\n        PresaleEntry memory entry;\n        int expectedWRG = int(presaleAmount) - int(centiWRG);\n        \n        if (!presaleGoing) return;\n        \n        if (msg.sender != master) return false; \n        if (expectedWRG < 0) return false;\n        \n        presaleAmount -= centiWRG;\n        entry.ethID = adr;\n        entry.email = mail;\n        entry.satoshis = satoshis;\n        entry.centiWRG = centiWRG;\n        entry.bitcoinSRC = bitcoinSRC;\n        entry.bitcoinDEST = bitcoinDEST;\n        \n        entries.push(entry);\n        \n        return true;\n     }\n     \n     function stopPresale() returns (bool ok) {\n          if (msg.sender != master) return false; \n          presaleGoing = false;\n          return true;\n     }\n     \n     function getAmountLeft() returns (uint amount){\n         return presaleAmount;\n     }\n     \n     function getPresaleNumber() returns (uint length){\n         return entries.length;\n     }\n    \n     function getPresale(uint i) returns (string,address,uint,uint,string,string){\n         uint max = entries.length;\n         if (i >= max) {\n             return (\"NotFound\",0,0,0,\"\",\"\");\n         }\n         return (entries[i].email,entries[i].ethID, entries[i].satoshis, entries[i].centiWRG,entries[i].bitcoinSRC,entries[i].bitcoinDEST);\n     }\n\n}", "debug": "mem_224 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Presale_4 + calldata_Presale_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 100)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 132)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_224 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Presale_4 + calldata_Presale_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 100)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Presale_4 + calldata_Presale_32 + 132)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_2: 0x0\ncalldata_Presale_32 + 68: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_3: 0xff00\ncalldata_Presale_0: 0xecd6375700000000000000000000000000000000000000000000000000000000\ncalldatasize_Presale: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `makePresale(string,address,uint256,uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x938875f7a161ce2f4c314ba1bb3172dbf52ebb3d.sol", "function": "makePresale(string,address,uint256,uint256,string,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}