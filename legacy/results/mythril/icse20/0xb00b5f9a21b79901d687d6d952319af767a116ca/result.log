{"error": null, "issues": [{"address": 278, "code": "56[]) {\n        //Get the data, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data;\n    }\n    function getSize() public returns (uin", "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_FileHost_0: 0x3bc5de3000000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getData()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "getData()", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 622, "code": "blic {\n        //For communicating with the common butters.\n        require(msg.sender == master);\n        motd = newMotd;\n    }\n    function getData() public returns ", "debug": "calldata_FileHost_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FileHost_0: 0x5fe59b9d00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMotd(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "setMotd(string)", "lineno": 36, "title": "Integer Overflow ", "type": "Warning"}, {"address": 750, "code": "256[] newData) public {\n        //Append data\n        require(msg.sender == master);\n        require(!lock);\n        for (var i = 0; i < newData.length; i++) {\n            data.push(newData[i]);\n        }\n    }\n    function resetData() pu", "debug": "calldata_FileHost_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FileHost_0: 0xd3a2d05000000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addData(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "addData(uint256[])", "lineno": 22, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1058, "code": "public retu", "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_FileHost_0: 0x3bc5de3000000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getData()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "getData()", "lineno": 45, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1060, "code": "public retu", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_FileHost_0: 0x3bc5de3000000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getData()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "getData()", "lineno": 45, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1190, "code": ";\n    }\n}", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_FileHost_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "withdraw()", "lineno": 69, "title": "Exception state", "type": "Informational"}, {"address": 1296, "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "withdraw()", "lineno": 71, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1985, "code": "unction withdraw() public {\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_FileHost_0: 0xa4ca80be00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "lockFile()", "lineno": 66, "title": "Exception state", "type": "Informational"}, {"address": 2190, "code": "\ncontract FileHost", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_FileHost_4 + calldata_FileHost_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_FileHost_0: 0xd3a2d05000000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addData(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "addData(uint256[])", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2435, "code": "ontract FileHost {\n    uint256 version;\n    uint256[] data; //Byte arrays take up a lot more space than they need to.\n    address master;\n    string motd;\n    string credit;\n    bool lock;\n    \n    function FileHost() public {\n        //Store the master.\n        master = msg.sender;\n        version = 5;\n        motd = \"\";\n        credit = \"to 63e190e32fcae9ffcca380cead85247495cc53ffa32669d2d298ff0b0dbce524 for creating the contract\";\n        lock = false;\n    }\n    function newMaster(address newMaster) public {\n        require(msg.sender == master);\n        master = newMaster;\n    }\n    function addData(uint256[] newData) public {\n        //Append data\n        require(msg.sender == master);\n        require(!lock);\n        for (var i = 0; i < newData.length; i++) {\n            data.push(newData[i]);\n        }\n    }\n    function resetData() public {\n        //Set the data, also useful for clearing the data.\n        require(msg.sender == master);\n        require(!lock);\n        delete data;\n    }\n    function setMotd(string newMotd) public {\n        //For communicating with the common butters.\n        require(msg.sender == master);\n        motd = newMotd;\n    }\n    function getData() public returns (uint256[]) {\n        //Get the data, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data;\n    }\n    function getSize() public returns (uint) {\n        //Get the size, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data.length;\n    }\n    function getMotd() public returns (string) {\n        //Get the message for the common butter.\n        return motd;\n    }\n    function getVersion() public returns (uint) {\n        //Get the contract version\n        return version;\n    }\n    function getCredit() public returns (string) {\n        //Who gets credit for the contract.\n        return credit;\n    }\n    function lockFile() public {\n        //Prevent further changes\n        assert(msg.sender == master);\n        lock = true;\n    }\n    function withdraw() public {\n        //Withdraw any donations.\n        assert(msg.sender == master);\n        master.transfer(this.balance);\n    }\n}", "debug": "storage_1: 0x8e79cffffffffffffffffffffffffffdf7cfffffe7ffffffffffff9fffffff7c\nstorage_5: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_FileHost_0: 0x478c4e0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `resetData()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "resetData()", "lineno": 2, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2517, "code": "ontract FileHost {\n    uint256 version;\n    uint256[] data; //Byte arrays take up a lot more space than they need to.\n    address master;\n    string motd;\n    string credit;\n    bool lock;\n    \n    function FileHost() public {\n        //Store the master.\n        master = msg.sender;\n        version = 5;\n        motd = \"\";\n        credit = \"to 63e190e32fcae9ffcca380cead85247495cc53ffa32669d2d298ff0b0dbce524 for creating the contract\";\n        lock = false;\n    }\n    function newMaster(address newMaster) public {\n        require(msg.sender == master);\n        master = newMaster;\n    }\n    function addData(uint256[] newData) public {\n        //Append data\n        require(msg.sender == master);\n        require(!lock);\n        for (var i = 0; i < newData.length; i++) {\n            data.push(newData[i]);\n        }\n    }\n    function resetData() public {\n        //Set the data, also useful for clearing the data.\n        require(msg.sender == master);\n        require(!lock);\n        delete data;\n    }\n    function setMotd(string newMotd) public {\n        //For communicating with the common butters.\n        require(msg.sender == master);\n        motd = newMotd;\n    }\n    function getData() public returns (uint256[]) {\n        //Get the data, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data;\n    }\n    function getSize() public returns (uint) {\n        //Get the size, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data.length;\n    }\n    function getMotd() public returns (string) {\n        //Get the message for the common butter.\n        return motd;\n    }\n    function getVersion() public returns (uint) {\n        //Get the contract version\n        return version;\n    }\n    function getCredit() public returns (string) {\n        //Who gets credit for the contract.\n        return credit;\n    }\n    function lockFile() public {\n        //Prevent further changes\n        assert(msg.sender == master);\n        lock = true;\n    }\n    function withdraw() public {\n        //Withdraw any donations.\n        assert(msg.sender == master);\n        master.transfer(this.balance);\n    }\n}", "debug": "calldata_FileHost_4 + calldata_FileHost_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\ncaller: 0x0\ncalldata_FileHost_0: 0x5fe59b9d00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMotd(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "setMotd(string)", "lineno": 2, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2531, "code": "ontract FileHost {\n    uint256 version;\n    uint256[] data; //Byte arrays take up a lot more space than they need to.\n    address master;\n    string motd;\n    string credit;\n    bool lock;\n    \n    function FileHost() public {\n        //Store the master.\n        master = msg.sender;\n        version = 5;\n        motd = \"\";\n        credit = \"to 63e190e32fcae9ffcca380cead85247495cc53ffa32669d2d298ff0b0dbce524 for creating the contract\";\n        lock = false;\n    }\n    function newMaster(address newMaster) public {\n        require(msg.sender == master);\n        master = newMaster;\n    }\n    function addData(uint256[] newData) public {\n        //Append data\n        require(msg.sender == master);\n        require(!lock);\n        for (var i = 0; i < newData.length; i++) {\n            data.push(newData[i]);\n        }\n    }\n    function resetData() public {\n        //Set the data, also useful for clearing the data.\n        require(msg.sender == master);\n        require(!lock);\n        delete data;\n    }\n    function setMotd(string newMotd) public {\n        //For communicating with the common butters.\n        require(msg.sender == master);\n        motd = newMotd;\n    }\n    function getData() public returns (uint256[]) {\n        //Get the data, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data;\n    }\n    function getSize() public returns (uint) {\n        //Get the size, shouldn't need to be ran on the network as the data is stored locally on the blockchain.\n        return data.length;\n    }\n    function getMotd() public returns (string) {\n        //Get the message for the common butter.\n        return motd;\n    }\n    function getVersion() public returns (uint) {\n        //Get the contract version\n        return version;\n    }\n    function getCredit() public returns (string) {\n        //Who gets credit for the contract.\n        return credit;\n    }\n    function lockFile() public {\n        //Prevent further changes\n        assert(msg.sender == master);\n        lock = true;\n    }\n    function withdraw() public {\n        //Withdraw any donations.\n        assert(msg.sender == master);\n        master.transfer(this.balance);\n    }\n}", "debug": "calldata_FileHost_4 + calldata_FileHost_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_FileHost_0: 0x5fe59b9d00000000000000000000000000000000000000000000000000000000\ncalldatasize_FileHost: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMotd(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0xb00b5f9a21b79901d687d6d952319af767a116ca.sol", "function": "setMotd(string)", "lineno": 2, "title": "Integer Overflow ", "type": "Warning"}], "success": true}