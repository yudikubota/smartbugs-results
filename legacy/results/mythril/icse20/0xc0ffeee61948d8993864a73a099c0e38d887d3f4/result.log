{"error": null, "issues": [{"address": 947, "code": "       uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transacti", "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigTokenWallet_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "getTokenList()", "lineno": 518, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1226, "code": " address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address ", "debug": "calldata_MultiSigTokenWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigTokenWallet_0: 0x342b7e7100000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setTokenList(address[])", "lineno": 180, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1328, "code": "gth, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @par", "debug": "calldata_MultiSigTokenWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigTokenWallet_0: 0x36756a2300000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `constructor(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "constructor(address[],uint256)", "lineno": 110, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1440, "code": " \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @par", "debug": "calldata_MultiSigTokenWallet_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigTokenWallet_0: 0x4f38393400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMyTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setMyTokenList(address[])", "lineno": 172, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4677, "code": "++) {\n            if (confirmations[transa", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "withdrawToken(address,address,uint256)", "lineno": 409, "title": "Message call to external contract", "type": "Warning"}, {"address": 4766, "code": "c owners;\n    address[]", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigTokenWallet_4: 0x0\nstorage_0: 0x0\ncalldata_MultiSigTokenWallet_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "_function_0x025e7c27", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 5061, "code": " -= 1;\n        if", "debug": "storage_0: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigTokenWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigTokenWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "removeOwner(address)", "lineno": 230, "title": "Integer Underflow", "type": "Warning"}, {"address": 5113, "code": "rs.length", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigTokenWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigTokenWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\nstorage_0: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "removeOwner(address)", "lineno": 232, "title": "Exception state", "type": "Informational"}, {"address": 5953, "code": "nfirmations[t", "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigTokenWallet_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "getTokenList()", "lineno": 521, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5955, "code": "nfirmations[t", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigTokenWallet_0: 0x273cbaa000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getTokenList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "getTokenList()", "lineno": 521, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6752, "code": " tokens;\n    mapping (u", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultiSigTokenWallet_4: 0x0\nstorage_1: 0x0\ncalldata_MultiSigTokenWallet_0: 0x4f64b2be00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "_function_0x4f64b2be", "lineno": 17, "title": "Exception state", "type": "Informational"}, {"address": 7083, "code": "once == _nonce) {\n            _deposited(_from, ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "deposit(address,uint256,address,bytes)", "lineno": 148, "title": "Message call to external contract", "type": "Warning"}, {"address": 7149, "code": "oken, _data);\n", "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_7083: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigTokenWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigTokenWallet_0: 0x5143a9fe00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigTokenWallet_4 + calldata_MultiSigTokenWallet_32 + 68)): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "deposit(address,uint256,address,bytes)", "lineno": 149, "title": "Exception state", "type": "Informational"}, {"address": 7670, "code": "nction setMyTokenList(address[] _", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "watch(address)", "lineno": 166, "title": "Message call to external contract", "type": "Warning"}, {"address": 14148, "code": "   func", "debug": "storage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigTokenWallet_4 + calldata_MultiSigTokenWallet_32 + 68)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_7083: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigTokenWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigTokenWallet_0: 0x5143a9fe00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `deposit(address,uint256,address,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "deposit(address,uint256,address,bytes)", "lineno": 463, "title": "Integer Overflow ", "type": "Warning"}, {"address": 14152, "code": "   func", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "deposit(address,uint256,address,bytes)", "lineno": 463, "title": "State change after external call", "type": "Warning"}, {"address": 15062, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "storage_0: 0xe000000000000000000000000000000000000000020000000000000000000000\ncalldata_MultiSigTokenWallet_4: 0x0\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigTokenWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigTokenWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "removeOwner(address)", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15064, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "storage_0: 0xdf7000006c00000000fc10000400000000000000000000000000000000000000\ncalldata_MultiSigTokenWallet_4: 0x0\nstorage_18569430475105882587588266137607568536673111973893317399460219858819262702947: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigTokenWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigTokenWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "removeOwner(address)", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15098, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_MultiSigTokenWallet_0: 0x4f38393400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMyTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setMyTokenList(address[])", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15109, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "calldata_MultiSigTokenWallet_4 + calldata_MultiSigTokenWallet_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_MultiSigTokenWallet_0: 0x4f38393400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMyTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setMyTokenList(address[])", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15111, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "calldata_MultiSigTokenWallet_4 + calldata_MultiSigTokenWallet_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_MultiSigTokenWallet_0: 0x4f38393400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMyTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setMyTokenList(address[])", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}, {"address": 15194, "code": "iSigTokenWallet {\n\n    address[] public owners;\n    address[] public tokens;\n    mapping (uint => Transaction) public transactions;\n    mapping (uint => mapping (address => bool)) public confirmations;\n    uint public transactionCount;\n    \n    mapping (address => uint) public tokenBalances;\n    mapping (address => bool) public isOwner;\n    mapping (address => address[]) public userList;\n    uint public required;\n    uint public nonce;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        bool executed;\n    }\n\n    uint constant public MAX_OWNER_COUNT = 50;\n\n    event Confirmation(address indexed _sender, uint indexed _transactionId);\n    event Revocation(address indexed _sender, uint indexed _transactionId);\n    event Submission(uint indexed _transactionId);\n    event Execution(uint indexed _transactionId);\n    event ExecutionFailure(uint indexed _transactionId);\n    event Deposit(address indexed _sender, uint _value);\n    event TokenDeposit(address _token, address indexed _sender, uint _value);\n    event OwnerAddition(address indexed _owner);\n    event OwnerRemoval(address indexed _owner);\n    event RequirementChange(uint _required);\n    \n    modifier onlyWallet() {\n        require (msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require (!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require (isOwner[owner]);\n        _;\n    }\n\n    modifier transactionExists(uint transactionId) {\n        require (transactions[transactionId].destination != 0);\n        _;\n    }\n\n    modifier confirmed(uint transactionId, address owner) {\n        require (confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(uint transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(uint transactionId) {\n        require (!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address _address) {\n        require (_address != 0);\n        _;\n    }\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require (ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0);\n        _;\n    }\n\n    /// @dev Fallback function allows to deposit ether.\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /**\n    * Public functions\n    * \n    **/\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function constructor(address[] _owners, uint _required)\n        public\n        validRequirement(_owners.length, _required)\n    {\n        require(owners.length == 0 && required == 0);\n        for (uint i = 0; i < _owners.length; i++) {\n            require(!isOwner[_owners[i]] && _owners[i] != 0);\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function depositToken(address _token, bytes _data) \n        public \n    {\n        address sender = msg.sender;\n        uint amount = ERC20(_token).allowance(sender, this);\n        deposit(sender, amount, _token, _data);\n    }\n        \n    /**\n    * @notice deposit a ERC20 token. The amount of deposit is the allowance set to this contract.\n    * @param _token the token contract address\n    * @param _data might be used by child implementations\n    **/ \n    function deposit(address _from, uint256 _amount, address _token, bytes _data) \n        public \n    {\n        if (_from == address(this))\n            return;\n        uint _nonce = nonce;\n        bool result = ERC20(_token).transferFrom(_from, this, _amount);\n        assert(result);\n        //ERC23 not executed _deposited tokenFallback by\n        if (nonce == _nonce) {\n            _deposited(_from, _amount, _token, _data);\n        }\n    }\n    /**\n    * @notice watches for balance in a token contract\n    * @param _tokenAddr the token contract address\n    **/   \n    function watch(address _tokenAddr) \n        ownerExists(msg.sender) \n    {\n        uint oldBal = tokenBalances[_tokenAddr];\n        uint newBal = ERC20(_tokenAddr).balanceOf(this);\n        if (newBal > oldBal) {\n            _deposited(0x0, newBal-oldBal, _tokenAddr, new bytes(0));\n        }\n    }\n\n    function setMyTokenList(address[] _tokenList) \n        public\n    {\n        userList[msg.sender] = _tokenList;\n    }\n\n    function setTokenList(address[] _tokenList) \n        onlyWallet\n    {\n        tokens = _tokenList;\n    }\n    \n    /**\n    * @notice ERC23 Token fallback\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    **/    \n    function tokenFallback(address _from, uint _amount, bytes _data) \n        public \n    {\n        _deposited(_from, _amount, msg.sender, _data);\n    }\n        \n    /** \n    * @notice Called MiniMeToken approvesAndCall to this contract, calls deposit.\n    * @param _from address incoming token\n    * @param _amount incoming amount\n    * @param _token the token contract address\n    * @param _data (might be used by child classes)\n    */ \n    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data) {\n        deposit(_from, _amount, _token, _data);\n    }\n    \n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner)\n        notNull(owner)\n        validRequirement(owners.length + 1, required)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        uint _len = owners.length - 1;\n        for (uint i = 0; i < _len; i++) {\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner to be replaced.\n    /// @param owner Address of new owner.\n    function replaceOwner(address owner, address newOwner)\n        public\n        onlyWallet\n        ownerExists(owner)\n        ownerDoesNotExist(newOwner)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (owners[i] == owner) {\n                owners[i] = newOwner;\n                break;\n            }\n        }\n        isOwner[owner] = false;\n        isOwner[newOwner] = true;\n        OwnerRemoval(owner);\n        OwnerAddition(newOwner);\n    }\n\n    /**\n    * @dev gives full ownership of this wallet to `_dest` removing older owners from wallet\n    * @param _dest the address of new controller\n    **/    \n    function releaseWallet(address _dest)\n        public\n        notNull(_dest)\n        ownerDoesNotExist(_dest)\n        onlyWallet\n    {\n        address[] memory _owners = owners;\n        uint numOwners = _owners.length;\n        addOwner(_dest);\n        for (uint i = 0; i < numOwners; i++) {\n            removeOwner(_owners[i]);\n        }\n    }\n\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n    /// @param _required Number of required confirmations.\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required)\n    {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function submitTransaction(address destination, uint value, bytes data)\n        public\n        returns (uint transactionId)\n    {\n        transactionId = addTransaction(destination, value, data);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId Transaction ID.\n    function confirmTransaction(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        transactionExists(transactionId)\n        notConfirmed(transactionId, msg.sender)\n    {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId Transaction ID.\n    function revokeConfirmation(uint transactionId)\n        public\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId)\n    {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId Transaction ID.\n    function executeTransaction(uint transactionId)\n        public\n        notExecuted(transactionId)\n    {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txx = transactions[transactionId];\n            txx.executed = true;\n            if (txx.destination.call.value(txx.value)(txx.data)) {\n                Execution(transactionId);\n            } else {\n                ExecutionFailure(transactionId);\n                txx.executed = false;\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances and ether to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawEverything(address _dest) \n        public\n        notNull(_dest)\n        onlyWallet\n    {\n        withdrawAllTokens(_dest);\n        _dest.transfer(this.balance);\n    }\n\n    /**\n    * @dev withdraw all recognized tokens balances to `_dest`\n    * @param _dest the address of receiver\n    **/    \n    function withdrawAllTokens(address _dest) \n        public \n        notNull(_dest)\n        onlyWallet\n    {\n        address[] memory _tokenList;\n        if (userList[_dest].length > 0) {\n            _tokenList = userList[_dest];\n        } else {\n            _tokenList = tokens;\n        }\n        uint len = _tokenList.length;\n        for (uint i = 0;i < len; i++) {\n            address _tokenAddr = _tokenList[i];\n            uint _amount = tokenBalances[_tokenAddr];\n            if (_amount > 0) {\n                delete tokenBalances[_tokenAddr];\n                ERC20(_tokenAddr).transfer(_dest, _amount);\n            }\n        }\n    }\n\n    /**\n    * @dev withdraw `_tokenAddr` `_amount` to `_dest`\n    * @param _tokenAddr the address of the token\n    * @param _dest the address of receiver\n    * @param _amount the number of tokens to send\n    **/\n    function withdrawToken(address _tokenAddr, address _dest, uint _amount)\n        public\n        notNull(_dest)\n        onlyWallet \n    {\n        require(_amount > 0);\n        uint _balance = tokenBalances[_tokenAddr];\n        require(_amount <= _balance);\n        tokenBalances[_tokenAddr] = _balance - _amount;\n        bool result = ERC20(_tokenAddr).transfer(_dest, _amount);\n        assert(result);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Confirmation status.\n    function isConfirmed(uint transactionId)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n\n    /*\n    * Internal functions\n    */\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @return Returns transaction ID.\n    function addTransaction(address destination, uint value, bytes data)\n        internal\n        notNull(destination)\n        returns (uint transactionId)\n    {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: destination,\n            value: value,\n            data: data,\n            executed: false\n        });\n        transactionCount += 1;\n        Submission(transactionId);\n    }\n    \n    /**\n    * @dev register the deposit\n    **/\n    function _deposited(address _from,  uint _amount, address _tokenAddr, bytes) \n        internal \n    {\n        TokenDeposit(_tokenAddr,_from,_amount);\n        nonce++;\n        if (tokenBalances[_tokenAddr] == 0) {\n            tokens.push(_tokenAddr);  \n            tokenBalances[_tokenAddr] = ERC20(_tokenAddr).balanceOf(this);\n        } else {\n            tokenBalances[_tokenAddr] += _amount;\n        }\n    }\n    \n    /*\n    * Web3 call functions\n    */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Number of confirmations.\n    function getConfirmationCount(uint transactionId)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n        }\n    }\n\n    /// @dev Returns total number of transactions after filters are applied.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Total number of transactions after filters are applied.\n    function getTransactionCount(bool pending, bool executed)\n        public\n        constant\n        returns (uint count)\n    {\n        for (uint i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed)\n                count += 1;\n        }\n    }\n\n    /// @dev Returns list of owners.\n    /// @return List of owner addresses.\n    function getOwners()\n        public\n        constant\n        returns (address[])\n    {\n        return owners;\n    }\n\n    /// @dev Returns list of tokens.\n    /// @return List of token addresses.\n    function getTokenList()\n        public\n        constant\n        returns (address[])\n    {\n        return tokens;\n    }\n\n    /// @dev Returns array with owner addresses, which confirmed transaction.\n    /// @param transactionId Transaction ID.\n    /// @return Returns array of owner addresses.\n    function getConfirmations(uint transactionId)\n        public\n        constant\n        returns (address[] _confirmations)\n    {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < owners.length; i++) {\n            if (confirmations[transactionId][owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                count += 1;\n            }\n        }\n        _confirmations = new address[](count);\n        for (i = 0; i < count; i++) {\n            _confirmations[i] = confirmationsTemp[i];\n        }\n    }\n\n    /// @dev Returns list of transaction IDs in defined range.\n    /// @param from Index start position of transaction array.\n    /// @param to Index end position of transaction array.\n    /// @param pending Include pending transactions.\n    /// @param executed Include executed transactions.\n    /// @return Returns array of transaction IDs.\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\n        public\n        constant\n        returns (uint[] _transactionIds)\n    {\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\n        uint count = 0;\n        uint i;\n        for (i = 0; i < transactionCount; i++) {\n            if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n                transactionIdsTemp[count] = i;\n                count += 1;\n            }\n        }\n        _transactionIds = new uint[](to - from);\n        for (i = from; i < to; i++) {\n            _transactionIds[i - from] = transactionIdsTemp[i];\n        }\n    }\n\n}", "debug": "calldata_MultiSigTokenWallet_4 + calldata_MultiSigTokenWallet_4: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultiSigTokenWallet_0: 0x4f38393400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigTokenWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMyTokenList(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xc0ffeee61948d8993864a73a099c0e38d887d3f4.sol", "function": "setMyTokenList(address[])", "lineno": 14, "title": "Integer Overflow ", "type": "Warning"}], "success": true}