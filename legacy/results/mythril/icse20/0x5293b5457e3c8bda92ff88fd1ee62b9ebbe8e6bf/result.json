{
  "contract": "0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf",
  "tool": "mythril",
  "start": 1563771742.3223584,
  "end": 1563772219.2538285,
  "duration": 476.93147015571594,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 246,
        "code": " amount, string email) public { \n        require(msg.sender.balance >= amount, \"You don't have enough ETH.\");\n        totalAmount += amount - investors[msg.sender].amount;\n        investors[msg.sender].amount = amount; \n        investors[msg.sender].email = email;\n\n        emit InvestorStatement(msg.sender, amount, email);\n    }\n\n    function declare(uint ",
        "debug": "calldata_ETHStatement_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 22,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 953,
        "code": "sender].amount;\n        investors[msg",
        "debug": "calldata_ETHStatement_4: 0x10000000000000000000000000\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x10000000000000000000000001\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x10000000000000000000000000\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `declare(uint256,string)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 24,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 961,
        "code": " investors[msg.sender].amount;\n        investors[msg",
        "debug": "calldata_ETHStatement_4: 0x4003200860780c00000000000000000000000000000000100000000000000000\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe1d2ad07dbfcc000000000000000000000000000000000000000000000000001\nstorage_1: 0xc9989ad99dfd0c000000000000000000000000000000000c0000300000000001\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x4003200860780c00000000000000000000000000000000100000000000000000\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1842,
        "code": "ntract ETHStatement {\n\n    /* --- EVENTS --- */\n\n    event InvestorStatement(address indexed investor, uint amount, string email);\n\n    /* --- FIELDS --- */\n\n    struct Investor {\n        uint amount;\n        string email;\n    }\n\n    mapping (address => Investor) public investors;\n    uint public totalAmount;\n\n\n    /* --- PUBLIC / EXTERNAL METHODS --- */\n\n    function declare(uint amount, string email) public { \n        require(msg.sender.balance >= amount, \"You don't have enough ETH.\");\n        totalAmount += amount - investors[msg.sender].amount;\n        investors[msg.sender].amount = amount; \n        investors[msg.sender].email = email;\n\n        emit InvestorStatement(msg.sender, amount, email);\n    }\n\n    function declare(uint amount) public { \n        return declare(amount, \"\");\n    }\n\n    function getInvestorStatement(address investor) view public returns(uint, string) {\n        return (investors[investor].amount, investors[investor].email);\n    }\n\n}",
        "debug": "keccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\ncalldata_ETHStatement_4: 0x0\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1871,
        "code": "ntract ETHStatement {\n\n    /* --- EVENTS --- */\n\n    event InvestorStatement(address indexed investor, uint amount, string email);\n\n    /* --- FIELDS --- */\n\n    struct Investor {\n        uint amount;\n        string email;\n    }\n\n    mapping (address => Investor) public investors;\n    uint public totalAmount;\n\n\n    /* --- PUBLIC / EXTERNAL METHODS --- */\n\n    function declare(uint amount, string email) public { \n        require(msg.sender.balance >= amount, \"You don't have enough ETH.\");\n        totalAmount += amount - investors[msg.sender].amount;\n        investors[msg.sender].amount = amount; \n        investors[msg.sender].email = email;\n\n        emit InvestorStatement(msg.sender, amount, email);\n    }\n\n    function declare(uint amount) public { \n        return declare(amount, \"\");\n    }\n\n    function getInvestorStatement(address investor) view public returns(uint, string) {\n        return (investors[investor].amount, investors[investor].email);\n    }\n\n}",
        "debug": "calldata_ETHStatement_4 + calldata_ETHStatement_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\ncalldata_ETHStatement_4: 0x0\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1885,
        "code": "ntract ETHStatement {\n\n    /* --- EVENTS --- */\n\n    event InvestorStatement(address indexed investor, uint amount, string email);\n\n    /* --- FIELDS --- */\n\n    struct Investor {\n        uint amount;\n        string email;\n    }\n\n    mapping (address => Investor) public investors;\n    uint public totalAmount;\n\n\n    /* --- PUBLIC / EXTERNAL METHODS --- */\n\n    function declare(uint amount, string email) public { \n        require(msg.sender.balance >= amount, \"You don't have enough ETH.\");\n        totalAmount += amount - investors[msg.sender].amount;\n        investors[msg.sender].amount = amount; \n        investors[msg.sender].email = email;\n\n        emit InvestorStatement(msg.sender, amount, email);\n    }\n\n    function declare(uint amount) public { \n        return declare(amount, \"\");\n    }\n\n    function getInvestorStatement(address investor) view public returns(uint, string) {\n        return (investors[investor].amount, investors[investor].email);\n    }\n\n}",
        "debug": "calldata_ETHStatement_4 + calldata_ETHStatement_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\ncalldata_ETHStatement_4: 0x0\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1907,
        "code": "ntract ETHStatement {\n\n    /* --- EVENTS --- */\n\n    event InvestorStatement(address indexed investor, uint amount, string email);\n\n    /* --- FIELDS --- */\n\n    struct Investor {\n        uint amount;\n        string email;\n    }\n\n    mapping (address => Investor) public investors;\n    uint public totalAmount;\n\n\n    /* --- PUBLIC / EXTERNAL METHODS --- */\n\n    function declare(uint amount, string email) public { \n        require(msg.sender.balance >= amount, \"You don't have enough ETH.\");\n        totalAmount += amount - investors[msg.sender].amount;\n        investors[msg.sender].amount = amount; \n        investors[msg.sender].email = email;\n\n        emit InvestorStatement(msg.sender, amount, email);\n    }\n\n    function declare(uint amount) public { \n        return declare(amount, \"\");\n    }\n\n    function getInvestorStatement(address investor) view public returns(uint, string) {\n        return (investors[investor].amount, investors[investor].email);\n    }\n\n}",
        "debug": "calldata_ETHStatement_4 + calldata_ETHStatement_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\ncalldata_ETHStatement_4: 0x0\ncalldata_ETHStatement_0: 0x5941498f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ETHStatement: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `declare(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/45/0x5293b5457e3c8bda92ff88fd1ee62b9ebbe8e6bf.sol",
        "function": "declare(uint256,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}