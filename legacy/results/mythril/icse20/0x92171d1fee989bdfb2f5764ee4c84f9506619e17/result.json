{
  "contract": "0x92171d1fee989bdfb2f5764ee4c84f9506619e17",
  "tool": "mythril",
  "start": 1563551303.5407505,
  "end": 1563551600.089111,
  "duration": 296.5483605861664,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 280,
        "code": "er[i]] = allowed[msg.sender][_spender[i]].add(_addedValue[i]);\n            Approval(msg.sender, _spender[i], allowed[msg.sender][_spender[i]]);\n        }\n        return true;\n    }\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     *\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and ",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x35f057d00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x035f057d`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "_function_0x035f057d",
        "lineno": 239,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 943,
        "code": "sg.sender][_spender[i]] = _value[i];\n            Approval(msg.sender, _spender[i], _value[i]);\n        }\n        return true;\n    }\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which ",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x50e8587e00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multiApprove(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "multiApprove(address[],uint256[])",
        "lineno": 205,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1468,
        "code": "i]];\n            if (_subtractedValue[i] > oldValue) {\n                allowed[msg.sender][_spender[i]] = 0;\n            } else {\n                allowed[msg.sender][_spender[i]] = oldValue.sub(_subtractedValue[i]);\n            }\n            Approval(msg.sender, _spender[i], allowed[msg.sender][_spender[i]]);\n        }\n        return true;\n    }\n\n    /* Approve and then comunicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n    returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x72a7b8ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x72a7b8ba`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "_function_0x72a7b8ba",
        "lineno": 268,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2035,
        "code": "\n            return true;\n        }\n    }\n\n}",
        "debug": "calldata_tokenRecipient_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 284,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2400,
        "code": "rove should be",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_0: 0x35f057d00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\nmem_128 +\n32 +\n32*calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "_function_0x035f057d",
        "lineno": 247,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4445,
        "code": "  * @para",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_0: 0x50e8587e00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\nmem_128 +\n32 +\n32*calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "multiApprove(address[],uint256[])",
        "lineno": 212,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5779,
        "code": "der, _spend",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_0: 0x72a7b8ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\nmem_128 +\n32 +\n32*calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "_function_0x72a7b8ba",
        "lineno": 274,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8305,
        "code": "urn c",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tokenRecipient_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8318,
        "code": "**\n * @title E",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x1\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/11/0x92171d1fee989bdfb2f5764ee4c84f9506619e17.sol",
        "function": "increaseApproval(address,uint256)",
        "lineno": 48,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}