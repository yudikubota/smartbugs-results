{
  "contract": "0x75e698e455f32abcb9d21f68947968348a926dd4",
  "tool": "mythril",
  "start": 1563647164.4627302,
  "end": 1563647381.25468,
  "duration": 216.79194974899292,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 214,
        "code": "h(string memory _artHash) onlyOwner public {            // Set Owner Hash\n        artOwnerHash = _artHash;\n    }    \n \n    event setTxOnB",
        "debug": "calldata_artContract_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_artContract_0: 0x2d8ce4b00000000000000000000000000000000000000000000000000000000\ncalldatasize_artContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setArtOwnerHash(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x75e698e455f32abcb9d21f68947968348a926dd4.sol",
        "function": "setArtOwnerHash(string)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 368,
        "code": "Hash(string memory _infoHash) onlyOwner public {            // Set Art infomation Hash\n        artInfoHash = _infoHash;\n    }    \n    \n    functio",
        "debug": "calldata_artContract_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_artContract_0: 0x1e7a5d5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_artContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setArtInfoHash(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x75e698e455f32abcb9d21f68947968348a926dd4.sol",
        "function": "setArtInfoHash(string)",
        "lineno": 20,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2547,
        "code": "ntract artContract{\n\n    address private contractOwner;              // Contract owner address\n    string public artInfoHash;              // Current Art Information Hash\n    string public artOwnerHash;                 // Current Art Owners Hash\n    bytes32 public summaryTxHash;               // Current Transaction Hash\n    bytes32 public recentInputTxHash;           // Previous Transaction Hash\n\n    constructor() public{                                                          // creator address\n        contractOwner = msg.sender;\n    }\n        \n    modifier onlyOwner(){                                                          // Only contract creator could change state for security\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    function setArtInfoHash(string memory _infoHash) onlyOwner public {            // Set Art infomation Hash\n        artInfoHash = _infoHash;\n    }    \n    \n    function setArtOwnerHash(string memory _artHash) onlyOwner public {            // Set Owner Hash\n        artOwnerHash = _artHash;\n    }    \n \n    event setTxOnBlockchain(bytes32);\n \n    function setTxHash(bytes32 _txHash) onlyOwner public {                         // Set transaction Hash value\n        recentInputTxHash = _txHash;                                               // Store input transaction Hash value\n        summaryTxHash = makeHash(_txHash);                                         // Store summary hash(recent + previous hash)\n        emit setTxOnBlockchain(summaryTxHash);\n    }\n \n    function getArtInfoHash() public view returns (string memory) {               // Get art information hash value\n        return artInfoHash;\n    }\n\n    function getArtOwnerHash() public view returns (string memory) {               // Get art owner hash value\n        return artOwnerHash;\n    }\n\n    function getRecentInputTxHash() public view returns (bytes32) {                     // Get current Transaction Hash\n        return recentInputTxHash;\n    }\n\n    function getSummaryTxHash() public view returns (bytes32) {                     // Get current Transaction Hash\n        return summaryTxHash;\n    }\n\n    function makeHash(bytes32 _input) private view returns(bytes32) {         // hash function, summary with previousTxHash and inTxHash\n        return keccak256(abi.encodePacked(_input, summaryTxHash));\n    }\n}",
        "debug": "calldata_artContract_4 + calldata_artContract_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_artContract_0: 0x1e7a5d5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_artContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setArtInfoHash(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x75e698e455f32abcb9d21f68947968348a926dd4.sol",
        "function": "setArtInfoHash(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2561,
        "code": "ntract artContract{\n\n    address private contractOwner;              // Contract owner address\n    string public artInfoHash;              // Current Art Information Hash\n    string public artOwnerHash;                 // Current Art Owners Hash\n    bytes32 public summaryTxHash;               // Current Transaction Hash\n    bytes32 public recentInputTxHash;           // Previous Transaction Hash\n\n    constructor() public{                                                          // creator address\n        contractOwner = msg.sender;\n    }\n        \n    modifier onlyOwner(){                                                          // Only contract creator could change state for security\n        require(msg.sender == contractOwner);\n        _;\n    }\n\n    function setArtInfoHash(string memory _infoHash) onlyOwner public {            // Set Art infomation Hash\n        artInfoHash = _infoHash;\n    }    \n    \n    function setArtOwnerHash(string memory _artHash) onlyOwner public {            // Set Owner Hash\n        artOwnerHash = _artHash;\n    }    \n \n    event setTxOnBlockchain(bytes32);\n \n    function setTxHash(bytes32 _txHash) onlyOwner public {                         // Set transaction Hash value\n        recentInputTxHash = _txHash;                                               // Store input transaction Hash value\n        summaryTxHash = makeHash(_txHash);                                         // Store summary hash(recent + previous hash)\n        emit setTxOnBlockchain(summaryTxHash);\n    }\n \n    function getArtInfoHash() public view returns (string memory) {               // Get art information hash value\n        return artInfoHash;\n    }\n\n    function getArtOwnerHash() public view returns (string memory) {               // Get art owner hash value\n        return artOwnerHash;\n    }\n\n    function getRecentInputTxHash() public view returns (bytes32) {                     // Get current Transaction Hash\n        return recentInputTxHash;\n    }\n\n    function getSummaryTxHash() public view returns (bytes32) {                     // Get current Transaction Hash\n        return summaryTxHash;\n    }\n\n    function makeHash(bytes32 _input) private view returns(bytes32) {         // hash function, summary with previousTxHash and inTxHash\n        return keccak256(abi.encodePacked(_input, summaryTxHash));\n    }\n}",
        "debug": "calldata_artContract_4 + calldata_artContract_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_artContract_0: 0x1e7a5d5f00000000000000000000000000000000000000000000000000000000\ncalldatasize_artContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setArtInfoHash(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x75e698e455f32abcb9d21f68947968348a926dd4.sol",
        "function": "setArtInfoHash(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}