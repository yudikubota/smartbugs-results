{
  "contract": "0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f",
  "tool": "mythril",
  "start": 1563638746.2934806,
  "end": 1563639246.0602608,
  "duration": 499.76678013801575,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 230,
        "code": "KeyHash, bytes keyID) public onlyByOwner {\n\n\t\tif (!isValidHashType(hashType)) require(false);\n\t\tif (pubKeyHash.length == 0) require(false);\n\t\tif (keyID.length == 0) require(false);\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tif (!userHashes.initialized) {\n\t\t\tuserHashes.initialized = true;\n\t\t\tUserAdded(userID);\n\t\t}\n\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\t\tif (hashInfo.blockNumber == 0)\n\t\t{\n\t\t\thashInfo.pubKeyHash = pubKeyHash;\n\t\t\thashInfo.keyID = keyID;\n\t\t\thashInfo.blockNumber = block.number;\n\t\t\tPubKeyHashAdded(userID, hashType);\n\t\t}\n\t}\n\n\tfunction getPubKeyHash(bytes20 userID, uint8 hashType) public view returns (bytes",
        "debug": "calldata_PubKeyTrust_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PubKeyTrust_0: 0x3f288f0500000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPubKeyHash(bytes20,uint8,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addPubKeyHash(bytes20,uint8,bytes,bytes)",
        "lineno": 65,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1111,
        "code": "g description) public onlyByOwner {\n\n\t\t// Strings must be non-empty\n\t\tif (hashType == 0) require(false);\n\t\tif (bytes(description).length == 0) require(false);\n\t\tif (bytes(description).length > 64) require(false);\n\n\t\tstring storage prvDescription = hashTypes[hashType];\n\t\tif (bytes(prvDescription).length == 0)\n\t\t{\n\t\t\tallHashTypes.push(hashType);\n\t\t\thashTypes[hashType] = description;\n\t\t\tPubKeyHashTypeAdded(hashType);\n\t\t}\n\t}\n\n\tfunction isValidHashType(uint8 hashType) public view ",
        "debug": "calldata_PubKeyTrust_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PubKeyTrust_0: 0xcdfc20aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addHashType(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addHashType(uint8,string)",
        "lineno": 43,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2889,
        "code": ";\n\n// https://www.",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_4: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 4: 0x40\ncalldata_PubKeyTrust_4: 0xff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0xcdfc20aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addHashType(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addHashType(uint8,string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2901,
        "code": "= description;\n\t\t\tPubKeyHas",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_4: 0x0\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 4: 0x40\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PubKeyTrust_4: 0xff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0xcdfc20aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `addHashType(uint8,string)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addHashType(uint8,string)",
        "lineno": 54,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2938,
        "code": "= description;\n\t\t\tPubKeyHas",
        "debug": "256_EXP_Concat(0, Extract(4, 0, storage_1)): 0xe9482001705726a4c554a7f499acc4a548c92e70c63008514420841340907295\nstorage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_4: 0x0\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 4: 0x10\ncalldata_PubKeyTrust_4: 0xff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0xcdfc20aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addHashType(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addHashType(uint8,string)",
        "lineno": 54,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2946,
        "code": "= description;\n\t\t\tPubKeyHas",
        "debug": "256_EXP_Concat(0, Extract(4, 0, storage_1)): 0x1000000000469745d1745d1a1c9dedb45a215c438734405da8c40bd2e8178405\nstorage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_4: 0x0\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 4: 0x4\ncalldata_PubKeyTrust_4: 0xb0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0xcdfc20aa00000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addHashType(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addHashType(uint8,string)",
        "lineno": 54,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3066,
        "code": " public allHashTypes;\n\tmapp",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_PubKeyTrust_4: 0x0\nstorage_1: 0x0\ncalldata_PubKeyTrust_0: 0xdc3496d700000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "_function_0xdc3496d7",
        "lineno": 8,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3205,
        "code": "ract PubKeyTrust {\n\taddress owner;\n\n\tuint8[] public allHashTypes;\n\tmapping(uint8 => string) public hashTypes;\n\n\tstruct HashInfo {\n\t\tbytes pubKeyHash;\n\t\tbytes keyID;\n\t\tuint blockNumber;\n\t}\n\tstruct UserHashes {\n\t\tmapping(uint8 => HashInfo) hashes;\n\t\tbool initialized;\n\t}\n\tmapping(bytes20 => UserHashes) hashes;\n\n\tevent UserAdded(bytes20 indexed userID);\n\tevent PubKeyHashAdded(bytes20 indexed userID, uint8 indexed hashType);\n\tevent PubKeyHashTypeAdded(uint8 indexed hashType);\n\n\tfunction PubKeyTrust() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyByOwner()\n\t{\n\t\tif (msg.sender != owner)\n\t\t\trequire(false);\n\t\telse\n\t\t\t_;\n\t}\n\n\tfunction numHashTypes() public view returns (uint) {\n\n\t\treturn allHashTypes.length;\n\t}\n\n\tfunction addHashType(uint8 hashType, string description) public onlyByOwner {\n\n\t\t// Strings must be non-empty\n\t\tif (hashType == 0) require(false);\n\t\tif (bytes(description).length == 0) require(false);\n\t\tif (bytes(description).length > 64) require(false);\n\n\t\tstring storage prvDescription = hashTypes[hashType];\n\t\tif (bytes(prvDescription).length == 0)\n\t\t{\n\t\t\tallHashTypes.push(hashType);\n\t\t\thashTypes[hashType] = description;\n\t\t\tPubKeyHashTypeAdded(hashType);\n\t\t}\n\t}\n\n\tfunction isValidHashType(uint8 hashType) public view returns (bool) {\n\n\t\tstring storage description = hashTypes[hashType];\n\t\treturn (bytes(description).length > 0);\n\t}\n\n\tfunction addPubKeyHash(bytes20 userID, uint8 hashType, bytes pubKeyHash, bytes keyID) public onlyByOwner {\n\n\t\tif (!isValidHashType(hashType)) require(false);\n\t\tif (pubKeyHash.length == 0) require(false);\n\t\tif (keyID.length == 0) require(false);\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tif (!userHashes.initialized) {\n\t\t\tuserHashes.initialized = true;\n\t\t\tUserAdded(userID);\n\t\t}\n\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\t\tif (hashInfo.blockNumber == 0)\n\t\t{\n\t\t\thashInfo.pubKeyHash = pubKeyHash;\n\t\t\thashInfo.keyID = keyID;\n\t\t\thashInfo.blockNumber = block.number;\n\t\t\tPubKeyHashAdded(userID, hashType);\n\t\t}\n\t}\n\n\tfunction getPubKeyHash(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.pubKeyHash;\n\t}\n\n\tfunction getKeyID(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.keyID;\n\t}\n\n\tfunction getBlockNumber(bytes20 userID, uint8 hashType) public view returns (uint) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.blockNumber;\n\t}\n}",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0x4a4079b395ea4bd52f4c79ddcbd3fbbe717ecf3e99486dd9284b194cef0f8108\nstorage_0 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xd61d5773d900658fb51f8e7be17b16e6c52fd7ca96f5f37bffffffffffffffc3\nkeccac_0_+_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xfe9ec55ce877fce5acc77f9dc795804283d73a1cb21b0011f060060100fae3fc\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\ncalldata_PubKeyTrust_4: 0x0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0x3f288f0500000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\nstorage_2 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPubKeyHash(bytes20,uint8,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addPubKeyHash(bytes20,uint8,bytes,bytes)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3234,
        "code": "ract PubKeyTrust {\n\taddress owner;\n\n\tuint8[] public allHashTypes;\n\tmapping(uint8 => string) public hashTypes;\n\n\tstruct HashInfo {\n\t\tbytes pubKeyHash;\n\t\tbytes keyID;\n\t\tuint blockNumber;\n\t}\n\tstruct UserHashes {\n\t\tmapping(uint8 => HashInfo) hashes;\n\t\tbool initialized;\n\t}\n\tmapping(bytes20 => UserHashes) hashes;\n\n\tevent UserAdded(bytes20 indexed userID);\n\tevent PubKeyHashAdded(bytes20 indexed userID, uint8 indexed hashType);\n\tevent PubKeyHashTypeAdded(uint8 indexed hashType);\n\n\tfunction PubKeyTrust() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyByOwner()\n\t{\n\t\tif (msg.sender != owner)\n\t\t\trequire(false);\n\t\telse\n\t\t\t_;\n\t}\n\n\tfunction numHashTypes() public view returns (uint) {\n\n\t\treturn allHashTypes.length;\n\t}\n\n\tfunction addHashType(uint8 hashType, string description) public onlyByOwner {\n\n\t\t// Strings must be non-empty\n\t\tif (hashType == 0) require(false);\n\t\tif (bytes(description).length == 0) require(false);\n\t\tif (bytes(description).length > 64) require(false);\n\n\t\tstring storage prvDescription = hashTypes[hashType];\n\t\tif (bytes(prvDescription).length == 0)\n\t\t{\n\t\t\tallHashTypes.push(hashType);\n\t\t\thashTypes[hashType] = description;\n\t\t\tPubKeyHashTypeAdded(hashType);\n\t\t}\n\t}\n\n\tfunction isValidHashType(uint8 hashType) public view returns (bool) {\n\n\t\tstring storage description = hashTypes[hashType];\n\t\treturn (bytes(description).length > 0);\n\t}\n\n\tfunction addPubKeyHash(bytes20 userID, uint8 hashType, bytes pubKeyHash, bytes keyID) public onlyByOwner {\n\n\t\tif (!isValidHashType(hashType)) require(false);\n\t\tif (pubKeyHash.length == 0) require(false);\n\t\tif (keyID.length == 0) require(false);\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tif (!userHashes.initialized) {\n\t\t\tuserHashes.initialized = true;\n\t\t\tUserAdded(userID);\n\t\t}\n\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\t\tif (hashInfo.blockNumber == 0)\n\t\t{\n\t\t\thashInfo.pubKeyHash = pubKeyHash;\n\t\t\thashInfo.keyID = keyID;\n\t\t\thashInfo.blockNumber = block.number;\n\t\t\tPubKeyHashAdded(userID, hashType);\n\t\t}\n\t}\n\n\tfunction getPubKeyHash(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.pubKeyHash;\n\t}\n\n\tfunction getKeyID(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.keyID;\n\t}\n\n\tfunction getBlockNumber(bytes20 userID, uint8 hashType) public view returns (uint) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.blockNumber;\n\t}\n}",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xacb57657edcecab529eb96a57d77eca6aafd95d5cfb7debbbd461df819d60001\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36: 0x1\nstorage_0 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xad4fab063fffff3ffffffffffffff420000000e00000020000000000000000c9\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\nkeccac_0_+_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xff9005bdf8000001ffffffffffffffff800000038000001800000000fffffffc\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\ncalldata_PubKeyTrust_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0x3f288f0500000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\nstorage_2 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPubKeyHash(bytes20,uint8,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addPubKeyHash(bytes20,uint8,bytes,bytes)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3248,
        "code": "ract PubKeyTrust {\n\taddress owner;\n\n\tuint8[] public allHashTypes;\n\tmapping(uint8 => string) public hashTypes;\n\n\tstruct HashInfo {\n\t\tbytes pubKeyHash;\n\t\tbytes keyID;\n\t\tuint blockNumber;\n\t}\n\tstruct UserHashes {\n\t\tmapping(uint8 => HashInfo) hashes;\n\t\tbool initialized;\n\t}\n\tmapping(bytes20 => UserHashes) hashes;\n\n\tevent UserAdded(bytes20 indexed userID);\n\tevent PubKeyHashAdded(bytes20 indexed userID, uint8 indexed hashType);\n\tevent PubKeyHashTypeAdded(uint8 indexed hashType);\n\n\tfunction PubKeyTrust() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyByOwner()\n\t{\n\t\tif (msg.sender != owner)\n\t\t\trequire(false);\n\t\telse\n\t\t\t_;\n\t}\n\n\tfunction numHashTypes() public view returns (uint) {\n\n\t\treturn allHashTypes.length;\n\t}\n\n\tfunction addHashType(uint8 hashType, string description) public onlyByOwner {\n\n\t\t// Strings must be non-empty\n\t\tif (hashType == 0) require(false);\n\t\tif (bytes(description).length == 0) require(false);\n\t\tif (bytes(description).length > 64) require(false);\n\n\t\tstring storage prvDescription = hashTypes[hashType];\n\t\tif (bytes(prvDescription).length == 0)\n\t\t{\n\t\t\tallHashTypes.push(hashType);\n\t\t\thashTypes[hashType] = description;\n\t\t\tPubKeyHashTypeAdded(hashType);\n\t\t}\n\t}\n\n\tfunction isValidHashType(uint8 hashType) public view returns (bool) {\n\n\t\tstring storage description = hashTypes[hashType];\n\t\treturn (bytes(description).length > 0);\n\t}\n\n\tfunction addPubKeyHash(bytes20 userID, uint8 hashType, bytes pubKeyHash, bytes keyID) public onlyByOwner {\n\n\t\tif (!isValidHashType(hashType)) require(false);\n\t\tif (pubKeyHash.length == 0) require(false);\n\t\tif (keyID.length == 0) require(false);\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tif (!userHashes.initialized) {\n\t\t\tuserHashes.initialized = true;\n\t\t\tUserAdded(userID);\n\t\t}\n\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\t\tif (hashInfo.blockNumber == 0)\n\t\t{\n\t\t\thashInfo.pubKeyHash = pubKeyHash;\n\t\t\thashInfo.keyID = keyID;\n\t\t\thashInfo.blockNumber = block.number;\n\t\t\tPubKeyHashAdded(userID, hashType);\n\t\t}\n\t}\n\n\tfunction getPubKeyHash(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.pubKeyHash;\n\t}\n\n\tfunction getKeyID(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.keyID;\n\t}\n\n\tfunction getBlockNumber(bytes20 userID, uint8 hashType) public view returns (uint) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.blockNumber;\n\t}\n}",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xffffffffff9ef6f7ace63bdefff7bbfbdef7ffffffffffffffffffffffffff01\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\ncalldata_PubKeyTrust_4: 0x0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0x3f288f0500000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\nstorage_2 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPubKeyHash(bytes20,uint8,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addPubKeyHash(bytes20,uint8,bytes,bytes)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3270,
        "code": "ract PubKeyTrust {\n\taddress owner;\n\n\tuint8[] public allHashTypes;\n\tmapping(uint8 => string) public hashTypes;\n\n\tstruct HashInfo {\n\t\tbytes pubKeyHash;\n\t\tbytes keyID;\n\t\tuint blockNumber;\n\t}\n\tstruct UserHashes {\n\t\tmapping(uint8 => HashInfo) hashes;\n\t\tbool initialized;\n\t}\n\tmapping(bytes20 => UserHashes) hashes;\n\n\tevent UserAdded(bytes20 indexed userID);\n\tevent PubKeyHashAdded(bytes20 indexed userID, uint8 indexed hashType);\n\tevent PubKeyHashTypeAdded(uint8 indexed hashType);\n\n\tfunction PubKeyTrust() public {\n\t\towner = msg.sender;\n\t}\n\n\tmodifier onlyByOwner()\n\t{\n\t\tif (msg.sender != owner)\n\t\t\trequire(false);\n\t\telse\n\t\t\t_;\n\t}\n\n\tfunction numHashTypes() public view returns (uint) {\n\n\t\treturn allHashTypes.length;\n\t}\n\n\tfunction addHashType(uint8 hashType, string description) public onlyByOwner {\n\n\t\t// Strings must be non-empty\n\t\tif (hashType == 0) require(false);\n\t\tif (bytes(description).length == 0) require(false);\n\t\tif (bytes(description).length > 64) require(false);\n\n\t\tstring storage prvDescription = hashTypes[hashType];\n\t\tif (bytes(prvDescription).length == 0)\n\t\t{\n\t\t\tallHashTypes.push(hashType);\n\t\t\thashTypes[hashType] = description;\n\t\t\tPubKeyHashTypeAdded(hashType);\n\t\t}\n\t}\n\n\tfunction isValidHashType(uint8 hashType) public view returns (bool) {\n\n\t\tstring storage description = hashTypes[hashType];\n\t\treturn (bytes(description).length > 0);\n\t}\n\n\tfunction addPubKeyHash(bytes20 userID, uint8 hashType, bytes pubKeyHash, bytes keyID) public onlyByOwner {\n\n\t\tif (!isValidHashType(hashType)) require(false);\n\t\tif (pubKeyHash.length == 0) require(false);\n\t\tif (keyID.length == 0) require(false);\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tif (!userHashes.initialized) {\n\t\t\tuserHashes.initialized = true;\n\t\t\tUserAdded(userID);\n\t\t}\n\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\t\tif (hashInfo.blockNumber == 0)\n\t\t{\n\t\t\thashInfo.pubKeyHash = pubKeyHash;\n\t\t\thashInfo.keyID = keyID;\n\t\t\thashInfo.blockNumber = block.number;\n\t\t\tPubKeyHashAdded(userID, hashType);\n\t\t}\n\t}\n\n\tfunction getPubKeyHash(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.pubKeyHash;\n\t}\n\n\tfunction getKeyID(bytes20 userID, uint8 hashType) public view returns (bytes) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.keyID;\n\t}\n\n\tfunction getBlockNumber(bytes20 userID, uint8 hashType) public view returns (uint) {\n\n\t\tUserHashes storage userHashes = hashes[userID];\n\t\tHashInfo storage hashInfo = userHashes.hashes[hashType];\n\n\t\treturn hashInfo.blockNumber;\n\t}\n}",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\ncalldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\nkeccac_0_+_keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n79228162514264337593543950335_&\ncalldata_PubKeyTrust_4: 0x0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_PubKeyTrust_4 + calldata_PubKeyTrust_32 + 36)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PubKeyTrust_0: 0x3f288f0500000000000000000000000000000000000000000000000000000000\ncalldatasize_PubKeyTrust: 0x4\nstorage_2 + keccac_255_&_255_&_255_&_calldata_PubKeyTrust_32_+_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addPubKeyHash(bytes20,uint8,bytes,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/28/0xaf29dfd8c92bd280cab6b7cb9107921f4c2fab1f.sol",
        "function": "addPubKeyHash(bytes20,uint8,bytes,bytes)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}