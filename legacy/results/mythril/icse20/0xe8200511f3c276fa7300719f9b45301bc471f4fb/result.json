{
  "contract": "0xe8200511f3c276fa7300719f9b45301bc471f4fb",
  "tool": "mythril",
  "start": 1563507176.23583,
  "end": 1563507213.5885012,
  "duration": 37.35267114639282,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1118,
        "code": "culation(totalNxcBou",
        "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xa609937200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `payDiff(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "payDiff(address,uint256)",
        "lineno": 72,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1139,
        "code": "y = bonusCalculation(totalNxcBoug",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xa609937200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "payDiff(address,uint256)",
        "lineno": 72,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2179,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "withdrawNexiums(address)",
        "lineno": 89,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2179,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2371\n",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "withdrawNexiums(address)",
        "lineno": 89,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2371,
        "code": "ow;\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "withdrawNexiums(address)",
        "lineno": 87,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2451,
        "code": "ublic paidAddress;\n    mappi",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0x0\nstorage_3: 0x0\ncalldata_Token_0: 0xff6417c100000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "_function_0xff6417c1",
        "lineno": 12,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2542,
        "code": "i].step;\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x4000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xa609937200000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe8200511f3c276fa7300719f9b45301bc471f4fb.sol",
        "function": "payDiff(address,uint256)",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}