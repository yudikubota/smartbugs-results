{
  "contract": "0x161c011006beac7f79bb02aa3c92b5b4581bf58f",
  "tool": "mythril",
  "start": 1563513666.8585656,
  "end": 1563513797.9723878,
  "duration": 131.11382222175598,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2469,
        "code": " public blacklist;\n\n    uint256 ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_selfdropToken_4: 0x0\nstorage_2: 0x0\ncalldata_selfdropToken_0: 0xcaebf87200000000000000000000000000000000000000000000000000000000\ncalldatasize_selfdropToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "_function_0xcaebf872",
        "lineno": 67,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3134,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "withdrawSDTfromcontract()",
        "lineno": 182,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3134,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3326\n",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "withdrawSDTfromcontract()",
        "lineno": 182,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3134,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawSDTfromcontract(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "withdrawSDTfromcontract()",
        "lineno": 182,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3326,
        "code": "    }\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "withdrawSDTfromcontract()",
        "lineno": 181,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3326,
        "code": "    }\n}",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawSDTfromcontract(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "withdrawSDTfromcontract()",
        "lineno": 181,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3646,
        "code": "alRemaining == 0) {\n            distributi",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "getTokens()",
        "lineno": 128,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3646,
        "code": "alRemaining == 0) {\n            distributi",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "fallback",
        "lineno": 128,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3797,
        "code": "b);\n ",
        "debug": "callvalue: 0x8153b4b2fa946bb55ac81d3aa36a12000086e008f249a18089067efa9fce440b\nstorage_6: 0x0\ncalldata_selfdropToken_0: 0xaa6ca80800000000000000000000000000000000000000000000000000000000\ncalldatasize_selfdropToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `getTokens()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "getTokens()",
        "lineno": 39,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3831,
        "code": "rn c;\n  }\n\n  function div(ui",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_selfdropToken_4: 0x293800000320000000000000000000000000000000000000000000190000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_selfdropToken_0: 0x5fffad5a00000000000000000000000000000000000000000000000000000000\ncalldatasize_selfdropToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x161c011006beac7f79bb02aa3c92b5b4581bf58f.sol",
        "function": "setselfdropvalue(uint256)",
        "lineno": 40,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}