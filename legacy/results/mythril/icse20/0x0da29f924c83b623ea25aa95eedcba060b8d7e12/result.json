{
  "contract": "0x0da29f924c83b623ea25aa95eedcba060b8d7e12",
  "tool": "mythril",
  "start": 1563230334.1813083,
  "end": 1563230422.5874653,
  "duration": 88.40615701675415,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1403,
        "code": "eached.\n    * @return Whether the ca",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "fallback",
        "lineno": 240,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2047,
        "code": "    require(!isFinali",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 273,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2047,
        "code": "    require(!isFinali",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2401\nCall at address: 2239\n",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 273,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2239,
        "code": "ternal onlyOwner {\n        require(!isFinaliz",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 272,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2239,
        "code": "ternal onlyOwner {\n        require(!isFinaliz",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2401\n",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 272,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2401,
        "code": "  require(block.timestamp > startTime)",
        "debug": "",
        "description": "In the function `finalize()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 274,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 2494,
        "code": "is).balance;\n     ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "finalize()",
        "lineno": 275,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3130,
        "debug": "",
        "description": "In the function `forwardFunds()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "forwardFunds()",
        "lineno": 279,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 3309,
        "code": "tracts ",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0xffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffff\nstorage_3: 0xffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffff\nstorage_2: 0xffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VeloxCrowdsale_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_VeloxCrowdsale_0: 0xec8ac4d800000000000000000000000000000000000000000000000000000000\ncalldatasize_VeloxCrowdsale: 0x4\nstorage_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0da29f924c83b623ea25aa95eedcba060b8d7e12.sol",
        "function": "buyTokens(address)",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}