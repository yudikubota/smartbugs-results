{
  "contract": "0x48135cc7bc530cca79dbb29540b3937af39aa3bb",
  "tool": "mythril",
  "start": 1563588068.0986927,
  "end": 1563588090.5339983,
  "duration": 22.43530559539795,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1003,
        "code": "vestingContract);\n    }\n\n    function setVe",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xfe00\ncalldata_VestingHasDistributorHandlerHasContracts_0: 0x5e06744600000000000000000000000000000000000000000000000000000000\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x5e067446",
        "lineno": 239,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1960,
        "code": "ntrol of the owned _contract to a newO",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "fallback",
        "lineno": 77,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2567,
        "code": "argetToken = _targetToken;\n   ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "getTokenBalance(address)",
        "lineno": 200,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3810,
        "code": "t set');\n        if (_ve",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestingHasDistributorHandlerHasContracts_4: 0xfe\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VestingHasDistributorHandlerHasContracts_0: 0x899f4e1900000000000000000000000000000000000000000000000000000000\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x899f4e19",
        "lineno": 250,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4112,
        "code": "dress public owner;\n\n  event OwnershipRenounced",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "transferOwnedOwnership(address,address)",
        "lineno": 86,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4435,
        "code": "ic returns (bool) {\n        require(toke",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestingHasDistributorHandlerHasContracts_4: 0xfe\nstorage_3: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VestingHasDistributorHandlerHasContracts_0: 0xbf8cf62d00000000000000000000000000000000000000000000000000000000\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0xbf8cf62d",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4732,
        "code": "x0);\n        } else {\n          return ITokenDistri",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xfffffffffffffffbffffffffffffffffffffffff00\nstorage_2: 0x100\nretval_5539: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x3\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "fallback",
        "lineno": 154,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4828,
        "code": "  function () public {\n   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "fallback",
        "lineno": 161,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4828,
        "code": "  function () public {\n   ",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "fallback",
        "lineno": 161,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 4975,
        "code": "ity^0.4.24;\n\ncontract IVestingContract {\n  funct",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "fallback",
        "lineno": 166,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5327,
        "code": "urn true;\n        }\n        return fa",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xffffffeffffffffffffffffffffffffffffff7ff00\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_VestingHasDistributorHandlerHasContracts_0: 0x86d1a69f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "release()",
        "lineno": 255,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5539,
        "code": "sion != vestingContractVersion.v1) {\n            revert(",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x4798a5d5",
        "lineno": 261,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5539,
        "code": "sion != vestingContractVersion.v1) {\n            revert(",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0x3c627c9b. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x3c627c9b",
        "lineno": 261,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5606,
        "code": "ion, address _vestingContract, addres",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VestingHasDistributorHandlerHasContracts_4: 0xfe\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VestingHasDistributorHandlerHasContracts_0: 0x5227349400000000000000000000000000000000000000000000000000000000\ncalldatasize_VestingHasDistributorHandlerHasContracts: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x52273494",
        "lineno": 268,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5865,
        "code": "tingContract, _targetToken);\n    }\n\n    func",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x52273494",
        "lineno": 269,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5865,
        "code": "tingContract, _targetToken);\n    }\n\n    func",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0x3c627c9b. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0x48135cc7bc530cca79dbb29540b3937af39aa3bb.sol",
        "function": "_function_0x3c627c9b",
        "lineno": 269,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}