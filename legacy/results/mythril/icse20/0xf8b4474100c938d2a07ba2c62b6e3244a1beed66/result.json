{
  "contract": "0xf8b4474100c938d2a07ba2c62b6e3244a1beed66",
  "tool": "mythril",
  "start": 1563569683.7540855,
  "end": 1563569710.5734406,
  "duration": 26.819355010986328,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1621,
        "code": "nt {\n    uint256 value;\n    uint256 claimed;\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenVesting_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_TokenVesting_4: 0x0\ncalldata_TokenVesting_0: 0x2c71e60a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8b4474100c938d2a07ba2c62b6e3244a1beed66.sol",
        "function": "_function_0x2c71e60a",
        "lineno": 113,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4902,
        "code": "sing SafeMath for uint256;\n\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/15/0xf8b4474100c938d2a07ba2c62b6e3244a1beed66.sol",
        "function": "claimTokensFor(address)",
        "lineno": 314,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4974,
        "code": "(address => uint256) balances;",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/15/0xf8b4474100c938d2a07ba2c62b6e3244a1beed66.sol",
        "function": "claimTokens()",
        "lineno": 316,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5074,
        "code": " a - b;\n  }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x51e0963100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/15/0xf8b4474100c938d2a07ba2c62b6e3244a1beed66.sol",
        "function": "totalVestedTokens()",
        "lineno": 28,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}