{
  "contract": "0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6",
  "tool": "mythril",
  "start": 1563598854.268506,
  "end": 1563599184.8122232,
  "duration": 330.5437171459198,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 271,
        "code": "blic view returns (bytes32[]) {\n        return availableIds;\n    }\n\n    //  Adds or updates an ad",
        "debug": "storage_2: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_AddressProxy_0: 0x5b80f49700000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAvailableIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "getAvailableIds()",
        "lineno": 30,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 615,
        "code": "ress newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view ",
        "debug": "calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 627,
        "code": "ress newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view ",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 636,
        "code": "ress newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view ",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 642,
        "code": "ress newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view ",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 37,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1057,
        "code": "  //  Adds or updat",
        "debug": "storage_2: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_AddressProxy_0: 0x5b80f49700000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAvailableIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "getAvailableIds()",
        "lineno": 34,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1059,
        "code": "  //  Adds or updat",
        "debug": "storage_2: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_AddressProxy_0: 0x5b80f49700000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAvailableIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "getAvailableIds()",
        "lineno": 34,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1454,
        "code": "ss[contAdd",
        "debug": "timestamp: 0x200024448e041042b936adc03422252c124014908019505c2524442448d00412\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 42,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1617,
        "code": ";\n\n\ncontract Addre",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x0\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1717,
        "code": "\n\n            emit AddressCreated(newContractAdd",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_AddressProxy_4 + calldata_AddressProxy_4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x0\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 50,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2301,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffea0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2305,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe80\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2355,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe60\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2361,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe40\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2367,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe20\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2398,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2455,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "storage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0x4e7e277aaf17d01005bfdffffffffffffffffffffffffffffffffffffffffc01\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0xd95febf943eb2bf6e69dffffffffffffffffffffffffffffffffffffffffffe4\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2479,
        "code": "Add.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes",
        "debug": "storage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xfff7fffffffffffffffffffbffffffffbff7fffffeffffdffffffffffffffd01\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 58,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2537,
        "code": "c availableIds;\n\n    modifier",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_AddressProxy_4: 0x0\nstorage_2: 0x0\ncalldata_AddressProxy_0: 0xd528d11800000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "_function_0xd528d118",
        "lineno": 16,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2721,
        "code": "tract AddressProxy {\n\n    struct ContractAddress {\n        bytes32 id;\n        string name;\n        address at;\n        uint createdTime;\n        uint updatedTime;\n    }\n\n    address public owner;\n    mapping(bytes32 => ContractAddress) private contractsAddress;\n    bytes32[] public availableIds;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event AddressCreated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n    event AddressUpdated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n\n    function AddressProxy() public {\n        owner = msg.sender;\n    }\n\n    function getAvailableIds() public view returns (bytes32[]) {\n        return availableIds;\n    }\n\n    //  Adds or updates an address\n    //  @params {string} name - the name of the contract Address\n    //  @params {address} newAddress\n    function addAddress(string name, address newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view returns(string) {\n        return contractsAddress[id].name;\n    }\n\n    function getContractAddressById(bytes32 id) public view returns(address) {\n        return contractsAddress[id].at;\n    }\n\n    function getContractCreatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].createdTime;\n    }\n\n    function getContractUpdatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].updatedTime;\n    }\n\n    //  @params {string} source\n    //  @return {bytes32}\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}",
        "debug": "calldata_AddressProxy_4 + calldata_AddressProxy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2825,
        "code": "tract AddressProxy {\n\n    struct ContractAddress {\n        bytes32 id;\n        string name;\n        address at;\n        uint createdTime;\n        uint updatedTime;\n    }\n\n    address public owner;\n    mapping(bytes32 => ContractAddress) private contractsAddress;\n    bytes32[] public availableIds;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event AddressCreated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n    event AddressUpdated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n\n    function AddressProxy() public {\n        owner = msg.sender;\n    }\n\n    function getAvailableIds() public view returns (bytes32[]) {\n        return availableIds;\n    }\n\n    //  Adds or updates an address\n    //  @params {string} name - the name of the contract Address\n    //  @params {address} newAddress\n    function addAddress(string name, address newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view returns(string) {\n        return contractsAddress[id].name;\n    }\n\n    function getContractAddressById(bytes32 id) public view returns(address) {\n        return contractsAddress[id].at;\n    }\n\n    function getContractCreatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].createdTime;\n    }\n\n    function getContractUpdatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].updatedTime;\n    }\n\n    //  @params {string} source\n    //  @return {bytes32}\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}",
        "debug": "keccac_1_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_AddressProxy_cpy: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2854,
        "code": "tract AddressProxy {\n\n    struct ContractAddress {\n        bytes32 id;\n        string name;\n        address at;\n        uint createdTime;\n        uint updatedTime;\n    }\n\n    address public owner;\n    mapping(bytes32 => ContractAddress) private contractsAddress;\n    bytes32[] public availableIds;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event AddressCreated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n    event AddressUpdated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n\n    function AddressProxy() public {\n        owner = msg.sender;\n    }\n\n    function getAvailableIds() public view returns (bytes32[]) {\n        return availableIds;\n    }\n\n    //  Adds or updates an address\n    //  @params {string} name - the name of the contract Address\n    //  @params {address} newAddress\n    function addAddress(string name, address newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view returns(string) {\n        return contractsAddress[id].name;\n    }\n\n    function getContractAddressById(bytes32 id) public view returns(address) {\n        return contractsAddress[id].at;\n    }\n\n    function getContractCreatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].createdTime;\n    }\n\n    function getContractUpdatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].updatedTime;\n    }\n\n    //  @params {string} source\n    //  @return {bytes32}\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}",
        "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_AddressProxy_4 + calldata_AddressProxy_4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x0\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2868,
        "code": "tract AddressProxy {\n\n    struct ContractAddress {\n        bytes32 id;\n        string name;\n        address at;\n        uint createdTime;\n        uint updatedTime;\n    }\n\n    address public owner;\n    mapping(bytes32 => ContractAddress) private contractsAddress;\n    bytes32[] public availableIds;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    event AddressCreated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n    event AddressUpdated(bytes32 id, string name, address at, uint createdTime, uint updatedTime);\n\n    function AddressProxy() public {\n        owner = msg.sender;\n    }\n\n    function getAvailableIds() public view returns (bytes32[]) {\n        return availableIds;\n    }\n\n    //  Adds or updates an address\n    //  @params {string} name - the name of the contract Address\n    //  @params {address} newAddress\n    function addAddress(string name, address newAddress) public onlyOwner {\n        bytes32 contAddId = stringToBytes32(name);\n\n        uint nowInMilliseconds = now * 1000;\n\n        if (contractsAddress[contAddId].id == 0x0) {\n            ContractAddress memory newContractAddress;\n            newContractAddress.id = contAddId;\n            newContractAddress.name = name;\n            newContractAddress.at = newAddress;\n            newContractAddress.createdTime = nowInMilliseconds;\n            newContractAddress.updatedTime = nowInMilliseconds;\n            availableIds.push(contAddId);\n            contractsAddress[contAddId] = newContractAddress;\n\n            emit AddressCreated(newContractAddress.id, newContractAddress.name, newContractAddress.at, newContractAddress.createdTime, newContractAddress.updatedTime);\n        } else {\n            ContractAddress storage contAdd = contractsAddress[contAddId];\n            contAdd.at = newAddress;\n            contAdd.updatedTime = nowInMilliseconds;\n\n            emit AddressUpdated(contAdd.id, contAdd.name, contAdd.at, contAdd.createdTime, contAdd.updatedTime);\n        }\n    }\n\n    function getContractNameById(bytes32 id) public view returns(string) {\n        return contractsAddress[id].name;\n    }\n\n    function getContractAddressById(bytes32 id) public view returns(address) {\n        return contractsAddress[id].at;\n    }\n\n    function getContractCreatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].createdTime;\n    }\n\n    function getContractUpdatedTimeById(bytes32 id) public view returns(uint) {\n        return contractsAddress[id].updatedTime;\n    }\n\n    //  @params {string} source\n    //  @return {bytes32}\n    function stringToBytes32(string source) internal pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_AddressProxy_4 + calldata_AddressProxy_4)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_AddressProxy_4 + calldata_AddressProxy_4)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_AddressProxy_0: 0xceb35b0f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AddressProxy: 0x4\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x0\ncalldata_AddressProxy_4 + calldata_AddressProxy_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xb217cf9ba6c0a87de419e95435f722a6fb9b92e6.sol",
        "function": "addAddress(string,address)",
        "lineno": 4,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}