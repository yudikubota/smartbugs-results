{"error": null, "issues": [{"address": 633, "code": ">\n * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n * in the contract, it will allow the owner to reclaim this ether.\n * @notice Ether can still be sent to this contra", "debug": "calldata_XenBounty_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XenBounty_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_XenBounty: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multiTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 398, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2620, "code": "her can sti", "debug": "The exception is triggered under the following conditions:\n\ncalldata_XenBounty_4 + calldata_XenBounty_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_XenBounty_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_XenBounty: 0x4\nmem_128 + 32 + 32*calldata_XenBounty_4 + calldata_XenBounty_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 401, "title": "Exception state", "type": "Informational"}, {"address": 2632, "code": "her can still be sent ", "debug": "mem_0 + 192 + 32*calldata_XenBounty_4 + calldata_XenBounty_4: 0xf77124b52a24e057d8a070024000e4e0e29fe1280e6ec1bac4ce6c09cd081036\nmem_128 + 32 + 32*calldata_XenBounty_4 + calldata_XenBounty_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XenBounty_4 + calldata_XenBounty_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_XenBounty_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_XenBounty: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multiTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 401, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3821, "code": "PLY;\n    balances[msg.sender] = INITI", "debug": "", "description": "A possible transaction order independence vulnerability exists in function reclaimEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "reclaimEther()", "lineno": 446, "title": "Transaction order dependence", "type": "Warning"}, {"address": 7868, "code": "modul", "debug": "calldata_XenBounty_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XenBounty_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_5: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XenBounty_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_XenBounty_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x1\nstorage_6: 0x0\ncalldata_XenBounty_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_XenBounty: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "transferFrom(address,address,uint256)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7881, "code": "zeppelin-solid", "debug": "The exception is triggered under the following conditions:\n\ncalldata_XenBounty_32 + 4: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XenBounty_4: 0xbd5dfeabad0efffffffffeffffffffffd599ffefbfe6f24271e80e64322c0700\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6218000d800000000000000000000000039800002005500633e06f771baff7fc\ncalldata_XenBounty_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_XenBounty_0: 0x4698ad0500000000000000000000000000000000000000000000000000000000\ncalldatasize_XenBounty: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x9aa060f5ce3c994772adf9deb8418a0d47a90d26.sol", "function": "transferWhileLocked(address,uint256)", "lineno": 69, "title": "Exception state", "type": "Informational"}], "success": true}