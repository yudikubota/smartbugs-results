{"error": null, "issues": [{"address": 487, "code": "te.Running;\n    uint public totalSupply =", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "_function_0x0c3f6acf", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 847, "code": "    }\n\n    function getTotalSupply()constant returns(uint)\n    {\n        return totalSupply;\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0x378aa70100000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "getCurrentState()", "lineno": 175, "title": "Exception state", "type": "Informational"}, {"address": 1844, "code": "   event LogBuy(addre", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldatasize_PresaleToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "fallback", "lineno": 53, "title": "Exception state", "type": "Informational"}, {"address": 1888, "code": "LIMIT) throw;\n\n  ", "debug": "callvalue: 0x88097400000cb06b607c4a23425a8fcd09169071c3fdd89c2a5f422a839963fa\nstorage_0: 0x100\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "fallback", "lineno": 74, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1993, "code": "gBuy(_buyer, newTokens);\n   ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf1bd55101c68c506febfffacfdf500d84395a01f01c2647609400a164286c5b0\ncallvalue: 0x222a8bfb3809358c0c9b7ff7f9040b9d5360d7214acfed9ec80b35949a74232\nstorage_0: 0x100\nstorage_1: 0x9ffc4a11dc4f0533fe968a30dddd4145260ee2bc0611ebf1075aa0dff7cf6860\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "fallback", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2009, "code": " @dev Returns number of ", "debug": "callvalue: 0x8064d319fe6c712c9e1f46965d89d81e4b8f9849298cff4f00652fcd6a96541\nstorage_0: 0x100\nstorage_1: 0x54525b424b631b4000a18a12b3ab1e4008e89844922047e82034c0\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "fallback", "lineno": 82, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2433, "code": "return tokenManager;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_PresaleToken_0: 0x4defd1bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/7/0xd29ba5f94fb91eefc5e3aaf69f181febed73930e.sol", "function": "setCrowdsaleManager(address)", "lineno": 159, "title": "Exception state", "type": "Informational"}], "success": true}