{"error": null, "issues": [{"address": 624, "code": "  lock(_lockAddress[i], _lockAmount[i]);\n    }\n  }\n\n  function multiUnlock(address[] _lockAddress) public onlyOwner {\n    for (uint i=0; i < _lockAddress.length; i++){\n      unlock(_lockAddress[i]);\n    }\n  }\n\n  function checkLock(address _address) p", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x11817ccd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multiLock(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x8a54811e8dc922a4278c5f6fa144fce19bee9167.sol", "function": "multiLock(address[],uint256[])", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 923, "code": "t256 amountSum = 0;\n    for (i=0; i < _amount.length; i++){\n      require(_amount[i] > 0);\n      require(_to[i] != address(0));\n      amountSum = amountSum.add(_amount[i]);\n    }\n    require(locked[msg.sender].add(amountSum) <= balances[msg.sender]);  //Added\n    require(amountSum <= balances[msg.sender]);\n    for (i=0; i < _to.length; i++){\n      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n      emit Transfer(msg.sender, _to[i], _amount[i]);\n    }\n    balances[msg.sender] = balances[msg.sender].sub(amountSum);\n    return true;\n  }\n  \n  function lock(address _lockAddress, uint256 _lockAmount) public onlyOwner returns (bool) {  // stop _lockAddress's transfer\n    require(_lockAddress != address(0));\n    re", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x1e89d54500000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `multiTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x8a54811e8dc922a4278c5f6fa144fce19bee9167.sol", "function": "multiTransfer(address[],uint256[])", "lineno": 164, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10117, "code": "urn c;\n  }\n}\n\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Token_32 + 36: 0x2000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x2000000000000000000000000000\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x8a54811e8dc922a4278c5f6fa144fce19bee9167.sol", "function": "transferFrom(address,address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 10140, "code": "   return a - ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x8a54811e8dc922a4278c5f6fa144fce19bee9167.sol", "function": "burn(uint256)", "lineno": 19, "title": "Exception state", "type": "Informational"}], "success": true}