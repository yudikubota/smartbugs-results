{
  "contract": "0x19076bd01e86fa3d76334e27d4b8e6789688a42d",
  "tool": "mythril",
  "start": 1563506426.9842207,
  "end": 1563506573.2132285,
  "duration": 146.22900772094727,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 392,
        "code": "te();\n        else if(stage == Stages.T",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\nstorage_0: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenInterface_0: 0x1000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "fallback",
        "lineno": 63,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1081,
        "code": "Stages {\n        Co",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0xc040e6b800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "stage()",
        "lineno": 34,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1199,
        "code": "    _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0xd7bb99ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "contribute()",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1282,
        "code": "value;\n        BidSubmission(msg.sende",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_6: 0x0\ncalldata_TokenInterface_0: 0xd7bb99ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\n",
        "description": "A possible integer overflow exists in the function `contribute()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "contribute()",
        "lineno": 76,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1298,
        "code": "e);\n    }\n\n    function refund(",
        "debug": "storage_2: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_6: 0x0\ncalldata_TokenInterface_0: 0xd7bb99ba00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\n",
        "description": "A possible integer overflow exists in the function `contribute()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "contribute()",
        "lineno": 77,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1431,
        "code": "    _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0x8a4068dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "transfer()",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1595,
        "code": "efund share\n        uint refund = totalBalance ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x200\ncalldata_TokenInterface_0: 0x8a4068dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "transfer()",
        "lineno": 128,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1799,
        "code": "ion / totalContributions;\n        if (re",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "transfer()",
        "lineno": 129,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1799,
        "code": "ion / totalContributions;\n        if (re",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1933\n",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "transfer()",
        "lineno": 129,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1933,
        "debug": "SOLVER OUTPUT:\nstorage_2: 0x4000000000000008140243680002003b4800000a0aba018090494014048\nstorage_6: 0x200\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_4: 0x8095500007e3ff7e9ee0ec077d39e55bb65901807dd8242c20bb8b0615a46417\nreturndatasize: 0x20\nretval_1799: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenInterface_0: 0x8a4068dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "In the function `transfer()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 6. This storage slot can be written to by calling the function `claimProxy()`.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `claimProxy()`.\nThere is a check on storage index 2. This storage slot can be written to by calling the function `refund()`.\nThere is a check on storage index 2. This storage slot can be written to by calling the function `refund()`.\nThere is a check on storage index 4. This storage slot can be written to by calling the function `claimProxy()`.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "transfer()",
        "lineno": 133,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 2001,
        "code": "    _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0x30b66cee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2152,
        "code": "lTokens = gnosisToke",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 113,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2152,
        "code": "lTokens = gnosisToke",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2603\nCall at address: 2390\n",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 113,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2390,
        "code": "ance;\n        stage = Stage",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 114,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2390,
        "code": "ance;\n        stage = Stage",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2603\n",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 114,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2603,
        "code": "   function transfer()\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 118,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2664,
        "code": "imed;\n    }\n\n    function transfer()\n    ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 115,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2694,
        "code": "        atStage(Stages.Toke",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 120,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2730,
        "code": "        returns (uint amount",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "claimProxy()",
        "lineno": 121,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2805,
        "code": "    _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0x590e1ae300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "refund()",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2962,
        "code": ");\n        if (!msg.sender.send(co",
        "debug": "storage_6: 0x0\nstorage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_TokenInterface_0: 0x590e1ae300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `refund()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "refund()",
        "lineno": 87,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3095,
        "code": "     atStage(Stages.Contribut",
        "debug": "SOLVER OUTPUT:\nstorage_6: 0x0\ncalldata_TokenInterface_0: 0x590e1ae300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "In the function `refund()` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 6. This storage slot can be written to by calling the function `claimProxy()`.\nThere is a check on storage index 6. This storage slot can be written to by calling the function `claimProxy()`.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "refund()",
        "lineno": 93,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 3267,
        "code": "    _;\n    }\n\n ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x8000\ncalldata_TokenInterface_0: 0xed9a3ac100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "bidProxy()",
        "lineno": 43,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3418,
        "code": " contract\n        st",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/7/0x19076bd01e86fa3d76334e27d4b8e6789688a42d.sol",
        "function": "bidProxy()",
        "lineno": 99,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}