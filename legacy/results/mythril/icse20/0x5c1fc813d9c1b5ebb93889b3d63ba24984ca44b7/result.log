{"error": null, "issues": [{"address": 1418, "code": "dule\n\n// Copyr", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "stop()", "lineno": 158, "title": "State change after external call", "type": "Warning"}, {"address": 1920, "code": " cur.has);", "debug": "", "description": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `poke()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 245, "title": "Message call to external contract", "type": "Warning"}, {"address": 1920, "code": " cur.has);", "debug": "", "description": "A possible transaction order independence vulnerability exists in function poke(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 245, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2084, "code": " function", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 248, "title": "State change after external call", "type": "Warning"}, {"address": 2129, "code": " function", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 248, "title": "State change after external call", "type": "Warning"}, {"address": 2242, "code": "ernal view returns (bytes32,", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 248, "title": "State change after external call", "type": "Warning"}, {"address": 2274, "code": "ernal view returns (bytes32,", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 248, "title": "State change after external call", "type": "Warning"}, {"address": 2333, "code": "     return (byte", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 249, "title": "State change after external call", "type": "Warning"}, {"address": 4407, "code": "stop/lib/ds-note/src/note.sol\n///", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "void()", "lineno": 74, "title": "Message call to external contract", "type": "Informational"}, {"address": 4407, "code": "stop/lib/ds-note/src/note.sol\n///", "debug": "", "description": "A possible transaction order independence vulnerability exists in function void(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "void()", "lineno": 74, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4512, "code": "    func", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\nreturndatasize: 0x40\nretval_1920: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x0\nstorage_1: 0x0\ncalldata_OSM_0: 0x1817835800000000000000000000000000000000000000000000000000000000\ncalldatasize_OSM: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/3/0x5c1fc813d9c1b5ebb93889b3d63ba24984ca44b7.sol", "function": "poke()", "lineno": 231, "title": "Exception state", "type": "Informational"}], "success": true}