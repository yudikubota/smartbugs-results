{
  "contract": "0x91d7e5895f7a635ba8bdce9e2be544e5e527135f",
  "tool": "mythril",
  "start": 1563564325.3606873,
  "end": 1563564335.8243098,
  "duration": 10.463622570037842,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 195,
        "code": "ning+= amount;\n       ",
        "debug": "storage_2: 0x81c3985123b03afab7734792bf5ad754f7b9b34e890c130421bc1e84f897bb03\ncallvalue: 0xdcd9da79b82bbc21377b4a5c3f7cc67e37a52a60d5aca62c9d7d96ccda3b8bf5\nstorage_6: 0x0\ncalldata_token_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "fallback",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 211,
        "code": "d.transfer(msg.sender, a",
        "debug": "storage_3: 0x81c3985123b03afab7734792bf5ad754f7b9b34e890c130421bc1e84f897bb03\ncallvalue: 0xdcd9da79b82bbc21377b4a5c3f7cc67e37a52a60d5aca62c9d7d96ccda3b8bf5\nstorage_6: 0x0\ncalldata_token_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 296,
        "code": "er(msg.sender, amoun",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncalldata_token_0: 0x1cb3b2100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_5: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "fallback",
        "lineno": 47,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 434,
        "code": "/  price);\n       emit FundTransfer(msg.sender, amount",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `checkGoalReached()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 434,
        "code": "/  price);\n       emit FundTransfer(msg.sender, amount",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1301,
        "code": "crowdsaleClosed = true;\n    }\n    /** \n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ntimestamp: 0x0\nstorage_1: 0x1\nstorage_4: 0x0\ncalldata_token_0: 0x1cb3b2000000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "checkGoalReached()",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1439,
        "code": "* 6  /  price);\n        }\n        crowdsaleClosed = true;\n    }\n    /** \n   ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 6. This storage slot can be written to by calling the function `checkGoalReached()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "checkGoalReached()",
        "lineno": 63,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1439,
        "code": "* 6  /  price);\n        }\n        crowdsaleClosed = true;\n    }\n    /** \n   ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkGoalReached(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "checkGoalReached()",
        "lineno": 63,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1487,
        "code": "\n     *\n     * Checks ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "checkGoalReached()",
        "lineno": 68,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1775,
        "code": "            emit FundTransfer(ben",
        "debug": "",
        "description": "In the function `safeWithdrawal()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "safeWithdrawal()",
        "lineno": 78,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1775,
        "code": "            emit FundTransfer(ben",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function safeWithdrawal(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/16/0x91d7e5895f7a635ba8bdce9e2be544e5e527135f.sol",
        "function": "safeWithdrawal()",
        "lineno": 78,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}