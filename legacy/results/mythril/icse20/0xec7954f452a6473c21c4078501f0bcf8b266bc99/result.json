{
  "contract": "0xec7954f452a6473c21c4078501f0bcf8b266bc99",
  "tool": "mythril",
  "start": 1563464951.7252045,
  "end": 1563464956.476252,
  "duration": 4.751047611236572,
  "analysis": {
    "success": false,
    "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.8;\r\n^--------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:7:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function owned() {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:12:34: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (msg.sender != owner) throw;\r\n                                 ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:34:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function token(\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:48:9: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        throw;     // Prevents accidental sending of ether\r\n        ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:68:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function ProgressiveToken(\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:110:45: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (balanceOf[msg.sender] < _value) throw;                          // Check if the sender has enough balance\r\n                                            ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:111:55: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (balanceOf[_to] + _value < balanceOf[_to]) throw;                // Check for overflows\r\n                                                      ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:113:51: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(currentSupply + reward > totalSupply ) throw;                    //check for totalSupply.\r\n                                                  ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:124:59: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            if(currentSupply + mintedAmount> totalSupply) throw;             // check for total supply.\r\n                                                          ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:141:39: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\r\n                                      ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:143:51: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply\r\n                                                  ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:153:46: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\r\n                                             ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:155:51: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(currentSupply + reward > totalSupply ) throw;   // check for totalSupply.\r\n                                                  ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:162:13: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n            throw;                                         // to do this last to prevent recursion attacks\r\n            ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:175:37: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (n < bytes8(difficulty)) throw;                   // Check if it's under the difficulty\r\n                                    ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:178:46: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if (timeSinceLastProof <  5 seconds) throw;          // Rewards cannot be given too quickly\r\n                                             ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:180:51: Warning: \"throw\" is deprecated in favour of \"revert()\", \"require()\" and \"assert()\".\n        if(currentSupply + reward > totalSupply ) throw;     //Check for totalSupply\r\n                                                  ^---^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:72:9: Warning: This declaration shadows an existing declaration.\n        uint256 initialSupply,\r\n        ^-------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:57:5: The shadowed declaration is here:\n    uint256 internal initialSupply;                           // initial number of tokens.\r\n    ^----------------------------^\n\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:73:9: Warning: This declaration shadows an existing declaration.\n        uint256 sellPrice,\r\n        ^---------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:58:5: The shadowed declaration is here:\n    uint256 public sellPrice;                                 // price of coin wrt ether at time of selling coins\r\n    ^----------------------^\n\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:74:9: Warning: This declaration shadows an existing declaration.\n        uint256 buyPrice,\r\n        ^--------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:59:5: The shadowed declaration is here:\n    uint256 public buyPrice;                                  // price of coin wrt ether at time of buying coins\r\n    ^---------------------^\n\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:116:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(msg.sender, _to, _value);                                  // Notify anyone listening that this transfer took  \r\n        ^-------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:127:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(0, owner, mintedAmount);\r\n            ^------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:128:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(owner, target, mintedAmount);\r\n            ^-----------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:148:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\r\n        ^--------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:164:13: Warning: Invoking events without \"emit\" prefix is deprecated.\n            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\r\n            ^--------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:174:27: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input\r\n                          ^---------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:174:27: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input\r\n                          ^---------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:185:28: Warning: \"sha3\" has been deprecated in favour of \"keccak256\"\n        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof\r\n                           ^------------------------------------------------------------^\n/unique_chucks/2/0xec7954f452a6473c21c4078501f0bcf8b266bc99.sol:185:28: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof\r\n                           ^------------------------------------------------------------^\n",
    "issues": []
  }
}