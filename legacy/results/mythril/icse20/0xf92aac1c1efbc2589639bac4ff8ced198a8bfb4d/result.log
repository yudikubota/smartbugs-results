{"error": null, "issues": [{"address": 279, "code": "ess, uint256 _amount) pub", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/12/0xf92aac1c1efbc2589639bac4ff8ced198a8bfb4d.sol", "function": "fallback", "lineno": 83, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1406, "code": "        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function balanceOf(address _owner) public view retur", "debug": "calldata_ERC20Interface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Interface_0: 0xe6b09e9200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAd(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xf92aac1c1efbc2589639bac4ff8ced198a8bfb4d.sol", "function": "setAd(string,string)", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1749, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/12/0xf92aac1c1efbc2589639bac4ff8ced198a8bfb4d.sol", "function": "withdrawTokens(address,uint256)", "lineno": 86, "title": "Message call to external contract", "type": "Warning"}, {"address": 3065, "code": " ERC20Interface {\n    string public name = \"AdToken\";\n    string public symbol = \"ADT goo.gl/SpdpxN\";\n    uint8 public decimals = 18;                \n    \n    uint256 stdBalance;\n    mapping (address => uint256) balances;\n    address owner;\n    bool paused;\n    \n    function ADT() public {\n        owner = msg.sender;\n        totalSupply = 400000000 * 1e18;\n        stdBalance = 1000 * 1e18;\n        paused = false;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool success)\n    {\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function pause() public {\n        require(msg.sender == owner);\n        paused = true;\n    }\n    \n    function unpause() public {\n        require(msg.sender == owner);\n        paused = false;\n    }\n    \n    function setAd(string _name, string _symbol) public {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        if (paused){\n            return 0;\n        }\n        else {\n            return stdBalance+balances[_owner];\n        }\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return 0;\n    }\n    \n    function() public payable {\n        owner.transfer(msg.value);\n    }\n    \n    function withdrawTokens(address _address, uint256 _amount) public returns (bool) {\n        return ERC20Interface(_address).transfer(owner, _amount);\n    }\n}", "debug": "calldata_ERC20Interface_4 + calldata_ERC20Interface_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_ERC20Interface_0: 0xe6b09e9200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAd(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xf92aac1c1efbc2589639bac4ff8ced198a8bfb4d.sol", "function": "setAd(string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3079, "code": " ERC20Interface {\n    string public name = \"AdToken\";\n    string public symbol = \"ADT goo.gl/SpdpxN\";\n    uint8 public decimals = 18;                \n    \n    uint256 stdBalance;\n    mapping (address => uint256) balances;\n    address owner;\n    bool paused;\n    \n    function ADT() public {\n        owner = msg.sender;\n        totalSupply = 400000000 * 1e18;\n        stdBalance = 1000 * 1e18;\n        paused = false;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool) {\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value)\n        public returns (bool success)\n    {\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    function pause() public {\n        require(msg.sender == owner);\n        paused = true;\n    }\n    \n    function unpause() public {\n        require(msg.sender == owner);\n        paused = false;\n    }\n    \n    function setAd(string _name, string _symbol) public {\n        require(owner == msg.sender);\n        name = _name;\n        symbol = _symbol;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        if (paused){\n            return 0;\n        }\n        else {\n            return stdBalance+balances[_owner];\n        }\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return 0;\n    }\n    \n    function() public payable {\n        owner.transfer(msg.value);\n    }\n    \n    function withdrawTokens(address _address, uint256 _amount) public returns (bool) {\n        return ERC20Interface(_address).transfer(owner, _amount);\n    }\n}", "debug": "calldata_ERC20Interface_4 + calldata_ERC20Interface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_ERC20Interface_0: 0xe6b09e9200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAd(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/12/0xf92aac1c1efbc2589639bac4ff8ced198a8bfb4d.sol", "function": "setAd(string,string)", "lineno": 16, "title": "Integer Overflow ", "type": "Warning"}], "success": true}