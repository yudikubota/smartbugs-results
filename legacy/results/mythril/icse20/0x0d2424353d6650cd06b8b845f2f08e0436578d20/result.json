{
  "contract": "0x0d2424353d6650cd06b8b845f2f08e0436578d20",
  "tool": "mythril",
  "start": 1563520525.5344832,
  "end": 1563520548.187063,
  "duration": 22.65257978439331,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1225,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "getDaysPassedSinceLastTeamFundsBallot()",
        "lineno": 1099,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1588,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "proxyIncreaseWithdrawalChunk()",
        "lineno": 1099,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1748,
        "code": "hunk();\n    }\n\n    function proxyEnabl",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startRefundInvestorsBallot()",
        "lineno": 1069,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1748,
        "code": "hunk();\n    }\n\n    function proxyEnabl",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2969\nCall at address: 2969\nCall at address: 2022\n",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startRefundInvestorsBallot()",
        "lineno": 1069,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2022,
        "code": "storsBallot));\n        treasuryContract.enableRefund",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startRefundInvestorsBallot()",
        "lineno": 1073,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2022,
        "code": "storsBallot));\n        treasuryContract.enableRefund",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2969\n",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startRefundInvestorsBallot()",
        "lineno": 1073,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2797,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "proxyEnableRefunds()",
        "lineno": 1099,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2969,
        "code": "  return;\n        }\n    \n        ERC20Basic ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "getDaysPassedSinceLastRefundBallot()",
        "lineno": 1091,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3295,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claimTokens(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "claimTokens(address)",
        "lineno": 1099,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3484,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "claimTokens(address)",
        "lineno": 1099,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3484,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3741\n",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "claimTokens(address)",
        "lineno": 1099,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3741,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "claimTokens(address)",
        "lineno": 1099,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4032,
        "code": "\n        }\n    }\n\n    function getDays",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startincreaseWithdrawalTeam()",
        "lineno": 1055,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4032,
        "code": "\n        }\n    }\n\n    function getDays",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4306\n",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startincreaseWithdrawalTeam()",
        "lineno": 1055,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4306,
        "code": "     return getTime().sub(currentRefundInvest",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "startincreaseWithdrawalTeam()",
        "lineno": 1060,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5252,
        "code": "   return a - ",
        "debug": "The exception is triggered under the following conditions:\n\nretval_2969: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VotingProxy_0: 0xca5a3f3800000000000000000000000000000000000000000000000000000000\ncalldatasize_VotingProxy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/9/0x0d2424353d6650cd06b8b845f2f08e0436578d20.sol",
        "function": "getDaysPassedSinceLastRefundBallot()",
        "lineno": 19,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}