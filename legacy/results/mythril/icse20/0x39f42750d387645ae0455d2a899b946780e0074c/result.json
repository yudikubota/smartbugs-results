{
  "contract": "0x39f42750d387645ae0455d2a899b946780e0074c",
  "tool": "mythril",
  "start": 1563606400.3207595,
  "end": 1563606462.2780218,
  "duration": 61.95726227760315,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1060,
        "code": "dStatus == RewardStatus.PAID) {\n            uint256 index = tasks[_taskId].taskIdsIndex;\n            delete taskIds[index];\n            delete tasks[_taskId];\n\n            // Move the last element to the delete",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0x8000\ncalldata_Tasks_0: 0xb9c105cf00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "getTaskRewardAndStatus(bytes32)",
        "lineno": 822,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1966,
        "code": "Determined(bytes32 taskI",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tasks_4: 0x0\nstorage_3: 0x0\ncalldata_Tasks_0: 0x39118d2500000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "_function_0x39118d25",
        "lineno": 674,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2437,
        "code": "ID.\n        require(balance > distense",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 751,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2437,
        "code": "ID.\n        require(balance > distense",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3032\nCall at address: 2883\n",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 751,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2437,
        "code": "ID.\n        require(balance > distense",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 751,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2647,
        "code": "rdParameterTitle()));\n\n        task.rewardVo",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0x8000\ncalldata_Tasks_32 + 4: 0x0\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2437: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Tasks_0: 0x497a7b4800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 756,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2883,
        "code": "DOwned\n        uint256 limitedVotingPower = pctDIDOwned",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 765,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2883,
        "code": "DOwned\n        uint256 limitedVotingPower = pctDIDOwned",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3032\n",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 765,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2883,
        "code": "DOwned\n        uint256 limitedVotingPower = pctDIDOwned",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 765,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3032,
        "code": "r voting purposes, limit the pctDIDOwned\n        uint256 limitedVotingPower = pctDIDOwned ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 765,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3032,
        "code": "r voting purposes, limit the pctDIDOwned\n        uint256 limitedVotingPower = pctDIDOwned ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 765,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5544,
        "code": "256) {\n    // assert(b > 0); // Solidi",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 872,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5544,
        "code": "256) {\n    // assert(b > 0); // Solidi",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5919\nCall at address: 5770\n",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 872,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5544,
        "code": "256) {\n    // assert(b > 0); // Solidi",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 872,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5770,
        "code": " return c;\n  }\n\n  function sub(uint256 a, uint25",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 876,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5770,
        "code": " return c;\n  }\n\n  function sub(uint256 a, uint25",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5919\n",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 876,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5770,
        "code": " return c;\n  }\n\n  function sub(uint256 a, uint25",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 876,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5919,
        "code": " There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) intern",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 875,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5919,
        "code": " There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) intern",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/22/0x39f42750d387645ae0455d2a899b946780e0074c.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 875,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}