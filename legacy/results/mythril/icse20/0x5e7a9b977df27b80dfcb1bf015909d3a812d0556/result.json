{
  "contract": "0x5e7a9b977df27b80dfcb1bf015909d3a812d0556",
  "tool": "mythril",
  "start": 1563427489.3544323,
  "end": 1563427573.263365,
  "duration": 83.90893268585205,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 373,
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf9482314981cfda98e27eec1fbaffebd38fb6956f88d404851ac8e7f4092df6c\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x3a2c2865245304000\ncallvalue: 0xc5b90b21a654ed59aeb7e0b99aafd49dbe7bcd46becd770002d36f537ed26066\nstorage_1: 0x0\ncalldata_ERC20_0: 0x10100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "fallback",
        "lineno": 111,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 416,
        "code": "alance > min_amount);\n    require(!bought_tokens);\n    require(sale != 0x0);\n    require(msg.sender == creator || hash_pwd == keccak256(_password));\n    //Registers the buy block number\n    buy_block = block.number;\n    // Record that the contract has bought the tokens.\n    bought_tokens = true;\n    // Record the amount of ETH sent as the contract's current value.\n    contract_eth_value = this.balance;\n    // Transfer all the funds to the crowdsale address.\n    sale.transfer(contract_eth_value);\n  }\n  \n  function set_sale_address(address _sale, string _password) {\n    //ha",
        "debug": "calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xadc6700000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "fallback",
        "lineno": 64,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1083,
        "code": " == creator || hash_pwd == keccak256(_password));\n    token = ERC20(_token);\n  }\n\n  function emergy_withdraw(address _token) {\n    //Allows to withdraw all the tokens a",
        "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xb987154800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set_token_address(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "set_token_address(address,string)",
        "lineno": 87,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1263,
        "code": "the creator or someone with the password\n    require(msg.sender == creator || hash_pwd == keccak256(_password));\n    require(sale == 0x0);\n    require(!bought_tokens);\n    sale = _sale;\n  }\n\n  function set_token_address(address _token, string _password) {\n    require(msg.",
        "debug": "calldata_ERC20_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xda6aabbe00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `set_sale_address(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "set_sale_address(address,string)",
        "lineno": 79,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1976,
        "code": "ess _sale, string _password) {\n  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "fallback",
        "lineno": 78,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2315,
        "code": "  // Disallow token withdrawal",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 36,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2315,
        "code": "  // Disallow token withdrawal",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3119\nCall at address: 2850\n",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 36,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2315,
        "code": "  // Disallow token withdrawal",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 36,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2465,
        "code": "_balance) / contract_eth_value;\n    // Update the value of tokens cu",
        "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_2315: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\nstorage_1: 0xff00\ncalldata_ERC20_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 39,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2540,
        "code": "r];\n    // Update the user's balance prior",
        "debug": "storage_2: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x2\nreturndatasize: 0x20\nretval_2315: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\nstorage_1: 0xff00\ncalldata_ERC20_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdraw()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 41,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2546,
        "code": "r];\n    // Update the user's balance prior",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 41,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2614,
        "code": "= tokens_to_withdraw / 1",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 44,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2850,
        "code": "e funds.  Throws on failure ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 47,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2850,
        "code": "e funds.  Throws on failure ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3119\n",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 47,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2850,
        "code": "e funds.  Throws on failure ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 47,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3119,
        "code": " fee));\n  }\n  \n  // Allows any user to get his eth r",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 48,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3119,
        "code": " fee));\n  }\n  \n  // Allows any user to get his eth r",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "withdraw()",
        "lineno": 48,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4342,
        "code": "true;\n    balances[msg.sender]",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x5e7a9b977df27b80dfcb1bf015909d3a812d0556.sol",
        "function": "emergy_withdraw(address)",
        "lineno": 99,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}