{"error": null, "issues": [{"address": 355, "code": "yable returns(bool) {\n        if(payments[msg.sender] >= 100000000000000000) {\n            // you paid so we care about your allergies\n            allergies[msg.sender] = _description;\n            return true;\n        }\n        return false;\n    }\n\n    function giveMeBackMyMoney() public onlyOwner {\n", "debug": "calldata_Kiwiana_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Kiwiana_0: 0x72258f9600000000000000000000000000000000000000000000000000000000\ncalldatasize_Kiwiana: 0x4\n", "description": "A possible integer overflow exists in the function `allergy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0x49b45f6693f9885c8c2138f4cb10764dd891652e.sol", "function": "allergy(string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2046, "code": "ntract Kiwiana {\n    address public owner;\n    mapping (address => uint) public payments;\n    mapping (address => string) public allergies;\n    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () external payable {\n        register(msg.sender);\n    }\n\n    function register(address _attendee) public payable returns(bool) {\n        uint weiAmount = msg.value;\n        if(weiAmount >= 100000000000000000) {\n            payments[_attendee] = weiAmount;\n            return true;\n        }\n        else {\n            // you didn't pay enough, so we're just swallowing how much you spent\n            return false;\n        }\n    }\n\n    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 150000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEating(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 100000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function allergy(string _description) public payable returns(bool) {\n        if(payments[msg.sender] >= 100000000000000000) {\n            // you paid so we care about your allergies\n            allergies[msg.sender] = _description;\n            return true;\n        }\n        return false;\n    }\n\n    function giveMeBackMyMoney() public onlyOwner {\n        //send all money to chris\n        chris.transfer(address(this).balance);\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x87800000000000000000000000000100000000058598010000c04978bd9200c3\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffd20000000000000000000000000004000000006812c0000000000000003004\ncalldata_Kiwiana_0: 0x72258f9600000000000000000000000000000000000000000000000000000000\ncalldatasize_Kiwiana: 0x4\n", "description": "A possible integer overflow exists in the function `allergy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0x49b45f6693f9885c8c2138f4cb10764dd891652e.sol", "function": "allergy(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2075, "code": "ntract Kiwiana {\n    address public owner;\n    mapping (address => uint) public payments;\n    mapping (address => string) public allergies;\n    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () external payable {\n        register(msg.sender);\n    }\n\n    function register(address _attendee) public payable returns(bool) {\n        uint weiAmount = msg.value;\n        if(weiAmount >= 100000000000000000) {\n            payments[_attendee] = weiAmount;\n            return true;\n        }\n        else {\n            // you didn't pay enough, so we're just swallowing how much you spent\n            return false;\n        }\n    }\n\n    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 150000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEating(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 100000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function allergy(string _description) public payable returns(bool) {\n        if(payments[msg.sender] >= 100000000000000000) {\n            // you paid so we care about your allergies\n            allergies[msg.sender] = _description;\n            return true;\n        }\n        return false;\n    }\n\n    function giveMeBackMyMoney() public onlyOwner {\n        //send all money to chris\n        chris.transfer(address(this).balance);\n    }\n}", "debug": "calldata_Kiwiana_4 + calldata_Kiwiana_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x16345785d8a0000\ncalldata_Kiwiana_0: 0x72258f9600000000000000000000000000000000000000000000000000000000\ncalldatasize_Kiwiana: 0x4\n", "description": "A possible integer overflow exists in the function `allergy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0x49b45f6693f9885c8c2138f4cb10764dd891652e.sol", "function": "allergy(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2089, "code": "ntract Kiwiana {\n    address public owner;\n    mapping (address => uint) public payments;\n    mapping (address => string) public allergies;\n    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () external payable {\n        register(msg.sender);\n    }\n\n    function register(address _attendee) public payable returns(bool) {\n        uint weiAmount = msg.value;\n        if(weiAmount >= 100000000000000000) {\n            payments[_attendee] = weiAmount;\n            return true;\n        }\n        else {\n            // you didn't pay enough, so we're just swallowing how much you spent\n            return false;\n        }\n    }\n\n    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 150000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEating(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 100000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function allergy(string _description) public payable returns(bool) {\n        if(payments[msg.sender] >= 100000000000000000) {\n            // you paid so we care about your allergies\n            allergies[msg.sender] = _description;\n            return true;\n        }\n        return false;\n    }\n\n    function giveMeBackMyMoney() public onlyOwner {\n        //send all money to chris\n        chris.transfer(address(this).balance);\n    }\n}", "debug": "calldata_Kiwiana_4 + calldata_Kiwiana_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x16345785d8a0000\ncalldata_Kiwiana_0: 0x72258f9600000000000000000000000000000000000000000000000000000000\ncalldatasize_Kiwiana: 0x4\n", "description": "A possible integer overflow exists in the function `allergy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0x49b45f6693f9885c8c2138f4cb10764dd891652e.sol", "function": "allergy(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2111, "code": "ntract Kiwiana {\n    address public owner;\n    mapping (address => uint) public payments;\n    mapping (address => string) public allergies;\n    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function () external payable {\n        register(msg.sender);\n    }\n\n    function register(address _attendee) public payable returns(bool) {\n        uint weiAmount = msg.value;\n        if(weiAmount >= 100000000000000000) {\n            payments[_attendee] = weiAmount;\n            return true;\n        }\n        else {\n            // you didn't pay enough, so we're just swallowing how much you spent\n            return false;\n        }\n    }\n\n    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 150000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function isEating(address __attendee) public view returns(bool) {\n        if(payments[__attendee] >= 100000000000000000) {\n            return true;\n        }\n        return false;\n    }\n\n    function allergy(string _description) public payable returns(bool) {\n        if(payments[msg.sender] >= 100000000000000000) {\n            // you paid so we care about your allergies\n            allergies[msg.sender] = _description;\n            return true;\n        }\n        return false;\n    }\n\n    function giveMeBackMyMoney() public onlyOwner {\n        //send all money to chris\n        chris.transfer(address(this).balance);\n    }\n}", "debug": "calldata_Kiwiana_4 + calldata_Kiwiana_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x16345785d8a0000\ncalldata_Kiwiana_0: 0x72258f9600000000000000000000000000000000000000000000000000000000\ncalldatasize_Kiwiana: 0x4\n", "description": "A possible integer overflow exists in the function `allergy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/18/0x49b45f6693f9885c8c2138f4cb10764dd891652e.sol", "function": "allergy(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}