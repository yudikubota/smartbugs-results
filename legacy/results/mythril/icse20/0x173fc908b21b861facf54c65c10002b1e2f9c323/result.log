{"error": null, "issues": [{"address": 520, "code": "ate.Init;\n    uint public totalSupply ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "_function_0x0c3f6acf", "lineno": 31, "title": "Exception state", "type": "Informational"}, {"address": 880, "code": "   function getTotalSupply()constant returns(uint)\n    {\n        return totalSupply;\n    }\n  ", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldata_PresaleToken_0: 0x378aa70100000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "getCurrentState()", "lineno": 185, "title": "Exception state", "type": "Informational"}, {"address": 2094, "code": "ent LogBuy(address in", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\ncalldatasize_PresaleToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "fallback", "lineno": 58, "title": "Exception state", "type": "Informational"}, {"address": 2138, "code": ";\n        if (tot", "debug": "callvalue: 0xa1f278e394a6f0003220dfdb53b9de4a404168c3b010f120cc83c01e1a59af0f\nstorage_0: 0x100\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "fallback", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2262, "code": "purchases[purchases.length++", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffff015e1a29f4b322235620\ncallvalue: 0x45beeb4adda39cc928bb817aa706995f5884e4773d366319e2660467ddf90403\nstorage_0: 0x100\nstorage_1: 0x7f7003580788b84dfdd2\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "fallback", "lineno": 85, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2339, "code": " LogBuy(_buyer, ne", "debug": "callvalue: 0x31f2cd414ef6371185933a7b55c9d77ebf9a0e1bc303dea0e75066600a00050b\nstorage_0: 0x100\nstorage_1: 0x27d0fe6ca3f011ee6f40\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_PresaleToken: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "fallback", "lineno": 87, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2360, "code": "  \n        LogBuy(_buyer, new", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x40da740da740da740da740da740da740da740da740da745ddd4f8983e6814a06\nstorage_0: 0x100\nstorage_1: 0xad5ce170e7d512f04ea0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_PresaleToken: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "fallback", "lineno": 86, "title": "Exception state", "type": "Informational"}, {"address": 2876, "code": "okenManager;\n    }\n\n    functio", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x8000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_PresaleToken_0: 0x4defd1bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresaleToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0x173fc908b21b861facf54c65c10002b1e2f9c323.sol", "function": "setCrowdsaleManager(address)", "lineno": 167, "title": "Exception state", "type": "Informational"}], "success": true}