{
  "contract": "0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae",
  "tool": "mythril",
  "start": 1563597917.6549478,
  "end": 1563598117.6928303,
  "duration": 200.03788256645203,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1458,
        "debug": "calldata_UZEEToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UZEEToken_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_UZEEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae.sol",
        "function": "setSymbol(string)",
        "lineno": 198,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6667,
        "code": "     return a ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UZEEToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UZEEToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_UZEEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae.sol",
        "function": "burn(uint256)",
        "lineno": 21,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6684,
        "code": ">= a)",
        "debug": "calldata_UZEEToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UZEEToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UZEEToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_UZEEToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_UZEEToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UZEEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 26,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6697,
        "code": "eturn c;\n    }",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_UZEEToken_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UZEEToken_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UZEEToken_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_UZEEToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_UZEEToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UZEEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7465,
        "code": "xed burner, uint256 value);\n\n    mapping (address => mapping (address => uint256)) internal allowed;\n    mapping(address => uint256) balances;\n    uint256 totalSupply_;\n\n    string public name = \"UZEEChain\";\n    string public symbol = \"UZEE\";\n    uint256 public decimals = 18;\n\n    constructor() public {\n        totalSupply_ = 100 * 100000000  * ( 10** decimals );\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0x0), msg.sender, totalSupply_);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool)\n    {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool){\n        allowed[msg.sender][_spender] = (\n        allowed[msg.sender][_spender].add(_addedValue));\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool){\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function burn(uint256 _value) onlyOwner public {\n        _burn(msg.sender, _value);\n    }\n\n    function _burn(address _who, uint256 _value) internal {\n        require(_value <= balances[_who]);\n        balances[_who] = balances[_who].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(_who, _value);\n        emit Transfer(_who, address(0), _value);\n    }\n\n    function setName(string _name) onlyOwner public {\n        name = _name;\n    }\n\n    function setSymbol(string _symbol) onlyOwner public {\n        symbol = _symbol;\n    }\n\n    function() payable public {\n        revert();\n    }\n}",
        "debug": "calldata_UZEEToken_4 + calldata_UZEEToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_UZEEToken_0: 0xb84c824600000000000000000000000000000000000000000000000000000000\ncalldatasize_UZEEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x7e04a8c9b52f3698b3d4f660254b06ff904b48ae.sol",
        "function": "setSymbol(string)",
        "lineno": 99,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}