{"error": null, "issues": [{"address": 236, "code": "   \n        user", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_1: 0x0\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 74, "title": "Exception state", "type": "Informational"}, {"address": 326, "code": "nder, msg.val", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_2: 0x0\nstorage_1: 0x1\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 75, "title": "Exception state", "type": "Informational"}, {"address": 393, "code": "18;\n\ncontract Ethe", "debug": "storage_3: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x1\nstorage_1: 0x1\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 540, "code": "tart counting blocks..", "debug": "storage_3: 0x1\nstorage_4: 0xce78a83da0868639121722f712b11aebddd9ecbf408d20165b077adb7dd80ced\ncallvalue: 0xaf7046300a4120b9d01e0084684178ca13dd80b04180fe10f162739261828fad\nstorage_2: 0x2\nstorage_1: 0x2\ncalldata_Etherumble_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_6: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 78, "title": "Integer Overflow ", "type": "Warning"}, {"address": 562, "code": "   uint sum = 0;\n", "debug": "block_number: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_3: 0x1\nstorage_6: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 84, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1438, "code": "er);\n    }\n\n    func", "debug": "SOLVER OUTPUT:\nstorage_7: 0x0\ncaller: 0x0\ncalldata_Etherumble_0: 0x3a68908200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n", "description": "In the function `withrawFee()` a non-zero amount of Ether is sent to an address taken from storage slot 7.\nThere is a check on storage index 7. This storage slot can be written to by calling the function `Lottery()`.\n\nThere is a check on storage index 7. This storage slot can be written to by calling the function `Lottery()`.", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "withrawFee()", "lineno": 119, "title": "Ether send", "type": "Warning"}, {"address": 1438, "code": "er);\n    }\n\n    func", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withrawFee(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "withrawFee()", "lineno": 119, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1497, "code": "constant re", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Etherumble_4: 0x0\nstorage_2: 0x0\ncalldata_Etherumble_0: 0x3fa1930d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "getPlayerBet(uint256)", "lineno": 56, "title": "Exception state", "type": "Informational"}, {"address": 1733, "code": "     //check block ", "debug": "SOLVER OUTPUT:\nstorage_7: 0x0\ncaller: 0x0\ncalldata_Etherumble_0: 0x4706840e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n", "description": "The function `destroykill()` executes the SUICIDE instruction. The remaining Ether is sent to a stored address.\n\nThere is a check on storage index 7. This storage index can be written to by calling the function `Lottery()`.", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "destroykill()", "lineno": 123, "title": "Unchecked SUICIDE", "type": "Warning"}, {"address": 1770, "code": "Bet(uint index", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Etherumble_4: 0x0\nstorage_1: 0x0\ncalldata_Etherumble_0: 0x6522566500000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "getPlayerAddress(uint256)", "lineno": 53, "title": "Exception state", "type": "Informational"}, {"address": 1901, "code": "bUsers; i++) {\n            sum += users[i].amount;\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x12\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x83b272200000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 87, "title": "Exception state", "type": "Informational"}, {"address": 1934, "code": "is contr", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x1\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x2386f26fc10000\ncalldata_Etherumble_0: 0x700000000000000000000000000000000000000000000000000000000\ncalldatasize_Etherumble: 0x4\nstorage_0: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 2227, "code": " isOwner {\n        owner.transfer(f", "debug": "", "description": "In the function `fallback` the following predictable state variables are used to determine Ether recipient:\n- block.number\n- block.number\n", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 114, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 2227, "code": " isOwner {\n        owner.transfer(f", "debug": "", "description": "In the function `fallback` predictable expression 'block.blockhash(block.number - 1)' is used to determine Ether recipient", "filename": "/unique_chucks/29/0x013620bf5142f9d8487e92c1d514c38e1b086613.sol", "function": "fallback", "lineno": 114, "title": "Dependence on predictable variable", "type": "Warning"}], "success": true}