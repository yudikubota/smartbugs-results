{
  "contract": "0x625615dcb1b33c4c5f28f48609e46b0727cfb451",
  "tool": "mythril",
  "start": 1563705576.158221,
  "end": 1563705725.5373602,
  "duration": 149.37913918495178,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2706,
        "code": "odifier onlyOwner() {\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_XToken_4: 0x0\nstorage_4: 0x0\ncalldata_XToken_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/37/0x625615dcb1b33c4c5f28f48609e46b0727cfb451.sol",
        "function": "_function_0x025e7c27",
        "lineno": 138,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3382,
        "code": "}\n            }\n ",
        "debug": "storage_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XToken_4: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_XToken_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/37/0x625615dcb1b33c4c5f28f48609e46b0727cfb451.sol",
        "function": "removeOwner(address)",
        "lineno": 175,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3426,
        "code": "\n\n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XToken_4: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_XToken_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/37/0x625615dcb1b33c4c5f28f48609e46b0727cfb451.sol",
        "function": "removeOwner(address)",
        "lineno": 177,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4144,
        "code": "x token supply.\n        40 * 1e6   // Sale ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/37/0x625615dcb1b33c4c5f28f48609e46b0727cfb451.sol",
        "function": "approveAndCall(address,uint256)",
        "lineno": 325,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 8365,
        "code": "return c;\n    ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xe7bffc07b9efcb3bc199f4f61fb80f8e3e0bfff0dc007e07001600ff5fe000f0\ncalldata_XToken_32 + 36: 0x983b71f957609a65aa6604b5ad75147c65f6feeea8677daeed48ff594cc7ee87\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XToken_32_+_4: 0xddfc8703d581003d2a064ca43a891cf3596e800c24e77f08c91cc01c18b69085\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XToken_4: 0x983b71f957609a65aa6604b5ad75147c65f6feeea8677daeed48ff594cc7ee87\nstorage_15: 0x0\ncalldata_XToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/37/0x625615dcb1b33c4c5f28f48609e46b0727cfb451.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 26,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}