{
  "contract": "0x33d133f175b5cee9aac255448d52394818b76cd0",
  "tool": "mythril",
  "start": 1563570679.19238,
  "end": 1563570884.3009756,
  "duration": 205.10859560966492,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1412,
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x9c7c722b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `rename(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "rename(string,string)",
        "lineno": 197,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2301,
        "code": "nning {\n        assert(!sto",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "stop()",
        "lineno": 69,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2401,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "approve(address,uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2436,
        "code": "int256 size) {\n        as",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "approve(address,uint256)",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2457,
        "code": "n(uint256 _totalSupply, uint256 _ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x4\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "approve(address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2510,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2545,
        "code": "int256 size) {\n        as",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2566,
        "code": "n(uint256 _totalSupply, uint256 _ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x60\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3030,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burn(uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3065,
        "code": "int256 size) {\n        as",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burn(uint256)",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3086,
        "code": "n(uint256 _totalSupply, uint256 _ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x20\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burn(uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3193,
        "code": "nning {\n        assert(!sto",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x449a52f800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "mintTo(address,uint256)",
        "lineno": 69,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3277,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burnFrom(address,uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3312,
        "code": "int256 size) {\n        as",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burnFrom(address,uint256)",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3333,
        "code": "n(uint256 _totalSupply, uint256 _ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x4\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x79cc679000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burnFrom(address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4047,
        "code": "nning {\n        assert(!sto",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0x9c7c722b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "rename(string,string)",
        "lineno": 69,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4451,
        "code": "nning {\n        assert(!sto",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xa0712d6800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "mint(uint256)",
        "lineno": 69,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4525,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transfer(address,uint256)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4560,
        "code": "int256 size) {\n        as",
        "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transfer(address,uint256)",
        "lineno": 79,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4581,
        "code": "n(uint256 _totalSupply, uint256 _ma",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x4\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "transfer(address,uint256)",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4690,
        "code": "nning {\n        assert(!sto",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_tokenRecipient_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "start()",
        "lineno": 69,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4791,
        "code": "     assert(msg.",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0xff00\ncalldata_tokenRecipient_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 75,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5537,
        "code": "= _a);\n\n        ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_tokenRecipient: 0x30\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\ncalldata_tokenRecipient_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "burn(uint256)",
        "lineno": 12,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6896,
        "code": " _b;\n  ",
        "debug": "storage_3: 0xcb6cf6ee7f7d5570945965e038e07bbfaed6febebf7fdcf6bd3ec1b7a9d6f1fa\ncalldata_tokenRecipient_32 + 4: 0xb349f48c40415542a33364f13f0e233c0524f8f0b0781ec6b120dd8000000000\nstorage_7: 0x7eb6eb7abfbeaab3378ccad177ee9efbb3fbf7af6ff7fbbd6e5f9f37a9d6f1fa\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x449a52f800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mintTo(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "mintTo(address,uint256)",
        "lineno": 5,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6921,
        "code": "t(c >= _a && c >= _b);\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x800000019ffffffff000000000007c5d0040068000000035864fd3878000a37d\ncalldata_tokenRecipient_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_7: 0x19ffffffff000000000007c5d0040068000000035864fd3878000a37d\ncalldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x449a52f800000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "mintTo(address,uint256)",
        "lineno": 6,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7000,
        "code": "r uint256;\n\n    address public owner;\n    uint256 public maxSupply;\n    bool public stopped = false;\n\n    event Burn(address indexed from, uint256 value);\n    event Mint(address indexed to, uint256 value);\n    event Stop();\n    event Start();\n    event Rename(string name, string symbol);\n\n    modifier isOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    modifier isRunning {\n        assert(!stopped);\n        _;\n    }\n\n    modifier isValidAddress {\n        assert(msg.sender != 0x0);\n        _;\n    }\n\n    modifier hasPayloadSize(uint256 size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }    \n\n    function TrexCoin(uint256 _totalSupply, uint256 _maxSupply, string _name, string _symbol, uint8 _decimals) public {\n        owner = msg.sender;\n        decimals = _decimals;\n        maxSupply = _maxSupply;\n        name = _name;\n        symbol = _symbol;\n        _mint(owner, _totalSupply);\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) private returns (bool _success) {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning isValidAddress hasPayloadSize(3 * 32) returns (bool _success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        \n        return _transfer(_from, _to, _value);\n    }\n\n    function _approve(address _owner, address _spender, uint256 _value) private returns (bool _success) {\n        allowance[_owner][_spender] = _value;\n\n        emit Approval(_owner, _spender, _value);\n        \n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        return _approve(msg.sender, _spender, _value);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public isRunning isValidAddress hasPayloadSize(4 * 32) returns (bool _success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (_approve(msg.sender, _spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    function _burn(address _from, uint256 _value) private returns (bool _success) {\n        require(balanceOf[_from] >= _value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n\n        emit Burn(_from, _value);\n\n        return true;\n    }\n\n    function burn(uint256 _value) public isRunning isValidAddress hasPayloadSize(32) returns (bool _success) {\n        return _burn(msg.sender, _value);\n    }\n\n    function burnFrom(address _from, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\n        return _burn(_from, _value);\n    }\n\n    function _mint(address _to, uint256 _value) private {\n        require(_to != 0x0);\n        require(totalSupply + _value <= maxSupply);\n        if (_value > 0) {\n            totalSupply = totalSupply.add(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n\n            emit Mint(_to, _value);\n        }\n    }\n\n    function mint(uint256 _value) public isOwner {\n        _mint(owner, _value);\n    }\n\n    function mintTo(address _to, uint256 _value) public isOwner {\n        _mint(_to, _value);\n    }\n\n    function start() public isOwner {\n        stopped = false;\n\n        emit Start();\n    }\n    \n    function stop() public isOwner {\n        stopped = true;\n\n        emit Stop();\n    }\n\n    function rename(string _name, string _symbol) public isOwner {\n        name = _name;\n        symbol = _symbol;\n\n        emit Rename(_name, _symbol);\n    }\n}",
        "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_6: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x9c7c722b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `rename(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "rename(string,string)",
        "lineno": 52,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7014,
        "code": "r uint256;\n\n    address public owner;\n    uint256 public maxSupply;\n    bool public stopped = false;\n\n    event Burn(address indexed from, uint256 value);\n    event Mint(address indexed to, uint256 value);\n    event Stop();\n    event Start();\n    event Rename(string name, string symbol);\n\n    modifier isOwner {\n        assert(msg.sender == owner);\n        _;\n    }\n\n    modifier isRunning {\n        assert(!stopped);\n        _;\n    }\n\n    modifier isValidAddress {\n        assert(msg.sender != 0x0);\n        _;\n    }\n\n    modifier hasPayloadSize(uint256 size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }    \n\n    function TrexCoin(uint256 _totalSupply, uint256 _maxSupply, string _name, string _symbol, uint8 _decimals) public {\n        owner = msg.sender;\n        decimals = _decimals;\n        maxSupply = _maxSupply;\n        name = _name;\n        symbol = _symbol;\n        _mint(owner, _totalSupply);\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) private returns (bool _success) {\n        require(_to != 0x0);\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        balanceOf[_to] = balanceOf[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public isRunning isValidAddress hasPayloadSize(3 * 32) returns (bool _success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        \n        return _transfer(_from, _to, _value);\n    }\n\n    function _approve(address _owner, address _spender, uint256 _value) private returns (bool _success) {\n        allowance[_owner][_spender] = _value;\n\n        emit Approval(_owner, _spender, _value);\n        \n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        return _approve(msg.sender, _spender, _value);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public isRunning isValidAddress hasPayloadSize(4 * 32) returns (bool _success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (_approve(msg.sender, _spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    function _burn(address _from, uint256 _value) private returns (bool _success) {\n        require(balanceOf[_from] >= _value);\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        totalSupply = totalSupply.sub(_value);\n\n        emit Burn(_from, _value);\n\n        return true;\n    }\n\n    function burn(uint256 _value) public isRunning isValidAddress hasPayloadSize(32) returns (bool _success) {\n        return _burn(msg.sender, _value);\n    }\n\n    function burnFrom(address _from, uint256 _value) public isRunning isValidAddress hasPayloadSize(2 * 32) returns (bool _success) {\n        require(_value <= allowance[_from][msg.sender]);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n\n        return _burn(_from, _value);\n    }\n\n    function _mint(address _to, uint256 _value) private {\n        require(_to != 0x0);\n        require(totalSupply + _value <= maxSupply);\n        if (_value > 0) {\n            totalSupply = totalSupply.add(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n\n            emit Mint(_to, _value);\n        }\n    }\n\n    function mint(uint256 _value) public isOwner {\n        _mint(owner, _value);\n    }\n\n    function mintTo(address _to, uint256 _value) public isOwner {\n        _mint(_to, _value);\n    }\n\n    function start() public isOwner {\n        stopped = false;\n\n        emit Start();\n    }\n    \n    function stop() public isOwner {\n        stopped = true;\n\n        emit Stop();\n    }\n\n    function rename(string _name, string _symbol) public isOwner {\n        name = _name;\n        symbol = _symbol;\n\n        emit Rename(_name, _symbol);\n    }\n}",
        "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_6: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x9c7c722b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `rename(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/18/0x33d133f175b5cee9aac255448d52394818b76cd0.sol",
        "function": "rename(string,string)",
        "lineno": 52,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}