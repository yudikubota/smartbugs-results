{"error": null, "issues": [{"address": 281, "code": " users, uint256[] amounts) public {\n        for(uint256 i = 0; i < users.length; i++) {\n            address account = users[i];\n            uint256 amount = amounts[i];\n            \n            LogAccountAmount(account, amount);\n            \n            token.transfer(account, amount);\n        }\n    }\n    \n    function recoverTokens(address", "debug": "calldata_ERC20Basic_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Basic_0: 0x4c990cc700000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `startAirdrop(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "startAirdrop(address[],uint256[])", "lineno": 32, "title": "Integer Overflow ", "type": "Warning"}, {"address": 702, "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setToken(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "recoverTokens(address,uint256)", "lineno": 46, "title": "Message call to external contract", "type": "Warning"}, {"address": 702, "debug": "", "description": "A possible transaction order independence vulnerability exists in function recoverTokens(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "recoverTokens(address,uint256)", "lineno": 46, "title": "Transaction order dependence", "type": "Warning"}, {"address": 887, "code": "   LogAcco", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20Basic_4 + calldata_ERC20Basic_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20Basic_0: 0x4c990cc700000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Basic: 0x4\nmem_128 + 32 + 32*calldata_ERC20Basic_4 + calldata_ERC20Basic_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "startAirdrop(address[],uint256[])", "lineno": 37, "title": "Exception state", "type": "Informational"}, {"address": 1167, "code": "   }\n    }\n    \n    function re", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setToken(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "startAirdrop(address[],uint256[])", "lineno": 40, "title": "Message call to external contract", "type": "Warning"}, {"address": 1167, "code": "   }\n    }\n    \n    function re", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1167\n", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "startAirdrop(address[],uint256[])", "lineno": 40, "title": "Multiple Calls", "type": "Information"}, {"address": 1167, "code": "   }\n    }\n    \n    function re", "debug": "", "description": "A possible transaction order independence vulnerability exists in function startAirdrop(address[],uint256[]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/26/0xeead881ecaf0c853f4fb80498b5ce99a6df6ecdd.sol", "function": "startAirdrop(address[],uint256[])", "lineno": 40, "title": "Transaction order dependence", "type": "Warning"}], "success": true}