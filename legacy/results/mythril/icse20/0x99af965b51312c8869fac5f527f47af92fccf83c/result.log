{"error": null, "issues": [{"address": 768, "code": ".url;\n  }\n\n  function rele", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_0: 0x100\ncalldata_SLoader_0: 0x611408ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "latestReleaseUrl()", "lineno": 27, "title": "Exception state", "type": "Informational"}, {"address": 963, "code": "\n  function rel", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_SLoader_4: 0x0\ncalldata_SLoader_0: 0x848a213000000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "releaseChecksum(uint8)", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 1115, "code": "\n\ncontract SLoader", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1183, "code": "sion(checksum, url));\n    releaseCoun", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 18, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1271, "code": " Version {\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_SLoader_4: 0x0\ncalldata_SLoader_0: 0x91fdbb5500000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "releaseUrl(uint8)", "lineno": 38, "title": "Exception state", "type": "Informational"}, {"address": 1502, "code": "- 1].checksum;\n  }\n\n  func", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nstorage_0: 0x100\ncalldata_SLoader_0: 0xbf8bf85e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "latestReleaseChecksum()", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 1565, "code": "ntract SLoader {\n  uint8 public releaseCount;\n  Version[] releases;\n  address owner;\n\n  modifier ifOwner {\n    require(owner == msg.sender);\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function addRelease(bytes32 checksum, string url) ifOwner public {\n    releases.push(Version(checksum, url));\n    releaseCount++;\n  }\n\n  function latestReleaseChecksum() constant public returns (bytes32) {\n    return releases[releaseCount - 1].checksum;\n  }\n\n  function latestReleaseUrl() constant public returns (string) {\n    return releases[releaseCount - 1].url;\n  }\n\n  function releaseChecksum(uint8 index) constant public returns (bytes32) {\n    return releases[index].checksum;\n  }\n\n  function releaseUrl(uint8 index) constant public returns (string) {\n    return releases[index].url;\n  }\n\n  struct Version {\n    bytes32 checksum;\n    string url;\n  }\n}", "debug": "keccac_1_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n2*storage_1: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n2*storage_1: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1594, "code": "ntract SLoader {\n  uint8 public releaseCount;\n  Version[] releases;\n  address owner;\n\n  modifier ifOwner {\n    require(owner == msg.sender);\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function addRelease(bytes32 checksum, string url) ifOwner public {\n    releases.push(Version(checksum, url));\n    releaseCount++;\n  }\n\n  function latestReleaseChecksum() constant public returns (bytes32) {\n    return releases[releaseCount - 1].checksum;\n  }\n\n  function latestReleaseUrl() constant public returns (string) {\n    return releases[releaseCount - 1].url;\n  }\n\n  function releaseChecksum(uint8 index) constant public returns (bytes32) {\n    return releases[index].checksum;\n  }\n\n  function releaseUrl(uint8 index) constant public returns (string) {\n    return releases[index].url;\n  }\n\n  struct Version {\n    bytes32 checksum;\n    string url;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1608, "code": "ntract SLoader {\n  uint8 public releaseCount;\n  Version[] releases;\n  address owner;\n\n  modifier ifOwner {\n    require(owner == msg.sender);\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function addRelease(bytes32 checksum, string url) ifOwner public {\n    releases.push(Version(checksum, url));\n    releaseCount++;\n  }\n\n  function latestReleaseChecksum() constant public returns (bytes32) {\n    return releases[releaseCount - 1].checksum;\n  }\n\n  function latestReleaseUrl() constant public returns (string) {\n    return releases[releaseCount - 1].url;\n  }\n\n  function releaseChecksum(uint8 index) constant public returns (bytes32) {\n    return releases[index].checksum;\n  }\n\n  function releaseUrl(uint8 index) constant public returns (string) {\n    return releases[index].url;\n  }\n\n  struct Version {\n    bytes32 checksum;\n    string url;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1625, "code": "ntract SLoader {\n  uint8 public releaseCount;\n  Version[] releases;\n  address owner;\n\n  modifier ifOwner {\n    require(owner == msg.sender);\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function addRelease(bytes32 checksum, string url) ifOwner public {\n    releases.push(Version(checksum, url));\n    releaseCount++;\n  }\n\n  function latestReleaseChecksum() constant public returns (bytes32) {\n    return releases[releaseCount - 1].checksum;\n  }\n\n  function latestReleaseUrl() constant public returns (string) {\n    return releases[releaseCount - 1].url;\n  }\n\n  function releaseChecksum(uint8 index) constant public returns (bytes32) {\n    return releases[index].checksum;\n  }\n\n  function releaseUrl(uint8 index) constant public returns (string) {\n    return releases[index].url;\n  }\n\n  struct Version {\n    bytes32 checksum;\n    string url;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0x25\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1630, "code": "ntract SLoader {\n  uint8 public releaseCount;\n  Version[] releases;\n  address owner;\n\n  modifier ifOwner {\n    require(owner == msg.sender);\n    _;\n  }\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function addRelease(bytes32 checksum, string url) ifOwner public {\n    releases.push(Version(checksum, url));\n    releaseCount++;\n  }\n\n  function latestReleaseChecksum() constant public returns (bytes32) {\n    return releases[releaseCount - 1].checksum;\n  }\n\n  function latestReleaseUrl() constant public returns (string) {\n    return releases[releaseCount - 1].url;\n  }\n\n  function releaseChecksum(uint8 index) constant public returns (bytes32) {\n    return releases[index].checksum;\n  }\n\n  function releaseUrl(uint8 index) constant public returns (string) {\n    return releases[index].url;\n  }\n\n  struct Version {\n    bytes32 checksum;\n    string url;\n  }\n}", "debug": "keccac_1_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n2*storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SLoader_4 + calldata_SLoader_32 + 4)) +\n32: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\ncaller: 0x0\nstorage_2: 0x0\ncalldata_SLoader_0: 0x8b409cec00000000000000000000000000000000000000000000000000000000\ncalldatasize_SLoader: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addRelease(bytes32,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x99af965b51312c8869fac5f527f47af92fccf83c.sol", "function": "addRelease(bytes32,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}