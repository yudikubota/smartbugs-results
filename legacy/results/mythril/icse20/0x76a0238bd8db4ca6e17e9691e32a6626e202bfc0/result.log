{"error": null, "issues": [{"address": 287, "code": ") {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(addre", "debug": "calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 108, "title": "Integer Overflow ", "type": "Warning"}, {"address": 436, "code": "ngth);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BytetherOV_0: 0x6377961c00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetVerifyCodes(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetVerifyCodes(string)", "lineno": 176, "title": "Integer Overflow ", "type": "Warning"}, {"address": 539, "code": "ngth);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xa0\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)): 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_BytetherOV_0: 0x6377961c00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetVerifyCodes(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetVerifyCodes(string)", "lineno": 176, "title": "Integer Overflow ", "type": "Warning"}, {"address": 626, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        va", "debug": "calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BytetherOV_0: 0x656cbc8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnership(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnership(string,uint256)", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 638, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        va", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_BytetherOV_0: 0x656cbc8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnership(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnership(string,uint256)", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 647, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        va", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_BytetherOV_0: 0x656cbc8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnership(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnership(string,uint256)", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 653, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        va", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_BytetherOV_0: 0x656cbc8600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnership(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnership(string,uint256)", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 980, "code": ".length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uin", "debug": "calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 149, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1309, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(", "debug": "calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_BytetherOV_0: 0xb08cf55600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnershipByAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnershipByAddress(string,address)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1321, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_BytetherOV_0: 0xb08cf55600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnershipByAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnershipByAddress(string,address)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1330, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_BytetherOV_0: 0xb08cf55600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnershipByAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnershipByAddress(string,address)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1336, "code": "ems[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_BytetherOV_0: 0xb08cf55600000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `GetOwnershipByAddress(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetOwnershipByAddress(string,address)", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2949, "debug": "The exception is triggered under the following conditions:\n\ncalldata_BytetherOV_4 + calldata_BytetherOV_4: 0xa0\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BytetherOV_0: 0x6377961c00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "GetVerifyCodes(string)", "lineno": 182, "title": "Exception state", "type": "Informational"}, {"address": 4479, "code": "rifyCod", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x20\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_BytetherOV_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 174, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4626, "code": "btcAddress) cons", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x10\nmem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_BytetherOV_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 174, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6102, "code": "s[] public moderators;\n\n   ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BytetherOV_4: 0x0\nstorage_1: 0x0\ncalldata_BytetherOV_0: 0xbd842a1100000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "_function_0xbd842a11", "lineno": 7, "title": "Exception state", "type": "Informational"}, {"address": 6570, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x40\nstorage_2 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x93ffffffb7fe00000000000000000000000000000000000000000000000000d1\nkeccac_2_+\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0xff000002027eb4fff80000000020983000effffb80b1000000010500c1fffffc\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0x4e5f6b8abe58e611619e820ffffffffffffffffffffffffffffffffffffffffd\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncalldata_BytetherOV_32 + 4: 0x0\nstorage_1 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6620, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "keccac_115792089237316195423570985008687907853269984665640564039457584007913129639932_+\n4*\nstorage_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\n2: 0xfc044541a4000800400000002000000008004000000000880000002048000200\nstorage_115792089237316195423570985008687907853269984665640564039457584007913129639932 +\n4*\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))) +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))) +\n2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0xe000000000000000000000000000000000000000000000000000000000000000\ncalldata_BytetherOV_4 + calldata_BytetherOV_4: 0x1f\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncalldata_BytetherOV_32 + 4: 0x0\nstorage_1 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6642, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "keccac_115792089237316195423570985008687907853269984665640564039457584007913129639932_+\n4*\nstorage_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\n2: 0xefffffffffffffffffffffffffffffd292424924800000889347fcfd7f\nkeccac_2_+\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_115792089237316195423570985008687907853269984665640564039457584007913129639932 +\n4*\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))) +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))) +\n2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0xfffffffffffffffffffffffffffff00000000000000000000000000000000000\ncalldata_BytetherOV_4 + calldata_BytetherOV_4: 0x1f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\ncalldata_BytetherOV_32 + 4: 0x0\nstorage_1 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6723, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "keccac_115792089237316195423570985008687907853269984665640564039457584007913129639932_+\n4*\nstorage_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4)))_+\n2: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_115792089237316195423570985008687907853269984665640564039457584007913129639932 +\n4*\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))) +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))) +\n2: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\ncalldata_BytetherOV_4 + calldata_BytetherOV_4: 0x1f\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0x1\ncalldata_BytetherOV_32 + 4: 0x0\nstorage_1 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6770, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x20\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_115792089237316195423570985008687907853269984665640564039457584007913129639932 +\n4*\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))) +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))) +\n2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_BytetherOV_0: 0x49ff305f00000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4))): 0x1\ncalldata_BytetherOV_32 + 4: 0x0\nstorage_1 +\nkeccac_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `UnclockVerification(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "UnclockVerification(string,uint256)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6890, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x4\nstorage_2 +\n4*\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128) +\nkeccac_KECCAC_mem_192_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_32_+_36))_+\n128): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd1\nkeccac_2_+\n4*\nstorage_KECCAC_mem_192_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_32_+_36))_+\n128)_+\nkeccac_KECCAC_mem_192_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_4))_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_BytetherOV_4_+_calldata_BytetherOV_32_+_36))_+\n128): 0xfec07ffffffffffffffc03ffffffffffe0000000003800000031200000002000\ncalldata_BytetherOV_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6919, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x10\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_BytetherOV_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6933, "code": "       SUCCESS,\n        ERROR_EXIST,\n        ERROR_NOT_EXIST,\n        ERROR_PARAM\n    }\n\n    struct OwnerShip {\n        address myEther;\n        uint verifyCode;\n        string referCode;\n        uint createTime;\n    }\n    \n    uint public total = 0;\n    bool public maintaining = false;\n    \n    // bitcoin_address -> OwnerShip list\n    mapping(string => OwnerShip[]) items;\n    \n    modifier isActive {\n        require(maintaining != true);\n        _;\n    }\n\n    function BytetherOV() public {\n        owner = msg.sender;\n    }\n\n    function () payable public {}\n\n    // event\n    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);\n    \n    // moderators function\n    function ToggleMaintenance() onlyModerators public {\n        maintaining = !maintaining;\n    }\n    \n    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {\n        // remove from the verify code list\n        var array = items[_btcAddress];\n        for (uint i = 0; i<array.length; i++){\n            if (array[i].verifyCode == _verifyCode) {\n                if (i != array.length-1) {\n                    array[i] = array[array.length-1];\n                }\n                delete array[array.length-1];\n                array.length--;\n                total--;\n                return ResultCode.SUCCESS;\n            }\n        }\n        return ResultCode.ERROR_NOT_EXIST;\n    }\n    \n    // public function\n    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                var item = array[i];\n                return (item.myEther, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function GetOwnershipByAddress(string _btcAddress, address _etherAddress) constant public returns(uint, string) {\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].myEther == _etherAddress) {\n                var item = array[i];\n                return (item.verifyCode, item.referCode);\n            }\n        }\n        return (0, \"\");\n    }\n    \n    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {\n        if (bytes(_btcAddress).length == 0 || _verifyCode == 0) {\n            LogCreate(0, _verifyCode, ResultCode.ERROR_PARAM);\n            return ResultCode.ERROR_PARAM;\n        }\n        \n        bytes32 btcAddressHash = keccak256(_btcAddress);\n        var array = items[_btcAddress];\n        for (uint i=0; i<array.length; i++) {\n            if (array[i].verifyCode == _verifyCode) {\n                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);\n                return ResultCode.ERROR_EXIST;\n            }\n        }\n        OwnerShip memory item;\n        item.myEther = msg.sender;\n        item.verifyCode = _verifyCode;\n        item.referCode = _referCode;\n        item.createTime = now;\n\n        total++;\n        array.push(item);\n        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);\n        return ResultCode.SUCCESS;\n    }\n    \n    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {\n        var array = items[_btcAddress];\n        uint[] memory verifyCodes = new uint[](array.length);\n        for (uint i=0; i<array.length; i++) {\n            verifyCodes[i] = array[i].verifyCode;\n        }\n        return verifyCodes;\n    }\n}", "debug": "calldata_BytetherOV_4 + calldata_BytetherOV_4: 0x10\nmem_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n64: 0xe804d7ffb5f8efd842fffdffefdd0c15000000000000000fffffffffffffffef\nmem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n64: 0x3ffefffffffefffffffffffffa22f7eaffffffffffffffeffffffffffffffff4\ncalldata_BytetherOV_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_BytetherOV_0: 0x730fc07700000000000000000000000000000000000000000000000000000000\ncalldatasize_BytetherOV: 0x4\nstorage_KECCAC_mem_192 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_BytetherOV_4 + calldata_BytetherOV_32 + 36)) +\n128): 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `AddOwnership(string,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x76a0238bd8db4ca6e17e9691e32a6626e202bfc0.sol", "function": "AddOwnership(string,uint256,string)", "lineno": 70, "title": "Integer Overflow ", "type": "Warning"}], "success": true}