{
  "contract": "0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a",
  "tool": "mythril",
  "start": 1563696916.2585442,
  "end": 1563697122.823437,
  "duration": 206.56489276885986,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1563,
        "code": "msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();\n    }\n\n\n    // -------------------",
        "debug": "calldata_XHHM_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XHHM_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_XHHM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/39/0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 271,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7450,
        "code": "ion add(uint25",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_XHHM_32 + 4: 0x1\nstorage_1: 0x0\ncalldata_XHHM_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_XHHM: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/39/0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol",
        "function": "transfer(address,uint256)",
        "lineno": 112,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7467,
        "code": "-----",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XHHM_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_XHHM_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XHHM_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_1: 0x0\ncalldata_XHHM_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_XHHM: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/39/0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 119,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7480,
        "code": "---\n// ERC Tok",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XHHM_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\ncalldata_XHHM_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XHHM_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_1: 0x0\ncalldata_XHHM_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_XHHM: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/39/0x1774e30a3daab7bbace3ce4c64ddc6a4f29a975a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 119,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}