{
  "contract": "0x80248bb8bd26f449dea5b4d01faf936075b7111d",
  "tool": "mythril",
  "start": 1563619079.7656858,
  "end": 1563619379.6829453,
  "duration": 299.9172594547272,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 988,
        "code": ".length; ++i) {\n            balanceOf[recipients[i]] += amounts[i];\n            total += amounts[i];\n            emit Transfer(0x0, recipients[i], amounts[i]);\n        }\n\n        totalSupply += total;\n        \n    }\n\n    /**\n     * The last mint that will ever happen. Disables the multiMint function and mints remaining 40% of tokens (in\n     * regard of 60% tokens minted before) to a `tokenDistributor` address.\n     */\n    function lastMint () external {\n\n        require(tokenDistributor != 0x0 && tokenDistributor == msg.sender && totalSupply > 0);\n\n        uint256 remaining = totalSupply * 4",
        "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x2f81bc7100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2f81bc71`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x2f81bc71",
        "lineno": 377,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1012,
        "code": ".length; ++i) {\n            balanceOf[recipients[i]] += amounts[i];\n            total += amounts[i];\n            emit Transfer(0x0, recipients[i], amounts[i]);\n        }\n\n        totalSupply += total;\n        \n    }\n\n    /**\n     * The last mint that will ever happen. Disables the multiMint function and mints remaining 40% of tokens (in\n     * regard of 60% tokens minted before) to a `tokenDistributor` address.\n     */\n    function lastMint () external {\n\n        require(tokenDistributor != 0x0 && tokenDistributor == msg.sender && totalSupply > 0);\n\n        uint256 remaining = totalSupply * 4",
        "debug": "calldata_tokenRecipient_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x2f81bc7100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2f81bc71`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x2f81bc71",
        "lineno": 377,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1018,
        "code": ".length; ++i) {\n            balanceOf[recipients[i]] += amounts[i];\n            total += amounts[i];\n            emit Transfer(0x0, recipients[i], amounts[i]);\n        }\n\n        totalSupply += total;\n        \n    }\n\n    /**\n     * The last mint that will ever happen. Disables the multiMint function and mints remaining 40% of tokens (in\n     * regard of 60% tokens minted before) to a `tokenDistributor` address.\n     */\n    function lastMint () external {\n\n        require(tokenDistributor != 0x0 && tokenDistributor == msg.sender && totalSupply > 0);\n\n        uint256 remaining = totalSupply * 4",
        "debug": "calldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_tokenRecipient_0: 0x2f81bc7100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2f81bc71`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x2f81bc71",
        "lineno": 377,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4291,
        "code": " address.\n     */\n    function lastMin",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_0_+_36_+_calldata_tokenRecipient_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tokenRecipient_0 + 36 + calldata_tokenRecipient_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_tokenRecipient_0: 0x2f81bc7100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2f81bc71`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x2f81bc71",
        "lineno": 389,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4485,
        "code": "   uint256 remaining",
        "debug": "storage_3: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_tokenRecipient_0 + 36 + calldata_tokenRecipient_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x1\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_tokenRecipient_0: 0x2f81bc7100000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_32 + 4: 0x1\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2f81bc71`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x2f81bc71",
        "lineno": 395,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5839,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x57376198",
        "lineno": 430,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6086,
        "code": "the totalSupply\n",
        "debug": "storage_3: 0x40a4d4499b6767cf281c1a6e5e480ce00334000001400e24d4ea19da1d3a5020\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_tokenRecipient_0: 0x586fc5b500000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x586fc5b5`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x586fc5b5",
        "lineno": 400,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6133,
        "code": "int functions forever\n\n    }\n\n    /**\n     * ERC20 to",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_tokenRecipient_0: 0x586fc5b500000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\n10_EXP_Concat(0, Extract(15, 8, storage_2)): 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x586fc5b5",
        "lineno": 406,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9613,
        "code": "        signer == ecreco",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_32 + 228: 0x80\ncalldata_tokenRecipient_32 + 132: 0x0\nstorage_keccac_calldata_tokenRecipient_32_+_164: 0x0\ntimestamp: 0x0\ncalldata_tokenRecipient_0: 0x51c9a08c00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x80248bb8bd26f449dea5b4d01faf936075b7111d.sol",
        "function": "_function_0x51c9a08c",
        "lineno": 137,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}