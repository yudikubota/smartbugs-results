{"error": null, "issues": [{"address": 5696, "code": "      return true;\n    }\n\n    function delegateAllowance(address owner", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "setMinimumGasPriceForFutureRefunds(uint256)", "lineno": 1044, "title": "Message call to external contract", "type": "Informational"}, {"address": 5769, "code": "ender) public view returns (uint256) {\n        return allowance(ow", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "setMinimumGasPriceForFutureRefunds(uint256)", "lineno": 1047, "title": "State change after external call", "type": "Warning"}, {"address": 5869, "code": "dev Ret", "debug": "storage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7\nstorage_13: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_UniversalUSD_0: 0x23f2cbb000000000000000000000000000000000000000000000000000000000\ncalldatasize_UniversalUSD: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sponsorGas()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "sponsorGas()", "lineno": 989, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6670, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "_function_0x2aed7f3f", "lineno": 1138, "title": "Message call to external contract", "type": "Warning"}, {"address": 12690, "code": "eApprovalAllArgs(_spender, _addedValue, ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "delegateAllowance(address,address)", "lineno": 643, "title": "Message call to external contract", "type": "Informational"}, {"address": 13840, "code": "v Increase the amount of tokens that an owner allowed t", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "delegateApprove(address,uint256,address)", "lineno": 633, "title": "Message call to external contract", "type": "Informational"}, {"address": 19015, "code": " balances.addBalance(_to, _value);\n        emit Tran", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "transferFrom(address,address,uint256)", "lineno": 870, "title": "Message call to external contract", "type": "Informational"}, {"address": 22567, "code": "onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(_to, balance);\n    }\n\n    function paused() public pure returns (bool) {\n        return false;\n    }\n\n    /**  \n    *@dev allows owner of UniversalUSD to gain ownership of any contract that UniversalUSD currently owns\n    */\n    function reclaimContract(Ownable _ownable) external onlyOwner {\n        _ownable.transferOwnership(owner);\n    }\n\n    function _burnAllArgs(address _burner, uint256 _value) internal {\n        //round down burn amount so that the lowest amount allowed is 1 cent\n        uint burnAmount = _value.div(10 ** uint256(DECIMALS - ROUNDING)).mul(10 ** uint256(DECIMALS - ROUNDING));\n        super._burnAllArgs(_burner, burnAmount);\n    }\n}", "debug": "storage_11: 0xffc000000000000000000002bfffbbff17fc8e84cb1860000000637280000003\nstorage_660301456019777184113296434797620819555017468543624515662331739614079884729 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_11: 0x0\ngasprice: 0x1\ncalldata_UniversalUSD_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UniversalUSD: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "transferFrom(address,address,uint256)", "lineno": 1117, "title": "Integer Overflow ", "type": "Warning"}, {"address": 22569, "code": "onlyOwner {\n        uint256 balance = token.balanceOf(this);\n        token.transfer(_to, balance);\n    }\n\n    function paused() public pure returns (bool) {\n        return false;\n    }\n\n    /**  \n    *@dev allows owner of UniversalUSD to gain ownership of any contract that UniversalUSD currently owns\n    */\n    function reclaimContract(Ownable _ownable) external onlyOwner {\n        _ownable.transferOwnership(owner);\n    }\n\n    function _burnAllArgs(address _burner, uint256 _value) internal {\n        //round down burn amount so that the lowest amount allowed is 1 cent\n        uint burnAmount = _value.div(10 ** uint256(DECIMALS - ROUNDING)).mul(10 ** uint256(DECIMALS - ROUNDING));\n        super._burnAllArgs(_burner, burnAmount);\n    }\n}", "debug": "storage_11: 0xffffefffffeffffffffffffffffffffffffffffffffffffffffffffffff00002\nstorage_660301456019777184113296434797620819555017468543624515662331739614079884729 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_11: 0x0\ngasprice: 0x1\ncalldata_UniversalUSD_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UniversalUSD: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/33/0x6034430500520abbe9cda980e3b54b9e1f7dbcd5.sol", "function": "transferFrom(address,address,uint256)", "lineno": 1117, "title": "Integer Overflow ", "type": "Warning"}], "success": true}