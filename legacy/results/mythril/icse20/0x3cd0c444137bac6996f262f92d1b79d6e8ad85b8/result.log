{"error": null, "issues": [{"address": 124, "code": ", uint[] val)\n    public\n    payable\n    {\n        require(val.length==addr.length);\n        uint total;\n        for (uint j=0; j<val.length; j++)\n        {\n            require(addr[j]!=0x0);\n            total+=val[j];\n        }\n        if(msg.value>=total)\n        {\n            for (uint i=0; i<addr.length; i++)\n            {\n                addr[i].transfer(val[i]);\n            }\n        }\n    }\n}", "debug": "calldata_Distributor_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Distributor_0: 0x2d08d40800000000000000000000000000000000000000000000000000000000\ncalldatasize_Distributor: 0x4\n", "description": "A possible integer overflow exists in the function `_function_0x2d08d408`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/23/0x3cd0c444137bac6996f262f92d1b79d6e8ad85b8.sol", "function": "_function_0x2d08d408", "lineno": 29, "title": "Integer Overflow ", "type": "Warning"}, {"address": 613, "code": "     }\n    }\n}", "debug": "SOLVER OUTPUT:\nmem_128 +\n32 +\n32*calldata_Distributor_4 + calldata_Distributor_4: 0x1\ncallvalue: 0x0\nmem_0 + 192 + 32*calldata_Distributor_4 + calldata_Distributor_4: 0x0\ncalldata_Distributor_cpy: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Distributor_0: 0x2d08d40800000000000000000000000000000000000000000000000000000000\ncalldatasize_Distributor: 0x4\ncalldata_Distributor_4 + calldata_Distributor_4: 0x1\n", "description": "In the function `_function_0x2d08d408` a non-zero amount of Ether is sent to an address taken from function arguments.\nIt seems that this function can be called without restrictions.", "filename": "/unique_chucks/23/0x3cd0c444137bac6996f262f92d1b79d6e8ad85b8.sol", "function": "_function_0x2d08d408", "lineno": 46, "title": "Ether send", "type": "Warning"}, {"address": 761, "code": "ce);\n    }\n    \n    function", "debug": "", "description": "A possible transaction order independence vulnerability exists in function Withdrawal(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/23/0x3cd0c444137bac6996f262f92d1b79d6e8ad85b8.sol", "function": "Withdrawal()", "lineno": 26, "title": "Transaction order dependence", "type": "Warning"}], "success": true}