{"error": null, "issues": [{"address": 1150, "code": "//\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _own", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_XToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_XToken_0: 0x36351c7c00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `recharge(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "recharge(address,uint256)", "lineno": 71, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1260, "code": "s(0x420534893844e08af857df", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_0,_256): 0x0\ncalldata_XToken_32 + 4: 0x1\ncalldata_XToken_0: 0x36351c7c00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `recharge(address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "recharge(address,uint256)", "lineno": 72, "title": "Integer Underflow", "type": "Warning"}, {"address": 1764, "code": "       for (uint i = 0; ", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037086: 0x78fefb8b23e336540547be8717586d697fa7e1b3da0e50b125bc9fb9e3a087a\ncalldata_XToken_32 + 4: 0xbffffbffffffffffffffffdffb3ffffffffffffffffbfffffffffff5ffda343f\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x57763c0800000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncalldata_XToken_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sell_goods(uint256,uint256,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "sell_goods(uint256,uint256,address)", "lineno": 156, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1774, "code": "] != b[i])\n      ", "debug": "storage_2: 0x70\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x57763c0800000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncalldata_XToken_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `sell_goods(uint256,uint256,address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "sell_goods(uint256,uint256,address)", "lineno": 157, "title": "Integer Underflow", "type": "Warning"}, {"address": 2363, "code": ";\n\ncontract XToken", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2415, "code": "; i++) {\n            ", "debug": "mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 125, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3185, "code": "ntract XToken {\n    /**\n    \u4ee3\u5e01\uff1a\u5546\u54c1\u8d2d\u4e70\n    \u521d\u59cb\u5316\u65f6\u5b9a\u4e49\u5546\u54c1\u63cf\u8ff0\uff0c\u5546\u54c1\u4ef7\u683c\u548c\u5355\u4f4d\n    \u5546\u54c1\u5546\u5bb6:\u5373\u6536\u6b3e\u65b9\n    \u4e70\u5bb6\uff1a\u5373\u51fa\u8d44\u65b9\n    */\n    struct Goods {\n        string _desc;   //\u5907\u6ce8\n        string _name;   //\u5546\u54c1\u540d\u79f0\n        string _unit;   //\u5546\u54c1\u8ba1\u91cf\u5355\u4f4d\n        uint _price;    //\u5546\u54c1\u4ef7\u683c\n        address _shopowner; //\u5e97\u957f\n    }\n\n    /**\n    \u4e70\u5bb6\u8d2d\u7269\u6e05\u5355\n    */\n    struct ShoppingItem {\n        uint _id;\n        uint _count;\n    }\n    struct ShoppingList {\n        address _buyer;\n        ShoppingItem[] _items;\n    }\n\n    address private _owner; //\u5e73\u53f0\u62e5\u6709\u8005\n    address private _finance; //\u8d1f\u8d23\u8d22\u7ecf\uff0c\u5e73\u53f0\u6536\u6b3e\u4eba\u5458\n    uint private _percentage; //\u63a5\u767e\u5206\u6bd4\u63d0\u6210\n\n    //\u5546\u54c1\u5217\u8868\n    Goods[] private _goods;\n    //\u4e70\u5bb6\u6e05\u5355\n    ShoppingList[] private _buyers;\n\n\n\tmapping (address => uint) private balances;\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\n\t\trequire(balances[from] > amount, \"\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u53f7\u6ca1\u6709\u66f4\u591a\u989d\u5ea6\");\n\n\t\tbalances[from] -= amount;\n\t\tbalances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n    /**\n    \u53ea\u6709\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u7ed9\u5176\u5b83\u8d26\u53f7\u5145\u503c\n     */\n    function recharge(address to, uint amount) public returns(bool) {\n        balances[to] += amount;\n        balances[_owner] -= amount;//\u603b\u8d26\u53f7\u6570\u636e\u8981\u51cf\u5c11\uff0c\u4fdd\u8bc1\u5b58\u91cf\u4e00\u5b9a\n        emit Transfer(_owner, to, amount);\n        return true;\n    } \n\n    constructor(uint percent) public {\n\t\t//balances[msg.sender] = 100000000000;\n\n        //_owner = msg.sender;\n        _percentage = percent; \n\n        //\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //\u516c\u94fe\u8d26\u53f7\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\n\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //\u79c1\u6709\u94fe\u8d26\u53f7\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \n        //\u4ee3\u5e01\u603b\u91cf\n        balances[_owner] = 100000000000;\n    }\n\n    function set_percentage(uint percentage) public {\n        require(msg.sender == _owner, \"\u975e\u5e73\u53f0\u7ba1\u7406\u5458\uff0c\u4e0d\u80fd\u4fee\u6539\u63d0\u6210\");\n\n        _percentage = percentage;\n    }\n\n    /**\n     */\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\n        require(price > 0, \"\u5546\u54c1\u4ef7\u683c\u9700\u8981\u5927\u4e8e0\");\n        require(shopowner != address(0), \"\u5546\u5bb6\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\");\n        /**\n        \u65b0\u589e\u5546\u54c1\uff0c\u6bcf\u4e2a\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\uff1a\u4ef7\u683c\uff0c\u5355\u4f4d\uff0c\u540d\u79f0\uff0c\u62e5\u6709\u8005\n        */\n        Goods memory newGoods = Goods({\n            _name: name,\n            _unit: unit,\n            _price: price,\n            _shopowner: shopowner,\n            _desc: desc\n        });\n        \n        _goods.push(newGoods);\n\n        //\u8fd4\u56de\u5546\u54c1\uff29\uff24\n        return _goods.length;\n    }\n\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\n        /**\n        \u51fa\u552e\u5546\u54c1\uff1a\u4e70\u5bb6\u9700\u8981\u5411\u5e97\u957f\u3000\u6309\u5546\u54c1\u540d\u548c\u6570\u91cf\uff0c\u652f\u4ed8\u8d39\u7528\n        */\n        \n        require(count > 0, \"\u8d2d\u4e70\u6570\u636e\u4e0d\u80fd\u4e3a0\");\n        require(buyer != address(0), \"\u4e70\u5bb6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        /**\n        \u67e5\u627e\u662f\u5426\u6709\u6307\u5b9a\u7684\u5546\u54c1\u540d\uff0c\u5982\u679c\u6709\u5c31\u652f\u4ed8\uff0c\u6ca1\u6709\u8fd4\u56de\n         */\n\n        uint price;\n        uint p_shop;\n        uint p_owner;\n        /**\u8fd9\u91cc\u540e\u9762\u9700\u8981\u4fee\u6539\u4e3aid\u6765\u67e5\u627e\uff0c\u4e0d\u80fd\u7528\u5546\u54c1\u540d\uff0c\u56e0\u4e3a\u5546\u54c1\u540d\u6709\u91cd\u590d */\n        for (uint i = 0; i < _goods.length; i++) {\n            if( i ==  goodsID) {\n\n                price = _goods[i]._price * count;\n\n                p_shop = price * (100 - _percentage) / 100;\n                p_owner = price * _percentage;\n\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\n                    return 0;\n                }\n                if(false == send_coin(buyer, _finance, p_owner)) {\n                    return 0;\n                }\n\n                //\u53ea\u5b58\u5728\u4e70\u5bb6\u6e05\u5355\u4e2d\n                return price;\n            }\n        }\n\n        return 0;\n    }\n\n\n\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        // @todo unroll this loop\n        for (uint i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n            {\n                return false;\n            }    \n        return true;\n    }\n    \n\n\tfunction get_balance(address addr) public returns(uint) {\n\t\treturn balances[addr];\n\t}\n}", "debug": "storage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n5*storage_3: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n5*storage_3: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3214, "code": "ntract XToken {\n    /**\n    \u4ee3\u5e01\uff1a\u5546\u54c1\u8d2d\u4e70\n    \u521d\u59cb\u5316\u65f6\u5b9a\u4e49\u5546\u54c1\u63cf\u8ff0\uff0c\u5546\u54c1\u4ef7\u683c\u548c\u5355\u4f4d\n    \u5546\u54c1\u5546\u5bb6:\u5373\u6536\u6b3e\u65b9\n    \u4e70\u5bb6\uff1a\u5373\u51fa\u8d44\u65b9\n    */\n    struct Goods {\n        string _desc;   //\u5907\u6ce8\n        string _name;   //\u5546\u54c1\u540d\u79f0\n        string _unit;   //\u5546\u54c1\u8ba1\u91cf\u5355\u4f4d\n        uint _price;    //\u5546\u54c1\u4ef7\u683c\n        address _shopowner; //\u5e97\u957f\n    }\n\n    /**\n    \u4e70\u5bb6\u8d2d\u7269\u6e05\u5355\n    */\n    struct ShoppingItem {\n        uint _id;\n        uint _count;\n    }\n    struct ShoppingList {\n        address _buyer;\n        ShoppingItem[] _items;\n    }\n\n    address private _owner; //\u5e73\u53f0\u62e5\u6709\u8005\n    address private _finance; //\u8d1f\u8d23\u8d22\u7ecf\uff0c\u5e73\u53f0\u6536\u6b3e\u4eba\u5458\n    uint private _percentage; //\u63a5\u767e\u5206\u6bd4\u63d0\u6210\n\n    //\u5546\u54c1\u5217\u8868\n    Goods[] private _goods;\n    //\u4e70\u5bb6\u6e05\u5355\n    ShoppingList[] private _buyers;\n\n\n\tmapping (address => uint) private balances;\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\n\t\trequire(balances[from] > amount, \"\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u53f7\u6ca1\u6709\u66f4\u591a\u989d\u5ea6\");\n\n\t\tbalances[from] -= amount;\n\t\tbalances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n    /**\n    \u53ea\u6709\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u7ed9\u5176\u5b83\u8d26\u53f7\u5145\u503c\n     */\n    function recharge(address to, uint amount) public returns(bool) {\n        balances[to] += amount;\n        balances[_owner] -= amount;//\u603b\u8d26\u53f7\u6570\u636e\u8981\u51cf\u5c11\uff0c\u4fdd\u8bc1\u5b58\u91cf\u4e00\u5b9a\n        emit Transfer(_owner, to, amount);\n        return true;\n    } \n\n    constructor(uint percent) public {\n\t\t//balances[msg.sender] = 100000000000;\n\n        //_owner = msg.sender;\n        _percentage = percent; \n\n        //\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //\u516c\u94fe\u8d26\u53f7\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\n\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //\u79c1\u6709\u94fe\u8d26\u53f7\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \n        //\u4ee3\u5e01\u603b\u91cf\n        balances[_owner] = 100000000000;\n    }\n\n    function set_percentage(uint percentage) public {\n        require(msg.sender == _owner, \"\u975e\u5e73\u53f0\u7ba1\u7406\u5458\uff0c\u4e0d\u80fd\u4fee\u6539\u63d0\u6210\");\n\n        _percentage = percentage;\n    }\n\n    /**\n     */\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\n        require(price > 0, \"\u5546\u54c1\u4ef7\u683c\u9700\u8981\u5927\u4e8e0\");\n        require(shopowner != address(0), \"\u5546\u5bb6\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\");\n        /**\n        \u65b0\u589e\u5546\u54c1\uff0c\u6bcf\u4e2a\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\uff1a\u4ef7\u683c\uff0c\u5355\u4f4d\uff0c\u540d\u79f0\uff0c\u62e5\u6709\u8005\n        */\n        Goods memory newGoods = Goods({\n            _name: name,\n            _unit: unit,\n            _price: price,\n            _shopowner: shopowner,\n            _desc: desc\n        });\n        \n        _goods.push(newGoods);\n\n        //\u8fd4\u56de\u5546\u54c1\uff29\uff24\n        return _goods.length;\n    }\n\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\n        /**\n        \u51fa\u552e\u5546\u54c1\uff1a\u4e70\u5bb6\u9700\u8981\u5411\u5e97\u957f\u3000\u6309\u5546\u54c1\u540d\u548c\u6570\u91cf\uff0c\u652f\u4ed8\u8d39\u7528\n        */\n        \n        require(count > 0, \"\u8d2d\u4e70\u6570\u636e\u4e0d\u80fd\u4e3a0\");\n        require(buyer != address(0), \"\u4e70\u5bb6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        /**\n        \u67e5\u627e\u662f\u5426\u6709\u6307\u5b9a\u7684\u5546\u54c1\u540d\uff0c\u5982\u679c\u6709\u5c31\u652f\u4ed8\uff0c\u6ca1\u6709\u8fd4\u56de\n         */\n\n        uint price;\n        uint p_shop;\n        uint p_owner;\n        /**\u8fd9\u91cc\u540e\u9762\u9700\u8981\u4fee\u6539\u4e3aid\u6765\u67e5\u627e\uff0c\u4e0d\u80fd\u7528\u5546\u54c1\u540d\uff0c\u56e0\u4e3a\u5546\u54c1\u540d\u6709\u91cd\u590d */\n        for (uint i = 0; i < _goods.length; i++) {\n            if( i ==  goodsID) {\n\n                price = _goods[i]._price * count;\n\n                p_shop = price * (100 - _percentage) / 100;\n                p_owner = price * _percentage;\n\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\n                    return 0;\n                }\n                if(false == send_coin(buyer, _finance, p_owner)) {\n                    return 0;\n                }\n\n                //\u53ea\u5b58\u5728\u4e70\u5bb6\u6e05\u5355\u4e2d\n                return price;\n            }\n        }\n\n        return 0;\n    }\n\n\n\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        // @todo unroll this loop\n        for (uint i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n            {\n                return false;\n            }    \n        return true;\n    }\n    \n\n\tfunction get_balance(address addr) public returns(uint) {\n\t\treturn balances[addr];\n\t}\n}", "debug": "mem_mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n5*storage_3: 0xfde7dbef9fbcee952ba2fefcee7f3f46f6fffcffffffffffffffffffffffffc5\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n5*storage_3: 0xfe6c3882c8c219105b1269338c14a907b57fe56d7e7402ce023400000973b6fb\nmem_mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0x0\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3228, "code": "ntract XToken {\n    /**\n    \u4ee3\u5e01\uff1a\u5546\u54c1\u8d2d\u4e70\n    \u521d\u59cb\u5316\u65f6\u5b9a\u4e49\u5546\u54c1\u63cf\u8ff0\uff0c\u5546\u54c1\u4ef7\u683c\u548c\u5355\u4f4d\n    \u5546\u54c1\u5546\u5bb6:\u5373\u6536\u6b3e\u65b9\n    \u4e70\u5bb6\uff1a\u5373\u51fa\u8d44\u65b9\n    */\n    struct Goods {\n        string _desc;   //\u5907\u6ce8\n        string _name;   //\u5546\u54c1\u540d\u79f0\n        string _unit;   //\u5546\u54c1\u8ba1\u91cf\u5355\u4f4d\n        uint _price;    //\u5546\u54c1\u4ef7\u683c\n        address _shopowner; //\u5e97\u957f\n    }\n\n    /**\n    \u4e70\u5bb6\u8d2d\u7269\u6e05\u5355\n    */\n    struct ShoppingItem {\n        uint _id;\n        uint _count;\n    }\n    struct ShoppingList {\n        address _buyer;\n        ShoppingItem[] _items;\n    }\n\n    address private _owner; //\u5e73\u53f0\u62e5\u6709\u8005\n    address private _finance; //\u8d1f\u8d23\u8d22\u7ecf\uff0c\u5e73\u53f0\u6536\u6b3e\u4eba\u5458\n    uint private _percentage; //\u63a5\u767e\u5206\u6bd4\u63d0\u6210\n\n    //\u5546\u54c1\u5217\u8868\n    Goods[] private _goods;\n    //\u4e70\u5bb6\u6e05\u5355\n    ShoppingList[] private _buyers;\n\n\n\tmapping (address => uint) private balances;\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\n\t\trequire(balances[from] > amount, \"\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u53f7\u6ca1\u6709\u66f4\u591a\u989d\u5ea6\");\n\n\t\tbalances[from] -= amount;\n\t\tbalances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n    /**\n    \u53ea\u6709\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u7ed9\u5176\u5b83\u8d26\u53f7\u5145\u503c\n     */\n    function recharge(address to, uint amount) public returns(bool) {\n        balances[to] += amount;\n        balances[_owner] -= amount;//\u603b\u8d26\u53f7\u6570\u636e\u8981\u51cf\u5c11\uff0c\u4fdd\u8bc1\u5b58\u91cf\u4e00\u5b9a\n        emit Transfer(_owner, to, amount);\n        return true;\n    } \n\n    constructor(uint percent) public {\n\t\t//balances[msg.sender] = 100000000000;\n\n        //_owner = msg.sender;\n        _percentage = percent; \n\n        //\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //\u516c\u94fe\u8d26\u53f7\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\n\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //\u79c1\u6709\u94fe\u8d26\u53f7\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \n        //\u4ee3\u5e01\u603b\u91cf\n        balances[_owner] = 100000000000;\n    }\n\n    function set_percentage(uint percentage) public {\n        require(msg.sender == _owner, \"\u975e\u5e73\u53f0\u7ba1\u7406\u5458\uff0c\u4e0d\u80fd\u4fee\u6539\u63d0\u6210\");\n\n        _percentage = percentage;\n    }\n\n    /**\n     */\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\n        require(price > 0, \"\u5546\u54c1\u4ef7\u683c\u9700\u8981\u5927\u4e8e0\");\n        require(shopowner != address(0), \"\u5546\u5bb6\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\");\n        /**\n        \u65b0\u589e\u5546\u54c1\uff0c\u6bcf\u4e2a\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\uff1a\u4ef7\u683c\uff0c\u5355\u4f4d\uff0c\u540d\u79f0\uff0c\u62e5\u6709\u8005\n        */\n        Goods memory newGoods = Goods({\n            _name: name,\n            _unit: unit,\n            _price: price,\n            _shopowner: shopowner,\n            _desc: desc\n        });\n        \n        _goods.push(newGoods);\n\n        //\u8fd4\u56de\u5546\u54c1\uff29\uff24\n        return _goods.length;\n    }\n\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\n        /**\n        \u51fa\u552e\u5546\u54c1\uff1a\u4e70\u5bb6\u9700\u8981\u5411\u5e97\u957f\u3000\u6309\u5546\u54c1\u540d\u548c\u6570\u91cf\uff0c\u652f\u4ed8\u8d39\u7528\n        */\n        \n        require(count > 0, \"\u8d2d\u4e70\u6570\u636e\u4e0d\u80fd\u4e3a0\");\n        require(buyer != address(0), \"\u4e70\u5bb6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        /**\n        \u67e5\u627e\u662f\u5426\u6709\u6307\u5b9a\u7684\u5546\u54c1\u540d\uff0c\u5982\u679c\u6709\u5c31\u652f\u4ed8\uff0c\u6ca1\u6709\u8fd4\u56de\n         */\n\n        uint price;\n        uint p_shop;\n        uint p_owner;\n        /**\u8fd9\u91cc\u540e\u9762\u9700\u8981\u4fee\u6539\u4e3aid\u6765\u67e5\u627e\uff0c\u4e0d\u80fd\u7528\u5546\u54c1\u540d\uff0c\u56e0\u4e3a\u5546\u54c1\u540d\u6709\u91cd\u590d */\n        for (uint i = 0; i < _goods.length; i++) {\n            if( i ==  goodsID) {\n\n                price = _goods[i]._price * count;\n\n                p_shop = price * (100 - _percentage) / 100;\n                p_owner = price * _percentage;\n\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\n                    return 0;\n                }\n                if(false == send_coin(buyer, _finance, p_owner)) {\n                    return 0;\n                }\n\n                //\u53ea\u5b58\u5728\u4e70\u5bb6\u6e05\u5355\u4e2d\n                return price;\n            }\n        }\n\n        return 0;\n    }\n\n\n\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        // @todo unroll this loop\n        for (uint i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n            {\n                return false;\n            }    \n        return true;\n    }\n    \n\n\tfunction get_balance(address addr) public returns(uint) {\n\t\treturn balances[addr];\n\t}\n}", "debug": "mem_mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3245, "code": "ntract XToken {\n    /**\n    \u4ee3\u5e01\uff1a\u5546\u54c1\u8d2d\u4e70\n    \u521d\u59cb\u5316\u65f6\u5b9a\u4e49\u5546\u54c1\u63cf\u8ff0\uff0c\u5546\u54c1\u4ef7\u683c\u548c\u5355\u4f4d\n    \u5546\u54c1\u5546\u5bb6:\u5373\u6536\u6b3e\u65b9\n    \u4e70\u5bb6\uff1a\u5373\u51fa\u8d44\u65b9\n    */\n    struct Goods {\n        string _desc;   //\u5907\u6ce8\n        string _name;   //\u5546\u54c1\u540d\u79f0\n        string _unit;   //\u5546\u54c1\u8ba1\u91cf\u5355\u4f4d\n        uint _price;    //\u5546\u54c1\u4ef7\u683c\n        address _shopowner; //\u5e97\u957f\n    }\n\n    /**\n    \u4e70\u5bb6\u8d2d\u7269\u6e05\u5355\n    */\n    struct ShoppingItem {\n        uint _id;\n        uint _count;\n    }\n    struct ShoppingList {\n        address _buyer;\n        ShoppingItem[] _items;\n    }\n\n    address private _owner; //\u5e73\u53f0\u62e5\u6709\u8005\n    address private _finance; //\u8d1f\u8d23\u8d22\u7ecf\uff0c\u5e73\u53f0\u6536\u6b3e\u4eba\u5458\n    uint private _percentage; //\u63a5\u767e\u5206\u6bd4\u63d0\u6210\n\n    //\u5546\u54c1\u5217\u8868\n    Goods[] private _goods;\n    //\u4e70\u5bb6\u6e05\u5355\n    ShoppingList[] private _buyers;\n\n\n\tmapping (address => uint) private balances;\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\n\t\trequire(balances[from] > amount, \"\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u53f7\u6ca1\u6709\u66f4\u591a\u989d\u5ea6\");\n\n\t\tbalances[from] -= amount;\n\t\tbalances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n    /**\n    \u53ea\u6709\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u7ed9\u5176\u5b83\u8d26\u53f7\u5145\u503c\n     */\n    function recharge(address to, uint amount) public returns(bool) {\n        balances[to] += amount;\n        balances[_owner] -= amount;//\u603b\u8d26\u53f7\u6570\u636e\u8981\u51cf\u5c11\uff0c\u4fdd\u8bc1\u5b58\u91cf\u4e00\u5b9a\n        emit Transfer(_owner, to, amount);\n        return true;\n    } \n\n    constructor(uint percent) public {\n\t\t//balances[msg.sender] = 100000000000;\n\n        //_owner = msg.sender;\n        _percentage = percent; \n\n        //\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //\u516c\u94fe\u8d26\u53f7\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\n\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //\u79c1\u6709\u94fe\u8d26\u53f7\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \n        //\u4ee3\u5e01\u603b\u91cf\n        balances[_owner] = 100000000000;\n    }\n\n    function set_percentage(uint percentage) public {\n        require(msg.sender == _owner, \"\u975e\u5e73\u53f0\u7ba1\u7406\u5458\uff0c\u4e0d\u80fd\u4fee\u6539\u63d0\u6210\");\n\n        _percentage = percentage;\n    }\n\n    /**\n     */\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\n        require(price > 0, \"\u5546\u54c1\u4ef7\u683c\u9700\u8981\u5927\u4e8e0\");\n        require(shopowner != address(0), \"\u5546\u5bb6\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\");\n        /**\n        \u65b0\u589e\u5546\u54c1\uff0c\u6bcf\u4e2a\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\uff1a\u4ef7\u683c\uff0c\u5355\u4f4d\uff0c\u540d\u79f0\uff0c\u62e5\u6709\u8005\n        */\n        Goods memory newGoods = Goods({\n            _name: name,\n            _unit: unit,\n            _price: price,\n            _shopowner: shopowner,\n            _desc: desc\n        });\n        \n        _goods.push(newGoods);\n\n        //\u8fd4\u56de\u5546\u54c1\uff29\uff24\n        return _goods.length;\n    }\n\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\n        /**\n        \u51fa\u552e\u5546\u54c1\uff1a\u4e70\u5bb6\u9700\u8981\u5411\u5e97\u957f\u3000\u6309\u5546\u54c1\u540d\u548c\u6570\u91cf\uff0c\u652f\u4ed8\u8d39\u7528\n        */\n        \n        require(count > 0, \"\u8d2d\u4e70\u6570\u636e\u4e0d\u80fd\u4e3a0\");\n        require(buyer != address(0), \"\u4e70\u5bb6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        /**\n        \u67e5\u627e\u662f\u5426\u6709\u6307\u5b9a\u7684\u5546\u54c1\u540d\uff0c\u5982\u679c\u6709\u5c31\u652f\u4ed8\uff0c\u6ca1\u6709\u8fd4\u56de\n         */\n\n        uint price;\n        uint p_shop;\n        uint p_owner;\n        /**\u8fd9\u91cc\u540e\u9762\u9700\u8981\u4fee\u6539\u4e3aid\u6765\u67e5\u627e\uff0c\u4e0d\u80fd\u7528\u5546\u54c1\u540d\uff0c\u56e0\u4e3a\u5546\u54c1\u540d\u6709\u91cd\u590d */\n        for (uint i = 0; i < _goods.length; i++) {\n            if( i ==  goodsID) {\n\n                price = _goods[i]._price * count;\n\n                p_shop = price * (100 - _percentage) / 100;\n                p_owner = price * _percentage;\n\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\n                    return 0;\n                }\n                if(false == send_coin(buyer, _finance, p_owner)) {\n                    return 0;\n                }\n\n                //\u53ea\u5b58\u5728\u4e70\u5bb6\u6e05\u5355\u4e2d\n                return price;\n            }\n        }\n\n        return 0;\n    }\n\n\n\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        // @todo unroll this loop\n        for (uint i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n            {\n                return false;\n            }    \n        return true;\n    }\n    \n\n\tfunction get_balance(address addr) public returns(uint) {\n\t\treturn balances[addr];\n\t}\n}", "debug": "mem_mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0x25\nmem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3250, "code": "ntract XToken {\n    /**\n    \u4ee3\u5e01\uff1a\u5546\u54c1\u8d2d\u4e70\n    \u521d\u59cb\u5316\u65f6\u5b9a\u4e49\u5546\u54c1\u63cf\u8ff0\uff0c\u5546\u54c1\u4ef7\u683c\u548c\u5355\u4f4d\n    \u5546\u54c1\u5546\u5bb6:\u5373\u6536\u6b3e\u65b9\n    \u4e70\u5bb6\uff1a\u5373\u51fa\u8d44\u65b9\n    */\n    struct Goods {\n        string _desc;   //\u5907\u6ce8\n        string _name;   //\u5546\u54c1\u540d\u79f0\n        string _unit;   //\u5546\u54c1\u8ba1\u91cf\u5355\u4f4d\n        uint _price;    //\u5546\u54c1\u4ef7\u683c\n        address _shopowner; //\u5e97\u957f\n    }\n\n    /**\n    \u4e70\u5bb6\u8d2d\u7269\u6e05\u5355\n    */\n    struct ShoppingItem {\n        uint _id;\n        uint _count;\n    }\n    struct ShoppingList {\n        address _buyer;\n        ShoppingItem[] _items;\n    }\n\n    address private _owner; //\u5e73\u53f0\u62e5\u6709\u8005\n    address private _finance; //\u8d1f\u8d23\u8d22\u7ecf\uff0c\u5e73\u53f0\u6536\u6b3e\u4eba\u5458\n    uint private _percentage; //\u63a5\u767e\u5206\u6bd4\u63d0\u6210\n\n    //\u5546\u54c1\u5217\u8868\n    Goods[] private _goods;\n    //\u4e70\u5bb6\u6e05\u5355\n    ShoppingList[] private _buyers;\n\n\n\tmapping (address => uint) private balances;\n\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n\n\tfunction send_coin(address from, address to, uint amount) private returns(bool sufficient) {\n\t\trequire(balances[from] > amount, \"\u53d1\u8d77\u4ea4\u6613\u7684\u8d26\u53f7\u6ca1\u6709\u66f4\u591a\u989d\u5ea6\");\n\n\t\tbalances[from] -= amount;\n\t\tbalances[to] += amount;\n\n\t\temit Transfer(from, to, amount);\n\t\treturn true;\n\t}\n\n    /**\n    \u53ea\u6709\u7ba1\u7406\u5458\u624d\u53ef\u4ee5\u7ed9\u5176\u5b83\u8d26\u53f7\u5145\u503c\n     */\n    function recharge(address to, uint amount) public returns(bool) {\n        balances[to] += amount;\n        balances[_owner] -= amount;//\u603b\u8d26\u53f7\u6570\u636e\u8981\u51cf\u5c11\uff0c\u4fdd\u8bc1\u5b58\u91cf\u4e00\u5b9a\n        emit Transfer(_owner, to, amount);\n        return true;\n    } \n\n    constructor(uint percent) public {\n\t\t//balances[msg.sender] = 100000000000;\n\n        //_owner = msg.sender;\n        _percentage = percent; \n\n        //\u6307\u5b9a\u4e24\u4e2a\u7279\u6b8a\u53f7\n        _owner = address(0x420534893844e08af857df1b4ee8e25b09eed227); //\u516c\u94fe\u8d26\u53f7\n        _finance = address(0x1Af666fB7D3fF7096eA3b47AB2A710fF10E5Cd41);\n\n        //_owner = address(0x18523c846681b51cdfa69a5daa251fb1977a151e); //\u79c1\u6709\u94fe\u8d26\u53f7\n        //_finance = address(0xbf62672b2705e59df2216499a94a2e53c928d53f); \n        //\u4ee3\u5e01\u603b\u91cf\n        balances[_owner] = 100000000000;\n    }\n\n    function set_percentage(uint percentage) public {\n        require(msg.sender == _owner, \"\u975e\u5e73\u53f0\u7ba1\u7406\u5458\uff0c\u4e0d\u80fd\u4fee\u6539\u63d0\u6210\");\n\n        _percentage = percentage;\n    }\n\n    /**\n     */\n    function add_goods(string name, string unit, uint price, address shopowner, string desc) public returns(uint) {\n        require(price > 0, \"\u5546\u54c1\u4ef7\u683c\u9700\u8981\u5927\u4e8e0\");\n        require(shopowner != address(0), \"\u5546\u5bb6\u5730\u5740\u4e0d\u80fd\u4e3a\u7a7a\");\n        /**\n        \u65b0\u589e\u5546\u54c1\uff0c\u6bcf\u4e2a\u5546\u54c1\u7684\u57fa\u672c\u5c5e\u6027\uff1a\u4ef7\u683c\uff0c\u5355\u4f4d\uff0c\u540d\u79f0\uff0c\u62e5\u6709\u8005\n        */\n        Goods memory newGoods = Goods({\n            _name: name,\n            _unit: unit,\n            _price: price,\n            _shopowner: shopowner,\n            _desc: desc\n        });\n        \n        _goods.push(newGoods);\n\n        //\u8fd4\u56de\u5546\u54c1\uff29\uff24\n        return _goods.length;\n    }\n\n    function sell_goods(uint goodsID, uint count, address buyer) public returns(uint) {\n        /**\n        \u51fa\u552e\u5546\u54c1\uff1a\u4e70\u5bb6\u9700\u8981\u5411\u5e97\u957f\u3000\u6309\u5546\u54c1\u540d\u548c\u6570\u91cf\uff0c\u652f\u4ed8\u8d39\u7528\n        */\n        \n        require(count > 0, \"\u8d2d\u4e70\u6570\u636e\u4e0d\u80fd\u4e3a0\");\n        require(buyer != address(0), \"\u4e70\u5bb6\u4e0d\u80fd\u4e3a\u7a7a\");\n\n        /**\n        \u67e5\u627e\u662f\u5426\u6709\u6307\u5b9a\u7684\u5546\u54c1\u540d\uff0c\u5982\u679c\u6709\u5c31\u652f\u4ed8\uff0c\u6ca1\u6709\u8fd4\u56de\n         */\n\n        uint price;\n        uint p_shop;\n        uint p_owner;\n        /**\u8fd9\u91cc\u540e\u9762\u9700\u8981\u4fee\u6539\u4e3aid\u6765\u67e5\u627e\uff0c\u4e0d\u80fd\u7528\u5546\u54c1\u540d\uff0c\u56e0\u4e3a\u5546\u54c1\u540d\u6709\u91cd\u590d */\n        for (uint i = 0; i < _goods.length; i++) {\n            if( i ==  goodsID) {\n\n                price = _goods[i]._price * count;\n\n                p_shop = price * (100 - _percentage) / 100;\n                p_owner = price * _percentage;\n\n                if(false == send_coin(buyer, _goods[i]._shopowner, p_shop)) {\n                    return 0;\n                }\n                if(false == send_coin(buyer, _finance, p_owner)) {\n                    return 0;\n                }\n\n                //\u53ea\u5b58\u5728\u4e70\u5bb6\u6e05\u5355\u4e2d\n                return price;\n            }\n        }\n\n        return 0;\n    }\n\n\n\n    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {\n        bytes storage a = bytes(_a);\n        bytes memory b = bytes(_b);\n        if (a.length != b.length)\n            return false;\n        // @todo unroll this loop\n        for (uint i = 0; i < a.length; i ++)\n            if (a[i] != b[i])\n            {\n                return false;\n            }    \n        return true;\n    }\n    \n\n\tfunction get_balance(address addr) public returns(uint) {\n\t\treturn balances[addr];\n\t}\n}", "debug": "mem_mem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nmem_384 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_XToken_4 + calldata_XToken_4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 4)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_XToken_4 + calldata_XToken_32 + 100)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n5*storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_XToken_0: 0x714a3f7e00000000000000000000000000000000000000000000000000000000\ncalldatasize_XToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add_goods(string,string,uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0x95a732653ba59153236ac89ace6227596592473c.sol", "function": "add_goods(string,string,uint256,address,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}