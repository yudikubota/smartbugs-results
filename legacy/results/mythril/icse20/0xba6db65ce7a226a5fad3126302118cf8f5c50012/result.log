{"error": null, "issues": [{"address": 470, "code": "lic payable returns (bool) {\n        require(msg.value >= total_price);\n        require(users[_user_address].in_queue == false);\n\n        if(users[_user_address].id == 0) {\n            addUser(_user_id, _user_address);\n        }\n\n        lineCount++;\n        User storage u = users[_user_address];\n        u.in_queue = true;\n        u.lineNo = lineCount;\n        intUsers[lineCount] = _user_address;\n\n        checkGifters();\n\n        return true;\n    }\n\n    function checkGifters() private {\n        if(currentlyInLine == 0){\n     ", "debug": "calldata_CChain_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 63, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2006, "code": "in_queue = ", "debug": "storage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3242, "code": "   User sto", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3257, "code": "erStore[userStore.", "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 49, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3290, "code": "userCount;\n        u.uid = _use", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 50, "title": "Exception state", "type": "Informational"}, {"address": 4208, "code": "ntract CChain {\n\n    //Model User\n    struct User {\n        int8 gifters;\n        uint id;\n        uint lineNo;\n        bool in_queue;\n        string uid;\n        address eth_address;\n       // bool newPayer;\n    }\n\n    //Store User\n    User[] userStore;\n\n    //Fetch User\n    mapping(address => User) public users;\n    mapping(uint => address) public intUsers;\n    //Store User Count\n    uint public userCount;\n    //pay price\n    //uint price = 0.10 ether;\n    //contract fee\n    //uint contract_price = 0.025 ether;\n    uint gift = 0.30 ether;\n    uint public total_price = 0.125 ether;\n    //my own\n    address public iown;\n\n    uint public currentlyInLine;\n    uint public lineCount;\n\n     //Constructor\n    constructor() public{\n        iown = msg.sender;\n        currentlyInLine = 0;\n        lineCount = 0;\n    }\n\n    //add User to Contract\n    function addUser(string _user_id, address _user_address) private {\n        require(users[_user_address].id == 0);\n\n        userCount++;\n        userStore.length++;\n        User storage u = userStore[userStore.length - 1];\n        u.id = userCount;\n        u.uid = _user_id;\n        u.eth_address = _user_address;\n        u.in_queue = false;\n        u.gifters = 0;\n\n        users[_user_address] = u;\n        //intUsers[userCount] = _user_address;\n        //checkGifters();\n    }\n\n\n    //Pay to get in line\n    function getInLine(string _user_id, address _user_address) public payable returns (bool) {\n        require(msg.value >= total_price);\n        require(users[_user_address].in_queue == false);\n\n        if(users[_user_address].id == 0) {\n            addUser(_user_id, _user_address);\n        }\n\n        lineCount++;\n        User storage u = users[_user_address];\n        u.in_queue = true;\n        u.lineNo = lineCount;\n        intUsers[lineCount] = _user_address;\n\n        checkGifters();\n\n        return true;\n    }\n\n    function checkGifters() private {\n        if(currentlyInLine == 0){\n            currentlyInLine = 1;\n        }\n        else{\n            address add = intUsers[currentlyInLine];\n            User storage u = users[add];\n            u.gifters++;\n            if(u.gifters == 3 && u.in_queue == true){\n                u.in_queue = false;\n                currentlyInLine++;\n            }\n        }\n    }\n\n    //read your gifter\n    function getMyGifters(address _user_address) external view returns (int8) {\n        return users[_user_address].gifters;\n    }\n\n    //user withdraw\n    function getGifted(address _user_address) external {\n        require(users[_user_address].id != 0);\n        require(users[_user_address].gifters == 3);\n\n        if(users[_user_address].id != 0 && users[_user_address].gifters == 3){\n            _user_address.transfer(gift);\n            User storage u = users[_user_address];\n            u.gifters = 0;\n        }\n    }\n\n    //admin\n    function withdraw() external{\n        require(msg.sender == iown);\n        iown.transfer(address(this).balance);\n    }\n\n    function withdrawAmount(uint amount) external{\n        require(msg.sender == iown);\n        iown.transfer(amount);\n    }\n\n    function getThisBalance() external view returns (uint) {\n        return address(this).balance;\n    }\n\n}", "debug": "storage_4 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*storage_0: 0x7403a9bcd8faddf5d1e685cff3ba22e265c519effac9cb3ec6759905c67efc51\nstorage_0: 0x413eb400000002088020000002000010576c118a884fd9a3152000004b020000\nkeccac_4_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n6*storage_0: 0xff8007b08649eba518062bad4024f63b0581e1673f0b574bf7ba80dfcf20ca00\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4237, "code": "ntract CChain {\n\n    //Model User\n    struct User {\n        int8 gifters;\n        uint id;\n        uint lineNo;\n        bool in_queue;\n        string uid;\n        address eth_address;\n       // bool newPayer;\n    }\n\n    //Store User\n    User[] userStore;\n\n    //Fetch User\n    mapping(address => User) public users;\n    mapping(uint => address) public intUsers;\n    //Store User Count\n    uint public userCount;\n    //pay price\n    //uint price = 0.10 ether;\n    //contract fee\n    //uint contract_price = 0.025 ether;\n    uint gift = 0.30 ether;\n    uint public total_price = 0.125 ether;\n    //my own\n    address public iown;\n\n    uint public currentlyInLine;\n    uint public lineCount;\n\n     //Constructor\n    constructor() public{\n        iown = msg.sender;\n        currentlyInLine = 0;\n        lineCount = 0;\n    }\n\n    //add User to Contract\n    function addUser(string _user_id, address _user_address) private {\n        require(users[_user_address].id == 0);\n\n        userCount++;\n        userStore.length++;\n        User storage u = userStore[userStore.length - 1];\n        u.id = userCount;\n        u.uid = _user_id;\n        u.eth_address = _user_address;\n        u.in_queue = false;\n        u.gifters = 0;\n\n        users[_user_address] = u;\n        //intUsers[userCount] = _user_address;\n        //checkGifters();\n    }\n\n\n    //Pay to get in line\n    function getInLine(string _user_id, address _user_address) public payable returns (bool) {\n        require(msg.value >= total_price);\n        require(users[_user_address].in_queue == false);\n\n        if(users[_user_address].id == 0) {\n            addUser(_user_id, _user_address);\n        }\n\n        lineCount++;\n        User storage u = users[_user_address];\n        u.in_queue = true;\n        u.lineNo = lineCount;\n        intUsers[lineCount] = _user_address;\n\n        checkGifters();\n\n        return true;\n    }\n\n    function checkGifters() private {\n        if(currentlyInLine == 0){\n            currentlyInLine = 1;\n        }\n        else{\n            address add = intUsers[currentlyInLine];\n            User storage u = users[add];\n            u.gifters++;\n            if(u.gifters == 3 && u.in_queue == true){\n                u.in_queue = false;\n                currentlyInLine++;\n            }\n        }\n    }\n\n    //read your gifter\n    function getMyGifters(address _user_address) external view returns (int8) {\n        return users[_user_address].gifters;\n    }\n\n    //user withdraw\n    function getGifted(address _user_address) external {\n        require(users[_user_address].id != 0);\n        require(users[_user_address].gifters == 3);\n\n        if(users[_user_address].id != 0 && users[_user_address].gifters == 3){\n            _user_address.transfer(gift);\n            User storage u = users[_user_address];\n            u.gifters = 0;\n        }\n    }\n\n    //admin\n    function withdraw() external{\n        require(msg.sender == iown);\n        iown.transfer(address(this).balance);\n    }\n\n    function withdrawAmount(uint amount) external{\n        require(msg.sender == iown);\n        iown.transfer(amount);\n    }\n\n    function getThisBalance() external view returns (uint) {\n        return address(this).balance;\n    }\n\n}", "debug": "storage_0: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CChain_4 + calldata_CChain_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4251, "code": "ntract CChain {\n\n    //Model User\n    struct User {\n        int8 gifters;\n        uint id;\n        uint lineNo;\n        bool in_queue;\n        string uid;\n        address eth_address;\n       // bool newPayer;\n    }\n\n    //Store User\n    User[] userStore;\n\n    //Fetch User\n    mapping(address => User) public users;\n    mapping(uint => address) public intUsers;\n    //Store User Count\n    uint public userCount;\n    //pay price\n    //uint price = 0.10 ether;\n    //contract fee\n    //uint contract_price = 0.025 ether;\n    uint gift = 0.30 ether;\n    uint public total_price = 0.125 ether;\n    //my own\n    address public iown;\n\n    uint public currentlyInLine;\n    uint public lineCount;\n\n     //Constructor\n    constructor() public{\n        iown = msg.sender;\n        currentlyInLine = 0;\n        lineCount = 0;\n    }\n\n    //add User to Contract\n    function addUser(string _user_id, address _user_address) private {\n        require(users[_user_address].id == 0);\n\n        userCount++;\n        userStore.length++;\n        User storage u = userStore[userStore.length - 1];\n        u.id = userCount;\n        u.uid = _user_id;\n        u.eth_address = _user_address;\n        u.in_queue = false;\n        u.gifters = 0;\n\n        users[_user_address] = u;\n        //intUsers[userCount] = _user_address;\n        //checkGifters();\n    }\n\n\n    //Pay to get in line\n    function getInLine(string _user_id, address _user_address) public payable returns (bool) {\n        require(msg.value >= total_price);\n        require(users[_user_address].in_queue == false);\n\n        if(users[_user_address].id == 0) {\n            addUser(_user_id, _user_address);\n        }\n\n        lineCount++;\n        User storage u = users[_user_address];\n        u.in_queue = true;\n        u.lineNo = lineCount;\n        intUsers[lineCount] = _user_address;\n\n        checkGifters();\n\n        return true;\n    }\n\n    function checkGifters() private {\n        if(currentlyInLine == 0){\n            currentlyInLine = 1;\n        }\n        else{\n            address add = intUsers[currentlyInLine];\n            User storage u = users[add];\n            u.gifters++;\n            if(u.gifters == 3 && u.in_queue == true){\n                u.in_queue = false;\n                currentlyInLine++;\n            }\n        }\n    }\n\n    //read your gifter\n    function getMyGifters(address _user_address) external view returns (int8) {\n        return users[_user_address].gifters;\n    }\n\n    //user withdraw\n    function getGifted(address _user_address) external {\n        require(users[_user_address].id != 0);\n        require(users[_user_address].gifters == 3);\n\n        if(users[_user_address].id != 0 && users[_user_address].gifters == 3){\n            _user_address.transfer(gift);\n            User storage u = users[_user_address];\n            u.gifters = 0;\n        }\n    }\n\n    //admin\n    function withdraw() external{\n        require(msg.sender == iown);\n        iown.transfer(address(this).balance);\n    }\n\n    function withdrawAmount(uint amount) external{\n        require(msg.sender == iown);\n        iown.transfer(amount);\n    }\n\n    function getThisBalance() external view returns (uint) {\n        return address(this).balance;\n    }\n\n}", "debug": "storage_0: 0x3164cdbbd7715000000000000000000000000000000000000000000000000000\ncalldata_CChain_4 + calldata_CChain_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncallvalue: 0x0\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\nstorage_5: 0x0\ncalldata_CChain_0: 0x6a99a30400000000000000000000000000000000000000000000000000000000\ncalldatasize_CChain: 0x4\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_CChain_32_+_4: 0x0\n", "description": "A possible integer overflow exists in the function `getInLine(string,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xba6db65ce7a226a5fad3126302118cf8f5c50012.sol", "function": "getInLine(string,address)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}