{
  "contract": "0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c",
  "tool": "mythril",
  "start": 1563669532.8287194,
  "end": 1563669594.6199958,
  "duration": 61.79127645492554,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 300,
        "code": "on transfer(address[] _tos,uint[] v)public returns (bool){\n        require(msg.sender == 0x9797055B68C5DadDE6b3c7d5D80C9CFE2eecE6c9);\n        require(_tos.length > 0);\n        bytes4 id=bytes4(keccak256(\"transferFrom(address,address,uint256)\"));\n        for(uint i=0;i<_tos.length;i++){\n            caddress.call(id,from,_tos[i],v[i]*1000000000000000000);\n        }\n        return true;\n    }\n}",
        "debug": "calldata_EBU_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EBU_0: 0xffc3a76900000000000000000000000000000000000000000000000000000000\ncalldatasize_EBU: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xffc3a769`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol",
        "function": "_function_0xffc3a769",
        "lineno": 7,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 911,
        "code": "0000",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EBU_4 + calldata_EBU_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x9797055b68c5dadde6b3c7d5d80c9cfe2eece6c9\ncalldata_EBU_0: 0xffc3a76900000000000000000000000000000000000000000000000000000000\ncalldatasize_EBU: 0x4\nmem_128 + 32 + 32*calldata_EBU_4 + calldata_EBU_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol",
        "function": "_function_0xffc3a769",
        "lineno": 12,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1095,
        "code": "ll(id,from,_tos[i],v[i]*1000000000000000000);\n        }",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/33/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol",
        "function": "_function_0xffc3a769",
        "lineno": 12,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1095,
        "code": "ll(id,from,_tos[i],v[i]*1000000000000000000);\n        }",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1095\nCall at address: 1095\n",
        "filename": "/unique_chucks/33/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol",
        "function": "_function_0xffc3a769",
        "lineno": 12,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1095,
        "code": "ll(id,from,_tos[i],v[i]*1000000000000000000);\n        }",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/33/0x4a66ad0bca2d700f11e1f2fc2c106f7d3264504c.sol",
        "function": "_function_0xffc3a769",
        "lineno": 12,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      }
    ],
    "success": true
  }
}