{
  "contract": "0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5",
  "tool": "mythril",
  "start": 1563591585.2426586,
  "end": 1563591637.4451175,
  "duration": 52.20245885848999,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1060,
        "code": "sk(bytes32 _taskId) external onlyApproved returns (bool) {\n        Task storage task = tasks[_taskId];\n\n        if (task.rewardStatus == RewardStatus.PAID) {\n            uint256 index = tasks[_taskId].taskIdsIn",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0x8000\ncalldata_Tasks_0: 0xb9c105cf00000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "getTaskRewardAndStatus(bytes32)",
        "lineno": 693,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1966,
        "code": "skId, string title);\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Tasks_4: 0x0\nstorage_3: 0x0\ncalldata_Tasks_0: 0x39118d2500000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "_function_0x39118d25",
        "lineno": 546,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2437,
        "code": " as the reward their voting for?\n     ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 624,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2437,
        "code": " as the reward their voting for?\n     ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3032\nCall at address: 2883\n",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 624,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2437,
        "code": " as the reward their voting for?\n     ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 624,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2647,
        "code": "at can be issued for any single task\n       ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0x8000\ncalldata_Tasks_32 + 4: 0x0\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_Tasks_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2437: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Tasks_0: 0x497a7b4800000000000000000000000000000000000000000000000000000000\ncalldatasize_Tasks: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 629,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2883,
        "code": "distense.getParameterValueByTitle(distense.votingPowerL",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 638,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2883,
        "code": "distense.getParameterValueByTitle(distense.votingPowerL",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3032\n",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 638,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2883,
        "code": "distense.getParameterValueByTitle(distense.votingPowerL",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 638,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3032,
        "code": "       uint256 votingPowerLimit = distense.getParameterValueByTitle(distense.votingPowerLi",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 638,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3032,
        "code": "       uint256 votingPowerLimit = distense.getParameterValueByTitle(distense.votingPowerLi",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function taskRewardVote(bytes32,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "taskRewardVote(bytes32,uint256)",
        "lineno": 638,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5544,
        "code": "uint256 c = a * b;\n    assert(c / a ==",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 741,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5544,
        "code": "uint256 c = a * b;\n    assert(c / a ==",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5919\nCall at address: 5770\n",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 741,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5544,
        "code": "uint256 c = a * b;\n    assert(c / a ==",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 741,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5770,
        "code": "hen dividing by 0\n    uint256 c = a / b;\n    // ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 747,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5770,
        "code": "hen dividing by 0\n    uint256 c = a / b;\n    // ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5919\n",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 747,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5770,
        "code": "hen dividing by 0\n    uint256 c = a / b;\n    // ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 747,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5919,
        "code": "ssert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a ==",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 747,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5919,
        "code": "ssert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a ==",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addTask(bytes32,string). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/19/0x82dfecd8c0131ab5c24d27b490fbc8cc60be84f5.sol",
        "function": "addTask(bytes32,string)",
        "lineno": 747,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}