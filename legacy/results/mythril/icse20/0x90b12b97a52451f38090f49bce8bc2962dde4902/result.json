{
  "contract": "0x90b12b97a52451f38090f49bce8bc2962dde4902",
  "tool": "mythril",
  "start": 1563504764.5400503,
  "end": 1563504810.579629,
  "duration": 46.039578676223755,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 4669,
        "code": " _name, uint",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_TokensWarContract_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokensWarContract_0: 0x9188d31200000000000000000000000000000000000000000000000000000000\ncalldatasize_TokensWarContract: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x90b12b97a52451f38090f49bce8bc2962dde4902.sol",
        "function": "getCard(uint256)",
        "lineno": 153,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7530,
        "code": "  \n\n    function TokensWar",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokensWarContract_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokensWarContract_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_TokensWarContract_32_+_36: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_TokensWarContract_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokensWarContract_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokensWarContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x90b12b97a52451f38090f49bce8bc2962dde4902.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 435,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7746,
        "code": "  if (a == 0) {\n      return",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokensWarContract_4: 0x0\ncalldata_TokensWarContract_32 + 4: 0x800000000200000000000000000000000001\nstorage_keccac_calldata_TokensWarContract_32_+_36: 0x80000000020000000000000000000000000100\ncalldata_TokensWarContract_4: 0x800000000200000000000000000000000001\ncalldata_TokensWarContract_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokensWarContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0x90b12b97a52451f38090f49bce8bc2962dde4902.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 448,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 8015,
        "code": ";\n\n\n/// @title Int",
        "debug": "storage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_TokensWarContract_0: 0x72b3b62000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokensWarContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createToken(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x90b12b97a52451f38090f49bce8bc2962dde4902.sol",
        "function": "createToken(string,uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8604,
        "code": "NTS ***/\n        \n    /// @dev The NewHero event is fired whenever a new card comes into existence.\n    event NewToken(uint256 tokenId, string name, address owner);\n        \n    /// @dev The NewTokenOwner event is fired whenever a token is sold.\n    event NewTokenOwner(uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name, uint256 tokenId);\n    \n    /// @dev The NewGoldenCard event is fired whenever a golden card is change.\n    event NewGoldenToken(uint256 goldenPayment);\n        \n    /// @dev Transfer event as defined in current draft of ERC721. ownership is assigned, including births.\n    event Transfer(address from, address to, uint256 tokenId);\n        \n    /*** CONSTANTS ***/\n        \n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n    string public constant NAME = \"TokensWarContract\"; // solhint-disable-line\n    string public constant SYMBOL = \"TWC\"; // solhint-disable-line\n      \n    uint256 private startingPrice = 0.001 ether; \n    uint256 private firstStepLimit =  0.045 ether; //5 iteration\n    uint256 private secondStepLimit =  0.45 ether; //8 iteration\n    uint256 private thirdStepLimit = 1.00 ether; //10 iteration\n        \n    /*** STORAGE ***/\n        \n    /// @dev A mapping from card IDs to the address that owns them. All cards have\n    ///  some valid owner address.\n    mapping (uint256 => address) public cardTokenToOwner;\n        \n    // @dev A mapping from owner address to count of tokens that address owns.\n    //  Used internally inside balanceOf() to resolve ownership count.\n    mapping (address => uint256) private ownershipTokenCount;\n        \n    /// @dev A mapping from CardIDs to an address that has been approved to call\n    ///  transferFrom(). Each card can only have one approved address for transfer\n    ///  at any time. A zero value means no approval is outstanding.\n    mapping (uint256 => address) public cardTokenToApproved;\n        \n    // @dev A mapping from CardIDs to the price of the token.\n    mapping (uint256 => uint256) private cardTokenToPrice;\n        \n    // @dev A mapping from CardIDs to the position of the item in array.\n    mapping (uint256 => uint256) private cardTokenToPosition;\n    \n    // @dev tokenId of golden card.\n    uint256 public goldenTokenId;\n    \n    /*** STORAGE ***/\n    \n\t/*** ------------------------------- ***/\n    \n    /*** CARDS ***/\n    \n\t/*** DATATYPES ***/\n\tstruct Card {\n\t\tuint256 token;\n\t\tstring name;\n\t}\n\n\tCard[] private cards;\n    \n\t\n\t/// @notice Returns all the relevant information about a specific card.\n\t/// @param _tokenId The tokenId of the card of interest.\n\tfunction getCard(uint256 _tokenId) public view returns (\n\t\tstring name,\n\t\tuint256 token\n\t) {\n\t    \n\t    address owner = cardTokenToOwner[_tokenId];\n        require(owner != address(0));\n\t    \n\t    uint256 index = cardTokenToPosition[_tokenId];\n\t    Card storage card = cards[index];\n\t\tname = card.name;\n\t\ttoken = card.token;\n\t}\n    \n    /// @dev Creates a new token with the given name.\n\tfunction createToken(string _name, uint256 _id) public onlyAdmin {\n\t\t_createToken(_name, _id, address(this), startingPrice);\n\t}\n\t\n    /// @dev set golden card token.\n\tfunction setGoldenCardToken(uint256 tokenId) public onlyAdmin {\n\t\tgoldenTokenId = tokenId;\n\t\tNewGoldenToken(goldenTokenId);\n\t}\n\t\n\tfunction _createToken(string _name, uint256 _id, address _owner, uint256 _price) private {\n\t    \n\t\tCard memory _card = Card({\n\t\t  name: _name,\n\t\t  token: _id\n\t\t});\n\t\t\t\n\t\tuint256 index = cards.push(_card) - 1;\n\t\tcardTokenToPosition[_id] = index;\n\t\t// It's probably never going to happen, 4 billion tokens are A LOT, but\n\t\t// let's just be 100% sure we never let this happen.\n\t\trequire(_id == uint256(uint32(_id)));\n\n\t\tNewToken(_id, _name, _owner);\n\t\tcardTokenToPrice[_id] = _price;\n\t\t// This will assign ownership, and also emit the Transfer event as\n\t\t// per ERC721 draft\n\t\t_transfer(address(0), _owner, _id);\n\t}\n\t/*** CARDS ***/\n\t\n\t/*** ------------------------------- ***/\n\t\n\t/*** ERC721 FUNCTIONS ***/\n    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\n    ///  clear all approvals.\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function approve(\n        address _to,\n        uint256 _tokenId\n      ) public {\n        // Caller must own token.\n        require(_owns(msg.sender, _tokenId));\n    \n        cardTokenToApproved[_tokenId] = _to;\n    \n        Approval(msg.sender, _to, _tokenId);\n    }\n    \n    /// For querying balance of a particular account\n    /// @param _owner The address for balance query\n    /// @dev Required for ERC-721 compliance.\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return ownershipTokenCount[_owner];\n    }\n    \n    function implementsERC721() public pure returns (bool) {\n        return true;\n    }\n    \n\n    /// For querying owner of token\n    /// @param _tokenId The tokenID for owner inquiry\n    /// @dev Required for ERC-721 compliance.\n    function ownerOf(uint256 _tokenId) public view returns (address owner) {\n        owner = cardTokenToOwner[_tokenId];\n        require(owner != address(0));\n    }\n    \n    /// @notice Allow pre-approved user to take ownership of a token\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function takeOwnership(uint256 _tokenId) public {\n        address newOwner = msg.sender;\n        address oldOwner = cardTokenToOwner[_tokenId];\n    \n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_addressNotNull(newOwner));\n\n        // Making sure transfer is approved\n        require(_approved(newOwner, _tokenId));\n    \n        _transfer(oldOwner, newOwner, _tokenId);\n    }\n    \n    /// For querying totalSupply of token\n    /// @dev Required for ERC-721 compliance.\n    function totalSupply() public view returns (uint256 total) {\n        return cards.length;\n    }\n    \n    /// Third-party initiates transfer of token from address _from to address _to\n    /// @param _from The address for the token to be transferred from.\n    /// @param _to The address for the token to be transferred to.\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function transferFrom(address _from, address _to, uint256 _tokenId) public {\n        require(_owns(_from, _tokenId));\n        require(_approved(_to, _tokenId));\n        require(_addressNotNull(_to));\n    \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// Owner initates the transfer of the token to another account\n    /// @param _to The address for the token to be transferred to.\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n    /// @dev Required for ERC-721 compliance.\n    function transfer(address _to, uint256 _tokenId) public {\n        require(_owns(msg.sender, _tokenId));\n        require(_addressNotNull(_to));\n    \n        _transfer(msg.sender, _to, _tokenId);\n    }\n    \n    /// @dev Required for ERC-721 compliance.\n    function name() public pure returns (string) {\n        return NAME;\n    }\n    \n    /// @dev Required for ERC-721 compliance.\n    function symbol() public pure returns (string) {\n        return SYMBOL;\n    }\n\n\t/*** ERC721 FUNCTIONS ***/\n\t\n\t/*** ------------------------------- ***/\n\t\n\t/*** ADMINISTRATOR FUNCTIONS ***/\n\t\n\t//send balance of contract on wallet\n\tfunction payout(address _to) public onlyHostOrAdmin {\n\t\t_payout(_to);\n\t}\n\t\n\tfunction _payout(address _to) private {\n\t\tif (_to == address(0)) {\n\t\t\thostAddress.transfer(this.balance);\n\t\t} else {\n\t\t\t_to.transfer(this.balance);\n\t\t}\n\t}\n\t\n\t/*** ADMINISTRATOR FUNCTIONS ***/\n\t\n\n    /*** PUBLIC FUNCTIONS ***/\n\n    function contractBalance() public  view returns (uint256 balance) {\n        return address(this).balance;\n    }\n    \n\n\n  // Allows someone to send ether and obtain the token\n  function purchase(uint256 _tokenId) public payable {\n    address oldOwner = cardTokenToOwner[_tokenId];\n    address newOwner = msg.sender;\n    \n    require(oldOwner != address(0));\n\n    uint256 sellingPrice = cardTokenToPrice[_tokenId];\n\n    // Making sure token owner is not sending to self\n    require(oldOwner != newOwner);\n\n    // Safety check to prevent against an unexpected 0x0 default.\n    require(_addressNotNull(newOwner));\n\n    // Making sure sent amount is greater than or equal to the sellingPrice\n    require(msg.value >= sellingPrice);\n\n    uint256 payment = uint256(Helper.div(Helper.mul(sellingPrice, 93), 100));\n    uint256 goldenPayment = uint256(Helper.div(Helper.mul(sellingPrice, 2), 100));\n    \n    uint256 purchaseExcess = Helper.sub(msg.value, sellingPrice);\n\n    // Update prices\n    if (sellingPrice < firstStepLimit) {\n      // first stage\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 300), 93);\n    } else if (sellingPrice < secondStepLimit) {\n      // second stage\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 200), 93);\n    } else if (sellingPrice < thirdStepLimit) {\n      // second stage\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 120), 93);\n    } else {\n      // third stage\n      cardTokenToPrice[_tokenId] = Helper.div(Helper.mul(sellingPrice, 115), 93);\n    }\n\n    _transfer(oldOwner, newOwner, _tokenId);\n\n    // Pay previous tokenOwner if owner is not contract\n    if (oldOwner != address(this)) {\n      oldOwner.transfer(payment); //-0.05\n    }\n    \n    //Pay golden commission\n    address goldenOwner = cardTokenToOwner[goldenTokenId];\n    if (goldenOwner != address(0)) {\n      goldenOwner.transfer(goldenPayment); //-0.02\n    }\n\n\t//CONTRACT EVENT \n\tuint256 index = cardTokenToPosition[_tokenId];\n    NewTokenOwner(sellingPrice, cardTokenToPrice[_tokenId], oldOwner, newOwner, cards[index].name, _tokenId);\n\n    msg.sender.transfer(purchaseExcess);\n    \n  }\n\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n    return cardTokenToPrice[_tokenId];\n  }\n\n\n\n  /// @param _owner The owner whose celebrity tokens we are interested in.\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n  ///  expensive (it walks the entire cards array looking for cards belonging to owner),\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n  ///  not contract-to-contract calls.\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n    uint256 tokenCount = balanceOf(_owner);\n    if (tokenCount == 0) {\n        // Return an empty array\n      return new uint256[](0);\n    } else {\n      uint256[] memory result = new uint256[](tokenCount);\n      uint256 totalCards = totalSupply();\n      uint256 resultIndex = 0;\n\n      uint256 index;\n      for (index = 0; index <= totalCards-1; index++) {\n        if (cardTokenToOwner[cards[index].token] == _owner) {\n          result[resultIndex] = cards[index].token;\n          resultIndex++;\n        }\n      }\n      return result;\n    }\n  }\n\n  /*** PRIVATE FUNCTIONS ***/\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n  function _addressNotNull(address _to) private pure returns (bool) {\n    return _to != address(0);\n  }\n\n  /// For checking approval of transfer for address _to\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n    return cardTokenToApproved[_tokenId] == _to;\n  }\n\n  /// Check for token ownership\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n    return claimant == cardTokenToOwner[_tokenId];\n  }\n\n\n  /// @dev Assigns ownership of a specific card to an address.\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\n    // Since the number of cards is capped to 2^32 we can't overflow this\n    ownershipTokenCount[_to]++;\n    //transfer ownership\n    cardTokenToOwner[_tokenId] = _to;\n\n    // When creating new cards _from is 0x0, but we can't account that address.\n    if (_from != address(0)) {\n      ownershipTokenCount[_from]--;\n      // clear any previously approved ownership exchange\n      delete cardTokenToApproved[_tokenId];\n    }\n\n    // Emit the transfer event.\n    Transfer(_from, _to, _tokenId);\n  }\n  \n\n    function TokensWarContract() public {\n    }\n    \n}\n\nlibrary Helper {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Soli",
        "debug": "mem_mem_224 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokensWarContract_4 + calldata_TokensWarContract_4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_TokensWarContract_0: 0x72b3b62000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokensWarContract: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createToken(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x90b12b97a52451f38090f49bce8bc2962dde4902.sol",
        "function": "createToken(string,uint256)",
        "lineno": 72,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}