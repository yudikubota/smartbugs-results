{"error": null, "issues": [{"address": 443, "code": "rns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        tota", "debug": "calldata_TridentDistribution_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 379, "title": "Integer Overflow ", "type": "Warning"}, {"address": 616, "code": "ress[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place ", "debug": "storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TridentDistribution_0: 0x3176cad200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOrderDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getOrderDelegates()", "lineno": 223, "title": "Integer Overflow ", "type": "Warning"}, {"address": 767, "code": "/\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool ", "debug": "storage_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TridentDistribution_0: 0x346d73ec00000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getApprovalDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getApprovalDelegates()", "lineno": 230, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3021, "code": ";\n\n\n\n/**\n * @title", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3617, "code": "ccount permission to ", "debug": "storage_3: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TridentDistribution_0: 0x3176cad200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOrderDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getOrderDelegates()", "lineno": 228, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3619, "code": "ccount permission to ", "debug": "storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TridentDistribution_0: 0x3176cad200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOrderDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getOrderDelegates()", "lineno": 228, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3765, "code": "nal returns (bool) {\n   ", "debug": "storage_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TridentDistribution_0: 0x346d73ec00000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getApprovalDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getApprovalDelegates()", "lineno": 231, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3767, "code": "nal returns (bool) {\n   ", "debug": "storage_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TridentDistribution_0: 0x346d73ec00000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getApprovalDelegates()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getApprovalDelegates()", "lineno": 231, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4586, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "withdrawAllTrident()", "lineno": 497, "title": "Message call to external contract", "type": "Informational"}, {"address": 4586, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4892\n", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "withdrawAllTrident()", "lineno": 497, "title": "Multiple Calls", "type": "Information"}, {"address": 4892, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "withdrawAllTrident()", "lineno": 497, "title": "Message call to external contract", "type": "Informational"}, {"address": 5265, "code": "_orderIndex);\n\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TridentDistribution_4: 0x0\nstorage_2: 0x0\ncalldata_TridentDistribution_0: 0x9c0fca7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "getOrderAtIndex(uint256)", "lineno": 410, "title": "Exception state", "type": "Informational"}, {"address": 10190, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffff8000000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_3: 0x0\ncalldata_TridentDistribution_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x31c06e400000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrderDelegate(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrderDelegate(address)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10192, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_3: 0xdfffffffffffffedfffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n115792089237316195423570985008687907853269984665640564039457584007913129639935 +\nstorage_3: 0x0\ncalldata_TridentDistribution_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x31c06e400000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrderDelegate(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrderDelegate(address)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10247, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "keccac_2_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10276, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "calldata_TridentDistribution_4 + calldata_TridentDistribution_32 + 36: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10290, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "calldata_TridentDistribution_4 + calldata_TridentDistribution_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10312, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "keccac_2_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TridentDistribution_4 + calldata_TridentDistribution_32 + 36: 0x80\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0x7519f6200000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `placeOrder(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "placeOrder(uint256,address,string)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10467, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x88200004d000000000014d80803103df7fe7bfbff8ffee8176f8000000000000\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*calldata_TridentDistribution_4: 0xdfa7f5efff742f6ebe7c5e6fb9be7ffeffffe9000000000000000000000000e1\nkeccac_2_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*calldata_TridentDistribution_4: 0xfe5eb81840002040400008000101000044004aa580409224c50454051aa28192\ncalldata_TridentDistribution_4: 0x28202048e0000000000579850131839f7fe7bfbff9ffce8176f8200001000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10517, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x40000000a5fffffffffffffffffffffffffffffffffffffffffffffffffffffd\nkeccac_29102676481673041902632991033461445430619272659676223336789171408008386403019_+\n3*storage_2_+\n2: 0xff72600000004afd556b280000000001023fe7ffffffffffffffffffffffffff\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0xa2645080ffedfa5550bd0000000000000ffd3fffffffffffffffffffffffffc1\ncalldata_TridentDistribution_4: 0x19dfffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10539, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0xffffffffffffffffffffffffffffe00000000000000000000000000000000000\nkeccac_29102676481673041902632991033461445430619272659676223336789171408008386403019_+\n3*storage_2_+\n2: 0x14410002820493700201000800c0006fcf1e92000180002f00012fff7a2df1\nkeccac_2_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*calldata_TridentDistribution_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0x3817ec0000000000000013fbf85a5f0040000001ffffffffffffd1\ncalldata_TridentDistribution_4: 0xf7bdeffbdef7bd6f7b5efffdffffdfffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10620, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x4000000000000000000000000000000000000000000000000000000000000000\nkeccac_29102676481673041902632991033461445430619272659676223336789171408008386403019_+\n3*storage_2_+\n2: 0xff047dc33f07eda1a45c3738fffb23ba1c12b8fffff3b48516302993f375388e\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0xf017ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncalldata_TridentDistribution_4: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10651, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0xbc3ff7083fc443e5000000000000000000000000000000000000000000000000\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncalldata_TridentDistribution_4: 0xbc3ff7083fc443e4ffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10655, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x6ce46a8000000000000000000000000000000000000000000000080000000000\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncalldata_TridentDistribution_4: 0x6ce46a800000000000000000000000000000000000000000000007ffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10667, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x3fe3000000000000000000000000000000000000000000000000000000000000\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncalldata_TridentDistribution_4: 0x3fe2ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10669, "code": "public trident;\n\n  // Struct that represents a transfer order\n  struct Order {\n    uint256 amount;         // amount of tokens to transfer\n    address account;        // account to transfer amount to\n    string metadata;        // arbitrary metadata\n  }\n\n  // Array of all current transfer orders\n  Order[] orders;\n\n  // Accounts allowed to place orders\n  address[] orderDelegates;\n\n  // Accounts allowed to approve orders\n  address[] approvalDelegates;\n\n  // Amount of ETH sent with each order executed\n  uint public complementaryEthPerOrder;\n\n\n  // Event emitted when an account has been approved as an order delegate\n  event ApproveOrderDelegate(\n      address indexed orderDelegate\n    );\n  // Event emitted when an account has been revoked from being an order delegate\n  event RevokeOrderDelegate(\n      address indexed orderDelegate\n    );\n\n  // Event emitted when an account has been approved as an approval delegate\n  event ApproveApprovalDelegate(\n      address indexed approvalDelegate\n    );\n  // Event emitted when an account has been revoked from being an approval delegate\n  event RevokeApprovalDelegate(\n      address indexed approvalDelegate\n    );\n\n  // Event emitted when an order has been placed\n  event OrderPlaced(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been approved and executed\n  event OrderApproved(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when an order has been revoked\n  event OrderRevoked(\n    uint indexed orderIndex\n    );\n\n  // Event emitted when the entire orders batch is approved and executed\n  event AllOrdersApproved();\n\n  // Event emitted when complementaryEthPerOrder has been set\n  event ComplementaryEthPerOrderSet();\n\n\n\n  constructor(ERC20 _tridentSmartContract) public {\n      trident = _tridentSmartContract;\n  }\n\n  /**\n   * @dev Fallback function to allow contract to receive ETH via 'send'.\n   */\n  function () public payable {\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than an owner or an order delegate.\n   */\n  modifier onlyOwnerOrOrderDelegate() {\n    bool allowedToPlaceOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToPlaceOrders = true;\n    }\n    else {\n      for(uint i=0; i<orderDelegates.length; i++) {\n        if(orderDelegates[i]==msg.sender) {\n          allowedToPlaceOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToPlaceOrders==true);\n    _;\n  }\n\n  /**\n   * @dev Throws if called by any account other than an owner or an approval delegate.\n   */\n  modifier onlyOwnerOrApprovalDelegate() {\n    bool allowedToApproveOrders = false;\n\n    if(msg.sender==owner) {\n      allowedToApproveOrders = true;\n    }\n    else {\n      for(uint i=0; i<approvalDelegates.length; i++) {\n        if(approvalDelegates[i]==msg.sender) {\n          allowedToApproveOrders = true;\n          break;\n        }\n      }\n    }\n\n    require(allowedToApproveOrders==true);\n    _;\n  }\n\n\n  /**\n   * @dev Return the array of order delegates.\n   */\n  function getOrderDelegates() external view returns (address[]) {\n    return orderDelegates;\n  }\n\n  /**\n   * @dev Return the array of burn delegates.\n   */\n  function getApprovalDelegates() external view returns (address[]) {\n    return approvalDelegates;\n  }\n\n  /**\n   * @dev Give an account permission to place orders.\n   * @param _orderDelegate The account to be approved.\n   */\n  function approveOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<orderDelegates.length; i++) {\n      if(orderDelegates[i]==_orderDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      orderDelegates.push(_orderDelegate);\n    }\n\n    emit ApproveOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to place orders from an order delegate.\n   * @param _orderDelegate The account to be revoked.\n   */\n  function revokeOrderDelegate(address _orderDelegate) onlyOwner external returns (bool) {\n    uint length = orderDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = orderDelegates[length-1];\n    if(_orderDelegate == lastDelegate) {\n      delete orderDelegates[length-1];\n      orderDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(orderDelegates[i]==_orderDelegate) {\n          orderDelegates[i] = lastDelegate;\n          delete orderDelegates[length-1];\n          orderDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeOrderDelegate(_orderDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Give an account permission to approve orders.\n   * @param _approvalDelegate The account to be approved.\n   */\n  function approveApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    bool delegateFound = false;\n    for(uint i=0; i<approvalDelegates.length; i++) {\n      if(approvalDelegates[i]==_approvalDelegate) {\n        delegateFound = true;\n        break;\n      }\n    }\n\n    if(!delegateFound) {\n      approvalDelegates.push(_approvalDelegate);\n    }\n\n    emit ApproveApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n  /**\n   * @dev Revoke permission to approve orders from an approval delegate.\n   * @param _approvalDelegate The account to be revoked.\n   */\n  function revokeApprovalDelegate(address _approvalDelegate) onlyOwner external returns (bool) {\n    uint length = approvalDelegates.length;\n    require(length > 0);\n\n    address lastDelegate = approvalDelegates[length-1];\n    if(_approvalDelegate == lastDelegate) {\n      delete approvalDelegates[length-1];\n      approvalDelegates.length--;\n    }\n    else {\n      // Game plan: find the delegate, replace it with the very last item in the array, then delete the last item\n      for(uint i=0; i<length; i++) {\n        if(approvalDelegates[i]==_approvalDelegate) {\n          approvalDelegates[i] = lastDelegate;\n          delete approvalDelegates[length-1];\n          approvalDelegates.length--;\n          break;\n        }\n      }\n    }\n\n    emit RevokeApprovalDelegate(_approvalDelegate);\n    return true;\n  }\n\n\n  /**\n   * @dev Internal function to delete an order at the given index from the orders array.\n   * @param _orderIndex The index of the order to be removed.\n   */\n  function _deleteOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n\n    uint lastIndex = orders.length-1;\n    if(_orderIndex != lastIndex) {\n      // Replace the order to be deleted with the very last item in the array\n      orders[_orderIndex] = orders[lastIndex];\n    }\n    delete orders[lastIndex];\n    orders.length--;\n  }\n\n  /**\n   * @dev Internal function to execute an order at the given index.\n   * @param _orderIndex The index of the order to be executed.\n   */\n  function _executeOrder(uint _orderIndex) internal {\n    require(orders.length > _orderIndex);\n    require(complementaryEthPerOrder <= address(this).balance);\n\n    Order memory order = orders[_orderIndex];\n    _deleteOrder(_orderIndex);\n\n    trident.transfer(order.account, order.amount);\n\n    // Transfer the complementary ETH\n    address(order.account).transfer(complementaryEthPerOrder);\n  }\n\n  /**\n   * @dev Function to place an order.\n   * @param _amount The amount of tokens to transfer.\n   * @param _account The account to transfer the tokens to.\n   * @param _metadata Arbitrary metadata.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function placeOrder(uint256 _amount, address _account, string _metadata) onlyOwnerOrOrderDelegate external returns (bool) {\n    orders.push(Order({amount: _amount, account: _account, metadata: _metadata}));\n\n    emit OrderPlaced(orders.length-1);\n\n    return true;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersCount() external view returns (uint) {\n    return orders.length;\n  }\n\n  /**\n   * @dev Return the number of orders.\n   */\n  function getOrdersTotalAmount() external view returns (uint) {\n    uint total = 0;\n    for(uint i=0; i<orders.length; i++) {\n        Order memory order = orders[i];\n        total += order.amount;\n    }\n\n    return total;\n  }\n\n  /**\n   * @dev Return the order at the given index.\n   */\n  function getOrderAtIndex(uint _orderIndex) external view returns (uint256 amount, address account, string metadata) {\n    Order memory order = orders[_orderIndex];\n    return (order.amount, order.account, order.metadata);\n  }\n\n  /**\n   * @dev Function to revoke an order at the given index.\n   * @param _orderIndex The index of the order to be revoked.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function revokeOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _deleteOrder(_orderIndex);\n\n    emit OrderRevoked(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve an order at the given index.\n   * @param _orderIndex The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveOrder(uint _orderIndex) onlyOwnerOrApprovalDelegate external returns (bool) {\n    _executeOrder(_orderIndex);\n\n    emit OrderApproved(_orderIndex);\n\n    return true;\n  }\n\n  /**\n   * @dev Function to approve all orders in the orders array.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function approveAllOrders() onlyOwnerOrApprovalDelegate external returns (bool) {\n    uint orderCount = orders.length;\n    uint totalComplementaryEth = complementaryEthPerOrder * orderCount;\n    require(totalComplementaryEth <= address(this).balance);\n\n    for(uint i=0; i<orderCount; i++) {\n        Order memory order = orders[i];\n        trident.transfer(order.account, order.amount);\n\n        // Transfer the complementary ETH\n        address(order.account).transfer(complementaryEthPerOrder);\n    }\n\n    // Dispose of all approved orders\n    delete orders;\n\n\n    emit AllOrdersApproved();\n\n    return true;\n  }\n\n\n\n  /**\n   * @dev Function to set the complementary eth sent with each order executed.\n   * @param _complementaryEthPerOrder The index of the order to be approved.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function setComplementaryEthPerOrder(uint _complementaryEthPerOrder) onlyOwner external returns (bool) {\n    complementaryEthPerOrder = _complementaryEthPerOrder;\n\n    emit ComplementaryEthPerOrderSet();\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all ETH from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllEth() onlyOwner external returns (bool) {\n    uint ethBalance = address(this).balance;\n    require(ethBalance > 0);\n\n    owner.transfer(ethBalance);\n\n    return true;\n  }\n\n\n  /**\n   * @dev Function withdraws all Trident from the smart contract.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function withdrawAllTrident() onlyOwner external returns (bool) {\n    uint tridentBalance = trident.balanceOf(address(this));\n    require(tridentBalance > 0);\n\n    return trident.transfer(owner, tridentBalance);\n  }\n\n}", "debug": "storage_2: 0x5520000000000000000000000000000000000000000000000000000000000000\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403019 +\n3*storage_2 +\n2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TridentDistribution_0: 0xf9a71d700000000000000000000000000000000000000000000000000000000\ncalldatasize_TridentDistribution: 0x4\ncalldata_TridentDistribution_4: 0x551fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `revokeOrder(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/6/0xdb9da8e3bddb845fa52e369357c47630d9011741.sol", "function": "revokeOrder(uint256)", "lineno": 94, "title": "Integer Overflow ", "type": "Warning"}], "success": true}