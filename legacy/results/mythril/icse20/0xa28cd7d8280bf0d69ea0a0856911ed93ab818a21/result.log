{"error": null, "issues": [{"address": 1569, "code": "rAddr);\n      ", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_RecoveryWithTenant_32_+_4: 0x0\nstorage_3: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_RecoveryWithTenant_0: 0x213ac93200000000000000000000000000000000000000000000000000000000\ncalldatasize_RecoveryWithTenant: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RecoveryWithTenant_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addUser(address,uint256,uint8,bytes32,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "addUser(address,uint256,uint8,bytes32,bytes32)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1700, "code": " }\n    \n    fu", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_RecoveryWithTenant_32_+_4: 0x0\nstorage_3: 0x0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_RecoveryWithTenant_0: 0x213ac93200000000000000000000000000000000000000000000000000000000\ncalldatasize_RecoveryWithTenant: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RecoveryWithTenant_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "addUser(address,uint256,uint8,bytes32,bytes32)", "lineno": 96, "title": "Exception state", "type": "Informational"}, {"address": 2553, "code": "  address public or", "debug": "The exception is triggered under the following conditions:\n\ncalldata_RecoveryWithTenant_4: 0x0\nstorage_1: 0x0\ncalldata_RecoveryWithTenant_0: 0x365b98b200000000000000000000000000000000000000000000000000000000\ncalldatasize_RecoveryWithTenant: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "_function_0x365b98b2", "lineno": 27, "title": "Exception state", "type": "Informational"}, {"address": 3698, "code": ".addr = _newAddr;\n            delete userIndex[_oldAddr]", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "recoverUser(address,address,uint256,uint8,bytes32,bytes32)", "lineno": 109, "title": "Message call to external contract", "type": "Informational"}, {"address": 3698, "code": ".addr = _newAddr;\n            delete userIndex[_oldAddr]", "debug": "", "description": "A possible transaction order independence vulnerability exists in function recoverUser(address,address,uint256,uint8,bytes32,bytes32). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "recoverUser(address,address,uint256,uint8,bytes32,bytes32)", "lineno": 109, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4324, "code": "recovered) {\n            Err", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/17/0xa28cd7d8280bf0d69ea0a0856911ed93ab818a21.sol", "function": "recoverUser(address,address,uint256,uint8,bytes32,bytes32)", "lineno": 56, "title": "Unchecked CALL return value", "type": "Informational"}], "success": true}