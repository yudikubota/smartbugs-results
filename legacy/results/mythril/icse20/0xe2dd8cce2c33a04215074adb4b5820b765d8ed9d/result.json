{
  "contract": "0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d",
  "tool": "mythril",
  "start": 1563602003.2535553,
  "end": 1563602433.6985364,
  "duration": 430.44498109817505,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 943,
        "code": " public disputeIDtoTransactionID;",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x9ace38c200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "_function_0x9ace38c2",
        "lineno": 369,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1059,
        "code": " the arbitrator.\n     *  Note that no checks are required as the checks are done by the arbitrator.\n     *  @param _transactionID The index of the transaction.\n     */\n    function appeal(uint _transactionID) public payable {\n        Transaction storage transaction = transactions[_transactionID];\n\n        arbitrator.appeal.value(msg.value)(transaction.disputeId, arbitratorExtraData);\n    }\n\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\n     *  The purpose of this function is to ensure that the address calling it has ",
        "debug": "calldata_MultipleArbitrableTransaction_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultipleArbitrableTransaction_0: 0xa6a7f0eb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `submitEvidence(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "submitEvidence(uint256,string)",
        "lineno": 629,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1236,
        "code": "tInteraction: now,\n            status: Status.NoDispute\n        }));\n        emit MetaEvidence(transactions.length - 1, _metaEvidence);\n\n        return transactions.length - 1;\n    }\n\n    /** @dev Pay receiver. To be called if the good or service is provided.\n     *  @param _transactionID The index of the transaction.\n     *  @param _amount Amount to pay in wei.\n     */\n    function pay(uint _transactionID, uint _amount) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(transaction.sender == msg.sender, \"The caller must be the sender.\");\n        require(transaction.status == Status.NoDispu",
        "debug": "calldata_MultipleArbitrableTransaction_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultipleArbitrableTransaction_0: 0xda8c3eac00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A possible integer overflow exists in the function `createTransaction(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "createTransaction(uint256,address,string)",
        "lineno": 456,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1900,
        "code": "ionID, uint _ruling) intern",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 659,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2193,
        "code": "_OF_CHOICES, \"Invalid ruling.\");\n\n        /",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*storage_keccac_calldata_MultipleArbitrableTransaction_4: 0x8000\nstorage_keccac_calldata_MultipleArbitrableTransaction_4: 0x0\nstorage_2: 0x0\ncaller: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x311a6c5600000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 661,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2459,
        "code": " party being timed-out.\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x3de0c7ef00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutByReceiver(uint256)",
        "lineno": 533,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2517,
        "code": "nerability as the arbitrator can rule in f",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x3de0c7ef00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutByReceiver(uint256)",
        "lineno": 534,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2874,
        "code": "ion costs.\");\n\n        trans",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x6e72b45200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 572,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3170,
        "code": "    // The sender still has to pay. This can al",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 575,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3269,
        "code": "aid, but arbitrationCost has increased.\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\nstorage_1: 0x20\ncalldata_MultipleArbitrableTransaction_4: 0x0\nreturndatasize: 0x20\nretval_3170: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x6e72b45200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 575,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3673,
        "code": "/ The sender has also paid the fee. ",
        "debug": "storage_6 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0xa000000bec000000000000000000000000000000000000000000000000000002\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\ncallvalue: 0xff7ffff2120000000000000001ffffffffffffffffffdffffffffff7fffffff1\nstorage_1: 0x4\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\ncaller: 0x0\nreturndatasize: 0x20\nretval_3170: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x6e72b45200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A possible integer overflow exists in the function `payArbitrationFeeByReceiver(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 579,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3679,
        "code": "/ The sender has also paid the fee. ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 579,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3850,
        "code": "    *  @param _arbitrationCost Am",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 586,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4010,
        "code": " arbitration costs.\");\n\n    ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x7b44cdb500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 546,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4306,
        "code": "now;\n\n        // The receiver still has to pay.",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 548,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4405,
        "code": " if he has paid, but arbitrationCost has i",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\nstorage_1: 0x20\ncalldata_MultipleArbitrableTransaction_4: 0x0\nreturndatasize: 0x20\nretval_4306: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x7b44cdb500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 550,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4809,
        "code": "r);\n        } else { // The receiv",
        "debug": "storage_5 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0xa000000bec000000000000000000000000000000000000000000000000000002\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\ncallvalue: 0xff7ffff2120000000000000001ffffffffffffffffffdffffffffff7fffffff1\nstorage_1: 0x4\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\ncaller: 0x0\nreturndatasize: 0x20\nretval_4306: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0x7b44cdb500000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A possible integer overflow exists in the function `payArbitrationFeeBySender(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 553,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4815,
        "code": "r);\n        } else { // The receiv",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 553,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4986,
        "code": "led by the receiver. UNTRUSTED.\n ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeBySender(uint256)",
        "lineno": 559,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5144,
        "code": "_disputeID];\n        Transac",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x7e69b7b000000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "appeal(uint256)",
        "lineno": 645,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5452,
        "code": "transaction = transactions[transactionID];\n        require(msg.sender == addre",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "appeal(uint256)",
        "lineno": 646,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5492,
        "code": " public disputeIDtoTransactionID;",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0x9ace38c200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "_function_0x9ace38c2",
        "lineno": 369,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5675,
        "code": "_transactionID The index of ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0xa6a7f0eb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "submitEvidence(uint256,string)",
        "lineno": 631,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6059,
        "code": ".disputeId, arbitratorExtraData);\n  ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0xa6a7f0eb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "submitEvidence(uint256,string)",
        "lineno": 636,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6597,
        "code": ";\n\ninterface IArbi",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MultipleArbitrableTransaction_0: 0xda8c3eac00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A possible integer overflow exists in the function `createTransaction(uint256,address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "createTransaction(uint256,address,string)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6871,
        "code": "  }\n\n    /** @dev Pay receiver. To be called if the good or service is provided.\n     *  @param _transactionID The index of the transaction.\n     *  @param _amount Amount to pay in wei.\n     */\n    function pay(uint _transactionID, uint _amount) public {\n        Transaction storage transaction = transactions[_transactionID];\n        require(tr",
        "debug": "The exception is triggered under the following conditions:\n\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultipleArbitrableTransaction_4 + calldata_MultipleArbitrableTransaction_32 + 36)) +\n256: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_MultipleArbitrableTransaction_0: 0xda8c3eac00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "createTransaction(uint256,address,string)",
        "lineno": 462,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7078,
        "code": "f the transaction.\n     */\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0xee22610b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "executeTransaction(uint256)",
        "lineno": 509,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7266,
        "code": "  require(transaction.status == Status",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_3 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\ntimestamp: 0x0\nstorage_7 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0xee22610b00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "executeTransaction(uint256)",
        "lineno": 514,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7510,
        "code": " receiver.\");\n        require(now - transaction.l",
        "debug": "",
        "description": "In the function `executeTransaction(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "executeTransaction(uint256)",
        "lineno": 514,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 7600,
        "code": "sender);\n    }\n\n    /** @dev",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0xef48eee600000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "pay(uint256,uint256)",
        "lineno": 476,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7857,
        "code": "onID The index of the transaction.\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\ncaller: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0xef48eee600000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "pay(uint256,uint256)",
        "lineno": 480,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8428,
        "code": "on storage transaction = tra",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0xf42cadc100000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutBySender(uint256)",
        "lineno": 524,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8486,
        "code": "nID];\n\n        require(transaction.status ==",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n9*calldata_MultipleArbitrableTransaction_4: 0x8000\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x1\ncalldata_MultipleArbitrableTransaction_0: 0xf42cadc100000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutBySender(uint256)",
        "lineno": 524,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9450,
        "code": "ionID, _amountReimbursed, ms",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_MultipleArbitrableTransaction_4: 0x0\nstorage_0: 0x0\ncalldata_MultipleArbitrableTransaction_0: 0xfe43a99200000000000000000000000000000000000000000000000000000000\ncalldatasize_MultipleArbitrableTransaction: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "reimburse(uint256,uint256)",
        "lineno": 491,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10565,
        "code": "******************** //\n\n    /** @dev Getter to know the count of t",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function rule(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 683,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 10565,
        "code": "******************** //\n\n    /** @dev Getter to know the count of t",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 683,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 10682,
        "code": "nsactions.\n     */\n    function getCountTransactions() public view retu",
        "debug": "",
        "description": "In the function `timeOutByReceiver(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutByReceiver(uint256)",
        "lineno": 686,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 10682,
        "code": "nsactions.\n     */\n    function getCountTransactions() public view retu",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "timeOutByReceiver(uint256)",
        "lineno": 686,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 10802,
        "code": "e the specified address is the receiv",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10892\n",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 692,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10802,
        "code": "e the specified address is the receiv",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function rule(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 692,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 10802,
        "code": "e the specified address is the receiv",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 692,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 10892,
        "code": "ender.\n     *  This function must be us",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "rule(uint256,uint256)",
        "lineno": 692,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 11046,
        "code": "end(extraFeeSender);\n        }\n\n        //",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/20/0xe2dd8cce2c33a04215074adb4b5820b765d8ed9d.sol",
        "function": "payArbitrationFeeByReceiver(uint256)",
        "lineno": 599,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}