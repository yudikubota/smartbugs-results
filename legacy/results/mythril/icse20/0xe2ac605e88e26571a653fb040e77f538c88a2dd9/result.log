{"error": null, "issues": [{"address": 326, "code": "yPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specifie", "debug": "calldata_Whitelist_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Whitelist_0: 0x3d6c4df700000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "updateWallet(address,string)", "lineno": 452, "title": "Integer Overflow ", "type": "Warning"}, {"address": 926, "code": "et The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet", "debug": "calldata_Whitelist_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Whitelist_0: 0xc28aafb100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "addWallet(address,string)", "lineno": 438, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2310, "code": "ction walletData(", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4 +\n0: 0x0\nstorage_3: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xff00\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0xa75fe8e100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeWallet(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "removeWallet(address)", "lineno": 471, "title": "Integer Underflow", "type": "Warning"}, {"address": 3605, "code": "pi address.\n    * @dev Accept request from owner only.\n    * @param _api The address of backend API.\n    */\n    function setApiAddress(address _api) onlyOwner public {\n        require(_api != address(0));\n\n        addressApi = _api;\n    }\n\n    /**\n    * @dev Add wallet to whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of wallet to add.\n    * @param _data The checksum of additional wallet data.\n    */  \n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(!isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n        whitelist[_wallet].whitelisted = true;\n        whitelistLength++;\n    }\n\n    /**\n    * @dev Update additional data for whitelisted wallet.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n    }\n\n    /**\n    * @dev Remove wallet from whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to remove.\n    */  \n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specified wallet whether it is in the whitelist.\n    * @param _wallet The address of wallet to check.\n    */ \n    function isWhitelisted(address _wallet) constant public returns (bool) {\n        return whitelist[_wallet].whitelisted;\n    }\n\n    /**\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n    * @param _wallet The address of wallet to get.\n    */ \n    function walletData(address _wallet) constant public returns (string) {\n        return whitelist[_wallet].data;\n    }\n\n}", "debug": "keccac_0_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0x0\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0xc28aafb100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "addWallet(address,string)", "lineno": 411, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3634, "code": "pi address.\n    * @dev Accept request from owner only.\n    * @param _api The address of backend API.\n    */\n    function setApiAddress(address _api) onlyOwner public {\n        require(_api != address(0));\n\n        addressApi = _api;\n    }\n\n    /**\n    * @dev Add wallet to whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of wallet to add.\n    * @param _data The checksum of additional wallet data.\n    */  \n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(!isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n        whitelist[_wallet].whitelisted = true;\n        whitelistLength++;\n    }\n\n    /**\n    * @dev Update additional data for whitelisted wallet.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n    }\n\n    /**\n    * @dev Remove wallet from whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to remove.\n    */  \n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specified wallet whether it is in the whitelist.\n    * @param _wallet The address of wallet to check.\n    */ \n    function isWhitelisted(address _wallet) constant public returns (bool) {\n        return whitelist[_wallet].whitelisted;\n    }\n\n    /**\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n    * @param _wallet The address of wallet to get.\n    */ \n    function walletData(address _wallet) constant public returns (string) {\n        return whitelist[_wallet].data;\n    }\n\n}", "debug": "calldata_Whitelist_4 + calldata_Whitelist_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0x0\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0xc28aafb100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "addWallet(address,string)", "lineno": 411, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3648, "code": "pi address.\n    * @dev Accept request from owner only.\n    * @param _api The address of backend API.\n    */\n    function setApiAddress(address _api) onlyOwner public {\n        require(_api != address(0));\n\n        addressApi = _api;\n    }\n\n    /**\n    * @dev Add wallet to whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of wallet to add.\n    * @param _data The checksum of additional wallet data.\n    */  \n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(!isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n        whitelist[_wallet].whitelisted = true;\n        whitelistLength++;\n    }\n\n    /**\n    * @dev Update additional data for whitelisted wallet.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n    }\n\n    /**\n    * @dev Remove wallet from whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to remove.\n    */  \n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specified wallet whether it is in the whitelist.\n    * @param _wallet The address of wallet to check.\n    */ \n    function isWhitelisted(address _wallet) constant public returns (bool) {\n        return whitelist[_wallet].whitelisted;\n    }\n\n    /**\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n    * @param _wallet The address of wallet to get.\n    */ \n    function walletData(address _wallet) constant public returns (string) {\n        return whitelist[_wallet].data;\n    }\n\n}", "debug": "calldata_Whitelist_4 + calldata_Whitelist_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0x0\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0xc28aafb100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "addWallet(address,string)", "lineno": 411, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3670, "code": "pi address.\n    * @dev Accept request from owner only.\n    * @param _api The address of backend API.\n    */\n    function setApiAddress(address _api) onlyOwner public {\n        require(_api != address(0));\n\n        addressApi = _api;\n    }\n\n    /**\n    * @dev Add wallet to whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of wallet to add.\n    * @param _data The checksum of additional wallet data.\n    */  \n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(!isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n        whitelist[_wallet].whitelisted = true;\n        whitelistLength++;\n    }\n\n    /**\n    * @dev Update additional data for whitelisted wallet.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n    }\n\n    /**\n    * @dev Remove wallet from whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to remove.\n    */  \n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specified wallet whether it is in the whitelist.\n    * @param _wallet The address of wallet to check.\n    */ \n    function isWhitelisted(address _wallet) constant public returns (bool) {\n        return whitelist[_wallet].whitelisted;\n    }\n\n    /**\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n    * @param _wallet The address of wallet to get.\n    */ \n    function walletData(address _wallet) constant public returns (string) {\n        return whitelist[_wallet].data;\n    }\n\n}", "debug": "keccac_0_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Whitelist_4 + calldata_Whitelist_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xff00\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0x3d6c4df700000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateWallet(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "updateWallet(address,string)", "lineno": 411, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3751, "code": "pi address.\n    * @dev Accept request from owner only.\n    * @param _api The address of backend API.\n    */\n    function setApiAddress(address _api) onlyOwner public {\n        require(_api != address(0));\n\n        addressApi = _api;\n    }\n\n    /**\n    * @dev Add wallet to whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of wallet to add.\n    * @param _data The checksum of additional wallet data.\n    */  \n    function addWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(!isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n        whitelist[_wallet].whitelisted = true;\n        whitelistLength++;\n    }\n\n    /**\n    * @dev Update additional data for whitelisted wallet.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to update.\n    * @param _data The checksum of new additional wallet data.\n    */      \n    function updateWallet(address _wallet, string _data) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        whitelist[_wallet].data = _data;\n    }\n\n    /**\n    * @dev Remove wallet from whitelist.\n    * @dev Accept request from privilege adresses only.\n    * @param _wallet The address of whitelisted wallet to remove.\n    */  \n    function removeWallet(address _wallet) onlyPrivilegeAddresses public {\n        require(_wallet != address(0));\n        require(isWhitelisted(_wallet));\n        delete whitelist[_wallet];\n        whitelistLength--;\n    }\n\n    /**\n    * @dev Check the specified wallet whether it is in the whitelist.\n    * @param _wallet The address of wallet to check.\n    */ \n    function isWhitelisted(address _wallet) constant public returns (bool) {\n        return whitelist[_wallet].whitelisted;\n    }\n\n    /**\n    * @dev Get the checksum of additional data for the specified whitelisted wallet.\n    * @param _wallet The address of wallet to get.\n    */ \n    function walletData(address _wallet) constant public returns (string) {\n        return whitelist[_wallet].data;\n    }\n\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4_+\n0: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4 +\n0: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Whitelist_4: 0xff00\ncalldata_Whitelist_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_Whitelist_0: 0xa75fe8e100000000000000000000000000000000000000000000000000000000\ncalldatasize_Whitelist: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeWallet(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0xe2ac605e88e26571a653fb040e77f538c88a2dd9.sol", "function": "removeWallet(address)", "lineno": 411, "title": "Integer Overflow ", "type": "Warning"}], "success": true}