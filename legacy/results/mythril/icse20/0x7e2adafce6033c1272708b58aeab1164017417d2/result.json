{
  "contract": "0x7e2adafce6033c1272708b58aeab1164017417d2",
  "tool": "mythril",
  "start": 1563563666.7574246,
  "end": 1563565177.38049,
  "duration": 1510.6230654716492,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 894,
        "code": "Addresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n}\n\n\nfunction getAdv(uint _cardType, uint _cardId) public view returns (\nstring text,\nstring link,\nuint256 card_type,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 cardId\n) {\n  Adv storage _adv = advs[0];\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type =",
        "debug": "storage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x20\nstorage_1 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               Concat(0,\n                      ~(~Extract(255,\n                                 1,\n                                 115792089237316195423570985008687907853269984665640564039457584007913129639935 +\n                                 256*\n                                 If(Extract(0,\n                                        0,\n                                        storage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4) ==\n                                    0,\n                                    1,\n                                    0)) |\n                        ~Extract(255,\n                                 1,\n                                 storage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4))))): 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x1\ncalldata_CryptoflipCar_0: 0x5e8be19000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getCar(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getCar(uint256)",
        "lineno": 269,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1053,
        "code": "vs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 0;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = companyId;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake('DB5',ownerAddress,0,10000000000000000);\n  addMake('DB6',ownerAddress,0,10000000000000000);\n  addMake('DB9',owne",
        "debug": "calldata_CryptoflipCar_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 340,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3743,
        "code": "\nstring name,\naddress",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoflipCar_0: 0x57d1391700000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getCompany(uint256)",
        "lineno": 241,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4024,
        "code": " returns (\ns",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\ncalldata_CryptoflipCar_0: 0x5e8be19000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getCar(uint256)",
        "lineno": 278,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4244,
        "code": "int256 card_type,\naddress ownerAddre",
        "debug": "storage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x20\nstorage_1 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x800001f0842ba1ef7be0000000007c5d201c7813e45f105c1c9364d54b80000\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x1\ncalldata_CryptoflipCar_0: 0x5e8be19000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getCar(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getCar(uint256)",
        "lineno": 281,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4246,
        "code": "int256 card_type,\naddress ownerAddre",
        "debug": "storage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x20\nstorage_1 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n6*calldata_CryptoflipCar_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x1\ncalldata_CryptoflipCar_0: 0x5e8be19000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getCar(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getCar(uint256)",
        "lineno": 281,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5053,
        "code": " + 5;\n  } else if ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_32 + 4: 0x0\nstorage_2: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x68fcb6ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncalldata_CryptoflipCar_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "purchaseCard(uint256,uint256)",
        "lineno": 134,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5184,
        "code": " 2;\n  } else i",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_32 + 4: 0x0\nstorage_3: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x68fcb6ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncalldata_CryptoflipCar_4: 0x1\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "purchaseCard(uint256,uint256)",
        "lineno": 138,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5318,
        "code": "Addresses.len",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_32 + 4: 0x0\nstorage_4: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x68fcb6ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncalldata_CryptoflipCar_4: 0x2\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "purchaseCard(uint256,uint256)",
        "lineno": 142,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7772,
        "code": "ce   = 50000000000",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 342,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7799,
        "code": ";\n  advs[advId].card",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 342,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8561,
        "code": "ame,\naddress[]",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_3: 0x0\ncalldata_CryptoflipCar_0: 0x7a4b707500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getMake(uint256)",
        "lineno": 259,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8929,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_3: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x7e3ef93500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "setReleaseMake(uint256,bool)",
        "lineno": 421,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9024,
        "code": "card_ty",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_0: 0x874f8ef600000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "getAdv(uint256,uint256)",
        "lineno": 297,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9683,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0xa1d707a300000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "setReleaseCar(uint256,bool)",
        "lineno": 421,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9954,
        "code": "sAreInitiated = true;",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0xbdcc809a00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "setReleaseCompany(uint256,bool)",
        "lineno": 358,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10035,
        "code": "l is_adv = f",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_0: 0xd6ddbd2d00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\nstorage_5: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "purchaseAdv(uint256,uint256,string,string)",
        "lineno": 81,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11570,
        "code": "advs[advId].c",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x4d908a5500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `InitiateCars()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "InitiateCars()",
        "lineno": 409,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11597,
        "code": "ype   = 2;\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x4d908a5500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "InitiateCars()",
        "lineno": 409,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 14431,
        "code": "ntract CryptoflipCar {\n\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Company {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nbool is_released;\n}\n\nstruct Make {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nuint256 companyId;\nbool is_released;\n}\n\nstruct Car {\nstring name;\naddress[] ownerAddresses;\nuint256 curPrice;\nuint256 companyId;\nuint256 makeId;\nbool is_released;\n}\n\nstruct Adv {\nstring text;\nstring link;\nuint256 card_type;  /* 0: company 1: makes 2: car*/\nuint256 curPrice;\naddress ownerAddress;\nuint256 cardId;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nAdv[] advs;\nWhaleCard whalecard;\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseAdv(uint256 _cardType, uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= advs[_advId].curPrice);\n  require(isPaused == false);\n  uint256 _advId;\n  bool is_adv = false;\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _advId = i;\n        is_adv = true;\n    }\n  }    \n  require(is_adv == true);\n  uint256 totalpercent = 160;\n\n  uint256 commission5percent = (msg.value * 5 / totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n\n  uint256 commissionOwner = msg.value - commission5percent;\n    \n  if (advs[_advId].card_type == 0){\n    companies[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 1) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 2) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  }\n\n  advs[_advId].ownerAddress.transfer(commissionOwner);\n  advs[_advId].ownerAddress = msg.sender;\n  advs[_advId].curPrice = div(mul(advs[_advId].curPrice, totalpercent), 100);\n  advs[_advId].text = _text;\n  advs[_advId].link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCard(uint256 _cardType, uint256 _cardId) public payable {\n  require(isPaused == false);   \n  uint256 totalpercent = 150;\n  uint256 ownercount = 0;\n  if (_cardType == 0){\n      require(companies[_cardId].is_released == true);\n      require(msg.value >= companies[_cardId].curPrice);\n      totalpercent = totalpercent + 5;\n  } else if (_cardType == 1) {\n      require(makes[_cardId].is_released == true);\n      require(msg.value >= makes[_cardId].curPrice);      \n      totalpercent = totalpercent + 5 + 2;\n  } else if (_cardType == 2) {\n      require(cars[_cardId].is_released == true);\n      require(msg.value >= cars[_cardId].curPrice);            \n      uint256 len = cars[_cardId].ownerAddresses.length;\n      ownercount = 1;\n      if (cars[_cardId].ownerAddresses.length > 4){\n        ownercount = 3;\n      } else {\n        ownercount = len-1;\n      }\n      totalpercent = 150 + 5 + 2 + 2 + mul(ownercount, 2);\n  }\n\n  uint256 commissionOwner = msg.value;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  \n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n\n  if (_cardType == 0){\n    companies[_cardId].ownerAddress.transfer(commissionOwner);\n    companies[_cardId].ownerAddress = msg.sender;\n    companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 1) {\n    uint256 companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission5percent;\n    makes[_cardId].ownerAddress.transfer(commissionOwner);\n    makes[_cardId].ownerAddress = msg.sender;\n    makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 2){\n    companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n    \n    uint256 makeId = cars[_cardId].makeId;\n\n    makes[makeId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n\n    if (len > 1){\n        for (uint i=len-2; i>=0; i--) {\n            if (i > len-5){\n                cars[_cardId].ownerAddresses[i].transfer(commission2percent);\n                commissionOwner = commissionOwner - commission2percent;\n            }\n        }\n    }\n\n    cars[_cardId].ownerAddresses[len-1].transfer(commissionOwner);\n    cars[_cardId].ownerAddresses.push(msg.sender);\n    if (ownercount < 3) totalpercent = totalpercent + 2;\n    cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n  }\n}\n\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n}\n\n\nfunction getAdv(uint _cardType, uint _cardId) public view returns (\nstring text,\nstring link,\nuint256 card_type,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 cardId\n) {\n  Adv storage _adv = advs[0];\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _adv = advs[i];\n    }\n  }\n  text = _adv.text;\n  link = _adv.link;\n  ownerAddress1 = _adv.ownerAddress;\n  curPrice = _adv.curPrice;\n  cardId = _adv.cardId;\n  card_type = _adv.card_type;\n}\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany('Aston Martin',ownerAddress, 100000000000000000);\n  addCompany('BMW',ownerAddress, 100000000000000000);\n  addCompany('Ferrari',ownerAddress, 100000000000000000);\n  addCompany('Honda',ownerAddress, 100000000000000000);\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 0;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = companyId;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake('DB5',ownerAddress,0,10000000000000000);\n  addMake('DB6',ownerAddress,0,10000000000000000);\n  addMake('DB9',ownerAddress,0,10000000000000000);\n  addMake('One-77',ownerAddress,0,10000000000000000);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 companyId, uint256 price) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 1;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = makeId;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar('1964 DB5 James Bond Edition',ownerAddress, 0, 0, 5000000000000000);\n  addCar('Blue 1965 ',ownerAddress, 0, 0, 5000000000000000);\n  addCar('1964 DB5 James Bond Edition',ownerAddress,0,0,5000000000000000);\n  addCar('Blue 1965 ',ownerAddress,0,0,5000000000000000);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 companyId, uint256 makeId, uint256 price ) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses.push(address1);\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 2;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = carId;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_2: 0x413eb400000002088020000002000010576c118a884fd9a3152000004b020000\nkeccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n4*storage_2: 0xff8007b08649eba518062bad4024f63b0581e1673f0b574bf7ba80dfcf20ca00\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n4*storage_2: 0x7403a9bcd8faddf5d1e685cff3ba22e265c519effac9cb3ec6759905c67efc51\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14460,
        "code": "ntract CryptoflipCar {\n\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Company {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nbool is_released;\n}\n\nstruct Make {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nuint256 companyId;\nbool is_released;\n}\n\nstruct Car {\nstring name;\naddress[] ownerAddresses;\nuint256 curPrice;\nuint256 companyId;\nuint256 makeId;\nbool is_released;\n}\n\nstruct Adv {\nstring text;\nstring link;\nuint256 card_type;  /* 0: company 1: makes 2: car*/\nuint256 curPrice;\naddress ownerAddress;\nuint256 cardId;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nAdv[] advs;\nWhaleCard whalecard;\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseAdv(uint256 _cardType, uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= advs[_advId].curPrice);\n  require(isPaused == false);\n  uint256 _advId;\n  bool is_adv = false;\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _advId = i;\n        is_adv = true;\n    }\n  }    \n  require(is_adv == true);\n  uint256 totalpercent = 160;\n\n  uint256 commission5percent = (msg.value * 5 / totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n\n  uint256 commissionOwner = msg.value - commission5percent;\n    \n  if (advs[_advId].card_type == 0){\n    companies[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 1) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 2) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  }\n\n  advs[_advId].ownerAddress.transfer(commissionOwner);\n  advs[_advId].ownerAddress = msg.sender;\n  advs[_advId].curPrice = div(mul(advs[_advId].curPrice, totalpercent), 100);\n  advs[_advId].text = _text;\n  advs[_advId].link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCard(uint256 _cardType, uint256 _cardId) public payable {\n  require(isPaused == false);   \n  uint256 totalpercent = 150;\n  uint256 ownercount = 0;\n  if (_cardType == 0){\n      require(companies[_cardId].is_released == true);\n      require(msg.value >= companies[_cardId].curPrice);\n      totalpercent = totalpercent + 5;\n  } else if (_cardType == 1) {\n      require(makes[_cardId].is_released == true);\n      require(msg.value >= makes[_cardId].curPrice);      \n      totalpercent = totalpercent + 5 + 2;\n  } else if (_cardType == 2) {\n      require(cars[_cardId].is_released == true);\n      require(msg.value >= cars[_cardId].curPrice);            \n      uint256 len = cars[_cardId].ownerAddresses.length;\n      ownercount = 1;\n      if (cars[_cardId].ownerAddresses.length > 4){\n        ownercount = 3;\n      } else {\n        ownercount = len-1;\n      }\n      totalpercent = 150 + 5 + 2 + 2 + mul(ownercount, 2);\n  }\n\n  uint256 commissionOwner = msg.value;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  \n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n\n  if (_cardType == 0){\n    companies[_cardId].ownerAddress.transfer(commissionOwner);\n    companies[_cardId].ownerAddress = msg.sender;\n    companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 1) {\n    uint256 companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission5percent;\n    makes[_cardId].ownerAddress.transfer(commissionOwner);\n    makes[_cardId].ownerAddress = msg.sender;\n    makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 2){\n    companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n    \n    uint256 makeId = cars[_cardId].makeId;\n\n    makes[makeId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n\n    if (len > 1){\n        for (uint i=len-2; i>=0; i--) {\n            if (i > len-5){\n                cars[_cardId].ownerAddresses[i].transfer(commission2percent);\n                commissionOwner = commissionOwner - commission2percent;\n            }\n        }\n    }\n\n    cars[_cardId].ownerAddresses[len-1].transfer(commissionOwner);\n    cars[_cardId].ownerAddresses.push(msg.sender);\n    if (ownercount < 3) totalpercent = totalpercent + 2;\n    cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n  }\n}\n\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n}\n\n\nfunction getAdv(uint _cardType, uint _cardId) public view returns (\nstring text,\nstring link,\nuint256 card_type,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 cardId\n) {\n  Adv storage _adv = advs[0];\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _adv = advs[i];\n    }\n  }\n  text = _adv.text;\n  link = _adv.link;\n  ownerAddress1 = _adv.ownerAddress;\n  curPrice = _adv.curPrice;\n  cardId = _adv.cardId;\n  card_type = _adv.card_type;\n}\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany('Aston Martin',ownerAddress, 100000000000000000);\n  addCompany('BMW',ownerAddress, 100000000000000000);\n  addCompany('Ferrari',ownerAddress, 100000000000000000);\n  addCompany('Honda',ownerAddress, 100000000000000000);\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 0;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = companyId;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake('DB5',ownerAddress,0,10000000000000000);\n  addMake('DB6',ownerAddress,0,10000000000000000);\n  addMake('DB9',ownerAddress,0,10000000000000000);\n  addMake('One-77',ownerAddress,0,10000000000000000);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 companyId, uint256 price) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 1;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = makeId;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar('1964 DB5 James Bond Edition',ownerAddress, 0, 0, 5000000000000000);\n  addCar('Blue 1965 ',ownerAddress, 0, 0, 5000000000000000);\n  addCar('1964 DB5 James Bond Edition',ownerAddress,0,0,5000000000000000);\n  addCar('Blue 1965 ',ownerAddress,0,0,5000000000000000);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 companyId, uint256 makeId, uint256 price ) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses.push(address1);\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 2;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = carId;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_2: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CryptoflipCar_4 + calldata_CryptoflipCar_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 14474,
        "code": "ntract CryptoflipCar {\n\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Company {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nbool is_released;\n}\n\nstruct Make {\nstring name;\naddress ownerAddress;\nuint256 curPrice;\nuint256 companyId;\nbool is_released;\n}\n\nstruct Car {\nstring name;\naddress[] ownerAddresses;\nuint256 curPrice;\nuint256 companyId;\nuint256 makeId;\nbool is_released;\n}\n\nstruct Adv {\nstring text;\nstring link;\nuint256 card_type;  /* 0: company 1: makes 2: car*/\nuint256 curPrice;\naddress ownerAddress;\nuint256 cardId;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nAdv[] advs;\nWhaleCard whalecard;\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseAdv(uint256 _cardType, uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= advs[_advId].curPrice);\n  require(isPaused == false);\n  uint256 _advId;\n  bool is_adv = false;\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _advId = i;\n        is_adv = true;\n    }\n  }    \n  require(is_adv == true);\n  uint256 totalpercent = 160;\n\n  uint256 commission5percent = (msg.value * 5 / totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n\n  uint256 commissionOwner = msg.value - commission5percent;\n    \n  if (advs[_advId].card_type == 0){\n    companies[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 1) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  } else if (advs[_advId].card_type == 2) {\n    makes[advs[_advId].cardId].ownerAddress.transfer(commission5percent);\n    commissionOwner = commissionOwner - commission5percent;\n  }\n\n  advs[_advId].ownerAddress.transfer(commissionOwner);\n  advs[_advId].ownerAddress = msg.sender;\n  advs[_advId].curPrice = div(mul(advs[_advId].curPrice, totalpercent), 100);\n  advs[_advId].text = _text;\n  advs[_advId].link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCard(uint256 _cardType, uint256 _cardId) public payable {\n  require(isPaused == false);   \n  uint256 totalpercent = 150;\n  uint256 ownercount = 0;\n  if (_cardType == 0){\n      require(companies[_cardId].is_released == true);\n      require(msg.value >= companies[_cardId].curPrice);\n      totalpercent = totalpercent + 5;\n  } else if (_cardType == 1) {\n      require(makes[_cardId].is_released == true);\n      require(msg.value >= makes[_cardId].curPrice);      \n      totalpercent = totalpercent + 5 + 2;\n  } else if (_cardType == 2) {\n      require(cars[_cardId].is_released == true);\n      require(msg.value >= cars[_cardId].curPrice);            \n      uint256 len = cars[_cardId].ownerAddresses.length;\n      ownercount = 1;\n      if (cars[_cardId].ownerAddresses.length > 4){\n        ownercount = 3;\n      } else {\n        ownercount = len-1;\n      }\n      totalpercent = 150 + 5 + 2 + 2 + mul(ownercount, 2);\n  }\n\n  uint256 commissionOwner = msg.value;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  \n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n\n  if (_cardType == 0){\n    companies[_cardId].ownerAddress.transfer(commissionOwner);\n    companies[_cardId].ownerAddress = msg.sender;\n    companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 1) {\n    uint256 companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission5percent;\n    makes[_cardId].ownerAddress.transfer(commissionOwner);\n    makes[_cardId].ownerAddress = msg.sender;\n    makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n  } else if (_cardType == 2){\n    companyId = makes[_cardId].companyId;\n    companies[companyId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n    \n    uint256 makeId = cars[_cardId].makeId;\n\n    makes[makeId].ownerAddress.transfer(commission2percent);\n    commissionOwner = commissionOwner - commission2percent;\n\n    if (len > 1){\n        for (uint i=len-2; i>=0; i--) {\n            if (i > len-5){\n                cars[_cardId].ownerAddresses[i].transfer(commission2percent);\n                commissionOwner = commissionOwner - commission2percent;\n            }\n        }\n    }\n\n    cars[_cardId].ownerAddresses[len-1].transfer(commissionOwner);\n    cars[_cardId].ownerAddresses.push(msg.sender);\n    if (ownercount < 3) totalpercent = totalpercent + 2;\n    cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n  }\n}\n\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n}\n\n\nfunction getAdv(uint _cardType, uint _cardId) public view returns (\nstring text,\nstring link,\nuint256 card_type,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 cardId\n) {\n  Adv storage _adv = advs[0];\n  for (uint i=0; i < advs.length; i++) {\n    if (advs[i].card_type == _cardType && advs[i].cardId == _cardId){\n        _adv = advs[i];\n    }\n  }\n  text = _adv.text;\n  link = _adv.link;\n  ownerAddress1 = _adv.ownerAddress;\n  curPrice = _adv.curPrice;\n  cardId = _adv.cardId;\n  card_type = _adv.card_type;\n}\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany('Aston Martin',ownerAddress, 100000000000000000);\n  addCompany('BMW',ownerAddress, 100000000000000000);\n  addCompany('Ferrari',ownerAddress, 100000000000000000);\n  addCompany('Honda',ownerAddress, 100000000000000000);\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 0;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = companyId;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake('DB5',ownerAddress,0,10000000000000000);\n  addMake('DB6',ownerAddress,0,10000000000000000);\n  addMake('DB9',ownerAddress,0,10000000000000000);\n  addMake('One-77',ownerAddress,0,10000000000000000);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 companyId, uint256 price) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 1;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = makeId;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar('1964 DB5 James Bond Edition',ownerAddress, 0, 0, 5000000000000000);\n  addCar('Blue 1965 ',ownerAddress, 0, 0, 5000000000000000);\n  addCar('1964 DB5 James Bond Edition',ownerAddress,0,0,5000000000000000);\n  addCar('Blue 1965 ',ownerAddress,0,0,5000000000000000);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 companyId, uint256 makeId, uint256 price ) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses.push(address1);\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = true;\n\n  uint advId = advs.length++;\n  advs[advId].text = 'Your Ad here';\n  advs[advId].link = 'http://cryptoflipcars.site/';\n  advs[advId].curPrice   = 5000000000000000;\n  advs[advId].card_type   = 2;\n  advs[advId].ownerAddress = address1;\n  advs[advId].cardId = carId;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_2: 0x3164cdbbd7715000000000000000000000000000000000000000000000000000\ncalldata_CryptoflipCar_4 + calldata_CryptoflipCar_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x6caabc6f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x7e2adafce6033c1272708b58aeab1164017417d2.sol",
        "function": "addCompany(string,address,uint256)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}