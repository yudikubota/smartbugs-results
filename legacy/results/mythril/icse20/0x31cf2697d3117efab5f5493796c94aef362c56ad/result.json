{
  "contract": "0x31cf2697d3117efab5f5493796c94aef362c56ad",
  "tool": "mythril",
  "start": 1563243659.274629,
  "end": 1563243857.4629197,
  "duration": 198.1882905960083,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 883,
        "code": "n (address(0));\n        }\n        // Divide the signature in r, s and v variables\n        (v, r, s) = splitSignature(sig);\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        if (v < 27) {\n            v += 27;\n        }\n        // If the version is correct return the signer address\n        if (v != 27 && v != 28) {\n            return (address(0));\n        } else {\n            bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n            bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, hash));\n            return ecrecover(prefixedHash, v, r, s);\n        }\n    }\n}\n\n/**\n * @title A DEKLA token access control\n * @author DEKLA (https://www.dekla.io)\n * @dev The Dekla token has 3 C level address to manage.\n * They can execute special actions but it need to be approved by another C level address.\n *",
        "debug": "calldata_SiringClockAuction_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SiringClockAuction_0: 0x19045a2500000000000000000000000000000000000000000000000000000000\ncalldatasize_SiringClockAuction: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `recover(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "recover(bytes32,bytes)",
        "lineno": 222,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4949,
        "code": "    Auction memory auc",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "withdrawDklBalance()",
        "lineno": 1867,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4949,
        "code": "    Auction memory auc",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5141\n",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "withdrawDklBalance()",
        "lineno": 1867,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5141,
        "code": "row(_seller, _tokenId);\n        Auction memory auct",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "withdrawDklBalance()",
        "lineno": 1866,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7298,
        "code": "- Seller, if not the message sender\n    fu",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawBalance(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "withdrawBalance()",
        "lineno": 1856,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 12159,
        "code": "     // on the lookup above failing. An invalid _tokenId",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "createEthAuction(uint256,address,uint256)",
        "lineno": 1414,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 12159,
        "code": "     // on the lookup above failing. An invalid _tokenId",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function createEthAuction(uint256,address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "createEthAuction(uint256,address,uint256)",
        "lineno": 1414,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 12274,
        "code": "teCut() is guaranteed to return a\n   ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "createEthAuction(uint256,address,uint256)",
        "lineno": 1433,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 12285,
        "code": "teCut() is guaranteed to return a\n   ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "createEthAuction(uint256,address,uint256)",
        "lineno": 1433,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 12316,
        "code": "teCut() is guaranteed to return a\n   ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_contracts/0x31cf2697d3117efab5f5493796c94aef362c56ad.sol",
        "function": "createEthAuction(uint256,address,uint256)",
        "lineno": 1433,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}