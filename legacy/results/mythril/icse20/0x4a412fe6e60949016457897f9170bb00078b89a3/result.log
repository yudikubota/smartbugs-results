{"error": null, "issues": [{"address": 636, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_SimpleMultisig_0: 0x2f430e1700000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "approveTx(uint8)", "lineno": 59, "title": "Exception state", "type": "Informational"}, {"address": 677, "code": " assert(tx", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_SimpleMultisig_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_SimpleMultisig_0: 0x2f430e1700000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "approveTx(uint8)", "lineno": 40, "title": "Exception state", "type": "Informational"}, {"address": 759, "code": "r);\n    assert(txs[txIdx].active);\n\n    ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_0 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0x0\ncalldata_SimpleMultisig_4: 0xfe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_SimpleMultisig_0: 0x2f430e1700000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "approveTx(uint8)", "lineno": 39, "title": "Exception state", "type": "Informational"}, {"address": 816, "code": "dx].active = false;\n    t", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0x0\ncaller: 0x0\nstorage_0 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_SimpleMultisig_4: 0xfe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_SimpleMultisig_0: 0x2f430e1700000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "approveTx(uint8)", "lineno": 42, "title": "Exception state", "type": "Informational"}, {"address": 1027, "code": "ount);\n  }\n\n  // founder who created tx can can", "debug": "", "description": "A possible transaction order independence vulnerability exists in function approveTx(uint8). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "approveTx(uint8)", "lineno": 43, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1136, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_SimpleMultisig_0: 0x3ce39a3d00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "proposeTx(address,uint256)", "lineno": 59, "title": "Exception state", "type": "Informational"}, {"address": 1227, "code": "\n\n// mainnet: 0x4a", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_SimpleMultisig_0: 0x3ce39a3d00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `proposeTx(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "proposeTx(address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1526, "code": "xs[txIdx].", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_SimpleMultisig_4: 0x0\ncalldata_SimpleMultisig_0: 0xe5bb9fb900000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "cancelTx(uint8)", "lineno": 49, "title": "Exception state", "type": "Informational"}, {"address": 1607, "code": "ssert(txs[txIdx].active);\n\n    txs[txIdx", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xfffffdffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_0 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_SimpleMultisig_4: 0xfe\ncalldata_SimpleMultisig_0: 0xe5bb9fb900000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "cancelTx(uint8)", "lineno": 49, "title": "Exception state", "type": "Informational"}, {"address": 1664, "code": "e = false;\n  }\n\n  // chec", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xfffffffbffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0x0\ncaller: 0x0\nstorage_0 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*Concat(0, Extract(7, 0, calldata_SimpleMultisig_4)): 0x0\ncalldata_SimpleMultisig_4: 0xfe\ncalldata_SimpleMultisig_0: 0xe5bb9fb900000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "cancelTx(uint8)", "lineno": 51, "title": "Exception state", "type": "Informational"}, {"address": 1742, "code": ";\n\n  function S", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimpleMultisig_4: 0x0\nstorage_1: 0x0\ncalldata_SimpleMultisig_0: 0xf5715d5600000000000000000000000000000000000000000000000000000000\ncalldatasize_SimpleMultisig: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/22/0x4a412fe6e60949016457897f9170bb00078b89a3.sol", "function": "_function_0xf5715d56", "lineno": 16, "title": "Exception state", "type": "Informational"}], "success": true}