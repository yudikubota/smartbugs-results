{
  "contract": "0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9",
  "tool": "mythril",
  "start": 1563780524.9426851,
  "end": 1563780866.718802,
  "duration": 341.77611684799194,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 329,
        "code": " to check\n  function verify(string sha256) constant returns (uint,uint16,uint16,uint16,uint16,uint16) {\n    var timestamp =  proofs[sha256];\n    if ( timestamp == 0 ){\n        return (timestamp,0,0,0,0,0);\n    }else{\n        DateTime dt = DateTime(msg.sender);\n     ",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0x7183616c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `notarize(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "notarize(string)",
        "lineno": 302,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 750,
        "code": "\n        uint16 month = dt.getMonth(timestamp);\n        uint16 day = dt.getDay(timestamp);\n        uint16 hour = dt.getHour(timestamp);\n        uint16 minute = dt.getMinute(timestamp);\n        uint16 second = dt.getSecond(timestamp);\n        return  (timestamp,year, month,day,hour,minute);\n        \n        // string  memory result = strConcat(bytes32ToString(year) , \"-\" , bytes32ToString(month),\"-\",bytes32ToString(day));\n        // result = strConcat(result,\" \");\n        // result = strConcat( bytes32ToString(hour) , \":\" , bytes32ToString(minute),\":\",bytes32ToString(second));\n        // result = strConcat(result,\" UTC\") ;\n        \n        \n        \n        \n\n\n        // //UTC Format: 2013-10-26 14:37:48 UTC\n\n        // return result;\n    }\n  }\n  \n  function getYear( uint timestamp ) constant returns (uint16){\n      DateTime dt = DateTime(msg.sender);\n      return dt.getYear( timestamp );\n  }\n  \n}",
        "debug": "calldata_ProofOfExistence_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfExistence_0: 0xbb9c6c3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `verify(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 310,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1290,
        "code": "< charCount; j++) {\n  ",
        "debug": "calldata_ProofOfExistence_4: 0x100000000000000000000000000000000000000000000000000000000000000\ncalldata_ProofOfExistence_0: 0x9201de5500000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfExistence: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `bytes32ToString(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "bytes32ToString(bytes32)",
        "lineno": 249,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1822,
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "getYear(uint256)",
        "lineno": 339,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2353,
        "code": "e);\n        \n        ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 316,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2353,
        "code": "e);\n        \n        ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2525\n",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 316,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2525,
        "code": " strConcat(bytes32ToSt",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2525,
        "code": " strConcat(bytes32ToSt",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2700\n",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2700,
        "code": "32ToString(month),\"-",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2700,
        "code": "32ToString(month),\"-",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2875\n",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 318,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2875,
        "code": "        // result = s",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/44/0x74c2e243186fcb8c562a145c948fe9eeaf29f4c9.sol",
        "function": "verify(string)",
        "lineno": 319,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}