{"error": null, "issues": [{"address": 790, "code": "he other signer\n    var operationHash = keccak256(\"ETHER\", toAddress, value, data, expireTime, sequenceId);\n    \n    var otherSigner = verifyMultiSig(toAddress, operationHash, signature, expireTime, sequenceId);\n\n    // Success, send the transaction\n    if (!(toAddress.call.value(value)(data))) {\n      // Failed executing transaction\n      revert();\n    }\n    Transacted(msg.sender, otherSigner, operationHash, toAddress, value, data);\n  }\n  \n  /**\n   * Execute a multi-signature token transfer from this wallet using 2 signers: one from msg.sender and the other from ecrecover.\n   * Sequence IDs are numbers starting from 1. They are used to preven", "debug": "calldata_WalletSimple_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WalletSimple_0: 0x3912521500000000000000000000000000000000000000000000000000000000\ncalldatasize_WalletSimple: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x0d5f8a079042d5071220498fa0f0d7fd2c5fffbe.sol", "function": "sendMultiSig(address,uint256,bytes,uint256,uint256,bytes)", "lineno": 200, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1753, "code": "lse; // When active, wal", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WalletSimple_4: 0x0\nstorage_0: 0x0\ncalldata_WalletSimple_0: 0x2079fb9a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WalletSimple: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x0d5f8a079042d5071220498fa0f0d7fd2c5fffbe.sol", "function": "_function_0x2079fb9a", "lineno": 116, "title": "Exception state", "type": "Informational"}, {"address": 1984, "code": "a Formats\n   * @param signature see Data Fo", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/15/0x0d5f8a079042d5071220498fa0f0d7fd2c5fffbe.sol", "function": "flushForwarderTokens(address,address)", "lineno": 261, "title": "Message call to external contract", "type": "Warning"}], "success": true}