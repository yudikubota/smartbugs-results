{
  "contract": "0x81669a72ccfbcf5306f500edc0151732eb4e01ef",
  "tool": "mythril",
  "start": 1563659065.378078,
  "end": 1563659082.7395382,
  "duration": 17.361460208892822,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1730,
        "code": "(block.timestamp.sub(",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "release()",
        "lineno": 292,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1791,
        "code": " totalBalance.mul(block.timestamp.sub(",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "vestedAmount()",
        "lineno": 292,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1915,
        "code": ".div(duration);\n    }\n  }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "vestedAmount()",
        "lineno": 292,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2495,
        "code": "ansfer(beneficiary, u",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "initialize()",
        "lineno": 254,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2495,
        "code": "ansfer(beneficiary, u",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3124\n",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "initialize()",
        "lineno": 254,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3124,
        "code": " tokensAvailable() pu",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "initialize()",
        "lineno": 239,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4902,
        "code": "wner;",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0xe6089257c80ac0cbe60d5926ff262844c7005edbab82a162281118017d351c97\nretval_1730: 0x83ffb3569638cea3622d597040d78d7ab7ae5c8a2d8bbb012cad3fb961bad806\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x5b94008100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `releasableAmount()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "releasableAmount()",
        "lineno": 95,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4915,
        "code": "ent OwnershipR",
        "debug": "The exception is triggered under the following conditions:\n\nretval_1730: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0xff00\ncalldata_TokenVesting_0: 0x86d1a69f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "release()",
        "lineno": 98,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4938,
        "code": " on overflow.\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0xd44896a57581f566eb2dfdbddb6fab1f7f61029177bf7cb247c25ed6688768c3\nretval_1730: 0x1b4449a8718881496371294150cf13b83e605100043070c307e473d06b350c4b\ntimestamp: 0x0\nstorage_3: 0x1\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenVesting_0: 0x5b94008100000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenVesting: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x81669a72ccfbcf5306f500edc0151732eb4e01ef.sol",
        "function": "releasableAmount()",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}