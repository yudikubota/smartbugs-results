{"error": null, "issues": [{"address": 490, "code": "rder.feesBaseOrCntr, order.feesRwrd);\n  }\n\n  // Public Order View - get mutable details of an order.\n  //\n  // If the orderId does not exist, status will be Unknown.\n  //\n  function getOrderState(uint128 orderId) public constant returns (\n    Status status, ReasonCode reasonCode, uint executedBase, uint executedCntr,\n    uint feesBaseOrCntr, uint feesRwrd) {\n    Order storage order = orderForOrderId[orderId];\n    return (order.status, order.reasonCode, order.executedBase, order.executedCntr,\n            or", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xfc00\ncalldata_ERC20_0: 0x117d412800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getOrder(uint128)", "lineno": 470, "title": "Exception state", "type": "Informational"}, {"address": 949, "code": "// Not really designed for use from a smart contract transaction.\n  //\n  // Idea is:\n  //  - client ensures order ids are generated so that most-signficant part is time-based;\n  //  - client decides they want all orders after a certain point-in-time,\n  //    and chooses minClosedOrderIdCutoff accordingly;\n  //  - before that point-in-time they just get open and needs gas orders\n  /", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncalldata_ERC20_0: 0x31f9a21100000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getOrderState(uint128)", "lineno": 487, "title": "Exception state", "type": "Informational"}, {"address": 2151, "code": "nt128 orderId) internal c", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_4: 0x7e32\ncalldata_ERC20_0: 0x3adcbd200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "walkBook(uint16)", "lineno": 1261, "title": "Exception state", "type": "Informational"}, {"address": 4271, "code": ") ETH we have bigger problems\n    bala", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferBase(uint256)", "lineno": 413, "title": "Message call to external contract", "type": "Informational"}, {"address": 5692, "code": "se, uint executedCntr,\n    uint feesBa", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferRwrd(uint256)", "lineno": 465, "title": "Message call to external contract", "type": "Informational"}, {"address": 5984, "code": "ecked less than balance above\n    balanceC", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_ERC20_0: 0x6044514200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `depositCntr()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "depositCntr()", "lineno": 424, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6373, "code": "rFrom, BalanceType.Base, int(amou", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromBase()", "lineno": 389, "title": "Message call to external contract", "type": "Informational"}, {"address": 6373, "code": "rFrom, BalanceType.Base, int(amou", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7009\nCall at address: 6697\n", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromBase()", "lineno": 389, "title": "Multiple Calls", "type": "Information"}, {"address": 6697, "code": "int amountBase) public {\n    address client = ms", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromBase()", "lineno": 394, "title": "Message call to external contract", "type": "Informational"}, {"address": 6697, "code": "int amountBase) public {\n    address client = ms", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7009\n", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromBase()", "lineno": 394, "title": "Multiple Calls", "type": "Information"}, {"address": 7009, "code": "    require(amountBase <= balance", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromBase()", "lineno": 397, "title": "Message call to external contract", "type": "Informational"}, {"address": 7732, "code": ";\n    address book = address(this);\n    //", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getClientBalances(address)", "lineno": 378, "title": "Message call to external contract", "type": "Informational"}, {"address": 7732, "code": ";\n    address book = address(this);\n    //", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8283\nCall at address: 8034\n", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getClientBalances(address)", "lineno": 378, "title": "Multiple Calls", "type": "Information"}, {"address": 8034, "code": "tract not to do nasty things like call bac", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getClientBalances(address)", "lineno": 380, "title": "Message call to external contract", "type": "Informational"}, {"address": 8034, "code": "tract not to do nasty things like call bac", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8283\n", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getClientBalances(address)", "lineno": 380, "title": "Multiple Calls", "type": "Information"}, {"address": 8283, "code": " cannot trust the token the", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "getClientBalances(address)", "lineno": 381, "title": "Message call to external contract", "type": "Informational"}, {"address": 9082, "code": "rd));\n  }\n\n  // Public Funds Mani", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromRwrd()", "lineno": 443, "title": "Message call to external contract", "type": "Informational"}, {"address": 9082, "code": "rd));\n  }\n\n  // Public Funds Mani", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 9407\n", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromRwrd()", "lineno": 443, "title": "Multiple Calls", "type": "Information"}, {"address": 9407, "code": "er;\n    require(amountRwrd > 0);\n    require(amo", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "transferFromRwrd()", "lineno": 449, "title": "Message call to external contract", "type": "Informational"}, {"address": 11278, "code": " baseMaxSize) {\n      order.status = Status.Rejected;\n      order.reasonCode = Rea", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ERC20_32 + 68: 0xfc\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0xbbec376800000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "_function_0xbbec3768", "lineno": 632, "title": "Exception state", "type": "Informational"}, {"address": 13167, "code": "];\n    uint16 price = order.pri", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0xf800\ncaller: 0x0\nstorage_0 +\nkeccac_340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\n340282366920938463463374607431768211455_&\ncalldata_ERC20_4: 0x0\ncalldata_ERC20_0: 0xbd5acbd600000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/15/0x300f516cda4475660ed27bf87bb49b95da8ba0e0.sol", "function": "continueOrder(uint128,uint256)", "lineno": 698, "title": "Exception state", "type": "Informational"}], "success": true}