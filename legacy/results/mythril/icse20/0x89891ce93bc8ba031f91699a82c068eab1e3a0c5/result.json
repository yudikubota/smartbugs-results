{
  "contract": "0x89891ce93bc8ba031f91699a82c068eab1e3a0c5",
  "tool": "mythril",
  "start": 1563428074.558437,
  "end": 1563428431.2258172,
  "duration": 356.6673800945282,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 4821,
        "code": "b) internal pure returns (uint",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 548,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4821,
        "code": "b) internal pure returns (uint",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5056\n",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 548,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5056,
        "code": "); \n\t\tuint256 c = a / b;\n\t\treturn ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "Holdplatform_Withdraw(uint256)",
        "lineno": 549,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6352,
        "code": "======*/  \t\n\n//-------o 01 Add",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "WithdrawAffiliate(address,address)",
        "lineno": 468,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7665,
        "code": "ID\t\t\t\n\tmapping(address => address[]) \t\tpublic af",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x4b698aff00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "_function_0x4b698aff",
        "lineno": 84,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10158,
        "code": "\t\t\t\t\t\n\tmapping(address => string) \t\t\tpublic Co",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x7028b6a300000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "_function_0x7028b6a3",
        "lineno": 85,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 20258,
        "code": "ess);",
        "debug": "storage_5 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0x0\nstorage_6 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0xe2bb8124024cf91268e4035fd2655165bbefff7add5affa7656847001cfc3741\nstorage_7 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0x232300b48a12d7ec4808184e0229707003000064115ab848524acdbc10e16775\nstorage_2 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0x0\nstorage_1: 0x1\nstorage_0 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_3 +\nkeccac_storage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0x0\nstorage_78433594294121473380335049450505973962381404738846570838001569875460533962079: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_78433594294121473380335049450505973962381404738846570838001569875460533962083: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_78433594294121473380335049450505973962381404738846570838001569875460533962082: 0x0\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldatasize_ldoh: 0x3\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x89891ce93bc8ba031f91699a82c068eab1e3a0c5.sol",
        "function": "fallback",
        "lineno": 581,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}