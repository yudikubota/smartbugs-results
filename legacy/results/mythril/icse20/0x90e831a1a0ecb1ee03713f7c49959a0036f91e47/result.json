{
  "contract": "0x90e831a1a0ecb1ee03713f7c49959a0036f91e47",
  "tool": "mythril",
  "start": 1563554221.9337971,
  "end": 1563554544.6196966,
  "duration": 322.6858994960785,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 911,
        "code": "ue;\n  }\n\n  // Standard ERC20 transfer commands, with additional requireTh",
        "debug": "calldata_XNR_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XNR_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "changeName(string)",
        "lineno": 228,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1192,
        "code": " returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n  function transfer",
        "debug": "calldata_XNR_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XNR_0: 0x593aa28300000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setMetadata(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "setMetadata(uint256,string)",
        "lineno": 232,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1528,
        "code": "in level metadata needed for XNR mainnet purposes\n  function setMetadata(uint key",
        "debug": "calldata_XNR_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XNR_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "changeSymbol(string)",
        "lineno": 226,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6108,
        "code": "c>=b)",
        "debug": "calldata_XNR_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_XNR_32_+_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_13: 0x0\ntimestamp: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_11: 0x0\ncalldata_XNR_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 28,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6223,
        "code": "re a function executes either:\n  // The global isThawed value is set true\n  // The sender is in a whitelisted thawedAddress\n  // It has been a year since contract deployment\n  modifier requireThawed() {\n    require(isThawed == true || thawedAddresses[msg.sender] == true || now > thawTime);\n    _;\n  }\n\n  // Applies to thaw functions. Only the designated manager is allowed when this modifier is present\n  modifier onlyManager() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  address owner;\n  address manager;\n  uint initialBalance;\n  string public name;\n  string public symbol;\n  uint public decimals;\n  mapping (uint=>string) public metadata;\n  mapping (uint=>string) public publicMetadata;\n  bool isThawed = false;\n  mapping (address=>bool) public thawedAddresses;\n  uint256 thawTime;\n\n  constructor() public {\n    address bountyMgrAddress = address(0x03De5f75915DC5382C5dF82538F8D5e124A7ebB8);\n    \n    initialBalance = 18666666667 * 1e8;\n    uint256 bountyMgrBalance = 933333333 * 1e8;\n    totalSupply = initialBalance;\n\n    balances[msg.sender] = safeSub(initialBalance, bountyMgrBalance);\n    balances[bountyMgrAddress] = bountyMgrBalance;\n\n    Transfer(address(0x0), address(msg.sender), balances[msg.sender]);\n    Transfer(address(0x0), address(bountyMgrAddress), balances[bountyMgrAddress]);\n\n    name = \"Neuroneum\";\n    symbol = \"XNR\";\n    decimals = 8;\n    owner = msg.sender;\n    thawedAddresses[msg.sender] = true;\n    thawedAddresses[bountyMgrAddress] = true;\n    thawTime = now + 1 years;\n  }\n\n  // **\n  // ** Manager functions **\n  // **\n  // Thaw a specific address, allowing it to send tokens\n  function thawAddress(address _address) onlyManager {\n    thawedAddresses[_address] = true;\n  }\n  // Thaw all addresses. This is irreversible\n  function thawAllAddresses() onlyManager {\n    isThawed = true;\n  }\n  // Freeze all addresses except for those whitelisted in thawedAddresses. This is irreversible\n  // This only applies if the thawTime has not yet past.\n  function freezeAllAddresses() onlyManager {\n    isThawed = false;\n  }\n\n  // **\n  // ** Owner functions **\n  // **\n  // Set a new owner\n  function setOwner(address _newOwner) onlyOwner {\n    owner = _newOwner;\n  }\n\n  // Set a manager, who can unfreeze wallets as needed\n  function setManager(address _address) onlyOwner {\n    manager = _address;\n  }\n\n  // Change the ticker symbol of the token\n  function changeSymbol(string newSymbol) onlyOwner {\n    symbol = newSymbol;\n  }\n\n  // Change the long-form name of the token\n  function changeName(string newName) onlyOwner {\n    name = newName;\n  }\n\n  // Set any admin level metadata needed for XNR mainnet purposes\n  function setMetadata(uint key, string value) onlyOwner {\n    metadata[key] = value;\n  }\n\n  // Standard ERC20 transfer commands, with additional requireThawed modifier\n  function transfer(address _to, uint _value) requireThawed returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint _value) requireThawed returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}",
        "debug": "storage_keccac_calldata_XNR_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_keccac_calldata_XNR_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_3: 0x0\ncaller: 0x0\ncalldata_XNR_0: 0x593aa28300000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setMetadata(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "setMetadata(uint256,string)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6252,
        "code": "re a function executes either:\n  // The global isThawed value is set true\n  // The sender is in a whitelisted thawedAddress\n  // It has been a year since contract deployment\n  modifier requireThawed() {\n    require(isThawed == true || thawedAddresses[msg.sender] == true || now > thawTime);\n    _;\n  }\n\n  // Applies to thaw functions. Only the designated manager is allowed when this modifier is present\n  modifier onlyManager() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  address owner;\n  address manager;\n  uint initialBalance;\n  string public name;\n  string public symbol;\n  uint public decimals;\n  mapping (uint=>string) public metadata;\n  mapping (uint=>string) public publicMetadata;\n  bool isThawed = false;\n  mapping (address=>bool) public thawedAddresses;\n  uint256 thawTime;\n\n  constructor() public {\n    address bountyMgrAddress = address(0x03De5f75915DC5382C5dF82538F8D5e124A7ebB8);\n    \n    initialBalance = 18666666667 * 1e8;\n    uint256 bountyMgrBalance = 933333333 * 1e8;\n    totalSupply = initialBalance;\n\n    balances[msg.sender] = safeSub(initialBalance, bountyMgrBalance);\n    balances[bountyMgrAddress] = bountyMgrBalance;\n\n    Transfer(address(0x0), address(msg.sender), balances[msg.sender]);\n    Transfer(address(0x0), address(bountyMgrAddress), balances[bountyMgrAddress]);\n\n    name = \"Neuroneum\";\n    symbol = \"XNR\";\n    decimals = 8;\n    owner = msg.sender;\n    thawedAddresses[msg.sender] = true;\n    thawedAddresses[bountyMgrAddress] = true;\n    thawTime = now + 1 years;\n  }\n\n  // **\n  // ** Manager functions **\n  // **\n  // Thaw a specific address, allowing it to send tokens\n  function thawAddress(address _address) onlyManager {\n    thawedAddresses[_address] = true;\n  }\n  // Thaw all addresses. This is irreversible\n  function thawAllAddresses() onlyManager {\n    isThawed = true;\n  }\n  // Freeze all addresses except for those whitelisted in thawedAddresses. This is irreversible\n  // This only applies if the thawTime has not yet past.\n  function freezeAllAddresses() onlyManager {\n    isThawed = false;\n  }\n\n  // **\n  // ** Owner functions **\n  // **\n  // Set a new owner\n  function setOwner(address _newOwner) onlyOwner {\n    owner = _newOwner;\n  }\n\n  // Set a manager, who can unfreeze wallets as needed\n  function setManager(address _address) onlyOwner {\n    manager = _address;\n  }\n\n  // Change the ticker symbol of the token\n  function changeSymbol(string newSymbol) onlyOwner {\n    symbol = newSymbol;\n  }\n\n  // Change the long-form name of the token\n  function changeName(string newName) onlyOwner {\n    name = newName;\n  }\n\n  // Set any admin level metadata needed for XNR mainnet purposes\n  function setMetadata(uint key, string value) onlyOwner {\n    metadata[key] = value;\n  }\n\n  // Standard ERC20 transfer commands, with additional requireThawed modifier\n  function transfer(address _to, uint _value) requireThawed returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint _value) requireThawed returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}",
        "debug": "calldata_XNR_4 + calldata_XNR_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_XNR_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "changeSymbol(string)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6266,
        "code": "re a function executes either:\n  // The global isThawed value is set true\n  // The sender is in a whitelisted thawedAddress\n  // It has been a year since contract deployment\n  modifier requireThawed() {\n    require(isThawed == true || thawedAddresses[msg.sender] == true || now > thawTime);\n    _;\n  }\n\n  // Applies to thaw functions. Only the designated manager is allowed when this modifier is present\n  modifier onlyManager() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  address owner;\n  address manager;\n  uint initialBalance;\n  string public name;\n  string public symbol;\n  uint public decimals;\n  mapping (uint=>string) public metadata;\n  mapping (uint=>string) public publicMetadata;\n  bool isThawed = false;\n  mapping (address=>bool) public thawedAddresses;\n  uint256 thawTime;\n\n  constructor() public {\n    address bountyMgrAddress = address(0x03De5f75915DC5382C5dF82538F8D5e124A7ebB8);\n    \n    initialBalance = 18666666667 * 1e8;\n    uint256 bountyMgrBalance = 933333333 * 1e8;\n    totalSupply = initialBalance;\n\n    balances[msg.sender] = safeSub(initialBalance, bountyMgrBalance);\n    balances[bountyMgrAddress] = bountyMgrBalance;\n\n    Transfer(address(0x0), address(msg.sender), balances[msg.sender]);\n    Transfer(address(0x0), address(bountyMgrAddress), balances[bountyMgrAddress]);\n\n    name = \"Neuroneum\";\n    symbol = \"XNR\";\n    decimals = 8;\n    owner = msg.sender;\n    thawedAddresses[msg.sender] = true;\n    thawedAddresses[bountyMgrAddress] = true;\n    thawTime = now + 1 years;\n  }\n\n  // **\n  // ** Manager functions **\n  // **\n  // Thaw a specific address, allowing it to send tokens\n  function thawAddress(address _address) onlyManager {\n    thawedAddresses[_address] = true;\n  }\n  // Thaw all addresses. This is irreversible\n  function thawAllAddresses() onlyManager {\n    isThawed = true;\n  }\n  // Freeze all addresses except for those whitelisted in thawedAddresses. This is irreversible\n  // This only applies if the thawTime has not yet past.\n  function freezeAllAddresses() onlyManager {\n    isThawed = false;\n  }\n\n  // **\n  // ** Owner functions **\n  // **\n  // Set a new owner\n  function setOwner(address _newOwner) onlyOwner {\n    owner = _newOwner;\n  }\n\n  // Set a manager, who can unfreeze wallets as needed\n  function setManager(address _address) onlyOwner {\n    manager = _address;\n  }\n\n  // Change the ticker symbol of the token\n  function changeSymbol(string newSymbol) onlyOwner {\n    symbol = newSymbol;\n  }\n\n  // Change the long-form name of the token\n  function changeName(string newName) onlyOwner {\n    name = newName;\n  }\n\n  // Set any admin level metadata needed for XNR mainnet purposes\n  function setMetadata(uint key, string value) onlyOwner {\n    metadata[key] = value;\n  }\n\n  // Standard ERC20 transfer commands, with additional requireThawed modifier\n  function transfer(address _to, uint _value) requireThawed returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint _value) requireThawed returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}",
        "debug": "calldata_XNR_4 + calldata_XNR_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_XNR_0: 0xa3895fff00000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSymbol(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "changeSymbol(string)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6288,
        "code": "re a function executes either:\n  // The global isThawed value is set true\n  // The sender is in a whitelisted thawedAddress\n  // It has been a year since contract deployment\n  modifier requireThawed() {\n    require(isThawed == true || thawedAddresses[msg.sender] == true || now > thawTime);\n    _;\n  }\n\n  // Applies to thaw functions. Only the designated manager is allowed when this modifier is present\n  modifier onlyManager() {\n    require(msg.sender == owner || msg.sender == manager);\n    _;\n  }\n\n  address owner;\n  address manager;\n  uint initialBalance;\n  string public name;\n  string public symbol;\n  uint public decimals;\n  mapping (uint=>string) public metadata;\n  mapping (uint=>string) public publicMetadata;\n  bool isThawed = false;\n  mapping (address=>bool) public thawedAddresses;\n  uint256 thawTime;\n\n  constructor() public {\n    address bountyMgrAddress = address(0x03De5f75915DC5382C5dF82538F8D5e124A7ebB8);\n    \n    initialBalance = 18666666667 * 1e8;\n    uint256 bountyMgrBalance = 933333333 * 1e8;\n    totalSupply = initialBalance;\n\n    balances[msg.sender] = safeSub(initialBalance, bountyMgrBalance);\n    balances[bountyMgrAddress] = bountyMgrBalance;\n\n    Transfer(address(0x0), address(msg.sender), balances[msg.sender]);\n    Transfer(address(0x0), address(bountyMgrAddress), balances[bountyMgrAddress]);\n\n    name = \"Neuroneum\";\n    symbol = \"XNR\";\n    decimals = 8;\n    owner = msg.sender;\n    thawedAddresses[msg.sender] = true;\n    thawedAddresses[bountyMgrAddress] = true;\n    thawTime = now + 1 years;\n  }\n\n  // **\n  // ** Manager functions **\n  // **\n  // Thaw a specific address, allowing it to send tokens\n  function thawAddress(address _address) onlyManager {\n    thawedAddresses[_address] = true;\n  }\n  // Thaw all addresses. This is irreversible\n  function thawAllAddresses() onlyManager {\n    isThawed = true;\n  }\n  // Freeze all addresses except for those whitelisted in thawedAddresses. This is irreversible\n  // This only applies if the thawTime has not yet past.\n  function freezeAllAddresses() onlyManager {\n    isThawed = false;\n  }\n\n  // **\n  // ** Owner functions **\n  // **\n  // Set a new owner\n  function setOwner(address _newOwner) onlyOwner {\n    owner = _newOwner;\n  }\n\n  // Set a manager, who can unfreeze wallets as needed\n  function setManager(address _address) onlyOwner {\n    manager = _address;\n  }\n\n  // Change the ticker symbol of the token\n  function changeSymbol(string newSymbol) onlyOwner {\n    symbol = newSymbol;\n  }\n\n  // Change the long-form name of the token\n  function changeName(string newName) onlyOwner {\n    name = newName;\n  }\n\n  // Set any admin level metadata needed for XNR mainnet purposes\n  function setMetadata(uint key, string value) onlyOwner {\n    metadata[key] = value;\n  }\n\n  // Standard ERC20 transfer commands, with additional requireThawed modifier\n  function transfer(address _to, uint _value) requireThawed returns (bool success) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint _value) requireThawed returns (bool success) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n}",
        "debug": "calldata_XNR_4 + calldata_XNR_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nkeccac_keccac_calldata_XNR_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_XNR_0: 0x593aa28300000000000000000000000000000000000000000000000000000000\ncalldatasize_XNR: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setMetadata(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/11/0x90e831a1a0ecb1ee03713f7c49959a0036f91e47.sol",
        "function": "setMetadata(uint256,string)",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}