{"error": null, "issues": [{"address": 211, "code": "t = mtv.b", "debug": "", "description": "Function fallback retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 111, "title": "Use of tx.origin", "type": "Warning"}, {"address": 602, "code": "eAd0dead0DEad0DEAd0DEAD0d", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 115, "title": "Message call to external contract", "type": "Informational"}, {"address": 602, "code": "eAd0dead0DEad0DEAd0DEAD0d", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 889\n", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 115, "title": "Multiple Calls", "type": "Information"}, {"address": 889, "code": "unt[msg.sender].add(mtv_amount.mul(5));\n\t\t    \n\t\t    tknToSend = xra_amoun", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 116, "title": "Message call to external contract", "type": "Informational"}, {"address": 1113, "code": "der].mul(30).div(100).sub(xra_sent[msg.sender]);\n\t\t    xra_sent[msg.se", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 118, "title": "State change after external call", "type": "Warning"}, {"address": 3832, "code": "eturn a - b;\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x1517f\norigin: 0x0\ncaller: 0x0\ncalldata_tokenInterface_0: 0x1ef770fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 23, "title": "Exception state", "type": "Informational"}, {"address": 3866, "code": "asser", "debug": "storage_4: 0x800000000000019180\nretval_602: 0x3d70e3cd03e2cf022008a02c072901cb00c8340cf044698f6352903ae5ff1e07\nretval_889: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x800000000000004001\norigin: 0x0\ncaller: 0x0\ncalldatasize_tokenInterface: 0x3\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "fallback", "lineno": 13, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3905, "code": "\n    ", "debug": "calldata_tokenInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffe400\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenInterface_0: 0x7974f8fe00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenInterface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTime(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "changeTime(uint256)", "lineno": 28, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3918, "code": "c;\n  }\n}\n\n\n/**", "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffefc2000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenInterface_0: 0x7974f8fe00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenInterface: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "changeTime(uint256)", "lineno": 29, "title": "Exception state", "type": "Informational"}, {"address": 4344, "code": "ase) onlyOwner public {\n        startReleas", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0xab244f9aa7a8dd03e8261b2508438d301ac05a4f.sol", "function": "withdrawTokens(address,address,uint256)", "lineno": 102, "title": "Message call to external contract", "type": "Warning"}], "success": true}