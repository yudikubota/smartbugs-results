{
  "contract": "0x5fd72a8a514697232cce4e0166c48993b060f46c",
  "tool": "mythril",
  "start": 1563510434.2244961,
  "end": 1563510730.158417,
  "duration": 295.9339208602905,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 288,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "fallback",
        "lineno": 269,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 628,
        "code": "_vanity_url];\n  }\n\n  /* function to retrive vanity url from address */\n  function retrieveVanityForWallet(address _address) constant public re",
        "debug": "calldata_VanityURL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0x69ba820e00000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `retrieveWalletForVanity(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "retrieveWalletForVanity(string)",
        "lineno": 121,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 797,
        "code": "ength; i++){\n      var c = bytes(_vanity_url)[i];\n      if ((c < 48 ||  c > 122 || (c > 57 && c < 65) || (c > 90 && c < 97 )) && (c != 95))\n        return false;\n    }\n    return true;\n  }\n\n  /*\n  function to change Vanity URL\n    1. Checks whether vanity URL is check is valid\n    2. Checks if address has already a vanity url\n    3. check if vanity url is used by any oth",
        "debug": "calldata_VanityURL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0x758822e600000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `checkForValidity(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "checkForValidity(string)",
        "lineno": 176,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1036,
        "code": "));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    require(bytes(address_vanity_mapping[msg.sender]).length == 0);\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to make lowercase\n  */\n\n  function _toLower(string str) internal returns (string) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memor",
        "debug": "calldata_VanityURL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0xae999ece00000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `reserve(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "reserve(string)",
        "lineno": 140,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1141,
        "code": "y_url]]);\n    /* delete from vanity mapping */\n    delete(vanity_address_mapping[_vanity_url]);\n    /* sending VanityReleased event */\n    VanityReleased(_vanity_url);\n  }\n\n  /*\n    function to kill contract\n  */\n\n  function kill() onlyOwner {\n    selfdestruct(owner);\n  }\n\n  /*\n    transfer eth recived to owner account if any\n  */\n  function() payable {\n    owner.transfer(msg.value);\n  }\n\n}",
        "debug": "calldata_VanityURL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0xb223d28500000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `releaseVanityUrl(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "releaseVanityUrl(string)",
        "lineno": 247,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1313,
        "code": "rValidity(_vanity_url));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to transfer ownership for Vanity URL\n  */\n  function transferOwnershipForVanityURL(address _to) whenNotPaused public {\n    require(bytes(address_vanity_mapping[_to]).length == 0);\n    re",
        "debug": "calldata_VanityURL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0xc6fe317f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeVanityURL(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "changeVanityURL(string)",
        "lineno": 196,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1450,
        "code": "ing used by anyone */\n      if(vanity_address_mapping[_vanity_url]  != address(0x0))\n      {\n        /* Sending Vanity Transfered Event */\n        VanityTransfered(vanity_address_mapping[_vanity_url],_to,_vanity_url);\n        /* delete from address mapping */\n        delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n        /* delete from vanity mapping */\n        delete(vanity_address_mapping[_vanity_url]);\n      }\n      else\n      {\n        /* sending VanityReserved event */\n        VanityReserved(_to, _vanity_url);\n      }\n      /* add new address to mapping */\n      vanity_address_mapping[_vanity_url] = _to;\n      address_vanity_mapping[_to] = _vanity_url;\n  }\n\n  /*\n  function to release a Vanity URL by Owner\n  */\n  function releaseVanityUrl(string _vanity_url) whenNotPaused onlyOwner public {\n    require(vanity_address_mapping[_vanity_url]  != address(0x0));\n    /* delete from address mapping */\n",
        "debug": "calldata_VanityURL_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VanityURL_0: 0xd1048bc900000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `reserveVanityURLByOwner(address,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "reserveVanityURLByOwner(address,string)",
        "lineno": 221,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9305,
        "code": " length 4",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VanityURL_cpy: 0x4200000000000000000000000000000000000000000000000000000000000000\ncalldata_VanityURL_4 + calldata_VanityURL_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_VanityURL_0: 0xae999ece00000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_VanityURL_4 + calldata_VanityURL_4)): 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "reserve(string)",
        "lineno": 169,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9461,
        "code": "lphanumer",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_VanityURL_cpy: 0x6000000000000000000000000000000000000000000000000000000000000000\ncalldata_VanityURL_4 + calldata_VanityURL_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldata_VanityURL_0: 0xae999ece00000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_VanityURL_4 + calldata_VanityURL_4)): 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "reserve(string)",
        "lineno": 171,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9720,
        "code": "o address\n  mapping (string => address) vanity_address_mapping;\n  // This declares a state variable that mapping for address to vanityURL\n  mapping (address => string ) address_vanity_mapping;\n  /*\n    constructor function to set token address & Pricing for reserving and token transfer address\n   */\n  function VanityURL(){\n  }\n\n  event VanityReserved(address _to, string _vanity_url);\n  event VanityTransfered(address _to,address _from, string _vanity_url);\n  event VanityReleased(string _vanity_url);\n\n  /* function to retrive wallet address from vanity url */\n  function retrieveWalletForVanity(string _vanity_url) constant public returns (address) {\n    return vanity_address_mapping[_vanity_url];\n  }\n\n  /* function to retrive vanity url from address */\n  function retrieveVanityForWallet(address _address) constant public returns (string) {\n    return address_vanity_mapping[_address];\n  }\n\n  /*\n    function to reserve vanityURL\n    1. Checks if vanity is check is valid\n    2. Checks if address has already a vanity url\n    3. check if vanity url is used by any other or not\n    4. Check if vanity url is present in reserved keyword\n    5. Transfer the token\n    6. Update the mapping variables\n  */\n  function reserve(string _vanity_url) whenNotPaused public {\n    _vanity_url = _toLower(_vanity_url);\n    require(checkForValidity(_vanity_url));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    require(bytes(address_vanity_mapping[msg.sender]).length == 0);\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to make lowercase\n  */\n\n  function _toLower(string str) internal returns (string) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n  /*\n  function to verify vanityURL\n  1. Minimum length 4\n  2.Maximum lenght 200\n  3.Vanity url is only alphanumeric\n   */\n  function checkForValidity(string _vanity_url) returns (bool) {\n    uint length =  bytes(_vanity_url).length;\n    require(length >= 4 && length <= 200);\n    for (uint i =0; i< length; i++){\n      var c = bytes(_vanity_url)[i];\n      if ((c < 48 ||  c > 122 || (c > 57 && c < 65) || (c > 90 && c < 97 )) && (c != 95))\n        return false;\n    }\n    return true;\n  }\n\n  /*\n  function to change Vanity URL\n    1. Checks whether vanity URL is check is valid\n    2. Checks if address has already a vanity url\n    3. check if vanity url is used by any other or not\n    4. Check if vanity url is present in reserved keyword\n    5. Update the mapping variables\n  */\n\n  function changeVanityURL(string _vanity_url) whenNotPaused public {\n    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n    _vanity_url = _toLower(_vanity_url);\n    require(checkForValidity(_vanity_url));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to transfer ownership for Vanity URL\n  */\n  function transferOwnershipForVanityURL(address _to) whenNotPaused public {\n    require(bytes(address_vanity_mapping[_to]).length == 0);\n    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n    address_vanity_mapping[_to] = address_vanity_mapping[msg.sender];\n    vanity_address_mapping[address_vanity_mapping[msg.sender]] = _to;\n    VanityTransfered(msg.sender,_to,address_vanity_mapping[msg.sender]);\n    delete(address_vanity_mapping[msg.sender]);\n  }\n\n  /*\n  function to transfer ownership for Vanity URL by Owner\n  */\n  function reserveVanityURLByOwner(address _to,string _vanity_url) whenNotPaused onlyOwner public {\n      _vanity_url = _toLower(_vanity_url);\n      require(checkForValidity(_vanity_url));\n      /* check if vanity url is being used by anyone */\n      if(vanity_address_mapping[_vanity_url]  != address(0x0))\n      {\n        /* Sending Vanity Transfered Event */\n        VanityTransfered(vanity_address_mapping[_vanity_url],_to,_vanity_url);\n        /* delete from address mapping */\n        delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n        /* delete from vanity mapping */\n        delete(vanity_address_mapping[_vanity_url]);\n      }\n      else\n      {\n        /* sending VanityReserved event */\n        VanityReserved(_to, _vanity_url);\n      }\n      /* add new address to mapping */\n      vanity_address_mapping[_vanity_url] = _to;\n      address_vanity_mapping[_to] = _vanity_url;\n  }\n\n  /*\n  function to release a Vanity URL by Owner\n  */\n  function releaseVanityUrl(string _vanity_url) whenNotPaused onlyOwner public {\n    require(vanity_address_mapping[_vanity_url]  != address(0x0));\n    /* delete from address mapping */\n    delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n    /* delete from vanity mapping */\n    delete(vanity_address_mapping[_vanity_url]);\n    /* sending VanityReleased event */\n    VanityReleased(_vanity_url);\n  }\n\n  /*\n    function to kill contract\n  */\n\n  function kill() onlyOwner {\n    selfdestruct(owner);\n  }\n\n  /*\n    transfer eth recived to owner account if any\n  */\n  function() payable {\n    owner.transfer(msg.value);\n  }\n\n}",
        "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_VanityURL_4_+_calldata_VanityURL_4))),\n_____256): 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_KECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_VanityURL_4_+_calldata_VanityURL_4))),\n_____256): 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nstorage_0: 0x0\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_VanityURL_4 + calldata_VanityURL_4))): 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_VanityURL_4 + calldata_VanityURL_4: 0x1f\ncaller: 0x0\ncalldata_VanityURL_0: 0xb223d28500000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `releaseVanityUrl(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "releaseVanityUrl(string)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9824,
        "code": "o address\n  mapping (string => address) vanity_address_mapping;\n  // This declares a state variable that mapping for address to vanityURL\n  mapping (address => string ) address_vanity_mapping;\n  /*\n    constructor function to set token address & Pricing for reserving and token transfer address\n   */\n  function VanityURL(){\n  }\n\n  event VanityReserved(address _to, string _vanity_url);\n  event VanityTransfered(address _to,address _from, string _vanity_url);\n  event VanityReleased(string _vanity_url);\n\n  /* function to retrive wallet address from vanity url */\n  function retrieveWalletForVanity(string _vanity_url) constant public returns (address) {\n    return vanity_address_mapping[_vanity_url];\n  }\n\n  /* function to retrive vanity url from address */\n  function retrieveVanityForWallet(address _address) constant public returns (string) {\n    return address_vanity_mapping[_address];\n  }\n\n  /*\n    function to reserve vanityURL\n    1. Checks if vanity is check is valid\n    2. Checks if address has already a vanity url\n    3. check if vanity url is used by any other or not\n    4. Check if vanity url is present in reserved keyword\n    5. Transfer the token\n    6. Update the mapping variables\n  */\n  function reserve(string _vanity_url) whenNotPaused public {\n    _vanity_url = _toLower(_vanity_url);\n    require(checkForValidity(_vanity_url));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    require(bytes(address_vanity_mapping[msg.sender]).length == 0);\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to make lowercase\n  */\n\n  function _toLower(string str) internal returns (string) {\n\t\tbytes memory bStr = bytes(str);\n\t\tbytes memory bLower = new bytes(bStr.length);\n\t\tfor (uint i = 0; i < bStr.length; i++) {\n\t\t\t// Uppercase character...\n\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n\t\t\t\t// So we add 32 to make it lowercase\n\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n\t\t\t} else {\n\t\t\t\tbLower[i] = bStr[i];\n\t\t\t}\n\t\t}\n\t\treturn string(bLower);\n\t}\n\n  /*\n  function to verify vanityURL\n  1. Minimum length 4\n  2.Maximum lenght 200\n  3.Vanity url is only alphanumeric\n   */\n  function checkForValidity(string _vanity_url) returns (bool) {\n    uint length =  bytes(_vanity_url).length;\n    require(length >= 4 && length <= 200);\n    for (uint i =0; i< length; i++){\n      var c = bytes(_vanity_url)[i];\n      if ((c < 48 ||  c > 122 || (c > 57 && c < 65) || (c > 90 && c < 97 )) && (c != 95))\n        return false;\n    }\n    return true;\n  }\n\n  /*\n  function to change Vanity URL\n    1. Checks whether vanity URL is check is valid\n    2. Checks if address has already a vanity url\n    3. check if vanity url is used by any other or not\n    4. Check if vanity url is present in reserved keyword\n    5. Update the mapping variables\n  */\n\n  function changeVanityURL(string _vanity_url) whenNotPaused public {\n    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n    _vanity_url = _toLower(_vanity_url);\n    require(checkForValidity(_vanity_url));\n    require(vanity_address_mapping[_vanity_url]  == address(0x0));\n    vanity_address_mapping[_vanity_url] = msg.sender;\n    address_vanity_mapping[msg.sender] = _vanity_url;\n    VanityReserved(msg.sender, _vanity_url);\n  }\n\n  /*\n  function to transfer ownership for Vanity URL\n  */\n  function transferOwnershipForVanityURL(address _to) whenNotPaused public {\n    require(bytes(address_vanity_mapping[_to]).length == 0);\n    require(bytes(address_vanity_mapping[msg.sender]).length != 0);\n    address_vanity_mapping[_to] = address_vanity_mapping[msg.sender];\n    vanity_address_mapping[address_vanity_mapping[msg.sender]] = _to;\n    VanityTransfered(msg.sender,_to,address_vanity_mapping[msg.sender]);\n    delete(address_vanity_mapping[msg.sender]);\n  }\n\n  /*\n  function to transfer ownership for Vanity URL by Owner\n  */\n  function reserveVanityURLByOwner(address _to,string _vanity_url) whenNotPaused onlyOwner public {\n      _vanity_url = _toLower(_vanity_url);\n      require(checkForValidity(_vanity_url));\n      /* check if vanity url is being used by anyone */\n      if(vanity_address_mapping[_vanity_url]  != address(0x0))\n      {\n        /* Sending Vanity Transfered Event */\n        VanityTransfered(vanity_address_mapping[_vanity_url],_to,_vanity_url);\n        /* delete from address mapping */\n        delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n        /* delete from vanity mapping */\n        delete(vanity_address_mapping[_vanity_url]);\n      }\n      else\n      {\n        /* sending VanityReserved event */\n        VanityReserved(_to, _vanity_url);\n      }\n      /* add new address to mapping */\n      vanity_address_mapping[_vanity_url] = _to;\n      address_vanity_mapping[_to] = _vanity_url;\n  }\n\n  /*\n  function to release a Vanity URL by Owner\n  */\n  function releaseVanityUrl(string _vanity_url) whenNotPaused onlyOwner public {\n    require(vanity_address_mapping[_vanity_url]  != address(0x0));\n    /* delete from address mapping */\n    delete(address_vanity_mapping[vanity_address_mapping[_vanity_url]]);\n    /* delete from vanity mapping */\n    delete(vanity_address_mapping[_vanity_url]);\n    /* sending VanityReleased event */\n    VanityReleased(_vanity_url);\n  }\n\n  /*\n    function to kill contract\n  */\n\n  function kill() onlyOwner {\n    selfdestruct(owner);\n  }\n\n  /*\n    transfer eth recived to owner account if any\n  */\n  function() payable {\n    owner.transfer(msg.value);\n  }\n\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffdfc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfcffe7dd77bedffffffffffffffffffffd000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_VanityURL_4: 0x0\nstorage_0: 0x0\ncalldata_VanityURL_0: 0xbe981ff400000000000000000000000000000000000000000000000000000000\ncalldatasize_VanityURL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferOwnershipForVanityURL(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0x5fd72a8a514697232cce4e0166c48993b060f46c.sol",
        "function": "transferOwnershipForVanityURL(address)",
        "lineno": 105,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}