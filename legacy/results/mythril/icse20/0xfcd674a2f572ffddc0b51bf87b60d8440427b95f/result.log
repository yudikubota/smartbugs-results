{"error": null, "issues": [{"address": 1263, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1275, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1284, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1290, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1333, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1345, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1354, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1360, "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3096, "code": "y;\n    totalSupply = ini", "debug": "storage_9: 0x0\nstorage_12: 0x1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `TokenERC20(uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 52, "title": "Integer Underflow", "type": "Warning"}, {"address": 3324, "code": "nitialize(address", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3432, "code": "f[msg.sender] += amo", "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_14: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "buy()", "lineno": 146, "title": "Exception state", "type": "Informational"}, {"address": 3584, "code": "'s balance\n        Transfer(thi", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffff8a450010febe\ncallvalue: 0xf7ffffc77fbc0803001f007000000000000000000000000f800d005041024be8\nstorage_14: 0x2000000000000000000400000000000000000000000000020001f\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x7bffffe3bfde\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\n", "description": "A possible integer overflow exists in the function `buy()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "buy()", "lineno": 147, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3850, "code": "From(address _from, address _to, uint256 _value) public ", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_15: 0x1\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_13: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transfer(address,uint256)", "lineno": 110, "title": "Exception state", "type": "Informational"}, {"address": 4007, "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "setMinBalance(uint256)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4735, "code": "          // executes an eve", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transfer(address,uint256)", "lineno": 158, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5807, "code": "ress] = true ;\n          ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xf50871237d0a17de83f337f9ba247f863eedf3e30165fc41073179f54000000f\ncalldata_x32323_32 + 36: 0x1e9698ab0e03c5b43f255829466fe149ee9db71858d6871333b7d9da75cd8fb\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x1e1148bc11c03006750812b5100226f60fdf5b0ba1a6125a9f4401c1ae9d13a3\nstorage_9: 0x0\nstorage_10: 0x1\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1e9698ab0e03c5b43f255829466fe149ee9db71858d6871333b7d9da75cd8fb\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 62, "title": "Integer Underflow", "type": "Warning"}, {"address": 6063, "code": "  }\n        return true;\n    }\n    \n", "debug": "storage_10: 0x8a1818d3b3bc8beab94dbc990eb17320884486edb1c7431bdec97182e769ffdf\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xa58dd2e4aba2b3c188acbf5de8bd5bbedf9aa8c9f16433829cd840bac67500af\ncalldata_x32323_32 + 36: 0x5ffc04107e87fd70c05941a38b4569b0fc507d837e92b5ac87d3f63ed12f96f\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x208bc3c10cc167601584cbff1c6b4208c361d500e6df82c7d3c66b1a3c40f\nstorage_8: 0x0\nstorage_9: 0x8a1818d3b3bc8beab94dbc990eb17320884486edb1c7431bdec97182e769ffdf\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5ffc04107e87fd70c05941a38b4569b0fc507d837e92b5ac87d3f63ed12f96f\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6081, "code": "ward(address _address) inter", "debug": "storage_8: 0x7fffffffffffffffffffffffffffffffffffffffff7ffffffffffffffffcfffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xe9fbfffbfffffffeffcdca6ffa956f73bf78077e7f4b8c8fbeede2727cbd0096\nstorage_10: 0xc000000000000000000000000000000000000000008000000000000000010001\ncalldata_x32323_32 + 36: 0x39fcffffffffff76ffed940bba854f63af37afe0aa9f7b7a07002152e5bc263a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x21c3000000000044c004d40a0ac49f1480038fe0229a725378fedea9ee34ba30\nstorage_9: 0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdffff\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x39fcffffffffff76ffed940bba854f63af37afe0aa9f7b7a07002152e5bc263a\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6184, "code": "rue;\n\t}\n    }\n//\u4ea4\u6613//\n\n    function _", "debug": "storage_8: 0xffd7ffff9138029fd3862d104000014fffffdfffffdffffffffffffddc0171fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x7fffff4bfaeffce77a510c06073ff9ffffd965fffe3cf86019909b53f780001\nstorage_9: 0x8000000040001463ee5282efbd0000300003f640000000000201fffe01001300\ncalldata_x32323_32 + 36: 0x11d7ffc0000a2043ec0100000180000000002000000038000a00000003c0000\nstorage_10: 0x80000000c047f9c06e63030000000038000800000020000000000000000008ff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x1051204000801ffe000000000000000000000000000000000000000000c0000\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x11d7ffc0000a2043ec0100000180000000002000000038000a00000003c0000\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6202, "code": "ress _from, address _to, uin", "debug": "storage_8: 0x79e3ce1009fbe58301bf60afe035e7c9f0c58754a229deea753bde4e36bffe57\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x9387f0003d9ee064eabf8c18f8018f44f2329f19afc3b41ee7703ad047ae00fe\nstorage_9: 0xfcc3f37a29bbcf26407747070fa06f1d64774d4f9778f6fd81b1830079b70521\ncalldata_x32323_32 + 36: 0x398ba7bebd38d87ebced75e988c566aac8d65e993ed3918ac0fb9a63babcae3b\nstorage_10: 0x4f482c00f20ab64580c7c6a5192482eb482128c4a002a7090acc1f3edf2fe67b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0xb1af333d415fec7f218dec0c9866de86a8655752ae4bb143e77fa60f9a19e386\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x398ba7bebd38d87ebced75e988c566aac8d65e993ed3918ac0fb9a63babcae3b\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "transferFrom(address,address,uint256)", "lineno": 78, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6292, "code": "is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 23000000 * 10 ** uint256(decimals);\n    uint256 airdropAmount = 2000000 * 10 ** uint256(decimals);\n    uint256 bonis = 1000000 * 10 ** uint256(decimals);\n    uint256 totalairdrop =  8000000 * 10 ** uint256(decimals);\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply <= (maxSupply - airdropAmount) && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] += airdropAmount;\n            totalSupply += airdropAmount;\n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\tif (totalSupply < maxSupply) {\n        \tbalanceOf[_address] += airdropAmount;\n        \ttotalSupply += airdropAmount;\n        \treturn true;\n\t}\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\t\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 17, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6306, "code": "is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 23000000 * 10 ** uint256(decimals);\n    uint256 airdropAmount = 2000000 * 10 ** uint256(decimals);\n    uint256 bonis = 1000000 * 10 ** uint256(decimals);\n    uint256 totalairdrop =  8000000 * 10 ** uint256(decimals);\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6614\";\n        symbol = \"\u6e2c\u8a6614\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply <= (maxSupply - airdropAmount) && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] += airdropAmount;\n            totalSupply += airdropAmount;\n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\tif (totalSupply < maxSupply) {\n        \tbalanceOf[_address] += airdropAmount;\n        \ttotalSupply += airdropAmount;\n        \treturn true;\n\t}\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\t\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xfcd674a2f572ffddc0b51bf87b60d8440427b95f.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 17, "title": "Integer Overflow ", "type": "Warning"}], "success": true}