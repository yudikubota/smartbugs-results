{
  "contract": "0x2ed9b0a70702f52808a27b60cf451652dbd75f8f",
  "tool": "mythril",
  "start": 1563639205.189582,
  "end": 1563639222.2518961,
  "duration": 17.0623140335083,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1322,
        "code": "om(sender, owner, price))\n    ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 91,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1322,
        "code": "om(sender, owner, price))\n    ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1681\n",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 91,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1322,
        "code": "om(sender, owner, price))\n    ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function makePayableRegistration(bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 91,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1393,
        "code": "vert();\n\t\t\tmakeRegistrat",
        "debug": "The exception is triggered under the following conditions:\n\nretval_1322: 0x1\nstorage_1: 0x2\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SilentNotary_0: 0x70e6b2b900000000000000000000000000000000000000000000000000000000\ncalldatasize_SilentNotary: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1681,
        "code": "sh);\n\t}\n\n\t/// @dev Internal registation ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 93,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1681,
        "code": "sh);\n\t}\n\n\t/// @dev Internal registation ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function makePayableRegistration(bytes32). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 93,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2310,
        "code": "sh, block.number, timestamp);\n\t}\n\n\t/// @dev Check h",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 108,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2320,
        "code": "sh, block.number, timestamp);\n\t}\n\n\t/// @dev Check h",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/27/0x2ed9b0a70702f52808a27b60cf451652dbd75f8f.sol",
        "function": "makePayableRegistration(bytes32)",
        "lineno": 108,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}