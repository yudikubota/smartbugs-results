{
  "contract": "0x63060b6f77a103c999b986534eae51e4169c8c36",
  "tool": "mythril",
  "start": 1563500387.0423415,
  "end": 1563500649.4445045,
  "duration": 262.40216302871704,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1005,
        "code": "  }\n\n    // withdraw some of the Ether\n    function withdrawSome(uint valu",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "setNotice(string)",
        "lineno": 196,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2441,
        "code": "ontracts",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 138,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2441,
        "code": "ontracts",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2757\nCall at address: 2599\n",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 138,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2441,
        "code": "ontracts",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 138,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2599,
        "code": "quire(ms",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 139,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2599,
        "code": "quire(ms",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2757\n",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 139,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2599,
        "code": "quire(ms",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 139,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2757,
        "code": " address",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 139,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2757,
        "code": " address",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 139,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2917,
        "code": "End() inte",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 131,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2917,
        "code": "End() inte",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3233\nCall at address: 3075\n",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 131,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2917,
        "code": "End() inte",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 131,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3075,
        "code": "    r0.end",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 132,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3075,
        "code": "    r0.end",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3233\n",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 132,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3075,
        "code": "    r0.end",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 132,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3233,
        "code": " r1.end();",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 133,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3233,
        "code": " r1.end();",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "fallback",
        "lineno": 133,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4609,
        "code": ", amount));\n    }",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "withdrawToken(address)",
        "lineno": 213,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4609,
        "code": ", amount));\n    }",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4801\n",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "withdrawToken(address)",
        "lineno": 213,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4801,
        "code": "quire(t.transfer(sender, amount));\n    }\n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "withdrawToken(address)",
        "lineno": 213,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5171,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "refundToken(address,address,uint256)",
        "lineno": 215,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5907,
        "code": " should stay open for no more\n    // than this amount of time\n    uint public constant SOFTCAP_TIME = 4 hours;\n\n    address public owner;    // contract owner\n    address public newOwner; // new contract owner for two-way ownership handshake\n    string public notice;    // arbitrary public notice text\n    uint public start;       // start time of sale\n    uint public end;         // end time of sale\n    uint public cap;         // Ether hard cap\n    uint public softcap;     // Ether soft cap\n    bool public live;        // sale is live right now\n\n    Receiver public r0;\n    Receiver public r1;\n    Receiver public r2;\n\n    function Sale() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // tell the receivers that the sale has begun\n    function emitBegin() internal {\n        r0.start();\n        r1.start();\n        r2.start();\n    }\n\n    // tell the receivers that the sale is over\n    function emitEnd() internal {\n        r0.end();\n        r1.end();\n        r2.end();\n    }\n\n    function () payable {\n        // only accept contributions from receiver contracts\n        require(msg.sender == address(r0) || msg.sender == address(r1) || msg.sender == address(r2));\n        require(block.timestamp >= start);\n\n        // if we've gone past the softcap, make sure the sale\n        // stays open for no longer than SOFTCAP_TIME past the current block\n        if (this.balance > softcap && block.timestamp < end && (end - block.timestamp) > SOFTCAP_TIME)\n            end = block.timestamp + SOFTCAP_TIME;\n\n        // If we've reached end-of-sale conditions, accept\n        // this as the last contribution and emit the EndSale event.\n        // (Technically this means we allow exactly one contribution\n        // after the end of the sale.)\n        // Conversely, if we haven't started the sale yet, emit\n        // the StartSale event.\n        if (block.timestamp > end || this.balance > cap) {\n            require(live);\n            live = false;\n            emitEnd();\n        } else if (!live) {\n            live = true;\n            emitBegin();\n        }\n    }\n\n    function init(uint _start, uint _end, uint _cap, uint _softcap) onlyOwner {\n        start = _start;\n        end = _end;\n        cap = _cap;\n        softcap = _softcap;\n    }\n\n    function setReceivers(address a, address b, address c) onlyOwner {\n        r0 = Receiver(a);\n        r1 = Receiver(b);\n        r2 = Receiver(c);\n    }\n\n    // 1st half of ownership change\n    function changeOwner(address next) onlyOwner {\n        newOwner = next;\n    }\n\n    // 2nd half of ownership change\n    function acceptOwnership() {\n        require(msg.sender == newOwner);\n        owner = msg.sender;\n        newOwner = 0;\n    }\n\n    // put some text in the contract\n    function setNotice(string note) onlyOwner {\n        notice = note;\n    }\n\n    // withdraw all of the Ether\n    function withdraw() onlyOwner {\n        msg.sender.transfer(this.balance);\n    }\n\n    // withdraw some of the Ether\n    function withdrawSome(uint value) onlyOwner {\n        require(value <= this.balance);\n        msg.sender.transfer(value);\n    }\n\n    // withdraw tokens to owner\n    function withdrawToken(address token) onlyOwner {\n        Token t = Token(token);\n        require(t.transfer(msg.sender, t.balanceOf(this)));\n    }\n\n    // refund early/late tokens\n    function refundToken(address token, address sender, uint amount) onlyOwner {\n        Token t = Token(token);\n        require(t.transfer(sender, amount));\n    }\n}",
        "debug": "calldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "setNotice(string)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5921,
        "code": " should stay open for no more\n    // than this amount of time\n    uint public constant SOFTCAP_TIME = 4 hours;\n\n    address public owner;    // contract owner\n    address public newOwner; // new contract owner for two-way ownership handshake\n    string public notice;    // arbitrary public notice text\n    uint public start;       // start time of sale\n    uint public end;         // end time of sale\n    uint public cap;         // Ether hard cap\n    uint public softcap;     // Ether soft cap\n    bool public live;        // sale is live right now\n\n    Receiver public r0;\n    Receiver public r1;\n    Receiver public r2;\n\n    function Sale() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // tell the receivers that the sale has begun\n    function emitBegin() internal {\n        r0.start();\n        r1.start();\n        r2.start();\n    }\n\n    // tell the receivers that the sale is over\n    function emitEnd() internal {\n        r0.end();\n        r1.end();\n        r2.end();\n    }\n\n    function () payable {\n        // only accept contributions from receiver contracts\n        require(msg.sender == address(r0) || msg.sender == address(r1) || msg.sender == address(r2));\n        require(block.timestamp >= start);\n\n        // if we've gone past the softcap, make sure the sale\n        // stays open for no longer than SOFTCAP_TIME past the current block\n        if (this.balance > softcap && block.timestamp < end && (end - block.timestamp) > SOFTCAP_TIME)\n            end = block.timestamp + SOFTCAP_TIME;\n\n        // If we've reached end-of-sale conditions, accept\n        // this as the last contribution and emit the EndSale event.\n        // (Technically this means we allow exactly one contribution\n        // after the end of the sale.)\n        // Conversely, if we haven't started the sale yet, emit\n        // the StartSale event.\n        if (block.timestamp > end || this.balance > cap) {\n            require(live);\n            live = false;\n            emitEnd();\n        } else if (!live) {\n            live = true;\n            emitBegin();\n        }\n    }\n\n    function init(uint _start, uint _end, uint _cap, uint _softcap) onlyOwner {\n        start = _start;\n        end = _end;\n        cap = _cap;\n        softcap = _softcap;\n    }\n\n    function setReceivers(address a, address b, address c) onlyOwner {\n        r0 = Receiver(a);\n        r1 = Receiver(b);\n        r2 = Receiver(c);\n    }\n\n    // 1st half of ownership change\n    function changeOwner(address next) onlyOwner {\n        newOwner = next;\n    }\n\n    // 2nd half of ownership change\n    function acceptOwnership() {\n        require(msg.sender == newOwner);\n        owner = msg.sender;\n        newOwner = 0;\n    }\n\n    // put some text in the contract\n    function setNotice(string note) onlyOwner {\n        notice = note;\n    }\n\n    // withdraw all of the Ether\n    function withdraw() onlyOwner {\n        msg.sender.transfer(this.balance);\n    }\n\n    // withdraw some of the Ether\n    function withdrawSome(uint value) onlyOwner {\n        require(value <= this.balance);\n        msg.sender.transfer(value);\n    }\n\n    // withdraw tokens to owner\n    function withdrawToken(address token) onlyOwner {\n        Token t = Token(token);\n        require(t.transfer(msg.sender, t.balanceOf(this)));\n    }\n\n    // refund early/late tokens\n    function refundToken(address token, address sender, uint amount) onlyOwner {\n        Token t = Token(token);\n        require(t.transfer(sender, amount));\n    }\n}",
        "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x3cf572a700000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNotice(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x63060b6f77a103c999b986534eae51e4169c8c36.sol",
        "function": "setNotice(string)",
        "lineno": 97,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}