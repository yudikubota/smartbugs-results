{
  "contract": "0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc",
  "tool": "mythril",
  "start": 1563583460.8436465,
  "end": 1563583525.021603,
  "duration": 64.17795658111572,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 102,
        "code": "dEth(address[] _to, uint256[] _value) payable returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// count values for refunding sender\n\t\tuint256 beforeValue = msg.value;\n\t\tuint256 afterValue = 0;\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tafterValue = afterValue + _value[i];\n\t\t\tassert(_to[i].send(_value[i]));\n\t\t}\n\t\t// send back remaining value to sender\n\t\tuint256 remainingValue = beforeValue - afterValue;\n\t\tif (remainingValue > 0) {\n\t\t\tassert(msg.sender.send(remainingValue));\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction sendErc20(address ",
        "debug": "calldata_Multiplexer_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\n",
        "description": "A possible integer overflow exists in the function `sendEth(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 13,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 327,
        "code": "nAddress, address[] _to, uint256[] _value) returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// use the erc20 abi\n\t\tERC20 token = ERC20(_tokenAddress);\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n}",
        "debug": "calldata_Multiplexer_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Multiplexer_0: 0xaee2561300000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sendErc20(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 33,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 506,
        "code": "gth == _value.length);\n\t\tassert(_to",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x0\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 15,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 520,
        "code": "th <= 255);\n\t\t// count va",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 16,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 574,
        "code": "];\n\t\t\tassert(_to[i].se",
        "debug": "mem_0 + 192 + 32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0xc3c56c024baef3ca87e2df48bea5090f0883712e9bae0780f000021ef8c7e38b\nmem_32 +\n192 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0xdb75e7a4599039c4c00c1022b0d14e32eefb71cadbacf0a0dbefbd9cbab5ebcd\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0x4\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x4\nretval_676: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\n",
        "description": "A possible integer overflow exists in the function `sendEth(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 22,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 676,
        "code": ");\n\t\t}\n\t\t// send back ",
        "debug": "SOLVER OUTPUT:\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0xdf\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0xdf\n",
        "description": "In the function `sendEth(address[],uint256[])` a non-zero amount of Ether is sent to an address taken from function arguments.\nIt seems that this function can be called without restrictions.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 23,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 676,
        "code": ");\n\t\t}\n\t\t// send back ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 764\nCall at address: 764\n",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 23,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 688,
        "code": "lue[i]));\n\t\t}\n\t\t// send back r",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0xff\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\nretval_676: 0x0\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0xff\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 23,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 705,
        "code": "\n\t\tif (remainingValue > ",
        "debug": "calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x1\ncallvalue: 0x0\nmem_0 + 192 + 32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x1\nretval_676: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x1\n",
        "description": "A possible integer underflow exists in the function `sendEth(address[],uint256[])`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 26,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 776,
        "code": "iningValue));\n\t\t}\n\t\treturn true;\n\t}\n\n\tf",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Multiplexer_4 + calldata_Multiplexer_4: 0x2\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x2\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_32 +\n192 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x0\nmem_0 + 192 + 32*calldata_Multiplexer_4 + calldata_Multiplexer_4: 0x0\nretval_676: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0x25245b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\nretval_764: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendEth(address[],uint256[])",
        "lineno": 28,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 809,
        "code": ");\n\t\tassert(_to.length <= 255);\n\t\t/",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0x0\ncalldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0xaee2561300000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 35,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 823,
        "code": " the erc20 abi\n\t\tERC20 to",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\ncalldata_Multiplexer_0: 0xaee2561300000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\ncalldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 37,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1118,
        "code": "value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n}",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 41,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1118,
        "code": "value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n}",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1118\n",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 41,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1184,
        "code": "o[i], _value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n}",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0xff\nreturndatasize: 0x20\nretval_1118: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Multiplexer_0: 0xaee2561300000000000000000000000000000000000000000000000000000000\ncalldatasize_Multiplexer: 0x4\nmem_160 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_32 + 4 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_32 + 36: 0x0\nmem_128 +\n32 +\n32*calldata_Multiplexer_4 + calldata_Multiplexer_32 + 4: 0xff\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/19/0x53a30b07bea5b8e9b5f710e038867a1531b0b5dc.sol",
        "function": "sendErc20(address,address[],uint256[])",
        "lineno": 41,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}