{
  "contract": "0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9",
  "tool": "mythril",
  "start": 1563563071.0653985,
  "end": 1563563284.2186913,
  "duration": 213.1532928943634,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 799,
        "code": "dTransferred = fundTransferred.add(etham",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 93,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 799,
        "code": "dTransferred = fundTransferred.add(etham",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 901\n",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 93,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 901,
        "code": "}\n\n    modifier afterDeadli",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 94,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 933,
        "code": "now >= mainSaleDeadline) _; }\n\n    /**\n     *end",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 96,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 1671,
        "code": "    r",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xabbbba01505fe000000000000319000000000000000000000000000000000001\ncallvalue: 0xa88889ff004030000000000003e7000000000000000000000000000000000003\nstorage_11: 0x0\ncalldata_token_0: 0x1cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 30,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1684,
        "code": ";\n  }\n  \n}\n\nco",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_11: 0x0\ncalldata_token_0: 0x2085f2d400000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 30,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1708,
        "code": "sert(",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb379058102432400102948508245181c041a76f1ffbc078c40717ded8222c00c\nstorage_2: 0x290fd1e2111f8100168688363c6a5c0012c3bb9ff7a00e164fc7dff906c2374e\ncallvalue: 0x3f4999d54559bbff212720042d605c001273475c0897e70a60577e4e2f397357\ntimestamp: 0x0\nstorage_4: 0x0\nstorage_3: 0x0\nstorage_11: 0x0\ncalldatasize_token: 0x3\nstorage_7: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "fallback",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2217,
        "code": "     }\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "getTokensBack()",
        "lineno": 133,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2217,
        "code": "     }\n    }\n}",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2593\n",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "getTokensBack()",
        "lineno": 133,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2593,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xfcc74ab9a02d55b9b1d0c378547a6bcfad7597c9.sol",
        "function": "getTokensBack()",
        "lineno": 135,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}