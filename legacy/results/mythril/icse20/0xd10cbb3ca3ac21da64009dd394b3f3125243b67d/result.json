{
  "contract": "0xd10cbb3ca3ac21da64009dd394b3f3125243b67d",
  "tool": "mythril",
  "start": 1563477250.4287598,
  "end": 1563477277.9950347,
  "duration": 27.566274881362915,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1160,
        "code": "esses[i]].add(_values[i]);\n      Transfer(msg.sender, _addresses[i], _values[i]);\n\n    }\n    \n    return true;\n  }\n\n  function remainingSupply() public view returns(uint256) {\n    return balances[this];\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens from the contract\n   * @param amount The amount of token to be burned.\n   */\n  function burnFromContract(uint256 amount) public onlyOwner {\n    require(amount <= balances[this]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an asse",
        "debug": "calldata_TabToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TabToken_0: 0x51cfc73100000000000000000000000000000000000000000000000000000000\ncalldatasize_TabToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFromContract(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "transferFromContract(address[],uint256[])",
        "lineno": 475,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1568,
        "code": "n lockWorker(address _address) internal {\n      require(_address != owner);\n      require(this != _address);\n\n      lockStates[_address] = true;\n      Lock(_add",
        "debug": "calldata_TabToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TabToken_0: 0x6f3b475900000000000000000000000000000000000000000000000000000000\ncalldatasize_TabToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `lockMultiple(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "lockMultiple(address[])",
        "lineno": 174,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3109,
        "code": "i=0; i < _addresses.length; i++) {\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TabToken_0: 0xe29df2200000000000000000000000000000000000000000000000000000000\ncalldatasize_TabToken: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "sendEther()",
        "lineno": 469,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3304,
        "code": "his]);\n\n      // SafeMath.sub wil",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function sendEther(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "sendEther()",
        "lineno": 471,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 8525,
        "code": " }\n}\n",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TabToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_TabToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TabToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_TabToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_TabToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TabToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8538,
        "code": " @title Ownabl",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TabToken_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\ncalldata_TabToken_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TabToken_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_TabToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_TabToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TabToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/2/0xd10cbb3ca3ac21da64009dd394b3f3125243b67d.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 50,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}