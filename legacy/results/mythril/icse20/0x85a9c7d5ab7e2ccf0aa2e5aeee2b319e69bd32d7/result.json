{
  "contract": "0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7",
  "tool": "mythril",
  "start": 1563306602.5713031,
  "end": 1563306884.5682943,
  "duration": 281.99699115753174,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 441,
        "code": "nt256 weiAmount = msg.value;\n     ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "fallback",
        "lineno": 170,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 441,
        "code": "nt256 weiAmount = msg.value;\n     ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 827\nCall at address: 827\n",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "fallback",
        "lineno": 170,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 827,
        "code": "if (weiAmount >= weiWelfare) {\n           ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "fallback",
        "lineno": 182,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3167,
        "code": "t256 ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETTokenPreSale_0: 0x2137094200000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETTokenPreSale: 0x4\nstorage_7: 0x0\nstorage_8: 0x0\nstorage_9: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "updateEthPrice(uint256)",
        "lineno": 107,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3218,
        "code": "wnable {\n    u",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x0\nstorage_8: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_VNETTokenPreSale_0: 0x2137094200000000000000000000000000000000000000000000000000000000\ncalldatasize_VNETTokenPreSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "updateEthPrice(uint256)",
        "lineno": 126,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3871,
        "code": "ance));\n    }\n}\n\n\n/**\n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "_function_0x5431c94e",
        "lineno": 71,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3871,
        "code": "ance));\n    }\n}\n\n\n/**\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4095\n",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "_function_0x5431c94e",
        "lineno": 71,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4095,
        "code": "\n * @dev Math operations with safet",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x85a9c7d5ab7e2ccf0aa2e5aeee2b319e69bd32d7.sol",
        "function": "_function_0x5431c94e",
        "lineno": 77,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}