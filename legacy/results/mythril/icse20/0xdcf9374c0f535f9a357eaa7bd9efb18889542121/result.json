{
  "contract": "0xdcf9374c0f535f9a357eaa7bd9efb18889542121",
  "tool": "mythril",
  "start": 1563529549.4158401,
  "end": 1563529573.3551195,
  "duration": 23.939279317855835,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1727,
        "code": "using SafeMath for ui",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0x17ffc320",
        "lineno": 514,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1727,
        "code": "using SafeMath for ui",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4141\n",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0x17ffc320",
        "lineno": 514,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2208,
        "code": " internal functions use the inter",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0x21e6b53d",
        "lineno": 615,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2460,
        "code": "rnal types ca",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "pauseToken()",
        "lineno": 616,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2785,
        "code": "o, uint256 _amount)\n   publi",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function claim(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "claim()",
        "lineno": 528,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3038,
        "code": " reference and ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "unpauseToken()",
        "lineno": 617,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4141,
        "code": "*************************",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0x17ffc320",
        "lineno": 478,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4750,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0xca79e2f2",
        "lineno": 645,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4819,
        "code": "*****",
        "debug": "calldata_ZenomeCrowdsale_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_11: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_10: 0x0\ncaller: 0x0\ncalldata_ZenomeCrowdsale_0: 0xca79e2f200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZenomeCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xca79e2f2`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0xca79e2f2",
        "lineno": 100,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4832,
        "code": "**************",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_11: 0x1\ncalldata_ZenomeCrowdsale_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0x0\ncaller: 0x0\ncalldata_ZenomeCrowdsale_0: 0xca79e2f200000000000000000000000000000000000000000000000000000000\ncalldatasize_ZenomeCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0xdcf9374c0f535f9a357eaa7bd9efb18889542121.sol",
        "function": "_function_0xca79e2f2",
        "lineno": 100,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}