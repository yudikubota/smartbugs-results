{"error": null, "issues": [{"address": 265, "code": "Raised += amount;\n            t", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xd0b2b5fa44ed4778c71d1cc7a848160941d2b37f665e44ee5d6acb31123041be\ncallvalue: 0x80213a0221894f400b0e000e045a5c7a83d2e56fd77fbcfad5696d75dbbb7c20\nstorage_7: 0x0\ncalldata_token_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 53, "title": "Integer Overflow ", "type": "Warning"}, {"address": 281, "code": "sfer(msg.sender, amoun", "debug": "storage_2: 0xd0b2b5fa44ed4778c71d1cc7a848160941d2b37f665e44ee5d6acb31123041be\ncallvalue: 0x80213a0221894f400b0e000e045a5c7a83d2e56fd77fbcfad5696d75dbbb7c20\nstorage_7: 0x0\ncalldata_token_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 54, "title": "Integer Overflow ", "type": "Warning"}, {"address": 363, "code": ";\n        }\n  ", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\ncalldata_token_0: 0x1cb3a2000000000000000000000000000000000000000000000000000000000\ncalldatasize_token: 0x4\nstorage_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 55, "title": "Exception state", "type": "Informational"}, {"address": 501, "code": "         beneficiary.send(amount);\n        }\n   ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 55, "title": "Message call to external contract", "type": "Informational"}, {"address": 501, "code": "         beneficiary.send(amount);\n        }\n   ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 603\n", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 55, "title": "Multiple Calls", "type": "Information"}, {"address": 603, "code": "r afterDeadline() { if (", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/36/0xaa0e1bc5163293c2e335977d9478d741f3a4e372.sol", "function": "fallback", "lineno": 59, "title": "Unchecked CALL return value", "type": "Informational"}], "success": true}