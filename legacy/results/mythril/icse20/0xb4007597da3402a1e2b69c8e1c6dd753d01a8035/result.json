{
  "contract": "0xb4007597da3402a1e2b69c8e1c6dd753d01a8035",
  "tool": "mythril",
  "start": 1563801624.5768714,
  "end": 1563801679.6781812,
  "duration": 55.10130977630615,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2561,
        "code": ".VaultRequestedUpdateForLockedVotingTokens( vaultOw",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 8. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "releaseTokensAndEtherForEmergencyFund()",
        "lineno": 1080,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2561,
        "code": ".VaultRequestedUpdateForLockedVotingTokens( vaultOw",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2722\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "releaseTokensAndEtherForEmergencyFund()",
        "lineno": 1080,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2771,
        "code": "called to collect future bla",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "releaseTokensAndEtherForEmergencyFund()",
        "lineno": 1083,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3707,
        "code": "ationEntity.getBylawUint256(\"cashback_owner_mia_dur\") ;\n      ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 850,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3707,
        "code": "ationEntity.getBylawUint256(\"cashback_owner_mia_dur\") ;\n      ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\nCall at address: 4097\nCall at address: 3871\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 850,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3871,
        "code": "alVotingDuration        = Applic",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 852,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3871,
        "code": "alVotingDuration        = Applic",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\nCall at address: 4097\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 852,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3993,
        "code": ".getBylawUint256(\"proposal_voting_du",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 852,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4097,
        "code": "ialized = true;\n        return true;\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 855,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4097,
        "code": "ialized = true;\n        return true;\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\nCall at address: 4323\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 855,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4219,
        "code": "  /*\n        The funding contract decides if a vault should",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 861,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4323,
        "code": "can't accept payments.\n   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 863,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4323,
        "code": "can't accept payments.\n   ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4530\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 863,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4530,
        "code": "ing_stage\n    )\n        public\n        payable\n        require",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "initialize(address,address,address,address,address)",
        "lineno": 871,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5550,
        "code": "             milestoneTokenBalance-=tokenBalances[0];\n ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 7. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "getDirectBoughtTokens()",
        "lineno": 941,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5550,
        "code": "             milestoneTokenBalance-=tokenBalances[0];\n ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function getDirectBoughtTokens(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "getDirectBoughtTokens()",
        "lineno": 941,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7025,
        "code": "ssue with iterating over them, while processing vau",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "addPayment(uint8,uint8)",
        "lineno": 900,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7025,
        "code": "ssue with iterating over them, while processing vau",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function addPayment(uint8,uint8). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "addPayment(uint8,uint8)",
        "lineno": 900,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 7310,
        "code": "\n        }\n    }\n\n    function ",
        "debug": "callvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_9: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldata_FundingVault_4: 0x1\nreturndatasize: 0x20\nretval_7025: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\nstorage_0: 0xff00\ncalldata_FundingVault_0: 0x3a533d9100000000000000000000000000000000000000000000000000000000\ncalldatasize_FundingVault: 0x4\n",
        "description": "A possible integer overflow exists in the function `addPayment(uint8,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "addPayment(uint8,uint8)",
        "lineno": 909,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7353,
        "code": "ublic view returns (uint256) {\n        return Token",
        "debug": "storage_keccac_255_&_255_&_255_&_calldata_FundingVault_32_+_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldata_FundingVault_4: 0x1\nreturndatasize: 0x20\nretval_7025: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\nstorage_0: 0xff00\ncalldata_FundingVault_0: 0x3a533d9100000000000000000000000000000000000000000000000000000000\ncalldatasize_FundingVault: 0x4\n",
        "description": "A possible integer overflow exists in the function `addPayment(uint8,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "addPayment(uint8,uint8)",
        "lineno": 913,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11068,
        "code": "dexed _payment_method, uint256 indexed _amount );\n    event Eve",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkOwnerFailedToSetTimeOnMeeting()",
        "lineno": 1214,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 11068,
        "code": "dexed _payment_method, uint256 indexed _amount );\n    event Eve",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11264\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkOwnerFailedToSetTimeOnMeeting()",
        "lineno": 1214,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 11068,
        "code": "dexed _payment_method, uint256 indexed _amount );\n    event Eve",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkOwnerFailedToSetTimeOnMeeting(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkOwnerFailedToSetTimeOnMeeting()",
        "lineno": 1214,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 11264,
        "code": "dPayment(address indexed _vault, uint",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkOwnerFailedToSetTimeOnMeeting()",
        "lineno": 1214,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 11264,
        "code": "dPayment(address indexed _vault, uint",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkOwnerFailedToSetTimeOnMeeting(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkOwnerFailedToSetTimeOnMeeting()",
        "lineno": 1214,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 11571,
        "code": "difier isOwner() {\n        require(msg.sender == v",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 5. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkMilestoneStateInvestorVotedNoVotingEndedNo()",
        "lineno": 1156,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 11571,
        "code": "difier isOwner() {\n        require(msg.sender == v",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function checkMilestoneStateInvestorVotedNoVotingEndedNo(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "checkMilestoneStateInvestorVotedNoVotingEndedNo()",
        "lineno": 1156,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 12621,
        "code": "       return true;\n                }\n      ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "ReleaseFundsAndTokens()",
        "lineno": 1136,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 12621,
        "code": "       return true;\n                }\n      ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\nCall at address: 13028\nCall at address: 12817\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1136,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 12621,
        "code": "       return true;\n                }\n      ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function ReleaseFundsAndTokens(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "ReleaseFundsAndTokens()",
        "lineno": 1136,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 12817,
        "code": "vaultOwner ) == false) {\n         ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1135,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 12817,
        "code": "vaultOwner ) == false) {\n         ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\nCall at address: 13028\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1135,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 12817,
        "code": "vaultOwner ) == false) {\n         ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1135,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 13028,
        "code": "       // they only have to do 1 thing, which is se",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1145,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 13028,
        "code": "       // they only have to do 1 thing, which is se",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 13221\n",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1145,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 13028,
        "code": "       // they only have to do 1 thing, which is se",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1145,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 13221,
        "code": "ect owner is missing in acti",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 3. This storage slot can be written to by calling the function `initialize(address,address,address,address,address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1144,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 13221,
        "code": "ect owner is missing in acti",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function canCashBack(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/32/0xb4007597da3402a1e2b69c8e1c6dd753d01a8035.sol",
        "function": "canCashBack()",
        "lineno": 1144,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}