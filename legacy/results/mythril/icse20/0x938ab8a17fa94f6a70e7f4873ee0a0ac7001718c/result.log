{"error": null, "issues": [{"address": 1087, "code": "c returns (bool success) {\n    ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/20/0x938ab8a17fa94f6a70e7f4873ee0a0ac7001718c.sol", "function": "fallback", "lineno": 160, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3577, "code": " a - b;\n  }\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x938ab8a17fa94f6a70e7f4873ee0a0ac7001718c.sol", "function": "burn(uint256)", "lineno": 28, "title": "Exception state", "type": "Informational"}, {"address": 3595, "code": ">= b)", "debug": "calldata_Token_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\nstorage_11: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x938ab8a17fa94f6a70e7f4873ee0a0ac7001718c.sol", "function": "transferFrom(address,address,uint256)", "lineno": 32, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3620, "code": "eturn c;\n  }\n\n  modifier", "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x17ffffffffffffffffffffffffffffffffffffffffffbffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9fffeffffffffffffffbffffffffff00000000000000000000003eef40000000\ncallvalue: 0x800000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_11,_256): 0xc000000017fffffffffffffffffffffffffffffffffdffffffffbfeffffffffe\nstorage_11: 0x0\ncalldatasize_Token: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x938ab8a17fa94f6a70e7f4873ee0a0ac7001718c.sol", "function": "fallback", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 3814, "code": " 32 + 4);\n     _;\n  }\n\n}\n\ncontract StandardT", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x938ab8a17fa94f6a70e7f4873ee0a0ac7001718c.sol", "function": "approve(address,uint256)", "lineno": 37, "title": "Exception state", "type": "Informational"}], "success": true}