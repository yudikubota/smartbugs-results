{"error": null, "issues": [{"address": 2816, "code": ";\n\n// File: contra", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OwnableUpdated_4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OwnableUpdated_0: 0xb1ca49a00000000000000000000000000000000000000000000000000000000\ncalldatasize_OwnableUpdated: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeMember(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xd46883ddff92cc0474255f2f8134c63f8209171d.sol", "function": "removeMember(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2937, "code": "ent FactoryAdded(address _factory);\n    event FactoryRemoved(addres", "debug": "The exception is triggered under the following conditions:\n\ncalldata_OwnableUpdated_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_OwnableUpdated_4: 0x0\ncalldata_OwnableUpdated_0: 0xcaab98e00000000000000000000000000000000000000000000000000000000\ncalldatasize_OwnableUpdated: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xd46883ddff92cc0474255f2f8134c63f8209171d.sol", "function": "_function_0x0caab98e", "lineno": 109, "title": "Exception state", "type": "Informational"}, {"address": 6208, "code": ";\n\n// File: contra", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller,\n_____256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OwnableUpdated_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_OwnableUpdated_0: 0xca6d56dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_OwnableUpdated: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addMember(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xd46883ddff92cc0474255f2f8134c63f8209171d.sol", "function": "addMember(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7150, "code": ";\n\n// File: contra", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OwnableUpdated_32_+_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_OwnableUpdated_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_OwnableUpdated_0: 0xd5c81a0500000000000000000000000000000000000000000000000000000000\ncalldatasize_OwnableUpdated: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setInitialOwnerInFoundation(address,address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xd46883ddff92cc0474255f2f8134c63f8209171d.sol", "function": "setInitialOwnerInFoundation(address,address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8042, "code": "  mapping(address => bool) public factories;\n\n    // Owners (EOA) to contract addresses relationships.\n    mapping(address => address) public ownersToContracts;\n\n    // Contract addresses to owners relationships.\n    mapping(address => address) public contractsToOwners;\n\n    // Index of known contract addresses.\n    address[] private contractsIndex;\n\n    // Members (EOA) to contract addresses relationships.\n    // In a Partnership.sol inherited contract, this allows us to create a\n    // modifier for most read functions in this contract that will authorize\n    // any account associated with an authorized Partnership contract.\n    mapping(address => address) public membersToContracts;\n\n    // Index of known members for each contract.\n    // These are EOAs that were added once, even if removed now.\n    mapping(address => address[]) public contractsToKnownMembersIndexes;\n\n    // Events for factories.\n    event FactoryAdded(address _factory);\n    event FactoryRemoved(address _factory);\n\n    /**\n     * @dev Add a factory.\n     */\n    function addFactory(address _factory) external onlyOwner {\n        factories[_factory] = true;\n        emit FactoryAdded(_factory);\n    }\n\n    /**\n     * @dev Remove a factory.\n     */\n    function removeFactory(address _factory) external onlyOwner {\n        factories[_factory] = false;\n        emit FactoryRemoved(_factory);\n    }\n\n    /**\n     * @dev Modifier for factories.\n     */\n    modifier onlyFactory() {\n        require(\n            factories[msg.sender],\n            \"You are not a factory\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Set initial owner of a contract.\n     */\n    function setInitialOwnerInFoundation(\n        address _contract,\n        address _account\n    )\n        external\n        onlyFactory\n    {\n        require(\n            contractsToOwners[_contract] == address(0),\n            \"Contract already has owner\"\n        );\n        require(\n            ownersToContracts[_account] == address(0),\n            \"Account already has contract\"\n        );\n        contractsToOwners[_contract] = _account;\n        contractsIndex.push(_contract);\n        ownersToContracts[_account] = _contract;\n        membersToContracts[_account] = _contract;\n    }\n\n    /**\n     * @dev Transfer a contract to another account.\n     */\n    function transferOwnershipInFoundation(\n        address _contract,\n        address _newAccount\n    )\n        external\n    {\n        require(\n            (\n                ownersToContracts[msg.sender] == _contract &&\n                contractsToOwners[_contract] == msg.sender\n            ),\n            \"You are not the owner\"\n        );\n        ownersToContracts[msg.sender] = address(0);\n        membersToContracts[msg.sender] = address(0);\n        ownersToContracts[_newAccount] = _contract;\n        membersToContracts[_newAccount] = _contract;\n        contractsToOwners[_contract] = _newAccount;\n        // Remark: we do not update the contracts members.\n        // It's the new owner's responsability to remove members, if needed.\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * This is called through the contract.\n     */\n    function renounceOwnershipInFoundation() external returns (bool success) {\n        // Remove members.\n        delete(contractsToKnownMembersIndexes[msg.sender]);\n        // Free the EOA, so he can become owner of a new contract.\n        delete(ownersToContracts[contractsToOwners[msg.sender]]);\n        // Assign the contract to no one.\n        delete(contractsToOwners[msg.sender]);\n        // Return.\n        success = true;\n    }\n\n    /**\n     * @dev Add a member EOA to a contract.\n     */\n    function addMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == address(0),\n            \"Address is already member of a contract\"\n        );\n        membersToContracts[_member] = ownersToContracts[msg.sender];\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Remove a member EOA to a contract.\n     */\n    function removeMember(address _member) external {\n        require(\n            ownersToContracts[msg.sender] != address(0),\n            \"You own no contract\"\n        );\n        require(\n            membersToContracts[_member] == ownersToContracts[msg.sender],\n            \"Address is not member of this contract\"\n        );\n        membersToContracts[_member] = address(0);\n        contractsToKnownMembersIndexes[ownersToContracts[msg.sender]].push(_member);\n    }\n\n    /**\n     * @dev Getter for contractsIndex.\n     * The automatic getter can not return array.\n     */\n    function getContractsIndex()\n        external\n        onlyOwner\n        view\n        returns (address[])\n    {\n        return contractsIndex;\n    }\n\n    /**\n     * @dev Prevents accidental sending of ether.\n     */\n    function() public {\n        revert(\"Prevent accidental sending of ether\");\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_OwnableUpdated_0: 0x8f2691cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_OwnableUpdated: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `renounceOwnershipInFoundation()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xd46883ddff92cc0474255f2f8134c63f8209171d.sol", "function": "renounceOwnershipInFoundation()", "lineno": 87, "title": "Integer Overflow ", "type": "Warning"}], "success": true}