{"error": null, "issues": [{"address": 450, "code": "\n\ncontract HYIP {\n", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HYIP_0: 0x100000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 758, "code": "\n\ncontract HYIP {\n", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_HYIP_0: 0x5926651d00000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addBeneficiary(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "addBeneficiary(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1146, "code": "beneficiaries */\t\t\n\t\t\tif(m_benefic", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef00\ncalldata_HYIP_0: 0xf0ba96ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `performPayouts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 85, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1350, "code": "e investors  */\n\t\t\t/* we use reverse iteration h", "debug": "", "description": "In the function `performPayouts()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 97, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 1350, "code": "e investors  */\n\t\t\t/* we use reverse iteration h", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1350\n", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 97, "title": "Multiple Calls", "type": "Information"}, {"address": 1350, "code": "e investors  */\n\t\t\t/* we use reverse iteration h", "debug": "", "description": "A possible transaction order independence vulnerability exists in function performPayouts(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 97, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1397, "code": "\t\tcon", "debug": "storage_2: 0x0\ntimestamp: 0x1\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeae80\ncalldata_HYIP_0: 0xf0ba96ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `performPayouts()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 102, "title": "Integer Underflow", "type": "Warning"}, {"address": 1413, "code": "ESTORS_INTEREST) / INTEREST_DENOMI", "debug": "storage_3: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1350: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x15081\ncalldata_HYIP_0: 0xf0ba96ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `performPayouts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 103, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1620, "code": "save the latest paid time */\n\t\t\tm_latestPa", "debug": "", "description": "In the function `performPayouts()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 109, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 1620, "code": "save the latest paid time */\n\t\t\tm_latestPa", "debug": "", "description": "A possible transaction order independence vulnerability exists in function performPayouts(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 109, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1659, "code": "iods, investorsPayout, beneficiarie", "debug": "storage_3: 0x1\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nretval_1350: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ntimestamp: 0x15081\ncalldata_HYIP_0: 0xf0ba96ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `performPayouts()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "performPayouts()", "lineno": 115, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1777, "code": "ntract HYIP {\n\t\n\t/* CONTRACT SETUP */\n\n\tuint constant PAYOUT_INTERVAL = 1 days;\n\n\t/* NB: Solidity doesn't support fixed or floats yet, so we use promille instead of percent */\t\n\tuint constant BENEFICIARIES_INTEREST = 37;\n\tuint constant INVESTORS_INTEREST = 33;\n\tuint constant INTEREST_DENOMINATOR = 1000;\n\n\t/* DATA TYPES */\n\n\t/* the payout happend */\n\tevent Payout(uint paidPeriods, uint investors, uint beneficiaries);\n\t\n\t/* Investor struct: describes a single investor */\n\tstruct Investor\n\t{\t\n\t\taddress etherAddress;\n\t\tuint deposit;\n\t\tuint investmentTime;\n\t}\n\n\t/* FUNCTION MODIFIERS */\n\tmodifier adminOnly { if (msg.sender == m_admin) _; }\n\n\t/* VARIABLE DECLARATIONS */\n\n\t/* the contract owner, the only address that can change beneficiaries */\n\taddress private m_admin;\n\n\t/* the time of last payout */\n\tuint private m_latestPaidTime;\n\n\t/* Array of investors */\n\tInvestor[] private m_investors;\n\n\t/* Array of beneficiaries */\n\taddress[] private m_beneficiaries;\n\t\n\t/* PUBLIC FUNCTIONS */\n\n\t/* contract constructor, sets the admin to the address deployed from and adds benificary */\n\tfunction HYIP() \n\t{\n\t\tm_admin = msg.sender;\n\t\tm_latestPaidTime = now;\t\t\n\t}\n\n\t/* fallback function: called when the contract received plain ether */\n\tfunction() payable\n\t{\n\t\taddInvestor();\n\t}\n\n\tfunction Invest() payable\n\t{\n\t\taddInvestor();\t\n\t}\n\n\tfunction status() constant returns (uint bank, uint investorsCount, uint beneficiariesCount, uint unpaidTime, uint unpaidIntervals)\n\t{\n\t\tbank = this.balance;\n\t\tinvestorsCount = m_investors.length;\n\t\tbeneficiariesCount = m_beneficiaries.length;\n\t\tunpaidTime = now - m_latestPaidTime;\n\t\tunpaidIntervals = unpaidTime / PAYOUT_INTERVAL;\n\t}\n\n\n\t/* checks if it's time to make payouts. if so, send the ether */\n\tfunction performPayouts()\n\t{\n\t\tuint paidPeriods = 0;\n\t\tuint investorsPayout;\n\t\tuint beneficiariesPayout = 0;\n\n\t\twhile(m_latestPaidTime + PAYOUT_INTERVAL < now)\n\t\t{\t\t\t\t\t\t\n\t\t\tuint idx;\n\n\t\t\t/* pay the beneficiaries */\t\t\n\t\t\tif(m_beneficiaries.length > 0) \n\t\t\t{\n\t\t\t\tbeneficiariesPayout = (this.balance * BENEFICIARIES_INTEREST) / INTEREST_DENOMINATOR;\n\t\t\t\tuint eachBeneficiaryPayout = beneficiariesPayout / m_beneficiaries.length;  \n\t\t\t\tfor(idx = 0; idx < m_beneficiaries.length; idx++)\n\t\t\t\t{\n\t\t\t\t\tif(!m_beneficiaries[idx].send(eachBeneficiaryPayout))\n\t\t\t\t\t\tthrow;\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* pay the investors  */\n\t\t\t/* we use reverse iteration here */\n\t\t\tfor (idx = m_investors.length; idx-- > 0; )\n\t\t\t{\n\t\t\t\tif(m_investors[idx].investmentTime > m_latestPaidTime + PAYOUT_INTERVAL)\n\t\t\t\t\tcontinue;\n\t\t\t\tuint payout = (m_investors[idx].deposit * INVESTORS_INTEREST) / INTEREST_DENOMINATOR;\n\t\t\t\tif(!m_investors[idx].etherAddress.send(payout))\n\t\t\t\t\tthrow;\n\t\t\t\tinvestorsPayout += payout;\t\n\t\t\t}\n\t\t\t\n\t\t\t/* save the latest paid time */\n\t\t\tm_latestPaidTime += PAYOUT_INTERVAL;\n\t\t\tpaidPeriods++;\n\t\t}\n\t\t\t\n\t\t/* emit the Payout event */\n\t\tPayout(paidPeriods, investorsPayout, beneficiariesPayout);\n\t}\n\n\t/* PRIVATE FUNCTIONS */\n\tfunction addInvestor() private \n\t{\n\t\tm_investors.push(Investor(msg.sender, msg.value, now));\n\t}\n\n\t/* ADMIN FUNCTIONS */\n\n\t/* pass the admin rights to another address */\n\tfunction changeAdmin(address newAdmin) adminOnly \n\t{\n\t\tm_admin = newAdmin;\n\t}\n\n\t/* add one more benificiary to the list */\n\tfunction addBeneficiary(address beneficiary) adminOnly\n\t{\n\t\tm_beneficiaries.push(beneficiary);\n\t}\n\n\n\t/* reset beneficiary list */\n\tfunction resetBeneficiaryList() adminOnly\n\t{\n\t\tdelete m_beneficiaries;\n\t}\n\t\n}", "debug": "storage_3: 0xbef070f461f6cbff87ff05daf070bc6bd9fce70000000000000070199cee39f0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_HYIP_0: 0x61c7623100000000000000000000000000000000000000000000000000000000\ncalldatasize_HYIP: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `resetBeneficiaryList()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x4fb663c1616bfe80b5b6d5a214efa81d5a121801.sol", "function": "resetBeneficiaryList()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}