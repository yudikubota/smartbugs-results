{
  "contract": "0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef",
  "tool": "mythril",
  "start": 1563722479.2443633,
  "end": 1563722857.5797093,
  "duration": 378.33534598350525,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1119,
        "code": "\n    {\n        _nameAddressMap[name] = msg.sender;\n        _addressNameMap[msg.sender] = name;\n\n        overStage(1);\n        overStage(5);\n        overStage(10);\n    }\n\n    function getName()\n    external\n    view\n    returns (string)\n    {\n        return _addressNameMap[msg.sender];",
        "debug": "calldata_HourglassInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_HourglassInterface_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "setName(string)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1125,
        "code": "\n    {\n        _nameAddressMap[name] = msg.sender;\n        _addressNameMap[msg.sender] = name;\n\n        overStage(1);\n        overStage(5);\n        overStage(10);\n    }\n\n    function getName()\n    external\n    view\n    returns (string)\n    {\n        return _addressNameMap[msg.sender];",
        "debug": "calldata_HourglassInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_HourglassInterface_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "setName(string)",
        "lineno": 110,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5771,
        "debug": "storage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112_-\n1: 0x300\ncalldata_HourglassInterface_0: 0xf2e7514c00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x16345785d8a0000\n",
        "description": "A possible integer overflow exists in the function `buyByName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "buyByName(string)",
        "lineno": 363,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5918,
        "code": "lock.number;\n        }\n    }\n\n    ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0 +\nkeccac_1_+\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112_-\n1: 0x300\nstorage_0 +\nkeccac_storage_81222191986226809103279119994707868322855741819905904417953092666699096963112_-\n1: 0x300\ncalldata_HourglassInterface_0: 0xf2e7514c00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x16345785d8a0000\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "buyByName(string)",
        "lineno": 282,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6294,
        "code": "age.blocknumber != 0);\n\n        if (block",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\nstorage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x1\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 302,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6378,
        "code": "8(blockhash(finishStage.block",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nstorage_85426430417629065094416354204759824138421034596491288875995521273381143693621: 0xffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffe\nstorage_2 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0xff00\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\nstorage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 308,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6432,
        "code": "playerMap[deadIndex];\n            em",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nstorage_85426430417629065094416354204759824138421034596491288875995521273381143693621: 0xffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffe\nstorage_0 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x300\nstorage_2 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\nstorage_1 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nstorage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 309,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6443,
        "code": "r(deadPlayer, rate",
        "debug": "storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nstorage_85426430417629065094416354204759824138421034596491288875995521273381143693621: 0xffffffffffffffffffffffffffffffffffffffffffffffffffeffffffffffffe\nblock_number: 0xff\nstorage_1 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x300\nstorage_2 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\nstorage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdraw()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 310,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6851,
        "code": "            if (dividends > 0) {\n    ",
        "debug": "storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x2288880000000000000000000018300000000000000000001\nstorage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x80000000000000000000000000000000000000000000000000000003fffffffc\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_0,_256): 0xfffffffffffffffffffffffffffffffffffffffffffffffffe9ffefff3fb0000\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xfffffffffffffa79cc237fffffffffc00000000000ecfef40000000000000000\nblock_number: 0x80000000000000000000000000000000000000000000000000000000000000e0\nblockhash_block_storage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x2\nstorage_0 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x300\nstorage_2 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 326,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7038,
        "code": "    }\n\n            p3dContract.buy.value(P",
        "debug": "storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x1\nstorage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0xff80000008000000000000000000000000000800000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(130000000000000000_+\n_____storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_0,_256),\n_____256): 0xfffffffffffffffffffffffffffffffffffffffffffffffffff7ffc410730000\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xffc0000000000000000000000000000000000000000000000000000000000000\nblock_number: 0x40000000000000000000000000000000000000000000000000000000000110\nblockhash_block_storage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x4c\nstorage_0 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x300\nstorage_2 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 329,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7127,
        "code": "dress(OFFICIAL_P3D));\n\n        } else {\n\n    ",
        "debug": "storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0xc8a0000034020401480000000000000000000000000000000000040000000000\nstorage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0xffffffffffffbfffff7e000000000000000000000000000000000000000000d0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(130000000000000000_+\n_____storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_0,_256),\n_____256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffe6e38a7d340000\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0xeb0c5ed40ce93e64adffffffefeffffbefffc00000000000000003ffffeffffe\nblock_number: 0x20000000000000000000000000000000000000000010\nblockhash_block_storage_1 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x56\nstorage_0 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x300\nstorage_2 +\nkeccac_storage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 331,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8008,
        "code": "geIndex = _currentMap[rate];\n        if (_stageMap[",
        "debug": "storage_1 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x400000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_0,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffff0fc0401e3e0000\nstorage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x40004400000000000000000000010104110480010000040111\nstorage_85426430417629065094416354204759824138421034596491288875995521273381143693621: 0x800000000000003fff22bc3efffffffffffffffdc79703e8f930e17fb70378ae\nblock_number: 0x400101\nstorage_0 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x300\nstorage_2 +\nkeccac_storage_86765172452063108397856903224091897645179689411002400514952775293542238425995: 0x0\nretval_2164: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HourglassInterface_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\nstorage_28212876883947467128917703474378516019173305230661588919942657668795042982449: 0x0\nstorage_81222191986226809103279119994707868322855741819905904417953092666699096963112: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "withdraw()",
        "lineno": 350,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8254,
        "code": "ntract Brave3d {\n\n    struct Stage {\n        uint8 cnt;\n        uint256 blocknumber;\n        bool isFinish;\n        uint8 deadIndex;\n        mapping(uint8 => address) playerMap;\n    }\n\n\n    HourglassInterface constant p3dContract = HourglassInterface(0xB3775fB83F7D12A36E0475aBdD1FCA35c091efBe);\n\n    address constant private  OFFICIAL = 0x97397C2129517f82031a28742247465BC75E1849;\n    address constant private  OFFICIAL_P3D = 0x97397C2129517f82031a28742247465BC75E1849;\n\n    uint8 constant private MAX_PLAYERS = 3;\n    uint256 constant private PRICE = 0.1 ether;\n    uint256 constant private P3D_VALUE = 0.019 ether;\n    uint256 constant private REFEREE_VALUE = 0.007 ether;\n    uint256 constant private  WIN_VALUE = 0.13 ether;\n\n    mapping(address => uint256) private _valueMap;\n    mapping(address => uint256) private _referredMap;\n    mapping(address => address) private _addressMap;\n    mapping(string => address)  private _nameAddressMap;\n    mapping(address => string)  private _addressNameMap;\n\n    mapping(uint8 => mapping(uint256 => Stage)) private _stageMap;\n    mapping(uint8 => uint256) private _finishMap;\n    mapping(uint8 => uint256) private _currentMap;\n\n    event BravePlayer(address indexed player, uint8 rate);\n    event BraveDeadPlayer(address indexed deadPlayer, uint8 rate);\n    event BraveWithdraw(address indexed player, uint256 indexed amount);\n    event BraveInvalidateStage(uint256 indexed stage, uint8 rate);\n\n\n    modifier hasEarnings()\n    {\n        require(_valueMap[msg.sender] > 0);\n        _;\n    }\n\n    modifier isExistsOfNameAddressMap(string name){\n        require(_nameAddressMap[name]==0);\n        _;\n    }\n\n    modifier isExistsOfAddressNameMap(){\n        require(bytes(_addressNameMap[msg.sender]).length<=0);\n        _;\n    }\n\n    constructor()\n    public\n    {\n        _stageMap[1][0] = Stage(0, 0, false, 0);\n        _stageMap[5][0] = Stage(0, 0, false, 0);\n        _stageMap[10][0] = Stage(0, 0, false, 0);\n\n        _currentMap[1] = 1;\n        _currentMap[5] = 1;\n        _currentMap[10] = 1;\n\n        _finishMap[1] = 0;\n        _finishMap[5] = 0;\n        _finishMap[10] = 0;\n\n        _nameAddressMap[\"\"] = OFFICIAL;\n    }\n\n    function() external payable {}\n\n    function buyByAddress(address referee)\n    external\n    payable\n    {\n        uint8 rate = 1;\n        if (msg.value == PRICE) {\n            rate = 1;\n        } else if (msg.value == PRICE * 5) {\n            rate = 5;\n        } else if (msg.value == PRICE * 10) {\n            rate = 10;\n        } else {\n            require(false);\n        }\n\n        resetStage(rate);\n\n        buy(rate);\n\n        overStage(rate);\n\n        if (_addressMap[msg.sender] == 0) {\n            if (referee != 0x0000000000000000000000000000000000000000 && referee != msg.sender && _valueMap[referee] > 0) {\n                _addressMap[msg.sender] = referee;\n            } else {\n                _addressMap[msg.sender] = OFFICIAL;\n            }\n        }\n    }\n\n    function setName(string name)\n    external\n    isExistsOfNameAddressMap(name)\n    isExistsOfAddressNameMap\n    {\n        _nameAddressMap[name] = msg.sender;\n        _addressNameMap[msg.sender] = name;\n\n        overStage(1);\n        overStage(5);\n        overStage(10);\n    }\n\n    function getName()\n    external\n    view\n    returns (string)\n    {\n        return _addressNameMap[msg.sender];\n    }\n\n\n    function buyByName(string name)\n    external\n    payable\n    {\n        uint8 rate = 1;\n        if (msg.value == PRICE) {\n            rate = 1;\n        } else if (msg.value == PRICE * 5) {\n            rate = 5;\n        } else if (msg.value == PRICE * 10) {\n            rate = 10;\n        } else {\n            require(false);\n        }\n\n        resetStage(rate);\n\n        buy(rate);\n\n        overStage(rate);\n\n        if (_addressMap[msg.sender] == 0) {\n\n            if (_nameAddressMap[name] == 0) {\n\n                _addressMap[msg.sender] = OFFICIAL;\n\n            } else {\n\n                address referee = _nameAddressMap[name];\n                if (referee != 0x0000000000000000000000000000000000000000 && referee != msg.sender && _valueMap[referee] > 0) {\n\n                    _addressMap[msg.sender] = referee;\n                } else {\n\n                    _addressMap[msg.sender] = OFFICIAL;\n                }\n            }\n        }\n    }\n\n\n    function buyFromValue(uint8 rate)\n    external\n    {\n        require(rate == 1 || rate == 5 || rate == 10);\n        require(_valueMap[msg.sender] >= PRICE * rate);\n\n        resetStage(rate);\n\n        _valueMap[msg.sender] -= PRICE * rate;\n\n        buy(rate);\n\n        overStage(rate);\n    }\n\n    function withdraw()\n    external\n    hasEarnings\n    {\n\n        uint256 amount = _valueMap[msg.sender];\n        _valueMap[msg.sender] = 0;\n\n        emit BraveWithdraw(msg.sender, amount);\n\n        msg.sender.transfer(amount);\n\n        overStage(1);\n        overStage(5);\n        overStage(10);\n    }\n\n    function myEarnings()\n    external\n    view\n    hasEarnings\n    returns (uint256)\n    {\n        return _valueMap[msg.sender];\n    }\n\n    function getEarnings(address adr)\n    external\n    view\n    returns (uint256)\n    {\n        return _valueMap[adr];\n    }\n\n    function myReferee()\n    external\n    view\n    returns (uint256)\n    {\n        return _referredMap[msg.sender];\n    }\n\n    function getReferee(address adr)\n    external\n    view\n    returns (uint256)\n    {\n        return _referredMap[adr];\n    }\n\n    function getRefereeAddress(address adr)\n    external\n    view\n    returns (address)\n    {\n        return _addressMap[adr];\n    }\n\n    function currentStageData(uint8 rate)\n    external\n    view\n    returns (uint256, uint256)\n    {\n        require(rate == 1 || rate == 5 || rate == 10);\n        uint256 curIndex = _currentMap[rate];\n        return (curIndex, _stageMap[rate][curIndex - 1].cnt);\n    }\n\n    function getStageData(uint8 rate, uint256 index)\n    external\n    view\n    returns (address, address, address, bool, uint8)\n    {\n        require(rate == 1 || rate == 5 || rate == 10);\n        require(_finishMap[rate] >= index - 1);\n\n        Stage storage finishStage = _stageMap[rate][index - 1];\n\n        return (finishStage.playerMap[0], finishStage.playerMap[1], finishStage.playerMap[2], finishStage.isFinish, finishStage.deadIndex);\n    }\n\n    function buy(uint8 rate)\n    private\n    {\n        Stage storage curStage = _stageMap[rate][_currentMap[rate] - 1];\n\n        assert(curStage.cnt < MAX_PLAYERS);\n\n        address player = msg.sender;\n\n        curStage.playerMap[curStage.cnt] = player;\n        curStage.cnt++;\n\n        emit BravePlayer(player, rate);\n\n        if (curStage.cnt == MAX_PLAYERS) {\n            curStage.blocknumber = block.number;\n        }\n    }\n\n    function overStage(uint8 rate)\n    private\n    {\n        uint256 curStageIndex = _currentMap[rate];\n        uint256 finishStageIndex = _finishMap[rate];\n\n        assert(curStageIndex >= finishStageIndex);\n\n        if (curStageIndex == finishStageIndex) {return;}\n\n        Stage storage finishStage = _stageMap[rate][finishStageIndex];\n\n        assert(!finishStage.isFinish);\n\n        if (finishStage.cnt < MAX_PLAYERS) {return;}\n\n        assert(finishStage.blocknumber != 0);\n\n        if (block.number - 256 <= finishStage.blocknumber) {\n\n            if (block.number == finishStage.blocknumber) {return;}\n\n            uint8 deadIndex = uint8(blockhash(finishStage.blocknumber)) % MAX_PLAYERS;\n            address deadPlayer = finishStage.playerMap[deadIndex];\n            emit BraveDeadPlayer(deadPlayer, rate);\n            finishStage.deadIndex = deadIndex;\n\n            for (uint8 i = 0; i < MAX_PLAYERS; i++) {\n                address player = finishStage.playerMap[i];\n                if (deadIndex != i) {\n                    _valueMap[player] += WIN_VALUE * rate;\n                }\n\n                address referee = _addressMap[player];\n                _valueMap[referee] += REFEREE_VALUE * rate;\n                _referredMap[referee] += REFEREE_VALUE * rate;\n            }\n\n\n            uint256 dividends = p3dContract.myDividends(true);\n            if (dividends > 0) {\n                p3dContract.withdraw();\n                _valueMap[deadPlayer] += dividends;\n            }\n\n            p3dContract.buy.value(P3D_VALUE * rate)(address(OFFICIAL_P3D));\n\n        } else {\n\n            for (uint8 j = 0; j < MAX_PLAYERS; j++) {\n                _valueMap[finishStage.playerMap[j]] += PRICE * rate;\n            }\n\n            emit BraveInvalidateStage(finishStageIndex, rate);\n        }\n\n        finishStage.isFinish = true;\n        finishStageIndex++;\n        _finishMap[rate] = finishStageIndex;\n    }\n\n    function resetStage(uint8 rate)\n    private\n    {\n        uint256 curStageIndex = _currentMap[rate];\n        if (_stageMap[rate][curStageIndex - 1].cnt == MAX_PLAYERS) {\n            _stageMap[rate][curStageIndex] = Stage(0, 0, false, 0);\n            curStageIndex++;\n            _currentMap[rate] = curStageIndex;\n        }\n    }\n}\n\ninterface HourglassInterface {\n    function buy(address _playerAddress) payable external returns (uint256);\n    function withdraw() external;\n    function myDividends(bool _includeReferralBonus) external view returns (uint256);\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_HourglassInterface_4 + calldata_HourglassInterface_4: 0x28\ncalldata_HourglassInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd0\nstorage_KECCAC_mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_HourglassInterface_4 + calldata_HourglassInterface_4))): 0x0\ncalldata_HourglassInterface_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_HourglassInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/38/0x2df5be73b0bf30e1dcb65460ee7e6f6617d709ef.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}