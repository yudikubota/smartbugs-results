{"error": null, "issues": [{"address": 210, "code": "eturn coinIds;\n  }\n\n  function getCoinInfoFromId(uint16 coinId) public view retu", "debug": "storage_6: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_PumpAndDump_0: 0x168b623100000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinIds()", "lineno": 62, "title": "Integer Overflow ", "type": "Warning"}, {"address": 423, "code": "ublic payable {\n    require(msg.value >= newCoinFee);\n    require(id < 17576); // 26*26*26\n    require(bytes(name).length > 0);\n    require(isCoinIdUnique(id));\n    devFees += msg.value - defaultCoinPrice;\n    coins[id].exists = true;\n    coins[id].name = name;\n    coins[id].price = defaultCoinPrice;\n    coins[id].marketValue = defaultCoinPrice;\n    coins[id].investors.push(msg.sender);\n    coinIds.push(id);\n    newCoinFee += newCoinFeeIncrease;\n  }\n\n  function getCoinIds() public view returns (uint16[]) {", "debug": "calldata_PumpAndDump_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `createCoin(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 785, "code": "tring, uint, uint, address[]) {\n    return (\n      coins[coinId].name,\n      coins[coinId].price,\n      coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex) priv", "debug": "storage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x20\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               Concat(0,\n                      ~(~Extract(255,\n                                 1,\n                                 115792089237316195423570985008687907853269984665640564039457584007913129639935 +\n                                 256*\n                                 If(Extract(0,\n                                        0,\n                                        storage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4) ==\n                                    0,\n                                    1,\n                                    0)) |\n                        ~Extract(255,\n                                 1,\n                                 storage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4))))): 0x80000007bdf1f07c100000000f8787c1f001ef7e1083def83be1ce80041f41c0\ncalldata_PumpAndDump_0: 0xe9922f1200000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\nstorage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinInfoFromId(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinInfoFromId(uint16)", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 886, "code": "Id) public vie", "debug": "storage_6: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_PumpAndDump_0: 0x168b623100000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinIds()", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 888, "code": "Id) public vie", "debug": "storage_6: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_PumpAndDump_0: 0x168b623100000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinIds()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinIds()", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1295, "code": "der);\n    uint amount = (msg.value * 99) / 100;\n    d", "debug": "storage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncallvalue: 0x0\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff00\nstorage_2 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x0\ncalldata_PumpAndDump_0: 0x4c2db6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `buyCoin(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "buyCoin(uint16)", "lineno": 98, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1297, "code": "der);\n    uint amount = (msg.value * 99) / 100;\n    d", "debug": "storage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncallvalue: 0x0\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff00\nstorage_2 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x0\ncalldata_PumpAndDump_0: 0x4c2db6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `buyCoin(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "buyCoin(uint16)", "lineno": 98, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1541, "code": "\n    coins[coi", "debug": "callvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x1\ncaller: 0x0\nstorage_keccac_4_+_keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff00\nstorage_2 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PumpAndDump_0: 0x4c2db6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `buyCoin(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "buyCoin(uint16)", "lineno": 101, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1654, "code": "vestorIndex) private {\n    uint value = ", "debug": "storage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x1\nstorage_4: 0x987fffffefc001000100000002000000000000000000042240000000024080a0\nstorage_2 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x87a0000010400000000000000600000000000000000000000007fffffe040050\ncaller: 0x0\nstorage_keccac_4_+_keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff00\ncallvalue: 0x87a0000010400000000000000600000000000000000000000007fffffe040050\ncalldata_PumpAndDump_0: 0x4c2db6d800000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `buyCoin(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "buyCoin(uint16)", "lineno": 105, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1839, "debug": "", "description": "A possible transaction order independence vulnerability exists in function collectDevFees(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "collectDevFees()", "lineno": 149, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2051, "code": " = true;\n    coins[id].name ", "debug": "storage_6: 0x1\ncallvalue: 0x0\nstorage_3: 0x1\nstorage_111414077815863400510004064629973595961579173665589224203503662149373724986687: 0xbb5800\ncalldata_PumpAndDump_4 + calldata_PumpAndDump_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PumpAndDump_4: 0x44a7\nstorage_1: 0x0\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer underflow exists in the function `createCoin(uint16,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 52, "title": "Integer Underflow", "type": "Warning"}, {"address": 2059, "code": "[id].exists = true;\n    coins[id].name ", "debug": "storage_3: 0x20be802000000000000000000000000000000000000000000000000000000080\ncallvalue: 0x5d8061000000000000000000000000000000000000000000000000000000023\nstorage_6: 0x1\nstorage_5: 0xd1cc4d8bffffffdffffffffff7ffe00000000000000000000000000000000027\nstorage_111414077815863400510004064629973595961579173665589224203503662149373724986687: 0xbb5800\ncalldata_PumpAndDump_4 + calldata_PumpAndDump_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PumpAndDump_4: 0x44a7\nstorage_1: 0x5d8061000000000000000000000000000000000000000000000000000000023\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `createCoin(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 52, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3114, "code": "   coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex", "debug": "storage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x20\nstorage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x800001f0842ba1ef7be0000000007c5d201c7813e45f105c1c9364d54b80000\ncalldata_PumpAndDump_0: 0xe9922f1200000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinInfoFromId(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinInfoFromId(uint16)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3116, "code": "   coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex", "debug": "storage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x20\nstorage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PumpAndDump_0: 0xe9922f1200000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getCoinInfoFromId(uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "getCoinInfoFromId(uint16)", "lineno": 69, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4352, "code": "}\n\n  function isSenderInvestor(address sender, address[] investors) ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_keccac_4_+_keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4 +\n0: 0x0\nstorage_0 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff00\ncalldata_PumpAndDump_0: 0xd4d2af8d00000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "sellCoin(uint16)", "lineno": 83, "title": "Exception state", "type": "Informational"}, {"address": 4404, "code": "ntract PumpAndDump {\n\n  address owner;\n  uint newCoinFee = 0.005 ether;\n  uint newCoinFeeIncrease = 0.001 ether;\n  uint defaultCoinPrice = 0.001 ether;\n  uint coinPriceIncrease = 0.0001 ether;\n  uint devFees = 0;\n  uint16[] coinIds;\n\n  struct Coin {\n    bool exists;\n    string name;\n    uint price;\n    uint marketValue;\n    address[] investors;\n  }\n\n  mapping (uint16 => Coin) coins;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function kill() external {\n    require(msg.sender == owner);\n    selfdestruct(owner);\n  }\n\n  function getNewCoinFee() public constant returns (uint) {\n    return newCoinFee;\n  }\n\n  function isCoinIdUnique(uint16 newId) private constant returns (bool) {\n    for (uint i = 0; i < coinIds.length; i++) {\n      if (coinIds[i] == newId) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  function createCoin(uint16 id, string name) public payable {\n    require(msg.value >= newCoinFee);\n    require(id < 17576); // 26*26*26\n    require(bytes(name).length > 0);\n    require(isCoinIdUnique(id));\n    devFees += msg.value - defaultCoinPrice;\n    coins[id].exists = true;\n    coins[id].name = name;\n    coins[id].price = defaultCoinPrice;\n    coins[id].marketValue = defaultCoinPrice;\n    coins[id].investors.push(msg.sender);\n    coinIds.push(id);\n    newCoinFee += newCoinFeeIncrease;\n  }\n\n  function getCoinIds() public view returns (uint16[]) {\n    return coinIds;\n  }\n\n  function getCoinInfoFromId(uint16 coinId) public view returns (string, uint, uint, address[]) {\n    return (\n      coins[coinId].name,\n      coins[coinId].price,\n      coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex) private view returns (uint) {\n      uint numInvestors = coins[coinId].investors.length;\n      // If this is the most recent investor\n      if (numInvestors == userIndex + 1) {\n        return coins[coinId].price;\n      } else {\n        uint numShares = (numInvestors * (numInvestors + 1)) / 2;\n        return ((numInvestors - userIndex) * coins[coinId].marketValue) / numShares;\n      }\n  }\n\n  function isSenderInvestor(address sender, address[] investors) private pure returns (bool) {\n    for (uint i = 0; i < investors.length; i++) {\n      if (investors[i] == sender) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function buyCoin(uint16 coinId) public payable {\n    require(msg.value >= coins[coinId].price);\n    require(coins[coinId].exists);\n    require(!isSenderInvestor(msg.sender, coins[coinId].investors));\n    coins[coinId].investors.push(msg.sender);\n    uint amount = (msg.value * 99) / 100;\n    devFees += msg.value - amount;\n    coins[coinId].marketValue += amount;\n    coins[coinId].price += coinPriceIncrease;\n  }\n\n  function payAndRemoveInvestor(uint16 coinId, uint investorIndex) private {\n    uint value = getUserCoinMarketValue(coinId, investorIndex);\n    coins[coinId].investors[investorIndex].transfer(value);\n    coins[coinId].price -= coinPriceIncrease;\n    coins[coinId].marketValue -= value;\n    if (coins[coinId].investors.length == 1) {\n      delete coins[coinId].investors[0];\n    } else {\n      uint secondLastIndex = coins[coinId].investors.length - 1;\n      for (uint j = investorIndex; j < secondLastIndex; j++) {\n        coins[coinId].investors[j] = coins[coinId].investors[j - 1];\n      }\n    }\n    coins[coinId].investors.length -= 1;\n  }\n\n  function sellCoin(uint16 coinId) public {\n    bool senderIsInvestor = false;\n    uint investorIndex = 0;\n    require(coins[coinId].exists);\n    for (uint i = 0; i < coins[coinId].investors.length; i++) {\n      if (coins[coinId].investors[i] == msg.sender) {\n        senderIsInvestor = true;\n        investorIndex = i;\n        break;\n      }\n    }\n    require(senderIsInvestor);\n    payAndRemoveInvestor(coinId, investorIndex);\n  }\n\n  function getDevFees() public view returns (uint) {\n    require(msg.sender == owner);\n    return devFees;\n  }\n\n  function collectDevFees() public {\n    require(msg.sender == owner);\n    owner.transfer(devFees);\n    devFees = 0;\n  }\n\n  function() public payable {}\n\n}", "debug": "keccac_1_+_keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 + keccac_65535_&_65535_&_65535_&_calldata_PumpAndDump_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncallvalue: 0x0\ncalldata_PumpAndDump_4 + calldata_PumpAndDump_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PumpAndDump_4: 0x44a7\nstorage_1: 0x0\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\nstorage_6: 0x0\n", "description": "A possible integer overflow exists in the function `createCoin(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4433, "code": "ntract PumpAndDump {\n\n  address owner;\n  uint newCoinFee = 0.005 ether;\n  uint newCoinFeeIncrease = 0.001 ether;\n  uint defaultCoinPrice = 0.001 ether;\n  uint coinPriceIncrease = 0.0001 ether;\n  uint devFees = 0;\n  uint16[] coinIds;\n\n  struct Coin {\n    bool exists;\n    string name;\n    uint price;\n    uint marketValue;\n    address[] investors;\n  }\n\n  mapping (uint16 => Coin) coins;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function kill() external {\n    require(msg.sender == owner);\n    selfdestruct(owner);\n  }\n\n  function getNewCoinFee() public constant returns (uint) {\n    return newCoinFee;\n  }\n\n  function isCoinIdUnique(uint16 newId) private constant returns (bool) {\n    for (uint i = 0; i < coinIds.length; i++) {\n      if (coinIds[i] == newId) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  function createCoin(uint16 id, string name) public payable {\n    require(msg.value >= newCoinFee);\n    require(id < 17576); // 26*26*26\n    require(bytes(name).length > 0);\n    require(isCoinIdUnique(id));\n    devFees += msg.value - defaultCoinPrice;\n    coins[id].exists = true;\n    coins[id].name = name;\n    coins[id].price = defaultCoinPrice;\n    coins[id].marketValue = defaultCoinPrice;\n    coins[id].investors.push(msg.sender);\n    coinIds.push(id);\n    newCoinFee += newCoinFeeIncrease;\n  }\n\n  function getCoinIds() public view returns (uint16[]) {\n    return coinIds;\n  }\n\n  function getCoinInfoFromId(uint16 coinId) public view returns (string, uint, uint, address[]) {\n    return (\n      coins[coinId].name,\n      coins[coinId].price,\n      coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex) private view returns (uint) {\n      uint numInvestors = coins[coinId].investors.length;\n      // If this is the most recent investor\n      if (numInvestors == userIndex + 1) {\n        return coins[coinId].price;\n      } else {\n        uint numShares = (numInvestors * (numInvestors + 1)) / 2;\n        return ((numInvestors - userIndex) * coins[coinId].marketValue) / numShares;\n      }\n  }\n\n  function isSenderInvestor(address sender, address[] investors) private pure returns (bool) {\n    for (uint i = 0; i < investors.length; i++) {\n      if (investors[i] == sender) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function buyCoin(uint16 coinId) public payable {\n    require(msg.value >= coins[coinId].price);\n    require(coins[coinId].exists);\n    require(!isSenderInvestor(msg.sender, coins[coinId].investors));\n    coins[coinId].investors.push(msg.sender);\n    uint amount = (msg.value * 99) / 100;\n    devFees += msg.value - amount;\n    coins[coinId].marketValue += amount;\n    coins[coinId].price += coinPriceIncrease;\n  }\n\n  function payAndRemoveInvestor(uint16 coinId, uint investorIndex) private {\n    uint value = getUserCoinMarketValue(coinId, investorIndex);\n    coins[coinId].investors[investorIndex].transfer(value);\n    coins[coinId].price -= coinPriceIncrease;\n    coins[coinId].marketValue -= value;\n    if (coins[coinId].investors.length == 1) {\n      delete coins[coinId].investors[0];\n    } else {\n      uint secondLastIndex = coins[coinId].investors.length - 1;\n      for (uint j = investorIndex; j < secondLastIndex; j++) {\n        coins[coinId].investors[j] = coins[coinId].investors[j - 1];\n      }\n    }\n    coins[coinId].investors.length -= 1;\n  }\n\n  function sellCoin(uint16 coinId) public {\n    bool senderIsInvestor = false;\n    uint investorIndex = 0;\n    require(coins[coinId].exists);\n    for (uint i = 0; i < coins[coinId].investors.length; i++) {\n      if (coins[coinId].investors[i] == msg.sender) {\n        senderIsInvestor = true;\n        investorIndex = i;\n        break;\n      }\n    }\n    require(senderIsInvestor);\n    payAndRemoveInvestor(coinId, investorIndex);\n  }\n\n  function getDevFees() public view returns (uint) {\n    require(msg.sender == owner);\n    return devFees;\n  }\n\n  function collectDevFees() public {\n    require(msg.sender == owner);\n    owner.transfer(devFees);\n    devFees = 0;\n  }\n\n  function() public payable {}\n\n}", "debug": "storage_6: 0x1\ncalldata_PumpAndDump_4 + calldata_PumpAndDump_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\nstorage_111414077815863400510004064629973595961579173665589224203503662149373724986687: 0xbb5800\ncalldata_PumpAndDump_4: 0x44a7\nstorage_1: 0x0\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\n", "description": "A possible integer overflow exists in the function `createCoin(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4447, "code": "ntract PumpAndDump {\n\n  address owner;\n  uint newCoinFee = 0.005 ether;\n  uint newCoinFeeIncrease = 0.001 ether;\n  uint defaultCoinPrice = 0.001 ether;\n  uint coinPriceIncrease = 0.0001 ether;\n  uint devFees = 0;\n  uint16[] coinIds;\n\n  struct Coin {\n    bool exists;\n    string name;\n    uint price;\n    uint marketValue;\n    address[] investors;\n  }\n\n  mapping (uint16 => Coin) coins;\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  function kill() external {\n    require(msg.sender == owner);\n    selfdestruct(owner);\n  }\n\n  function getNewCoinFee() public constant returns (uint) {\n    return newCoinFee;\n  }\n\n  function isCoinIdUnique(uint16 newId) private constant returns (bool) {\n    for (uint i = 0; i < coinIds.length; i++) {\n      if (coinIds[i] == newId) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n\n  function createCoin(uint16 id, string name) public payable {\n    require(msg.value >= newCoinFee);\n    require(id < 17576); // 26*26*26\n    require(bytes(name).length > 0);\n    require(isCoinIdUnique(id));\n    devFees += msg.value - defaultCoinPrice;\n    coins[id].exists = true;\n    coins[id].name = name;\n    coins[id].price = defaultCoinPrice;\n    coins[id].marketValue = defaultCoinPrice;\n    coins[id].investors.push(msg.sender);\n    coinIds.push(id);\n    newCoinFee += newCoinFeeIncrease;\n  }\n\n  function getCoinIds() public view returns (uint16[]) {\n    return coinIds;\n  }\n\n  function getCoinInfoFromId(uint16 coinId) public view returns (string, uint, uint, address[]) {\n    return (\n      coins[coinId].name,\n      coins[coinId].price,\n      coins[coinId].marketValue,\n      coins[coinId].investors\n    );\n  }\n\n  function getUserCoinMarketValue(uint16 coinId, uint userIndex) private view returns (uint) {\n      uint numInvestors = coins[coinId].investors.length;\n      // If this is the most recent investor\n      if (numInvestors == userIndex + 1) {\n        return coins[coinId].price;\n      } else {\n        uint numShares = (numInvestors * (numInvestors + 1)) / 2;\n        return ((numInvestors - userIndex) * coins[coinId].marketValue) / numShares;\n      }\n  }\n\n  function isSenderInvestor(address sender, address[] investors) private pure returns (bool) {\n    for (uint i = 0; i < investors.length; i++) {\n      if (investors[i] == sender) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  function buyCoin(uint16 coinId) public payable {\n    require(msg.value >= coins[coinId].price);\n    require(coins[coinId].exists);\n    require(!isSenderInvestor(msg.sender, coins[coinId].investors));\n    coins[coinId].investors.push(msg.sender);\n    uint amount = (msg.value * 99) / 100;\n    devFees += msg.value - amount;\n    coins[coinId].marketValue += amount;\n    coins[coinId].price += coinPriceIncrease;\n  }\n\n  function payAndRemoveInvestor(uint16 coinId, uint investorIndex) private {\n    uint value = getUserCoinMarketValue(coinId, investorIndex);\n    coins[coinId].investors[investorIndex].transfer(value);\n    coins[coinId].price -= coinPriceIncrease;\n    coins[coinId].marketValue -= value;\n    if (coins[coinId].investors.length == 1) {\n      delete coins[coinId].investors[0];\n    } else {\n      uint secondLastIndex = coins[coinId].investors.length - 1;\n      for (uint j = investorIndex; j < secondLastIndex; j++) {\n        coins[coinId].investors[j] = coins[coinId].investors[j - 1];\n      }\n    }\n    coins[coinId].investors.length -= 1;\n  }\n\n  function sellCoin(uint16 coinId) public {\n    bool senderIsInvestor = false;\n    uint investorIndex = 0;\n    require(coins[coinId].exists);\n    for (uint i = 0; i < coins[coinId].investors.length; i++) {\n      if (coins[coinId].investors[i] == msg.sender) {\n        senderIsInvestor = true;\n        investorIndex = i;\n        break;\n      }\n    }\n    require(senderIsInvestor);\n    payAndRemoveInvestor(coinId, investorIndex);\n  }\n\n  function getDevFees() public view returns (uint) {\n    require(msg.sender == owner);\n    return devFees;\n  }\n\n  function collectDevFees() public {\n    require(msg.sender == owner);\n    owner.transfer(devFees);\n    devFees = 0;\n  }\n\n  function() public payable {}\n\n}", "debug": "calldata_PumpAndDump_4 + calldata_PumpAndDump_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60\ncallvalue: 0x0\ncalldata_PumpAndDump_4: 0x44a7\nstorage_1: 0x0\ncalldata_PumpAndDump_0: 0xad9657f400000000000000000000000000000000000000000000000000000000\ncalldatasize_PumpAndDump: 0x4\nstorage_6: 0x0\n", "description": "A possible integer overflow exists in the function `createCoin(uint16,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x59670e7f172eafea08f44a308158c65e314a0df9.sol", "function": "createCoin(uint16,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}