{
  "contract": "0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c",
  "tool": "mythril",
  "start": 1563801797.3373854,
  "end": 1563801811.9444494,
  "duration": 14.607064008712769,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 565,
        "code": " { x := e",
        "debug": "",
        "description": "Function enter(bytes32,bytes8) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "enter(bytes32,bytes8)",
        "lineno": 78,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 941,
        "code": "ree(bytes",
        "debug": "",
        "description": "Function enter(bytes32,bytes8) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "enter(bytes32,bytes8)",
        "lineno": 59,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 1183,
        "code": "\n    // R",
        "debug": "",
        "description": "Function enter(bytes32,bytes8) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "enter(bytes32,bytes8)",
        "lineno": 414,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 1407,
        "code": "  // Init",
        "debug": "",
        "description": "Function enter(bytes32,bytes8) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "enter(bytes32,bytes8)",
        "lineno": 421,
        "title": "Use of tx.origin",
        "type": "Warning"
      },
      {
        "address": 1825,
        "code": "(THECYBERADDRESS_).getMemberInformation(i + 1);\n      if (mem",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "assignAll()",
        "lineno": 435,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1825,
        "code": "(THECYBERADDRESS_).getMemberInformation(i + 1);\n      if (mem",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2099\nCall at address: 2099\n",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "assignAll()",
        "lineno": 435,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2099,
        "code": "ssigneeIndex_ = i;\n    if (nextAssigneeIndex_ >= MAXENTRANTS_) ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "assignAll()",
        "lineno": 445,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2688,
        "code": "}\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "assignAll()",
        "lineno": 461,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2771,
        "code": "Entrants are assigned mem",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_theCyberInterface_4: 0x0\nstorage_1: 0x0\ncalldata_theCyberInterface_0: 0xe7b4e5ab00000000000000000000000000000000000000000000000000000000\ncalldatasize_theCyberInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/32/0xbb902569a997d657e8d10b82ce0ec5a5983c8c7c.sol",
        "function": "_function_0xe7b4e5ab",
        "lineno": 36,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}