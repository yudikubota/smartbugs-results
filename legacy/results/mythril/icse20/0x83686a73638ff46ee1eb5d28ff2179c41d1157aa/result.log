{"error": null, "issues": [{"address": 4750, "code": "amountbalance, s.cashbackbalan", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 486, "title": "Message call to external contract", "type": "Informational"}, {"address": 4750, "code": "amountbalance, s.cashbackbalan", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4985\n", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 486, "title": "Multiple Calls", "type": "Information"}, {"address": 4985, "code": "ser, s.tokenAddress, amount);\n\t\t\t\t", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "Holdplatform_Withdraw(uint256)", "lineno": 487, "title": "Message call to external contract", "type": "Informational"}, {"address": 6280, "code": "//-------o 01 Add Contract Add", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "WithdrawAffiliate(address,address)", "lineno": 406, "title": "Message call to external contract", "type": "Warning"}, {"address": 7484, "code": "\n\tmapping(address => address[]) \t\tpublic afflist", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x4b698aff00000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "_function_0x4b698aff", "lineno": 87, "title": "Exception state", "type": "Informational"}, {"address": 8101, "code": "enAddress, uint256 amount) private {\n\t\t\n\t\tif (Holdpla", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "Holdplatform(address,uint256)", "lineno": 165, "title": "Message call to external contract", "type": "Warning"}, {"address": 9017, "code": "\n\tmapping(address => string) \t\t\tpublic Contrac", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ldoh_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_ldoh_4: 0x0\ncalldata_ldoh_0: 0x7028b6a300000000000000000000000000000000000000000000000000000000\ncalldatasize_ldoh: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x83686a73638ff46ee1eb5d28ff2179c41d1157aa.sol", "function": "_function_0x7028b6a3", "lineno": 88, "title": "Exception state", "type": "Informational"}], "success": true}