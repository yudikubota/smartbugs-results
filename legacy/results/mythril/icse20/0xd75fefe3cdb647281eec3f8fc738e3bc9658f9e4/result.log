{"error": null, "issues": [{"address": 1122, "code": "eldsUp && !proofOfSms.certified(msg.sender)) {\n            ClaimResult(1); //missing sms certification\n             throw;\n        } else if (readingRegister[msg.sender][articleNum]) {\n            ClaimResult(2); // user alread claimed\n            throw; \n        } else if (remainingTokensForArticle[publishedRegister[articleNum]] <= 0) {\n            ClaimResult(3); //article out of tokens\n            throw;\n        } else if (keccak256(key) != articleKeyHashRegister[publishedRegister[articleNum]]) {\n            ClaimResult(4); //incorrect key\n            throw; \n        } else if (balanceOf[msg.sender] + 1 < balanceOf[msg.sender]) {\n            ClaimResult(5); //overflow error\n            throw;\n        } \n        \n        remainingTokensForArticle[publishedRegister[articleNum]]--;\n        totalSupply++;\n        readingRegister[msg.sender][articleNum] = true;\n        balanceOf[msg.sender] += 1;\n        \n        ClaimResult(0);\n    }\n    \n    /* Check if an address has read a given article */\n    function hasReadership(address toCheck, uin", "debug": "calldata_ProofOfReadToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1134, "code": "eldsUp && !proofOfSms.certified(msg.sender)) {\n            ClaimResult(1); //missing sms certification\n             throw;\n        } else if (readingRegister[msg.sender][articleNum]) {\n            ClaimResult(2); // user alread claimed\n            throw; \n        } else if (remainingTokensForArticle[publishedRegister[articleNum]] <= 0) {\n            ClaimResult(3); //article out of tokens\n            throw;\n        } else if (keccak256(key) != articleKeyHashRegister[publishedRegister[articleNum]]) {\n            ClaimResult(4); //incorrect key\n            throw; \n        } else if (balanceOf[msg.sender] + 1 < balanceOf[msg.sender]) {\n            ClaimResult(5); //overflow error\n            throw;\n        } \n        \n        remainingTokensForArticle[publishedRegister[articleNum]]--;\n        totalSupply++;\n        readingRegister[msg.sender][articleNum] = true;\n        balanceOf[msg.sender] += 1;\n        \n        ClaimResult(0);\n    }\n    \n    /* Check if an address has read a given article */\n    function hasReadership(address toCheck, uin", "debug": "calldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1143, "code": "eldsUp && !proofOfSms.certified(msg.sender)) {\n            ClaimResult(1); //missing sms certification\n             throw;\n        } else if (readingRegister[msg.sender][articleNum]) {\n            ClaimResult(2); // user alread claimed\n            throw; \n        } else if (remainingTokensForArticle[publishedRegister[articleNum]] <= 0) {\n            ClaimResult(3); //article out of tokens\n            throw;\n        } else if (keccak256(key) != articleKeyHashRegister[publishedRegister[articleNum]]) {\n            ClaimResult(4); //incorrect key\n            throw; \n        } else if (balanceOf[msg.sender] + 1 < balanceOf[msg.sender]) {\n            ClaimResult(5); //overflow error\n            throw;\n        } \n        \n        remainingTokensForArticle[publishedRegister[articleNum]]--;\n        totalSupply++;\n        readingRegister[msg.sender][articleNum] = true;\n        balanceOf[msg.sender] += 1;\n        \n        ClaimResult(0);\n    }\n    \n    /* Check if an address has read a given article */\n    function hasReadership(address toCheck, uin", "debug": "calldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1149, "code": "eldsUp && !proofOfSms.certified(msg.sender)) {\n            ClaimResult(1); //missing sms certification\n             throw;\n        } else if (readingRegister[msg.sender][articleNum]) {\n            ClaimResult(2); // user alread claimed\n            throw; \n        } else if (remainingTokensForArticle[publishedRegister[articleNum]] <= 0) {\n            ClaimResult(3); //article out of tokens\n            throw;\n        } else if (keccak256(key) != articleKeyHashRegister[publishedRegister[articleNum]]) {\n            ClaimResult(4); //incorrect key\n            throw; \n        } else if (balanceOf[msg.sender] + 1 < balanceOf[msg.sender]) {\n            ClaimResult(5); //overflow error\n            throw;\n        } \n        \n        remainingTokensForArticle[publishedRegister[articleNum]]--;\n        totalSupply++;\n        readingRegister[msg.sender][articleNum] = true;\n        balanceOf[msg.sender] += 1;\n        \n        ClaimResult(0);\n    }\n    \n    /* Check if an address has read a given article */\n    function hasReadership(address toCheck, uin", "debug": "calldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4168, "code": "cation\n             throw;\n     ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 87, "title": "Message call to external contract", "type": "Informational"}, {"address": 4534, "code": "; //article out of tokens\n            throw;\n        } e", "debug": "storage_keccac_calldata_ProofOfReadToken_4: 0xdead3b558c69f9529731ffd7dd79bedfffffffffffffffffffffffffffff0081\ncalldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4: 0xa1a6253324b00ab24e800947f13c1843ffffffffffffffffffffffffffffffa1\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4168: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xff00\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4558, "code": "; //article out of tokens\n            throw;\n        } e", "debug": "storage_keccac_calldata_ProofOfReadToken_4: 0xbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0001\ncalldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ProofOfReadToken_4 + calldata_ProofOfReadToken_32 + 4)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_4168: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xff00\ncalldata_ProofOfReadToken_0: 0x42e1131600000000000000000000000000000000000000000000000000000000\ncalldatasize_ProofOfReadToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `claimReadership(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/24/0xd75fefe3cdb647281eec3f8fc738e3bc9658f9e4.sol", "function": "claimReadership(uint256,string)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}], "success": true}