{
  "contract": "0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3",
  "tool": "mythril",
  "start": 1563501492.7283142,
  "end": 1563502116.9292986,
  "duration": 624.2009844779968,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 507,
        "code": "// If the user exists and has a ba",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 248,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 537,
        "code": "eriod;\n               alloc",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 252,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 573,
        "code": "nction mine() external nonR",
        "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_2535: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SharkPool: 0x3\nstorage_3: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 261,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 582,
        "code": "\n\n    \n    // Proxy mining to token\n   function mine() external nonR",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 257,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 603,
        "code": "  uint256 _blockNum = external_to_inter",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 264,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 618,
        "code": "ber(current_external_block());\n     require(!base_contr",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 264,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2535,
        "code": "        // Did the user already cont",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "calculate_minimum_contribution()",
        "lineno": 233,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2535,
        "code": "        // Did the user already cont",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3211\nCall at address: 3211\nCall at address: 2953\nCall at address: 3211\nCall at address: 3211\nCall at address: 2953\n",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 233,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2953,
        "code": "s (bool) {\n      return base_contract.ch",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 337,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2953,
        "code": "s (bool) {\n      return base_contract.ch",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3211\n",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 337,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3211,
        "code": "kNum, _sender);\n   }\n   \n   function checkWin",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 338,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3336,
        "code": "6 _blockNum) constant pu",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 341,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3618,
        "code": "externalBlockNum) public cons",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 172,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3676,
        "code": "256) {\n        // blockCreat",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "fallback",
        "lineno": 172,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4096,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "checkMiningAttempt(uint256,address)",
        "lineno": 345,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7644,
        "code": "ax_users - total_users;\n        } els",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncalldata_SharkPool_0: 0x99f4b25100000000000000000000000000000000000000000000000000000000\ncalldatasize_SharkPool: 0x4\nstorage_6: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x29aa20fb9b23421e310bdb8a7cfb81d7fbb4a1b3.sol",
        "function": "mine()",
        "lineno": 179,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}