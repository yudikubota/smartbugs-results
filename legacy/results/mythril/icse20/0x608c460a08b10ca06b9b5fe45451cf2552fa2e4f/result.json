{
  "contract": "0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f",
  "tool": "mythril",
  "start": 1563577514.8639627,
  "end": 1563577979.516876,
  "duration": 464.6529133319855,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 762,
        "code": "ialization {\n        if (msg.gas < GAS_LIMIT_BUY) {\n            PurchaseFailed(msg.sender, _mark, Reason.InsufficientGas);\n            return;\n        }\n\n        if (lotteries[id].numTicketsSold == lotteries[id].numTickets) {\n            PurchaseFailed(msg.sender, _mark, Reason.TicketSaleClosed);\n            return;\n        }\n\n        require(_tickets.length > 0);\n        require(msg.value == _tickets.length * lotteries[id].ticketPrice);\n\n        for (uint i = 0; i < _tickets.length; i++) {\n            uint ticket = _tickets[i];\n            require(ticket >= 0);\n            require(ticket < lotteries[id].numTickets);\n\n            if (lotteries[id].tickets[ticket] != 0) {\n                PurchaseFailed(msg.sender, _mark, Reason.TicketAlreadySold);\n                return;\n            }\n        }\n\n        for (i = 0; i < _tickets.length; i++) {\n            ticket = _tickets[i];\n            lotteries[id].tickets[ticket] = msg.sender;\n            recentActivity[recentActivityIdx] = ticket;\n\n            recentActivityIdx += 1;\n            if (recentActivityIdx >= recentActivity.length) {\n                recentActivityIdx = 0;\n            }\n        }\n\n        lotteries[id].numTicketsSold += _tickets.length;\n        lastSaleTimestamp = block.timestamp;\n\n        BTCRelay(btcRelay).storeBlockHeader(_extraData);\n\n        PurchaseSuccessful(msg.sender, _mark);\n    }\n\n    function needsBlockFinalization()\n             afterInitialization constant returns (bool) {\n        // Check the timestamp of the lat",
        "debug": "calldata_EthereumLottery_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EthereumLottery_0: 0x1b33157a00000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumLottery: 0x4\n",
        "description": "A possible integer overflow exists in the function `_function_0x1b33157a`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "_function_0x1b33157a",
        "lineno": 99,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4188,
        "code": "tivity.length) {\n                ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EthereumLottery_4 + calldata_EthereumLottery_4: 0x1\nstorage_2 + keccac_storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x3e8\nstorage_keccac_calldata_EthereumLottery_cpy: 0x0\ncalldata_EthereumLottery_cpy: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3 + keccac_storage_3: 0x0\ngas: 0x6ddd0\nstorage_3: 0x0\ncalldata_EthereumLottery_0: 0x1b33157a00000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumLottery: 0x4\nstorage_4 + keccac_storage_3: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "_function_0x1b33157a",
        "lineno": 130,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4543,
        "code": "on()\n             afterInitialization constant ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "_function_0x1b33157a",
        "lineno": 143,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4701,
        "code": "ing (int => Lottery) public lott",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_EthereumLottery_4: 0x3e8\ncalldata_EthereumLottery_0: 0x1b7cf89900000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumLottery: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "_function_0x1b7cf899",
        "lineno": 46,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4875,
        "code": "k.timestamp) {\n            delta = blo",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "finalizeBlock()",
        "lineno": 154,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4875,
        "code": "k.timestamp) {\n            delta = blo",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10316\nCall at address: 10094\n",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsBlockFinalization()",
        "lineno": 154,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5267,
        "code": "es[id].finalizationBlock == 0;\n    }\n\n ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsLotteryFinalization()",
        "lineno": 184,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5422,
        "code": "quire(needsLotteryFinalization(",
        "debug": "storage_1 + keccac_storage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nreturndatasize: 0x20\nretval_5267: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncalldata_EthereumLottery_0: 0x3a79a55c00000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumLottery: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `needsLotteryFinalization()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsLotteryFinalization()",
        "lineno": 189,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7292,
        "code": "dress addr = lotteries[_id].tickets[_of",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "_function_0x7bf0e054",
        "lineno": 335,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10094,
        "code": "Hash = 0;\n        for (uint i = 0; i < 32;",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsBlockFinalization()",
        "lineno": 250,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10094,
        "code": "Hash = 0;\n        for (uint i = 0; i < 32;",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10316\n",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsBlockFinalization()",
        "lineno": 250,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10316,
        "code": "          prevBlockHash = prevBlockHash | in",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/12/0x608c460a08b10ca06b9b5fe45451cf2552fa2e4f.sol",
        "function": "needsBlockFinalization()",
        "lineno": 254,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}