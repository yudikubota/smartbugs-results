{"error": null, "issues": [{"address": 1162, "code": "e;\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, ", "debug": "calldata_GaiBanngToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GaiBanngToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_GaiBanngToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x02fcda86fffefc71d83180b436e5d7f78906345c.sol", "function": "setName(string)", "lineno": 61, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3305, "code": "r);\n        _;\n    }\n    fu", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_GaiBanngToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_GaiBanngToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x02fcda86fffefc71d83180b436e5d7f78906345c.sol", "function": "setName(string)", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 3457, "code": "r);\n        _;\n    }\n    fu", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_GaiBanngToken_0: 0xf2fde38b00000000000000000000000000000000000000000000000000000000\ncalldatasize_GaiBanngToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/20/0x02fcda86fffefc71d83180b436e5d7f78906345c.sol", "function": "transferOwnership(address)", "lineno": 18, "title": "Exception state", "type": "Informational"}, {"address": 3778, "code": "ntract GaiBanngToken {\n\n    string public name = '\u4e10\u5e2e\u4ee4\u724c';      //  token name\n    string constant public symbol = \"GAI\";           //  token symbol\n    uint256 constant public decimals = 8;            //  token digit\n\n    uint256 public constant INITIAL_SUPPLY = 20170808 * (10 ** uint256(decimals));\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    address public owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n    function transferOwnership(address newOwner) public isOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY;\n        balanceOf[owner] = totalSupply;\n        emit Transfer(0x0, owner, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value)  public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit  Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function setName(string _name) public isOwner {\n        name = _name;\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}", "debug": "calldata_GaiBanngToken_4 + calldata_GaiBanngToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_4: 0x0\ncalldata_GaiBanngToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_GaiBanngToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x02fcda86fffefc71d83180b436e5d7f78906345c.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3792, "code": "ntract GaiBanngToken {\n\n    string public name = '\u4e10\u5e2e\u4ee4\u724c';      //  token name\n    string constant public symbol = \"GAI\";           //  token symbol\n    uint256 constant public decimals = 8;            //  token digit\n\n    uint256 public constant INITIAL_SUPPLY = 20170808 * (10 ** uint256(decimals));\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    address public owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n    function transferOwnership(address newOwner) public isOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply = INITIAL_SUPPLY;\n        balanceOf[owner] = totalSupply;\n        emit Transfer(0x0, owner, totalSupply);\n    }\n\n    function transfer(address _to, uint256 _value)  public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit  Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function setName(string _name) public isOwner {\n        name = _name;\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}", "debug": "calldata_GaiBanngToken_4 + calldata_GaiBanngToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_4: 0x0\ncalldata_GaiBanngToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_GaiBanngToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/20/0x02fcda86fffefc71d83180b436e5d7f78906345c.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}