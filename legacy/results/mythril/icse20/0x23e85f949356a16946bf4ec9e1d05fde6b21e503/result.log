{"error": null, "issues": [{"address": 530, "code": "sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n    ", "debug": "calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 606, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1830, "code": "actionId transaction Id.\n    function executeTr", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 613, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1839, "code": "actionId transaction Id.\n    function executeTr", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 613, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1845, "code": "actionId transaction Id.\n    function executeTr", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 613, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3790, "code": ";\n\n// ------------", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0x0\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "addOwner(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5646, "code": " @param value Transaction ether value.\n   ", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 588, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6031, "code": "turn transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = add", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x80\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 591, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6099, "code": ";\n\n// ------------", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xfe300e18c158ec412f5c4ede49124210c0840a26d60f2007ff5ff3ffff7ffd4e\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xdd83f7f8af5940bbbafeca9a46defb91bd4a9c9c8467e400400300002000f0c5\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6671, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "storage_3: 0x7fffffffffffffffffffd7fffffffffff83cc6a5c00000000000000000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "removeOwner(address)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6673, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "storage_3: 0x7ff8a5f1ffffffffffffffffffffffffffffffffffffffffffff400000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "removeOwner(address)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6744, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x60\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6773, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6787, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x80\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6804, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x25\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6809, "code": "Creation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        require(msg.sender == address(this));\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        require(!isOwner[owner]);\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        require(isOwner[owner]);\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionId, address owner) {\n        require(confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionId, address owner) {\n        require(!confirmations[transactionId][owner]);\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionId) {\n        require(!transactions[transactionId].executed);\n        _;\n    }\n\n    modifier notNull(address destination) {\n        require(destination != 0);\n        _;\n    }\n\n    modifier validRequirement(uint _ownerCount, uint _required) {\n        require(   _required <= _ownerCount\n                && _required > 0 );\n        _;\n    }\n    \n    /// @dev Contract constructor sets initial owners and required number of confirmations.\n    /// @param _owners List of initial owners.\n    /// @param _required Number of required confirmations.\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequirement(_owners.length, _required)\n        public {\n        for (uint i=0; i<_owners.length; i++) {\n            // check duplicate owner and invalid address\n            if (isOwner[_owners[i]] || _owners[i] == 0){\n                revert();\n            }\n            // assign new owner\n            isOwner[_owners[i]] = true;\n        }\n        owners = _owners;\n        required = _required;\n    }\n\n    ///  Fallback function allows to deposit ether.\n    function()\n        public\n        payable {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n    /// @param owner Address of new owner.\n    function addOwner(address owner)\n        public\n        onlyWallet\n        ownerDoesNotExist(owner) {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n    /// @param owner Address of owner.\n    function removeOwner(address owner)\n        public\n        onlyWallet\n        ownerExists(owner) {\n        // DO NOT remove last owner\n        require(owners.length > 1);\n        \n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            changeRequirement(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    /// @dev Update the minimum required owner for transaction validation\n    /// @param _required number of owners\n    function changeRequirement(uint _required)\n        public\n        onlyWallet\n        validRequirement(owners.length, _required) {\n        required = _required;\n        RequirementChange(_required);\n    }\n\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionId) {\n        // transactionId = sha3(destination, value, data, nonce);\n        transactionId = keccak256(destination, value, data, nonce);\n        if (transactions[transactionId].destination == 0) {\n            transactions[transactionId] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionId);\n            Submission(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to submit and confirm a transaction.\n    /// @param destination Transaction target address.\n    /// @param value Transaction ether value.\n    /// @param data Transaction data payload.\n    /// @param nonce \n    /// @return transactionId.\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionId) {\n        transactionId = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionId);\n    }\n\n    /// @dev Allows an owner to confirm a transaction.\n    /// @param transactionId transaction Id.\n    function confirmTransaction(bytes32 transactionId)\n        public\n        ownerExists(msg.sender)\n        notConfirmed(transactionId, msg.sender) {\n        confirmations[transactionId][msg.sender] = true;\n        Confirmation(msg.sender, transactionId);\n        executeTransaction(transactionId);\n    }\n\n    \n    /// @dev Allows anyone to execute a confirmed transaction.\n    /// @param transactionId transaction Id.\n    function executeTransaction(bytes32 transactionId)\n        public\n        notExecuted(transactionId) {\n        if (isConfirmed(transactionId)) {\n            Transaction storage txn = transactions[transactionId]; \n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionId);\n        }\n    }\n\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\n    /// @param transactionId transaction Id.\n    function revokeConfirmation(bytes32 transactionId)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionId, msg.sender)\n        notExecuted(transactionId) {\n        confirmations[transactionId][msg.sender] = false;\n        Revocation(msg.sender, transactionId);\n    }\n\n    /// @dev Returns the confirmation status of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Confirmation status.\n    function isConfirmed(bytes32 transactionId)\n        public\n        constant\n        returns (bool) {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    /*\n     * Web3 call functions\n     */\n    /// @dev Returns number of confirmations of a transaction.\n    /// @param transactionId transaction Id.\n    /// @return Number of confirmations.\n    function confirmationCount(bytes32 transactionId)\n        external\n        constant\n        returns (uint count) {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionId][owners[i]])\n                count += 1;\n    }\n\n    ///  @dev Return list of transactions after filters are applied\n    ///  @param isPending pending status\n    ///  @return List of transactions\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList) {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (transactions[transactionList[i]].executed != isPending)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    /// @dev Returns list of pending transactions\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(true);\n    }\n\n    /// @dev Returns list of executed transactions\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[]) {\n        return filterTransactions(false);\n    }\n    \n    /// @dev Create new coin.\n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new Gifto());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x23e85f949356a16946bf4ec9e1d05fde6b21e503.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 435, "title": "Integer Overflow ", "type": "Warning"}], "success": true}