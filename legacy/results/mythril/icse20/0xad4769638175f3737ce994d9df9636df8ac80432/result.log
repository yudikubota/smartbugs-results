{"error": null, "issues": [{"address": 2641, "code": ".getControllerAddress();\n  ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 133, "title": "Message call to external contract", "type": "Informational"}, {"address": 2641, "code": ".getControllerAddress();\n  ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2897\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 133, "title": "Multiple Calls", "type": "Information"}, {"address": 2760, "code": " resolver.getControllerAddress();\n  ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 133, "title": "State change after external call", "type": "Warning"}, {"address": 2897, "code": "         if(wallet != res", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 137, "title": "Message call to external contract", "type": "Informational"}, {"address": 3415, "code": "ess())\n                book", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 140, "title": "Message call to external contract", "type": "Warning"}, {"address": 3415, "code": "ess())\n                book", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4485\nCall at address: 4228\nCall at address: 3950\nCall at address: 3950\nCall at address: 3693\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 140, "title": "Multiple Calls", "type": "Information"}, {"address": 3415, "code": "ess())\n                book", "debug": "", "description": "A possible transaction order independence vulnerability exists in function setJackpot(uint8[5]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 140, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3693, "code": "BookAddress());\n           ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 141, "title": "Message call to external contract", "type": "Warning"}, {"address": 3693, "code": "BookAddress());\n           ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3950\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 141, "title": "Multiple Calls", "type": "Information"}, {"address": 3693, "code": "BookAddress());\n           ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function setJackpot(uint8[5]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 141, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3812, "code": "olver.getBookAddress());\n           ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 141, "title": "State change after external call", "type": "Warning"}, {"address": 3950, "code": "solver.getControllerAddre", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 143, "title": "Message call to external contract", "type": "Warning"}, {"address": 3950, "code": "solver.getControllerAddre", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4485\nCall at address: 4228\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 143, "title": "Multiple Calls", "type": "Information"}, {"address": 3950, "code": "solver.getControllerAddre", "debug": "", "description": "A possible transaction order independence vulnerability exists in function setJackpot(uint8[5]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 143, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4228, "code": "lver.getControllerAddress", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 144, "title": "Message call to external contract", "type": "Warning"}, {"address": 4228, "code": "lver.getControllerAddress", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4485\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 144, "title": "Multiple Calls", "type": "Information"}, {"address": 4228, "code": "lver.getControllerAddress", "debug": "", "description": "A possible transaction order independence vulnerability exists in function setJackpot(uint8[5]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 144, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4347, "code": "   controller = resolver.getControllerAddress(", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 144, "title": "State change after external call", "type": "Warning"}, {"address": 4485, "code": "/**\n     * @dev fallback funtio", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 150, "title": "Message call to external contract", "type": "Warning"}, {"address": 4485, "code": "/**\n     * @dev fallback funtio", "debug": "", "description": "A possible transaction order independence vulnerability exists in function setJackpot(uint8[5]). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 150, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5046, "code": "ounts[currentRound-1])", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x7fffbf0300\nstorage_6: 0x0\nstorage_1: 0x0\ncaller: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_inviterBookI_0: 0x71a0d0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\nextcodesize: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "setJackpot(uint8[5])", "lineno": 489, "title": "Exception state", "type": "Informational"}, {"address": 7131, "code": ".getControllerAddress();\n  ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 133, "title": "Message call to external contract", "type": "Informational"}, {"address": 7131, "code": ".getControllerAddress();\n  ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7387\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 133, "title": "Multiple Calls", "type": "Information"}, {"address": 7250, "code": " resolver.getControllerAddress();\n  ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 133, "title": "State change after external call", "type": "Warning"}, {"address": 7387, "code": "         if(wallet != res", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 137, "title": "Message call to external contract", "type": "Informational"}, {"address": 7905, "code": "ess())\n                book", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 140, "title": "Message call to external contract", "type": "Warning"}, {"address": 7905, "code": "ess())\n                book", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8975\nCall at address: 8718\nCall at address: 8440\nCall at address: 8440\nCall at address: 8183\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 140, "title": "Multiple Calls", "type": "Information"}, {"address": 7905, "code": "ess())\n                book", "debug": "", "description": "A possible transaction order independence vulnerability exists in function draw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 140, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8183, "code": "BookAddress());\n           ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 141, "title": "Message call to external contract", "type": "Warning"}, {"address": 8183, "code": "BookAddress());\n           ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8440\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 141, "title": "Multiple Calls", "type": "Information"}, {"address": 8183, "code": "BookAddress());\n           ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function draw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 141, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8302, "code": "olver.getBookAddress());\n           ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 141, "title": "State change after external call", "type": "Warning"}, {"address": 8440, "code": "solver.getControllerAddre", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 143, "title": "Message call to external contract", "type": "Warning"}, {"address": 8440, "code": "solver.getControllerAddre", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8975\nCall at address: 8718\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 143, "title": "Multiple Calls", "type": "Information"}, {"address": 8440, "code": "solver.getControllerAddre", "debug": "", "description": "A possible transaction order independence vulnerability exists in function draw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 143, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8718, "code": "lver.getControllerAddress", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 144, "title": "Message call to external contract", "type": "Warning"}, {"address": 8718, "code": "lver.getControllerAddress", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 8975\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 144, "title": "Multiple Calls", "type": "Information"}, {"address": 8718, "code": "lver.getControllerAddress", "debug": "", "description": "A possible transaction order independence vulnerability exists in function draw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 144, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8837, "code": "   controller = resolver.getControllerAddress(", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 144, "title": "State change after external call", "type": "Warning"}, {"address": 8975, "code": "/**\n     * @dev fallback funtio", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 150, "title": "Message call to external contract", "type": "Warning"}, {"address": 8975, "code": "/**\n     * @dev fallback funtio", "debug": "", "description": "A possible transaction order independence vulnerability exists in function draw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 150, "title": "Transaction order dependence", "type": "Warning"}, {"address": 9508, "code": "  //mark daily entity'", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\nstorage_3: 0x100\nstorage_1: 0x0\ncaller: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_inviterBookI_0: 0xeecae2100000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\nextcodesize: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "draw()", "lineno": 485, "title": "Exception state", "type": "Informational"}, {"address": 9681, "code": " bool[] public drawed", "debug": "The exception is triggered under the following conditions:\n\ncalldata_inviterBookI_4: 0x0\nstorage_5: 0x0\ncalldata_inviterBookI_0: 0x371eb66900000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "_function_0x371eb669", "lineno": 56, "title": "Exception state", "type": "Informational"}, {"address": 9738, "code": " uint32[] public addrs;", "debug": "The exception is triggered under the following conditions:\n\ncalldata_inviterBookI_4: 0x0\nstorage_4: 0x0\ncalldata_inviterBookI_0: 0x45f0a44f00000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "_function_0x45f0a44f", "lineno": 55, "title": "Exception state", "type": "Informational"}, {"address": 9873, "code": "ackpot[week - 1]._res", "debug": "The exception is triggered under the following conditions:\n\nstorage_12: 0x80\nstorage_3: 0x7c00008000\ncalldata_inviterBookI_4: 0x7c000080\ncalldata_inviterBookI_0: 0x47cb1b3500000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "getDailyJackpot(uint32)", "lineno": 390, "title": "Exception state", "type": "Informational"}, {"address": 13489, "code": " = allBets[round", "debug": "The exception is triggered under the following conditions:\n\nstorage_9: 0x80\nstorage_3: 0x7c00008000\ncalldata_inviterBookI_4: 0x7c000080\ncalldata_inviterBookI_0: 0x521fd5be00000000000000000000000000000000000000000000000000000000\ncalldatasize_inviterBookI: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "getSingleBet(uint32,uint32)", "lineno": 338, "title": "Exception state", "type": "Informational"}, {"address": 15236, "code": "ess())\n                book", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "freeze()", "lineno": 140, "title": "Message call to external contract", "type": "Warning"}, {"address": 15236, "code": "ess())\n                book", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 15771\nCall at address: 15514\n", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "freeze()", "lineno": 140, "title": "Multiple Calls", "type": "Information"}, {"address": 15236, "code": "ess())\n                book", "debug": "", "description": "A possible transaction order independence vulnerability exists in function freeze(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "freeze()", "lineno": 140, "title": "Transaction order dependence", "type": "Warning"}, {"address": 15514, "code": "BookAddress());\n           ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "freeze()", "lineno": 141, "title": "Message call to external contract", "type": "Warning"}, {"address": 15771, "code": "solver.getControllerAddre", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "freeze()", "lineno": 143, "title": "Message call to external contract", "type": "Warning"}, {"address": 17952, "code": "ess())\n                book", "debug": "", "description": "This contract executes a message call to an address found at storage slot 0. This storage slot can be written to by calling the function `setJackpot(uint8[5])`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "unfreeze()", "lineno": 140, "title": "Message call to external contract", "type": "Warning"}, {"address": 17952, "code": "ess())\n                book", "debug": "", "description": "A possible transaction order independence vulnerability exists in function unfreeze(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "unfreeze()", "lineno": 140, "title": "Transaction order dependence", "type": "Warning"}, {"address": 19710, "code": "    if((a", "debug": "", "description": "Function buy(uint8[5],string) retrieves the transaction origin (tx.origin) using the ORIGIN opcode. Use msg.sender instead.\nSee also: https://solidity.readthedocs.io/en/develop/security-considerations.html#tx-origin", "filename": "/unique_chucks/11/0xad4769638175f3737ce994d9df9636df8ac80432.sol", "function": "buy(uint8[5],string)", "lineno": 129, "title": "Use of tx.origin", "type": "Warning"}], "success": true}