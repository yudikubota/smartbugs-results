{
  "contract": "0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770",
  "tool": "mythril",
  "start": 1563742927.203501,
  "end": 1563743449.0257604,
  "duration": 521.822259426117,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 223,
        "debug": "calldata_StateChannelModule_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StateChannelModule_0: 0x2b50004100000000000000000000000000000000000000000000000000000000\ncalldatasize_StateChannelModule: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2b500041`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0x2b500041",
        "lineno": 495,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 811,
        "code": "as executed and execute transaction.\n        isExecuted[transactionHash] = 1;\n        require(manager.execTransactionFromModule(to, value, data, operation), \"Could not execute transaction\");\n    }\n\n    function checkHash(bytes32 transactionHash, bytes signatures)\n        internal\n        view\n    {\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint256 i;\n        uint256 threshold = OwnerManager(manager).getThreshold();\n        // Validate threshold is reached.\n        for (i = 0; i < threshold; i++) {\n            currentOwner = recoverKey(transactionHash, sign",
        "debug": "calldata_StateChannelModule_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_StateChannelModule_0: 0xf6cc15d000000000000000000000000000000000000000000000000000000000\ncalldatasize_StateChannelModule: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xf6cc15d0`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0xf6cc15d0",
        "lineno": 452,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1584,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_StateChannelModule_32 + 68: 0x80\ncalldata_StateChannelModule_4 + calldata_StateChannelModule_32 + 36: 0x80\ncalldata_StateChannelModule_0: 0xf6cc15d000000000000000000000000000000000000000000000000000000000\ncalldatasize_StateChannelModule: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0xf6cc15d0",
        "lineno": 495,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2585,
        "code": "eshold();\n        // Validate t",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0xf6cc15d0",
        "lineno": 465,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3545,
        "code": "hash to be signed by owners.\n    ///",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `setup()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0xf6cc15d0",
        "lineno": 475,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3545,
        "code": "hash to be signed by owners.\n    ///",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0xf6cc15d0. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/43/0x8c7cb5023c6d58d8ddfb9fd1357bc50bfc4e1770.sol",
        "function": "_function_0xf6cc15d0",
        "lineno": 475,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}