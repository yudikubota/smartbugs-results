{"error": null, "issues": [{"address": 616, "code": "eamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    func", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 112, "title": "Integer Overflow ", "type": "Warning"}, {"address": 682, "code": "eamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    func", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_128 +\n32 +\n32*\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 112, "title": "Integer Overflow ", "type": "Warning"}, {"address": 818, "code": "erType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_team", "debug": "calldata_WorldCupWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WorldCupWinner_0: 0x7f31cbfa00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `batchShareAmount(address[],uint256[],uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "batchShareAmount(address[],uint256[],uint256,uint256,uint256)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1040, "code": "lic onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n   ", "debug": "calldata_WorldCupWinner_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x876590c3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1766, "code": ",uint256 buyPr", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x0\ncalldata_WorldCupWinner_0: 0x68bcd8d00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getPool(uint256)", "lineno": 129, "title": "Exception state", "type": "Informational"}, {"address": 1806, "code": "\t    owner = msg.se", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x0\ncalldata_WorldCupWinner_0: 0x117a5b9000000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x117a5b90", "lineno": 53, "title": "Exception state", "type": "Informational"}, {"address": 1974, "code": "\t    selfdest", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_32 + 4: 0x0\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x218a964000000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "setTeamStatus(bool,uint256)", "lineno": 83, "title": "Exception state", "type": "Informational"}, {"address": 2042, "code": "msg.value >= t", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x0\ncalldata_WorldCupWinner_0: 0x45ce691a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buy(uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 133, "title": "Exception state", "type": "Informational"}, {"address": 2091, "code": "msg.value >= totalPrice);\n\n\t    emit BuyWi", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_32 + 68: 0x70\ncalldata_WorldCupWinner_4: 0x0\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0xc\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x45ce691a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buy(uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 133, "title": "Exception state", "type": "Informational"}, {"address": 2169, "code": "lPrice.add(totalPrice.div(20)) ;\n\t    re", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x80000000000000000000000000000000000000000000000005\ncalldata_WorldCupWinner_32 + 68: 0x80000000000000000000000000000000000000000000000063\ncalldata_WorldCupWinner_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x45ce691a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buy(uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 132, "title": "Exception state", "type": "Informational"}, {"address": 2244, "code": "0)])).mul(_buyCount);\n      totalPrice =", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7d\ncalldata_WorldCupWinner_32 + 68: 0xe0\ncalldata_WorldCupWinner_32 + 36: 0x73\ncalldata_WorldCupWinner_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x45ce691a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buy(uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 131, "title": "Exception state", "type": "Informational"}, {"address": 2931, "code": "es[_gameID]._p", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x0\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 120, "title": "Exception state", "type": "Informational"}, {"address": 2990, "code": "stop = games[_gameID]._stop;\n\t", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2993, "code": "stop = games[_gameID]._stop;\n\t", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2999, "code": "stop = games[_gameID]._stop;\n\t", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3024, "code": "stop = games[_gameID]._stop;\n\t", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3026, "code": "stop = games[_gameID]._stop;\n\t", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 121, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3137, "code": "inTime = games[_gameID]._beginTime;\n  ", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x84210842108001f024e0e8c64e51842000000000000001f21084210607c001d\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x1\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 122, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3139, "code": "inTime = games[_gameID]._beginTime;\n  ", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_4: 0x1\ncalldata_WorldCupWinner_4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x598abc9c00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getListTeam(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "getListTeam(uint256)", "lineno": 122, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3543, "code": ";\n       ", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x0\ncalldata_WorldCupWinner_4 + calldata_WorldCupWinner_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WorldCupWinner_32 + 100: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x7f31cbfa00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\nmem_128 +\n32 +\n32*calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "batchShareAmount(address[],uint256[],uint256,uint256,uint256)", "lineno": 95, "title": "Exception state", "type": "Informational"}, {"address": 4008, "code": "    }\n\n\t  fun", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_32 + 36: 0x0\nstorage_2: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 76, "title": "Exception state", "type": "Informational"}, {"address": 4596, "code": ";\n\nlibrary SafeMat", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0xa11aab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xa11aab78`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0xa11aab78", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4658, "code": "nt256[] _tPrice, ", "debug": "mem_384 +\n32*calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4 +\n32*\ncalldata_WorldCupWinner_4 + calldata_WorldCupWinner_32 + 4 +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0xa11aab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xa11aab78`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0xa11aab78", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4788, "code": "ameID]._teams[", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_32 + 4: 0x0\nstorage_2: 0x0\ncalldata_WorldCupWinner_0: 0xa757fc4200000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buyTwo(uint256,uint256,uint256,uint256)", "lineno": 145, "title": "Exception state", "type": "Informational"}, {"address": 4818, "code": "ameID]._teams[_one], _gameID,ui", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_32 + 4: 0x0\ncalldata_WorldCupWinner_4: 0x0\nstorage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_32 + 4: 0x0\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0xa757fc4200000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buyTwo(uint256,uint256,uint256,uint256)", "lineno": 145, "title": "Exception state", "type": "Informational"}, {"address": 5626, "code": "       return ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WorldCupWinner_4: 0x0\ncalldata_WorldCupWinner_32 + 68: 0x63\nstorage_2: 0x1\ncalldata_WorldCupWinner_0: 0x45ce691a00000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "buy(uint256,uint256,uint256,uint256,uint256,uint256)", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 5762, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "storage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*calldata_WorldCupWinner_32 + 36: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n6*calldata_WorldCupWinner_32_+_36: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_WorldCupWinner_32 + 36: 0x0\nstorage_2: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x876590c3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5773, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_WorldCupWinner_32 + 36: 0x0\nstorage_2: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x876590c3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5775, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_WorldCupWinner_32 + 36: 0x0\nstorage_2: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x876590c3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5797, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nkeccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n6*calldata_WorldCupWinner_32_+_36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WorldCupWinner_32 + 36: 0x0\nstorage_2: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0x876590c300000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x876590c3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0x876590c3", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5896, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "keccac_1_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n6*storage_2: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n6*storage_2: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0xa11aab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xa11aab78`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0xa11aab78", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5907, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "mem_mem_384 +\n32*calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4 +\n32*\ncalldata_WorldCupWinner_4 + calldata_WorldCupWinner_32 + 4 +\n32: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0xa11aab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xa11aab78`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0xa11aab78", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5909, "code": "  using SafeMath for uint256;\n\n    /*****------ EVENTS -----*****/\n  event BuyWinner(address indexed buyer, uint256 indexed traddingTime, uint256 first, uint256 second, uint256 three, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerList(uint256 indexed first, uint256 indexed second, uint256  indexed third,address  buyer, uint256  traddingTime, uint256 gameid, uint256 buyType, uint buyTotal,uint256 buyPrice);\n  event BuyWinnerTwo(address indexed buyer, uint256 indexed first, uint256 indexed gameid,uint256 traddingTime, uint256 buyType,uint256 buyPrice,uint buyTotal);\n  event ShareBonus(address indexed buyer, uint256 indexed traddingTime, uint256 indexed buyerType, uint256 gameID, uint256 remainingAmount);\n\n  address public owner;\n\n\tuint[] _teamIDs;\n\n    struct Game{\n      uint256 _bouns;\n\t    uint[] _teams;\n\t    uint256[] _teamPrice;\n\t    uint _playType;\n\t    bool _stop;\n\t\t  uint256 _beginTime;\n    }\n    Game[] public games;\n\n    constructor() public {\n\t    owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function createGame(uint[] _teams, uint256[] _tPrice, uint _gameType,uint256 _beginTime) public onlyOwner {\n\t\tGame memory _game = Game({\n        _bouns: 0,\n\t\t    _teams: _teams,\n\t\t    _teamPrice: _tPrice,\n        _playType: _gameType,\n\t\t    _stop: true,\n\t\t\t_beginTime:_beginTime\n        });\n        games.push(_game);\n    }\n\n    function setTeamPrice(uint[] _teams, uint256[] _tPrice, uint gameID) public onlyOwner {\n        games[gameID]._teams = _teams;\n\t\t    games[gameID]._teamPrice = _tPrice;\n    }\n\n\t  function setTeamStatus(bool bstop, uint gameID) public onlyOwner {\n        games[gameID]._stop = bstop;\n    }\n\n    function destroy() public onlyOwner {\n\t    selfdestruct(owner);\n    }\n\n    function shareAmount(address winner, uint256 amount, uint256 _buyerType, uint _gameID) public onlyOwner {\n\t    require(address(this).balance>=amount);\n\t    winner.transfer(amount);\n\t    emit ShareBonus(winner, uint256(now), _buyerType, _gameID, amount);\n    }\n    function batchShareAmount(address[] winner, uint256[] amount, uint256 _gameID,uint256 _buyerType,uint256 amount_total) public onlyOwner {\n     require(address(this).balance>=amount_total);\n     for(uint i=0; i<winner.length; i++){\n      winner[i].transfer(amount[i]);\n         emit ShareBonus(winner[i], uint256(now), _buyerType, _gameID, amount[i]);\n         }\n    }\n\n\tfunction getListTeamByPlayType(uint _gameType) public view returns (uint[] teamIDss){\n\t\t_teamIDs = [0];\n\t\tfor(uint i=0; i<games.length; i++)\n\t    {\n\t\t    if(games[i]._playType == _gameType){\n\t\t        _teamIDs.push(i);\n\t\t    }\n\t    }\n\t\tteamIDss = _teamIDs;\n    }\n\n    function getListTeam(uint _gameID) public view returns (uint256 _bouns,\n\t    uint[] _teams,\n\t    uint256[] _teamPrice,\n\n\t    uint _playType,\n\t    bool _stop,\n\t\tuint256 _beginTime){\n\t\t_bouns = games[_gameID]._bouns;\n\t\t_teams = games[_gameID]._teams;\n\t\t_teamPrice = games[_gameID]._teamPrice;\n\t\t_playType = games[_gameID]._playType;\n\t\t_stop = games[_gameID]._stop;\n\t\t_beginTime = games[_gameID]._beginTime;\n    }\n\n\tfunction getPool(uint _gameID) public view returns (uint256 bounsp){\n\t    return games[_gameID]._bouns;\n    }\n\n    function buy(uint256 _gameID, uint256 _one, uint256 _two, uint256 _three, uint256 _buyCount,uint256 buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n      uint256 totalPrice = (games[_gameID]._teamPrice[_one.sub(100)].add(games[_gameID]._teamPrice[_two.sub(100)]).add(games[_gameID]._teamPrice[_three.sub(100)])).mul(_buyCount);\n      totalPrice = totalPrice.add(totalPrice.div(20)) ;\n\t    require(msg.value >= totalPrice);\n\n\t    emit BuyWinner(msg.sender, uint256(now),_one, _two, _three, _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n      emit BuyWinnerList(_one, _two, _three,msg.sender, uint256(now), _gameID, games[_gameID]._playType, _buyCount, buyPrice);\n\t    owner.transfer(msg.value.div(20));\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n\tfunction buyTwo(uint256 _one, uint256 _gameID, uint256 _buyCount,uint256 _buyPrice) payable public{\n\t    //require(games[_gameID]._stop);\n\t    require(msg.value >= ((games[_gameID]._teamPrice[_one].mul(_buyCount)).add(games[_gameID]._teamPrice[_one]).mul(_buyCount).div(20)));\n      owner.transfer(msg.value.div(20));\n\t\t  emit BuyWinnerTwo(msg.sender, games[_gameID]._teams[_one], _gameID,uint256(now), games[_gameID]._playType,_buyPrice, _buyCount);\n\t    games[_gameID]._bouns = games[_gameID]._bouns.add(msg.value);\n    }\n\n    function getBonusPoolTotal() public view returns (uint256) {\n        return this.balance;\n }\n}", "debug": "mem_mem_384 +\n32*calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4 +\n32*\ncalldata_WorldCupWinner_4 + calldata_WorldCupWinner_32 + 4 +\n32: 0x7f6fc32c410701432cb30000000000000000000dfffffff3fc0000000000000\nmem_384 +\n32*calldata_WorldCupWinner_4 + calldata_WorldCupWinner_4 +\n32*\ncalldata_WorldCupWinner_4 + calldata_WorldCupWinner_32 + 4 +\n32: 0x7fffffffffffffffffffffffffffffffffffffdaffffffffbfff7fffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_WorldCupWinner_0: 0xa11aab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_WorldCupWinner: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xa11aab78`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0x53f671aef0a803085f6e3a6c215dd88454394f3e.sol", "function": "_function_0xa11aab78", "lineno": 30, "title": "Integer Overflow ", "type": "Warning"}], "success": true}