{"error": null, "issues": [{"address": 140, "code": "\n    }\n\n    f", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TOPB_0: 0x6fdde0100000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "fallback", "lineno": 15, "title": "Exception state", "type": "Informational"}, {"address": 1015, "code": "); \n        balanceOf[msg.sender] -= _v", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TOPB_4: 0x1\ncalldata_TOPB_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "burn(uint256)", "lineno": 39, "title": "Exception state", "type": "Informational"}, {"address": 1102, "code": "(msg.sender, _value);", "debug": "calldata_TOPB_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "burn(uint256)", "lineno": 42, "title": "Integer Underflow", "type": "Warning"}, {"address": 1428, "code": "ssert(balanceOf[_f", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TOPB_4: 0x0\ncalldata_TOPB_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "transfer(address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 1503, "code": ">= _value);\n\t\tassert(balanceOf[_to", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TOPB_32 + 4: 0x1\ncalldata_TOPB_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "transfer(address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 1642, "code": "value > balanceOf[_to]);\n\t\tuint256 previousBalan", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TOPB_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TOPB_4: 0xfc05cf9c084fffffffffffffffffffffffe4f7db7fffca2d0080d8000000005b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_TOPB_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "transfer(address,uint256)", "lineno": 26, "title": "Exception state", "type": "Informational"}, {"address": 1772, "code": "Of[_to];\n\t\tbalanceOf[_from] -= _v", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffff7ffffffff\ncalldata_TOPB_32 + 4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TOPB_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "transfer(address,uint256)", "lineno": 27, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2159, "code": "to] == previousBalances);\n    }\n\n", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xaa5ffb3ef59ca27c51ea5386f666ff066cc1b33a91510730105067f1cf5673d1\ncalldata_TOPB_32 + 4: 0x1000000014ef5df8a491084c0158f42fedfff8000588c8000088008000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TOPB_4: 0x95fffffff804b9a85807bbdd0551e42c11afc4b343b1b8076152761045274227\ncalldata_TOPB_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TOPB_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_TOPB: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0xf6317dd9b04097a9e7b016cd23dcaa7cfe19d9c6.sol", "function": "transfer(address,uint256)", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}], "success": true}