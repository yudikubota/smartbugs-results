{"error": null, "issues": [{"address": 735, "code": "ddress, uint64[] minerRewardTokens) public onlyOwner {\n    totalTokenSupply += totalTokensInBatch;\n    for (uint i = 0; i < minerAddress.length; i ++) {\n      minerTokens[minerAddress[i]] = minerTokens[minerAddress[i]].add(minerRewardTokens[i]);\n    }\n  }\n  \n  // Allow miners to withdraw their earnings from the contract. Upda", "debug": "calldata__ERC20Pool_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata__ERC20Pool_0: 0xec8b8f4e00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addMinerTokens(uint64,address[],uint64[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "addMinerTokens(uint64,address[],uint64[])", "lineno": 68, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1814, "code": "nd of you to send Ether, but we prefer to ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "withdraw()", "lineno": 86, "title": "Message call to external contract", "type": "Informational"}, {"address": 2359, "code": "perations with safety checks that throw on error\n */", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "transferAnyERC20Token(address,uint256)", "lineno": 109, "title": "Message call to external contract", "type": "Warning"}, {"address": 2607, "code": "Tokens, excluding 0xBi", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawEther(uint64). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "withdrawEther(uint64)", "lineno": 97, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2823, "code": "r earnings from the ", "debug": "The exception is triggered under the following conditions:\n\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xec8b8f4e00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "addMinerTokens(uint64,address[],uint64[])", "lineno": 75, "title": "Exception state", "type": "Informational"}, {"address": 3181, "code": "ion add(uint64", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xfffffffffffffffe00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffff00\ncalldata__ERC20Pool_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "withdraw()", "lineno": 143, "title": "Exception state", "type": "Informational"}, {"address": 3203, "debug": "mem_0 +\n192 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffff801b00019c880121\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata__ERC20Pool_cpy: 0xffa7000000000a8200\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xec8b8f4e00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addMinerTokens(uint64,address[],uint64[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "addMinerTokens(uint64,address[],uint64[])", "lineno": 148, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3236, "debug": "The exception is triggered under the following conditions:\n\nmem_0 +\n192 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata__ERC20Pool_cpy: 0x100\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xec8b8f4e00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x77741699cfdf210dd1301a564ae602243c189fc2.sol", "function": "addMinerTokens(uint64,address[],uint64[])", "lineno": 148, "title": "Exception state", "type": "Informational"}], "success": true}