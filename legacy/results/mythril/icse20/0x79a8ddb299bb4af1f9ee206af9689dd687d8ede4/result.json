{
  "contract": "0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4",
  "tool": "mythril",
  "start": 1563280058.933398,
  "end": 1563280497.3551407,
  "duration": 438.4217426776886,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 507,
        "code": "mals\n    @dev Asset has been registered\n    @param ofAsset Asset for which price should be returned\n    @return {\n      \"isRecent\": \"Whether the returned price is valid (as defined by VALIDITY)\",\n      \"price\": \"Price formatting: mul(exchangePrice, 10 ** decimal), to avoid floating n",
        "debug": "calldata_PriceFeedInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PriceFeedInterface_0: 0x16c519ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `hasRecentPrices(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "hasRecentPrices(address[])",
        "lineno": 376,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 848,
        "code": "    require(information[ofAssets[i]].exists);\n            information[ofAssets[i]].timestamp = now;\n            information[ofAssets[i]].price = newPrices[i];\n        }\n        PriceUpdated(now);\n    }\n\n    // PUBLIC VIEW METHODS\n\n    // Get pricefeed specific information\n    function getQuoteAsset() view returns (address) { return QUOTE_ASSET; }\n    function getInterval() view returns (uint) { return INTERVAL; }\n    function getValidity() view returns (uint) { return VALIDITY; }\n    function getLastUpdateId() view returns (uint) { r",
        "debug": "calldata_PriceFeedInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PriceFeedInterface_0: 0x2c10e90c00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2c10e90c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "_function_0x2c10e90c",
        "lineno": 334,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1526,
        "code": "mal;\n        }\n    }\n\n    /**\n    @notice Gets inverted price of an asset\n    @dev Asset has been initialised and its price is non-zero\n    @dev Existing price ofAssets quoted in QUOTE_ASSET (convention)\n    @param ofAsset Asset for which inverted price should be return\n    @return {\n        \"isRecent\": \"Whether the price is fresh, given VALIDITY interval\",\n        \"invertedPrice\": \"Price based (instead of quoted) against QUOTE_ASSET\"",
        "debug": "calldata_PriceFeedInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PriceFeedInterface_0: 0x8fb5a48200000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getPrices(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "getPrices(address[])",
        "lineno": 417,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4147,
        "code": "       returns (bool isExistent)\n    {\n        return\n            h",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_PriceFeedInterface_0: 0xb5d94f600000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncalldata_PriceFeedInterface_32 + 36: 0x0\n10_EXP_storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "getOrderPrice(address,address,uint256,uint256)",
        "lineno": 499,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4340,
        "code": "ITY interval\",\n        \"referencePrice\": \"Reference price\",\n        ",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_9 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0x0\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0xff00\ncalldata_PriceFeedInterface_0: 0x1d21f25200000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\nstorage_7 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0x0\n10_EXP_storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "getInvertedPrice(address)",
        "lineno": 456,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4885,
        "code": "[i];\n        ",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PriceFeedInterface_0: 0x2c10e90c00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\nmem_128 +\n32 +\n32*\ncalldata_PriceFeedInterface_4 + calldata_PriceFeedInterface_4: 0x0\ncalldata_PriceFeedInterface_4 + calldata_PriceFeedInterface_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x2c10e90c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "_function_0x2c10e90c",
        "lineno": 336,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9017,
        "code": "<= x)",
        "debug": "timestamp: 0x0\nstorage_9 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_cpy: 0x1\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_cpy: 0xff00\ncalldata_PriceFeedInterface_4 + calldata_PriceFeedInterface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PriceFeedInterface_0: 0x16c519ee00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `hasRecentPrices(address[])`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "hasRecentPrices(address[])",
        "lineno": 8,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9096,
        "code": "or information purposes only\n    uint public INTERVAL; // Frequency of updates in seconds\n    uint public VALIDITY; // Time in seconds for which data is considered recent\n    uint updateId;        // Update counter for this pricefeed; used as a check during investment\n\n    // METHODS\n\n    // CONSTRUCTOR\n\n    /// @dev Define and register a quote asset against which all prices are measured/based against\n    /// @param ofQuoteAsset Address of quote asset\n    /// @param quoteAssetName Name of quote asset\n    /// @param quoteAssetSymbol Symbol for quote asset\n    /// @param quoteAssetDecimals Decimal places for quote asset\n    /// @param quoteAssetUrl URL related to quote asset\n    /// @param quoteAssetIpfsHash IPFS hash associated with quote asset\n    /// @param quoteAssetChainId Chain ID associated with quote asset (e.g. \"1\" for main Ethereum network)\n    /// @param quoteAssetBreakIn Break-in address for the quote asset\n    /// @param quoteAssetBreakOut Break-out address for the quote asset\n    /// @param interval Number of seconds between pricefeed updates (this interval is not enforced on-chain, but should be followed by the datafeed maintainer)\n    /// @param validity Number of seconds that datafeed update information is valid for\n    function PriceFeed(\n        address ofQuoteAsset, // Inital entry in asset registrar contract is Melon (QUOTE_ASSET)\n        string quoteAssetName,\n        string quoteAssetSymbol,\n        uint quoteAssetDecimals,\n        string quoteAssetUrl,\n        string quoteAssetIpfsHash,\n        bytes32 quoteAssetChainId,\n        address quoteAssetBreakIn,\n        address quoteAssetBreakOut,\n        uint interval,\n        uint validity\n    ) {\n        QUOTE_ASSET = ofQuoteAsset;\n        register(\n            QUOTE_ASSET,\n            quoteAssetName,\n            quoteAssetSymbol,\n            quoteAssetDecimals,\n            quoteAssetUrl,\n            quoteAssetIpfsHash,\n            quoteAssetChainId,\n            quoteAssetBreakIn,\n            quoteAssetBreakOut\n        );\n        INTERVAL = interval;\n        VALIDITY = validity;\n    }\n\n    // PUBLIC METHODS\n\n    /// @dev Only Owner; Same sized input arrays\n    /// @dev Updates price of asset relative to QUOTE_ASSET\n    /** Ex:\n     *  Let QUOTE_ASSET == MLN (base units), let asset == EUR-T,\n     *  let Value of 1 EUR-T := 1 EUR == 0.080456789 MLN, hence price 0.080456789 MLN / EUR-T\n     *  and let EUR-T decimals == 8.\n     *  Input would be: information[EUR-T].price = 8045678 [MLN/ (EUR-T * 10**8)]\n     */\n    /// @param ofAssets list of asset addresses\n    /// @param newPrices list of prices for each of the assets\n    function update(address[] ofAssets, uint[] newPrices)\n        pre_cond(isOwner())\n        pre_cond(ofAssets.length == newPrices.length)\n    {\n        updateId += 1;\n        for (uint i = 0; i < ofAssets.length; ++i) {\n            require(information[ofAssets[i]].timestamp != now); // prevent two updates in one block\n            require(information[ofAssets[i]].exists);\n            information[ofAssets[i]].timestamp = now;\n            information[ofAssets[i]].price = newPrices[i];\n        }\n        PriceUpdated(now);\n    }\n\n    // PUBLIC VIEW METHODS\n\n    // Get pricefeed specific information\n    function getQuoteAsset() view returns (address) { return QUOTE_ASSET; }\n    function getInterval() view returns (uint) { return INTERVAL; }\n    function getValidity() view returns (uint) { return VALIDITY; }\n    function getLastUpdateId() view returns (uint) { return updateId; }\n\n    /// @notice Whether price of asset has been updated less than VALIDITY seconds ago\n    /// @param ofAsset Existend asset in AssetRegistrar\n    /// @return isRecent Price information ofAsset is recent\n    function hasRecentPrice(address ofAsset)\n        view\n        pre_cond(information[ofAsset].exists)\n        returns (bool isRecent)\n    {\n        return sub(now, information[ofAsset].timestamp) <= VALIDITY;\n    }\n\n    /// @notice Whether prices of assets have been updated less than VALIDITY seconds ago\n    /// @param ofAssets All asstes existend in AssetRegistrar\n    /// @return isRecent Price information ofAssets array is recent\n    function hasRecentPrices(address[] ofAssets)\n        view\n        returns (bool areRecent)\n    {\n        for (uint i; i < ofAssets.length; i++) {\n            if (!hasRecentPrice(ofAssets[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n    @notice Gets price of an asset multiplied by ten to the power of assetDecimals\n    @dev Asset has been registered\n    @param ofAsset Asset for which price should be returned\n    @return {\n      \"isRecent\": \"Whether the returned price is valid (as defined by VALIDITY)\",\n      \"price\": \"Price formatting: mul(exchangePrice, 10 ** decimal), to avoid floating numbers\",\n      \"decimal\": \"Decimal, order of magnitude of precision, of the Asset as in ERC223 token standard\",\n    }\n    */\n    function getPrice(address ofAsset)\n        view\n        returns (bool isRecent, uint price, uint decimal)\n    {\n        return (\n            hasRecentPrice(ofAsset),\n            information[ofAsset].price,\n            information[ofAsset].decimal\n        );\n    }\n\n    /**\n    @notice Price of a registered asset in format (bool areRecent, uint[] prices, uint[] decimals)\n    @dev Convention for price formatting: mul(price, 10 ** decimal), to avoid floating numbers\n    @param ofAssets Assets for which prices should be returned\n    @return {\n        \"areRecent\":    \"Whether all of the prices are fresh, given VALIDITY interval\",\n        \"prices\":       \"Array of prices\",\n        \"decimals\":     \"Array of decimal places for returned assets\"\n    }\n    */\n    function getPrices(address[] ofAssets)\n        view\n        returns (bool areRecent, uint[] prices, uint[] decimals)\n    {\n        areRecent = true;\n        for (uint i; i < ofAssets.length; i++) {\n            var (isRecent, price, decimal) = getPrice(ofAssets[i]);\n            if (!isRecent) {\n                areRecent = false;\n            }\n            prices[i] = price;\n            decimals[i] = decimal;\n        }\n    }\n\n    /**\n    @notice Gets inverted price of an asset\n    @dev Asset has been initialised and its price is non-zero\n    @dev Existing price ofAssets quoted in QUOTE_ASSET (convention)\n    @param ofAsset Asset for which inverted price should be return\n    @return {\n        \"isRecent\": \"Whether the price is fresh, given VALIDITY interval\",\n        \"invertedPrice\": \"Price based (instead of quoted) against QUOTE_ASSET\",\n        \"decimal\": \"Decimal places for this asset\"\n    }\n    */\n    function getInvertedPrice(address ofAsset)\n        view\n        returns (bool isRecent, uint invertedPrice, uint decimal)\n    {\n        // inputPrice quoted in QUOTE_ASSET and multiplied by 10 ** assetDecimal\n        var (isInvertedRecent, inputPrice, assetDecimal) = getPrice(ofAsset);\n\n        // outputPrice based in QUOTE_ASSET and multiplied by 10 ** quoteDecimal\n        uint quoteDecimal = getDecimals(QUOTE_ASSET);\n\n        return (\n            isInvertedRecent,\n            mul(10 ** uint(quoteDecimal), 10 ** uint(assetDecimal)) / inputPrice,\n            quoteDecimal\n        );\n    }\n\n    /**\n    @notice Gets reference price of an asset pair\n    @dev One of the address is equal to quote asset\n    @dev either ofBase == QUOTE_ASSET or ofQuote == QUOTE_ASSET\n    @param ofBase Address of base asset\n    @param ofQuote Address of quote asset\n    @return {\n        \"isRecent\": \"Whether the price is fresh, given VALIDITY interval\",\n        \"referencePrice\": \"Reference price\",\n        \"decimal\": \"Decimal places for this asset\"\n    }\n    */\n    function getReferencePrice(address ofBase, address ofQuote)\n        view\n        returns (bool isRecent, uint referencePrice, uint decimal)\n    {\n        if (getQuoteAsset() == ofQuote) {\n            (isRecent, referencePrice, decimal) = getPrice(ofBase);\n        } else if (getQuoteAsset() == ofBase) {\n            (isRecent, referencePrice, decimal) = getInvertedPrice(ofQuote);\n        } else {\n            revert(); // no suitable reference price available\n        }\n    }\n\n    /// @notice Gets price of Order\n    /// @param sellAsset Address of the asset to be sold\n    /// @param buyAsset Address of the asset to be bought\n    /// @param sellQuantity Quantity in base units being sold of sellAsset\n    /// @param buyQuantity Quantity in base units being bought of buyAsset\n    /// @return orderPrice Price as determined by an order\n    function getOrderPrice(\n        address sellAsset,\n        address buyAsset,\n        uint sellQuantity,\n        uint buyQuantity\n    )\n        view\n        returns (uint orderPrice)\n    {\n        return mul(buyQuantity, 10 ** uint(getDecimals(sellAsset))) / sellQuantity;\n    }\n\n    /// @notice Checks whether data exists for a given asset pair\n    /// @dev Prices are only upated against QUOTE_ASSET\n    /// @param sellAsset Asset for which check to be done if data exists\n    /// @param buyAsset Asset for which check to be done if data exists\n    /// @return Whether assets exist for given asset pair\n    function existsPriceOnAssetPair(address sellAsset, address buyAsset)\n        view\n        returns (bool isExistent)\n    {\n        return\n            hasRecentPrice(sellAsset) && // Is tradable asset (TODO cleaner) and datafeed delivering data\n            hasRecentPrice(buyAsset) && // Is tradable asset (TODO cleaner) and datafeed delivering data\n            (buyAsset == QUOTE_ASSET || sellAsset == QUOTE_ASSET) && // One asset must be QUOTE_ASSET\n            (buyAsset != QUOTE_ASSET || sellAsset != QUOTE_ASSET); // Pair must consists of diffrent assets\n    }\n}",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4 +\n5: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4 +\n6: 0x6216ec42be700f1ba15859d0dff147cb5d539b83b5060bffffffffffffffffc9\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4_+\n6: 0xfedbcb3a8afaffc490bd62b47b142a184a3d6f48c724912004003faf88d0a4fc\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_PriceFeedInterface_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_PriceFeedInterface_0: 0x29092d0e00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceFeedInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `remove(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x79a8ddb299bb4af1f9ee206af9689dd687d8ede4.sol",
        "function": "remove(address)",
        "lineno": 265,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}