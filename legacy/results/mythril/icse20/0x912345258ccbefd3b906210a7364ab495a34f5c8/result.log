{"error": null, "issues": [{"address": 1285, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1297, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1306, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1312, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1355, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1367, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1376, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1382, "code": "string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalanc", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3248, "code": "ly;\n\tinitialized[msg.sen", "debug": "storage_9: 0x0\nstorage_11: 0x1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `TokenERC20(uint256,string,string)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 51, "title": "Integer Underflow", "type": "Warning"}, {"address": 3469, "code": "alance() constan", "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3577, "code": "amount;             ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_13: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "buy()", "lineno": 163, "title": "Exception state", "type": "Informational"}, {"address": 3995, "code": "m, address _to, uint256 _value) public returns (bool suc", "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_14: 0x1\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_12: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "transfer(address,uint256)", "lineno": 127, "title": "Exception state", "type": "Informational"}, {"address": 4168, "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "setMinBalance(uint256)", "lineno": 186, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4914, "code": "utes an event reflecting on ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "transfer(address,uint256)", "lineno": 175, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5986, "code": ". They should never fail", "debug": "storage_8: 0x68f0ede84e9e3679e5d9c777f60c121dfb2f1d8901fc2c61018c07fdc5051442\nstorage_10: 0xfffde5182c5d6e151fe124a9f943e4e6bea6d0007d18911ef911f40322783113\nstorage_9: 0xe97095e74dcb6e710e00120080166d82597f09483d047580d8d0037f45828805\ncalldata_x32323_32 + 36: 0x7ffc14ab0a224221440b55d1b5fb0c529462a5221802fdaefd917f713b35d309\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x7ff7fffbcf2fe6a71ecf3cd73f1115b0cd9e8d1de8111e8200f40ff6de200001\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x7ffc14ab0a224221440b55d1b5fb0c529462a5221802fdaefd917f713b35d309\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "transferFrom(address,address,uint256)", "lineno": 115, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6508, "code": "return balanceOf[_address];\n", "debug": "storage_8: 0xd3ceea7f4abfef7fd2acd3f6c88e041981680b362705e599222d202003c0a041\nstorage_10: 0xcc2c2ec1ca4030d1928f10e8d05e55958e6ef22dc6d184194f2c178020040041\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_9: 0xd3ceea7f4abfef7fd2acd3f6c88e041981680b362705e599222d202003c0a042\ncalldata_x32323_0: 0xb69ef8a800000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `balance()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "balance()", "lineno": 88, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6927, "code": "ddress _address) internal re", "debug": "storage_8: 0xd3ceea7f4abfef7fd2acd3f6c88e041981680b362705e599222d202003c0a041\nstorage_10: 0xcc2c2ec1ca4030d1928f10e8d05e55958e6ef22dc6d184194f2c178020040041\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_9: 0xd3ceea7f4abfef7fd2acd3f6c88e041981680b362705e599222d202003c0a042\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x0\ncalldata_x32323_32 + 36: 0x0\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "transferFrom(address,address,uint256)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7012, "code": "is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 23000000 * 10 ** uint256(decimals);\n    uint256 airdropAmount = 3 * 10 ** uint256(decimals);\n    uint256 totalairdrop =  airdropAmount * 2000000;\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalance(msg.sender);\n    }\n\n   function balance_(address _address) constant returns (uint256) {\n    \treturn getBalance(_address);\n\n    }\n\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply < maxSupply && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] = airdropAmount;\n            totalSupply += airdropAmount;\n        }\n        return true;\n    }\n\n\n\n    function getBalance(address _address) internal returns (uint256) {\n\n        if (totalSupply < maxSupply && !initialized[_address]) {\n            initialized[_address] = true;\n            balanceOf[_address] = airdropAmount;\n            totalSupply += airdropAmount;\n            return balanceOf[_address];\n        }\n        else {\n            return balanceOf[_address];\n\n        }\n\n    }\n\n\n\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n\tinitialize(_from);\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\tinitialize(_to);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 17, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7026, "code": "is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 23000000 * 10 ** uint256(decimals);\n    uint256 airdropAmount = 3 * 10 ** uint256(decimals);\n    uint256 totalairdrop =  airdropAmount * 2000000;\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a669\";\n        symbol = \"\u6e2c\u8a669\";         \n    }\n\n    function balance() constant returns (uint256) {\n        return getBalance(msg.sender);\n    }\n\n   function balance_(address _address) constant returns (uint256) {\n    \treturn getBalance(_address);\n\n    }\n\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply < maxSupply && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] = airdropAmount;\n            totalSupply += airdropAmount;\n        }\n        return true;\n    }\n\n\n\n    function getBalance(address _address) internal returns (uint256) {\n\n        if (totalSupply < maxSupply && !initialized[_address]) {\n            initialized[_address] = true;\n            balanceOf[_address] = airdropAmount;\n            totalSupply += airdropAmount;\n            return balanceOf[_address];\n        }\n        else {\n            return balanceOf[_address];\n\n        }\n\n    }\n\n\n\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n\tinitialize(_from);\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\tinitialize(_to);\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/36/0x912345258ccbefd3b906210a7364ab495a34f5c8.sol", "function": "TokenERC20(uint256,string,string)", "lineno": 17, "title": "Integer Overflow ", "type": "Warning"}], "success": true}