{
  "contract": "0x2138ffe292fd0953f7fe2569111246e4de9ff1dc",
  "tool": "mythril",
  "start": 1563524160.1291485,
  "end": 1563525166.2274547,
  "duration": 1006.0983061790466,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 417,
        "code": "t256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        ",
        "debug": "calldata_MarketPrice_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MarketPrice_0: 0x1833fa4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `update(uint256,string,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "update(uint256,string,uint256,uint256,uint256,uint256)",
        "lineno": 83,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2846,
        "code": "TH with low gas limits.\n    f",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "execute(address,uint256,bytes)",
        "lineno": 115,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 3002,
        "code": "dater\n    function donate(",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function requestUpdate(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "requestUpdate(uint256)",
        "lineno": 129,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3244,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function donate(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "donate()",
        "lineno": 135,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3308,
        "code": "    mapping(uint => Token) public tokens;\n\n    address public sender;\n    address public creator;\n\n    event NewPrice(uint id, string token);\n    event DeletePrice(uint id);\n    event UpdatedPrice(uint id);\n    event RequestUpdate(uint id);\n\n    struct Token {\n        string name;\n        uint256 eth;\n        uint256 usd;\n        uint256 eur;\n        uint256 gbp;\n        uint block;\n    }\n\n    // initialize function\n    function MarketPrice() {\n        creator = msg.sender;\n        sender = msg.sender;\n    }\n\n    // returns the Token struct\n    function getToken(uint _id) internal constant returns (Token) {\n        return tokens[_id];\n    }\n\n    // returns rate price of coin related to ETH.\n    function ETH(uint _id) constant returns (uint256) {\n        return tokens[_id].eth;\n    }\n\n    // returns 0.01 value in United States Dollar\n    function USD(uint _id) constant returns (uint256) {\n        return tokens[_id].usd;\n    }\n\n    // returns 0.01 value in Euro\n    function EUR(uint _id) constant returns (uint256) {\n        return tokens[_id].eur;\n    }\n\n    // returns 0.01 value in British Pound\n    function GBP(uint _id) constant returns (uint256) {\n        return tokens[_id].gbp;\n    }\n\n    // returns block when price was updated last\n    function updatedAt(uint _id) constant returns (uint) {\n        return tokens[_id].block;\n    }\n\n    // update market rates in USD, EURO, and GBP for a specific coin\n    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        require(msg.sender==sender);\n        DeletePrice(id);\n        delete tokens[id];\n    }\n\n    // change creator address\n    function changeCreator(address _creator){\n        require(msg.sender==creator);\n        creator = _creator;\n    }\n\n    // change sender address\n    function changeSender(address _sender){\n        require(msg.sender==creator);\n        sender = _sender;\n    }\n\n    // execute function for creator if ERC20's get stuck in this wallet\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n        require(msg.sender==creator);\n        require(_to.call.value(_value)(_data));\n        return 0;\n    }\n\n    // default function so this contract can accept ETH with low gas limits.\n    function() payable {\n\n    }\n\n    // public function for requesting an updated price from server\n    // using this function requires a payment of $0.35 USD\n    function requestUpdate(uint id) external payable {\n        uint256 weiAmount = tokens[0].usd * 35;\n        require(msg.value >= weiAmount);\n        sender.transfer(msg.value);\n        RequestUpdate(id);\n    }\n\n    // donation function that get forwarded to the contract updater\n    function donate() external payable {\n        require(msg.value >= 0);\n        sender.transfer(msg.value);\n    }\n\n}",
        "debug": "keccac_0_+_keccac_calldata_MarketPrice_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 + keccac_calldata_MarketPrice_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MarketPrice_0: 0x1833fa4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `update(uint256,string,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "update(uint256,string,uint256,uint256,uint256,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3337,
        "code": "    mapping(uint => Token) public tokens;\n\n    address public sender;\n    address public creator;\n\n    event NewPrice(uint id, string token);\n    event DeletePrice(uint id);\n    event UpdatedPrice(uint id);\n    event RequestUpdate(uint id);\n\n    struct Token {\n        string name;\n        uint256 eth;\n        uint256 usd;\n        uint256 eur;\n        uint256 gbp;\n        uint block;\n    }\n\n    // initialize function\n    function MarketPrice() {\n        creator = msg.sender;\n        sender = msg.sender;\n    }\n\n    // returns the Token struct\n    function getToken(uint _id) internal constant returns (Token) {\n        return tokens[_id];\n    }\n\n    // returns rate price of coin related to ETH.\n    function ETH(uint _id) constant returns (uint256) {\n        return tokens[_id].eth;\n    }\n\n    // returns 0.01 value in United States Dollar\n    function USD(uint _id) constant returns (uint256) {\n        return tokens[_id].usd;\n    }\n\n    // returns 0.01 value in Euro\n    function EUR(uint _id) constant returns (uint256) {\n        return tokens[_id].eur;\n    }\n\n    // returns 0.01 value in British Pound\n    function GBP(uint _id) constant returns (uint256) {\n        return tokens[_id].gbp;\n    }\n\n    // returns block when price was updated last\n    function updatedAt(uint _id) constant returns (uint) {\n        return tokens[_id].block;\n    }\n\n    // update market rates in USD, EURO, and GBP for a specific coin\n    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        require(msg.sender==sender);\n        DeletePrice(id);\n        delete tokens[id];\n    }\n\n    // change creator address\n    function changeCreator(address _creator){\n        require(msg.sender==creator);\n        creator = _creator;\n    }\n\n    // change sender address\n    function changeSender(address _sender){\n        require(msg.sender==creator);\n        sender = _sender;\n    }\n\n    // execute function for creator if ERC20's get stuck in this wallet\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n        require(msg.sender==creator);\n        require(_to.call.value(_value)(_data));\n        return 0;\n    }\n\n    // default function so this contract can accept ETH with low gas limits.\n    function() payable {\n\n    }\n\n    // public function for requesting an updated price from server\n    // using this function requires a payment of $0.35 USD\n    function requestUpdate(uint id) external payable {\n        uint256 weiAmount = tokens[0].usd * 35;\n        require(msg.value >= weiAmount);\n        sender.transfer(msg.value);\n        RequestUpdate(id);\n    }\n\n    // donation function that get forwarded to the contract updater\n    function donate() external payable {\n        require(msg.value >= 0);\n        sender.transfer(msg.value);\n    }\n\n}",
        "debug": "calldata_MarketPrice_4 + calldata_MarketPrice_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MarketPrice_0: 0x1833fa4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `update(uint256,string,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "update(uint256,string,uint256,uint256,uint256,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3351,
        "code": "    mapping(uint => Token) public tokens;\n\n    address public sender;\n    address public creator;\n\n    event NewPrice(uint id, string token);\n    event DeletePrice(uint id);\n    event UpdatedPrice(uint id);\n    event RequestUpdate(uint id);\n\n    struct Token {\n        string name;\n        uint256 eth;\n        uint256 usd;\n        uint256 eur;\n        uint256 gbp;\n        uint block;\n    }\n\n    // initialize function\n    function MarketPrice() {\n        creator = msg.sender;\n        sender = msg.sender;\n    }\n\n    // returns the Token struct\n    function getToken(uint _id) internal constant returns (Token) {\n        return tokens[_id];\n    }\n\n    // returns rate price of coin related to ETH.\n    function ETH(uint _id) constant returns (uint256) {\n        return tokens[_id].eth;\n    }\n\n    // returns 0.01 value in United States Dollar\n    function USD(uint _id) constant returns (uint256) {\n        return tokens[_id].usd;\n    }\n\n    // returns 0.01 value in Euro\n    function EUR(uint _id) constant returns (uint256) {\n        return tokens[_id].eur;\n    }\n\n    // returns 0.01 value in British Pound\n    function GBP(uint _id) constant returns (uint256) {\n        return tokens[_id].gbp;\n    }\n\n    // returns block when price was updated last\n    function updatedAt(uint _id) constant returns (uint) {\n        return tokens[_id].block;\n    }\n\n    // update market rates in USD, EURO, and GBP for a specific coin\n    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        require(msg.sender==sender);\n        DeletePrice(id);\n        delete tokens[id];\n    }\n\n    // change creator address\n    function changeCreator(address _creator){\n        require(msg.sender==creator);\n        creator = _creator;\n    }\n\n    // change sender address\n    function changeSender(address _sender){\n        require(msg.sender==creator);\n        sender = _sender;\n    }\n\n    // execute function for creator if ERC20's get stuck in this wallet\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n        require(msg.sender==creator);\n        require(_to.call.value(_value)(_data));\n        return 0;\n    }\n\n    // default function so this contract can accept ETH with low gas limits.\n    function() payable {\n\n    }\n\n    // public function for requesting an updated price from server\n    // using this function requires a payment of $0.35 USD\n    function requestUpdate(uint id) external payable {\n        uint256 weiAmount = tokens[0].usd * 35;\n        require(msg.value >= weiAmount);\n        sender.transfer(msg.value);\n        RequestUpdate(id);\n    }\n\n    // donation function that get forwarded to the contract updater\n    function donate() external payable {\n        require(msg.value >= 0);\n        sender.transfer(msg.value);\n    }\n\n}",
        "debug": "calldata_MarketPrice_4 + calldata_MarketPrice_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MarketPrice_0: 0x1833fa4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `update(uint256,string,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "update(uint256,string,uint256,uint256,uint256,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3373,
        "code": "    mapping(uint => Token) public tokens;\n\n    address public sender;\n    address public creator;\n\n    event NewPrice(uint id, string token);\n    event DeletePrice(uint id);\n    event UpdatedPrice(uint id);\n    event RequestUpdate(uint id);\n\n    struct Token {\n        string name;\n        uint256 eth;\n        uint256 usd;\n        uint256 eur;\n        uint256 gbp;\n        uint block;\n    }\n\n    // initialize function\n    function MarketPrice() {\n        creator = msg.sender;\n        sender = msg.sender;\n    }\n\n    // returns the Token struct\n    function getToken(uint _id) internal constant returns (Token) {\n        return tokens[_id];\n    }\n\n    // returns rate price of coin related to ETH.\n    function ETH(uint _id) constant returns (uint256) {\n        return tokens[_id].eth;\n    }\n\n    // returns 0.01 value in United States Dollar\n    function USD(uint _id) constant returns (uint256) {\n        return tokens[_id].usd;\n    }\n\n    // returns 0.01 value in Euro\n    function EUR(uint _id) constant returns (uint256) {\n        return tokens[_id].eur;\n    }\n\n    // returns 0.01 value in British Pound\n    function GBP(uint _id) constant returns (uint256) {\n        return tokens[_id].gbp;\n    }\n\n    // returns block when price was updated last\n    function updatedAt(uint _id) constant returns (uint) {\n        return tokens[_id].block;\n    }\n\n    // update market rates in USD, EURO, and GBP for a specific coin\n    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        require(msg.sender==sender);\n        DeletePrice(id);\n        delete tokens[id];\n    }\n\n    // change creator address\n    function changeCreator(address _creator){\n        require(msg.sender==creator);\n        creator = _creator;\n    }\n\n    // change sender address\n    function changeSender(address _sender){\n        require(msg.sender==creator);\n        sender = _sender;\n    }\n\n    // execute function for creator if ERC20's get stuck in this wallet\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n        require(msg.sender==creator);\n        require(_to.call.value(_value)(_data));\n        return 0;\n    }\n\n    // default function so this contract can accept ETH with low gas limits.\n    function() payable {\n\n    }\n\n    // public function for requesting an updated price from server\n    // using this function requires a payment of $0.35 USD\n    function requestUpdate(uint id) external payable {\n        uint256 weiAmount = tokens[0].usd * 35;\n        require(msg.value >= weiAmount);\n        sender.transfer(msg.value);\n        RequestUpdate(id);\n    }\n\n    // donation function that get forwarded to the contract updater\n    function donate() external payable {\n        require(msg.value >= 0);\n        sender.transfer(msg.value);\n    }\n\n}",
        "debug": "keccac_0_+_keccac_calldata_MarketPrice_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_MarketPrice_4 + calldata_MarketPrice_32 + 4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MarketPrice_0: 0x1833fa4c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `update(uint256,string,uint256,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "update(uint256,string,uint256,uint256,uint256,uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3454,
        "code": "    mapping(uint => Token) public tokens;\n\n    address public sender;\n    address public creator;\n\n    event NewPrice(uint id, string token);\n    event DeletePrice(uint id);\n    event UpdatedPrice(uint id);\n    event RequestUpdate(uint id);\n\n    struct Token {\n        string name;\n        uint256 eth;\n        uint256 usd;\n        uint256 eur;\n        uint256 gbp;\n        uint block;\n    }\n\n    // initialize function\n    function MarketPrice() {\n        creator = msg.sender;\n        sender = msg.sender;\n    }\n\n    // returns the Token struct\n    function getToken(uint _id) internal constant returns (Token) {\n        return tokens[_id];\n    }\n\n    // returns rate price of coin related to ETH.\n    function ETH(uint _id) constant returns (uint256) {\n        return tokens[_id].eth;\n    }\n\n    // returns 0.01 value in United States Dollar\n    function USD(uint _id) constant returns (uint256) {\n        return tokens[_id].usd;\n    }\n\n    // returns 0.01 value in Euro\n    function EUR(uint _id) constant returns (uint256) {\n        return tokens[_id].eur;\n    }\n\n    // returns 0.01 value in British Pound\n    function GBP(uint _id) constant returns (uint256) {\n        return tokens[_id].gbp;\n    }\n\n    // returns block when price was updated last\n    function updatedAt(uint _id) constant returns (uint) {\n        return tokens[_id].block;\n    }\n\n    // update market rates in USD, EURO, and GBP for a specific coin\n    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n        require(msg.sender==sender);\n        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n        NewPrice(id, _token);\n    }\n\n    // delete a token from the contract\n    function deleteToken(uint id) {\n        require(msg.sender==sender);\n        DeletePrice(id);\n        delete tokens[id];\n    }\n\n    // change creator address\n    function changeCreator(address _creator){\n        require(msg.sender==creator);\n        creator = _creator;\n    }\n\n    // change sender address\n    function changeSender(address _sender){\n        require(msg.sender==creator);\n        sender = _sender;\n    }\n\n    // execute function for creator if ERC20's get stuck in this wallet\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n        require(msg.sender==creator);\n        require(_to.call.value(_value)(_data));\n        return 0;\n    }\n\n    // default function so this contract can accept ETH with low gas limits.\n    function() payable {\n\n    }\n\n    // public function for requesting an updated price from server\n    // using this function requires a payment of $0.35 USD\n    function requestUpdate(uint id) external payable {\n        uint256 weiAmount = tokens[0].usd * 35;\n        require(msg.value >= weiAmount);\n        sender.transfer(msg.value);\n        RequestUpdate(id);\n    }\n\n    // donation function that get forwarded to the contract updater\n    function donate() external payable {\n        require(msg.value >= 0);\n        sender.transfer(msg.value);\n    }\n\n}",
        "debug": "storage_keccac_calldata_MarketPrice_4 + 0: 0xbe806f1fb9a91febe830a18c9b68af7fd7defe83d2ebeeebc7db7ebfffffffc1\nkeccac_keccac_calldata_MarketPrice_4_+_0: 0xfedf99ff7ffff7ffcfffffffffefffbffe7fffffff5f3fffffc069feffffc800\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MarketPrice_0: 0x6297c16c00000000000000000000000000000000000000000000000000000000\ncalldatasize_MarketPrice: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `deleteToken(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/10/0x2138ffe292fd0953f7fe2569111246e4de9ff1dc.sol",
        "function": "deleteToken(uint256)",
        "lineno": 27,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}