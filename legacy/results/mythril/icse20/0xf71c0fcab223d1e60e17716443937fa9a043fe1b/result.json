{
  "contract": "0xf71c0fcab223d1e60e17716443937fa9a043fe1b",
  "tool": "mythril",
  "start": 1563279892.337086,
  "end": 1563279955.6590123,
  "duration": 63.32192635536194,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1241,
        "code": "Distr public {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= _value;\n             balances[addresses[i]] += _value;\n             Transfer(owner, addresses[i], _value);\n         }\n    }\n    \n    function balanceOf(address _owner) constant public returns (uint256) ",
        "debug": "calldata_Smile_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Smile_0: 0xd519bdcb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Smile: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `distributeSML(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "distributeSML(address[],uint256)",
        "lineno": 74,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2083,
        "code": "s _to, uint256 _amount) onlyPayload",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Smile: 0x60\ncalldata_Smile_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2436,
        "code": "][msg.sender] -= _amoun",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Smile_32_+_4: 0xc8ad1292fc16ef648490c9b6f6a7ad897261541bdd738f31940d869d9824c19a\ncalldatasize_Smile: 0x800000000000000000000000000000000000000000000000000000000020\ncalldata_Smile_32 + 36: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Smile_4: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\ncalldata_Smile_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 113,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3228,
        "code": "s _to, uint256 _amount) onlyPayload",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Smile: 0x4\ncalldata_Smile_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "transfer(address,uint256)",
        "lineno": 92,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3445,
        "code": "       balances[_to] +=",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Smile_4: 0x23d8a8520f724073445afe4bb9673704f5f700b5059efe000e50c6dfebb67db9\ncalldatasize_Smile: 0x800000000000000000000000000000000000000000000000000050\ncalldata_Smile_32 + 4: 0xef9dac035840d3446cf7e308735b46f504077e95d5dcc1feef6ce61e0ba5f9a9\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xef9dac035840d3446cf7e308735b46f504077e95d5dcc1feef6ce61e0ba5f9a9\ncalldata_Smile_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "transfer(address,uint256)",
        "lineno": 98,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3987,
        "code": "            Transfer(owne",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0x0\ncalldata_Smile_32 + 4: 0x1\ncalldata_Smile_4 + calldata_Smile_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Smile_0: 0xd519bdcb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Smile: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `distributeSML(address[],uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "distributeSML(address[],uint256)",
        "lineno": 78,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 4087,
        "code": " _value);\n         }\n    }\n    \n",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Smile_cpy: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_Smile_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_Smile_4 + calldata_Smile_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Smile_0: 0xd519bdcb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Smile: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `distributeSML(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "distributeSML(address[],uint256)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4663,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 150,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4663,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4921\n",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 150,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4921,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xf71c0fcab223d1e60e17716443937fa9a043fe1b.sol",
        "function": "withdrawForeignTokens(address)",
        "lineno": 150,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}