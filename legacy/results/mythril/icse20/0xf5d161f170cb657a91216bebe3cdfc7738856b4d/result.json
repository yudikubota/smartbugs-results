{
  "contract": "0xf5d161f170cb657a91216bebe3cdfc7738856b4d",
  "tool": "mythril",
  "start": 1563505803.3022685,
  "end": 1563506037.5867417,
  "duration": 234.28447318077087,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 925,
        "code": "torsBonus = 0;\n\n    // Gathered funds ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x8000\ncalldata_ZupplyToken_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "_function_0x0c3f6acf",
        "lineno": 155,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 980,
        "code": " function() payable \n    {\n        buyTokens();\n    }\n}",
        "debug": "calldata_ZupplyToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZupplyToken_0: 0x111a742700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNewAttributes(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "setNewAttributes(string,string)",
        "lineno": 326,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2867,
        "code": "        }\n    }\n\n    function buyT",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x8000\ncalldatasize_ZupplyToken: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "fallback",
        "lineno": 216,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3734,
        "code": "    /// @dev Constr",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x8000\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 187,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3787,
        "code": "ens+= newTokens;\n        ",
        "debug": "callvalue: 0x2dfa44000000000000000000000000000000000000000000053b87205a2680a\nstorage_5: 0x200\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyTokensPresale()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 229,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3897,
        "code": "le onlyInState(State.ICORunning)\n",
        "debug": "storage_12: 0xd7571660ff9dbe0f603ff8000000000000000000000c12dd1c43c0eb9d87983f\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc5d1aefce020df6a381fc7fe0f7b62dec1e64b5f1464432ced9fc71ad2261080\ncallvalue: 0x62212105de4e05774543b05d748250333a3fabeb466b79d5e15f0795b70ef4\nstorage_9: 0x43f081ca11436be4992fa2f5a3768cbbb2a351a645236ffbb247ac8fd7fffb81\nstorage_5: 0x200\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyTokensPresale()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 235,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3913,
        "code": "   // min - 0.01 E",
        "debug": "storage_12: 0xd7571660ff9dbe0f603ff8000000000000000000000c12dd1c43c0eb9d87983f\nstorage_2: 0xc5d1aefce020df6a381fc7fe0f7b62dec1e64b5f1464432ced9fc71ad2261080\ncallvalue: 0x62212105de4e05774543b05d748250333a3fabeb466b79d5e15f0795b70ef4\nstorage_9: 0x43f081ca11436be4992fa2f5a3768cbbb2a351a645236ffbb247ac8fd7fffb81\nstorage_5: 0x200\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyTokensPresale()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 237,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3929,
        "code": "require(msg.value >= ((1 ethe",
        "debug": "storage_12: 0xcefe51563ff8880a9e2989ffc29b02ffebca8064810000018d87d582fdaf7ff6\ncallvalue: 0xe93c38f751f91ac6ba641460281acf1f8a8062fe903d06240c880417dd3b52\nstorage_9: 0xd5ffe9b5f7bce02a1e41064fc30811ffcb5913bbf611007c4832f7ef5c3f9601\nstorage_5: 0x200\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyTokensPresale()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 238,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3945,
        "code": "/ 100));\n        uint newTo",
        "debug": "storage_12: 0xd7571660ff9dbe0f603ff8000000000000000000000c12dd1c43c0eb9d87983f\ncallvalue: 0x62212105de4e05774543b05d748250333a3fabeb466b79d5e15f0795b70ef4\nstorage_9: 0x43f081ca11436be4992fa2f5a3768cbbb2a351a645236ffbb247ac8fd7fffb81\nstorage_11: 0xc5d1aefce020df6a381fc7fe0f7b62dec1e64b5f1464432ced9fc71ad2261080\nstorage_5: 0x200\ncalldata_ZupplyToken_0: 0x1d51187900000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\n",
        "description": "A possible integer overflow exists in the function `buyTokensPresale()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "buyTokensPresale()",
        "lineno": 238,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4526,
        "code": "ow] += _value;\n            \n     ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x8000\nstorage_8: 0x0\ncaller: 0x0\ncalldata_ZupplyToken_0: 0x315a095d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "withdrawTokens(uint256)",
        "lineno": 287,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8808,
        "code": "P\";\n    uint public constant decimals = 18;\n\n    // this includes DEVELOPERS_BONUS\n    uint public constant TOTAL_SUPPLY = 750000000 * (1 ether / 1 wei);\n    uint public constant DEVELOPERS_BONUS = 100000000 * (1 ether / 1 wei);\n    uint public constant EARLY_INV_BONUS = 50000000 * (1 ether / 1 wei);\n\n    uint public constant PRESALE_PRICE = 40000;  // per 1 Ether\n    uint public constant PRESALE_MAX_ETH = 2500;\n    // 100 mln tokens sold during presale\n    uint public constant PRESALE_TOKEN_SUPPLY_LIMIT = PRESALE_PRICE * PRESALE_MAX_ETH * (1 ether / 1 wei);\n\n    uint public constant ICO_PRICE = 20000;     // per 1 Ether\n\n    // 600 mln - this includes presale tokens\n    uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 600000000* (1 ether / 1 wei);\n\n    enum State{\n       Init,\n       Paused,\n\n       PresaleRunning,\n       PresaleFinished,\n\n       ICORunning,\n       ICOFinished\n    }\n\n    State public currentState = State.Init;\n    bool public enableTransfers = false;\n\n    address public teamTokenBonus = 0;\n    address public earlyInvestorsBonus = 0;\n\n    // Gathered funds can be withdrawn only to escrow's address.\n    address public escrow = 0;\n\n    // Token manager has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public tokenManager = 0;\n\n    uint public presaleSoldTokens = 0;\n    uint public icoSoldTokens = 0;\n    uint public totalSoldTokens = 0;\n    uint public totalWitdrowedToken = 0;\n\n/// Modifiers:\n    modifier onlyTokenManager()\n    {\n        require(msg.sender==tokenManager); \n        _; \n    }\n\n    modifier onlyInState(State state)\n    {\n        require(state==currentState); \n        _; \n    }\n\n/// Events:\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n\n/// Functions:\n    /// @dev Constructor\n    /// @param _tokenManager Token manager address.\n    function ZupplyToken(address _tokenManager, address _escrow, address _teamTokenBonus, address _eralyInvestorBonus) \n    {\n        tokenManager = _tokenManager;\n        teamTokenBonus = _teamTokenBonus;\n        escrow = _escrow;\n        earlyInvestorsBonus = _eralyInvestorBonus; \n\n        // send team + early investors bonus immediately\n        uint teamBonus = DEVELOPERS_BONUS;\n        balances[_teamTokenBonus] += teamBonus;\n        uint earlyBonus = EARLY_INV_BONUS;\n        balances[_eralyInvestorBonus] += earlyBonus;\n        supply+= teamBonus;\n        supply+= earlyBonus;\n\n        assert(PRESALE_TOKEN_SUPPLY_LIMIT==100000000 * (1 ether / 1 wei));\n        assert(TOTAL_SOLD_TOKEN_SUPPLY_LIMIT==600000000 * (1 ether / 1 wei));\n    }\n\n    function buyTokens() public payable\n    {\n        require(currentState==State.PresaleRunning || currentState==State.ICORunning);\n\n        if(currentState==State.PresaleRunning){\n            return buyTokensPresale();\n        }else{\n            return buyTokensICO();\n        }\n    }\n\n    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)\n    {\n        // min - 0.1 ETH\n        require(msg.value >= (1 ether / 1 wei) /10 );\n        uint newTokens = msg.value * PRESALE_PRICE;\n\n        require(presaleSoldTokens + newTokens + totalWitdrowedToken <= PRESALE_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        presaleSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function buyTokensICO() public payable onlyInState(State.ICORunning)\n    {\n        // min - 0.01 ETH\n        require(msg.value >= ((1 ether / 1 wei) / 100));\n        uint newTokens = msg.value * getPrice();\n\n        require(totalSoldTokens + newTokens + totalWitdrowedToken <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        icoSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function getPrice()constant returns(uint)\n    {\n        if(currentState==State.ICORunning){\n             return ICO_PRICE;\n        }else{\n             return PRESALE_PRICE;\n        }\n    }\n\n    function setState(State _nextState) public onlyTokenManager\n    {\n        //setState() method call shouldn't be entertained after ICOFinished\n        require(currentState != State.ICOFinished);\n        \n        currentState = _nextState;\n        // enable/disable transfers\n        //enable transfers only after ICOFinished, disable otherwise\n        enableTransfers = (currentState==State.ICOFinished);\n    }\n\n    function withdrawETH() public onlyTokenManager\n    {\n        if(this.balance > 0) \n        {\n            require(escrow.send(this.balance));\n        }\n        \n    }\n    \n    function withdrawTokens(uint256 _value) public onlyTokenManager\n    {\n        require(currentState == State.ICOFinished);\n        if((totalSoldTokens + totalWitdrowedToken + _value) <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT) \n        {\n            require(_value <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT - totalSoldTokens - totalWitdrowedToken);\n            \n            balances[escrow] += _value;\n            \n            totalWitdrowedToken += _value;\n            supply += _value;\n        }\n        \n    }\n\n/// Overrides:\n    function transfer(address _to, uint256 _value) returns(bool){\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.transfer(_to,_value);\n        \n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.transferFrom(_from,_to,_value);\n            \n    }\n\n    function approve(address _spender, uint256 _value) returns (bool) {\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.approve(_spender,_value);\n        \n    }\n    \n    function setNewAttributes(string _newName, string _newSymbol) public onlyTokenManager{\n        name = _newName;\n        symbol = _newSymbol;\n    }\n\n/// Setters/getters\n    function setTokenManager(address _mgr) public onlyTokenManager\n    {\n        tokenManager = _mgr;\n    }\n\n    // Default fallback function\n    function() payable \n    {\n        buyTokens();\n    }\n}",
        "debug": "storage_3: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffff00\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ZupplyToken_4 + calldata_ZupplyToken_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ZupplyToken_4 + calldata_ZupplyToken_4: 0x0\nstorage_8: 0x0\ncaller: 0x0\ncalldata_ZupplyToken_0: 0x111a742700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNewAttributes(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "setNewAttributes(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8822,
        "code": "P\";\n    uint public constant decimals = 18;\n\n    // this includes DEVELOPERS_BONUS\n    uint public constant TOTAL_SUPPLY = 750000000 * (1 ether / 1 wei);\n    uint public constant DEVELOPERS_BONUS = 100000000 * (1 ether / 1 wei);\n    uint public constant EARLY_INV_BONUS = 50000000 * (1 ether / 1 wei);\n\n    uint public constant PRESALE_PRICE = 40000;  // per 1 Ether\n    uint public constant PRESALE_MAX_ETH = 2500;\n    // 100 mln tokens sold during presale\n    uint public constant PRESALE_TOKEN_SUPPLY_LIMIT = PRESALE_PRICE * PRESALE_MAX_ETH * (1 ether / 1 wei);\n\n    uint public constant ICO_PRICE = 20000;     // per 1 Ether\n\n    // 600 mln - this includes presale tokens\n    uint public constant TOTAL_SOLD_TOKEN_SUPPLY_LIMIT = 600000000* (1 ether / 1 wei);\n\n    enum State{\n       Init,\n       Paused,\n\n       PresaleRunning,\n       PresaleFinished,\n\n       ICORunning,\n       ICOFinished\n    }\n\n    State public currentState = State.Init;\n    bool public enableTransfers = false;\n\n    address public teamTokenBonus = 0;\n    address public earlyInvestorsBonus = 0;\n\n    // Gathered funds can be withdrawn only to escrow's address.\n    address public escrow = 0;\n\n    // Token manager has exclusive priveleges to call administrative\n    // functions on this contract.\n    address public tokenManager = 0;\n\n    uint public presaleSoldTokens = 0;\n    uint public icoSoldTokens = 0;\n    uint public totalSoldTokens = 0;\n    uint public totalWitdrowedToken = 0;\n\n/// Modifiers:\n    modifier onlyTokenManager()\n    {\n        require(msg.sender==tokenManager); \n        _; \n    }\n\n    modifier onlyInState(State state)\n    {\n        require(state==currentState); \n        _; \n    }\n\n/// Events:\n    event LogBuy(address indexed owner, uint value);\n    event LogBurn(address indexed owner, uint value);\n\n/// Functions:\n    /// @dev Constructor\n    /// @param _tokenManager Token manager address.\n    function ZupplyToken(address _tokenManager, address _escrow, address _teamTokenBonus, address _eralyInvestorBonus) \n    {\n        tokenManager = _tokenManager;\n        teamTokenBonus = _teamTokenBonus;\n        escrow = _escrow;\n        earlyInvestorsBonus = _eralyInvestorBonus; \n\n        // send team + early investors bonus immediately\n        uint teamBonus = DEVELOPERS_BONUS;\n        balances[_teamTokenBonus] += teamBonus;\n        uint earlyBonus = EARLY_INV_BONUS;\n        balances[_eralyInvestorBonus] += earlyBonus;\n        supply+= teamBonus;\n        supply+= earlyBonus;\n\n        assert(PRESALE_TOKEN_SUPPLY_LIMIT==100000000 * (1 ether / 1 wei));\n        assert(TOTAL_SOLD_TOKEN_SUPPLY_LIMIT==600000000 * (1 ether / 1 wei));\n    }\n\n    function buyTokens() public payable\n    {\n        require(currentState==State.PresaleRunning || currentState==State.ICORunning);\n\n        if(currentState==State.PresaleRunning){\n            return buyTokensPresale();\n        }else{\n            return buyTokensICO();\n        }\n    }\n\n    function buyTokensPresale() public payable onlyInState(State.PresaleRunning)\n    {\n        // min - 0.1 ETH\n        require(msg.value >= (1 ether / 1 wei) /10 );\n        uint newTokens = msg.value * PRESALE_PRICE;\n\n        require(presaleSoldTokens + newTokens + totalWitdrowedToken <= PRESALE_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        presaleSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function buyTokensICO() public payable onlyInState(State.ICORunning)\n    {\n        // min - 0.01 ETH\n        require(msg.value >= ((1 ether / 1 wei) / 100));\n        uint newTokens = msg.value * getPrice();\n\n        require(totalSoldTokens + newTokens + totalWitdrowedToken <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT);\n\n        balances[msg.sender] += newTokens;\n        supply+= newTokens;\n        icoSoldTokens+= newTokens;\n        totalSoldTokens+= newTokens;\n\n        LogBuy(msg.sender, newTokens);\n    }\n\n    function getPrice()constant returns(uint)\n    {\n        if(currentState==State.ICORunning){\n             return ICO_PRICE;\n        }else{\n             return PRESALE_PRICE;\n        }\n    }\n\n    function setState(State _nextState) public onlyTokenManager\n    {\n        //setState() method call shouldn't be entertained after ICOFinished\n        require(currentState != State.ICOFinished);\n        \n        currentState = _nextState;\n        // enable/disable transfers\n        //enable transfers only after ICOFinished, disable otherwise\n        enableTransfers = (currentState==State.ICOFinished);\n    }\n\n    function withdrawETH() public onlyTokenManager\n    {\n        if(this.balance > 0) \n        {\n            require(escrow.send(this.balance));\n        }\n        \n    }\n    \n    function withdrawTokens(uint256 _value) public onlyTokenManager\n    {\n        require(currentState == State.ICOFinished);\n        if((totalSoldTokens + totalWitdrowedToken + _value) <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT) \n        {\n            require(_value <= TOTAL_SOLD_TOKEN_SUPPLY_LIMIT - totalSoldTokens - totalWitdrowedToken);\n            \n            balances[escrow] += _value;\n            \n            totalWitdrowedToken += _value;\n            supply += _value;\n        }\n        \n    }\n\n/// Overrides:\n    function transfer(address _to, uint256 _value) returns(bool){\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.transfer(_to,_value);\n        \n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns(bool){\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.transferFrom(_from,_to,_value);\n            \n    }\n\n    function approve(address _spender, uint256 _value) returns (bool) {\n        require(enableTransfers || msg.sender == tokenManager || msg.sender == teamTokenBonus || msg.sender == earlyInvestorsBonus );\n        return super.approve(_spender,_value);\n        \n    }\n    \n    function setNewAttributes(string _newName, string _newSymbol) public onlyTokenManager{\n        name = _newName;\n        symbol = _newSymbol;\n    }\n\n/// Setters/getters\n    function setTokenManager(address _mgr) public onlyTokenManager\n    {\n        tokenManager = _mgr;\n    }\n\n    // Default fallback function\n    function() payable \n    {\n        buyTokens();\n    }\n}",
        "debug": "calldata_ZupplyToken_4 + calldata_ZupplyToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_8: 0x0\ncaller: 0x0\ncalldata_ZupplyToken_0: 0x111a742700000000000000000000000000000000000000000000000000000000\ncalldatasize_ZupplyToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setNewAttributes(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/8/0xf5d161f170cb657a91216bebe3cdfc7738856b4d.sol",
        "function": "setNewAttributes(string,string)",
        "lineno": 122,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}