{
  "contract": "0x89df6e195c2030ce3830780b68ee0752c756f49e",
  "tool": "mythril",
  "start": 1563643373.7711675,
  "end": 1563644148.3989646,
  "duration": 774.62779712677,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 837,
        "code": "e;\n            bottle[id].info = info;\n            bottle[id].infoLocked = true;    \n        }\n    }\n    \n    function gift(uint id, address newOwner) public {\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].owner = newOwner;\n    ",
        "debug": "calldata_Whiskey_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeInfo(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 147,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1148,
        "code": "\n    }\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_4: 0xca\ncalldata_Whiskey_0: 0x7c9cd4500000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "_function_0x07c9cd45",
        "lineno": 127,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1702,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_4: 0xca\ncalldata_Whiskey_0: 0x83a076be00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "gift(uint256,address)",
        "lineno": 159,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2650,
        "code": "   \n    constructor() pub",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_4: 0xca\ncalldata_Whiskey_0: 0xa12a7ff300000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "_function_0xa12a7ff3",
        "lineno": 30,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3112,
        "code": "e;    \n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_4: 0xca\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3357,
        "code": "ottle[id].",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_32 + 4: 0xca\ncalldata_Whiskey_0: 0xd79875eb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "sell(uint256,uint256)",
        "lineno": 119,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3555,
        "code": "[id].owner",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Whiskey_4: 0xca\ncalldata_Whiskey_0: 0xd96a094a00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "buy(uint256)",
        "lineno": 134,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4942,
        "code": "ntract Whiskey {\n    \n   event Selling(\n        address seller,\n        address buyer,\n        uint price\n    );\n\n    uint public totalSupply = 201;\n    bool private initedCopper = false;\n    bool private initedBronze = false;\n    bool private initedSilver = false;\n    bool private initedGold = false;\n    bool private initedPlatinum = false;\n    \n    struct Bottle {\n        uint    id;\n        uint    price;\n        uint    sellPrice;\n        address owner;\n        string  name;\n        string  info;\n        bool    infoLocked;\n        bool    saleLocked;\n    }\n    \n    Bottle[202] public bottle;\n    \n    constructor() public {\n            bottle[1].id = 1;\n            bottle[1].price = 1 ether;\n            bottle[1].sellPrice = 1 ether;\n            bottle[1].owner = msg.sender;\n            bottle[1].infoLocked = false;\n            bottle[1].saleLocked = false;\n            bottle[201].id = 201;\n            bottle[201].price = 50000 ether;\n            bottle[201].sellPrice = 5000 ether;\n            bottle[201].owner = msg.sender;\n            bottle[201].infoLocked = false;\n            bottle[201].saleLocked = false;\n    }\n    \n    function initCopper() public {\n        if (initedCopper == false){\n            for (uint i = 2; i < 31; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 15 ether;\n                bottle[i].sellPrice = 15 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedCopper = true;\n        }\n    }\n    \n    function initBronze() public {\n        if (initedBronze == false) {\n            for (uint i = 31; i < 71; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 35 ether;\n                bottle[i].sellPrice = 35 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedBronze = true;\n        }\n    }\n    \n    function initSilver() public {\n         if (initedSilver == false) {\n             for (uint i = 71; i < 131; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 50 ether;\n                bottle[i].sellPrice = 50 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedSilver = true;\n         }\n    }\n    \n    function initGold() public {\n         if (initedGold == false) {\n             for (uint i = 131; i < 171; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 65 ether;\n                bottle[i].sellPrice = 65 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedGold = true;    \n        }\n    }\n    \n    function initPlatinum() public {\n        if (initedPlatinum == false) {\n            for (uint i = 171; i < 201; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 85 ether;\n                bottle[i].sellPrice = 85 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedPlatinum = true;\n        }\n    }\n    \n    function sell(uint price, uint id) public {\n        if (bottle[id].owner == msg.sender && price > bottle[id].price){\n            bottle[id].sellPrice = price;\n            bottle[id].saleLocked = false;\n        }\n    }\n    \n    function cancelSell (uint id) public {\n        if (bottle[id].owner == msg.sender) {\n            bottle[id].sellPrice = 0;\n            bottle[id].saleLocked = true;\n        }\n    }\n    \n    function buy(uint id) public payable {\n        if(bottle[id].sellPrice != msg.value || bottle[id].saleLocked == true) {\n        \trevert();\n        }\n        address seller = bottle[id].owner;\n        bottle[id].owner.transfer(msg.value);     \n        bottle[id].owner = msg.sender;\n        bottle[id].price = msg.value;\n        bottle[id].infoLocked = false;\n        bottle[id].saleLocked = true;\n        emit Selling(seller, msg.sender, msg.value);\n        \n    }\n    \n    function changeInfo(uint id, string name, string info) public {\n\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].name = name;\n            bottle[id].info = info;\n            bottle[id].infoLocked = true;    \n        }\n    }\n    \n    function gift(uint id, address newOwner) public {\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].owner = newOwner;\n            bottle[id].infoLocked = false;\n        }\n    }\n}",
        "debug": "keccac_4_+_2_+_7*calldata_Whiskey_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_4 + 2 + 7*calldata_Whiskey_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncaller: 0x0\nstorage_3 + 2 + 7*calldata_Whiskey_4: 0x0\ncalldata_Whiskey_4: 0xc9\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeInfo(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4971,
        "code": "ntract Whiskey {\n    \n   event Selling(\n        address seller,\n        address buyer,\n        uint price\n    );\n\n    uint public totalSupply = 201;\n    bool private initedCopper = false;\n    bool private initedBronze = false;\n    bool private initedSilver = false;\n    bool private initedGold = false;\n    bool private initedPlatinum = false;\n    \n    struct Bottle {\n        uint    id;\n        uint    price;\n        uint    sellPrice;\n        address owner;\n        string  name;\n        string  info;\n        bool    infoLocked;\n        bool    saleLocked;\n    }\n    \n    Bottle[202] public bottle;\n    \n    constructor() public {\n            bottle[1].id = 1;\n            bottle[1].price = 1 ether;\n            bottle[1].sellPrice = 1 ether;\n            bottle[1].owner = msg.sender;\n            bottle[1].infoLocked = false;\n            bottle[1].saleLocked = false;\n            bottle[201].id = 201;\n            bottle[201].price = 50000 ether;\n            bottle[201].sellPrice = 5000 ether;\n            bottle[201].owner = msg.sender;\n            bottle[201].infoLocked = false;\n            bottle[201].saleLocked = false;\n    }\n    \n    function initCopper() public {\n        if (initedCopper == false){\n            for (uint i = 2; i < 31; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 15 ether;\n                bottle[i].sellPrice = 15 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedCopper = true;\n        }\n    }\n    \n    function initBronze() public {\n        if (initedBronze == false) {\n            for (uint i = 31; i < 71; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 35 ether;\n                bottle[i].sellPrice = 35 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedBronze = true;\n        }\n    }\n    \n    function initSilver() public {\n         if (initedSilver == false) {\n             for (uint i = 71; i < 131; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 50 ether;\n                bottle[i].sellPrice = 50 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedSilver = true;\n         }\n    }\n    \n    function initGold() public {\n         if (initedGold == false) {\n             for (uint i = 131; i < 171; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 65 ether;\n                bottle[i].sellPrice = 65 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedGold = true;    \n        }\n    }\n    \n    function initPlatinum() public {\n        if (initedPlatinum == false) {\n            for (uint i = 171; i < 201; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 85 ether;\n                bottle[i].sellPrice = 85 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedPlatinum = true;\n        }\n    }\n    \n    function sell(uint price, uint id) public {\n        if (bottle[id].owner == msg.sender && price > bottle[id].price){\n            bottle[id].sellPrice = price;\n            bottle[id].saleLocked = false;\n        }\n    }\n    \n    function cancelSell (uint id) public {\n        if (bottle[id].owner == msg.sender) {\n            bottle[id].sellPrice = 0;\n            bottle[id].saleLocked = true;\n        }\n    }\n    \n    function buy(uint id) public payable {\n        if(bottle[id].sellPrice != msg.value || bottle[id].saleLocked == true) {\n        \trevert();\n        }\n        address seller = bottle[id].owner;\n        bottle[id].owner.transfer(msg.value);     \n        bottle[id].owner = msg.sender;\n        bottle[id].price = msg.value;\n        bottle[id].infoLocked = false;\n        bottle[id].saleLocked = true;\n        emit Selling(seller, msg.sender, msg.value);\n        \n    }\n    \n    function changeInfo(uint id, string name, string info) public {\n\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].name = name;\n            bottle[id].info = info;\n            bottle[id].infoLocked = true;    \n        }\n    }\n    \n    function gift(uint id, address newOwner) public {\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].owner = newOwner;\n            bottle[id].infoLocked = false;\n        }\n    }\n}",
        "debug": "calldata_Whiskey_4 + calldata_Whiskey_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_3 + 2 + 7*calldata_Whiskey_4: 0x0\ncalldata_Whiskey_4: 0xc9\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeInfo(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4985,
        "code": "ntract Whiskey {\n    \n   event Selling(\n        address seller,\n        address buyer,\n        uint price\n    );\n\n    uint public totalSupply = 201;\n    bool private initedCopper = false;\n    bool private initedBronze = false;\n    bool private initedSilver = false;\n    bool private initedGold = false;\n    bool private initedPlatinum = false;\n    \n    struct Bottle {\n        uint    id;\n        uint    price;\n        uint    sellPrice;\n        address owner;\n        string  name;\n        string  info;\n        bool    infoLocked;\n        bool    saleLocked;\n    }\n    \n    Bottle[202] public bottle;\n    \n    constructor() public {\n            bottle[1].id = 1;\n            bottle[1].price = 1 ether;\n            bottle[1].sellPrice = 1 ether;\n            bottle[1].owner = msg.sender;\n            bottle[1].infoLocked = false;\n            bottle[1].saleLocked = false;\n            bottle[201].id = 201;\n            bottle[201].price = 50000 ether;\n            bottle[201].sellPrice = 5000 ether;\n            bottle[201].owner = msg.sender;\n            bottle[201].infoLocked = false;\n            bottle[201].saleLocked = false;\n    }\n    \n    function initCopper() public {\n        if (initedCopper == false){\n            for (uint i = 2; i < 31; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 15 ether;\n                bottle[i].sellPrice = 15 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedCopper = true;\n        }\n    }\n    \n    function initBronze() public {\n        if (initedBronze == false) {\n            for (uint i = 31; i < 71; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 35 ether;\n                bottle[i].sellPrice = 35 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedBronze = true;\n        }\n    }\n    \n    function initSilver() public {\n         if (initedSilver == false) {\n             for (uint i = 71; i < 131; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 50 ether;\n                bottle[i].sellPrice = 50 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedSilver = true;\n         }\n    }\n    \n    function initGold() public {\n         if (initedGold == false) {\n             for (uint i = 131; i < 171; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 65 ether;\n                bottle[i].sellPrice = 65 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedGold = true;    \n        }\n    }\n    \n    function initPlatinum() public {\n        if (initedPlatinum == false) {\n            for (uint i = 171; i < 201; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 85 ether;\n                bottle[i].sellPrice = 85 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedPlatinum = true;\n        }\n    }\n    \n    function sell(uint price, uint id) public {\n        if (bottle[id].owner == msg.sender && price > bottle[id].price){\n            bottle[id].sellPrice = price;\n            bottle[id].saleLocked = false;\n        }\n    }\n    \n    function cancelSell (uint id) public {\n        if (bottle[id].owner == msg.sender) {\n            bottle[id].sellPrice = 0;\n            bottle[id].saleLocked = true;\n        }\n    }\n    \n    function buy(uint id) public payable {\n        if(bottle[id].sellPrice != msg.value || bottle[id].saleLocked == true) {\n        \trevert();\n        }\n        address seller = bottle[id].owner;\n        bottle[id].owner.transfer(msg.value);     \n        bottle[id].owner = msg.sender;\n        bottle[id].price = msg.value;\n        bottle[id].infoLocked = false;\n        bottle[id].saleLocked = true;\n        emit Selling(seller, msg.sender, msg.value);\n        \n    }\n    \n    function changeInfo(uint id, string name, string info) public {\n\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].name = name;\n            bottle[id].info = info;\n            bottle[id].infoLocked = true;    \n        }\n    }\n    \n    function gift(uint id, address newOwner) public {\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].owner = newOwner;\n            bottle[id].infoLocked = false;\n        }\n    }\n}",
        "debug": "calldata_Whiskey_4 + calldata_Whiskey_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_3 + 2 + 7*calldata_Whiskey_4: 0x0\ncalldata_Whiskey_4: 0xc9\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeInfo(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5007,
        "code": "ntract Whiskey {\n    \n   event Selling(\n        address seller,\n        address buyer,\n        uint price\n    );\n\n    uint public totalSupply = 201;\n    bool private initedCopper = false;\n    bool private initedBronze = false;\n    bool private initedSilver = false;\n    bool private initedGold = false;\n    bool private initedPlatinum = false;\n    \n    struct Bottle {\n        uint    id;\n        uint    price;\n        uint    sellPrice;\n        address owner;\n        string  name;\n        string  info;\n        bool    infoLocked;\n        bool    saleLocked;\n    }\n    \n    Bottle[202] public bottle;\n    \n    constructor() public {\n            bottle[1].id = 1;\n            bottle[1].price = 1 ether;\n            bottle[1].sellPrice = 1 ether;\n            bottle[1].owner = msg.sender;\n            bottle[1].infoLocked = false;\n            bottle[1].saleLocked = false;\n            bottle[201].id = 201;\n            bottle[201].price = 50000 ether;\n            bottle[201].sellPrice = 5000 ether;\n            bottle[201].owner = msg.sender;\n            bottle[201].infoLocked = false;\n            bottle[201].saleLocked = false;\n    }\n    \n    function initCopper() public {\n        if (initedCopper == false){\n            for (uint i = 2; i < 31; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 15 ether;\n                bottle[i].sellPrice = 15 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedCopper = true;\n        }\n    }\n    \n    function initBronze() public {\n        if (initedBronze == false) {\n            for (uint i = 31; i < 71; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 35 ether;\n                bottle[i].sellPrice = 35 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedBronze = true;\n        }\n    }\n    \n    function initSilver() public {\n         if (initedSilver == false) {\n             for (uint i = 71; i < 131; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 50 ether;\n                bottle[i].sellPrice = 50 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedSilver = true;\n         }\n    }\n    \n    function initGold() public {\n         if (initedGold == false) {\n             for (uint i = 131; i < 171; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 65 ether;\n                bottle[i].sellPrice = 65 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedGold = true;    \n        }\n    }\n    \n    function initPlatinum() public {\n        if (initedPlatinum == false) {\n            for (uint i = 171; i < 201; i++) {\n                bottle[i].id = i;\n                bottle[i].price = 85 ether;\n                bottle[i].sellPrice = 85 ether;\n                bottle[i].owner = msg.sender;\n                bottle[i].infoLocked = false;\n                bottle[i].saleLocked = false;\n            }\n            initedPlatinum = true;\n        }\n    }\n    \n    function sell(uint price, uint id) public {\n        if (bottle[id].owner == msg.sender && price > bottle[id].price){\n            bottle[id].sellPrice = price;\n            bottle[id].saleLocked = false;\n        }\n    }\n    \n    function cancelSell (uint id) public {\n        if (bottle[id].owner == msg.sender) {\n            bottle[id].sellPrice = 0;\n            bottle[id].saleLocked = true;\n        }\n    }\n    \n    function buy(uint id) public payable {\n        if(bottle[id].sellPrice != msg.value || bottle[id].saleLocked == true) {\n        \trevert();\n        }\n        address seller = bottle[id].owner;\n        bottle[id].owner.transfer(msg.value);     \n        bottle[id].owner = msg.sender;\n        bottle[id].price = msg.value;\n        bottle[id].infoLocked = false;\n        bottle[id].saleLocked = true;\n        emit Selling(seller, msg.sender, msg.value);\n        \n    }\n    \n    function changeInfo(uint id, string name, string info) public {\n\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].name = name;\n            bottle[id].info = info;\n            bottle[id].infoLocked = true;    \n        }\n    }\n    \n    function gift(uint id, address newOwner) public {\n        if(bottle[id].owner == msg.sender) {\n            bottle[id].owner = newOwner;\n            bottle[id].infoLocked = false;\n        }\n    }\n}",
        "debug": "keccac_4_+_2_+_7*calldata_Whiskey_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Whiskey_4 + calldata_Whiskey_32 + 4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\ncaller: 0x0\nstorage_3 + 2 + 7*calldata_Whiskey_4: 0x0\ncalldata_Whiskey_4: 0xc9\ncalldata_Whiskey_0: 0xd6ac5f6c00000000000000000000000000000000000000000000000000000000\ncalldatasize_Whiskey: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeInfo(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/27/0x89df6e195c2030ce3830780b68ee0752c756f49e.sol",
        "function": "changeInfo(uint256,string,string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}