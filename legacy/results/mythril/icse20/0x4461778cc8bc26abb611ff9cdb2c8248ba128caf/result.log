{"error": null, "issues": [{"address": 1164, "code": "   name = _name;\n    }\n    function burnSupply(uint256 _amount) isOwner\n    ", "debug": "calldata_EthereumSoft_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_EthereumSoft_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "setName(string)", "lineno": 54, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2036, "code": " msg.sender);\n        _;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_EthereumSoft_0: 0x16e242ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "burnTotalSupply(uint256)", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 2046, "code": "d _from, address inde", "debug": "storage_5: 0x0\ncalldata_EthereumSoft_4: 0x1\ncaller: 0x0\nstorage_6: 0x0\ncalldata_EthereumSoft_0: 0x16e242ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burnTotalSupply(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "burnTotalSupply(uint256)", "lineno": 65, "title": "Integer Underflow", "type": "Warning"}, {"address": 3630, "code": " msg.sender);\n        _;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_EthereumSoft_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "setName(string)", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 3745, "code": " msg.sender);\n        _;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_EthereumSoft_0: 0xd595c33100000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "burnSupply(uint256)", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 3850, "code": "\n    }\n    function burnTot", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_6,_256): 0x0\ncalldata_EthereumSoft_4: 0x1\ncaller: 0x0\nstorage_6: 0x0\ncalldata_EthereumSoft_0: 0xd595c33100000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burnSupply(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "burnSupply(uint256)", "lineno": 59, "title": "Integer Underflow", "type": "Warning"}, {"address": 4019, "code": "ntract EthereumSoft {\n\n    string public name = \"Ethereum Soft\";      //  Soft name\n    string public symbol = \"ESFT\";           //  Soft symbol\n    uint256 public decimals = 1;            //  Soft digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 5000000 * (10**decimals);\n    address public owner;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n    function EthereumSoft() {\n        owner = msg.sender;\n        balanceOf[owner] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success)\n    {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function setName(string _name) isOwner \n    {\n        name = _name;\n    }\n    function burnSupply(uint256 _amount) isOwner\n    {\n        balanceOf[owner] -= _amount;\n        SupplyBurn(_amount);\n    }\n    function burnTotalSupply(uint256 _amount) isOwner\n    {\n        totalSupply-= _amount;\n    }\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event SupplyBurn(uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}", "debug": "calldata_EthereumSoft_4 + calldata_EthereumSoft_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_EthereumSoft_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4033, "code": "ntract EthereumSoft {\n\n    string public name = \"Ethereum Soft\";      //  Soft name\n    string public symbol = \"ESFT\";           //  Soft symbol\n    uint256 public decimals = 1;            //  Soft digit\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 5000000 * (10**decimals);\n    address public owner;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n    function EthereumSoft() {\n        owner = msg.sender;\n        balanceOf[owner] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) returns (bool success)\n    {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    function setName(string _name) isOwner \n    {\n        name = _name;\n    }\n    function burnSupply(uint256 _amount) isOwner\n    {\n        balanceOf[owner] -= _amount;\n        SupplyBurn(_amount);\n    }\n    function burnTotalSupply(uint256 _amount) isOwner\n    {\n        totalSupply-= _amount;\n    }\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event SupplyBurn(uint256 _amount);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}", "debug": "calldata_EthereumSoft_4 + calldata_EthereumSoft_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_EthereumSoft_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_EthereumSoft: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/9/0x4461778cc8bc26abb611ff9cdb2c8248ba128caf.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}