{
  "contract": "0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9",
  "tool": "mythril",
  "start": 1563827643.6342275,
  "end": 1563827672.2306762,
  "duration": 28.59644865989685,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 730,
        "code": "= 0;\n\n    uint256 private _hardcap = 30000 ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xfc00\ncalldata_TokenSale_0: 0xc3f6acf00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9.sol",
        "function": "_function_0x0c3f6acf",
        "lineno": 239,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2343,
        "code": "uire(currentState != State.CL",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xfc00\ncalldatasize_TokenSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9.sol",
        "function": "fallback",
        "lineno": 262,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3865,
        "code": "   function stopTransfers() ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xfc00\ncaller: 0x0\nstorage_2: 0x0\ncalldata_TokenSale_0: 0x56de96db00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9.sol",
        "function": "_function_0x56de96db",
        "lineno": 276,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7464,
        "code": "turn x * y;\n  }\n  \n  \n   func",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x2af31dc4611873bf3f70834ae18e1f0f0f030f1c6018181f1c183cec00\nstorage_6: 0x2af31dc4611873bf3f70834ae18e1f0f0f030f1c6018181f1c183cec00\ncalldatasize_TokenSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9.sol",
        "function": "fallback",
        "lineno": 39,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7490,
        "code": "strac",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncallvalue: 0x0\nstorage_6: 0x0\ncalldatasize_TokenSale: 0x3\nstorage_5: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/30/0x5f52bf915b1f5e65b27c2c3ac45d100f54768af9.sol",
        "function": "fallback",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}