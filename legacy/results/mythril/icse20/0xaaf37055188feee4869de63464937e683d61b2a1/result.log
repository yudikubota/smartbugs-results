{"error": null, "issues": [{"address": 1650, "code": "       }\n        return true;\n    }\n\n    function mintVested(uint256 _vestedUntil, address _beneficiary, uint256 _value) public onlyAdmin returns (bool) {\n        require(mint(_beneficiary, _value));\n        vestingEntries[_beneficiary] = Vesting(_vestedUntil, _value);\n        emit MintVested(_beneficiary, _value);\n        re", "debug": "calldata_UChainToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_UChainToken_0: 0x6ae459bd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UChainToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `bulkMint(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0xaaf37055188feee4869de63464937e683d61b2a1.sol", "function": "bulkMint(address[],uint256[])", "lineno": 291, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7422, "code": ", throws on ov", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UChainToken_4: 0x0\ntimestamp: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UChainToken_4: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_UChainToken_4: 0x1\ncalldata_UChainToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xff00\ncalldata_UChainToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_UChainToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0xaaf37055188feee4869de63464937e683d61b2a1.sol", "function": "transferFrom(address,address,uint256)", "lineno": 86, "title": "Exception state", "type": "Informational"}, {"address": 7439, "code": " Owna", "debug": "calldata_UChainToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_UChainToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_UChainToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0xaaf37055188feee4869de63464937e683d61b2a1.sol", "function": "mint(address,uint256)", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7452, "code": "*/\n/**\n * @tit", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x1\ncalldata_UChainToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_UChainToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_UChainToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/1/0xaaf37055188feee4869de63464937e683d61b2a1.sol", "function": "mint(address,uint256)", "lineno": 96, "title": "Exception state", "type": "Informational"}], "success": true}