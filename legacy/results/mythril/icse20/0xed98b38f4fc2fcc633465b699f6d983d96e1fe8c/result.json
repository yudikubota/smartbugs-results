{
  "contract": "0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c",
  "tool": "mythril",
  "start": 1563831016.0029879,
  "end": 1563831293.8139262,
  "duration": 277.8109383583069,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1263,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1275,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1284,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1290,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1333,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1345,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1354,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1360,
        "code": "tring tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n ",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x746e42ddbe03c97fe6e530ac0258466c4a20dfffffffffffffffffffffffffc1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xcf9f8ea5a709fb58f8ed502cd9b08a9b1306dfffffffffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 48,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3096,
        "code": "y;\n    totalSupply = ini",
        "debug": "storage_9: 0x0\nstorage_12: 0x1\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `TokenERC20(uint256,string,string)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 52,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3324,
        "code": "nitialize(address",
        "debug": "calldata_x32323_4 + calldata_x32323_32 + 36: 0x7d1c220000131c81001c28498000000a310ffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0xf82e3ddffffece37effe3d7b67ffffff5ceeffffffffffffffffffffffffff01\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 59,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3432,
        "code": "[msg.sender] += amou",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_14: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "buy()",
        "lineno": 147,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3584,
        "code": "s balance\n        Transfer(this",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffff8a450010febe\ncallvalue: 0xf7ffffc77fbc0803001f007000000000000000000000000f800d005041024be8\nstorage_14: 0x2000000000000000000400000000000000000000000000020001f\nstorage_75506153327051474587906755573858019282972751592871715030499431892688993766217: 0x7bffffe3bfde\ncalldata_x32323_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\n",
        "description": "A possible integer overflow exists in the function `buy()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "buy()",
        "lineno": 148,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3850,
        "code": "rom(address _from, address _to, uint256 _value) public r",
        "debug": "The exception is triggered under the following conditions:\n\nbalance_at_1461501637330902918203684832716283019655932542975 & caller: 0x0\nstorage_15: 0x1\ncalldata_x32323_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\nstorage_13: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transfer(address,uint256)",
        "lineno": 111,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4007,
        "debug": "calldata_x32323_4: 0x5420f860cbaa38a1a0b3b190441c5a362d821016921e61f0365c77d2d7e1804c\nstorage_0: 0x0\ncaller: 0x0\ncalldata_x32323_0: 0xc91d956c00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setMinBalance(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "setMinBalance(uint256)",
        "lineno": 170,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4735,
        "code": "         // executes an even",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transfer(address,uint256)",
        "lineno": 159,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5807,
        "code": "ress] = true ;\n          ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xf50871237d0a17de83f337f9ba247f863eedf3e30165fc41073179f54000000f\ncalldata_x32323_32 + 36: 0x1e9698ab0e03c5b43f255829466fe149ee9db71858d6871333b7d9da75cd8fb\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x1e1148bc11c03006750812b5100226f60fdf5b0ba1a6125a9f4401c1ae9d13a3\nstorage_9: 0x0\nstorage_10: 0x1\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1e9698ab0e03c5b43f255829466fe149ee9db71858d6871333b7d9da75cd8fb\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 62,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 6063,
        "code": "irdrop(_address , airdropAmount);\n  ",
        "debug": "storage_10: 0x7ffffffffdffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff\ncalldata_x32323_32 + 36: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x0\nstorage_8: 0x0\nstorage_9: 0x7ffffffffdffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 65,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6081,
        "code": " return true;\n    }\n    \n   ",
        "debug": "storage_8: 0x9242ccc2985dd0399e3205485d0585191db089d1df6efb1dc4840163dfbb63d5\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xbffffdfc2ed970f981e702bd8cdf6fa01c002010fe1dfdfbd3df487fb8c00003\nstorage_10: 0x9a0a9138dc11cb0db0320f5632e1805b1516eaf9988e42093a8119e21eea521c\ncalldata_x32323_32 + 36: 0x800003222c3813528ac0b19d786a4721ca53f8e8f7cc60d813084815b8c00002\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x7fffeab22ba55a35b8f99fc14c5a05a1a8cbfccba0044004370818137b803557\nstorage_9: 0x2c4d5dfb746f9b474e64149e8fe7057432c774cb77fd3d26ff051b45fea5b5f1\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800003222c3813528ac0b19d786a4721ca53f8e8f7cc60d813084815b8c00002\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 67,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6264,
        "code": "ddress , bonis);\n\t}\n    }\n//",
        "debug": "storage_8: 0xe06a1c32d4522f70f09288fe01800004636f84c16f04f124029c05413963ee3f\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0x90414ceaca6b14fffff9df277fffdfd62a739fcf7bb125c3fe3502e6400c004f\nstorage_9: 0x1cfc0203c20c044823846903f02407b047ec3e0641600000c584530316682440\ncalldata_x32323_32 + 36: 0x44c601fed0480d00000200488000220000000000000000000000000000000000\nstorage_10: 0x238e7f8d03a9bdddd6b9f405b28617778c8cbafe82570417cd86163ec3784041\nstorage_11: 0xda00081173b1f070a02767a7ff030d4886d7c81c0012cdb3c23319a5f2974e89\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x4180fff3f3481fc1e1ff111fa419101610000800000200d7fff3ffc7c7ffff98\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x44c601fed0480d00000200488000220000000000000000000000000000000000\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 75,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6282,
        "code": "nction _transfer(add",
        "debug": "storage_8: 0x789214563e5f37ae0c914318a4a4f87c432382478c1702662b87a81100018521\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_4: 0xe026fb3863fe53fbfea7fa7fff76d7be2f90db7e6531c4fd40ffddcf0111000f\nstorage_9: 0x77f857f806c7e7bad82979d8f75af803b2db72478bf6fe65eb7fa7ccffff76b3\ncalldata_x32323_32 + 36: 0xb5e6ee5f9db7f5edd9b5b2dffdedab3d2720a55c66a2f023adeeea4efc62ffb7\nstorage_10: 0xedf7108036192164d12bc37967e0500800000000000000000000000000000000\nstorage_11: 0xccd434f8e137e312903a712fd65df64b7c5bff3021c81101c80453fdbfff7a3d\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_x32323_32_+_4: 0x39f485060a07c58df33db6dffa0c4cfe24d22549c48eb5f55a0e9108e0595be7\ncalldata_x32323_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb5e6ee5f9db7f5edd9b5b2dffdedab3d2720a55c66a2f023adeeea4efc62ffb7\ncalldata_x32323_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6372,
        "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Airdrop(address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 airdropAmount = 300;\n    uint256 bonis = 100;\n    uint256 totalairdrop = 3000;\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply <= (maxSupply - airdropAmount) && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] += airdropAmount;\n            totalSupply += airdropAmount;\n\t    Airdrop(_address , airdropAmount);\n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\tif (totalSupply < maxSupply) {\n        \tbalanceOf[_address] += bonis;\n        \ttotalSupply += bonis;\n        \treturn true;\n\t\tAirdrop(_address , bonis);\n\t}\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 16,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6386,
        "code": " is owned{\n\n//\u8a2d\u5b9a\u521d\u59cb\u503c//\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    mapping (address => bool) initialized;\n\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Airdrop(address indexed to, uint256 value);\n\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        frozenAccount[target] = freeze;\n        FrozenFunds(target, freeze);\n    }\n\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 2;\n    uint256 public totalSupply;\n    uint256 public maxSupply = 2300000000;\n    uint256 airdropAmount = 300;\n    uint256 bonis = 100;\n    uint256 totalairdrop = 3000;\n\n//\u521d\u59cb\u5316//\n\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n\tinitialSupply = maxSupply - totalairdrop;\n    balanceOf[msg.sender] = initialSupply;\n    totalSupply = initialSupply;\n\tinitialized[msg.sender] = true;\n        name = \"\u6e2c\u8a6615\";\n        symbol = \"\u6e2c\u8a6615\";         \n    }\n\n    function initialize(address _address) internal returns (bool success) {\n\n        if (totalSupply <= (maxSupply - airdropAmount) && !initialized[_address]) {\n            initialized[_address] = true ;\n            balanceOf[_address] += airdropAmount;\n            totalSupply += airdropAmount;\n\t    Airdrop(_address , airdropAmount);\n        }\n        return true;\n    }\n    \n    function reward(address _address) internal returns (bool success) {\n\tif (totalSupply < maxSupply) {\n        \tbalanceOf[_address] += bonis;\n        \ttotalSupply += bonis;\n        \treturn true;\n\t\tAirdrop(_address , bonis);\n\t}\n    }\n//\u4ea4\u6613//\n\n    function _transfer(address _from, address _to, uint _value) internal {\n\trequire(!frozenAccount[_from]);\n        require(_to != 0x0);\n\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n        //uint previousBalances = balanceOf[_from] + balanceOf[_to];\n\t   \n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n\n        Transfer(_from, _to, _value);\n\n        //assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n\n\tinitialize(_from);\n\treward(_from);\n\tinitialize(_to);\n        \n        \n    }\n\n    function transfer(address _to, uint256 _value) public {\n        \n\tif(msg.sender.balance < minBalanceForAccounts)\n            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n        _transfer(msg.sender, _to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n//\u8ca9\u552e//\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount){\n        amount = msg.value / buyPrice;                    // calculates the amount\n        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n        return amount;                                    // ends function and returns\n    }\n\n    function sell(uint amount) returns (uint revenue){\n        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n        balanceOf[this] += amount;                        // adds the amount to owner's balance\n        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n        revenue = amount * sellPrice;\n        msg.sender.transfer(revenue);                     // sends ether to the seller: it's important to do this last to prevent recursion attacks\n        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n        return revenue;                                   // ends function and returns\n    }\n\n\n    uint minBalanceForAccounts;\n    \n    function setMinBalance(uint minimumBalanceInFinney) onlyOwner {\n         minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n    }\n\n}",
        "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 4)) +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_x32323_4 + calldata_x32323_32 + 36)): 0xe2240c073350198c7e1fe6a188343fffffffbbc5606fffffffffffffffffffa0\ncalldata_x32323_4 + calldata_x32323_32 + 36: 0xe728cbd10097e51a790002e0afffffffffffffffffffffffffffffffffffffe1\ncalldata_x32323_4 + calldata_x32323_32 + 4: 0x469e07d63c0ba14e849f5e157670afbffffc443a9f8fffffffffffffffffff61\ncalldata_x32323_0: 0x9dbf008700000000000000000000000000000000000000000000000000000000\ncalldatasize_x32323: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `TokenERC20(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/25/0xed98b38f4fc2fcc633465b699f6d983d96e1fe8c.sol",
        "function": "TokenERC20(uint256,string,string)",
        "lineno": 16,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}