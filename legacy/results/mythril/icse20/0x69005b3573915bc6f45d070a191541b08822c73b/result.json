{
  "contract": "0x69005b3573915bc6f45d070a191541b08822c73b",
  "tool": "mythril",
  "start": 1563614569.6059556,
  "end": 1563614894.4449303,
  "duration": 324.8389747142792,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 750,
        "code": "urns (address addr) {\n        assembly {\n            addr := mload(add(data, 20))\n        }\n    }\n}\n/**\n * @title SafeMath\n * @dev",
        "debug": "storage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_SmartHashFast_0: 0x2a5bf6d200000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartHashFast: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getUserDeposits(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "getUserDeposits(address)",
        "lineno": 191,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2007,
        "code": ";\n// Https://smart",
        "debug": "storage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x31\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x16345785d8a0000\ncalldatasize_SmartHashFast: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2210,
        "code": "(PERCENTS_DIVID",
        "debug": "storage_2: 0x2748d4f4f9c10db8c067be3f3ae8c7f208f4fe4ecfe22a61e1d9ce34fe803309\ncallvalue: 0x5a17a4498d5db4c34fb63ae7d6d4b6c200a6376ba77329592848d949445fa99d\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x901d93ee741d027707bf5ae024288161658c32222056db88f669752f56b04b39\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x31\ncalldatasize_SmartHashFast: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 91,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2325,
        "code": "ontract_PERCENT).div(PERCENTS_DIVIDER);",
        "debug": "",
        "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 93,
        "title": "Unchecked CALL return value",
        "type": "Informational"
      },
      {
        "address": 3665,
        "code": ");\n            }",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartHashFast_0: 0x40a772e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartHashFast: 0x4\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "getUserDividends(address)",
        "lineno": 180,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3987,
        "code": "  }\n    }\n}\n/**\n * @title SafeMath",
        "debug": "storage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_SmartHashFast_0: 0x2a5bf6d200000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartHashFast: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getUserDeposits(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "getUserDeposits(address)",
        "lineno": 194,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3989,
        "code": "  }\n    }\n}\n/**\n * @title SafeMath",
        "debug": "storage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_SmartHashFast_0: 0x2a5bf6d200000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartHashFast: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getUserDeposits(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "getUserDeposits(address)",
        "lineno": 194,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4825,
        "code": "   if (users",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nkeccac_4_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400000000000000000000000000000000000000000000000000000000000000\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x3\ncallvalue: 0x16345785d8a0000\ncalldatasize_SmartHashFast: 0x3\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 68,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4838,
        "debug": "callvalue: 0xccc6d2f9b314553450a1b3eef4ab425a6cab9a17eb8ed3611902dcfbfbf4b5ea\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x869783ff5fda56945eb3ffccbdcb4340b9fbdf90aeaedb7ddd5681bb3376b1ac\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x31\ncalldatasize_SmartHashFast: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 250,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4889,
        "code": "inter",
        "debug": "storage_0 +\nkeccac_storage_keccac_4_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4_+\n0: 0x624dd2f1a9fbe76c8b4395810624dd2f1a9fbe76c8b4395810624dd2f1a9fc\nstorage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SmartHashFast_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartHashFast_0: 0x40a772e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartHashFast: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getUserDividends(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "getUserDividends(address)",
        "lineno": 223,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5335,
        "code": "ntract SmartHashFast {\n    using SafeMath for uint256;\n\n    uint256 constant public DEPOSIT_MINIMUM_AMOUNT = 100 finney;\n    uint256 constant public MAXIMUM_DEPOSITS_PER_USER = 50;\n\n    uint256 constant public MINIMUM_DAILY_PERCENT = 50;\n    uint256 constant public REFERRAL_PERCENT = 50;\n    uint256 constant public MARKETING_PERCENT = 100;\n    uint256 constant public BonusContract_PERCENT = 50;\n    uint256 constant public MAXIMUM_RETURN_PERCENT = 2000;\n    uint256 constant public PERCENTS_DIVIDER = 1000;\n\n    uint256 constant public BALANCE_STEP = 300 ether;\n    uint256 constant public TIME_STEP = 1 days;\n    uint256 constant public STEP_MULTIPLIER = 10;\n\n    address constant public MARKETING_ADDRESS = 0xa5a3A84Cf9FD3f9dE1A6160C7242bA97b4b64065;\n    address constant public bonus_ADDRESS = 0xe4661f1D737993824Ef3da64166525ffc3702487;\n   \n    uint256 public usersCount = 0;\n    uint256 public depositsCount = 0;\n    uint256 public totalDeposited = 0;\n    uint256 public totalWithdrawn = 0;\n    event Invest( address indexed investor, uint256 amount);\n    \n   \n    struct User {\n        uint256 deposited;\n        uint256 withdrawn;\n        uint256 timestamp;\n        uint256 depositsCount;\n        uint256[] deposits;\n    }\n\n    struct Deposit {\n        uint256 amount;\n        uint256 payed;\n        uint256 timestamp;\n    }\n\n    mapping (address => User) public users;\n    mapping (uint256 => Deposit) public deposits;\n\n    function() public payable {\n        if (msg.value >= DEPOSIT_MINIMUM_AMOUNT) {\n            makeDeposit();\n        } else {\n            payDividends();\n        }\n    }\n\n    function createUser() private {\n        users[msg.sender] = User({\n            deposited : 0,\n            withdrawn : 0,\n            timestamp : now,\n            depositsCount : 0,\n            deposits : new uint256[](0)\n        });\n\n        usersCount++;\n    }\n\n    function makeDeposit() private {\n        if (users[msg.sender].deposited == 0) {\n            createUser();\n        }\n\n        User storage user = users[msg.sender];\n\n        require(user.depositsCount < MAXIMUM_DEPOSITS_PER_USER);\n\n        Deposit memory deposit = Deposit({\n            amount : msg.value,\n            payed : 0,\n            timestamp : now\n        });\n\n        deposits[depositsCount] = deposit;\n        user.deposits.push(depositsCount);\n\n        user.deposited = user.deposited.add(msg.value);\n        totalDeposited = totalDeposited.add(msg.value);\n        emit Invest(msg.sender, msg.value);\n        user.depositsCount++;\n        depositsCount++;\n\n        uint256 marketingAmount = msg.value.mul(MARKETING_PERCENT).div(PERCENTS_DIVIDER);\n        MARKETING_ADDRESS.send(marketingAmount);\n        uint256 bonusAmount = msg.value.mul(BonusContract_PERCENT).div(PERCENTS_DIVIDER);\n        bonus_ADDRESS.send(bonusAmount);\n        \n        address refAddress = bytesToAddress(msg.data);\n        if (refAddress != address(0) && refAddress != msg.sender) {\n            uint256 refAmount = msg.value.mul(REFERRAL_PERCENT).div(PERCENTS_DIVIDER);\n            refAddress.send(refAmount);\n        }\n    }\n\n    function payDividends() private {\n        User storage user = users[msg.sender];\n\n        uint256 userMaximumReturn = user.deposited.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        require(user.deposited > 0 && user.withdrawn < userMaximumReturn);\n\n        uint256 userDividends = 0;\n\n        for (uint256 i = 0; i < user.depositsCount; i++) {\n            if (deposits[user.deposits[i]].payed < deposits[user.deposits[i]].amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER)) {\n                uint256 depositId = user.deposits[i];\n\n                Deposit storage deposit = deposits[depositId];\n\n                uint256 depositDividends = getDepositDividends(depositId, msg.sender);\n                userDividends = userDividends.add(depositDividends);\n\n                deposits[depositId].payed = deposit.payed.add(depositDividends);\n                deposits[depositId].timestamp = now;\n            }\n        }\n\n        msg.sender.transfer(userDividends.add(msg.value));\n\n        users[msg.sender].timestamp = now;\n\n        users[msg.sender].withdrawn = user.withdrawn.add(userDividends);\n        totalWithdrawn = totalWithdrawn.add(userDividends);\n    }\n\n    function getDepositDividends(uint256 depositId, address userAddress) private view returns (uint256) {\n        uint256 userActualPercent = getUserActualPercent(userAddress);\n\n        Deposit storage deposit = deposits[depositId];\n\n        uint256 timeDiff = now.sub(deposit.timestamp);\n        uint256 depositDividends = deposit.amount.mul(userActualPercent).div(PERCENTS_DIVIDER).mul(timeDiff).div(TIME_STEP);\n\n        uint256 depositMaximumReturn = deposit.amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        if (depositDividends.add(deposit.payed) > depositMaximumReturn) {\n            depositDividends = depositMaximumReturn.sub(deposit.payed);\n        }\n\n        return depositDividends;\n    }\n\n    function getContractActualPercent() public view returns (uint256) {\n        uint256 contractBalance = address(this).balance;\n        uint256 balanceAddPercent = contractBalance.div(BALANCE_STEP).mul(STEP_MULTIPLIER);\n\n        return MINIMUM_DAILY_PERCENT.add(balanceAddPercent);\n    }\n\n    function getUserActualPercent(address userAddress) public view returns (uint256) {\n        uint256 contractActualPercent = getContractActualPercent();\n\n        User storage user = users[userAddress];\n\n        uint256 userMaximumReturn = user.deposited.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER);\n\n        if (user.deposited > 0 && user.withdrawn < userMaximumReturn) {\n            uint256 timeDiff = now.sub(user.timestamp);\n            uint256 userAddPercent = timeDiff.div(TIME_STEP).mul(STEP_MULTIPLIER);\n        }\n\n        return contractActualPercent.add(userAddPercent);\n    }\n\n    function getUserDividends(address userAddress) public view returns (uint256) {\n        User storage user = users[userAddress];\n\n        uint256 userDividends = 0;\n\n        for (uint256 i = 0; i < user.depositsCount; i++) {\n            if (deposits[user.deposits[i]].payed < deposits[user.deposits[i]].amount.mul(MAXIMUM_RETURN_PERCENT).div(PERCENTS_DIVIDER)) {\n                userDividends = userDividends.add(getDepositDividends(user.deposits[i], userAddress));\n            }\n        }\n\n        return userDividends;\n    }\n\n    function getUserDeposits(address userAddress) public view returns (uint256[]){\n        return users[userAddress].deposits;\n    }\n\n    function bytesToAddress(bytes data) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(data, 20))\n        }\n    }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\n library SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, reverts on overflow.\n    */\n    functio",
        "debug": "storage_4 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_4_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x16345785d8a0000\ncalldatasize_SmartHashFast: 0x3\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0x69005b3573915bc6f45d070a191541b08822c73b.sol",
        "function": "fallback",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}