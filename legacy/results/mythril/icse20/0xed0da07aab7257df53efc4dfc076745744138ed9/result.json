{
  "contract": "0xed0da07aab7257df53efc4dfc076745744138ed9",
  "tool": "mythril",
  "start": 1563275351.6197863,
  "end": 1563275720.1358752,
  "duration": 368.51608896255493,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1031,
        "code": "it\n    )\n        external\n        returns (bool success)\n    {\n        uint startGas = gasleft();\n        bytes32 signHash = getSignHash(address(this), _wallet, 0, _data, _nonce, _gasPrice, _gasLimit);\n        require(checkAndUpdateUniqueness(_wallet, _nonce, signHash), \"RM: Duplicate request\");\n        require(verifyData(address(_wallet), _data), \"RM: the wallet authorized is different then the target of the relayed data\");\n        uint256 requiredSignatures = getRequiredSignatures(_wallet, _data);\n        if((requiredSignatures * 65) == _signatures.length) {\n            if(verifyRefund(_wallet, _gasLimit, _gasPrice, requiredSignatures)) {\n                if(requiredSignatures == 0 || validateSignatures(_wallet, _data, signHash, _signatures)) {\n                    // solium-disable-next-line security/no-call-value\n                    success = address(this).call(_data);\n                    refund(_wallet, startGas - gasleft(), _gasPrice, _gasLimit, requiredSignatures, msg.sender);\n                }\n            }\n        }\n        emit TransactionExecuted(_wallet, success, signHash); \n    }\n\n    /**\n    * @dev Gets the current nonce for a wallet.\n    * @param _wallet The target wallet.\n    */\n    function getNonce(BaseWallet _wallet) external view returns (uint256 nonce) {\n        re",
        "debug": "calldata_TokenExchanger_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenExchanger_0: 0xaacaaf8800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenExchanger: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xaacaaf88`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0xaacaaf88",
        "lineno": 178,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2159,
        "code": "ived.\n     */\n    function trade(",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x2d8da11a",
        "lineno": 1020,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2159,
        "code": "ived.\n     */\n    function trade(",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6887\nCall at address: 6887\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x2d8da11a",
        "lineno": 1020,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5607,
        "code": "thoriseModule(_module, true);\n    }\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x5a1db8c4",
        "lineno": 91,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5607,
        "code": "thoriseModule(_module, true);\n    }\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5950\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x5a1db8c4",
        "lineno": 91,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5950,
        "code": "anyone to recover ERC20 token sent to ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x5a1db8c4",
        "lineno": 95,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6336,
        "code": " _srcAmount) internal view returns (uint256 fee) {\n        fee = (_srcAmount * feeRatio) / 100",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1119,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6336,
        "code": " _srcAmount) internal view returns (uint256 fee) {\n        fee = (_srcAmount * feeRatio) / 100",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6510\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1119,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6510,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1122,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6887,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1122,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6887,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7061\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1122,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7061,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "getExpectedTrade(address,address,uint256)",
        "lineno": 1122,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7349,
        "code": "   }\n\n    /**\n     * @dev Helper metho",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "recoverToken(address)",
        "lineno": 102,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7349,
        "code": "   }\n\n    /**\n     * @dev Helper metho",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7606\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "recoverToken(address)",
        "lineno": 102,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7606,
        "code": "if an address is the owner of a target wallet.\n ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "recoverToken(address)",
        "lineno": 105,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 8802,
        "code": "e transactions ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x5a1db8c4",
        "lineno": 116,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 8802,
        "code": "e transactions ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5950\nCall at address: 5607\n",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0x5a1db8c4",
        "lineno": 116,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10827,
        "code": "The signed hash\n    * @pa",
        "debug": "block_number: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenExchanger_4: 0x0\ncalldata_TokenExchanger_32 + 36: 0x1\nmem_32 +\n330 +\ncalldata_TokenExchanger_4 + calldata_TokenExchanger_32 + 4 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenExchanger_4 + calldata_TokenExchanger_32 + 4)): 0x1f\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_TokenExchanger_4 + calldata_TokenExchanger_32 + 4)): 0x1f\ncalldata_TokenExchanger_4 + calldata_TokenExchanger_32 + 4: 0x1f\ncalldata_TokenExchanger_0: 0xaacaaf8800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenExchanger: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xaacaaf88`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0xed0da07aab7257df53efc4dfc076745744138ed9.sol",
        "function": "_function_0xaacaaf88",
        "lineno": 272,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}