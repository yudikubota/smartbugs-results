{
  "contract": "0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5",
  "tool": "mythril",
  "start": 1563529674.5842068,
  "end": 1563530820.56251,
  "duration": 1145.978303194046,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 454,
        "code": "d].adv_link = 'http://cryptoflipcars.site/';\n  makes[makeId].adv_price   = 5000000000000000;\n  makes[makeId].adv_owner = address1;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar(\"1964 DB5 James Bond Edition\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"1964 DB5 James Bond Edition\", 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true)",
        "debug": "calldata_CryptoflipCar_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CryptoflipCar_0: 0x1540873400000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMake(string,address,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addMake(string,address,uint256,uint256,bool)",
        "lineno": 409,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 666,
        "code": ";\n  companies[companyId].adv_link = 'http://cryptoflipcars.site/';\n  companies[companyId].adv_price   = 5000000000000000;\n  companies[companyId].adv_owner = address1;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake(\"DB5\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 98465804768000000 ,0, true);\n  addMake(\"DB6\", 0x3130259deedb3052e24fad9d5e1f490cb8cccaa0, 62320",
        "debug": "calldata_CryptoflipCar_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 376,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3683,
        "code": "percent);  \n  uint",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_3: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x57dd42d00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCompanyCard(uint256)",
        "lineno": 222,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3962,
        "code": "t);\n  commissionOwner = commissionOwner - commissio",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4086\n",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCompanyCard(uint256)",
        "lineno": 230,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4086,
        "code": "rdId].curPrice = div(mul(companies[_cardId].c",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4226\n",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCompanyCard(uint256)",
        "lineno": 234,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4497,
        "code": "+ 2;\n  uint25",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_5: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x687bb4a00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCarCard(uint256)",
        "lineno": 149,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4776,
        "code": "ul(commission1percent, 5);\n  foundTeamAddress.trans",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4900\nCall at address: 4900\n",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCarCard(uint256)",
        "lineno": 157,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7145,
        "code": "unction Initia",
        "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x1540873400000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMake(string,address,uint256,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addMake(string,address,uint256,uint256,bool)",
        "lineno": 416,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7172,
        "code": "s() public on",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x1540873400000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addMake(string,address,uint256,uint256,bool)",
        "lineno": 416,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7911,
        "code": " companies[company",
        "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x5ea050ec00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `InitiateCompanies()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "InitiateCompanies()",
        "lineno": 379,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7938,
        "code": "dv_owner = address1;",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 379,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10095,
        "code": "value, 1) , to",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\nstorage_8: 0x0\ncalldata_CryptoflipCar_0: 0x5682093000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseMakeCard(uint256)",
        "lineno": 197,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11071,
        "code": "price;\n  adv_owner = ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_3: 0x0\ncalldata_CryptoflipCar_0: 0x57d1391700000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "getCompany(uint256)",
        "lineno": 277,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 11733,
        "code": "r;\n}\n\n\n/**\n@",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_5: 0x0\ncalldata_CryptoflipCar_0: 0x5e8be19000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "getCar(uint256)",
        "lineno": 330,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 13472,
        "code": "is_released =",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_5: 0x0\ncalldata_CryptoflipCar_0: 0x7859f9e600000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseCarAdv(uint256,string,string)",
        "lineno": 83,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 14357,
        "code": "ke.adv_owner;\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\ncalldata_CryptoflipCar_0: 0x7a4b707500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "getMake(uint256)",
        "lineno": 303,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 15094,
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x7e3ef93500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "setReleaseMake(uint256,bool)",
        "lineno": 459,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 15158,
        "code": "totalpercent =",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoflipCar_4: 0x0\nstorage_4: 0x0\ncalldata_CryptoflipCar_0: 0x7f1a874900000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "purchaseMakeAdv(uint256,string,string)",
        "lineno": 118,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 17420,
        "code": "r(uint256 _ca",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x4d908a5500000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `InitiateCars()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "InitiateCars()",
        "lineno": 452,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19840,
        "code": "ntract CryptoflipCar {\nstring version = '1.1';\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Car {\n    string name;\n    address[4] ownerAddresses;\n    uint256 curPrice;\n    uint256 companyId;\n    uint256 makeId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n    \nstruct Company {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nstruct Make {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 companyId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nWhaleCard whalecard;\n\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseCarAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= cars[_cardId].adv_price);\n  require(isPaused == false);\n  require(cars[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  cars[_cardId].ownerAddresses[0].transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  cars[_cardId].adv_owner.transfer(commissionOwner);\n  cars[_cardId].adv_owner = msg.sender;\n  cars[_cardId].adv_price = div(mul(cars[_cardId].adv_price, totalpercent), 100);\n  cars[_cardId].adv_text = _text;\n  cars[_cardId].adv_link = _link;  \n}\n\nfunction purchaseCompanyAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= companies[_cardId].adv_price);\n  require(isPaused == false);\n  require(companies[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].adv_owner.transfer(commissionOwner);\n  companies[_cardId].adv_owner = msg.sender;\n  companies[_cardId].adv_price = div(mul(companies[_cardId].adv_price, totalpercent), 100);\n  companies[_cardId].adv_text = _text;\n  companies[_cardId].adv_link = _link;  \n}\n\nfunction purchaseMakeAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= makes[_cardId].adv_price);\n  require(isPaused == false);\n  require(makes[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  makes[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  makes[_cardId].adv_owner.transfer(commissionOwner);\n  makes[_cardId].adv_owner = msg.sender;\n  makes[_cardId].adv_price = div(mul(makes[_cardId].adv_price, totalpercent), 100);\n  makes[_cardId].adv_text = _text;\n  makes[_cardId].adv_link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCarCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= cars[_cardId].curPrice);\n  require(cars[_cardId].is_released == true);\n  require(carsAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = cars[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  uint256 makeId = cars[_cardId].makeId;\n  makes[makeId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  if (cars[_cardId].ownerAddresses[3] != 0){\n      cars[_cardId].ownerAddresses[3].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[3] = cars[_cardId].ownerAddresses[2];\n  if (cars[_cardId].ownerAddresses[2] != 0){\n      cars[_cardId].ownerAddresses[2].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[2] = cars[_cardId].ownerAddresses[1];\n  if (cars[_cardId].ownerAddresses[1] != 0){\n      cars[_cardId].ownerAddresses[1].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[1] = cars[_cardId].ownerAddresses[0];\n  cars[_cardId].ownerAddresses[0].transfer(commissionOwner);\n  cars[_cardId].ownerAddresses[0] = msg.sender;\n  totalpercent = totalpercent + 2;\n  cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseMakeCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= makes[_cardId].curPrice);\n  require(makes[_cardId].is_released == true);\n  require(makesAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = makes[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  makes[_cardId].ownerAddress.transfer(commissionOwner);\n  makes[_cardId].ownerAddress = msg.sender;\n  makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseCompanyCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= companies[_cardId].curPrice);\n  require(companies[_cardId].is_released == true);\n  require(companiesAreInitiated == true);\n  uint256 totalpercent = 150 + 5;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commissionOwner);\n  companies[_cardId].ownerAddress = msg.sender;\n  companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n}\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n  adv_text = _company.adv_text;\n  adv_link = _company.adv_link;\n  adv_price = _company.adv_price;\n  adv_owner = _company.adv_owner;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n  adv_text = _make.adv_text;\n  adv_link = _make.adv_link;\n  adv_price = _make.adv_price;\n  adv_owner = _make.adv_owner;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[4] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n  adv_text = _car.adv_text;\n  adv_link = _car.adv_link;\n  adv_price = _car.adv_price;\n  adv_owner = _car.adv_owner;\n}\n\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany(\"Aston Martin\", 0xe7eca2a94e9d59848f3c1e1ffaacd881d4c3a4f2, 592240896000000000 ,true);\n  addCompany(\"BMW\", 0x327bfb6286026bd1a017ba6693e0f47c8b98731b, 592240896000000000 ,true);\n  addCompany(\"Ferrari\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 379641600000000000 ,true);\n  addCompany(\"Honda\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 243360000000000000 ,true);\n  companies[0].adv_text=\"BurnUP!!!\";\n  companies[0].adv_link=\"https://burnup.io/?r=0x049bEd1598655b64F09E4835084fBc502ab1aD86\";\n  companies[0].adv_owner=0x049bed1598655b64f09e4835084fbc502ab1ad86;\n  companies[0].adv_price=8000000000000000;\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price, bool is_released) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = is_released;\n  companies[companyId].adv_text = 'Your Ad here';\n  companies[companyId].adv_link = 'http://cryptoflipcars.site/';\n  companies[companyId].adv_price   = 5000000000000000;\n  companies[companyId].adv_owner = address1;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake(\"DB5\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 98465804768000000 ,0, true);\n  addMake(\"DB6\", 0x3130259deedb3052e24fad9d5e1f490cb8cccaa0, 62320129600000000 ,0, true);\n  addMake(\"DB9\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"One-77\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"BMW 507\", 0x049bed1598655b64f09e4835084fbc502ab1ad86, 98465804768000000 ,1, false);\n  addMake(\"BMW Z8\", 0xd17e2bfe196470a9fefb567e8f5992214eb42f24, 98465804768000000 ,1, false);\n  addMake(\"Fererrari LaFerrari\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,2, true);\n  addMake(\"Ferrari California\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,2, true);\n  addMake(\"Honda Accord\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,3, true);\n  addMake(\"Honda Civic\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,3, false);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 price, uint256 companyId,  bool is_released) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = is_released;\n  makes[makeId].adv_text = 'Your Ad here';\n  makes[makeId].adv_link = 'http://cryptoflipcars.site/';\n  makes[makeId].adv_price   = 5000000000000000;\n  makes[makeId].adv_owner = address1;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar(\"1964 DB5 James Bond Edition\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"1964 DB5 James Bond Edition\", 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Z8 2003\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"DB6 Chocolate\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,0, 1, true);\n  addCar(\"507 Black\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 4, true);\n  addCar(\"507 Silver\", 0x62d5be95c330b512b35922e347319afd708da981, 16200000000000000 ,1, 4, true);\n  addCar(\"Z8 Black with Red Interior\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"Gordon Ramsey's Grey LaFerrari\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,2, 6, true);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 price, uint256 companyId, uint256 makeId,  bool is_released) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses[0] = address1;\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = is_released;\n  cars[carId].adv_text = 'Your Ad here';\n  cars[carId].adv_link = 'http://cryptoflipcars.site/';\n  cars[carId].adv_price   = 5000000000000000;\n  cars[carId].adv_owner = address1;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_3: 0x413eb400000002088020000002000010576c118a884fd9a3152000004b020000\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0x7403a9bcd8faddf5d1e685cff3ba22e265c519effac9cb3ec6759905c67efc51\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xff8007b08649eba518062bad4024f63b0581e1673f0b574bf7ba80dfcf20ca00\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19869,
        "code": "ntract CryptoflipCar {\nstring version = '1.1';\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Car {\n    string name;\n    address[4] ownerAddresses;\n    uint256 curPrice;\n    uint256 companyId;\n    uint256 makeId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n    \nstruct Company {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nstruct Make {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 companyId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nWhaleCard whalecard;\n\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseCarAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= cars[_cardId].adv_price);\n  require(isPaused == false);\n  require(cars[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  cars[_cardId].ownerAddresses[0].transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  cars[_cardId].adv_owner.transfer(commissionOwner);\n  cars[_cardId].adv_owner = msg.sender;\n  cars[_cardId].adv_price = div(mul(cars[_cardId].adv_price, totalpercent), 100);\n  cars[_cardId].adv_text = _text;\n  cars[_cardId].adv_link = _link;  \n}\n\nfunction purchaseCompanyAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= companies[_cardId].adv_price);\n  require(isPaused == false);\n  require(companies[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].adv_owner.transfer(commissionOwner);\n  companies[_cardId].adv_owner = msg.sender;\n  companies[_cardId].adv_price = div(mul(companies[_cardId].adv_price, totalpercent), 100);\n  companies[_cardId].adv_text = _text;\n  companies[_cardId].adv_link = _link;  \n}\n\nfunction purchaseMakeAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= makes[_cardId].adv_price);\n  require(isPaused == false);\n  require(makes[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  makes[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  makes[_cardId].adv_owner.transfer(commissionOwner);\n  makes[_cardId].adv_owner = msg.sender;\n  makes[_cardId].adv_price = div(mul(makes[_cardId].adv_price, totalpercent), 100);\n  makes[_cardId].adv_text = _text;\n  makes[_cardId].adv_link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCarCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= cars[_cardId].curPrice);\n  require(cars[_cardId].is_released == true);\n  require(carsAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = cars[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  uint256 makeId = cars[_cardId].makeId;\n  makes[makeId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  if (cars[_cardId].ownerAddresses[3] != 0){\n      cars[_cardId].ownerAddresses[3].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[3] = cars[_cardId].ownerAddresses[2];\n  if (cars[_cardId].ownerAddresses[2] != 0){\n      cars[_cardId].ownerAddresses[2].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[2] = cars[_cardId].ownerAddresses[1];\n  if (cars[_cardId].ownerAddresses[1] != 0){\n      cars[_cardId].ownerAddresses[1].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[1] = cars[_cardId].ownerAddresses[0];\n  cars[_cardId].ownerAddresses[0].transfer(commissionOwner);\n  cars[_cardId].ownerAddresses[0] = msg.sender;\n  totalpercent = totalpercent + 2;\n  cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseMakeCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= makes[_cardId].curPrice);\n  require(makes[_cardId].is_released == true);\n  require(makesAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = makes[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  makes[_cardId].ownerAddress.transfer(commissionOwner);\n  makes[_cardId].ownerAddress = msg.sender;\n  makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseCompanyCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= companies[_cardId].curPrice);\n  require(companies[_cardId].is_released == true);\n  require(companiesAreInitiated == true);\n  uint256 totalpercent = 150 + 5;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commissionOwner);\n  companies[_cardId].ownerAddress = msg.sender;\n  companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n}\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n  adv_text = _company.adv_text;\n  adv_link = _company.adv_link;\n  adv_price = _company.adv_price;\n  adv_owner = _company.adv_owner;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n  adv_text = _make.adv_text;\n  adv_link = _make.adv_link;\n  adv_price = _make.adv_price;\n  adv_owner = _make.adv_owner;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[4] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n  adv_text = _car.adv_text;\n  adv_link = _car.adv_link;\n  adv_price = _car.adv_price;\n  adv_owner = _car.adv_owner;\n}\n\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany(\"Aston Martin\", 0xe7eca2a94e9d59848f3c1e1ffaacd881d4c3a4f2, 592240896000000000 ,true);\n  addCompany(\"BMW\", 0x327bfb6286026bd1a017ba6693e0f47c8b98731b, 592240896000000000 ,true);\n  addCompany(\"Ferrari\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 379641600000000000 ,true);\n  addCompany(\"Honda\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 243360000000000000 ,true);\n  companies[0].adv_text=\"BurnUP!!!\";\n  companies[0].adv_link=\"https://burnup.io/?r=0x049bEd1598655b64F09E4835084fBc502ab1aD86\";\n  companies[0].adv_owner=0x049bed1598655b64f09e4835084fbc502ab1ad86;\n  companies[0].adv_price=8000000000000000;\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price, bool is_released) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = is_released;\n  companies[companyId].adv_text = 'Your Ad here';\n  companies[companyId].adv_link = 'http://cryptoflipcars.site/';\n  companies[companyId].adv_price   = 5000000000000000;\n  companies[companyId].adv_owner = address1;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake(\"DB5\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 98465804768000000 ,0, true);\n  addMake(\"DB6\", 0x3130259deedb3052e24fad9d5e1f490cb8cccaa0, 62320129600000000 ,0, true);\n  addMake(\"DB9\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"One-77\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"BMW 507\", 0x049bed1598655b64f09e4835084fbc502ab1ad86, 98465804768000000 ,1, false);\n  addMake(\"BMW Z8\", 0xd17e2bfe196470a9fefb567e8f5992214eb42f24, 98465804768000000 ,1, false);\n  addMake(\"Fererrari LaFerrari\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,2, true);\n  addMake(\"Ferrari California\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,2, true);\n  addMake(\"Honda Accord\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,3, true);\n  addMake(\"Honda Civic\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,3, false);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 price, uint256 companyId,  bool is_released) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = is_released;\n  makes[makeId].adv_text = 'Your Ad here';\n  makes[makeId].adv_link = 'http://cryptoflipcars.site/';\n  makes[makeId].adv_price   = 5000000000000000;\n  makes[makeId].adv_owner = address1;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar(\"1964 DB5 James Bond Edition\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"1964 DB5 James Bond Edition\", 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Z8 2003\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"DB6 Chocolate\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,0, 1, true);\n  addCar(\"507 Black\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 4, true);\n  addCar(\"507 Silver\", 0x62d5be95c330b512b35922e347319afd708da981, 16200000000000000 ,1, 4, true);\n  addCar(\"Z8 Black with Red Interior\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"Gordon Ramsey's Grey LaFerrari\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,2, 6, true);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 price, uint256 companyId, uint256 makeId,  bool is_released) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses[0] = address1;\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = is_released;\n  cars[carId].adv_text = 'Your Ad here';\n  cars[carId].adv_link = 'http://cryptoflipcars.site/';\n  cars[carId].adv_price   = 5000000000000000;\n  cars[carId].adv_owner = address1;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_3: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CryptoflipCar_4 + calldata_CryptoflipCar_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19883,
        "code": "ntract CryptoflipCar {\nstring version = '1.1';\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Car {\n    string name;\n    address[4] ownerAddresses;\n    uint256 curPrice;\n    uint256 companyId;\n    uint256 makeId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n    \nstruct Company {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nstruct Make {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 companyId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nWhaleCard whalecard;\n\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseCarAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= cars[_cardId].adv_price);\n  require(isPaused == false);\n  require(cars[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  cars[_cardId].ownerAddresses[0].transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  cars[_cardId].adv_owner.transfer(commissionOwner);\n  cars[_cardId].adv_owner = msg.sender;\n  cars[_cardId].adv_price = div(mul(cars[_cardId].adv_price, totalpercent), 100);\n  cars[_cardId].adv_text = _text;\n  cars[_cardId].adv_link = _link;  \n}\n\nfunction purchaseCompanyAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= companies[_cardId].adv_price);\n  require(isPaused == false);\n  require(companies[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].adv_owner.transfer(commissionOwner);\n  companies[_cardId].adv_owner = msg.sender;\n  companies[_cardId].adv_price = div(mul(companies[_cardId].adv_price, totalpercent), 100);\n  companies[_cardId].adv_text = _text;\n  companies[_cardId].adv_link = _link;  \n}\n\nfunction purchaseMakeAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= makes[_cardId].adv_price);\n  require(isPaused == false);\n  require(makes[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  makes[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  makes[_cardId].adv_owner.transfer(commissionOwner);\n  makes[_cardId].adv_owner = msg.sender;\n  makes[_cardId].adv_price = div(mul(makes[_cardId].adv_price, totalpercent), 100);\n  makes[_cardId].adv_text = _text;\n  makes[_cardId].adv_link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCarCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= cars[_cardId].curPrice);\n  require(cars[_cardId].is_released == true);\n  require(carsAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = cars[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  uint256 makeId = cars[_cardId].makeId;\n  makes[makeId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  if (cars[_cardId].ownerAddresses[3] != 0){\n      cars[_cardId].ownerAddresses[3].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[3] = cars[_cardId].ownerAddresses[2];\n  if (cars[_cardId].ownerAddresses[2] != 0){\n      cars[_cardId].ownerAddresses[2].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[2] = cars[_cardId].ownerAddresses[1];\n  if (cars[_cardId].ownerAddresses[1] != 0){\n      cars[_cardId].ownerAddresses[1].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[1] = cars[_cardId].ownerAddresses[0];\n  cars[_cardId].ownerAddresses[0].transfer(commissionOwner);\n  cars[_cardId].ownerAddresses[0] = msg.sender;\n  totalpercent = totalpercent + 2;\n  cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseMakeCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= makes[_cardId].curPrice);\n  require(makes[_cardId].is_released == true);\n  require(makesAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = makes[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  makes[_cardId].ownerAddress.transfer(commissionOwner);\n  makes[_cardId].ownerAddress = msg.sender;\n  makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseCompanyCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= companies[_cardId].curPrice);\n  require(companies[_cardId].is_released == true);\n  require(companiesAreInitiated == true);\n  uint256 totalpercent = 150 + 5;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commissionOwner);\n  companies[_cardId].ownerAddress = msg.sender;\n  companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n}\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n  adv_text = _company.adv_text;\n  adv_link = _company.adv_link;\n  adv_price = _company.adv_price;\n  adv_owner = _company.adv_owner;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n  adv_text = _make.adv_text;\n  adv_link = _make.adv_link;\n  adv_price = _make.adv_price;\n  adv_owner = _make.adv_owner;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[4] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n  adv_text = _car.adv_text;\n  adv_link = _car.adv_link;\n  adv_price = _car.adv_price;\n  adv_owner = _car.adv_owner;\n}\n\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany(\"Aston Martin\", 0xe7eca2a94e9d59848f3c1e1ffaacd881d4c3a4f2, 592240896000000000 ,true);\n  addCompany(\"BMW\", 0x327bfb6286026bd1a017ba6693e0f47c8b98731b, 592240896000000000 ,true);\n  addCompany(\"Ferrari\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 379641600000000000 ,true);\n  addCompany(\"Honda\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 243360000000000000 ,true);\n  companies[0].adv_text=\"BurnUP!!!\";\n  companies[0].adv_link=\"https://burnup.io/?r=0x049bEd1598655b64F09E4835084fBc502ab1aD86\";\n  companies[0].adv_owner=0x049bed1598655b64f09e4835084fbc502ab1ad86;\n  companies[0].adv_price=8000000000000000;\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price, bool is_released) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = is_released;\n  companies[companyId].adv_text = 'Your Ad here';\n  companies[companyId].adv_link = 'http://cryptoflipcars.site/';\n  companies[companyId].adv_price   = 5000000000000000;\n  companies[companyId].adv_owner = address1;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake(\"DB5\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 98465804768000000 ,0, true);\n  addMake(\"DB6\", 0x3130259deedb3052e24fad9d5e1f490cb8cccaa0, 62320129600000000 ,0, true);\n  addMake(\"DB9\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"One-77\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"BMW 507\", 0x049bed1598655b64f09e4835084fbc502ab1ad86, 98465804768000000 ,1, false);\n  addMake(\"BMW Z8\", 0xd17e2bfe196470a9fefb567e8f5992214eb42f24, 98465804768000000 ,1, false);\n  addMake(\"Fererrari LaFerrari\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,2, true);\n  addMake(\"Ferrari California\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,2, true);\n  addMake(\"Honda Accord\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,3, true);\n  addMake(\"Honda Civic\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,3, false);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 price, uint256 companyId,  bool is_released) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = is_released;\n  makes[makeId].adv_text = 'Your Ad here';\n  makes[makeId].adv_link = 'http://cryptoflipcars.site/';\n  makes[makeId].adv_price   = 5000000000000000;\n  makes[makeId].adv_owner = address1;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar(\"1964 DB5 James Bond Edition\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"1964 DB5 James Bond Edition\", 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Z8 2003\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"DB6 Chocolate\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,0, 1, true);\n  addCar(\"507 Black\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 4, true);\n  addCar(\"507 Silver\", 0x62d5be95c330b512b35922e347319afd708da981, 16200000000000000 ,1, 4, true);\n  addCar(\"Z8 Black with Red Interior\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"Gordon Ramsey's Grey LaFerrari\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,2, 6, true);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 price, uint256 companyId, uint256 makeId,  bool is_released) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses[0] = address1;\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = is_released;\n  cars[carId].adv_text = 'Your Ad here';\n  cars[carId].adv_link = 'http://cryptoflipcars.site/';\n  cars[carId].adv_price   = 5000000000000000;\n  cars[carId].adv_owner = address1;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_3: 0x3164cdbbd7715000000000000000000000000000000000000000000000000000\ncalldata_CryptoflipCar_4 + calldata_CryptoflipCar_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19905,
        "code": "ntract CryptoflipCar {\nstring version = '1.1';\naddress ownerAddress = 0x3177Abbe93422c9525652b5d4e1101a248A99776;\naddress foundTeamAddress = 0x30A38029bEd78159B0342FF9722C3B56479328D8;\n\nstruct WhaleCard {\n   address ownerAddress;\n   uint256 curPrice;\n}\n\nstruct Car {\n    string name;\n    address[4] ownerAddresses;\n    uint256 curPrice;\n    uint256 companyId;\n    uint256 makeId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n    \nstruct Company {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nstruct Make {\n    string name;\n    address ownerAddress;\n    uint256 curPrice;\n    uint256 companyId;\n    bool is_released;\n    string adv_link;\n    string adv_text;\n    address adv_owner;\n    uint256 adv_price;\n}\n\nCompany[] companies;\nMake[] makes;\nCar[] cars;\nWhaleCard whalecard;\n\nmodifier onlyOwner() {\nrequire (msg.sender == ownerAddress);\n_;\n}\n\nbool companiesAreInitiated = false;\nbool makesAreInitiated = false;\nbool carsAreInitiated = false;\nbool whalecardAreInitiated = false;\nbool isPaused = false;\n\n/*\nWe use the following functions to pause and unpause the game.\n*/\nfunction pauseGame() public onlyOwner {\n  isPaused = true;\n}\n\nfunction playGame() public onlyOwner {\n  isPaused = false;\n}\n\nfunction GetIsPauded() public view returns(bool) {\n  return(isPaused);\n}\n\nfunction purchaseCarAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= cars[_cardId].adv_price);\n  require(isPaused == false);\n  require(cars[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  cars[_cardId].ownerAddresses[0].transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  cars[_cardId].adv_owner.transfer(commissionOwner);\n  cars[_cardId].adv_owner = msg.sender;\n  cars[_cardId].adv_price = div(mul(cars[_cardId].adv_price, totalpercent), 100);\n  cars[_cardId].adv_text = _text;\n  cars[_cardId].adv_link = _link;  \n}\n\nfunction purchaseCompanyAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= companies[_cardId].adv_price);\n  require(isPaused == false);\n  require(companies[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].adv_owner.transfer(commissionOwner);\n  companies[_cardId].adv_owner = msg.sender;\n  companies[_cardId].adv_price = div(mul(companies[_cardId].adv_price, totalpercent), 100);\n  companies[_cardId].adv_text = _text;\n  companies[_cardId].adv_link = _link;  \n}\n\nfunction purchaseMakeAdv(uint256 _cardId, string _text, string _link) public payable {\n  require(msg.value >= makes[_cardId].adv_price);\n  require(isPaused == false);\n  require(makes[_cardId].is_released == true);\n  uint256 totalpercent = 160;\n  uint256 commission5percent = div(mul(msg.value, 5), totalpercent);\n  foundTeamAddress.transfer(commission5percent);\n  uint256 commissionOwner = msg.value - commission5percent;\n  makes[_cardId].ownerAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  makes[_cardId].adv_owner.transfer(commissionOwner);\n  makes[_cardId].adv_owner = msg.sender;\n  makes[_cardId].adv_price = div(mul(makes[_cardId].adv_price, totalpercent), 100);\n  makes[_cardId].adv_text = _text;\n  makes[_cardId].adv_link = _link;  \n}\n\nfunction purchaseWhaleCard() public payable {\n    require(msg.value >= whalecard.curPrice);\n    require(isPaused == false);\n    require(whalecardAreInitiated == true);\n    uint256 totalpercent = 155;\n    uint256 commission5percent = div(mul(msg.value, 5) , totalpercent);\n    foundTeamAddress.transfer(commission5percent);    \n    uint256 commissionOwner = msg.value - commission5percent;\n    whalecard.ownerAddress.transfer(commissionOwner);    \n    whalecard.ownerAddress = msg.sender;\n    whalecard.curPrice = div(mul(whalecard.curPrice, totalpercent), 100);\n}\n\nfunction purchaseCarCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= cars[_cardId].curPrice);\n  require(cars[_cardId].is_released == true);\n  require(carsAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = cars[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  uint256 makeId = cars[_cardId].makeId;\n  makes[makeId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  if (cars[_cardId].ownerAddresses[3] != 0){\n      cars[_cardId].ownerAddresses[3].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[3] = cars[_cardId].ownerAddresses[2];\n  if (cars[_cardId].ownerAddresses[2] != 0){\n      cars[_cardId].ownerAddresses[2].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[2] = cars[_cardId].ownerAddresses[1];\n  if (cars[_cardId].ownerAddresses[1] != 0){\n      cars[_cardId].ownerAddresses[1].transfer(commission2percent);\n      commissionOwner = commissionOwner - commission2percent;\n      totalpercent = totalpercent + 2;\n  }\n  cars[_cardId].ownerAddresses[1] = cars[_cardId].ownerAddresses[0];\n  cars[_cardId].ownerAddresses[0].transfer(commissionOwner);\n  cars[_cardId].ownerAddresses[0] = msg.sender;\n  totalpercent = totalpercent + 2;\n  cars[_cardId].curPrice = div(mul(cars[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseMakeCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= makes[_cardId].curPrice);\n  require(makes[_cardId].is_released == true);\n  require(makesAreInitiated == true);\n  uint256 totalpercent = 150 + 5 + 2;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  uint256 commission2percent = mul(commission1percent, 2);\n  uint256 companyId = makes[_cardId].companyId;\n  companies[companyId].ownerAddress.transfer(commission2percent);\n  commissionOwner = commissionOwner - commission2percent;\n  makes[_cardId].ownerAddress.transfer(commissionOwner);\n  makes[_cardId].ownerAddress = msg.sender;\n  makes[_cardId].curPrice = div(mul(makes[_cardId].curPrice, totalpercent), 100);\n}\n\nfunction purchaseCompanyCard(uint256 _cardId) public payable {\n  require(isPaused == false);   \n  require(msg.value >= companies[_cardId].curPrice);\n  require(companies[_cardId].is_released == true);\n  require(companiesAreInitiated == true);\n  uint256 totalpercent = 150 + 5;\n  uint256 commission1percent = div(mul(msg.value, 1) , totalpercent);  \n  uint256 commissionOwner = msg.value;\n  if (whalecardAreInitiated == true){\n    totalpercent = totalpercent + 1;\n    whalecard.ownerAddress.transfer(commission1percent);\n    commissionOwner = commissionOwner - commission1percent;    \n  }\n  uint256 commission5percent = mul(commission1percent, 5);\n  foundTeamAddress.transfer(commission5percent);\n  commissionOwner = commissionOwner - commission5percent;\n  companies[_cardId].ownerAddress.transfer(commissionOwner);\n  companies[_cardId].ownerAddress = msg.sender;\n  companies[_cardId].curPrice = div(mul(companies[_cardId].curPrice, totalpercent), 100);\n}\n// This function will return all of the details of our company\nfunction getCompanyCount() public view returns (uint) {\n  return companies.length;\n}\n\nfunction getMakeCount() public view returns (uint) {\n  return makes.length;\n}\n\nfunction getCarCount() public view returns (uint) {\n  return cars.length;\n}\n\nfunction getWhaleCard() public view returns (\naddress ownerAddress1,\nuint256 curPrice\n){\n    ownerAddress1 = whalecard.ownerAddress;\n    curPrice = whalecard.curPrice;    \n}\n\n// This function will return all of the details of our company\nfunction getCompany(uint256 _companyId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Company storage _company = companies[_companyId];\n  name = _company.name;\n  ownerAddress1 = _company.ownerAddress;\n  curPrice = _company.curPrice;\n  is_released = _company.is_released;\n  id = _companyId;\n  adv_text = _company.adv_text;\n  adv_link = _company.adv_link;\n  adv_price = _company.adv_price;\n  adv_owner = _company.adv_owner;\n}\n\nfunction getMake(uint _makeId) public view returns (\nstring name,\naddress ownerAddress1,\nuint256 curPrice,\nuint256 companyId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Make storage _make = makes[_makeId];\n  name = _make.name;\n  ownerAddress1 = _make.ownerAddress;\n  curPrice = _make.curPrice;\n  companyId = _make.companyId;\n  is_released = _make.is_released;\n  id = _makeId;\n  adv_text = _make.adv_text;\n  adv_link = _make.adv_link;\n  adv_price = _make.adv_price;\n  adv_owner = _make.adv_owner;\n}\n\nfunction getCar(uint _carId) public view returns (\nstring name,\naddress[4] ownerAddresses,\nuint256 curPrice,\nuint256 companyId,\nuint256 makeId,\nbool is_released,\nstring adv_text,\nstring adv_link,\nuint256 adv_price,\naddress adv_owner,\nuint id\n) {\n  Car storage _car = cars[_carId];\n  name = _car.name;\n  ownerAddresses = _car.ownerAddresses;\n  curPrice = _car.curPrice;\n  makeId = _car.makeId;\n  companyId = _car.companyId;\n  is_released = _car.is_released;\n  id = _carId;\n  adv_text = _car.adv_text;\n  adv_link = _car.adv_link;\n  adv_price = _car.adv_price;\n  adv_owner = _car.adv_owner;\n}\n\n\n/**\n@dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n*/\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nreturn c;\n}\n\n/**\n@dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n*/\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n// assert(b > 0); // Solidity automatically throws when dividing by 0\nuint c = a / b;\n// assert(a == b * c + a % b); // There is no case in which this doesn't hold\nreturn c;\n}\n\n\n\nfunction InitiateCompanies() public onlyOwner {\n  require(companiesAreInitiated == false);\n  addCompany(\"Aston Martin\", 0xe7eca2a94e9d59848f3c1e1ffaacd881d4c3a4f2, 592240896000000000 ,true);\n  addCompany(\"BMW\", 0x327bfb6286026bd1a017ba6693e0f47c8b98731b, 592240896000000000 ,true);\n  addCompany(\"Ferrari\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 379641600000000000 ,true);\n  addCompany(\"Honda\", 0xef764bac8a438e7e498c2e5fccf0f174c3e3f8db, 243360000000000000 ,true);\n  companies[0].adv_text=\"BurnUP!!!\";\n  companies[0].adv_link=\"https://burnup.io/?r=0x049bEd1598655b64F09E4835084fBc502ab1aD86\";\n  companies[0].adv_owner=0x049bed1598655b64f09e4835084fbc502ab1ad86;\n  companies[0].adv_price=8000000000000000;\n  companiesAreInitiated = true;\n}\n\nfunction addCompany(string name, address address1, uint256 price, bool is_released) public onlyOwner {\n  uint companyId = companies.length++;\n  companies[companyId].name = name;\n  companies[companyId].curPrice   = price;\n  companies[companyId].ownerAddress = address1;\n  companies[companyId].is_released   = is_released;\n  companies[companyId].adv_text = 'Your Ad here';\n  companies[companyId].adv_link = 'http://cryptoflipcars.site/';\n  companies[companyId].adv_price   = 5000000000000000;\n  companies[companyId].adv_owner = address1;\n}\n\nfunction setReleaseCompany(uint256 _companyId, bool is_released) public onlyOwner {\n  companies[_companyId].is_released = is_released;\n}\n\nfunction InitiateMakes() public onlyOwner {\n  require(makesAreInitiated == false);\n  addMake(\"DB5\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 98465804768000000 ,0, true);\n  addMake(\"DB6\", 0x3130259deedb3052e24fad9d5e1f490cb8cccaa0, 62320129600000000 ,0, true);\n  addMake(\"DB9\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"One-77\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 39443120000000000 ,0, true);\n  addMake(\"BMW 507\", 0x049bed1598655b64f09e4835084fbc502ab1ad86, 98465804768000000 ,1, false);\n  addMake(\"BMW Z8\", 0xd17e2bfe196470a9fefb567e8f5992214eb42f24, 98465804768000000 ,1, false);\n  addMake(\"Fererrari LaFerrari\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,2, true);\n  addMake(\"Ferrari California\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,2, true);\n  addMake(\"Honda Accord\", 0x7396176ac6c1ef05d57180e7733b9188b3571d9a, 24964000000000000 ,3, true);\n  addMake(\"Honda Civic\", 0xa2381223639181689cd6c46d38a1a4884bb6d83c, 15800000000000000 ,3, false);\n  makesAreInitiated = true;\n}\n\nfunction addMake(string name, address address1, uint256 price, uint256 companyId,  bool is_released) public onlyOwner {\n  uint makeId = makes.length++;\n  makes[makeId].name = name;\n  makes[makeId].curPrice   = price;\n  makes[makeId].ownerAddress = address1;\n  makes[makeId].companyId   = companyId;\n  makes[makeId].is_released   = is_released;\n  makes[makeId].adv_text = 'Your Ad here';\n  makes[makeId].adv_link = 'http://cryptoflipcars.site/';\n  makes[makeId].adv_price   = 5000000000000000;\n  makes[makeId].adv_owner = address1;\n}\n\n\n\nfunction InitiateCars() public onlyOwner {\n  require(carsAreInitiated == false);\n  addCar(\"1964 DB5 James Bond Edition\", 0x5c035bb4cb7dacbfee076a5e61aa39a10da2e956, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"1964 DB5 James Bond Edition\", 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Blue 1965\" , 0x71f35825a3b1528859dfa1a64b24242bc0d12990, 8100000000000000 ,0, 0, true);\n  addCar(\"Z8 2003\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"DB6 Chocolate\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,0, 1, true);\n  addCar(\"507 Black\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 4, true);\n  addCar(\"507 Silver\", 0x62d5be95c330b512b35922e347319afd708da981, 16200000000000000 ,1, 4, true);\n  addCar(\"Z8 Black with Red Interior\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,1, 5, true);\n  addCar(\"Gordon Ramsey's Grey LaFerrari\", 0x3177abbe93422c9525652b5d4e1101a248a99776, 10000000000000000 ,2, 6, true);\n  carsAreInitiated = true;\n}\n\nfunction InitiateWhaleCard() public onlyOwner {\n    require(whalecardAreInitiated == false);\n    whalecard.ownerAddress = ownerAddress;\n    whalecard.curPrice = 100000000000000000;\n    whalecardAreInitiated = true;\n}\n\nfunction addCar(string name, address address1, uint256 price, uint256 companyId, uint256 makeId,  bool is_released) public onlyOwner {\n  uint carId = cars.length++;\n  cars[carId].name = name;\n  cars[carId].curPrice   = price;\n  cars[carId].ownerAddresses[0] = address1;\n  cars[carId].companyId   = companyId;\n  cars[carId].makeId   = makeId;\n  cars[carId].is_released   = is_released;\n  cars[carId].adv_text = 'Your Ad here';\n  cars[carId].adv_link = 'http://cryptoflipcars.site/';\n  cars[carId].adv_price   = 5000000000000000;\n  cars[carId].adv_owner = address1;\n}\n\nfunction setReleaseCar(uint256 _carId, bool is_released) public onlyOwner {\n  cars[_carId].is_released = is_released;\n}\n\nfunction setReleaseMake(uint256 _makeId, bool is_released) public onlyOwner {\n  makes[_makeId].is_released = is_released;\n}\n}",
        "debug": "storage_3: 0x86ee06a7908d001a0039d770000006feffffff135fdaffefb7579fe3ebffffff\nkeccac_0_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CryptoflipCar_4 + calldata_CryptoflipCar_4: 0xd9f465dcb1385ec6f56865e7fff10\nstorage_1: 0x0\ncaller: 0x0\ncalldata_CryptoflipCar_0: 0x380547c000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoflipCar: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addCompany(string,address,uint256,bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0xc07e7c1acc5c61a54e24b2af564bdb1e256f72d5.sol",
        "function": "addCompany(string,address,uint256,bool)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}