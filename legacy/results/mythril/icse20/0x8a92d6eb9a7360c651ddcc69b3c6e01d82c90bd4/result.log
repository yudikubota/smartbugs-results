{"error": null, "issues": [{"address": 332, "code": "if (this.balance < eth_minimum) r", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbcc80b7767bdf7ea3a9421011d8008ebb7a129b0fead7bfbbdebada5fdca601c\ncallvalue: 0xd2e180607001e412010035000daf44c21437200ef94860032103292dc1fffcce\nstorage_2: 0x0\ncalldata_ERC20_0: 0x7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "fallback", "lineno": 96, "title": "Integer Overflow ", "type": "Warning"}, {"address": 409, "code": "    if (kill_switch) return;\n      require(s", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x807ffffffffffffffefffffffffffffffffffffffffffffffffffd\ncallvalue: 0x7fffffffffff7fffffffffffffff000000000000000000000000000000000001\nstorage_2: 0x0\ncalldata_ERC20_0: 0x1f00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "fallback", "lineno": 97, "title": "Integer Overflow ", "type": "Warning"}, {"address": 715, "code": "sg.sender == sale);\n      refund_eth_", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "fallback", "lineno": 106, "title": "Message call to external contract", "type": "Informational"}, {"address": 874, "debug": "callvalue: 0xd2e180607001e412010035000daf44c21437200ef94860032103292dc1fffcce\nstorage_5: 0xbcc80b7767bdf7ea3a9421011d8008ebb7a129b0fead7bfbbdebada5fdca601c\nstorage_9: 0x0\ncaller: 0x0\nstorage_2: 0xff00\ncalldata_ERC20_0: 0x7d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "fallback", "lineno": 110, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1760, "code": "string password) {\n    require(msg.sender == developer || sha3(password) == password_hash);\n    kill_switch = true;\n  }\n  \n  function personal_withdraw(", "debug": "calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0xd4701c3500000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `activate_kill_switch(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "activate_kill_switch(string)", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2149, "code": "  refund_contract_eth_value -= balances_for_refund[msg.sender];\n    refund_eth_v", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x50d7d29000000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_refund()", "lineno": 86, "title": "Exception state", "type": "Informational"}, {"address": 2225, "code": " eth_to_withdraw;\n    balances_for_refund[msg.sender] = 0;\n ", "debug": "storage_4: 0xfffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x100000000000000000000000000000000000000000000\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x50d7d29000000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdraw_refund()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_refund()", "lineno": 87, "title": "Integer Underflow", "type": "Warning"}, {"address": 2365, "code": "s) {\n      balances[msg.sender] += m", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw_refund(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_refund()", "lineno": 93, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3042, "code": "e != 0);\n      uint256 tokens_to", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 71, "title": "Message call to external contract", "type": "Warning"}, {"address": 3042, "code": "e != 0);\n      uint256 tokens_to", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3557\n", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 71, "title": "Multiple Calls", "type": "Information"}, {"address": 3192, "code": "     contract_eth_value -= balances[msg.sender];\n      balances[msg.", "debug": "The exception is triggered under the following conditions:\n\nreturndatasize: 0x20\nretval_3042: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\nstorage_9: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x9cd3cb5d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 73, "title": "Exception state", "type": "Informational"}, {"address": 3267, "code": " 0;\n      uint256 fee = tokens_to_withdraw", "debug": "storage_3: 0xfffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x100000000000000000000000000000000000000000000\nreturndatasize: 0x20\nretval_3042: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xff00\nstorage_9: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_0: 0x9cd3cb5d00000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `withdraw_token(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 74, "title": "Integer Underflow", "type": "Warning"}, {"address": 3273, "code": " 0;\n      uint256 fee = tokens_to_withdraw", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 74, "title": "State change after external call", "type": "Warning"}, {"address": 3341, "code": "     require(myToken.tra", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 76, "title": "State change after external call", "type": "Warning"}, {"address": 3557, "code": "r, tokens_to_withdraw - fee));\n ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "withdraw_token(address)", "lineno": 77, "title": "Message call to external contract", "type": "Warning"}, {"address": 4426, "code": "e(contract_token_balance != 0)", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "personal_withdraw()", "lineno": 46, "title": "Message call to external contract", "type": "Informational"}, {"address": 4426, "code": "e(contract_token_balance != 0)", "debug": "", "description": "A possible transaction order independence vulnerability exists in function personal_withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/19/0x8a92d6eb9a7360c651ddcc69b3c6e01d82c90bd4.sol", "function": "personal_withdraw()", "lineno": 46, "title": "Transaction order dependence", "type": "Warning"}], "success": true}