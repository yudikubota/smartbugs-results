{"error": null, "issues": [{"address": 810, "code": "erAddress, uint32[] minerRewardTokens) public onlyOwner {\n    totalTokenSupply += totalTokensInBatch;\n    for (uint i = 0; i < minerAddress.length; i ++) {\n      minerTokens[minerAddress[i]] = minerTokens[minerAddress[i]].add(minerRewardTokens[i]);\n    }\n  }\n  \n  // Allow miners to withdraw their earnings from the contract. U", "debug": "calldata__ERC20Pool_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata__ERC20Pool_0: 0xf93ee24c00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addMinerTokens(uint32,address[],uint32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "addMinerTokens(uint32,address[],uint32[])", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1724, "code": " kind of you to send Ether, but we prefer ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "withdraw()", "lineno": 83, "title": "Message call to external contract", "type": "Informational"}, {"address": 1965, "code": "20 Tokens, excluding 0", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawEther(uint32). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "withdrawEther(uint32)", "lineno": 94, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2472, "code": "h operations with safety checks that throw on error\n", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "transferAnyERC20Token(address,uint256)", "lineno": 106, "title": "Message call to external contract", "type": "Warning"}, {"address": 2749, "code": "heir earnings from t", "debug": "The exception is triggered under the following conditions:\n\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xf93ee24c00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "addMinerTokens(uint32,address[],uint32[])", "lineno": 72, "title": "Exception state", "type": "Informational"}, {"address": 3044, "code": "nction add(uin", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0xfffffffe00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffff00\ncalldata__ERC20Pool_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "withdraw()", "lineno": 140, "title": "Exception state", "type": "Informational"}, {"address": 3066, "debug": "mem_0 +\n192 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffff7cb5b25\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata__ERC20Pool_cpy: 0x88fddbb900\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xf93ee24c00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addMinerTokens(uint32,address[],uint32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "addMinerTokens(uint32,address[],uint32[])", "lineno": 145, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3091, "debug": "The exception is triggered under the following conditions:\n\nmem_0 +\n192 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata__ERC20Pool_cpy: 0x100\nmem_128 +\n32 +\n32*calldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata__ERC20Pool_4 + calldata__ERC20Pool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata__ERC20Pool_0: 0xf93ee24c00000000000000000000000000000000000000000000000000000000\ncalldatasize__ERC20Pool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2e40bb90b6f0bf8c13e82692f9c6c06e96c71e00.sol", "function": "addMinerTokens(uint32,address[],uint32[])", "lineno": 145, "title": "Exception state", "type": "Informational"}], "success": true}