{
  "contract": "0x3d09042559ed46e61f0f1b6a13355e3d06368b2a",
  "tool": "mythril",
  "start": 1563761359.0429254,
  "end": 1563761433.1953309,
  "duration": 74.15240550041199,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 497,
        "code": "er(_newOwner, _token.balanceOf(_token.owner()));\n        _token.transferOwnership(_newOwner);\n        return true;\n    }\n\n    function sendToken(address _address, uint256 _amountTokens) public onlyOwne",
        "debug": "calldata_XdacTokenCrowdsale_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XdacTokenCrowdsale_0: 0x2bf0430400000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `whitelistAddresses(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "whitelistAddresses(address[])",
        "lineno": 495,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1117,
        "code": "56 _tokenAmount) public view returns (uint256) {\n        return _getEthAmount(_tokenAmount);\n    }\n\n   ",
        "debug": "storage_7: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_XdacTokenCrowdsale_0: 0xa39fac1200000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "getAddresses()",
        "lineno": 544,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1269,
        "code": "ontributor) public onlyOwner {\n        _refundTokens(_contributor);\n    }\n\n\n    /**********************contributor*************************/\n\n    function getAddresses() public onlyOwner view returns (address[] )  {\n        return addresses;\n    }\n\n    /**\n    * @dev Refound tokens. For contributors\n    */\n    function refundTokens() public {\n        _refundTokens(msg.sender);\n    }\n    /**\n     * @dev Retur",
        "debug": "calldata_XdacTokenCrowdsale_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_XdacTokenCrowdsale_0: 0xd8b66ae100000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `sendTokens(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendTokens(address[],uint256[])",
        "lineno": 517,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1831,
        "code": "++) {\n       ",
        "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\nstorage_3: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_XdacTokenCrowdsale_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XdacTokenCrowdsale_0: 0xec8ac4d800000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "buyTokens(address)",
        "lineno": 363,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2368,
        "code": "gth  == _amoun",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 508,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2368,
        "code": "gth  == _amoun",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2960\nCall at address: 2745\nCall at address: 2553\n",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 508,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2553,
        "code": "re(_addresses.length  == _amount",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 508,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2553,
        "code": "re(_addresses.length  == _amount",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2960\nCall at address: 2745\n",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 508,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2745,
        "code": ".length > 0);\n        require(_addresses.length  == _amountT",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 507,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2745,
        "code": ".length > 0);\n        require(_addresses.length  == _amountT",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2960\n",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 507,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2960,
        "code": "h);\n        for (uint256 i = 0; i <",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "transferTokenOwnership(address)",
        "lineno": 508,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3705,
        "code": "tokenAmount);\n  ",
        "debug": "storage_7: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_XdacTokenCrowdsale_0: 0xa39fac1200000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "getAddresses()",
        "lineno": 545,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3707,
        "code": "tokenAmount);\n  ",
        "debug": "storage_7: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_XdacTokenCrowdsale_0: 0xa39fac1200000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getAddresses()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "getAddresses()",
        "lineno": 545,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4501,
        "code": " node_modules/",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_8: 0x6d0345226634833c4720c556181ea1490c10e001e312c8018f001e7852a89833\ncallvalue: 0xcad88fd76199c431a686d75fdf9f3a6defaee7b1fbd8ebbdedb35f7f968b41cc\nstorage_1: 0x6\nstorage_3: 0xcad88fd76199c431a686d75fdf9f3a6defaee7b1fbd8ebbdedb35f7f968b41cc\ncalldata_XdacTokenCrowdsale_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_XdacTokenCrowdsale_0: 0xec8ac4d800000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "buyTokens(address)",
        "lineno": 51,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5251,
        "code": ">= _amountTokens);\n        _wh",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 475,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5612,
        "code": "hitelistAddres",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 490,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5612,
        "code": "hitelistAddres",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6041\nCall at address: 5797\n",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 490,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5797,
        "code": "wner {\n        _whitelistAddress",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 489,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5797,
        "code": "wner {\n        _whitelistAddress",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6041\n",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 489,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6041,
        "code": "_newOwner) public onlyOwner returns(bool",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "sendToken(address,uint256)",
        "lineno": 493,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6329,
        "code": ";\n        }\n    }\n\n    function ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function refundTokensForAddress(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "refundTokensForAddress(address)",
        "lineno": 469,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 6822,
        "code": "eturns (uint2",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_XdacTokenCrowdsale_0: 0xf7fb07b000000000000000000000000000000000000000000000000000000000\ncalldatasize_XdacTokenCrowdsale: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/46/0x3d09042559ed46e61f0f1b6a13355e3d06368b2a.sol",
        "function": "getCurrentRate()",
        "lineno": 375,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}