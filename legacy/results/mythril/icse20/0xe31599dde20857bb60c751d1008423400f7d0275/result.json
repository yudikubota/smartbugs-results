{
  "contract": "0xe31599dde20857bb60c751d1008423400f7d0275",
  "tool": "mythril",
  "start": 1563708932.492115,
  "end": 1563708969.724951,
  "duration": 37.2328360080719,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 928,
        "debug": "calldata_liebelein_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_liebelein_0: 0x4000aea000000000000000000000000000000000000000000000000000000000\ncalldatasize_liebelein: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe31599dde20857bb60c751d1008423400f7d0275.sol",
        "function": "transferAndCall(address,uint256,bytes)",
        "lineno": 626,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3193,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/40/0xe31599dde20857bb60c751d1008423400f7d0275.sol",
        "function": "transferAndCall(address,uint256,bytes)",
        "lineno": 626,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5425,
        "code": "turn a - b;\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_liebelein_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_liebelein_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_liebelein: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe31599dde20857bb60c751d1008423400f7d0275.sol",
        "function": "burn(uint256)",
        "lineno": 24,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5443,
        "code": "    r",
        "debug": "storage_0: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_liebelein_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_liebelein_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_liebelein: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/40/0xe31599dde20857bb60c751d1008423400f7d0275.sol",
        "function": "mint(address,uint256)",
        "lineno": 30,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5456,
        "code": ";\n  }\n}\n\n\n\n/**",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_0: 0x1\ncalldata_liebelein_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_liebelein_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_liebelein: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/40/0xe31599dde20857bb60c751d1008423400f7d0275.sol",
        "function": "mint(address,uint256)",
        "lineno": 30,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}