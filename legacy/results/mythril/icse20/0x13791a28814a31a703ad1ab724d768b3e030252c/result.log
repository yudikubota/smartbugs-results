{"error": null, "issues": [{"address": 469, "code": "     return admins;\n    }\n\n}\n\n\ninterface tokenRecipient {\n    function receiveApprova", "debug": "storage_1: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_tokenRecipient_0: 0x31ae450b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAdmins()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "getAdmins()", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 856, "code": "s[] public admins;\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_tokenRecipient_4: 0x0\nstorage_1: 0x0\ncalldata_tokenRecipient_0: 0x14bfd6d000000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "_function_0x14bfd6d0", "lineno": 7, "title": "Exception state", "type": "Informational"}, {"address": 1186, "code": "  if (admins[i] =", "debug": "storage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeAdmin(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "removeAdmin(address)", "lineno": 36, "title": "Integer Underflow", "type": "Warning"}, {"address": 1230, "code": "  admins[", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "removeAdmin(address)", "lineno": 37, "title": "Exception state", "type": "Informational"}, {"address": 1575, "code": "nction receiv", "debug": "storage_1: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_tokenRecipient_0: 0x31ae450b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAdmins()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "getAdmins()", "lineno": 67, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1577, "code": "nction receiv", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_tokenRecipient_0: 0x31ae450b00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getAdmins()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "getAdmins()", "lineno": 67, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2635, "code": ";\n\n\ncontract owned", "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x7048027500000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addAdmin(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "addAdmin(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2951, "code": "tract owned {\n\n    address public owner;\n    address[] public admins;\n    mapping (address => bool) public isAdmin;\n\n    function owned() public {\n        owner = msg.sender;\n        isAdmin[msg.sender] = true;\n        admins.push(msg.sender);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(isAdmin[msg.sender]);\n        _;\n    }\n\n    function addAdmin(address user) onlyOwner public {\n        require(!isAdmin[user]);\n        isAdmin[user] = true;\n        admins.push(user);\n    }\n\n    function removeAdmin(address user) onlyOwner public {\n        require(isAdmin[user]);\n        isAdmin[user] = false;\n        for (uint i = 0; i < admins.length - 1; i++)\n            if (admins[i] == user) {\n                admins[i] = admins[admins.length - 1];\n                break;\n            }\n        admins.length -= 1;\n    }\n\n    function replaceAdmin(address oldAdmin, address newAdmin) onlyOwner public {\n        require(isAdmin[oldAdmin]);\n        require(!isAdmin[newAdmin]);\n        for (uint i = 0; i < admins.length; i++)\n            if (admins[i] == oldAdmin) {\n                admins[i] = newAdmin;\n                break;\n            }\n        isAdmin[oldAdmin] = false;\n        isAdmin[newAdmin] = true;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n\n    function getAdmins() public view returns (address[]) {\n        return admins;\n    }\n\n}\n\n\ninterface tokenRecipient {\n    function receiveApproval(add", "debug": "storage_1: 0x7fffffffffffffffffffffffffffffffffffb4b5053cdff80000000000000000\ncalldata_tokenRecipient_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeAdmin(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "removeAdmin(address)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2953, "code": "tract owned {\n\n    address public owner;\n    address[] public admins;\n    mapping (address => bool) public isAdmin;\n\n    function owned() public {\n        owner = msg.sender;\n        isAdmin[msg.sender] = true;\n        admins.push(msg.sender);\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyAdmin {\n        require(isAdmin[msg.sender]);\n        _;\n    }\n\n    function addAdmin(address user) onlyOwner public {\n        require(!isAdmin[user]);\n        isAdmin[user] = true;\n        admins.push(user);\n    }\n\n    function removeAdmin(address user) onlyOwner public {\n        require(isAdmin[user]);\n        isAdmin[user] = false;\n        for (uint i = 0; i < admins.length - 1; i++)\n            if (admins[i] == user) {\n                admins[i] = admins[admins.length - 1];\n                break;\n            }\n        admins.length -= 1;\n    }\n\n    function replaceAdmin(address oldAdmin, address newAdmin) onlyOwner public {\n        require(isAdmin[oldAdmin]);\n        require(!isAdmin[newAdmin]);\n        for (uint i = 0; i < admins.length; i++)\n            if (admins[i] == oldAdmin) {\n                admins[i] = newAdmin;\n                break;\n            }\n        isAdmin[oldAdmin] = false;\n        isAdmin[newAdmin] = true;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n\n    function getAdmins() public view returns (address[]) {\n        return admins;\n    }\n\n}\n\n\ninterface tokenRecipient {\n    function receiveApproval(add", "debug": "storage_1: 0x7fe5f7fffff7fffffffffffffffffffffffffffffffffffffffffffffffffffd\ncalldata_tokenRecipient_4: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xff00\nstorage_0: 0x0\ncaller: 0x0\ncalldata_tokenRecipient_0: 0x1785f53c00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeAdmin(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/3/0x13791a28814a31a703ad1ab724d768b3e030252c.sol", "function": "removeAdmin(address)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}], "success": true}