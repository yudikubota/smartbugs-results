{"success": false, "error": "Solc experienced a fatal error (code 1).\n\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1:1: Error: Source file requires different compiler version (current compiler is 0.4.25+commit.59dbf8f1.Linux.g++ - note that nightly builds are considered to be strictly less than the released version\npragma solidity 0.4.19;\r\n^---------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1118:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function HonestSweepStakes() public payable {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:779:50: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        oraclize_randomDS_setCommitment(queryId, keccak256(bytes8(_delay), args[1], sha256(args[0]), args[2]));\r\n                                                 ^----------------------------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:890:47: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                              ^---------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:890:37: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                    ^--------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:890:37: Warning: The provided argument of type bytes32 is not implicitly convertible to expected type bytes memory.\n        if (!(keccak256(keyhash) == keccak256(sha256(context_name, queryId)))) return false;\r\n                                    ^--------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:908:48: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        if (oraclize_randomDS_args[queryId] == keccak256(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\r\n                                               ^--------------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1212:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        ParticipantJoined(level, participantNumberInRound, round, msg.sender);\r\n        ^-------------------------------------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1289:38: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            uint randomNumber = uint(keccak256(_result)) % maxRange; \r\n                                     ^----------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1289:38: Warning: The provided argument of type string memory is not implicitly convertible to expected type bytes memory.\n            uint randomNumber = uint(keccak256(_result)) % maxRange; \r\n                                     ^----------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1302:9: Warning: Invoking events without \"emit\" prefix is deprecated.\n        RandomNumberGenerated(_randomNumber, qd.level);\r\n        ^--------------------------------------------^\n/unique_chucks/45/0x4e55567c52cfde3a09441693a5a82a5c381226f9.sol:1435:23: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        uint amount = this.balance;\r\n                      ^----------^\n", "issues": []}