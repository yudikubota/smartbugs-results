{
  "contract": "0x52a8908a90760898da84b430cbdda30d9bfae403",
  "tool": "mythril",
  "start": 1563617895.027179,
  "end": 1563617933.436187,
  "duration": 38.40900802612305,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1151,
        "code": " external onlyOwner {\n      ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Sales_4: 0x65\ncalldata_Sales_0: 0xb1d07de00000000000000000000000000000000000000000000000000000000\ncalldatasize_Sales: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "_function_0x0b1d07de",
        "lineno": 91,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1847,
        "code": "unt[_tokenId] == 0)\n   ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 112,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1847,
        "code": "unt[_tokenId] == 0)\n   ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2621\nCall at address: 2621\nCall at address: 2259\n",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 112,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1847,
        "code": "unt[_tokenId] == 0)\n   ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function purchaseParrot(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 112,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2037,
        "code": "       require(dis",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Sales_4: 0x65\nreturndatasize: 0xa0\nretval_1847: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncalldata_Sales_0: 0x770c59b800000000000000000000000000000000000000000000000000000000\ncalldatasize_Sales: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 115,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2259,
        "code": ");\n        \n        parent.trans",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 115,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2259,
        "code": ");\n        \n        parent.trans",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2621\n",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 115,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2259,
        "code": ");\n        \n        parent.trans",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function purchaseParrot(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 115,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2621,
        "code": "{\n        parent.transfer(to, _tokenI",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 120,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2621,
        "code": "{\n        parent.transfer(to, _tokenI",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function purchaseParrot(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "purchaseParrot(uint256)",
        "lineno": 120,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2941,
        "code": "ransfer(summ);\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "gift(uint256,address)",
        "lineno": 125,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2941,
        "code": "ransfer(summ);\n    }\n}",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function gift(uint256,address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "gift(uint256,address)",
        "lineno": 125,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3303,
        "code": " _address) public ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Sales_4: 0x65\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Sales_0: 0xc7a4af1500000000000000000000000000000000000000000000000000000000\ncalldatasize_Sales: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "setPrice(uint8,uint128)",
        "lineno": 98,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3547,
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdrawBalance(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0x52a8908a90760898da84b430cbdda30d9bfae403.sol",
        "function": "withdrawBalance(uint256)",
        "lineno": 127,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}