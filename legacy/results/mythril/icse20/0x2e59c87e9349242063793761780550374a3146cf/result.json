{
  "contract": "0x2e59c87e9349242063793761780550374a3146cf",
  "tool": "mythril",
  "start": 1563312923.4843578,
  "end": 1563312959.6204836,
  "duration": 36.136125802993774,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 3105,
        "code": "ozenFunds(_target, freeze);\n }\n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x2e59c87e9349242063793761780550374a3146cf.sol",
        "function": "refundTokens(address,address,uint256)",
        "lineno": 371,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 5265,
        "code": " }\n\n  function",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x7e1f2bb800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x2e59c87e9349242063793761780550374a3146cf.sol",
        "function": "createTokens(uint256)",
        "lineno": 38,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5283,
        "code": "\n  }\n",
        "debug": "storage_4: 0x32000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffe64fbd2f9a8884\ncalldata_Token_4: 0x52173d4fd82cf6\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x7e1f2bb800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `createTokens(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x2e59c87e9349242063793761780550374a3146cf.sol",
        "function": "createTokens(uint256)",
        "lineno": 43,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5296,
        "code": "**\n * ERC-20 s",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x11a2ce160d17f4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffd54001f82064a7\ncalldata_Token_4: 0x553fedf84a7490\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x7e1f2bb800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x2e59c87e9349242063793761780550374a3146cf.sol",
        "function": "createTokens(uint256)",
        "lineno": 50,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}