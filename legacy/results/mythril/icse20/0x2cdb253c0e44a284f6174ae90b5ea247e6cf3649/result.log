{"error": null, "issues": [{"address": 359, "code": ";\n\n/**\n\n  EN:\n\n  W", "debug": "storage_3: 0x0\ncallvalue: 0x8007c0027a0080\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ngas: 0x3d090\ncalldata_BestMultiplierV2_0: 0x200000000000000000000000000000000000000000000000000000000\ncalldatasize_BestMultiplierV2: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 571, "code": "positor.send(leftPayout); ", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffb65e423334610041\ncallvalue: 0x1114e5e3f354f3473\ngas: 0x3d090\ncalldata_BestMultiplierV2_0: 0x300000000000000000000000000000000000000000000000000000000\ncalldatasize_BestMultiplierV2: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 204, "title": "Integer Overflow ", "type": "Warning"}, {"address": 718, "code": "        delete queue[idx];\n\n    ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2011\nCall at address: 2011\nCall at address: 2011\nCall at address: 1718\nCall at address: 2011\nCall at address: 1718\n", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 210, "title": "Multiple Calls", "type": "Information"}, {"address": 1556, "code": "  }\n\n    /", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x52bc4182161000000\ncallvalue: 0x2023cef3fffa0001\nstorage_0: 0x0\nstorage_2: 0x1\nretval_718: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x4563918244f3ffff\ngas: 0x3d090\ncalldatasize_BestMultiplierV2: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 227, "title": "Exception state", "type": "Informational"}, {"address": 1582, "code": " (uint) {\n        return", "debug": "storage_3: 0x1ae0a5231c7300004\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*storage_2: 0x6e905101da48406280027a80017a8000bd314200000000fd8303948000003f16\ncallvalue: 0x1f5dde619600000\nstorage_0: 0x0\nstorage_2: 0x0\nstorage_5: 0x4563918244f40000\ngas: 0x3d090\ncalldatasize_BestMultiplierV2: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 230, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1718, "code": "ed <= 500 ether) {\n           ", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 241, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2011, "code": " } else if (totalInvested", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "fallback", "lineno": 256, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 2331, "code": "investors in line\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_BestMultiplierV2_4: 0x0\nstorage_0: 0x0\ncalldata_BestMultiplierV2_0: 0xddf0b00900000000000000000000000000000000000000000000000000000000\ncalldatasize_BestMultiplierV2: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x2cdb253c0e44a284f6174ae90b5ea247e6cf3649.sol", "function": "_function_0xddf0b009", "lineno": 173, "title": "Exception state", "type": "Informational"}], "success": true}