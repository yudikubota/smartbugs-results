{"error": null, "issues": [{"address": 1037, "debug": "calldata_VnbigToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VnbigToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "setTokenInformation(string,string)", "lineno": 562, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5784, "code": "\n\n/**", "debug": "calldata_VnbigToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VnbigToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "mint(address,uint256)", "lineno": 51, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5797, "code": "tle Ownable\n *", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_1: 0x1\ncalldata_VnbigToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_VnbigToken_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "mint(address,uint256)", "lineno": 54, "title": "Exception state", "type": "Informational"}, {"address": 8674, "code": "\n  /**\n  * @de", "debug": "The exception is triggered under the following conditions:\n\ncalldata_VnbigToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_VnbigToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "burn(uint256)", "lineno": 42, "title": "Exception state", "type": "Informational"}, {"address": 9297, "code": "AL_SUPPLY;\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0), msg.sender, totalSupply_);\n    }\n\n    function() public payable {\n      revert(); //if ether is sent to this address, send it back.\n    }  \n\n    function transfer(address _to, uint256 _value) public returns (bool)\n    {\n        require(!frozenAccount[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n    {\n        require(!frozenAccount[msg.sender]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function freezeAccount(address _to, bool freeze) public onlyOwner {\n        frozenAccount[_to] = freeze;\n        emit FrozenFunds(_to, freeze);\n    }     \n    \n    /**\n     * @dev Update the symbol.\n     * @param _tokenSymbol The symbol name.\n     */\n    function setTokenInformation(string _tokenName, string _tokenSymbol) public onlyOwner {\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        emit UpdatedTokenInformation(name, symbol);\n    } \n\n}", "debug": "calldata_VnbigToken_4 + calldata_VnbigToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VnbigToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "setTokenInformation(string,string)", "lineno": 525, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9311, "code": "AL_SUPPLY;\n        balances[msg.sender] = totalSupply_;\n        emit Transfer(address(0), msg.sender, totalSupply_);\n    }\n\n    function() public payable {\n      revert(); //if ether is sent to this address, send it back.\n    }  \n\n    function transfer(address _to, uint256 _value) public returns (bool)\n    {\n        require(!frozenAccount[msg.sender]);\n        return super.transfer(_to, _value);\n    }\n\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool)\n    {\n        require(!frozenAccount[msg.sender]);\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function freezeAccount(address _to, bool freeze) public onlyOwner {\n        frozenAccount[_to] = freeze;\n        emit FrozenFunds(_to, freeze);\n    }     \n    \n    /**\n     * @dev Update the symbol.\n     * @param _tokenSymbol The symbol name.\n     */\n    function setTokenInformation(string _tokenName, string _tokenSymbol) public onlyOwner {\n        name = _tokenName;\n        symbol = _tokenSymbol;\n        emit UpdatedTokenInformation(name, symbol);\n    } \n\n}", "debug": "calldata_VnbigToken_4 + calldata_VnbigToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VnbigToken_0: 0x4eee966f00000000000000000000000000000000000000000000000000000000\ncalldatasize_VnbigToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setTokenInformation(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x7c00b75a59fcb9d143ee93443e95751ef97d2dc9.sol", "function": "setTokenInformation(string,string)", "lineno": 525, "title": "Integer Overflow ", "type": "Warning"}], "success": true}