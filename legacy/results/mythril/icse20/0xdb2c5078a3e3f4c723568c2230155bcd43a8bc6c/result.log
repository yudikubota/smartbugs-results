{"error": null, "issues": [{"address": 1080, "code": "idate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.tr", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1345, "code": " subjects[subjects_a", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Certificate_4: 0x0\nstorage_2: 0x0\ncalldata_Certificate_0: 0xf6dd018700000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "getSubject(uint256)", "lineno": 48, "title": "Exception state", "type": "Informational"}, {"address": 2456, "code": "ntract Certificate {\n  struct Subject {\n    uint id;            \n    address validate_hash; \n    uint birthday;      \n    string fullname;   \n    uint8 gender;       \n    uint dt_sign;       \n    uint dt_cancel;    \n  }\n  uint8 type_id;   \n  uint dt_create; \n  address[] subjects_addr; \n  mapping (address => Subject) subjects;\n  address _owner;       \n\n  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n    type_id = _type_id;\n    dt_create = _dt_create;\n    subjects_addr = _subjects_addr;\n    _owner = msg.sender;\n  }\n\n  modifier restricted_to_subject {\n      bool allowed = false;\n      for(uint i = 0; i < subjects_addr.length; i++) {\n        if (msg.sender == subjects_addr[i]) {\n          allowed = true;\n          break;\n        }\n      }\n      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n        revert();\n      }\n      _;\n  }\n\n  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.transfer(msg.value);\n  }\n\n  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n    _id = subjects[subjects_addr[index]].id;\n    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n    _birthday = subjects[subjects_addr[index]].birthday;\n    _fullname = subjects[subjects_addr[index]].fullname;\n    _gender = subjects[subjects_addr[index]].gender;\n    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n  }\n\n  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n    _type_id = type_id;\n    _dt_create = dt_create;\n    _subjects_count = subjects_addr.length;\n  }\n}", "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2485, "code": "ntract Certificate {\n  struct Subject {\n    uint id;            \n    address validate_hash; \n    uint birthday;      \n    string fullname;   \n    uint8 gender;       \n    uint dt_sign;       \n    uint dt_cancel;    \n  }\n  uint8 type_id;   \n  uint dt_create; \n  address[] subjects_addr; \n  mapping (address => Subject) subjects;\n  address _owner;       \n\n  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n    type_id = _type_id;\n    dt_create = _dt_create;\n    subjects_addr = _subjects_addr;\n    _owner = msg.sender;\n  }\n\n  modifier restricted_to_subject {\n      bool allowed = false;\n      for(uint i = 0; i < subjects_addr.length; i++) {\n        if (msg.sender == subjects_addr[i]) {\n          allowed = true;\n          break;\n        }\n      }\n      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n        revert();\n      }\n      _;\n  }\n\n  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.transfer(msg.value);\n  }\n\n  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n    _id = subjects[subjects_addr[index]].id;\n    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n    _birthday = subjects[subjects_addr[index]].birthday;\n    _fullname = subjects[subjects_addr[index]].fullname;\n    _gender = subjects[subjects_addr[index]].gender;\n    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n  }\n\n  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n    _type_id = type_id;\n    _dt_create = dt_create;\n    _subjects_count = subjects_addr.length;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2499, "code": "ntract Certificate {\n  struct Subject {\n    uint id;            \n    address validate_hash; \n    uint birthday;      \n    string fullname;   \n    uint8 gender;       \n    uint dt_sign;       \n    uint dt_cancel;    \n  }\n  uint8 type_id;   \n  uint dt_create; \n  address[] subjects_addr; \n  mapping (address => Subject) subjects;\n  address _owner;       \n\n  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n    type_id = _type_id;\n    dt_create = _dt_create;\n    subjects_addr = _subjects_addr;\n    _owner = msg.sender;\n  }\n\n  modifier restricted_to_subject {\n      bool allowed = false;\n      for(uint i = 0; i < subjects_addr.length; i++) {\n        if (msg.sender == subjects_addr[i]) {\n          allowed = true;\n          break;\n        }\n      }\n      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n        revert();\n      }\n      _;\n  }\n\n  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.transfer(msg.value);\n  }\n\n  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n    _id = subjects[subjects_addr[index]].id;\n    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n    _birthday = subjects[subjects_addr[index]].birthday;\n    _fullname = subjects[subjects_addr[index]].fullname;\n    _gender = subjects[subjects_addr[index]].gender;\n    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n  }\n\n  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n    _type_id = type_id;\n    _dt_create = dt_create;\n    _subjects_count = subjects_addr.length;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2516, "code": "ntract Certificate {\n  struct Subject {\n    uint id;            \n    address validate_hash; \n    uint birthday;      \n    string fullname;   \n    uint8 gender;       \n    uint dt_sign;       \n    uint dt_cancel;    \n  }\n  uint8 type_id;   \n  uint dt_create; \n  address[] subjects_addr; \n  mapping (address => Subject) subjects;\n  address _owner;       \n\n  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n    type_id = _type_id;\n    dt_create = _dt_create;\n    subjects_addr = _subjects_addr;\n    _owner = msg.sender;\n  }\n\n  modifier restricted_to_subject {\n      bool allowed = false;\n      for(uint i = 0; i < subjects_addr.length; i++) {\n        if (msg.sender == subjects_addr[i]) {\n          allowed = true;\n          break;\n        }\n      }\n      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n        revert();\n      }\n      _;\n  }\n\n  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.transfer(msg.value);\n  }\n\n  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n    _id = subjects[subjects_addr[index]].id;\n    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n    _birthday = subjects[subjects_addr[index]].birthday;\n    _fullname = subjects[subjects_addr[index]].fullname;\n    _gender = subjects[subjects_addr[index]].gender;\n    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n  }\n\n  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n    _type_id = type_id;\n    _dt_create = dt_create;\n    _subjects_count = subjects_addr.length;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0x25\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2521, "code": "ntract Certificate {\n  struct Subject {\n    uint id;            \n    address validate_hash; \n    uint birthday;      \n    string fullname;   \n    uint8 gender;       \n    uint dt_sign;       \n    uint dt_cancel;    \n  }\n  uint8 type_id;   \n  uint dt_create; \n  address[] subjects_addr; \n  mapping (address => Subject) subjects;\n  address _owner;       \n\n  function Certificate(uint8 _type_id, uint _dt_create, address[] _subjects_addr) public {\n    type_id = _type_id;\n    dt_create = _dt_create;\n    subjects_addr = _subjects_addr;\n    _owner = msg.sender;\n  }\n\n  modifier restricted_to_subject {\n      bool allowed = false;\n      for(uint i = 0; i < subjects_addr.length; i++) {\n        if (msg.sender == subjects_addr[i]) {\n          allowed = true;\n          break;\n        }\n      }\n      if (subjects[msg.sender].dt_sign != 0 || allowed == false) {\n        revert();\n      }\n      _;\n  }\n\n  function Sign(uint _id, address _validate_hash, uint _birthday, uint8 _gender, uint _dt_sign, string _fullname) public restricted_to_subject payable {\n    subjects[msg.sender] = Subject(_id, _validate_hash, _birthday, _fullname, _gender, _dt_sign, 0);\n    if(msg.value != 0)\n      _owner.transfer(msg.value);\n  }\n\n  function getSubject(uint index) public constant returns (uint _id, address _validate_hash, uint _birthday, string _fullname, uint8 _gender, uint _dt_sign, uint _dt_cancel) {\n    _id = subjects[subjects_addr[index]].id;\n    _validate_hash = subjects[subjects_addr[index]].validate_hash;\n    _birthday = subjects[subjects_addr[index]].birthday;\n    _fullname = subjects[subjects_addr[index]].fullname;\n    _gender = subjects[subjects_addr[index]].gender;\n    _dt_sign = subjects[subjects_addr[index]].dt_sign;\n    _dt_cancel = subjects[subjects_addr[index]].dt_cancel;\n  }\n\n  function getCertificate() public constant returns (uint8 _type_id, uint _dt_create, uint _subjects_count) {\n    _type_id = type_id;\n    _dt_create = dt_create;\n    _subjects_count = subjects_addr.length;\n  }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nkeccac_3_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Certificate_4 + calldata_Certificate_32 + 132)) +\n96: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nstorage_29102676481673041902632991033461445430619272659676223336789171408008386403022: 0x0\ncaller: 0x0\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Certificate_0: 0x13d073d000000000000000000000000000000000000000000000000000000000\ncalldatasize_Certificate: 0x4\nstorage_5 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `Sign(uint256,address,uint256,uint8,uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xdb2c5078a3e3f4c723568c2230155bcd43a8bc6c.sol", "function": "Sign(uint256,address,uint256,uint8,uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}