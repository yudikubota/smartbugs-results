{
  "contract": "0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888",
  "tool": "mythril",
  "start": 1563627008.7182598,
  "end": 1563627032.410538,
  "duration": 23.692278146743774,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 556,
        "code": "ockTime>acc.unlockTime)a",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc0ccbbc16438215de6d65ddfed42a4757c955018ef7df4f4fa687ce6af60fdaa\ncallvalue: 0x6068f009973eba61a414219be8e737653145e8dae67dc6eac5495ef60e5ec14c\ncalldata_MONEY_BOX_0: 0x11200000000000000000000000000000000000000000000000000000000\ncalldatasize_MONEY_BOX: 0x4\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "fallback",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 571,
        "code": "now+_lockTime",
        "debug": "timestamp: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_MONEY_BOX_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_MONEY_BOX_0: 0x65f3c31a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MONEY_BOX: 0x4\n",
        "description": "A possible integer overflow exists in the function `Put(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Put(uint256)",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 580,
        "code": "g.sender,msg.",
        "debug": "timestamp: 0x804fffeffdefff0000001afbe6f4ff72bbed904890000c4000000004d01a4f8a\ncalldata_MONEY_BOX_4: 0x80400020042000fffffff2f21466fc44440806ad4000118c10fffff828060088\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9000100210000000000dedfb5bfbb6fff596f5d0001dcc10fffffcf8205011\ncalldata_MONEY_BOX_0: 0x65f3c31a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MONEY_BOX: 0x4\n",
        "description": "A possible integer overflow exists in the function `Put(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Put(uint256)",
        "lineno": 46,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 846,
        "code": ");\n    }\n    \n    function Collect(uint _am)\n ",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 846,
        "code": ");\n    }\n    \n    function Collect(uint _am)\n ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "fallback",
        "lineno": 46,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1117,
        "code": "     acc.balance-=_am;\n     ",
        "debug": "",
        "description": "In the function `Collect(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Collect(uint256)",
        "lineno": 58,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1117,
        "code": "     acc.balance-=_am;\n     ",
        "debug": "",
        "description": "This contract executes a message call to the address of the transaction sender. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Collect(uint256)",
        "lineno": 58,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1117,
        "code": "     acc.balance-=_am;\n     ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1401\n",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Collect(uint256)",
        "lineno": 58,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1401,
        "code": "}\n        }\n    }\n    \n    function() \n    p",
        "debug": "",
        "description": "This contract executes a message call to an address found at storage slot 2. This storage slot can be written to by calling the function `SetLogFile(address)`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Collect(uint256)",
        "lineno": 60,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 1401,
        "code": "}\n        }\n    }\n    \n    function() \n    p",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function Collect(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/26/0xbe4041d55db380c5ae9d4a9b9703f1ed4e7e3888.sol",
        "function": "Collect(uint256)",
        "lineno": 60,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}