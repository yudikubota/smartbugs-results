{
  "contract": "0x0f690a76ad438222ce694d84b2902b0ee2270e69",
  "tool": "mythril",
  "start": 1563226701.5248716,
  "end": 1563226865.6490793,
  "duration": 164.12420773506165,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 104,
        "code": "teProof(\n        string seed,\n        address caller, \n        address receiver,\n        Algorithm algorithm\n    ) pure public returns(bytes32 hash, bytes32 operator, bytes32 check, address check_receiver, bool valid) {\n        (hash, operator, check) = _escrow(seed, caller, receiver, algorithm);\n        check_receiver = address(hash_data(hash_seed(seed, algorithm), algorithm)^operator);\n        valid = (receiver == check_receiver);\n        if (check_receiver == 0) check_receiver = caller;\n    }\n\n    function _escrow(\n ",
        "debug": "calldata_Secure_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Secure_0: 0x7ca005b300000000000000000000000000000000000000000000000000000000\ncalldatasize_Secure: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x7ca005b3`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x0f690a76ad438222ce694d84b2902b0ee2270e69.sol",
        "function": "_function_0x7ca005b3",
        "lineno": 16,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1386,
        "code": "a256(seed);\n        } else",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Secure_32 + 68: 0xfe\ncalldata_Secure_32 + 36: 0x0\ncalldata_Secure_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Secure_0: 0x7ca005b300000000000000000000000000000000000000000000000000000000\ncalldatasize_Secure: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x0f690a76ad438222ce694d84b2902b0ee2270e69.sol",
        "function": "_function_0x7ca005b3",
        "lineno": 53,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}