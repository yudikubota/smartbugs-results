{
  "contract": "0x9a688e01028670141e4e0551560c7bbdc28d006e",
  "tool": "mythril",
  "start": 1563514327.6328611,
  "end": 1563514579.845883,
  "duration": 252.2130217552185,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 251,
        "code": ";\n balances[Owner] += token;\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SWAP_0: 0x562b9f300000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\n10_EXP_storage_4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "fallback",
        "lineno": 82,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1749,
        "code": "er public returns (string){\n name = _name;\n return name;\n }\n\n function setPrice(uint256 _price) only",
        "debug": "calldata_SWAP_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SWAP_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "setName(string)",
        "lineno": 39,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2330,
        "code": "alances[_to] += _value;\n emit T",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8c7ff0e4e980a020dfffffffffffffffffffffffffffffffffffffffffffffff\n10_EXP_storage_4: 0xac00000a1fffffffffc6800000500000000000003220841b404fc7fe00000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_5,_256): 0xa2400c0200001486000000004000000100000000000000000000000000000007\nstorage_3: 0x1\ncallvalue: 0xac00000a400000dffb8f7fffffffffffffffcfffff7fc7fb9f9fe3fe00000001\nstorage_5: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SWAP: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "fallback",
        "lineno": 69,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3433,
        "code": "external onlyOwner{\n ",
        "debug": "calldata_SWAP_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0x0\ncaller: 0x0\ncalldata_SWAP_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "burn(uint256)",
        "lineno": 104,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3703,
        "code": "56 _value) onlyOwner ",
        "debug": "storage_2: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_SWAP_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5: 0x0\ncaller: 0x0\ncalldata_SWAP_0: 0x780900dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `create(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "create(uint256)",
        "lineno": 96,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3814,
        "code": "ic returns (bool success)",
        "debug": "calldata_SWAP_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_5,_256): 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_5: 0x0\ncaller: 0x0\ncalldata_SWAP_0: 0x780900dc00000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `create(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "create(uint256)",
        "lineno": 96,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4779,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4865\n",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "sendEtherToAddress(address,uint256)",
        "lineno": 119,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5256,
        "code": "ntract SWAP{\n \n string public name=\"SWAP\";\n string public symbol=\"SWAP\";\n \n uint256 public totalSupply; \n uint256 public price = 50;\n uint256 public decimals = 18; \n\n address Owner;\n \n mapping (address => uint256) balances; \n \n function SWAP() public { \n Owner = msg.sender;\n name=\"SWAP\";\n symbol=\"SWAP\";\n totalSupply = 100000000000*10**18;\n balances[Owner] = totalSupply;\n }\n\n modifier onlyOwner(){\n require(msg.sender == Owner);\n _;\n }\n\n modifier validAddress(address _to){\n require(_to != address(0x00));\n _;\n }\n \n event Burn(address indexed from, uint256 value);\n event Transfer(address indexed from, address indexed to, uint256 value);\n event Withdraw(address to, uint amount);\n \n\n function setName(string _name) onlyOwner public returns (string){\n name = _name;\n return name;\n }\n\n function setPrice(uint256 _price) onlyOwner public returns (uint256){\n price = _price;\n return price;\n }\n\n function setDecimals(uint256 _decimals) onlyOwner public returns (uint256){\n decimals = _decimals;\n return decimals;\n }\n \n function balanceOf(address _owner) view public returns(uint256){\n return balances[_owner];\n }\n function getOwner() view public returns(address){\n return Owner;\n }\n \n function _transfer(address _from, address _to, uint _value) internal {\n require(_to != 0x0);\n require(balances[_from] >= _value);\n require(balances[_to] + _value >= balances[_to]);\n \n uint previousBalances = balances[_from] + balances[_to];\n \n balances[_from] -= _value;\n balances[_to] += _value;\n emit Transfer(_from, _to, _value);\n \n assert(balances[_from] + balances[_to] == previousBalances);\n }\n\n function transfer(address _to, uint256 _value) public {\n _transfer(msg.sender, _to, _value);\n }\n \n function () public payable {\n uint256 token = (msg.value*price)/10**decimals;\n if(msg.sender == Owner){\n totalSupply += token;\n balances[Owner] += token;\n }\n else{\n require(balances[Owner]>=token);\n _transfer(Owner, msg.sender, token);\n }\n }\n function create(uint256 _value) public onlyOwner returns (bool success) {\n totalSupply += _value;\n balances[Owner] += _value;\n return true;\n }\n \n function burn(uint256 _value) onlyOwner public returns (bool success) {\n require(balances[msg.sender] >= _value); \n balances[msg.sender] -= _value; \n totalSupply -= _value; \n emit Burn(msg.sender, _value);\n return true;\n }\n\n function withdrawAll() external onlyOwner{\n msg.sender.transfer(address(this).balance);\n emit Withdraw(msg.sender,address(this).balance);\n }\n\n function withdrawAmount(uint amount) external onlyOwner{\n msg.sender.transfer(amount);\n emit Withdraw(msg.sender,amount);\n }\n\n function sendEtherToAddress(address to, uint amount) external onlyOwner validAddress(to){\n to.transfer(amount);\n uint profit = amount/100;\n msg.sender.transfer(profit);\n }\n}",
        "debug": "calldata_SWAP_4 + calldata_SWAP_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_5: 0x0\ncaller: 0x0\ncalldata_SWAP_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_SWAP: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/5/0x9a688e01028670141e4e0551560c7bbdc28d006e.sol",
        "function": "setName(string)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}