{
  "contract": "0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77",
  "tool": "mythril",
  "start": 1563628555.016275,
  "end": 1563629470.571378,
  "duration": 915.5551030635834,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 286,
        "code": "{\n        \n        require(curves[specifier] == 0, \"Curve specifier already exists\");\n        \n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        require(registry.isProviderInitiated(address(this)), \"Provider not intiialized\");\n\n        registry.initiateProviderCurve(specifier, curve, address(this));\n        curves[specifier] = newToken(bytes32ToString(specifier), bytes32ToString(symbol));\n        \n        registry.setProviderParameter(specifier, toBytes(curves[specifier]));\n        \n        DotTokenCreated(curves[specifier]);\n        return curves[specifier];\n    }\n\n\n    event Bonded(bytes32 indexed specifier, uint256 indexed numDots, address indexed sender); \n\n    //whether this contract holds tokens or coming ",
        "debug": "calldata_ZapCoordinatorInterface_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 137,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 452,
        "code": "ol);\n        tokenAddress = address(token);\n        return tokenAddress;\n    }\n\n    function getTokenAddress(bytes32 specifier) public view returns(address) {\n        RegistryInterface registry = RegistryInterface(coord.getContract(\"REGISTRY\")); \n        return bytesToAddr(registry.get",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x4629ffea00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `newToken(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "newToken(string,string)",
        "lineno": 206,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 997,
        "code": "          result += to_inc;\n        }\n        return address(result);\n    }\n\n\n}",
        "debug": "calldata_ZapCoordinatorInterface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 242,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2395,
        "code": ".initiateProviderCurve(specif",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 144,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2395,
        "code": ".initiateProviderCurve(specif",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\nCall at address: 2611\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 144,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2611,
        "code": "his));\n        curves[specifier] = newToken",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 144,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2611,
        "code": "his));\n        curves[specifier] = newToken",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\nCall at address: 3030\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 144,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2955,
        "code": "ng(symbol));\n        \n        registry.setProviderParameter(spe",
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0x800000000000000000000000000000000000000000000000000000000000000\nmem_128 +\n32 +\n32*\ncalldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_2611: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_2395: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x6af065000000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `initializeCurve(bytes32,bytes32,int256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 145,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3030,
        "code": "ng(symbol));\n        \n        registry.setProviderParameter(spe",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "initializeCurve(bytes32,bytes32,int256[])",
        "lineno": 145,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4110,
        "code": "Interface registry = RegistryInte",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "newToken(string,string)",
        "lineno": 212,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4383,
        "code": "\n        uint reserveCost = ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 185,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4383,
        "code": "\n        uint reserveCost = ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5877\nCall at address: 5592\nCall at address: 5318\nCall at address: 4966\nCall at address: 4711\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 185,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4502,
        "code": "tContract(\"CURRENT_COST\"));\n        uint reserveCost = c",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 185,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4711,
        "code": "ddress(this), specifier, issued + 1 - numDots, ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 186,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4711,
        "code": "ddress(this), specifier, issued + 1 - numDots, ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5877\nCall at address: 5592\nCall at address: 5318\nCall at address: 4966\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 186,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4966,
        "code": "dage.unbond(address(this), specif",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 189,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4966,
        "code": "dage.unbond(address(this), specif",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5877\nCall at address: 5592\nCall at address: 5318\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 189,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5085,
        "code": "\n\n        //unbond dots\n        bondage.unbond(address(this), specifi",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 186,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5318,
        "code": "ot backed token\n        FactoryTokenInterface curveToken = FactoryTokenInterface(curv",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 190,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5318,
        "code": "ot backed token\n        FactoryTokenInterface curveToken = FactoryTokenInterface(curv",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5877\nCall at address: 5592\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 190,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5592,
        "code": "urnFrom(msg.sender, numDots);\n\n        require(re",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 192,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5592,
        "code": "urnFrom(msg.sender, numDots);\n\n        require(re",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5877\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 192,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 5877,
        "code": "\n    function newToken(\n        string n",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "unbond(bytes32,uint256)",
        "lineno": 198,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 6552,
        "code": "face(coord.getContract(\"CURR",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 162,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6552,
        "code": "face(coord.getContract(\"CURR",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7699\nCall at address: 7389\nCall at address: 7135\nCall at address: 6880\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 162,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6671,
        "code": "ace cost = CurrentCostInterface(coord.getContract(\"CURRE",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 162,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6880,
        "code": "numReserve = cost._costOfNDots(address(this), s",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 163,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 6880,
        "code": "numReserve = cost._costOfNDots(address(this), s",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7699\nCall at address: 7389\nCall at address: 7135\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 163,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7135,
        "code": "    reserveToken.transferFrom(msg",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 166,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7135,
        "code": "    reserveToken.transferFrom(msg",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7699\nCall at address: 7389\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 166,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7389,
        "code": "e),\n            \"insufficient accepted token numDots approved for tr",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 166,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7389,
        "code": "e),\n            \"insufficient accepted token numDots approved for tr",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 7699\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 166,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 7699,
        "code": "Token.approve(address(bondage), numReserve);\n        bondage.bon",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "bond(bytes32,uint256)",
        "lineno": 170,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9082,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 248,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9091,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x0\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5ef6228c`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 248,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9251,
        "debug": "calldata_ZapCoordinatorInterface_4 + calldata_ZapCoordinatorInterface_4: 0x1\ncalldata_ZapCoordinatorInterface_0: 0x5ef6228c00000000000000000000000000000000000000000000000000000000\ncalldatasize_ZapCoordinatorInterface: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `_function_0x5ef6228c`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "_function_0x5ef6228c",
        "lineno": 248,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 9706,
        "code": "Title;\n    }\n\n    // https://",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "getTokenAddress(bytes32)",
        "lineno": 217,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 9706,
        "code": "Title;\n    }\n\n    // https://",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 9941\n",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "getTokenAddress(bytes32)",
        "lineno": 217,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 9941,
        "code": "ions/884/how-to-convert-an-address-to-bytes-in-solidity",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/26/0x699ca8a26fb4792d7645ad0fd55e50f3dc059e77.sol",
        "function": "getTokenAddress(bytes32)",
        "lineno": 220,
        "title": "Message call to external contract",
        "type": "Informational"
      }
    ],
    "success": true
  }
}