{
  "contract": "0x3bfff450ab244ed20c92f99760eb45fe7fd02281",
  "tool": "mythril",
  "start": 1563662657.5470784,
  "end": 1563663085.6797128,
  "duration": 428.1326344013214,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 608,
        "code": " _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view ",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 614,
        "code": " _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view ",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 754,
        "code": "geFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _inde",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 778,
        "code": "geFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _inde",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 784,
        "code": "geFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _inde",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1050,
        "code": "\n        image = new bytes(imageLen);\n        uint",
        "debug": "storage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0x1000000000000000000003\nstorage_keccac_0: 0xbafab936400aaaaaaaaaaaaaaaaaea9ffd150aaaaaaaaa999ce66665fe97b9cf\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_0: 0x1\ncalldata_GuaGuaMiaoMiaoMemories_0: 0x630a9f9400000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `viewMemory(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "viewMemory(uint256)",
        "lineno": 63,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2354,
        "code": "ction viewMemory(uint256 _index) publ",
        "debug": "storage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nkeccac_keccac_storage_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xfe300e18c158ec412f5c4ede49124210c0840a26d60f2007ff5ff3ffff7ffd4e\nstorage_keccac_storage_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xdd83f7f8af5940bbbafeca9a46defb91bd4a9c9c8467e400400300002000f0c5\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 57,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2665,
        "code": ";\n\n\n/* \nThis contr",
        "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2767,
        "code": "imageFirstSlice;\n        me",
        "debug": "The exception is triggered under the following conditions:\n\nkeccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0x43041fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*storage_0: 0x41\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 47,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2919,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "keccac_keccac_storage_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_keccac_storage_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2948,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "keccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0xfe000819d00004d080f30c4b16060c7861630d01151f08800000000000002641\nstorage_0: 0x80000000000000000000000000020000000000000fffffffffffffffffffffff\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*storage_0: 0xe026266828244c012ca40c042083420000000016011e3fffffffffffffffffc3\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2962,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x98b80124e0c0001a297fffffffffffffffffffffffffffffffffffffffffffc4\ncalldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xda439b2041c8c00602000000000000000000000000000000000000000000001a\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2979,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x21\ncalldata_GuaGuaMiaoMiaoMemories_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2984,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "keccac_keccac_storage_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*calldata_GuaGuaMiaoMiaoMemories_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x987c2551f8080d0a0016240787c0618800000000002903c3e006100b780cc80d\ncalldata_GuaGuaMiaoMiaoMemories_32 + 4: 0x8638cebc3ef479b69080227bf800000000000006ebdfb9c10e3eff4826476bf\ncalldata_GuaGuaMiaoMiaoMemories_4: 0x0\nstorage_0: 0x1\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xa4ba297100000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemoryImageSlice(uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemoryImageSlice(uint256,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3047,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "keccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n3*storage_0: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3076,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3090,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "calldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3112,
        "code": "t GuaGuaMiaoMiaoMemories {\n\n    struct Memory {\n        string story;\n        uint256 imageSliceCount;\n        mapping(uint256 => bytes) imageSlices;\n    }\n\n    Memory[] internal memories;\n\n    address public guagua;\n    address public miaomiao;\n\n    function GuaGuaMiaoMiaoMemories() public {\n        guagua = msg.sender;\n    }\n\n    modifier onlyGuaGua() {\n        require(msg.sender == guagua);\n        _;\n    }\n\n    modifier onlyMiaoMiao() {\n        require(msg.sender == miaomiao);\n        _;\n    }\n\n    modifier onlyGuaGuaMiaoMiao() {\n        require(msg.sender == guagua || msg.sender == miaomiao);\n        _;\n    }\n\n    function initMiaoMiaoAddress(address _miaomiaoAddress) external onlyGuaGuaMiaoMiao {\n        require(_miaomiaoAddress != address(0));\n        miaomiao = _miaomiaoAddress;\n    }\n\n    function addMemory(string _story, bytes _imageFirstSlice) external onlyGuaGuaMiaoMiao {\n        memories.push(Memory({story: _story, imageSliceCount: 0}));\n        memories[memories.length-1].imageSlices[0] = _imageFirstSlice;\n        memories[memories.length-1].imageSliceCount = 1;\n    }\n\n    function addMemoryImageSlice(uint256 _index, bytes _imageSlice) external onlyGuaGuaMiaoMiao {\n        require(_index >= 0 && _index < memories.length);\n        memories[_index].imageSlices[memories[_index].imageSliceCount] = _imageSlice;\n        memories[_index].imageSliceCount += 1;\n    }\n\n    function viewMemory(uint256 _index) public view returns (string story, bytes image) {\n        require(_index >= 0 && _index < memories.length);\n        uint256 imageLen = 0;\n        uint256 i = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            imageLen += memories[_index].imageSlices[i].length;\n        }\n        image = new bytes(imageLen);\n        uint256 j = 0;\n        uint256 k = 0;\n        for (i = 0; i < memories[_index].imageSliceCount; i++){\n            for (j = 0; j < memories[_index].imageSlices[i].length; j++) {\n                image[k] = memories[_index].imageSlices[i][j];\n                k += 1;\n            }\n        }\n        story = memories[_index].story;\n        return (story, image);\n    }\n\n    function viewNumberOfMemories() public view returns(uint256) {\n        return memories.length;\n    }\n    \n}",
        "debug": "keccac_0_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n3*storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_GuaGuaMiaoMiaoMemories_4 + calldata_GuaGuaMiaoMiaoMemories_4: 0x8000000000000000000000000000000000000000000000000000000000000010\nstorage_2: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_GuaGuaMiaoMiaoMemories_0: 0xced11e4000000000000000000000000000000000000000000000000000000000\ncalldatasize_GuaGuaMiaoMiaoMemories: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `addMemory(string,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x3bfff450ab244ed20c92f99760eb45fe7fd02281.sol",
        "function": "addMemory(string,bytes)",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}