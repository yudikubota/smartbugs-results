{
  "contract": "0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017",
  "tool": "mythril",
  "start": 1563660430.6404078,
  "end": 1563661334.1874008,
  "duration": 903.5469930171967,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 625,
        "code": "ndustry (newIndustry);\n    }\n    \n    /// @dev This sets the legal \"home\" of the company, most probably has legal implications, for example where possible cour",
        "debug": "calldata_CoiniaVy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CoiniaVy_0: 0xa9af1c500000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x0a9af1c5`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x0a9af1c5",
        "lineno": 130,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 889,
        "code": " \n    /// @dev This sets the legal name of the company, most probably has legal implications.\n    /// @param newName New name of the co",
        "debug": "calldata_CoiniaVy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CoiniaVy_0: 0x3ebdb1cb00000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x3ebdb1cb`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x3ebdb1cb",
        "lineno": 140,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 994,
        "code": " = newName;\n        \n        ChangedName (msg.sender, newName);\n    }\n    \n    /// @dev This function is used to change user's own ID (Business ID, birthday, etc.",
        "debug": "calldata_CoiniaVy_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_CoiniaVy_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5353a2d8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x5353a2d8",
        "lineno": 90,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3421,
        "code": "olarius Solutions ",
        "debug": "storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_0: 0x1394f21600000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x1394f216`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x1394f216",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5442,
        "code": " projectManagers; //This is addr",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CoiniaVy_4: 0x0\nstorage_1: 0x0\ncalldata_CoiniaVy_0: 0x88b3a53800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x88b3a538",
        "lineno": 17,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5993,
        "code": "olarius Solutions ",
        "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_0: 0xa333658f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0xa333658f`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0xa333658f",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 6847,
        "code": "treasuryManagers; //This is addre",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_CoiniaVy_4: 0x0\nstorage_2: 0x0\ncalldata_CoiniaVy_0: 0xac1864b800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0xac1864b8",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 8069,
        "code": "t CoiniaVy {\n    struct Shareholder {\n        string name; // Legal name of partner\n        string id; // Legal identification of the partner (birthday, registration number, business ID, etc.)\n        uint shares; //Amount of shares, 0 being not a member/ex-member\n        bool limited; // This is legal: If this is \"true\", the partner is limited, if false, the partner is general\n    }\n    \n    string public standard = 'Token 0.1';\n    address[] public projectManagers; //This is address to a contract managing projects and voting, will be commited later\n    address[] public treasuryManagers; //This is address to a contract managing the money, will be commited later\n    uint public totalSupply = 10000; // Total amount of shares\n    string public home = \"PL 18, 30101 Forssa, FINLAND\";\n    string public industry = \"64190 Muu pankkitoiminta / Financial service nec\";\n    mapping (address => Shareholder) public shareholders;\n    \n    //These \"tokenizes\" the contract:\n    string public name = \"Coinia Vy\";\n    string public symbol = \"CIA\";\n    uint8 public decimals = 0;\n    \n    //The events:\n    event Transfer (address indexed from, address indexed to, uint shares);\n    event ChangedName (address indexed who, string to);\n    event ChangedId (address indexed who, string to);\n    event Resigned (address indexed who);\n    event SetLimited (address indexed who, bool limited);\n    event SetIndustry (string indexed newIndustry);\n    event SetHome (string indexed newHome);\n    event SetName (string indexed newName);\n    event AddedManager (address indexed manager);\n    \n    /// @dev This modifier is used with all of the functions requiring authorisation. Previously used msg.value check is not needed anymore.\n    modifier ifAuthorised {\n        if (shareholders[msg.sender].shares == 0)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This modifier is used to check if the user is a general partner\n    modifier ifGeneralPartner {\n        if (shareholders[msg.sender].limited == true)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This is the constructor, this is quick and dirty because of Ethereum's current DDoS difficulties deploying stuff is hard atm. So that's why hardcoding everything, so this contract could be deployed using whatever tool (not all support arguments)\n    function CoiniaVy () {\n        shareholders[this] = Shareholder (name, \"2755797-6\", 0, false);\n        shareholders[msg.sender] = Shareholder (\"Coinia O\u00dc\", \"14111022\", totalSupply, false);\n    }\n    \n    /// @dev Here we \"tokenize\" our contract, so wallets can use this as a token.\n    /// @param target Address whose balance we want to query.\n    function balanceOf(address target) constant returns(uint256 balance) {\n        return shareholders[target].shares;\n    }\n    \n    /// @notice This transfers `amount` shares to `target.address()`. This is irreversible, are  you OK with this?\n    /// @dev This transfers shares from the current shareholder to a future shareholder, and will create one if it does not exists. This \n    /// @param target Address of the account which will receive the shares.\n    /// @param amount Amount of shares, 0 being none, and 1 being one share, and so on.\n    function transfer (address target, uint256 amount) ifAuthorised {\n        if (amount == 0 || shareholders[msg.sender].shares < amount)\n            throw;\n        \n        shareholders[msg.sender].shares -= amount;\n        if (shareholders[target].shares > 0) {\n            shareholders[target].shares += amount;\n        } else {\n            shareholders[target].shares = amount;\n            shareholders[target].limited = true;\n        }\n        \n        Transfer (msg.sender, target, amount);\n    }\n    \n    /// @dev This function is used to change user's own name. Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newName User's new name.\n    function changeName (string newName) ifAuthorised {\n        shareholders[msg.sender].name = newName;\n        \n        ChangedName (msg.sender, newName);\n    }\n    \n    /// @dev This function is used to change user's own ID (Business ID, birthday, etc.) Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newId User's name ID, might be something like a business ID, birthday, or some other identification string.\n    function changeId (string newId) ifAuthorised {\n        shareholders[msg.sender].id = newId;\n        \n        ChangedId (msg.sender, newId);\n    }\n    \n    /// @notice WARNING! This will remove you'r existance from the company, this is irreversible and instant. This will not terminate the company. Are you really really sure?\n    /// @dev This is required by Finnish law, a person must be able to resign from a company. This will not terminate the company.\n    function resign () {\n        if (bytes(shareholders[msg.sender].name).length == 0 || shareholders[msg.sender].shares > 0)\n            throw;\n            \n        shareholders[msg.sender].name = \"Resigned member\";\n        shareholders[msg.sender].id = \"Resigned member\";\n        \n        Resigned (msg.sender);\n    }\n    \n    /// @notice This sets member's liability status, either to limited liability, or unlimited liability. Beware, that this has legal implications, and decission must be done with other general partners.\n    /// @dev This is another function added for legal reason, using this, you can define is a member limited partner, or a general partner.\n    /// @param target The user we want to define.\n    /// @param isLimited Will the target be a limited partner.\n    function setLimited (address target, bool isLimited) ifAuthorised ifGeneralPartner {\n        shareholders[target].limited = isLimited;\n        \n        SetLimited (target, isLimited);\n    }\n    \n    /// @dev This sets the industry of the company. This might have legal implications.\n    /// @param newIndustry New industry, where there company is going to operate.\n    function setIndustry (string newIndustry) ifAuthorised ifGeneralPartner {\n        industry = newIndustry;\n        \n        SetIndustry (newIndustry);\n    }\n    \n    /// @dev This sets the legal \"home\" of the company, most probably has legal implications, for example where possible court sessions are held.\n    /// @param newHome New home of the company.\n    function setHome (string newHome) ifAuthorised ifGeneralPartner {\n        home = newHome;\n        \n        SetHome (newHome);\n    }\n    \n    /// @dev This sets the legal name of the company, most probably has legal implications.\n    /// @param newName New name of the company.\n    function setName (string newName) ifAuthorised ifGeneralPartner {\n        shareholders[this].name = newName;\n        name = newName;\n        \n        SetName (newName);\n    }\n    \n    /// @dev This function adds a new treasuryManager to the end of the list\n    /// @param newManager Address of the new treasury manager\n    function addTreasuryManager (address newManager) ifAuthorised ifGeneralPartner {\n        treasuryManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This function adds a new projectManager to the end of the list\n    /// @param newManager Address of the new project manager\n    function addProjectManager (address newManager) ifAuthorised ifGeneralPartner {\n        projectManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This default fallback function is here just for clarification\n    function () {\n        throw;\n    }\n}",
        "debug": "keccac_0_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfd6944190b91fb5ee7fffafdff2e77f93da7abbaf94dc727627072ae6fedbf0e\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb35eb6baf578d5a3ffc13c600bb181b0760c88aa7179a5269390b451ffffffe1\ncalldata_CoiniaVy_0: 0x69652fcf00000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x69652fcf`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x69652fcf",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8098,
        "code": "t CoiniaVy {\n    struct Shareholder {\n        string name; // Legal name of partner\n        string id; // Legal identification of the partner (birthday, registration number, business ID, etc.)\n        uint shares; //Amount of shares, 0 being not a member/ex-member\n        bool limited; // This is legal: If this is \"true\", the partner is limited, if false, the partner is general\n    }\n    \n    string public standard = 'Token 0.1';\n    address[] public projectManagers; //This is address to a contract managing projects and voting, will be commited later\n    address[] public treasuryManagers; //This is address to a contract managing the money, will be commited later\n    uint public totalSupply = 10000; // Total amount of shares\n    string public home = \"PL 18, 30101 Forssa, FINLAND\";\n    string public industry = \"64190 Muu pankkitoiminta / Financial service nec\";\n    mapping (address => Shareholder) public shareholders;\n    \n    //These \"tokenizes\" the contract:\n    string public name = \"Coinia Vy\";\n    string public symbol = \"CIA\";\n    uint8 public decimals = 0;\n    \n    //The events:\n    event Transfer (address indexed from, address indexed to, uint shares);\n    event ChangedName (address indexed who, string to);\n    event ChangedId (address indexed who, string to);\n    event Resigned (address indexed who);\n    event SetLimited (address indexed who, bool limited);\n    event SetIndustry (string indexed newIndustry);\n    event SetHome (string indexed newHome);\n    event SetName (string indexed newName);\n    event AddedManager (address indexed manager);\n    \n    /// @dev This modifier is used with all of the functions requiring authorisation. Previously used msg.value check is not needed anymore.\n    modifier ifAuthorised {\n        if (shareholders[msg.sender].shares == 0)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This modifier is used to check if the user is a general partner\n    modifier ifGeneralPartner {\n        if (shareholders[msg.sender].limited == true)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This is the constructor, this is quick and dirty because of Ethereum's current DDoS difficulties deploying stuff is hard atm. So that's why hardcoding everything, so this contract could be deployed using whatever tool (not all support arguments)\n    function CoiniaVy () {\n        shareholders[this] = Shareholder (name, \"2755797-6\", 0, false);\n        shareholders[msg.sender] = Shareholder (\"Coinia O\u00dc\", \"14111022\", totalSupply, false);\n    }\n    \n    /// @dev Here we \"tokenize\" our contract, so wallets can use this as a token.\n    /// @param target Address whose balance we want to query.\n    function balanceOf(address target) constant returns(uint256 balance) {\n        return shareholders[target].shares;\n    }\n    \n    /// @notice This transfers `amount` shares to `target.address()`. This is irreversible, are  you OK with this?\n    /// @dev This transfers shares from the current shareholder to a future shareholder, and will create one if it does not exists. This \n    /// @param target Address of the account which will receive the shares.\n    /// @param amount Amount of shares, 0 being none, and 1 being one share, and so on.\n    function transfer (address target, uint256 amount) ifAuthorised {\n        if (amount == 0 || shareholders[msg.sender].shares < amount)\n            throw;\n        \n        shareholders[msg.sender].shares -= amount;\n        if (shareholders[target].shares > 0) {\n            shareholders[target].shares += amount;\n        } else {\n            shareholders[target].shares = amount;\n            shareholders[target].limited = true;\n        }\n        \n        Transfer (msg.sender, target, amount);\n    }\n    \n    /// @dev This function is used to change user's own name. Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newName User's new name.\n    function changeName (string newName) ifAuthorised {\n        shareholders[msg.sender].name = newName;\n        \n        ChangedName (msg.sender, newName);\n    }\n    \n    /// @dev This function is used to change user's own ID (Business ID, birthday, etc.) Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newId User's name ID, might be something like a business ID, birthday, or some other identification string.\n    function changeId (string newId) ifAuthorised {\n        shareholders[msg.sender].id = newId;\n        \n        ChangedId (msg.sender, newId);\n    }\n    \n    /// @notice WARNING! This will remove you'r existance from the company, this is irreversible and instant. This will not terminate the company. Are you really really sure?\n    /// @dev This is required by Finnish law, a person must be able to resign from a company. This will not terminate the company.\n    function resign () {\n        if (bytes(shareholders[msg.sender].name).length == 0 || shareholders[msg.sender].shares > 0)\n            throw;\n            \n        shareholders[msg.sender].name = \"Resigned member\";\n        shareholders[msg.sender].id = \"Resigned member\";\n        \n        Resigned (msg.sender);\n    }\n    \n    /// @notice This sets member's liability status, either to limited liability, or unlimited liability. Beware, that this has legal implications, and decission must be done with other general partners.\n    /// @dev This is another function added for legal reason, using this, you can define is a member limited partner, or a general partner.\n    /// @param target The user we want to define.\n    /// @param isLimited Will the target be a limited partner.\n    function setLimited (address target, bool isLimited) ifAuthorised ifGeneralPartner {\n        shareholders[target].limited = isLimited;\n        \n        SetLimited (target, isLimited);\n    }\n    \n    /// @dev This sets the industry of the company. This might have legal implications.\n    /// @param newIndustry New industry, where there company is going to operate.\n    function setIndustry (string newIndustry) ifAuthorised ifGeneralPartner {\n        industry = newIndustry;\n        \n        SetIndustry (newIndustry);\n    }\n    \n    /// @dev This sets the legal \"home\" of the company, most probably has legal implications, for example where possible court sessions are held.\n    /// @param newHome New home of the company.\n    function setHome (string newHome) ifAuthorised ifGeneralPartner {\n        home = newHome;\n        \n        SetHome (newHome);\n    }\n    \n    /// @dev This sets the legal name of the company, most probably has legal implications.\n    /// @param newName New name of the company.\n    function setName (string newName) ifAuthorised ifGeneralPartner {\n        shareholders[this].name = newName;\n        name = newName;\n        \n        SetName (newName);\n    }\n    \n    /// @dev This function adds a new treasuryManager to the end of the list\n    /// @param newManager Address of the new treasury manager\n    function addTreasuryManager (address newManager) ifAuthorised ifGeneralPartner {\n        treasuryManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This function adds a new projectManager to the end of the list\n    /// @param newManager Address of the new project manager\n    function addProjectManager (address newManager) ifAuthorised ifGeneralPartner {\n        projectManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This default fallback function is here just for clarification\n    function () {\n        throw;\n    }\n}",
        "debug": "calldata_CoiniaVy_4 + calldata_CoiniaVy_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5353a2d8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x5353a2d8",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8112,
        "code": "t CoiniaVy {\n    struct Shareholder {\n        string name; // Legal name of partner\n        string id; // Legal identification of the partner (birthday, registration number, business ID, etc.)\n        uint shares; //Amount of shares, 0 being not a member/ex-member\n        bool limited; // This is legal: If this is \"true\", the partner is limited, if false, the partner is general\n    }\n    \n    string public standard = 'Token 0.1';\n    address[] public projectManagers; //This is address to a contract managing projects and voting, will be commited later\n    address[] public treasuryManagers; //This is address to a contract managing the money, will be commited later\n    uint public totalSupply = 10000; // Total amount of shares\n    string public home = \"PL 18, 30101 Forssa, FINLAND\";\n    string public industry = \"64190 Muu pankkitoiminta / Financial service nec\";\n    mapping (address => Shareholder) public shareholders;\n    \n    //These \"tokenizes\" the contract:\n    string public name = \"Coinia Vy\";\n    string public symbol = \"CIA\";\n    uint8 public decimals = 0;\n    \n    //The events:\n    event Transfer (address indexed from, address indexed to, uint shares);\n    event ChangedName (address indexed who, string to);\n    event ChangedId (address indexed who, string to);\n    event Resigned (address indexed who);\n    event SetLimited (address indexed who, bool limited);\n    event SetIndustry (string indexed newIndustry);\n    event SetHome (string indexed newHome);\n    event SetName (string indexed newName);\n    event AddedManager (address indexed manager);\n    \n    /// @dev This modifier is used with all of the functions requiring authorisation. Previously used msg.value check is not needed anymore.\n    modifier ifAuthorised {\n        if (shareholders[msg.sender].shares == 0)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This modifier is used to check if the user is a general partner\n    modifier ifGeneralPartner {\n        if (shareholders[msg.sender].limited == true)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This is the constructor, this is quick and dirty because of Ethereum's current DDoS difficulties deploying stuff is hard atm. So that's why hardcoding everything, so this contract could be deployed using whatever tool (not all support arguments)\n    function CoiniaVy () {\n        shareholders[this] = Shareholder (name, \"2755797-6\", 0, false);\n        shareholders[msg.sender] = Shareholder (\"Coinia O\u00dc\", \"14111022\", totalSupply, false);\n    }\n    \n    /// @dev Here we \"tokenize\" our contract, so wallets can use this as a token.\n    /// @param target Address whose balance we want to query.\n    function balanceOf(address target) constant returns(uint256 balance) {\n        return shareholders[target].shares;\n    }\n    \n    /// @notice This transfers `amount` shares to `target.address()`. This is irreversible, are  you OK with this?\n    /// @dev This transfers shares from the current shareholder to a future shareholder, and will create one if it does not exists. This \n    /// @param target Address of the account which will receive the shares.\n    /// @param amount Amount of shares, 0 being none, and 1 being one share, and so on.\n    function transfer (address target, uint256 amount) ifAuthorised {\n        if (amount == 0 || shareholders[msg.sender].shares < amount)\n            throw;\n        \n        shareholders[msg.sender].shares -= amount;\n        if (shareholders[target].shares > 0) {\n            shareholders[target].shares += amount;\n        } else {\n            shareholders[target].shares = amount;\n            shareholders[target].limited = true;\n        }\n        \n        Transfer (msg.sender, target, amount);\n    }\n    \n    /// @dev This function is used to change user's own name. Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newName User's new name.\n    function changeName (string newName) ifAuthorised {\n        shareholders[msg.sender].name = newName;\n        \n        ChangedName (msg.sender, newName);\n    }\n    \n    /// @dev This function is used to change user's own ID (Business ID, birthday, etc.) Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newId User's name ID, might be something like a business ID, birthday, or some other identification string.\n    function changeId (string newId) ifAuthorised {\n        shareholders[msg.sender].id = newId;\n        \n        ChangedId (msg.sender, newId);\n    }\n    \n    /// @notice WARNING! This will remove you'r existance from the company, this is irreversible and instant. This will not terminate the company. Are you really really sure?\n    /// @dev This is required by Finnish law, a person must be able to resign from a company. This will not terminate the company.\n    function resign () {\n        if (bytes(shareholders[msg.sender].name).length == 0 || shareholders[msg.sender].shares > 0)\n            throw;\n            \n        shareholders[msg.sender].name = \"Resigned member\";\n        shareholders[msg.sender].id = \"Resigned member\";\n        \n        Resigned (msg.sender);\n    }\n    \n    /// @notice This sets member's liability status, either to limited liability, or unlimited liability. Beware, that this has legal implications, and decission must be done with other general partners.\n    /// @dev This is another function added for legal reason, using this, you can define is a member limited partner, or a general partner.\n    /// @param target The user we want to define.\n    /// @param isLimited Will the target be a limited partner.\n    function setLimited (address target, bool isLimited) ifAuthorised ifGeneralPartner {\n        shareholders[target].limited = isLimited;\n        \n        SetLimited (target, isLimited);\n    }\n    \n    /// @dev This sets the industry of the company. This might have legal implications.\n    /// @param newIndustry New industry, where there company is going to operate.\n    function setIndustry (string newIndustry) ifAuthorised ifGeneralPartner {\n        industry = newIndustry;\n        \n        SetIndustry (newIndustry);\n    }\n    \n    /// @dev This sets the legal \"home\" of the company, most probably has legal implications, for example where possible court sessions are held.\n    /// @param newHome New home of the company.\n    function setHome (string newHome) ifAuthorised ifGeneralPartner {\n        home = newHome;\n        \n        SetHome (newHome);\n    }\n    \n    /// @dev This sets the legal name of the company, most probably has legal implications.\n    /// @param newName New name of the company.\n    function setName (string newName) ifAuthorised ifGeneralPartner {\n        shareholders[this].name = newName;\n        name = newName;\n        \n        SetName (newName);\n    }\n    \n    /// @dev This function adds a new treasuryManager to the end of the list\n    /// @param newManager Address of the new treasury manager\n    function addTreasuryManager (address newManager) ifAuthorised ifGeneralPartner {\n        treasuryManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This function adds a new projectManager to the end of the list\n    /// @param newManager Address of the new project manager\n    function addProjectManager (address newManager) ifAuthorised ifGeneralPartner {\n        projectManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This default fallback function is here just for clarification\n    function () {\n        throw;\n    }\n}",
        "debug": "calldata_CoiniaVy_4 + calldata_CoiniaVy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5353a2d8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x5353a2d8",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 8134,
        "code": "t CoiniaVy {\n    struct Shareholder {\n        string name; // Legal name of partner\n        string id; // Legal identification of the partner (birthday, registration number, business ID, etc.)\n        uint shares; //Amount of shares, 0 being not a member/ex-member\n        bool limited; // This is legal: If this is \"true\", the partner is limited, if false, the partner is general\n    }\n    \n    string public standard = 'Token 0.1';\n    address[] public projectManagers; //This is address to a contract managing projects and voting, will be commited later\n    address[] public treasuryManagers; //This is address to a contract managing the money, will be commited later\n    uint public totalSupply = 10000; // Total amount of shares\n    string public home = \"PL 18, 30101 Forssa, FINLAND\";\n    string public industry = \"64190 Muu pankkitoiminta / Financial service nec\";\n    mapping (address => Shareholder) public shareholders;\n    \n    //These \"tokenizes\" the contract:\n    string public name = \"Coinia Vy\";\n    string public symbol = \"CIA\";\n    uint8 public decimals = 0;\n    \n    //The events:\n    event Transfer (address indexed from, address indexed to, uint shares);\n    event ChangedName (address indexed who, string to);\n    event ChangedId (address indexed who, string to);\n    event Resigned (address indexed who);\n    event SetLimited (address indexed who, bool limited);\n    event SetIndustry (string indexed newIndustry);\n    event SetHome (string indexed newHome);\n    event SetName (string indexed newName);\n    event AddedManager (address indexed manager);\n    \n    /// @dev This modifier is used with all of the functions requiring authorisation. Previously used msg.value check is not needed anymore.\n    modifier ifAuthorised {\n        if (shareholders[msg.sender].shares == 0)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This modifier is used to check if the user is a general partner\n    modifier ifGeneralPartner {\n        if (shareholders[msg.sender].limited == true)\n            throw;\n\n        _;\n    }\n    \n    /// @dev This is the constructor, this is quick and dirty because of Ethereum's current DDoS difficulties deploying stuff is hard atm. So that's why hardcoding everything, so this contract could be deployed using whatever tool (not all support arguments)\n    function CoiniaVy () {\n        shareholders[this] = Shareholder (name, \"2755797-6\", 0, false);\n        shareholders[msg.sender] = Shareholder (\"Coinia O\u00dc\", \"14111022\", totalSupply, false);\n    }\n    \n    /// @dev Here we \"tokenize\" our contract, so wallets can use this as a token.\n    /// @param target Address whose balance we want to query.\n    function balanceOf(address target) constant returns(uint256 balance) {\n        return shareholders[target].shares;\n    }\n    \n    /// @notice This transfers `amount` shares to `target.address()`. This is irreversible, are  you OK with this?\n    /// @dev This transfers shares from the current shareholder to a future shareholder, and will create one if it does not exists. This \n    /// @param target Address of the account which will receive the shares.\n    /// @param amount Amount of shares, 0 being none, and 1 being one share, and so on.\n    function transfer (address target, uint256 amount) ifAuthorised {\n        if (amount == 0 || shareholders[msg.sender].shares < amount)\n            throw;\n        \n        shareholders[msg.sender].shares -= amount;\n        if (shareholders[target].shares > 0) {\n            shareholders[target].shares += amount;\n        } else {\n            shareholders[target].shares = amount;\n            shareholders[target].limited = true;\n        }\n        \n        Transfer (msg.sender, target, amount);\n    }\n    \n    /// @dev This function is used to change user's own name. Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newName User's new name.\n    function changeName (string newName) ifAuthorised {\n        shareholders[msg.sender].name = newName;\n        \n        ChangedName (msg.sender, newName);\n    }\n    \n    /// @dev This function is used to change user's own ID (Business ID, birthday, etc.) Ethereum is anonymous by design, but there might be legal reasons for a user to do this.\n    /// @param newId User's name ID, might be something like a business ID, birthday, or some other identification string.\n    function changeId (string newId) ifAuthorised {\n        shareholders[msg.sender].id = newId;\n        \n        ChangedId (msg.sender, newId);\n    }\n    \n    /// @notice WARNING! This will remove you'r existance from the company, this is irreversible and instant. This will not terminate the company. Are you really really sure?\n    /// @dev This is required by Finnish law, a person must be able to resign from a company. This will not terminate the company.\n    function resign () {\n        if (bytes(shareholders[msg.sender].name).length == 0 || shareholders[msg.sender].shares > 0)\n            throw;\n            \n        shareholders[msg.sender].name = \"Resigned member\";\n        shareholders[msg.sender].id = \"Resigned member\";\n        \n        Resigned (msg.sender);\n    }\n    \n    /// @notice This sets member's liability status, either to limited liability, or unlimited liability. Beware, that this has legal implications, and decission must be done with other general partners.\n    /// @dev This is another function added for legal reason, using this, you can define is a member limited partner, or a general partner.\n    /// @param target The user we want to define.\n    /// @param isLimited Will the target be a limited partner.\n    function setLimited (address target, bool isLimited) ifAuthorised ifGeneralPartner {\n        shareholders[target].limited = isLimited;\n        \n        SetLimited (target, isLimited);\n    }\n    \n    /// @dev This sets the industry of the company. This might have legal implications.\n    /// @param newIndustry New industry, where there company is going to operate.\n    function setIndustry (string newIndustry) ifAuthorised ifGeneralPartner {\n        industry = newIndustry;\n        \n        SetIndustry (newIndustry);\n    }\n    \n    /// @dev This sets the legal \"home\" of the company, most probably has legal implications, for example where possible court sessions are held.\n    /// @param newHome New home of the company.\n    function setHome (string newHome) ifAuthorised ifGeneralPartner {\n        home = newHome;\n        \n        SetHome (newHome);\n    }\n    \n    /// @dev This sets the legal name of the company, most probably has legal implications.\n    /// @param newName New name of the company.\n    function setName (string newName) ifAuthorised ifGeneralPartner {\n        shareholders[this].name = newName;\n        name = newName;\n        \n        SetName (newName);\n    }\n    \n    /// @dev This function adds a new treasuryManager to the end of the list\n    /// @param newManager Address of the new treasury manager\n    function addTreasuryManager (address newManager) ifAuthorised ifGeneralPartner {\n        treasuryManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This function adds a new projectManager to the end of the list\n    /// @param newManager Address of the new project manager\n    function addProjectManager (address newManager) ifAuthorised ifGeneralPartner {\n        projectManagers.push (newManager);\n        \n        AddedManager (newManager);\n    }\n    \n    /// @dev This default fallback function is here just for clarification\n    function () {\n        throw;\n    }\n}",
        "debug": "keccac_0_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_4 + calldata_CoiniaVy_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CoiniaVy_0: 0x5353a2d800000000000000000000000000000000000000000000000000000000\ncalldatasize_CoiniaVy: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `_function_0x5353a2d8`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/33/0x69f2a483a2ad4b910fa03a0f380d61f6dbe20017.sol",
        "function": "_function_0x5353a2d8",
        "lineno": 8,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}