{"error": null, "issues": [{"address": 832, "code": "; i++){\n        require(unlockUnixTime[targets[i]] < unixTimes[i]);\n        unlockUnixTime[targets[i]] = unixTimes[i];\n        LockedFunds(targets[i], unixTimes[i]);\n      }\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n      re", "debug": "calldata_WCCCOIN_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WCCCOIN_0: 0x64ddc60500000000000000000000000000000000000000000000000000000000\ncalldatasize_WCCCOIN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x64ddc605`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/46/0x373ad45763e2d30a67af55e15855256df7049c1a.sol", "function": "_function_0x64ddc605", "lineno": 213, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1222, "code": "s.length);\n      require(balances[msg.sender] >= totalAmount);\n\n      for (uint i = 0; i < addresses.length; i++) {\n          require(addresses[i] != 0x0\n                && frozenAccount[addresses[i]] == false\n                && now > unlockUnixTime[addresses[i]]);\n\n          balances[addresses[i]] = SafeMath.add(balances[addresses[i]], amount);\n          Transfer(msg.sender, addresses[i], amount);\n      }\n      balances[msg.sender] = SafeMath.sub(balances[msg.sender], totalAmount);\n      return true;\n    }\n\n    /**\n     * @dev Function to collect tokens from the list of addresses\n     */\n    function collectTokens(address[] addresses, uint[] amounts) onlyOwner public returns (bool) {\n      require(addresses.length > 0\n              && addresses.length == amounts.length);\n\n      uint256 totalAmount = 0;\n\n      for (uint i = 0; i < addresses.length; i++) {\n        require(amo", "debug": "calldata_WCCCOIN_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_WCCCOIN_0: 0x9459462500000000000000000000000000000000000000000000000000000000\ncalldatasize_WCCCOIN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `distributeAirdrop(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/46/0x373ad45763e2d30a67af55e15855256df7049c1a.sol", "function": "distributeAirdrop(address[],uint256)", "lineno": 363, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10863, "code": ";\n   ", "debug": "storage_6: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldata_WCCCOIN_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_8: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_WCCCOIN_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_WCCCOIN: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/46/0x373ad45763e2d30a67af55e15855256df7049c1a.sol", "function": "mint(address,uint256)", "lineno": 31, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10876, "code": " c;\n    }\n}\n\n\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncalldata_WCCCOIN_32 + 4: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\nstorage_8: 0x0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_WCCCOIN_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_WCCCOIN: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/46/0x373ad45763e2d30a67af55e15855256df7049c1a.sol", "function": "mint(address,uint256)", "lineno": 32, "title": "Exception state", "type": "Informational"}], "success": true}