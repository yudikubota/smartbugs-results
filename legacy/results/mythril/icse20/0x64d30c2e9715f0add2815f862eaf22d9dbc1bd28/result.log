{"error": null, "issues": [{"address": 995, "code": "   tokenSaleAgreement = _link;\n    }\n    \n    function changeReward(uint _roundReward) public {\n        if(msg.sender != owner){ return; }\n    ", "debug": "calldata_ERC20_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20_0: 0x6d4546a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTsaLink(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "changeTsaLink(string)", "lineno": 107, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2767, "code": "     allowed[_from][msg", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20_32_+_4: 0xc8ad1292fc16ef648490c9b6f6a7ad897261541bdd738f31940d869d9824c19a\ncalldata_ERC20_32 + 36: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\ncalldatasize_ERC20: 0x800000000000000000000000000000000000000000000000000000000020\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ERC20_4: 0x5b51dac49284d052eede5596fe2ba53f779697e2114bc7bdc6e9f6dddfb2fca1\ncalldata_ERC20_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "transferFrom(address,address,uint256)", "lineno": 74, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3369, "code": " }\n        \n        round", "debug": "", "description": "A possible transaction order independence vulnerability exists in function contribute(bool). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "contribute(bool)", "lineno": 153, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3474, "code": "\n\ncontract ERC20 {", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0x8000000000000000000000000000000000000000000000000020000000000000\nretval_3369: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xff00\ncalldata_ERC20_0: 0x4065696300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `contribute(bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "contribute(bool)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3637, "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfde3238cf8b29b21fa56332e1bf71fbdbb7bddfab5eeb76e6d9b8837ea1bee70\ncallvalue: 0x7f18746efce0ff826348c4112407bf383043a1e2a504868c49d3f63255db4ff9\nretval_3369: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xff00\ncalldata_ERC20_0: 0x4065696300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\n", "description": "A possible integer overflow exists in the function `contribute(bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "contribute(bool)", "lineno": 160, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3653, "debug": "callvalue: 0xcacb402a20200a09822135dfffffeff922203dffe9ef89df702387f26fc88c13\nstorage_9: 0xea439ff13bdff5fd84040010000000015ddfc2000c04018f81d8780d90138c40\nretval_3369: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xff00\ncalldata_ERC20_0: 0x4065696300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `contribute(bool)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "contribute(bool)", "lineno": 160, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3849, "code": "nsIndexes[i];\n            b", "debug": "storage_15: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x47e4055300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `nextRound()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "nextRound()", "lineno": 120, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4011, "code": ";\n        }\n        \n        contributionsDistribStep ", "debug": "The exception is triggered under the following conditions:\n\nstorage_15: 0x1fffffffffffffffffffffffffffffffffff6\nstorage_4: 0x1fffffffffffffffffffffffffffffffffff7\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x47e4055300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\nstorage_9: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "nextRound()", "lineno": 123, "title": "Exception state", "type": "Informational"}, {"address": 4281, "code": "ute(bool _acceptConditions) ", "debug": "storage_15: 0xb02a532483d00000000da001ba407ffffffffffffffffffffffffffffffffff1\nstorage_4: 0xb02a532483d00000000da001ba407ffffffffffffffffffffffffffffffffff1\nstorage_10: 0x9bd623185d2568fe6ddba184adc3bfb7b7af7e764acf58c1b59869970f071973\nstorage_6: 0xd9ded9db9a8e6e006d1bbdf5582f303f242c7d81523051ec35cf6cd6d0b6e5f9\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x47e4055300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `nextRound()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "nextRound()", "lineno": 140, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4298, "code": "{\n        ", "debug": "storage_15: 0x75effffdbffdfffde6fffffffffffffffffffffffffffffffffffffffffffff6\nstorage_4: 0x75effffdbffdfffde6fffffffffffffffffffffffffffffffffffffffffffff6\nstorage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x47e4055300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `nextRound()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "nextRound()", "lineno": 140, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5763, "code": "oken is ERC20{\n    \n    address owner = msg.sender;\n    \n    bool public canPurchase = false;\n    \n    mapping (address => uint) balances;\n    mapping (address => uint) roundContributions;\n    address[] roundContributionsIndexes;\n    mapping (address => mapping (address => uint)) allowed;\n\n    uint public currentSupply = 0;\n    uint public totalSupply = 32032000000000000000000000;\n    \n    uint public round = 0;\n    uint public roundFunds = 0;\n    uint public roundReward = 200200000000000000000000;\n    \n    string public name = \"BOLT token\";\n    string public symbol = \"BOLT\";\n    uint8 public decimals = 18;\n    \n    bool public isToken = true;\n    \n    string public tokenSaleAgreement = \"https://bolt-project.net/tsa.pdf\";\n    \n    uint contributionsDistribStep = 0;\n    \n    event Contribution(address indexed from, uint value);\n    event RoundEnd(uint roundNumber);\n    \n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n    \n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function transfer(address _to, uint _value) public returns (bool success) {\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (2 * 32) + 4) { return false; }\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public  returns (bool success){\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (3 * 32) + 4) { return false; }\n        \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public  returns (bool success){\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n    \n    function enablePurchase() public {\n        if(msg.sender != owner && currentSupply>=totalSupply){ return; }\n        \n        canPurchase = true;\n    }\n\n    function disablePurchase() public {\n        if(msg.sender != owner){ return; }\n        \n        canPurchase = false;\n    }\n    \n    function changeTsaLink(string _link) public {\n        if(msg.sender != owner){ return; }\n        \n        tokenSaleAgreement = _link;\n    }\n    \n    function changeReward(uint _roundReward) public {\n        if(msg.sender != owner){ return; }\n        \n        roundReward = _roundReward;\n    }\n    \n    function nextRound() public {\n        if(msg.sender != owner){ return; }\n        uint i = contributionsDistribStep;\n        while(i < contributionsDistribStep+10 && i<roundContributionsIndexes.length){\n            address contributor = roundContributionsIndexes[i];\n            balances[contributor] += roundReward*roundContributions[contributor]/roundFunds;\n            roundContributions[contributor] = 0;\n            i++;\n        }\n        \n        contributionsDistribStep = i;\n        \n        if(i==roundContributionsIndexes.length){\n            delete roundContributionsIndexes;\n            \n            emit RoundEnd(round);\n            \n            roundFunds = 0;\n            currentSupply += roundReward;\n            round += 1;\n            contributionsDistribStep = 0;\n        }\n    }\n\n    function contribute(bool _acceptConditions) payable public {\n        \n        if(msg.value == 0){ return; }\n        \n        if(!canPurchase || !_acceptConditions || msg.value < 10 finney){\n            msg.sender.transfer(msg.value);\n            return;\n        }\n        \n        owner.transfer(msg.value);\n        \n        if(roundContributions[msg.sender] == 0){\n           roundContributionsIndexes.push(msg.sender); \n        }\n        \n        roundContributions[msg.sender] += msg.value;\n        roundFunds += msg.value;\n        \n        emit Contribution(msg.sender, msg.value);\n    }\n}", "debug": "storage_15: 0x800673fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_4: 0x800673fffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x47e4055300000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `nextRound()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "nextRound()", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5845, "code": "oken is ERC20{\n    \n    address owner = msg.sender;\n    \n    bool public canPurchase = false;\n    \n    mapping (address => uint) balances;\n    mapping (address => uint) roundContributions;\n    address[] roundContributionsIndexes;\n    mapping (address => mapping (address => uint)) allowed;\n\n    uint public currentSupply = 0;\n    uint public totalSupply = 32032000000000000000000000;\n    \n    uint public round = 0;\n    uint public roundFunds = 0;\n    uint public roundReward = 200200000000000000000000;\n    \n    string public name = \"BOLT token\";\n    string public symbol = \"BOLT\";\n    uint8 public decimals = 18;\n    \n    bool public isToken = true;\n    \n    string public tokenSaleAgreement = \"https://bolt-project.net/tsa.pdf\";\n    \n    uint contributionsDistribStep = 0;\n    \n    event Contribution(address indexed from, uint value);\n    event RoundEnd(uint roundNumber);\n    \n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n    \n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function transfer(address _to, uint _value) public returns (bool success) {\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (2 * 32) + 4) { return false; }\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public  returns (bool success){\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (3 * 32) + 4) { return false; }\n        \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public  returns (bool success){\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n    \n    function enablePurchase() public {\n        if(msg.sender != owner && currentSupply>=totalSupply){ return; }\n        \n        canPurchase = true;\n    }\n\n    function disablePurchase() public {\n        if(msg.sender != owner){ return; }\n        \n        canPurchase = false;\n    }\n    \n    function changeTsaLink(string _link) public {\n        if(msg.sender != owner){ return; }\n        \n        tokenSaleAgreement = _link;\n    }\n    \n    function changeReward(uint _roundReward) public {\n        if(msg.sender != owner){ return; }\n        \n        roundReward = _roundReward;\n    }\n    \n    function nextRound() public {\n        if(msg.sender != owner){ return; }\n        uint i = contributionsDistribStep;\n        while(i < contributionsDistribStep+10 && i<roundContributionsIndexes.length){\n            address contributor = roundContributionsIndexes[i];\n            balances[contributor] += roundReward*roundContributions[contributor]/roundFunds;\n            roundContributions[contributor] = 0;\n            i++;\n        }\n        \n        contributionsDistribStep = i;\n        \n        if(i==roundContributionsIndexes.length){\n            delete roundContributionsIndexes;\n            \n            emit RoundEnd(round);\n            \n            roundFunds = 0;\n            currentSupply += roundReward;\n            round += 1;\n            contributionsDistribStep = 0;\n        }\n    }\n\n    function contribute(bool _acceptConditions) payable public {\n        \n        if(msg.value == 0){ return; }\n        \n        if(!canPurchase || !_acceptConditions || msg.value < 10 finney){\n            msg.sender.transfer(msg.value);\n            return;\n        }\n        \n        owner.transfer(msg.value);\n        \n        if(roundContributions[msg.sender] == 0){\n           roundContributionsIndexes.push(msg.sender); \n        }\n        \n        roundContributions[msg.sender] += msg.value;\n        roundFunds += msg.value;\n        \n        emit Contribution(msg.sender, msg.value);\n    }\n}", "debug": "calldata_ERC20_4 + calldata_ERC20_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x6d4546a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTsaLink(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "changeTsaLink(string)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5859, "code": "oken is ERC20{\n    \n    address owner = msg.sender;\n    \n    bool public canPurchase = false;\n    \n    mapping (address => uint) balances;\n    mapping (address => uint) roundContributions;\n    address[] roundContributionsIndexes;\n    mapping (address => mapping (address => uint)) allowed;\n\n    uint public currentSupply = 0;\n    uint public totalSupply = 32032000000000000000000000;\n    \n    uint public round = 0;\n    uint public roundFunds = 0;\n    uint public roundReward = 200200000000000000000000;\n    \n    string public name = \"BOLT token\";\n    string public symbol = \"BOLT\";\n    uint8 public decimals = 18;\n    \n    bool public isToken = true;\n    \n    string public tokenSaleAgreement = \"https://bolt-project.net/tsa.pdf\";\n    \n    uint contributionsDistribStep = 0;\n    \n    event Contribution(address indexed from, uint value);\n    event RoundEnd(uint roundNumber);\n    \n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n    \n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function transfer(address _to, uint _value) public returns (bool success) {\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (2 * 32) + 4) { return false; }\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public  returns (bool success){\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (3 * 32) + 4) { return false; }\n        \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public  returns (bool success){\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n    \n    function enablePurchase() public {\n        if(msg.sender != owner && currentSupply>=totalSupply){ return; }\n        \n        canPurchase = true;\n    }\n\n    function disablePurchase() public {\n        if(msg.sender != owner){ return; }\n        \n        canPurchase = false;\n    }\n    \n    function changeTsaLink(string _link) public {\n        if(msg.sender != owner){ return; }\n        \n        tokenSaleAgreement = _link;\n    }\n    \n    function changeReward(uint _roundReward) public {\n        if(msg.sender != owner){ return; }\n        \n        roundReward = _roundReward;\n    }\n    \n    function nextRound() public {\n        if(msg.sender != owner){ return; }\n        uint i = contributionsDistribStep;\n        while(i < contributionsDistribStep+10 && i<roundContributionsIndexes.length){\n            address contributor = roundContributionsIndexes[i];\n            balances[contributor] += roundReward*roundContributions[contributor]/roundFunds;\n            roundContributions[contributor] = 0;\n            i++;\n        }\n        \n        contributionsDistribStep = i;\n        \n        if(i==roundContributionsIndexes.length){\n            delete roundContributionsIndexes;\n            \n            emit RoundEnd(round);\n            \n            roundFunds = 0;\n            currentSupply += roundReward;\n            round += 1;\n            contributionsDistribStep = 0;\n        }\n    }\n\n    function contribute(bool _acceptConditions) payable public {\n        \n        if(msg.value == 0){ return; }\n        \n        if(!canPurchase || !_acceptConditions || msg.value < 10 finney){\n            msg.sender.transfer(msg.value);\n            return;\n        }\n        \n        owner.transfer(msg.value);\n        \n        if(roundContributions[msg.sender] == 0){\n           roundContributionsIndexes.push(msg.sender); \n        }\n        \n        roundContributions[msg.sender] += msg.value;\n        roundFunds += msg.value;\n        \n        emit Contribution(msg.sender, msg.value);\n    }\n}", "debug": "calldata_ERC20_4 + calldata_ERC20_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_1: 0x0\ncaller: 0x0\ncalldata_ERC20_0: 0x6d4546a200000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `changeTsaLink(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/26/0x64d30c2e9715f0add2815f862eaf22d9dbc1bd28.sol", "function": "changeTsaLink(string)", "lineno": 15, "title": "Integer Overflow ", "type": "Warning"}], "success": true}