{
  "contract": "0x858e56589a5f49c6020ee86a14b3f84e26e0356c",
  "tool": "mythril",
  "start": 1563770107.4137335,
  "end": 1563770294.7788079,
  "duration": 187.36507439613342,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 309,
        "code": "turns(uint[] finalPicked, uint[] x, uint[] y, uint[] zoom, uint[] rotation, uint[] layers) {\n        require(_finalSeed != 0);\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\n        uint[] memory pickedIds = new uint[](assetIds.length);\n        x = new uint[](assetIds.length);\n        y = new uint[](assetIds.length);\n        zoom = new uint[](assetIds.length);\n        rotation = new uint[](assetIds.length);\n        layers = new uint[](assetIds.length);\n\n        uint finalSeedCopy = _finalSeed;\n        uint index = 0;\n\n        for (uint i = 0; i < assetIds.length; i++) {\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\n            if (finalSeedCopy % 2 == 0) {\n                pickedIds[index] = assetIds[i];\n                (x[index], y[index], zoom[index], rotation[index], layers[index]) = pickRandomAssetPosition(finalSeedCopy, _width, _height);\n                index++;\n            }\n        }\n\n        finalPicked = new uint[](index);\n        for (i = 0; i < index; i++) {\n            finalPicked[i] = pickedIds[i];\n        }\n    }\n\n    /// @notice Function to pick random position for an asset\n    /// @param _randomSeed is random seed for that image\n    /// @param _w",
        "debug": "calldata_Functions_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Functions_0: 0x3e4ffa9b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getImage(uint256,bytes32[],uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "getImage(uint256,bytes32[],uint256,uint256)",
        "lineno": 111,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1277,
        "code": "sets) public pure returns (uint[] assets) {\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetsCopy = new uint[](_potentialAssets.length*10);\n        uint numberOfAssets = 0;\n\n        for (uint j = 0; j < _potentialAssets.length; j++) {\n            uint input;\n            bytes32 pot = _potentialAssets[j];\n\n            assembly {\n                input := pot\n            }\n\n            for (uint i = 10; i > 0; i--) {\n                uint mask = (2 << ((i-1) * 24)) / 2;\n                uint b = (input & (mask * 16777215)) / mask;\n\n                if (b != 0) {\n                    assetsCopy[numberOfAssets] = b;\n                    numberOfAssets++;\n                }\n            }\n        }\n\n        assets = new uint[](numberOfAssets);\n        for (i = 0; i < numberOfAssets; i++) {\n            assets[i] = assetsCopy[i];\n        }\n    }\n\n    /// @notice Function to pick random assets from potentialAssets arr",
        "debug": "calldata_Functions_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Functions_0: 0xc933405100000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `decodeAssets(bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "decodeAssets(bytes32[])",
        "lineno": 45,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1474,
        "code": "ure returns(uint[] finalPicked) {\n        require(_finalSeed != 0);\n        require(_potentialAssets.length > 0);\n\n        uint[] memory assetIds = decodeAssets(_potentialAssets);\n        uint[] memory pickedIds = new uint[](assetIds.length);\n\n        uint finalSeedCopy = _finalSeed;\n        uint index = 0;\n\n        for (uint i = 0; i < assetIds.length; i++) {\n            finalSeedCopy = uint(keccak256(abi.encodePacked(finalSeedCopy, assetIds[i])));\n            if (finalSeedCopy % 2 == 0) {\n                pickedIds[index] = assetIds[i];\n                index++;\n            }\n        }\n\n        finalPicked = new uint[](index);\n        for (i = 0; i < index; i++) {\n            finalPicked[i] = pickedIds[i];\n        }\n    }\n\n    /// @notice Function to pick random assets from potentialAssets array\n    /// @param _finalSeed",
        "debug": "calldata_Functions_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Functions_0: 0xee007a5400000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `pickRandomAssets(uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "pickRandomAssets(uint256,bytes32[])",
        "lineno": 80,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1684,
        "code": "32[] public randomHashes;\n\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Functions_4: 0x0\nstorage_0: 0x0\ncalldata_Functions_0: 0x16709c2200000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "_function_0x16709c22",
        "lineno": 6,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1730,
        "code": "er - 100; i < bloc",
        "debug": "block_number: 0x63\ncalldata_Functions_0: 0x390b848200000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\nstorage_0: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `fillWithHashes()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "fillWithHashes()",
        "lineno": 11,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3138,
        "code": "ing random number fo",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Functions_0: 0xa98d596100000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncalldata_Functions_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "pickRandomAssetPosition(uint256,uint256,uint256)",
        "lineno": 153,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3152,
        "code": "/ if two layers are s",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Functions_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Functions_0: 0xa98d596100000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncalldata_Functions_32 + 36: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "pickRandomAssetPosition(uint256,uint256,uint256)",
        "lineno": 154,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3292,
        "code": "ds[0]], randomHashes[_randomHas",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Functions_cpy: 0x0\nstorage_0: 0x0\ncalldata_Functions_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Functions_0: 0xb52c1d5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncalldata_Functions_4 + calldata_Functions_4: 0xa\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "_function_0xb52c1d5b",
        "lineno": 26,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4097,
        "code": "rOfAssets = 0;\n\n        fo",
        "debug": "calldata_Functions_4 + calldata_Functions_32 + 4: 0x6d2531002373f782ff1ee97fbc00199999999999999b40000268000000000002\ncalldata_Functions_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Functions_0: 0xee007a5400000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `pickRandomAssets(uint256,bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "pickRandomAssets(uint256,bytes32[])",
        "lineno": 49,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4280,
        "code": "ets++;\n                }\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Functions_4 + calldata_Functions_4: 0x2000000000000000000000000000000000000000000000000000000000000000\ncalldata_Functions_cpy: 0xffffff000000000000000000000000000000000000000000000000000000\ncalldata_Functions_0: 0xc933405100000000000000000000000000000000000000000000000000000000\ncalldatasize_Functions: 0x4\nmem_128 + 32 + 32*calldata_Functions_4 + calldata_Functions_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/44/0x858e56589a5f49c6020ee86a14b3f84e26e0356c.sol",
        "function": "decodeAssets(bytes32[])",
        "lineno": 65,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}