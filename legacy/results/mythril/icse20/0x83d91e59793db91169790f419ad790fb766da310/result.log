{"error": null, "issues": [{"address": 634, "code": " function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[o", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 202, "title": "Integer Overflow ", "type": "Warning"}, {"address": 640, "code": " function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[o", "debug": "calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 202, "title": "Integer Overflow ", "type": "Warning"}, {"address": 658, "code": " function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[o", "debug": "calldata_Token_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 202, "title": "Integer Overflow ", "type": "Warning"}, {"address": 664, "code": " function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[o", "debug": "calldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 202, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3637, "code": "turn balances[tokenOwner];\n    }\n\n ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_0: 0x5567406400000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\n10_EXP_Concat(0, Extract(15, 8, storage_4)): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "totalSupplyWithoutDecimals()", "lineno": 142, "title": "Exception state", "type": "Informational"}, {"address": 6944, "code": "n c;\n", "debug": "calldata_Token_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "transferFrom(address,address,uint256)", "lineno": 50, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7039, "code": "nblockchaintokens\";   \n    string public symbol = \"AMZN\";   \n    uint8 public decimals = 10;    \n    uint public _totalSupply;   \n\n\n    mapping(address => uint) balances;  \n    mapping(address => mapping(address => uint)) allowed;   \n\n\n    constructor() public {   \n        name = \"amazonblockchaintokens\";\n        symbol = \"AMZN\";\n        decimals = 10;\n        _totalSupply = 100000000 * 10**uint(decimals); //100 million\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function totalSupply() public view returns (uint) { \n        return _totalSupply - balances[address(0)];\n    }\n\n    // Extra function\n    function totalSupplyWithZeroAddress() public view returns (uint) { \n        return _totalSupply;\n    }\n\n    // Extra function\n    function totalSupplyWithoutDecimals() public view returns (uint) {\n        return _totalSupply / (10**uint(decimals));\n    }\n\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) { \n        return balances[tokenOwner];\n    }\n\n    // Extra function\n    function myBalance() public view returns (uint balance) {\n        return balances[msg.sender];\n    }\n\n\n    function transfer(address to, uint tokens) public returns (bool success) {  \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {  \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {    \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {  \n        return allowed[tokenOwner][spender];\n    }\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    function () public payable {  \n        revert();\n    }\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) { \n        return ERC20Interface(tokenAddress).transfer(owner, tokens);        \n    }\n\n    /*\n        Administrator functions\n    */\n\n    // change symbol and name\n    function reconfig(string newName, string newSymbol) external onlyOwner {\n        symbol = newSymbol;\n        name = newName;\n    }\n\n    // increase supply and send newly added tokens to owner\n    function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[owner] = balances[owner].add(increase);\n        emit Transfer(address(0), owner, increase);\n    }\n\n    // decrease/burn supply\n    function burnTokens(uint256 decrease) external onlyOwner {\n        balances[owner] = balances[owner].sub(decrease);\n        _totalSupply = _totalSupply.sub(decrease);\n    }\n    \n    // deactivate the contract\n    function deactivate() external onlyOwner {\n        selfdestruct(owner);\n    }\n}", "debug": "storage_3: 0x144\ncalldata_Token_4 + calldata_Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Token_4 + calldata_Token_32 + 4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 107, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7053, "code": "nblockchaintokens\";   \n    string public symbol = \"AMZN\";   \n    uint8 public decimals = 10;    \n    uint public _totalSupply;   \n\n\n    mapping(address => uint) balances;  \n    mapping(address => mapping(address => uint)) allowed;   \n\n\n    constructor() public {   \n        name = \"amazonblockchaintokens\";\n        symbol = \"AMZN\";\n        decimals = 10;\n        _totalSupply = 100000000 * 10**uint(decimals); //100 million\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function totalSupply() public view returns (uint) { \n        return _totalSupply - balances[address(0)];\n    }\n\n    // Extra function\n    function totalSupplyWithZeroAddress() public view returns (uint) { \n        return _totalSupply;\n    }\n\n    // Extra function\n    function totalSupplyWithoutDecimals() public view returns (uint) {\n        return _totalSupply / (10**uint(decimals));\n    }\n\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) { \n        return balances[tokenOwner];\n    }\n\n    // Extra function\n    function myBalance() public view returns (uint balance) {\n        return balances[msg.sender];\n    }\n\n\n    function transfer(address to, uint tokens) public returns (bool success) {  \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {  \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {    \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {  \n        return allowed[tokenOwner][spender];\n    }\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    function () public payable {  \n        revert();\n    }\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) { \n        return ERC20Interface(tokenAddress).transfer(owner, tokens);        \n    }\n\n    /*\n        Administrator functions\n    */\n\n    // change symbol and name\n    function reconfig(string newName, string newSymbol) external onlyOwner {\n        symbol = newSymbol;\n        name = newName;\n    }\n\n    // increase supply and send newly added tokens to owner\n    function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[owner] = balances[owner].add(increase);\n        emit Transfer(address(0), owner, increase);\n    }\n\n    // decrease/burn supply\n    function burnTokens(uint256 decrease) external onlyOwner {\n        balances[owner] = balances[owner].sub(decrease);\n        _totalSupply = _totalSupply.sub(decrease);\n    }\n    \n    // deactivate the contract\n    function deactivate() external onlyOwner {\n        selfdestruct(owner);\n    }\n}", "debug": "storage_3: 0x140\ncalldata_Token_4: 0xf8a400000000001000000000000000000000000000020000000000000000001f\ncalldata_Token_4 + calldata_Token_4: 0xbefbfffffffffbfc7ffffffffffffffffffffffffffdffffffffffffffffffbf\ncalldata_Token_4 + calldata_Token_32 + 4: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 107, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7070, "code": "nblockchaintokens\";   \n    string public symbol = \"AMZN\";   \n    uint8 public decimals = 10;    \n    uint public _totalSupply;   \n\n\n    mapping(address => uint) balances;  \n    mapping(address => mapping(address => uint)) allowed;   \n\n\n    constructor() public {   \n        name = \"amazonblockchaintokens\";\n        symbol = \"AMZN\";\n        decimals = 10;\n        _totalSupply = 100000000 * 10**uint(decimals); //100 million\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    function totalSupply() public view returns (uint) { \n        return _totalSupply - balances[address(0)];\n    }\n\n    // Extra function\n    function totalSupplyWithZeroAddress() public view returns (uint) { \n        return _totalSupply;\n    }\n\n    // Extra function\n    function totalSupplyWithoutDecimals() public view returns (uint) {\n        return _totalSupply / (10**uint(decimals));\n    }\n\n\n    function balanceOf(address tokenOwner) public view returns (uint balance) { \n        return balances[tokenOwner];\n    }\n\n    // Extra function\n    function myBalance() public view returns (uint balance) {\n        return balances[msg.sender];\n    }\n\n\n    function transfer(address to, uint tokens) public returns (bool success) {  \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function approve(address spender, uint tokens) public returns (bool success) {  \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {    \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {  \n        return allowed[tokenOwner][spender];\n    }\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    function () public payable {  \n        revert();\n    }\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) { \n        return ERC20Interface(tokenAddress).transfer(owner, tokens);        \n    }\n\n    /*\n        Administrator functions\n    */\n\n    // change symbol and name\n    function reconfig(string newName, string newSymbol) external onlyOwner {\n        symbol = newSymbol;\n        name = newName;\n    }\n\n    // increase supply and send newly added tokens to owner\n    function increaseSupply(uint256 increase) external onlyOwner {\n        _totalSupply = _totalSupply.add(increase);\n        balances[owner] = balances[owner].add(increase);\n        emit Transfer(address(0), owner, increase);\n    }\n\n    // decrease/burn supply\n    function burnTokens(uint256 decrease) external onlyOwner {\n        balances[owner] = balances[owner].sub(decrease);\n        _totalSupply = _totalSupply.sub(decrease);\n    }\n    \n    // deactivate the contract\n    function deactivate() external onlyOwner {\n        selfdestruct(owner);\n    }\n}", "debug": "calldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c\ncalldata_Token_4 + calldata_Token_32 + 4: 0x21\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x1bc390dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `reconfig(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/44/0x83d91e59793db91169790f419ad790fb766da310.sol", "function": "reconfig(string,string)", "lineno": 107, "title": "Integer Overflow ", "type": "Warning"}], "success": true}