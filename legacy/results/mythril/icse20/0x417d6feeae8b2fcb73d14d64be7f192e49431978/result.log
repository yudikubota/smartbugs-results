{"error": null, "issues": [{"address": 686, "code": "[j] > 0\n                    && addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            totalAmount = totalAmount.add(amounts[j]);\n        }\n        require(balanceOf[msg.sender] >= totalAmount);\n\n        for (j = 0; j < addresses.length; j++) {\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(amounts[j]);\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amounts[j]);\n            Transfer(msg.sender, addresses[j], amounts[j]);\n        }\n        return true;\n    }\n\n    function() payable public {\n    }\n}", "debug": "calldata_SkillCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SkillCoin_0: 0x153a1f3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SkillCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `bulkTransfer(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/4/0x417d6feeae8b2fcb73d14d64be7f192e49431978.sol", "function": "bulkTransfer(address[],uint256[])", "lineno": 409, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1104, "code": "     for (uint j = 0; j < addresses.length; j++) {\n            require(addresses[j] != 0x0\n                    && frozenAccount[addresses[j]] == false\n                    && now > unlockUnixTime[addresses[j]]);\n\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(amount);\n            balanceOf[addresses[j]] = balanceOf[addresses[j]].add(amount);\n            Transfer(msg.sender, addresses[j], amount);\n        }\n        return true;\n    }\n\n    function bulkTransfer(address[] addresses, uint256[] amounts) public returns (bool) {\n        require(addresses.length > 0\n                && addresses.length == amounts.length\n                && frozenAccount[msg.sender] == false\n                && now > unlockUnixTime[msg.sender]);\n\n        uint256 totalAmount = 0;\n\n        for(uint j = 0; j < addresses.length; j++){\n            require", "debug": "calldata_SkillCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SkillCoin_0: 0x4ca64b3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SkillCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `bulkTransfer(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/4/0x417d6feeae8b2fcb73d14d64be7f192e49431978.sol", "function": "bulkTransfer(address[],uint256)", "lineno": 388, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1327, "code": "j++){\n            require(unlockUnixTime[targets[j]] < unixTimes[j]);\n            unlockUnixTime[targets[j]] = unixTimes[j];\n            LockedFunds(targets[j], unixTimes[j]);\n        }\n    }\n\n    /**\n     * @dev Standard function transfer similar to ERC20 transfer with no _data\n     *      Added due to backwards compatibility reasons\n     */\n    function transfer(address _to, uint _value) public returns (bool su", "debug": "calldata_SkillCoin_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SkillCoin_0: 0x64ddc60500000000000000000000000000000000000000000000000000000000\ncalldatasize_SkillCoin: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x64ddc605`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/4/0x417d6feeae8b2fcb73d14d64be7f192e49431978.sol", "function": "_function_0x64ddc605", "lineno": 221, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11689, "code": " c;\n    }\n}\n\n/", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x8000000000000000001000000000000000000000002000000000000000000001\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SkillCoin_4: 0x8000000000000000000fffffffffffffffffffffffffffffffffffffffff00fd\ncalldata_SkillCoin_32 + 36: 0x80000000000000000004200fffffffffffffffffffff7edbffffffffffff00fe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SkillCoin_32_+_4: 0x8000000000000000000000000000000000000000002000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x80000000000000000004200fffffffffffffffffffff7edbffffffffffff00fe\ncalldata_SkillCoin_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_SkillCoin_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SkillCoin: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/4/0x417d6feeae8b2fcb73d14d64be7f192e49431978.sol", "function": "transferFrom(address,address,uint256)", "lineno": 32, "title": "Exception state", "type": "Informational"}], "success": true}