{"error": null, "issues": [{"address": 1175, "code": "outIdx].payout) {\n   investors[payoutIdx].addr.", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1446\n", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 91, "title": "Multiple Calls", "type": "Information"}, {"address": 1175, "code": "outIdx].payout) {\n   investors[payoutIdx].addr.", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 91, "title": "Transaction order dependence", "type": "Warning"}, {"address": 1446, "code": "paidOut = true;\n  }\n  \n  lastInvestorPaidOut(payoutIdx - 1);\n\n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1446\n", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "invest()", "lineno": 93, "title": "Multiple Calls", "type": "Information"}, {"address": 1446, "code": "paidOut = true;\n  }\n  \n  lastInvestorPaidOut(payoutIdx - 1);\n\n ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 93, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2076, "code": "********            ****************", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2309\n", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 161, "title": "Multiple Calls", "type": "Information"}, {"address": 2076, "code": "********            ****************", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 161, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2309, "code": "s smart contract is in no way\n  // responsible for an", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "fallback", "lineno": 149, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3554, "code": "\n }\n\n\n//*********************************************", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x6400\nstorage_0: 0x1fff00\ncalldata_EthMultiplier_4: 0x1fff\ncalldata_EthMultiplier_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_EthMultiplier_0: 0xfce4c12800000000000000000000000000000000000000000000000000000000\ncalldatasize_EthMultiplier: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xea06c9cb0d69058468387f283e9a3f61c53e3c21.sol", "function": "checkInvestmentRequired(uint16,bool)", "lineno": 127, "title": "Exception state", "type": "Informational"}], "success": true}