{"error": null, "issues": [{"address": 1192, "code": "  function burn(uint256 _value) isOwner public {\n        require(balanceOf[ms", "debug": "calldata_FreeLanceToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_FreeLanceToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "setName(string)", "lineno": 84, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1695, "code": "g.sender);\n        _;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_FreeLanceToken_0: 0x7da68f500000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "stop()", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 1751, "code": "    _;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_FreeLanceToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "approve(address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 1786, "code": "       _;\n    }\n\n    cons", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0x95ea7b300000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "approve(address,uint256)", "lineno": 30, "title": "Exception state", "type": "Informational"}, {"address": 2209, "code": "    _;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_FreeLanceToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "transferFrom(address,address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 2244, "code": "       _;\n    }\n\n    cons", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "transferFrom(address,address,uint256)", "lineno": 30, "title": "Exception state", "type": "Informational"}, {"address": 3103, "code": "g.sender);\n        _;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_FreeLanceToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "burn(uint256)", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 3307, "code": "lSupply = totalSupply - ", "debug": "calldata_FreeLanceToken_4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_24465873643947496235832446106509767096567058095563226156125564318740882468607: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `burn(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "burn(uint256)", "lineno": 89, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3399, "code": "(address indexed _fr", "debug": "calldata_FreeLanceToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `burn(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "burn(uint256)", "lineno": 92, "title": "Integer Underflow", "type": "Warning"}, {"address": 3635, "code": "    _;\n    }\n\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0xff00\ncalldata_FreeLanceToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "transfer(address,uint256)", "lineno": 25, "title": "Exception state", "type": "Informational"}, {"address": 3670, "code": "       _;\n    }\n\n    cons", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "transfer(address,uint256)", "lineno": 30, "title": "Exception state", "type": "Informational"}, {"address": 4245, "code": "g.sender);\n        _;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_FreeLanceToken_0: 0xbe9a655500000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "start()", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 4363, "code": "g.sender);\n        _;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_FreeLanceToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "setName(string)", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 4515, "code": "g.sender);\n        _;\n    }", "debug": "The exception is triggered under the following conditions:\n\ncaller: 0x0\nstorage_6: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_FreeLanceToken_0: 0xf2fde38b00000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "transferOwnership(address)", "lineno": 19, "title": "Exception state", "type": "Informational"}, {"address": 4712, "code": "ntract FreeLanceToken {\n\n    string public name = \"FreeLance\";                                            //by @hilobrain\n    string public symbol = \"FRL\";           \n    uint256 public decimals = 18;            \n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 100*10**24;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor (address _addressFounder) public {\n        owner = _addressFounder;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        emit Transfer(0x0, _addressFounder, valueFounder);\n    }\n    \n    function transferOwnership(address newOwner) public isOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    function burn(uint256 _value) isOwner public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        emit Transfer(msg.sender, 0x0, _value);\n        totalSupply = totalSupply - _value;                                         \n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}", "debug": "calldata_FreeLanceToken_4 + calldata_FreeLanceToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4726, "code": "ntract FreeLanceToken {\n\n    string public name = \"FreeLance\";                                            //by @hilobrain\n    string public symbol = \"FRL\";           \n    uint256 public decimals = 18;            \n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    uint256 public totalSupply = 0;\n    bool public stopped = false;\n\n    uint256 constant valueFounder = 100*10**24;\n    address owner = 0x0;\n\n    modifier isOwner {\n        assert(owner == msg.sender);\n        _;\n    }\n\n    modifier isRunning {\n        assert (!stopped);\n        _;\n    }\n\n    modifier validAddress {\n        assert(0x0 != msg.sender);\n        _;\n    }\n\n    constructor (address _addressFounder) public {\n        owner = _addressFounder;\n        totalSupply = valueFounder;\n        balanceOf[_addressFounder] = valueFounder;\n        emit Transfer(0x0, _addressFounder, valueFounder);\n    }\n    \n    function transferOwnership(address newOwner) public isOwner {\n        require(newOwner != address(0));\n        owner = newOwner;\n    }\n\n    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_to] += _value;\n        balanceOf[_from] -= _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function stop() isOwner public {\n        stopped = true;\n    }\n\n    function start() isOwner public {\n        stopped = false;\n    }\n\n    function setName(string _name) isOwner public {\n        name = _name;\n    }\n\n    function burn(uint256 _value) isOwner public {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[0x0] += _value;\n        emit Transfer(msg.sender, 0x0, _value);\n        totalSupply = totalSupply - _value;                                         \n    }\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}", "debug": "calldata_FreeLanceToken_4 + calldata_FreeLanceToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_6: 0x0\ncalldata_FreeLanceToken_0: 0xc47f002700000000000000000000000000000000000000000000000000000000\ncalldatasize_FreeLanceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setName(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/35/0xcc1b8eff29f5668380f056654ac4bd4c5448befa.sol", "function": "setName(string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}