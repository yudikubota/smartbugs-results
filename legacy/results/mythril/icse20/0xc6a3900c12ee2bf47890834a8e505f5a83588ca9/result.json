{
  "contract": "0xc6a3900c12ee2bf47890834a8e505f5a83588ca9",
  "tool": "mythril",
  "start": 1563626496.6560137,
  "end": 1563627227.069405,
  "duration": 730.4133913516998,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 558,
        "code": "t startBlock, uint blockWindow, uint gas, bytes  _callData) external payable {\n        \n        require(gas >= 200000);\n        require(msg.value > gas);\n        require(block.number < startBlock);\n        \n        clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData));\n        //uint id = clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, callData)) - 1;\n        //clockToOwner[id] = msg.sender;\n        //clockToValue[id] = msg.value;\n        //ownerClockCount[msg.sender]++;\n        \n        totalTimers++;\n        waitingTimers++;\n        \n        emit _newAlarmClock(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData);\n    }  \n  \n\t// ~30000   +200000gas if called contract request new regis",
        "debug": "calldata_AlarmClock_32 + 100: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 806,
        "code": "List;\n  \n    constructor () pu",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_AlarmClock_4: 0x0\nstorage_3: 0x0\ncalldata_AlarmClock_0: 0x2ee17b2f00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "_function_0x2ee17b2f",
        "lineno": 27,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1238,
        "code": "\n\ncontract AlarmCl",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1430,
        "code": "_newAlarmCloc",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\nstorage_5 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*storage_3: 0x80000000000000000001000000000000000000000000000000000000080\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nkeccac_5_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n6*storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x0\ncalldata_AlarmClock_4 + calldata_AlarmClock_32 + 100: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1448,
        "code": ", startBlock, b",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*storage_3: 0x80000000000000000001000000000000000000000000000000000000080\nkeccac_5_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n6*storage_3: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x0\ncalldata_AlarmClock_4 + calldata_AlarmClock_32 + 100: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 66,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1681,
        "code": "].startBlock)",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_AlarmClock_4: 0x0\nstorage_3: 0x0\ncalldata_AlarmClock_0: 0xa939554000000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 73,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 1919,
        "code": ";\n        \n        waitingTimers--;\n\t\t\n  ",
        "debug": "",
        "description": "In the function `trigerAlarmClock(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n- block.number\n",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 77,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 1919,
        "code": ";\n        \n        waitingTimers--;\n\t\t\n  ",
        "debug": "SOLVER OUTPUT:\nblock_number: 0x0\ncalldata_AlarmClock_4: 0x0\nstorage_1 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0x0\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0x1\nstorage_3 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x1\ncalldata_AlarmClock_0: 0xa939554000000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "In the function `trigerAlarmClock(uint256)` a non-zero amount of Ether is sent to msg.sender.\n\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 1. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThere is a check on storage index 3. This storage slot can be written to by calling the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 77,
        "title": "Ether send",
        "type": "Warning"
      },
      {
        "address": 1919,
        "code": ";\n        \n        waitingTimers--;\n\t\t\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2273\n",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 77,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 1919,
        "code": ";\n        \n        waitingTimers--;\n\t\t\n  ",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function trigerAlarmClock(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 77,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 1994,
        "code": "clockList[id].g",
        "debug": "block_number: 0x0\ncalldata_AlarmClock_4: 0x0\nstorage_1 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0x0\nstorage_2: 0x0\nretval_1919: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0x1\nstorage_3 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*calldata_AlarmClock_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x1\ncalldata_AlarmClock_0: 0xa939554000000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer underflow exists in the function `trigerAlarmClock(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 81,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2273,
        "code": "ata));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    funct",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 81,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2273,
        "code": "ata));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    funct",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function trigerAlarmClock(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "trigerAlarmClock(uint256)",
        "lineno": 81,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 2605,
        "code": "ntract AlarmClock {\n\n    event _newAlarmClock(address _contract, uint startBlock, uint blockWindow, uint reward, uint gas, bytes _callData);\n    \n    address public owner;\n    //uint public initBlock;\n    uint public totalTimers;\n    uint public waitingTimers;\n    \n    struct ClockStruct {\n        address _contract;\n        uint startBlock;\n        uint blockWindow;\n        uint reward;\n        uint gas;\n        bytes callData;\n    }\n    \n    //sha3(\"setA(uint256)\")[0:8].hex()\n    //'ee919d50'\n    //0xee919d500000000000000000000000000000000000000000000000000000000000000001 - call setA(1), method selector 4 bytes\n    \n    //0x6a3d9d350000000000000000000000000000000000000000000000000000000000000005 - call alarmtest.testFunc(5)\n    \n    ClockStruct[] public clockList;\n  \n    constructor () public payable {\n        owner = msg.sender;\n        //initBlock = block.number;\n        totalTimers = 0;\n        waitingTimers = 0;\n    }  \n  \n    modifier ownerOnly() {\n        require(msg.sender == owner);\n        _;\n    }  \n  \n    // 1. transfer  //\n    function setNewOwner(address _newOwner) public ownerOnly {\n        owner = _newOwner;\n    }   \n  \n    /*function refreshBlock() public ownerOnly {\n        initBlock = block.number;\n    }*/ \n  \n    // gas required for registration ~200000\n    function registerAlarmClock(address _contract, uint startBlock, uint blockWindow, uint gas, bytes  _callData) external payable {\n        \n        require(gas >= 200000);\n        require(msg.value > gas);\n        require(block.number < startBlock);\n        \n        clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData));\n        //uint id = clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, callData)) - 1;\n        //clockToOwner[id] = msg.sender;\n        //clockToValue[id] = msg.value;\n        //ownerClockCount[msg.sender]++;\n        \n        totalTimers++;\n        waitingTimers++;\n        \n        emit _newAlarmClock(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData);\n    }  \n  \n\t// ~30000   +200000gas if called contract request new registration \n    function trigerAlarmClock(uint id) external payable {\n        \n        require(clockList[id].reward > 0);\n        require(block.number >= clockList[id].startBlock);\n        require(block.number < (clockList[id].startBlock + clockList[id].blockWindow));\n        \n        msg.sender.transfer(clockList[id].reward);\n        clockList[id].reward = 0;\n        \n        waitingTimers--;\n\t\t\n        require(clockList[id]._contract.call.value(0).gas(clockList[id].gas)(clockList[id].callData));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    function() external payable {\n        //?\n    }   \n    \n    function _destroyContract() external ownerOnly {\n        selfdestruct(msg.sender);\n    }    \n  \n}",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\nstorage_5 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n6*storage_3: 0xd3e67cdaffaef467a0003a9bc815cdc3685b177fffffffffffffffffffffffe1\nkeccac_5_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n6*storage_3: 0xfe602c8a7a00c202036f3eeb6fbfa0b7edde6f5656d4bcd1eabec6d6e4a03df6\nblock_number: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2634,
        "code": "ntract AlarmClock {\n\n    event _newAlarmClock(address _contract, uint startBlock, uint blockWindow, uint reward, uint gas, bytes _callData);\n    \n    address public owner;\n    //uint public initBlock;\n    uint public totalTimers;\n    uint public waitingTimers;\n    \n    struct ClockStruct {\n        address _contract;\n        uint startBlock;\n        uint blockWindow;\n        uint reward;\n        uint gas;\n        bytes callData;\n    }\n    \n    //sha3(\"setA(uint256)\")[0:8].hex()\n    //'ee919d50'\n    //0xee919d500000000000000000000000000000000000000000000000000000000000000001 - call setA(1), method selector 4 bytes\n    \n    //0x6a3d9d350000000000000000000000000000000000000000000000000000000000000005 - call alarmtest.testFunc(5)\n    \n    ClockStruct[] public clockList;\n  \n    constructor () public payable {\n        owner = msg.sender;\n        //initBlock = block.number;\n        totalTimers = 0;\n        waitingTimers = 0;\n    }  \n  \n    modifier ownerOnly() {\n        require(msg.sender == owner);\n        _;\n    }  \n  \n    // 1. transfer  //\n    function setNewOwner(address _newOwner) public ownerOnly {\n        owner = _newOwner;\n    }   \n  \n    /*function refreshBlock() public ownerOnly {\n        initBlock = block.number;\n    }*/ \n  \n    // gas required for registration ~200000\n    function registerAlarmClock(address _contract, uint startBlock, uint blockWindow, uint gas, bytes  _callData) external payable {\n        \n        require(gas >= 200000);\n        require(msg.value > gas);\n        require(block.number < startBlock);\n        \n        clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData));\n        //uint id = clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, callData)) - 1;\n        //clockToOwner[id] = msg.sender;\n        //clockToValue[id] = msg.value;\n        //ownerClockCount[msg.sender]++;\n        \n        totalTimers++;\n        waitingTimers++;\n        \n        emit _newAlarmClock(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData);\n    }  \n  \n\t// ~30000   +200000gas if called contract request new registration \n    function trigerAlarmClock(uint id) external payable {\n        \n        require(clockList[id].reward > 0);\n        require(block.number >= clockList[id].startBlock);\n        require(block.number < (clockList[id].startBlock + clockList[id].blockWindow));\n        \n        msg.sender.transfer(clockList[id].reward);\n        clockList[id].reward = 0;\n        \n        waitingTimers--;\n\t\t\n        require(clockList[id]._contract.call.value(0).gas(clockList[id].gas)(clockList[id].callData));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    function() external payable {\n        //?\n    }   \n    \n    function _destroyContract() external ownerOnly {\n        selfdestruct(msg.sender);\n    }    \n  \n}",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\ncalldata_AlarmClock_4 + calldata_AlarmClock_32 + 100: 0x8000000000000000000000000000000000000000000000000000000000000000\nblock_number: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2648,
        "code": "ntract AlarmClock {\n\n    event _newAlarmClock(address _contract, uint startBlock, uint blockWindow, uint reward, uint gas, bytes _callData);\n    \n    address public owner;\n    //uint public initBlock;\n    uint public totalTimers;\n    uint public waitingTimers;\n    \n    struct ClockStruct {\n        address _contract;\n        uint startBlock;\n        uint blockWindow;\n        uint reward;\n        uint gas;\n        bytes callData;\n    }\n    \n    //sha3(\"setA(uint256)\")[0:8].hex()\n    //'ee919d50'\n    //0xee919d500000000000000000000000000000000000000000000000000000000000000001 - call setA(1), method selector 4 bytes\n    \n    //0x6a3d9d350000000000000000000000000000000000000000000000000000000000000005 - call alarmtest.testFunc(5)\n    \n    ClockStruct[] public clockList;\n  \n    constructor () public payable {\n        owner = msg.sender;\n        //initBlock = block.number;\n        totalTimers = 0;\n        waitingTimers = 0;\n    }  \n  \n    modifier ownerOnly() {\n        require(msg.sender == owner);\n        _;\n    }  \n  \n    // 1. transfer  //\n    function setNewOwner(address _newOwner) public ownerOnly {\n        owner = _newOwner;\n    }   \n  \n    /*function refreshBlock() public ownerOnly {\n        initBlock = block.number;\n    }*/ \n  \n    // gas required for registration ~200000\n    function registerAlarmClock(address _contract, uint startBlock, uint blockWindow, uint gas, bytes  _callData) external payable {\n        \n        require(gas >= 200000);\n        require(msg.value > gas);\n        require(block.number < startBlock);\n        \n        clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData));\n        //uint id = clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, callData)) - 1;\n        //clockToOwner[id] = msg.sender;\n        //clockToValue[id] = msg.value;\n        //ownerClockCount[msg.sender]++;\n        \n        totalTimers++;\n        waitingTimers++;\n        \n        emit _newAlarmClock(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData);\n    }  \n  \n\t// ~30000   +200000gas if called contract request new registration \n    function trigerAlarmClock(uint id) external payable {\n        \n        require(clockList[id].reward > 0);\n        require(block.number >= clockList[id].startBlock);\n        require(block.number < (clockList[id].startBlock + clockList[id].blockWindow));\n        \n        msg.sender.transfer(clockList[id].reward);\n        clockList[id].reward = 0;\n        \n        waitingTimers--;\n\t\t\n        require(clockList[id]._contract.call.value(0).gas(clockList[id].gas)(clockList[id].callData));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    function() external payable {\n        //?\n    }   \n    \n    function _destroyContract() external ownerOnly {\n        selfdestruct(msg.sender);\n    }    \n  \n}",
        "debug": "calldata_AlarmClock_32 + 68: 0x80d40\ncalldata_AlarmClock_4 + calldata_AlarmClock_32 + 100: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nblock_number: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x80d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2670,
        "code": "ntract AlarmClock {\n\n    event _newAlarmClock(address _contract, uint startBlock, uint blockWindow, uint reward, uint gas, bytes _callData);\n    \n    address public owner;\n    //uint public initBlock;\n    uint public totalTimers;\n    uint public waitingTimers;\n    \n    struct ClockStruct {\n        address _contract;\n        uint startBlock;\n        uint blockWindow;\n        uint reward;\n        uint gas;\n        bytes callData;\n    }\n    \n    //sha3(\"setA(uint256)\")[0:8].hex()\n    //'ee919d50'\n    //0xee919d500000000000000000000000000000000000000000000000000000000000000001 - call setA(1), method selector 4 bytes\n    \n    //0x6a3d9d350000000000000000000000000000000000000000000000000000000000000005 - call alarmtest.testFunc(5)\n    \n    ClockStruct[] public clockList;\n  \n    constructor () public payable {\n        owner = msg.sender;\n        //initBlock = block.number;\n        totalTimers = 0;\n        waitingTimers = 0;\n    }  \n  \n    modifier ownerOnly() {\n        require(msg.sender == owner);\n        _;\n    }  \n  \n    // 1. transfer  //\n    function setNewOwner(address _newOwner) public ownerOnly {\n        owner = _newOwner;\n    }   \n  \n    /*function refreshBlock() public ownerOnly {\n        initBlock = block.number;\n    }*/ \n  \n    // gas required for registration ~200000\n    function registerAlarmClock(address _contract, uint startBlock, uint blockWindow, uint gas, bytes  _callData) external payable {\n        \n        require(gas >= 200000);\n        require(msg.value > gas);\n        require(block.number < startBlock);\n        \n        clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData));\n        //uint id = clockList.push(ClockStruct(_contract, startBlock, blockWindow, msg.value - gas, gas, callData)) - 1;\n        //clockToOwner[id] = msg.sender;\n        //clockToValue[id] = msg.value;\n        //ownerClockCount[msg.sender]++;\n        \n        totalTimers++;\n        waitingTimers++;\n        \n        emit _newAlarmClock(_contract, startBlock, blockWindow, msg.value - gas, gas, _callData);\n    }  \n  \n\t// ~30000   +200000gas if called contract request new registration \n    function trigerAlarmClock(uint id) external payable {\n        \n        require(clockList[id].reward > 0);\n        require(block.number >= clockList[id].startBlock);\n        require(block.number < (clockList[id].startBlock + clockList[id].blockWindow));\n        \n        msg.sender.transfer(clockList[id].reward);\n        clockList[id].reward = 0;\n        \n        waitingTimers--;\n\t\t\n        require(clockList[id]._contract.call.value(0).gas(clockList[id].gas)(clockList[id].callData));\n    }  \n  \n    // fallback function tigered, when contract gets ETH\n    function() external payable {\n        //?\n    }   \n    \n    function _destroyContract() external ownerOnly {\n        selfdestruct(msg.sender);\n    }    \n  \n}",
        "debug": "calldata_AlarmClock_32 + 68: 0x30d40\ncalldata_AlarmClock_4 + calldata_AlarmClock_32 + 100: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nkeccac_5_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n6*storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0x0\ncalldata_AlarmClock_32 + 4: 0x1\ncallvalue: 0x30d41\ncalldata_AlarmClock_0: 0x84a5054d00000000000000000000000000000000000000000000000000000000\ncalldatasize_AlarmClock: 0x4\n",
        "description": "A possible integer overflow exists in the function `registerAlarmClock(address,uint256,uint256,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/24/0xc6a3900c12ee2bf47890834a8e505f5a83588ca9.sol",
        "function": "registerAlarmClock(address,uint256,uint256,uint256,bytes)",
        "lineno": 3,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}