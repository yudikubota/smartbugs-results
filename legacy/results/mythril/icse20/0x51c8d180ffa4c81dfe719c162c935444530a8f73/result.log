{"error": null, "issues": [{"address": 227, "code": "r/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = byt", "debug": "calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1059, "title": "Integer Overflow ", "type": "Warning"}, {"address": 869, "code": "cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeInde", "debug": "calldata_SuperStarsCardInfo_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SuperStarsCardInfo_0: 0xa6abb09800000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardType(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardType(string)", "lineno": 1000, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1231, "code": "bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1063, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1240, "code": "bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1063, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1246, "code": "bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1063, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1690, "code": " = 0; i < _bc.length; i++) babcde[k++]", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_SuperStarsCardInfo_4: 0x0\nstorage_1: 0x0\ncalldata_SuperStarsCardInfo_0: 0x970129be00000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "getCardInfo(uint256)", "lineno": 1071, "title": "Exception state", "type": "Informational"}, {"address": 2351, "code": "       cardInfosI", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffff\ncalldata_SuperStarsCardInfo_4: 0xffffffffffffffff\ncalldata_SuperStarsCardInfo_0: 0xc73f0e2200000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "getCardTypeByIndex(uint64)", "lineno": 1011, "title": "Exception state", "type": "Informational"}, {"address": 2943, "code": "g name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInf", "debug": "storage_3: 0x4000000000000000\ncalldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x3fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1038, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3043, "code": "g name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInf", "debug": "storage_3: 0x8000000000000000\ncalldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffde1\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1038, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3099, "code": "g name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInf", "debug": "storage_3: 0x8000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0xfff7fbfffffffffffffffffffffffffffffffffffffffffffffffffffffffd81\ncalldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffd80000000000000000000000000000000000000000000000000000181\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1038, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3123, "code": "g name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInf", "debug": "storage_3: 0x8000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01\ncalldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc1\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1038, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3279, "code": ";\n\n/**\n * @title I", "debug": "storage_3: 0x8000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x10\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7ffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3347, "code": "gth() external view retur", "debug": "storage_3: 0x100000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x2\nmem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0xffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 1051, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3743, "code": ";\n\n/**\n * @title I", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0xa6abb09800000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardType(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardType(string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4093, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4195, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "storage_3: 0x80000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x4\nstorage_1 +\n80084422859880547211683076133703299733277748156566366325829078699459944778998 +\n4*storage_1: 0xbcceffffffffffffffffff7fffffeffffff7f8000000000000000000000000d1\nkeccac_1_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n4*storage_1: 0xff030800000000003ffffffe000000003fffc000000002021f9773f8997e130c\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7ffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4224, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "storage_3: 0x8000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x20\nmem_mem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4238, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "storage_3: 0x80000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x20\nmem_mem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0xdd4a009203c2011c0793216079a0f02155a9ad16460280000000000000000003\nmem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0xeb6159d3414427ca57a4cd6110b203b505922156180a7fffffffffffffffffed\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4255, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "storage_3: 0x8000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x0\nmem_mem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0x24\nmem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffac\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4260, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "storage_3: 0x8000000000000000\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083 +\nConcat(0,\n       Extract(63, 0, calldata_SuperStarsCardInfo_32 + 68)): 0x0\nmem_mem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0x47c07ffffffffffffffffffffffffffe00000005e00875dffbebdffffffffff1\nmem_320 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_32 + 36)) +\n32: 0x4fe07ffffffffffffffffffffffffffffffffffa1ff75f73041c25fffffff951\nkeccac_1_+\n80084422859880547211683076133703299733277748156566366325829078699459944778998_+\n4*storage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_SuperStarsCardInfo_32_+_4: 0x0\ncalldata_SuperStarsCardInfo_32 + 68: 0x7fffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0x390cc96500000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardInfo(uint256,bytes32,string,uint64,uint64)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardInfo(uint256,bytes32,string,uint64,uint64)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4352, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0xa6abb09800000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardType(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardType(string)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4366, "code": "dInfo memory _cardInfo = CardInfo({\n            cardHash: 0,\n            name: \"\",\n            cardType: \"\",\n            totalIssue: 0,\n            issueTime: uint64(now)\n        });\n        cardInfos.push(_cardInfo);\n\n        _addCardType(\"None\");\n        _addCardType(\"Normal1\");\n        _addCardType(\"Normal2\");\n        _addCardType(\"Rare\");\n        _addCardType(\"Epic\");\n\n    }\n\n    function _addCardType(string _cardType) internal onlyOwner returns (uint256) {\n        require(bytes(_cardType).length > 0, \"_cardType length must be greater than 0.\");\n        return cardTypes.push(_cardType);\n    }\n\n    function addCardType(string _cardType) external onlyOwner returns (uint256) {\n        return _addCardType(_cardType);\n    }\n\n    function getCardTypeCount() external view returns (uint256) {\n        return cardTypes.length;\n    }\n\n    function getCardTypeByIndex(uint64 _index) external view returns (string) {\n        return cardTypes[_index];\n    }\n\n    // Internal function that add new card info\n    function _addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        internal\n    {\n        // Input value can NOT exceed cardTypes length\n        require(_cardTypeIndex < cardTypes.length, \"CardTypeIndex can NOT exceed the cardTypes length.\");\n        // Only allow adding card infos that have NOT already been added.\n        require(cardHashToExist[_cardHash] == false, \"Only allow adding card info that have NOT already been added.\");\n\n        CardInfo memory _cardInfo = CardInfo({\n            cardHash: _cardHash,\n            name: _name,\n            cardType: cardTypes[_cardTypeIndex],\n            totalIssue: _totalIssue,\n            issueTime: uint64(now)\n        });\n\n        // Mapping for prevent additional issuance of already issued cards.\n        cardHashToExist[_cardHash] = true;\n\n        cardInfosIndex[_cardInfoId] = cardInfos.length;\n        cardInfos.push(_cardInfo);\n        cardInfoIdToIssueCnt[_cardInfoId] = 0;\n    }\n\n    // External function that add card info\n    // Only allow to admin(Owner)\n    function addCardInfo(\n        uint256 _cardInfoId,\n        bytes32 _cardHash,\n        string _name,\n        uint64 _cardTypeIndex,\n        uint64 _totalIssue\n    )\n        external\n        onlyOwner\n    {\n        _addCardInfo(_cardInfoId, _cardHash, _name, _cardTypeIndex, _totalIssue);\n    }\n\n    function getCardInfo(\n        uint256 _cardInfoId\n    )\n        external\n        view\n        returns (\n            bytes32 cardHash,\n            string name,\n            string cardType,\n            uint64 totalIssue,\n            uint64 issueTime\n    ) {\n        CardInfo memory cardInfo = cardInfos[cardInfosIndex[_cardInfoId]];\n        cardHash = cardInfo.cardHash;\n        name = cardInfo.name;\n        cardType = cardInfo.cardType;\n        totalIssue = cardInfo.totalIssue;\n        issueTime = cardInfo.issueTime;\n    }\n\n    function getInfosLength() external view returns (uint256) {\n        return cardInfos.length.sub(1);\n    }\n\n}\n\nlibrary Strings {\n\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\n      bytes memory _ba = bytes(_a);\n      bytes memory _bb = bytes(_b);\n      bytes memory _bc = bytes(_c);\n      bytes memory _bd = bytes(_d);\n      bytes memory _be = bytes(_e);\n      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n      bytes memory babcde = bytes(abcde);\n      uint k = 0;\n      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n      for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n      for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n      for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n      for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n      return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n", "debug": "calldata_SuperStarsCardInfo_4 + calldata_SuperStarsCardInfo_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SuperStarsCardInfo_0: 0xa6abb09800000000000000000000000000000000000000000000000000000000\ncalldatasize_SuperStarsCardInfo: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addCardType(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/14/0x51c8d180ffa4c81dfe719c162c935444530a8f73.sol", "function": "addCardType(string)", "lineno": 951, "title": "Integer Overflow ", "type": "Warning"}], "success": true}