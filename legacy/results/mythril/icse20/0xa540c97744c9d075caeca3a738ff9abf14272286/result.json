{
  "contract": "0xa540c97744c9d075caeca3a738ff9abf14272286",
  "tool": "mythril",
  "start": 1563760554.6419911,
  "end": 1563760590.2877812,
  "duration": 35.645790100097656,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1008,
        "code": "    require(value <= totalRemaining);\n        \n        for (uint i = 0; i < addresses.length; i++) {\n            require(value <= totalRemaining);\n            distr(addresses[i], value);\n        }\n\t\n        if (totalDistributed >= totalSupply) {\n            distributionFinished = true;\n        }\n    }\n    \n    function distribution(address[] addresses, uint256 amount) onlyOwner canDistr public {\n        \n        require(addresses.le",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0x729ad39e00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airdrop(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "airdrop(address[])",
        "lineno": 125,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1301,
        "code": "re(addresses.length == amounts.length);\n        \n        for (uint8 i = 0; i < addresses.length; i++) {\n            require(amounts[i] <= totalRemaining);\n            distr(addresses[i], amounts[i]);\n            \n            if (totalDistributed >= totalSupply) {\n                distributionFinished = true;\n            }\n        }\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256) {\n\t    return balances[_owner];\n    }\n\n    // mitigates the ERC20 short address attack\n  ",
        "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xa8c310d500000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `distributeAmounts(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "distributeAmounts(address[],uint256[])",
        "lineno": 155,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2752,
        "code": "    require(_to != address(0));\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x60\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 179,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5385,
        "code": "    require(_to != address(0));\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x4\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "transfer(address,uint256)",
        "lineno": 179,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6119,
        "code": "alue) onlyOwner ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "getTokenBalance(address,address)",
        "lineno": 224,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7456,
        "code": "    return a -",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_Token_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "burn(uint256)",
        "lineno": 18,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7474,
        "code": "= a);",
        "debug": "calldatasize_Token: 0x64\ncalldata_Token_32 + 36: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xa8511371907d295662825497115ba082b6a492f6b7f433cff7fbddd4ebff6ff5\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x9351db6e0b21734731ae9cfc13143e8338c6dcf4a783a60c06e0d1d708004801\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 23,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7487,
        "code": "turn c;\n  }\n}\n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_Token: 0x20000000000000000000000000000000070\ncalldata_Token_32 + 36: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0xeed94dba0409e2901e98bca0e8207863a06e1b0e522bc7310401ec8848abbd31\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x45d32d9b26ac7cd15b9c95c0768e7c43bf6f9b6f4a039d4dcc39eeb901390535\ncalldata_Token_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/42/0xa540c97744c9d075caeca3a738ff9abf14272286.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 24,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}