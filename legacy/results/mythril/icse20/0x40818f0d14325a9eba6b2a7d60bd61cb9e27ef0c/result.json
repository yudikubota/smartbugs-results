{
  "contract": "0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c",
  "tool": "mythril",
  "start": 1563603303.1646528,
  "end": 1563603409.0417707,
  "duration": 105.87711787223816,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 273,
        "code": "er\"), 2**256 - 1);\n        }\n    }\n\n}\n\n\ncontract MoatKyber is Trade {\n\n    event AssetsCollected(address name, uint addr);\n\n    constructor(address rAddr) public {\n        addressRegistry = rAddr;\n    }\n\n    function () public payable {}\n\n    functio",
        "debug": "calldata_Trade_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Trade_0: 0x4fbea8ea00000000000000000000000000000000000000000000000000000000\ncalldatasize_Trade: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveKyber(address[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol",
        "function": "approveKyber(address[])",
        "lineno": 215,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 840,
        "code": " i++) {\n            IERC20 tokenFunctions = IERC20(tokenArr[i]);\n            tokenFunctions.approve",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol",
        "function": "getExpectedPrice(address,address,uint256)",
        "lineno": 213,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1221,
        "code": "essRegistry = rAddr;\n    }\n\n    function () public paya",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/22/0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol",
        "function": "approveKyber(address[])",
        "lineno": 227,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2962,
        "code": "t KyberTrade(\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/22/0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol",
        "function": "executeTrade(address,address,uint256,uint256)",
        "lineno": 146,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2962,
        "code": "t KyberTrade(\n       ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2962\n",
        "filename": "/unique_chucks/22/0x40818f0d14325a9eba6b2a7d60bd61cb9e27ef0c.sol",
        "function": "executeTrade(address,address,uint256,uint256)",
        "lineno": 146,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}