{"error": null, "issues": [{"address": 344, "code": "rn userAccounts;\n\t}\n\t\n\tfunction getUser(address _address) view public returns(", "debug": "storage_9: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_ProfytPro_0: 0xce8e3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "fallback", "lineno": 59, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1481, "code": "rname,uint _balance) public {\n\t\tvar user = users[_address];\n\t\tuser.username = _username;\n\t\tuser.balance = _balance;\n\t\t\n\t\tif(owner == _address){\n\t\tuser.balance = totalSupply;    \n\t\t}\n\t\tuserAccounts.push(_address)-1;\n\t\tuserInfo(_username,_balance);\n\t}\n\t\n\tfunction getUsers() view public returns(address[]){", "debug": "calldata_ProfytPro_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ProfytPro_0: 0xaf431f0300000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUser(address,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "setUser(address,string,uint256)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2031, "code": "ss) view public ret", "debug": "storage_9: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_ProfytPro_0: 0xce8e3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "fallback", "lineno": 62, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2033, "code": "ss) view public ret", "debug": "storage_9: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_ProfytPro_0: 0xce8e3e00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "fallback", "lineno": 62, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2486, "code": " newSellPrice, uint256 newBu", "debug": "calldata_ProfytPro_32 + 36: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ProfytPro_32_+_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_ProfytPro_4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_ProfytPro_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "transferFrom(address,address,uint256)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2645, "code": "\n\tevent userInfo(\n\t\tstring us", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ProfytPro_4: 0x0\nstorage_9: 0x0\ncalldata_ProfytPro_0: 0x616d505800000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "_function_0x616d5058", "lineno": 34, "title": "Exception state", "type": "Informational"}, {"address": 3294, "code": "mount) public {\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_ProfytPro_0: 0xa6f2ae3a00000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\nstorage_7: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "buy()", "lineno": 112, "title": "Exception state", "type": "Informational"}, {"address": 5244, "code": "ofytPro is Owned{\n\tstruct User{\n\t\tstring username;\n\t\tuint balance;\n\t}\n\tstring public TokenName;\n    uint8 public decimals= 18;\n    string public symbol;\n    uint public totalSupply= 10000000000000000000000000;\n    uint public reserve = 0;\n    \n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n\tfunction ProfytPro(){\n\t    users[msg.sender].balance = totalSupply;\n        TokenName = \"ProfytPro\";\n        decimals = 18;\n        symbol = \"PFTC\";\n\t}\n\tmapping (address => User) users;\n\taddress[] public userAccounts;\n\t\n\tevent userInfo(\n\t\tstring username,\n\t\tuint balance\n\t);\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\t/**\n\tfunction () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\t**/\n\tfunction setUser(address _address,string _username,uint _balance) public {\n\t\tvar user = users[_address];\n\t\tuser.username = _username;\n\t\tuser.balance = _balance;\n\t\t\n\t\tif(owner == _address){\n\t\tuser.balance = totalSupply;    \n\t\t}\n\t\tuserAccounts.push(_address)-1;\n\t\tuserInfo(_username,_balance);\n\t}\n\t\n\tfunction getUsers() view public returns(address[]){\n\treturn userAccounts;\n\t}\n\t\n\tfunction getUser(address _address) view public returns(string,uint){\n\t\treturn (users[_address].username,users[_address].balance);\n\t}\n\tfunction countUsers() view public returns (uint){\n\tuserAccounts.length;\n\t}\n\tfunction transfer(address _to, uint256 _value) onlyOwner returns (bool success) {\n        require (_to != 0x0);\n        require (users[owner].balance >= _value);\n        if (users[owner].balance >= _value && _value > 0) {\n            if(totalSupply <= reserve){\n                users[owner].balance += totalSupply;\n                return false;\n            }\n            \n            users[owner].balance -= _value;\n            users[_to].balance += _value;\n            totalSupply -= _value;\n            Transfer(owner, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\tfunction transferFrom(address _from,address _to, uint256 _value) returns (bool success){\n\t    if (users[_from].balance >= _value && _value > 0){\n\t        users[_from].balance -= _value;\n\t        users[_to].balance += _value;\n\t    }\n\t    return false;\n\t}\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    function setReserve(uint _reserve) onlyOwner public {\n        reserve = _reserve;\n    }\n    function setSymbol(string _symbol) onlyOwner public {\n        symbol = _symbol;\n    }\n    function setDecimals(uint8 _decimals) onlyOwner public {\n        decimals = _decimals;\n    }\n    function setTotalSupply(uint _supply) onlyOwner public {\n        totalSupply = _supply;\n    }\n    function buy() payable public {\n        uint amount = msg.value / buyPrice; \n        transfer(this, amount);              \n    }\n    \n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        transferFrom(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\t\n}", "debug": "calldata_ProfytPro_4 + calldata_ProfytPro_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ProfytPro_0: 0xaf431f0300000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUser(address,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "setUser(address,string,uint256)", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5258, "code": "ofytPro is Owned{\n\tstruct User{\n\t\tstring username;\n\t\tuint balance;\n\t}\n\tstring public TokenName;\n    uint8 public decimals= 18;\n    string public symbol;\n    uint public totalSupply= 10000000000000000000000000;\n    uint public reserve = 0;\n    \n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n\tfunction ProfytPro(){\n\t    users[msg.sender].balance = totalSupply;\n        TokenName = \"ProfytPro\";\n        decimals = 18;\n        symbol = \"PFTC\";\n\t}\n\tmapping (address => User) users;\n\taddress[] public userAccounts;\n\t\n\tevent userInfo(\n\t\tstring username,\n\t\tuint balance\n\t);\n\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n\t/**\n\tfunction () {\n        //if ether is sent to this address, send it back.\n        throw;\n    }\n\t**/\n\tfunction setUser(address _address,string _username,uint _balance) public {\n\t\tvar user = users[_address];\n\t\tuser.username = _username;\n\t\tuser.balance = _balance;\n\t\t\n\t\tif(owner == _address){\n\t\tuser.balance = totalSupply;    \n\t\t}\n\t\tuserAccounts.push(_address)-1;\n\t\tuserInfo(_username,_balance);\n\t}\n\t\n\tfunction getUsers() view public returns(address[]){\n\treturn userAccounts;\n\t}\n\t\n\tfunction getUser(address _address) view public returns(string,uint){\n\t\treturn (users[_address].username,users[_address].balance);\n\t}\n\tfunction countUsers() view public returns (uint){\n\tuserAccounts.length;\n\t}\n\tfunction transfer(address _to, uint256 _value) onlyOwner returns (bool success) {\n        require (_to != 0x0);\n        require (users[owner].balance >= _value);\n        if (users[owner].balance >= _value && _value > 0) {\n            if(totalSupply <= reserve){\n                users[owner].balance += totalSupply;\n                return false;\n            }\n            \n            users[owner].balance -= _value;\n            users[_to].balance += _value;\n            totalSupply -= _value;\n            Transfer(owner, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\tfunction transferFrom(address _from,address _to, uint256 _value) returns (bool success){\n\t    if (users[_from].balance >= _value && _value > 0){\n\t        users[_from].balance -= _value;\n\t        users[_to].balance += _value;\n\t    }\n\t    return false;\n\t}\n\tfunction setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n    function setReserve(uint _reserve) onlyOwner public {\n        reserve = _reserve;\n    }\n    function setSymbol(string _symbol) onlyOwner public {\n        symbol = _symbol;\n    }\n    function setDecimals(uint8 _decimals) onlyOwner public {\n        decimals = _decimals;\n    }\n    function setTotalSupply(uint _supply) onlyOwner public {\n        totalSupply = _supply;\n    }\n    function buy() payable public {\n        uint amount = msg.value / buyPrice; \n        transfer(this, amount);              \n    }\n    \n    function sell(uint256 amount) public {\n        require(this.balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        transferFrom(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\t\n}", "debug": "calldata_ProfytPro_4 + calldata_ProfytPro_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_ProfytPro_0: 0xaf431f0300000000000000000000000000000000000000000000000000000000\ncalldatasize_ProfytPro: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setUser(address,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/34/0x0d09b8d474e312eda0996cb420aa9f5c6b2c1993.sol", "function": "setUser(address,string,uint256)", "lineno": 12, "title": "Integer Overflow ", "type": "Warning"}], "success": true}