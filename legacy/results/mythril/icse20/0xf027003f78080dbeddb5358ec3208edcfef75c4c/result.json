{
  "contract": "0xf027003f78080dbeddb5358ec3208edcfef75c4c",
  "tool": "mythril",
  "start": 1563662911.6207798,
  "end": 1563662952.3863592,
  "duration": 40.76557946205139,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2030,
        "code": "t DSMath {\n   ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "stop()",
        "lineno": 106,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 5260,
        "code": " internal {\n        if (!x) throw",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "_function_0x7a9e5e4b",
        "lineno": 84,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5260,
        "code": " internal {\n        if (!x) throw",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function _function_0x7a9e5e4b. The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "_function_0x7a9e5e4b",
        "lineno": 84,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 5658,
        "code": ");\n        \n        return tr",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Inerex_4: 0xfffffffffffffffffffffffffffffffe\ncalldata_Inerex_32 + 4: 0xffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_Inerex_0: 0x8402181f00000000000000000000000000000000000000000000000000000000\ncalldatasize_Inerex: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "pull(address,uint128)",
        "lineno": 318,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5794,
        "code": "   \n    function approve(address guy, uint",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_Inerex_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Inerex_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_Inerex_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Inerex: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 322,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6467,
        "code": "        assert((z = x - ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xee4af77fff5788000000000000000000280000000000000000600028701e6c4a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Inerex_4: 0xffffffffffffffffffffffffffffffffc7ffffffffffffffff7ffff8191e9040\ncalldata_Inerex_32 + 4: 0xe00000000000000000e0012f88220630\nstorage_4: 0x0\ncalldata_Inerex_0: 0x3452f51d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Inerex: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "push(address,uint128)",
        "lineno": 117,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6575,
        "code": " dst, uint wad) returns (bool) {\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffe\ncalldata_Inerex_32 + 4: 0xffffffffffffffffffffffffffffffff\nstorage_4: 0x0\ncalldata_Inerex_0: 0x3452f51d00000000000000000000000000000000000000000000000000000000\ncalldatasize_Inerex: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/35/0xf027003f78080dbeddb5358ec3208edcfef75c4c.sol",
        "function": "push(address,uint128)",
        "lineno": 310,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}