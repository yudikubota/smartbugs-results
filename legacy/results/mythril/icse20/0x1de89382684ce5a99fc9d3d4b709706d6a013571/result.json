{
  "contract": "0x1de89382684ce5a99fc9d3d4b709706d6a013571",
  "tool": "mythril",
  "start": 1563533428.3842206,
  "end": 1563533739.6403515,
  "duration": 311.2561309337616,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1578,
        "code": "ring aWithdraw, uint d) {\n        aDeposit = hwcAddress[_val].aDeposit;\n        aWithdraw = hwcAddress[_val].aWithdraw;\n        d = hwcAddress[_val].deposit;\n    }\n\n    function setHWCDeposit(address _user, uint _val) external onlyAdmin {\n        hwcAddress[_user].deposit = _val;\n    }\n\n    function createTokenByHWC(address _user",
        "debug": "calldata_SolutionGame_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SolutionGame_0: 0x22b2ea2200000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerHWCDep(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "registerHWCDep(string)",
        "lineno": 1096,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1779,
        "debug": "calldata_SolutionGame_4: 0xd5828f98a6006053cd78a3df0e1f05187d7080110150c8030403106a2c442050\ncalldata_SolutionGame_32 + 4: 0xba9dbeb44d3ef25d6c67dec84e31254883500000000000000000000000000000\nstorage_11: 0xd5828f98a6006053cd78a3df0e1f05187d7080110150c8030403106a2c442051\ncalldata_SolutionGame_0: 0x29bf960a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getResultTable(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "getResultTable(uint256,uint256)",
        "lineno": 1266,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7030,
        "code": "(uint){\n        uint[] memory _gameForecas",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_SolutionGame_4: 0xffbfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_keccac_calldata_SolutionGame_4 + 0: 0x0\nstorage_13: 0x0\ncalldata_SolutionGame_0: 0x1b3ff96f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "getForecastCount(uint256,uint256,bool)",
        "lineno": 865,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7683,
        "code": "(_goalA > _goalB)) ||\n            ",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x8000000000000000\nstorage_keccac_calldata_SolutionGame_4 + 0: 0x4000\ncalldata_SolutionGame_32 + 4: 0xfe0000\nstorage_0 + keccac_calldata_SolutionGame_4: 0x7fffffffffffffff00\ncalldata_SolutionGame_0: 0x1cb9a02a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "calculateScore(uint256,uint256)",
        "lineno": 963,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9876,
        "debug": "calldata_SolutionGame_4: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncalldata_SolutionGame_32 + 4: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_11: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743212\ncalldata_SolutionGame_0: 0x29bf960a00000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getResultTable(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "getResultTable(uint256,uint256)",
        "lineno": 1266,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 12099,
        "code": "= 1 ? true: fals",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SolutionGame_4: 0x0\nstorage_11: 0x0\ncalldata_SolutionGame_0: 0xe1af57b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\nstorage_keccac_calldata_SolutionGame_4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "getScore(uint256)",
        "lineno": 922,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 19951,
        "code": "\n\n\n/*",
        "debug": "storage_16: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0x0\ncalldatasize_SolutionGame: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "fallback",
        "lineno": 51,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 19964,
        "code": "ility library ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_16: 0x1\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncalldatasize_SolutionGame: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "fallback",
        "lineno": 55,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 22063,
        "code": "t prizeFund\n    function withdrawBalance() external onlyOwner {\n        owner.transfer(address(this).balance.sub(prizeFund));\n    }\n\n    /// @dev set count winner place / top1/top5/top10 etc\n    function setCountWinnerPlace(uint256 _val) external onlyOwner {\n        countWinnerPlace = _val;\n    }\n\n    /// @dev set the distribution of the prize by place\n    function setWinnerPlaceDistribution(uint256 place, uint256 _val) external onlyOwner {\n        require(place <= countWinnerPlace);\n        require(_val <= 10000);\n\n        uint256 testVal = 0;\n        uint256 index;\n        for (index = 1; index <= countWinnerPlace; index ++) {\n            if(index != place) {\n                testVal = testVal + prizeDistribution[index];\n            }\n        }\n\n        testVal = testVal + _val;\n        require(testVal <= 10000);\n        prizeDistribution[place] = _val;\n    }\n\n    ///@dev method for manual add/edit winner list and winner count\n    /// only after final\n    function setCountWinnerByPlace(uint256 place, uint256 _winnerCount, uint256 _winnerScore) public onlyOwner whenPaused {\n        require(_winnerCount > 0);\n        require(place <= countWinnerPlace);\n        prizesByPlace[place] = prizeFund.mul(prizeDistribution[place]).div(10000).div(_winnerCount);\n        prizesByPlaceHWC[place] = prizeFundHWC.mul(prizeDistribution[place]).div(10000).div(_winnerCount);\n        scoreByPlace[place] = _winnerScore;\n    }\n\n    function checkIsWinner(uint _tokenId) public view whenPaused onlyOwnerOf(_tokenId)\n    returns (uint place) {\n        place = 0;\n        uint score = getScore(_tokenId);\n        for(uint index = 1; index <= countWinnerPlace; index ++) {\n            if (score == scoreByPlace[index]) {\n                // token - winner\n                place = index;\n                break;\n            }\n        }\n    }\n\n    function getMyPrize() external whenWinnerTime {\n        uint[] memory tokenList = tokensOfOwner(msg.sender);\n\n        for(uint index = 0; index < tokenList.length; index ++) {\n            getPrizeByToken(tokenList[index]);\n        }\n    }\n\n    function getPrizeByToken(uint _tokenId) public whenWinnerTime onlyOwnerOf(_tokenId) {\n        uint place = checkIsWinner(_tokenId);\n        require (place > 0);\n\n        uint prize = prizesByPlace[place];\n        if(prize > 0) {\n            if(winnerMap[_tokenId] == 0) {\n                winnerMap[_tokenId] = prize;\n                winnerList.push(_tokenId);\n\n                address _owner = tokenOwner[_tokenId];\n                if(_owner != address(0)){\n                    //for hwc integration\n                    uint hwcPrize = prizesByPlaceHWC[place];\n                    hwcAddress[_owner].deposit = hwcAddress[_owner].deposit + hwcPrize;\n\n                    _owner.transfer(prize);\n                }\n            }\n        }\n    }\n\n    function getWinnerList() external view onlyAdmin returns (uint[]) {\n        return winnerList;\n    }\n\n    function getWinnerInfo(uint _tokenId) external view onlyAdmin returns (uint){\n        return winnerMap[_tokenId];\n    }\n\n    function getResultTable(uint _start, uint _count) external view returns (uint[]) {\n        uint[] memory results = new uint[](_count);\n        for(uint index = _start; index < tokens.length && index < (_start + _count); index++) {\n            results[(index - _start)] = getScore(index);\n        }\n        return results;\n    }\n}",
        "debug": "keccac_0_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_SolutionGame_0: 0x22b2ea2200000000000000000000000000000000000000000000000000000000\ncalldatasize_SolutionGame: 0x4\ncalldata_SolutionGame_4 + calldata_SolutionGame_4: 0x22\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `registerHWCDep(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/13/0x1de89382684ce5a99fc9d3d4b709706d6a013571.sol",
        "function": "registerHWCDep(string)",
        "lineno": 1170,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}