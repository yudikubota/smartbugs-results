{
  "contract": "0xe59d57b3dbbaf62870374ad0053719b361a2cd49",
  "tool": "mythril",
  "start": 1563516228.9466195,
  "end": 1563516406.822679,
  "duration": 177.87605953216553,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 956,
        "code": "ength);\n        bool[] memory exists = new bool[](participants.length);\n\n        for (uint i = 0; i < participants.length; i++) {\n            var balance = balances[participants[i]];\n            contribution[i] = balance.contribution;\n            remaining[i] = balance.remaining;\n            whitelisted[i] = balance.whitelisted;\n            exists[i] = balance.exists;\n        }\n\n        return (participants, contribution, remaining, whitelisted, exists);\n    }\n\n    function deposit() internal onState(State.Open) {\n        if (msg.value > 0) {\n            require(included(msg.sender));\n            (balances[msg.sender].contribution, balances[msg.sender].remaining) = getContribution(msg.sender, msg.value);\n            // must respect the maxContribution and maxPo",
        "debug": "mem_224 + 96*storage_5 + 32 + 32*storage_5: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 296,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1088,
        "code": "ength);\n        bool[] memory exists = new bool[](participants.length);\n\n        for (uint i = 0; i < participants.length; i++) {\n            var balance = balances[participants[i]];\n            contribution[i] = balance.contribution;\n            remaining[i] = balance.remaining;\n            whitelisted[i] = balance.whitelisted;\n            exists[i] = balance.exists;\n        }\n\n        return (participants, contribution, remaining, whitelisted, exists);\n    }\n\n    function deposit() internal onState(State.Open) {\n        if (msg.value > 0) {\n            require(included(msg.sender));\n            (balances[msg.sender].contribution, balances[msg.sender].remaining) = getContribution(msg.sender, msg.value);\n            // must respect the maxContribution and maxPo",
        "debug": "mem_224 + 96*storage_5 + 32 + 32*storage_5: 0x0\nmem_128 + 32 + 32*storage_5: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 296,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2249,
        "code": "onfigurati",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncalldatasize_PresalePool: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "fallback",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2630,
        "code": "        for (uint i = ",
        "debug": "storage_8: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\nstorage_0: 0x0\nstorage_2: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x6c6ce3ec1af83443408b26111b046df115107b55aeefbd725d1224fe82a14323\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_6: 0x0\ncalldatasize_PresalePool: 0x3\nstorage_4: 0x0\nstorage_3: 0x0\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "fallback",
        "lineno": 327,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3101,
        "code": "blic admins;\n\n    uint ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_PresalePool_4: 0x0\nstorage_1: 0x0\ncalldata_PresalePool_0: 0x14bfd6d000000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "_function_0x14bfd6d0",
        "lineno": 13,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3209,
        "code": " }\n\n    bool locked",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncaller: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x17f708fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "removeWhitelist()",
        "lineno": 64,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3560,
        "code": "onfigurati",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncaller: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x1fff2d8a00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "payToPresale(address)",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3784,
        "code": "      require(refundable && msg.va",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function payToPresale(address). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "payToPresale(address)",
        "lineno": 116,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3850,
        "code": "onfigurati",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncalldata_PresalePool_0: 0x26bdd81400000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "refundPresale()",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4177,
        "code": "onfigurati",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncalldata_PresalePool_0: 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "withdraw(uint256)",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4594,
        "code": "t the minContribut",
        "debug": "calldata_PresalePool_4: 0x2000000000000000000001000820042008200800020000000000000020001\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1784400e824e8ffffffffefe0616021e021e02000017ff7ffffe778d043c0\nstorage_0: 0x0\nstorage_8: 0x87bbff17db1700000000202020a02020602060001e80080000188731bc40\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x87bbff17db1700000000202020a02020602060001e80080000188731bc41\ncalldata_PresalePool_0: 0x2e1a7d4d00000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdraw(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "withdraw(uint256)",
        "lineno": 157,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5087,
        "code": "articipants;\n\n    bool public",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_PresalePool_4: 0x0\nstorage_5: 0x0\ncalldata_PresalePool_0: 0x35c1d34900000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "_function_0x35c1d349",
        "lineno": 19,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5169,
        "code": "          var balance = balance",
        "debug": "storage_5: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 300,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5172,
        "code": "          var balance = balance",
        "debug": "storage_5: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 300,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5174,
        "code": "          var balance = balance",
        "debug": "storage_5: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 300,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5224,
        "code": "ibution[i] = balance.contributi",
        "debug": "storage_5: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 301,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5227,
        "code": "ibution[i] = balance.contributi",
        "debug": "storage_5: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 301,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5229,
        "code": "ibution[i] = balance.contributi",
        "debug": "storage_5: 0x504a82203201925514000027fffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 301,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5279,
        "code": "remaining;\n            whitelis",
        "debug": "storage_5: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 302,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5282,
        "code": "remaining;\n            whitelis",
        "debug": "storage_5: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 302,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5284,
        "code": "remaining;\n            whitelis",
        "debug": "storage_5: 0x2fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 302,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5334,
        "code": "        exists[i] = balance.exi",
        "debug": "storage_5: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 304,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5337,
        "code": "        exists[i] = balance.exi",
        "debug": "storage_5: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 304,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5339,
        "code": "        exists[i] = balance.exi",
        "debug": "storage_5: 0x2802651f44645095001192893999827ffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `getParticipantBalances()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 304,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5563,
        "code": "\n           ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nmem_128 + 32 + 32*storage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 311,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5609,
        "code": "         (bala",
        "debug": "The exception is triggered under the following conditions:\n\nmem_128 + 32 + 32*storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nmem_160 + 32*storage_5 + 32 + 32*storage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 313,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5661,
        "code": "es[msg.se",
        "debug": "The exception is triggered under the following conditions:\n\nmem_160 + 32*storage_5 + 32 + 32*storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 + 32 + 32*storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x390a05a800000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nmem_192 + 64*storage_5 + 32 + 32*storage_5: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "getParticipantBalances()",
        "lineno": 313,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5919,
        "code": "onfigurati",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncaller: 0x0\nstorage_80084422859880547211683076133703299733277748156566366325829078699459944778998: 0x0\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_PresalePool_0: 0x43d726d600000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "close()",
        "lineno": 61,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7622,
        "code": "tal > 0) {\n        ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xfc00\ncalldata_PresalePool_0: 0x853828b600000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "withdrawAll()",
        "lineno": 132,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 7941,
        "code": "state == State.Paid);\n        }\n\n        msg.s",
        "debug": "storage_0: 0x0\nstorage_8: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1\ncalldata_PresalePool_0: 0x853828b600000000000000000000000000000000000000000000000000000000\ncalldatasize_PresalePool: 0x4\nstorage_10: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `withdrawAll()`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "withdrawAll()",
        "lineno": 140,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 11654,
        "code": "oolTotal - poolTotal, contribution);\n   ",
        "debug": "storage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_6: 0x0\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_PresalePool: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "fallback",
        "lineno": 350,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11655,
        "code": "oolTotal - poolTotal, contribution);\n        }\n  ",
        "debug": "callvalue: 0x81cf9941adec29d8dff5520125361c3f40b07e4801b039f6febc6baad407d413\nstorage_0: 0x0\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x456060ffed265e858b6cc6106307c46c196a6d2d199c10ae1332284a97d58927\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8880e1b9f8a5e7118bc901e9142407c00073e060802185408c0141ffff800000\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_6: 0x0\ncalldatasize_PresalePool: 0x3\n",
        "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "fallback",
        "lineno": 350,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 11737,
        "debug": "storage_4: 0x40000000000000\nstorage_0: 0x0\nstorage_8: 0x40000000000001\nstorage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_6: 0x0\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_PresalePool: 0x3\nstorage_3: 0x0\n",
        "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/7/0xe59d57b3dbbaf62870374ad0053719b361a2cd49.sol",
        "function": "fallback",
        "lineno": 364,
        "title": "Integer Underflow",
        "type": "Warning"
      }
    ],
    "success": true
  }
}