{"error": null, "issues": [{"address": 629, "code": "blicSupply += _am", "debug": "storage_3: 0xf77124b52a24e057d8a070024000e4e0e29fe1280e6ec1bac4ce6c09cd081036\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_511: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_16: 0xff00\ncalldatasize_iBird: 0x3\nstorage_10: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "fallback", "lineno": 54, "title": "Integer Overflow ", "type": "Warning"}, {"address": 640, "code": "   balances[msg.sender] += _amount;\n  ", "debug": "storage_3: 0xd6272c21e28ee2a9aa37d12c12aa92d6ef8a62d929fb586fbd8dc825613\nstorage_12: 0xf6d14ebf7e33fcecfe2fefad81f75d89c06c6b40002039460fff8eb5eff80000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_511: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_16: 0xff00\ncalldatasize_iBird: 0x3\nstorage_10: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "fallback", "lineno": 55, "title": "Integer Overflow ", "type": "Warning"}, {"address": 717, "code": "lSupply += _amount;\n           ", "debug": "storage_3: 0x2bcf132164ead8b4032659fd905c1d5161b04c23dfde04577db0a18a3b5b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbd10b7c7400062cfbeb7d5fbcbfabfe87fdd87bfa8f79fa9e60ab0c3bf940000\nretval_511: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_16: 0xff00\ncalldatasize_iBird: 0x3\nstorage_10: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "fallback", "lineno": 56, "title": "Integer Overflow ", "type": "Warning"}, {"address": 733, "code": " msg.sender, _amount);\n", "debug": "storage_3: 0x30c0a13b47a897a2e806bb57dd6cfbc147e285f48aa90122eec66ddf542f\nstorage_2: 0x8cfcf72bfffccb8c3d575aa5a921c137fc900387f1e53ffe1fa7e65d9d9c0000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_511: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_16: 0xff00\ncalldatasize_iBird: 0x3\nstorage_10: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "fallback", "lineno": 57, "title": "Integer Overflow ", "type": "Warning"}, {"address": 953, "code": "                if (msg.value >= 6e1", "debug": "callvalue: 0xf730e81659e0000000000000000000020000000000000000000000000022901a\nstorage_13: 0xc24c218a0d48e743e4b01814f88893c5b317d5dc7a6ef98a42e45ff727600003\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_511: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_16: 0xff00\ncalldatasize_iBird: 0x3\nstorage_10: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "fallback", "lineno": 66, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1966, "code": "int256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner p", "debug": "calldata_iBird_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1978, "code": "int256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner p", "debug": "calldata_iBird_4 + calldata_iBird_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1987, "code": "int256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner p", "debug": "calldata_iBird_4 + calldata_iBird_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1993, "code": "int256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner p", "debug": "calldata_iBird_4 + calldata_iBird_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 93, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2523, "code": "     uint256 _amount;\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n\n        for (uint8 i = 0; i < addresses.length; i++) {\n            _amount = amounts[i] * 1e18;\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n                DistribStarted = false;\n                IsDistribRunning = false;\n            }\n        }\n    }\n\n    function BurnTokens(uint256 amount) public returns(bool success) {\n        uint256 _amount = amount * 1e18;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amou", "debug": "calldata_iBird_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_iBird_0: 0xa8c310d500000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `distributeAmounts(address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "distributeAmounts(address[],uint256[])", "lineno": 184, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4320, "code": "sReceiverAddress] += _remainingAmount;\n              ", "debug": "storage_10: 0x20000\nstorage_16: 0xff00\nstorage_12: 0x20001\nstorage_15: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0xff\ncalldata_iBird_0: 0x18d69faa00000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `StopDistrib()`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "StopDistrib()", "lineno": 146, "title": "Integer Underflow", "type": "Warning"}, {"address": 4435, "code": "(this, _remainingTokensReceiverAddress, _remainingAmount);\n  ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_15,_256): 0xca0b416000014175629c58be85d948d81ba0869287028324cd21131dbdaec8b4\nstorage_10: 0x940e7efffffee1ffc453c844ecaf3d009306789a479485f37b0944eae86247c4\nstorage_12: 0x10268100000120017ede3713feedee02fffeffffe3bff40dd8d3adbff621419f\nstorage_16: 0xff00\nstorage_15: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0xff\ncalldata_iBird_0: 0x18d69faa00000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `StopDistrib()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "StopDistrib()", "lineno": 148, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4451, "code": "     }\n            DistribStarte", "debug": "storage_10: 0x940e7efffffee1ffc453c844ecaf3d009306789a479485f37b0944eae86247c4\nstorage_2: 0xca0b416000014175629c58be85d948d81ba0869287028324cd21131dbdaec8b4\nstorage_12: 0x10268100000120017ede3713feedee02fffeffffe3bff40dd8d3adbff621419f\nstorage_16: 0xff00\nstorage_15: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0xff\ncalldata_iBird_0: 0x18d69faa00000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `StopDistrib()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "StopDistrib()", "lineno": 150, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5239, "code": "\n        }\n    }\n\n    f", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iBird_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\ncalldata_iBird_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iBird_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_iBird_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "transferFrom(address,address,uint256)", "lineno": 290, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5674, "code": "sg.sender, 0,", "debug": "calldata_iBird_4: 0xf77124b52a24e057d8a070024000e4e0e29fe1280e6ec1bac4ce6c09cd081036\ncalldata_iBird_0: 0x2cd3fd7000000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `BurnTokens(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "BurnTokens(uint256)", "lineno": 211, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5834, "code": "ply() public constant r", "debug": "calldata_iBird_4: 0xf2c71b6ec72a2bc2cbdb1100a6c0a6800901d865bacf0a0402981f33eb\nstorage_2: 0x8311d86797e4b35c6094b1d0993b66af86537eac20e1bf6e2b9a265f94cbffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8311d86797e4b35c6094b1d0993b66af86537eac20e1bf6e2b9a265f94cc0000\ncalldata_iBird_0: 0x2cd3fd7000000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `BurnTokens(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "BurnTokens(uint256)", "lineno": 218, "title": "Integer Underflow", "type": "Warning"}, {"address": 6145, "code": "      _ExtraTokensPe", "debug": "storage_16: 0x0\ncalldata_iBird_4 + calldata_iBird_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncaller: 0x0\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 98, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7872, "code": "unction transferFrom(\n ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_iBird_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\ncalldata_iBird_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_iBird_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "transfer(address,uint256)", "lineno": 275, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9499, "code": "ntract iBird {\n\n    string public symbol = \"iBird\";\n    string public name = \"iBird Token\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\n  uint256 _FreeiBird = 50000;\n    uint256 _ML1 = 2;\n    uint256 _ML2 = 3;\n  uint256 _ML3 = 4;\n    uint256 _LimitML1 = 3e15;\n    uint256 _LimitML2 = 6e15;\n  uint256 _LimitML3 = 9e15;\n  uint256 _MaxDistribPublicSupply = 20000000000;\n    uint256 _OwnerDistribSupply = 0;\n    uint256 _CurrentDistribPublicSupply = 0;  \n    uint256 _ExtraTokensPerETHSended = 5000000000;\n    \n  address _DistribFundsReceiverAddress = 0;\n    address _remainingTokensReceiverAddress = 0;\n    address owner = 0;\n  \n  \n    bool setupDone = false;\n    bool IsDistribRunning = false;\n    bool DistribStarted = false;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed _owner, uint256 _value);\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => bool) public Claimed;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Makindo() public {\n        owner = msg.sender;\n    }\n\n    function() public payable {\n        if (IsDistribRunning) {\n            uint256 _amount;\n            if (((_CurrentDistribPublicSupply + _amount) > _MaxDistribPublicSupply) && _MaxDistribPublicSupply > 0) revert();\n            if (!_DistribFundsReceiverAddress.send(msg.value)) revert();\n            if (Claimed[msg.sender] == false) {\n                _amount = _FreeiBird * 1e18;\n                _CurrentDistribPublicSupply += _amount;\n                balances[msg.sender] += _amount;\n                _totalSupply += _amount;\n                Transfer(this, msg.sender, _amount);\n                Claimed[msg.sender] = true;\n            }\n\n           \n\n            if (msg.value >= 9e15) {\n            _amount = msg.value * _ExtraTokensPerETHSended * 4;\n            } else {\n                if (msg.value >= 6e15) {\n                    _amount = msg.value * _ExtraTokensPerETHSended * 3;\n                } else {\n                    if (msg.value >= 3e15) {\n                        _amount = msg.value * _ExtraTokensPerETHSended * 2;\n                    } else {\n\n                        _amount = msg.value * _ExtraTokensPerETHSended;\n\n                    }\n\n                }\n            }\n       \n       _CurrentDistribPublicSupply += _amount;\n                balances[msg.sender] += _amount;\n                _totalSupply += _amount;\n                Transfer(this, msg.sender, _amount);\n        \n\n\n\n        } else {\n            revert();\n        }\n    }\n\n    function SetupiBird(string tokenName, string tokenSymbol, uint256 ExtraTokensPerETHSended, uint256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner public {\n        _ML1 = ML1inX;\n        _ML2 = ML2inX;\n        _LimitML1 = LimitML1inWei;\n        _LimitML2 = LimitML2inWei;\n        \n    }\n\n    function SetExtra(uint256 ExtraTokensPerETHSended) onlyOwner public {\n        _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n    }\n\n    function SetFreeMKI(uint256 FreeiBird) onlyOwner public {\n        _FreeiBird = FreeiBird;\n    }\n\n    function StartDistrib() public returns(bool success) {\n        if (msg.sender == owner && !DistribStarted && setupDone) {\n            DistribStarted = true;\n            IsDistribRunning = true;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function StopDistrib() public returns(bool success) {\n        if (msg.sender == owner && IsDistribRunning) {\n            if (_remainingTokensReceiverAddress != 0 && _MaxDistribPublicSupply > 0) {\n                uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n                if (_remainingAmount > 0) {\n                    balances[_remainingTokensReceiverAddress] += _remainingAmount;\n                    _totalSupply += _remainingAmount;\n                    Transfer(this, _remainingTokensReceiverAddress, _remainingAmount);\n                }\n            }\n            DistribStarted = false;\n            IsDistribRunning = false;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function distribution(address[] addresses, uint256 _amount) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        require(addresses.length <= 255);\n        require(_amount <= _remainingAmount);\n        _amount = _amount * 1e18;\n\n        for (uint i = 0; i < addresses.length; i++) {\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n        }\n\n        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n            DistribStarted = false;\n            IsDistribRunning = false;\n        }\n    }\n\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        uint256 _amount;\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n\n        for (uint8 i = 0; i < addresses.length; i++) {\n            _amount = amounts[i] * 1e18;\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n                DistribStarted = false;\n                IsDistribRunning = false;\n            }\n        }\n    }\n\n    function BurnTokens(uint256 amount) public returns(bool success) {\n        uint256 _amount = amount * 1e18;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            _totalSupply -= _amount;\n            Burn(msg.sender, _amount);\n            Transfer(msg.sender, 0, _amount);\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function totalSupply() public constant returns(uint256 totalSupplyValue) {\n        return _totalSupply;\n    }\n\n    function MaxDistribPublicSupply_() public constant returns(uint256 MaxDistribPublicSupply) {\n        return _MaxDistribPublicSupply;\n    }\n\n    function OwnerDistribSupply_() public constant returns(uint256 OwnerDistribSupply) {\n        return _OwnerDistribSupply;\n    }\n\n    function CurrentDistribPublicSupply_() public constant returns(uint256 CurrentDistribPublicSupply) {\n        return _CurrentDistribPublicSupply;\n    }\n\n    function RemainingTokensReceiverAddress() public constant returns(address remainingTokensReceiverAddress) {\n        return _remainingTokensReceiverAddress;\n    }\n\n    function DistribFundsReceiverAddress() public constant returns(address DistribfundsReceiver) {\n        return _DistribFundsReceiverAddress;\n    }\n\n    function Owner() public constant returns(address ownerAddress) {\n        return owner;\n    }\n\n    function SetupDone() public constant returns(bool setupDoneFlag) {\n        return setupDone;\n    }\n\n    function IsDistribRunningFalg_() public constant returns(bool IsDistribRunningFalg) {\n        return IsDistribRunning;\n    }\n\n    function IsDistribStarted() public constant returns(bool IsDistribStartedFlag) {\n        return DistribStarted;\n    }\n\n    function balanceOf(address _owner) public constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\n        if (balances[msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public returns(bool success) {\n        if (balances[_from] >= _amount &&\n            allowed[_from][msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_iBird_4 + calldata_iBird_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_16: 0x0\ncaller: 0x0\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9513, "code": "ntract iBird {\n\n    string public symbol = \"iBird\";\n    string public name = \"iBird Token\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\n  uint256 _FreeiBird = 50000;\n    uint256 _ML1 = 2;\n    uint256 _ML2 = 3;\n  uint256 _ML3 = 4;\n    uint256 _LimitML1 = 3e15;\n    uint256 _LimitML2 = 6e15;\n  uint256 _LimitML3 = 9e15;\n  uint256 _MaxDistribPublicSupply = 20000000000;\n    uint256 _OwnerDistribSupply = 0;\n    uint256 _CurrentDistribPublicSupply = 0;  \n    uint256 _ExtraTokensPerETHSended = 5000000000;\n    \n  address _DistribFundsReceiverAddress = 0;\n    address _remainingTokensReceiverAddress = 0;\n    address owner = 0;\n  \n  \n    bool setupDone = false;\n    bool IsDistribRunning = false;\n    bool DistribStarted = false;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed _owner, uint256 _value);\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => bool) public Claimed;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function Makindo() public {\n        owner = msg.sender;\n    }\n\n    function() public payable {\n        if (IsDistribRunning) {\n            uint256 _amount;\n            if (((_CurrentDistribPublicSupply + _amount) > _MaxDistribPublicSupply) && _MaxDistribPublicSupply > 0) revert();\n            if (!_DistribFundsReceiverAddress.send(msg.value)) revert();\n            if (Claimed[msg.sender] == false) {\n                _amount = _FreeiBird * 1e18;\n                _CurrentDistribPublicSupply += _amount;\n                balances[msg.sender] += _amount;\n                _totalSupply += _amount;\n                Transfer(this, msg.sender, _amount);\n                Claimed[msg.sender] = true;\n            }\n\n           \n\n            if (msg.value >= 9e15) {\n            _amount = msg.value * _ExtraTokensPerETHSended * 4;\n            } else {\n                if (msg.value >= 6e15) {\n                    _amount = msg.value * _ExtraTokensPerETHSended * 3;\n                } else {\n                    if (msg.value >= 3e15) {\n                        _amount = msg.value * _ExtraTokensPerETHSended * 2;\n                    } else {\n\n                        _amount = msg.value * _ExtraTokensPerETHSended;\n\n                    }\n\n                }\n            }\n       \n       _CurrentDistribPublicSupply += _amount;\n                balances[msg.sender] += _amount;\n                _totalSupply += _amount;\n                Transfer(this, msg.sender, _amount);\n        \n\n\n\n        } else {\n            revert();\n        }\n    }\n\n    function SetupiBird(string tokenName, string tokenSymbol, uint256 ExtraTokensPerETHSended, uint256 MaxDistribPublicSupply, uint256 OwnerDistribSupply, address remainingTokensReceiverAddress, address DistribFundsReceiverAddress, uint256 FreeiBird) public {\n        if (msg.sender == owner && !setupDone) {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _FreeiBird = FreeiBird;\n            _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n            _MaxDistribPublicSupply = MaxDistribPublicSupply * 1e18;\n            if (OwnerDistribSupply > 0) {\n                _OwnerDistribSupply = OwnerDistribSupply * 1e18;\n                _totalSupply = _OwnerDistribSupply;\n                balances[owner] = _totalSupply;\n                _CurrentDistribPublicSupply += _totalSupply;\n                Transfer(this, owner, _totalSupply);\n            }\n            _DistribFundsReceiverAddress = DistribFundsReceiverAddress;\n            if (_DistribFundsReceiverAddress == 0) _DistribFundsReceiverAddress = owner;\n            _remainingTokensReceiverAddress = remainingTokensReceiverAddress;\n\n            setupDone = true;\n        }\n    }\n\n    function SetupML(uint256 ML1inX, uint256 ML2inX, uint256 LimitML1inWei, uint256 LimitML2inWei) onlyOwner public {\n        _ML1 = ML1inX;\n        _ML2 = ML2inX;\n        _LimitML1 = LimitML1inWei;\n        _LimitML2 = LimitML2inWei;\n        \n    }\n\n    function SetExtra(uint256 ExtraTokensPerETHSended) onlyOwner public {\n        _ExtraTokensPerETHSended = ExtraTokensPerETHSended;\n    }\n\n    function SetFreeMKI(uint256 FreeiBird) onlyOwner public {\n        _FreeiBird = FreeiBird;\n    }\n\n    function StartDistrib() public returns(bool success) {\n        if (msg.sender == owner && !DistribStarted && setupDone) {\n            DistribStarted = true;\n            IsDistribRunning = true;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function StopDistrib() public returns(bool success) {\n        if (msg.sender == owner && IsDistribRunning) {\n            if (_remainingTokensReceiverAddress != 0 && _MaxDistribPublicSupply > 0) {\n                uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n                if (_remainingAmount > 0) {\n                    balances[_remainingTokensReceiverAddress] += _remainingAmount;\n                    _totalSupply += _remainingAmount;\n                    Transfer(this, _remainingTokensReceiverAddress, _remainingAmount);\n                }\n            }\n            DistribStarted = false;\n            IsDistribRunning = false;\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function distribution(address[] addresses, uint256 _amount) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        require(addresses.length <= 255);\n        require(_amount <= _remainingAmount);\n        _amount = _amount * 1e18;\n\n        for (uint i = 0; i < addresses.length; i++) {\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n        }\n\n        if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n            DistribStarted = false;\n            IsDistribRunning = false;\n        }\n    }\n\n    function distributeAmounts(address[] addresses, uint256[] amounts) onlyOwner public {\n\n        uint256 _remainingAmount = _MaxDistribPublicSupply - _CurrentDistribPublicSupply;\n        uint256 _amount;\n\n        require(addresses.length <= 255);\n        require(addresses.length == amounts.length);\n\n        for (uint8 i = 0; i < addresses.length; i++) {\n            _amount = amounts[i] * 1e18;\n            require(_amount <= _remainingAmount);\n            _CurrentDistribPublicSupply += _amount;\n            balances[addresses[i]] += _amount;\n            _totalSupply += _amount;\n            Transfer(this, addresses[i], _amount);\n\n\n            if (_CurrentDistribPublicSupply >= _MaxDistribPublicSupply) {\n                DistribStarted = false;\n                IsDistribRunning = false;\n            }\n        }\n    }\n\n    function BurnTokens(uint256 amount) public returns(bool success) {\n        uint256 _amount = amount * 1e18;\n        if (balances[msg.sender] >= _amount) {\n            balances[msg.sender] -= _amount;\n            _totalSupply -= _amount;\n            Burn(msg.sender, _amount);\n            Transfer(msg.sender, 0, _amount);\n        } else {\n            revert();\n        }\n        return true;\n    }\n\n    function totalSupply() public constant returns(uint256 totalSupplyValue) {\n        return _totalSupply;\n    }\n\n    function MaxDistribPublicSupply_() public constant returns(uint256 MaxDistribPublicSupply) {\n        return _MaxDistribPublicSupply;\n    }\n\n    function OwnerDistribSupply_() public constant returns(uint256 OwnerDistribSupply) {\n        return _OwnerDistribSupply;\n    }\n\n    function CurrentDistribPublicSupply_() public constant returns(uint256 CurrentDistribPublicSupply) {\n        return _CurrentDistribPublicSupply;\n    }\n\n    function RemainingTokensReceiverAddress() public constant returns(address remainingTokensReceiverAddress) {\n        return _remainingTokensReceiverAddress;\n    }\n\n    function DistribFundsReceiverAddress() public constant returns(address DistribfundsReceiver) {\n        return _DistribFundsReceiverAddress;\n    }\n\n    function Owner() public constant returns(address ownerAddress) {\n        return owner;\n    }\n\n    function SetupDone() public constant returns(bool setupDoneFlag) {\n        return setupDone;\n    }\n\n    function IsDistribRunningFalg_() public constant returns(bool IsDistribRunningFalg) {\n        return IsDistribRunning;\n    }\n\n    function IsDistribStarted() public constant returns(bool IsDistribStartedFlag) {\n        return DistribStarted;\n    }\n\n    function balanceOf(address _owner) public constant returns(uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount) public returns(bool success) {\n        if (balances[msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public returns(bool success) {\n        if (balances[_from] >= _amount &&\n            allowed[_from][msg.sender] >= _amount &&\n            _amount > 0 &&\n            balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function approve(address _spender, uint256 _amount) public returns(bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_iBird_4 + calldata_iBird_4)): 0xa7d18fd5703fddff6f5377fa44900dfb4a10ffffe39800000000000000000060\nstorage_16: 0x0\ncalldata_iBird_4 + calldata_iBird_4: 0x7fffffffffffffffffffffffffffffffffffffff3fffffffffffffffffffff41\ncaller: 0x0\ncalldata_iBird_0: 0x34c8ea2600000000000000000000000000000000000000000000000000000000\ncalldatasize_iBird: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/45/0x4e00ca8c94af28f386a1d8fbeccfb02aff0c29f9.sol", "function": "SetupiBird(string,string,uint256,uint256,uint256,address,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}