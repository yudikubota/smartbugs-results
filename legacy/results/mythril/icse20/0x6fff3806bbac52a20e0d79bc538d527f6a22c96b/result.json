{
  "contract": "0x6fff3806bbac52a20e0d79bc538d527f6a22c96b",
  "tool": "mythril",
  "start": 1563471038.0325642,
  "end": 1563471124.2285116,
  "duration": 86.19594740867615,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2435,
        "code": "ress(0);\n    }\n\n    function h",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_6: 0x0\ncalldata_TokenLogic_4: 0x0\nstorage_9: 0x0\nstorage_7: 0x108b2a2c28029093ffffff\ntimestamp: 0x1\ncaller: 0x0\ncalldata_TokenLogic_0: 0x56e25e300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "returnIcoInvestments(uint256)",
        "lineno": 644,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4550,
        "code": "s (bool) {\n     ",
        "debug": "calldata_TokenLogic_32 + 4: 0x49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f49f4a0\ncaller: 0x0\ncalldata_TokenLogic_0: 0x9a555c000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setIcoStart(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "setIcoStart(uint256,uint256)",
        "lineno": 587,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4554,
        "code": "Only returns (bool) {\n     ",
        "debug": "calldata_TokenLogic_4: 0xdf8c96b78a77f041c41eba96634e2e0aff91000619eacf4058407a080701c870\ncalldata_TokenLogic_32 + 4: 0x4cbc9ab83f98fc91e63d04926000ca42c001012100dbc3f2348b1b59ae97f28\ncaller: 0x0\ncalldata_TokenLogic_0: 0x9a555c000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setIcoStart(uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "setIcoStart(uint256,uint256)",
        "lineno": 587,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4706,
        "code": "\n    function setTokensPerWei(uint tokensPerWei_) auth {\n        re",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLogic_0: 0x13af403500000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "setOwner(address)",
        "lineno": 569,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5099,
        "code": "rn data.balances(src",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "setOwner(address)",
        "lineno": 580,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5387,
        "code": "erFrom(addres",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "totalSupply()",
        "lineno": 596,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5598,
        "code": "\n    function setTokensPerWei(uint tokensPerWei_) auth {\n        re",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLogic_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 569,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5792,
        "code": "ces(data.owner(), ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 617,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5792,
        "code": "ces(data.owner(), ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6106\n",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 617,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 6106,
        "code": "r()), wad));\n        dat",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 617,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 7956,
        "code": "\n    function setTokensPerWei(uint tokensPerWei_) auth {\n        re",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLogic_0: 0x68ce90ac00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "handlePayment(address,uint256)",
        "lineno": 569,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10085,
        "code": "\n    function setTokensPerWei(uint tokensPerWei_) auth {\n        re",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLogic_0: 0x69d3e20e00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "mint(uint128)",
        "lineno": 569,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 10285,
        "code": " uint srcBal",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "mint(uint128)",
        "lineno": 633,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 10285,
        "code": " uint srcBal",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 10543\n",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "mint(uint128)",
        "lineno": 633,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 10543,
        "code": ");\n\n        ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "mint(uint128)",
        "lineno": 633,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 11550,
        "code": "= wad);\n        re",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "balanceOf(address)",
        "lineno": 597,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 11755,
        "code": "\n    function setTokensPerWei(uint tokensPerWei_) auth {\n        re",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenLogic_0: 0x7261e46900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenLogic: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "burn(address,uint128)",
        "lineno": 569,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 12014,
        "code": "y));\n\n        /*gi",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "burn(address,uint128)",
        "lineno": 636,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 16118,
        "code": "  Copyright 2017 DappHub, LLC\n\n  ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "setTokensPerWei(uint256)",
        "lineno": 63,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 16118,
        "code": "  Copyright 2017 DappHub, LLC\n\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 11550\nCall at address: 11550\n",
        "filename": "/unique_chucks/3/0x6fff3806bbac52a20e0d79bc538d527f6a22c96b.sol",
        "function": "returnIcoInvestments(uint256)",
        "lineno": 63,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}