{"error": null, "issues": [{"address": 895, "code": "tle VestedTokenDistributionStrategy\n * @dev Strategy that distributes a fixed number of tokens among the contributors.\n * It's done in two steps. First, it registers all of the contributions while the sale is active.\n * After the crowdsale has ended the contract compensate buyers proportionally to their contributions.\n */\ncontract VestedTokenDistributionStrategy is Ownable, FixedPoolWithBonusTokenDistributionStrategy", "debug": "mem_128 + 32 + 32*storage_3: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_WhitelistedDistributionStrategy_0: 0x492bd27600000000000000000000000000000000000000000000000000000000\ncalldatasize_WhitelistedDistributionStrategy: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getIntervals()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "getIntervals()", "lineno": 443, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2694, "code": "n;\n  }\n\n  function ge", "debug": "", "description": "This contract executes a message call to an address found at storage slot 4. This storage slot can be written to by calling the function `initIntervals()`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "distributeTokens(address,uint256)", "lineno": 426, "title": "Message call to external contract", "type": "Warning"}, {"address": 2694, "code": "n;\n  }\n\n  function ge", "debug": "", "description": "A possible transaction order independence vulnerability exists in function distributeTokens(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "distributeTokens(address,uint256)", "lineno": 426, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3283, "code": ") view returns (uint2", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x9341aa4e`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "initIntervals()", "lineno": 394, "title": "Message call to external contract", "type": "Warning"}, {"address": 3283, "code": ") view returns (uint2", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3488\n", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "initIntervals()", "lineno": 394, "title": "Multiple Calls", "type": "Information"}, {"address": 3283, "code": ") view returns (uint2", "debug": "", "description": "A possible transaction order independence vulnerability exists in function initIntervals(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "initIntervals()", "lineno": 394, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3488, "code": "; i < bonusInterval", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x9341aa4e`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "initIntervals()", "lineno": 396, "title": "Message call to external contract", "type": "Warning"}, {"address": 3488, "code": "; i < bonusInterval", "debug": "", "description": "A possible transaction order independence vulnerability exists in function initIntervals(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "initIntervals()", "lineno": 396, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4164, "code": "dTokenDis", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhitelistedDistributionStrategy_0: 0x492bd27600000000000000000000000000000000000000000000000000000000\ncalldatasize_WhitelistedDistributionStrategy: 0x4\nmem_128 + 32 + 32*storage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "getIntervals()", "lineno": 448, "title": "Exception state", "type": "Informational"}, {"address": 4491, "code": "easableAmount(_bene", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x9341aa4e`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "configureVesting(uint256,uint256)", "lineno": 494, "title": "Message call to external contract", "type": "Warning"}, {"address": 4491, "code": "easableAmount(_bene", "debug": "", "description": "A possible transaction order independence vulnerability exists in function configureVesting(uint256,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "configureVesting(uint256,uint256)", "lineno": 494, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4581, "code": "   released[_beneficiary] = ", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "configureVesting(uint256,uint256)", "lineno": 498, "title": "State change after external call", "type": "Warning"}, {"address": 4588, "code": "d[_beneficiary].add(unreleased);\n\n", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "configureVesting(uint256,uint256)", "lineno": 498, "title": "State change after external call", "type": "Warning"}, {"address": 4615, "code": "quire(token.transfer(_be", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "configureVesting(uint256,uint256)", "lineno": 500, "title": "State change after external call", "type": "Warning"}, {"address": 5297, "code": "urn of tokens after ", "debug": "", "description": "This contract executes a message call to an address found at storage slot 1. This storage slot can be written to by calling the function `_function_0x9341aa4e`. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "compensate(address)", "lineno": 476, "title": "Message call to external contract", "type": "Warning"}, {"address": 5297, "code": "urn of tokens after ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function compensate(address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "compensate(address)", "lineno": 476, "title": "Transaction order dependence", "type": "Warning"}, {"address": 7275, "code": "56 pu", "debug": "storage_7: 0x87a0000010400000000000000600000000000000000000000007fffffe040050\nstorage_9: 0x987fffffefc001000100000002000000000000000000042240000000024080a0\nstorage_8: 0xff00\ntimestamp: 0x87a0000010400000000000000600000000000000000000000007fffffe040050\ncalldata_WhitelistedDistributionStrategy_0: 0x384711cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhitelistedDistributionStrategy: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vestedAmount(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "vestedAmount(address)", "lineno": 726, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7288, "code": "dTime;\n\n  // a", "debug": "The exception is triggered under the following conditions:\n\nstorage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_9: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0xff00\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WhitelistedDistributionStrategy_0: 0x384711cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_WhitelistedDistributionStrategy: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "vestedAmount(address)", "lineno": 726, "title": "Exception state", "type": "Informational"}, {"address": 7312, "code": "okenDistributi", "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WhitelistedDistributionStrategy_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_7: 0x0\ncalldata_WhitelistedDistributionStrategy_0: 0x1726cbc800000000000000000000000000000000000000000000000000000000\ncalldatasize_WhitelistedDistributionStrategy: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/10/0x4c7f666ca30fe548fbdc08b0308927327f08336d.sol", "function": "releasableAmount(address)", "lineno": 722, "title": "Exception state", "type": "Informational"}], "success": true}