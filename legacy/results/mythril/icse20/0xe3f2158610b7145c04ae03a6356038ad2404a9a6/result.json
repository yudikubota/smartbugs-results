{
  "contract": "0xe3f2158610b7145c04ae03a6356038ad2404a9a6",
  "tool": "mythril",
  "start": 1563587963.2263737,
  "end": 1563588024.3002841,
  "duration": 61.07391047477722,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 768,
        "code": "eEvent(earliestReleaseTimes[i], amounts[i], blockNumber);\n        }\n    }\n\n    /// @notice Get the count of releases\n    /// @return The number of defined releases\n    function releasesCount()\n    public\n    view\n    returns (uint256)\n    {\n        return releases.length;\n    }\n\n    /// @notice Set the block number of a release that is not done\n    /// @param index The index of the release\n    /// @param blockNumber The updated block number\n    function setReleaseBlockNumber(uint256 index, uint256 blockNumber)\n    public\n    onlyBeneficiary\n    {\n        // Require that the release is not done\n        require(!releases[index].done);\n\n        // Update the release block number\n        releases[index].blockNumber = blockNumber;\n\n        // Emit event\n        emit SetReleaseBlockNumberEvent(index, blockNumber);\n    }\n\n    /// @notice Transfers tokens held in the indicated release to beneficiary.\n    /// @param index The index of the release\n    function release(uint256 index)\n    public\n    onlyBeneficiary\n    {\n        // Get the release object\n        Release storage _release = releases[index];\n\n        // Require that this release has been properly defined by having non-",
        "debug": "calldata_TokenMultiTimelock_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TokenMultiTimelock_0: 0x4524c0cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `defineReleases(uint256[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "defineReleases(uint256[],uint256[],uint256[])",
        "lineno": 1115,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2683,
        "code": "ifier onlyBenef",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenMultiTimelock_4: 0x0\nstorage_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenMultiTimelock_0: 0x37bdc99b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "release(uint256)",
        "lineno": 1186,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2833,
        "code": "Functions\n    // ------",
        "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenMultiTimelock_4: 0x0\ntimestamp: 0x0\nstorage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\nstorage_3 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\nstorage_1 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x1\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenMultiTimelock_0: 0x37bdc99b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\nstorage_2 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `release(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "release(uint256)",
        "lineno": 1211,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2851,
        "code": "------------------------------------",
        "debug": "calldata_TokenMultiTimelock_4: 0x0\ntimestamp: 0x0\nstorage_1 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_5: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_0 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\nstorage_3 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\nstorage_4: 0x1\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenMultiTimelock_0: 0x37bdc99b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\nstorage_2 +\n62514009886607029107290561805838585334079798074568712924583230797734656856475 +\n4*calldata_TokenMultiTimelock_4: 0x0\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `release(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "release(uint256)",
        "lineno": 1212,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 3350,
        "code": "Beneficiary\n    {\n        // Re",
        "debug": "calldata_TokenMultiTimelock_4 + calldata_TokenMultiTimelock_4: 0xfefffbfa1effffbff7df6effffffdfffdfffc7ffffffffffbfffdffeffefefff\nmem_0 +\n192 +\n32*\ncalldata_TokenMultiTimelock_4 + calldata_TokenMultiTimelock_4: 0xdebb2d4496d9b1e0da3048ff05f09362b4029950030844b409298e63f41fab12\nstorage_5: 0xffa86904520badfedb9f6ecff5ff230434d480f53725439ba1266ef4723fb30f\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffff00\nmem_160 +\n32*\ncalldata_TokenMultiTimelock_4 + calldata_TokenMultiTimelock_4 +\n32 +\n32*\ncalldata_TokenMultiTimelock_4 + calldata_TokenMultiTimelock_32 + 4: 0xfefffbfa1effffbff7df6effffffdfffdfffc7ffffffffffbfffdffeffefefff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_TokenMultiTimelock_0: 0x4524c0cd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\nmem_128 +\n32 +\n32*\ncalldata_TokenMultiTimelock_4 + calldata_TokenMultiTimelock_4: 0xfefffbfa1effffbff7df6effffffdfffdfffc7ffffffffffbfffdffeffefefff\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `defineReleases(uint256[],uint256[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "defineReleases(uint256[],uint256[],uint256[])",
        "lineno": 1134,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3552,
        "code": "r = blockNumber;\n\n        // E",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "defineReleases(uint256[],uint256[],uint256[])",
        "lineno": 1140,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3552,
        "code": "r = blockNumber;\n\n        // E",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function defineReleases(uint256[],uint256[],uint256[]). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "defineReleases(uint256[],uint256[],uint256[])",
        "lineno": 1140,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 4099,
        "code": "dReleasesCount+",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenMultiTimelock_4: 0x0\nstorage_4: 0x0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenMultiTimelock_0: 0x4eddcf5b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "setReleaseBlockNumber(uint256,uint256)",
        "lineno": 1172,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5471,
        "code": " /// @notice Set the addr",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenMultiTimelock_4: 0x0\nstorage_4: 0x0\ncalldata_TokenMultiTimelock_0: 0xb6a9f40f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenMultiTimelock: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "_function_0xb6a9f40f",
        "lineno": 1054,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5876,
        "code": " resetting it to zero. To",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "release(uint256)",
        "lineno": 424,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 5876,
        "code": " resetting it to zero. To",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function release(uint256). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/21/0xe3f2158610b7145c04ae03a6356038ad2404a9a6.sol",
        "function": "release(uint256)",
        "lineno": 424,
        "title": "Transaction order dependence",
        "type": "Warning"
      }
    ],
    "success": true
  }
}