{"error": null, "issues": [{"address": 595, "code": "  public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId ", "debug": "calldata_DReddit_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 44, "title": "Integer Overflow ", "type": "Warning"}, {"address": 723, "code": "sts;\n\n    event New", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DReddit_4: 0x0\nstorage_0: 0x0\ncalldata_DReddit_0: 0xb1e7f8300000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "_function_0x0b1e7f83", "lineno": 17, "title": "Exception state", "type": "Informational"}, {"address": 974, "code": " return (p.voter", "debug": "storage_0: 0x0\ncalldata_DReddit_0: 0x2574625100000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `canVote(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "canVote(uint256)", "lineno": 89, "title": "Integer Underflow", "type": "Warning"}, {"address": 1004, "code": " @notice Obtai", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DReddit_4: 0xfffffffffffffffffffffffffffffffffffffffffffffefffffffffffffffffe\nstorage_0: 0x0\ncalldata_DReddit_0: 0x2574625100000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "canVote(uint256)", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 1123, "code": "t\n    // @param _postId Id of the p", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x300\ncalldata_DReddit_4: 0x7ffffe\nstorage_0: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000\ncalldata_DReddit_0: 0x2574625100000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "canVote(uint256)", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 1151, "debug": "The exception is triggered under the following conditions:\n\ncalldata_DReddit_4: 0x0\nstorage_0: 0x0\ncalldata_DReddit_0: 0x5a55c1f000000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "getVote(uint256)", "lineno": 104, "title": "Exception state", "type": "Informational"}, {"address": 1257, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_DReddit_4: 0x0\nstorage_0: 0x1\ncalldata_DReddit_0: 0x5a55c1f000000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "getVote(uint256)", "lineno": 104, "title": "Exception state", "type": "Informational"}, {"address": 1283, "code": "s not exist\");", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DReddit_4: 0x0\nstorage_0: 0x0\ncalldata_DReddit_0: 0x943e821600000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "vote(uint256,uint8)", "lineno": 64, "title": "Exception state", "type": "Informational"}, {"address": 1527, "code": "post\");\n\n        Ballot b = Ballot(", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x8000\ncalldata_DReddit_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_DReddit_0: 0x943e821600000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "vote(uint256,uint8)", "lineno": 65, "title": "Exception state", "type": "Informational"}, {"address": 1659, "code": "otes++;\n     ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_DReddit_32 + 4: 0x80\ncalldata_DReddit_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_DReddit_0: 0x943e821600000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "vote(uint256,uint8)", "lineno": 69, "title": "Exception state", "type": "Informational"}, {"address": 1708, "code": "       p.vo", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_DReddit_32 + 4: 0x1\nstorage_3 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DReddit_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_DReddit_0: 0x943e821600000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "vote(uint256,uint8)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1733, "code": "it Vote(_post", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_DReddit_32 + 4: 0x0\nstorage_4 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DReddit_4: 0x0\nstorage_0 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*calldata_DReddit_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x1\ncalldata_DReddit_0: 0x943e821600000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `vote(uint256,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "vote(uint256,uint8)", "lineno": 75, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1968, "code": "{\n            ", "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 47, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2058, "code": "e: block.time", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 48, "title": "Exception state", "type": "Informational"}, {"address": 2099, "code": "e: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _descript", "debug": "storage_0: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 48, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2520, "code": "tract DReddit {\n\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\n\n    struct Post {\n        uint creationDate;   \n        bytes description;   \n        address owner;\n        uint upvotes;  \n        uint downvotes;\n        mapping(address => Ballot) voters;\n    }\n\n    Post[] public posts;\n\n    event NewPost (\n        uint indexed postId,\n        address owner,\n        bytes description\n    );\n\n    event Vote(\n        uint indexed postId,\n        address voter,\n        uint8 vote\n    );\n\n    // @notice Number of posts created\n    // @return Num of posts\n    function numPosts()\n        public\n        view\n        returns(uint)\n    {\n        return posts.length;\n    }\n\n    // @notice Create Post\n    // @param _description IPFS hash of the content of the post\n    function create(bytes _description)\n        public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId Id of the post to up/downvote\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\n    function vote(uint _postId, uint8 _vote)\n        public\n    {\n        Post storage p = posts[_postId];\n        require(p.creationDate != 0, \"Post does not exist\");\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\n\n        Ballot b = Ballot(_vote);\n        if (b == Ballot.UPVOTE) {\n            p.upvotes++;\n        } else {\n            p.downvotes++;\n        }\n        p.voters[msg.sender] = b;\n\n        emit Vote(_postId, msg.sender, _vote);\n    }\n\n    // @notice Determine if the sender can vote on a post\n    // @param _postId Id of the post\n    // @return bool that indicates if the sender can vote or not\n    function canVote(uint _postId)\n        public\n        view\n        returns (bool)\n    {\n        if(_postId > posts.length - 1) return false;\n\n        Post storage p = posts[_postId];    \n        return (p.voters[msg.sender] == Ballot.NONE);\n    }\n\n    // @notice Obtain vote for specific post\n    // @param _postId Id of the post\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\n    function getVote(uint _postId)\n        public\n        view\n        returns (uint8)\n    {\n        Post storage p = posts[_postId];\n        return uint8(p.voters[msg.sender]);\n    }\n\n}", "debug": "keccac_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n6*storage_0: 0xff8007b08649eba518062bad4024f63b0581e1673f0b574bf7ba80dfcf20ca00\nstorage_1 +\n18569430475105882587588266137607568536673111973893317399460219858819262702947 +\n6*storage_0: 0x7403a9bcd8faddf5d1e685cff3ba22e265c519effac9cb3ec6759905c67efc51\nstorage_0: 0x413eb400000002088020000002000010576c118a884fd9a3152000004b020000\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2549, "code": "tract DReddit {\n\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\n\n    struct Post {\n        uint creationDate;   \n        bytes description;   \n        address owner;\n        uint upvotes;  \n        uint downvotes;\n        mapping(address => Ballot) voters;\n    }\n\n    Post[] public posts;\n\n    event NewPost (\n        uint indexed postId,\n        address owner,\n        bytes description\n    );\n\n    event Vote(\n        uint indexed postId,\n        address voter,\n        uint8 vote\n    );\n\n    // @notice Number of posts created\n    // @return Num of posts\n    function numPosts()\n        public\n        view\n        returns(uint)\n    {\n        return posts.length;\n    }\n\n    // @notice Create Post\n    // @param _description IPFS hash of the content of the post\n    function create(bytes _description)\n        public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId Id of the post to up/downvote\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\n    function vote(uint _postId, uint8 _vote)\n        public\n    {\n        Post storage p = posts[_postId];\n        require(p.creationDate != 0, \"Post does not exist\");\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\n\n        Ballot b = Ballot(_vote);\n        if (b == Ballot.UPVOTE) {\n            p.upvotes++;\n        } else {\n            p.downvotes++;\n        }\n        p.voters[msg.sender] = b;\n\n        emit Vote(_postId, msg.sender, _vote);\n    }\n\n    // @notice Determine if the sender can vote on a post\n    // @param _postId Id of the post\n    // @return bool that indicates if the sender can vote or not\n    function canVote(uint _postId)\n        public\n        view\n        returns (bool)\n    {\n        if(_postId > posts.length - 1) return false;\n\n        Post storage p = posts[_postId];    \n        return (p.voters[msg.sender] == Ballot.NONE);\n    }\n\n    // @notice Obtain vote for specific post\n    // @param _postId Id of the post\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\n    function getVote(uint _postId)\n        public\n        view\n        returns (uint8)\n    {\n        Post storage p = posts[_postId];\n        return uint8(p.voters[msg.sender]);\n    }\n\n}", "debug": "storage_0: 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2563, "code": "tract DReddit {\n\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\n\n    struct Post {\n        uint creationDate;   \n        bytes description;   \n        address owner;\n        uint upvotes;  \n        uint downvotes;\n        mapping(address => Ballot) voters;\n    }\n\n    Post[] public posts;\n\n    event NewPost (\n        uint indexed postId,\n        address owner,\n        bytes description\n    );\n\n    event Vote(\n        uint indexed postId,\n        address voter,\n        uint8 vote\n    );\n\n    // @notice Number of posts created\n    // @return Num of posts\n    function numPosts()\n        public\n        view\n        returns(uint)\n    {\n        return posts.length;\n    }\n\n    // @notice Create Post\n    // @param _description IPFS hash of the content of the post\n    function create(bytes _description)\n        public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId Id of the post to up/downvote\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\n    function vote(uint _postId, uint8 _vote)\n        public\n    {\n        Post storage p = posts[_postId];\n        require(p.creationDate != 0, \"Post does not exist\");\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\n\n        Ballot b = Ballot(_vote);\n        if (b == Ballot.UPVOTE) {\n            p.upvotes++;\n        } else {\n            p.downvotes++;\n        }\n        p.voters[msg.sender] = b;\n\n        emit Vote(_postId, msg.sender, _vote);\n    }\n\n    // @notice Determine if the sender can vote on a post\n    // @param _postId Id of the post\n    // @return bool that indicates if the sender can vote or not\n    function canVote(uint _postId)\n        public\n        view\n        returns (bool)\n    {\n        if(_postId > posts.length - 1) return false;\n\n        Post storage p = posts[_postId];    \n        return (p.voters[msg.sender] == Ballot.NONE);\n    }\n\n    // @notice Obtain vote for specific post\n    // @param _postId Id of the post\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\n    function getVote(uint _postId)\n        public\n        view\n        returns (uint8)\n    {\n        Post storage p = posts[_postId];\n        return uint8(p.voters[msg.sender]);\n    }\n\n}", "debug": "storage_0: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0x54901320010adb77e589f67c9ffffffbfffffffffffffffffffffffffffffff1\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0xd2deea42652e1b544009a3557fffffffffffffffffffffffffffffffffffffff\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2580, "code": "tract DReddit {\n\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\n\n    struct Post {\n        uint creationDate;   \n        bytes description;   \n        address owner;\n        uint upvotes;  \n        uint downvotes;\n        mapping(address => Ballot) voters;\n    }\n\n    Post[] public posts;\n\n    event NewPost (\n        uint indexed postId,\n        address owner,\n        bytes description\n    );\n\n    event Vote(\n        uint indexed postId,\n        address voter,\n        uint8 vote\n    );\n\n    // @notice Number of posts created\n    // @return Num of posts\n    function numPosts()\n        public\n        view\n        returns(uint)\n    {\n        return posts.length;\n    }\n\n    // @notice Create Post\n    // @param _description IPFS hash of the content of the post\n    function create(bytes _description)\n        public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId Id of the post to up/downvote\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\n    function vote(uint _postId, uint8 _vote)\n        public\n    {\n        Post storage p = posts[_postId];\n        require(p.creationDate != 0, \"Post does not exist\");\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\n\n        Ballot b = Ballot(_vote);\n        if (b == Ballot.UPVOTE) {\n            p.upvotes++;\n        } else {\n            p.downvotes++;\n        }\n        p.voters[msg.sender] = b;\n\n        emit Vote(_postId, msg.sender, _vote);\n    }\n\n    // @notice Determine if the sender can vote on a post\n    // @param _postId Id of the post\n    // @return bool that indicates if the sender can vote or not\n    function canVote(uint _postId)\n        public\n        view\n        returns (bool)\n    {\n        if(_postId > posts.length - 1) return false;\n\n        Post storage p = posts[_postId];    \n        return (p.voters[msg.sender] == Ballot.NONE);\n    }\n\n    // @notice Obtain vote for specific post\n    // @param _postId Id of the post\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\n    function getVote(uint _postId)\n        public\n        view\n        returns (uint8)\n    {\n        Post storage p = posts[_postId];\n        return uint8(p.voters[msg.sender]);\n    }\n\n}", "debug": "storage_0: 0x114497efa43949652cbf00000000000000000000000000000000000000000000\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0x21\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2585, "code": "tract DReddit {\n\n    enum Ballot { NONE, UPVOTE, DOWNVOTE }\n\n    struct Post {\n        uint creationDate;   \n        bytes description;   \n        address owner;\n        uint upvotes;  \n        uint downvotes;\n        mapping(address => Ballot) voters;\n    }\n\n    Post[] public posts;\n\n    event NewPost (\n        uint indexed postId,\n        address owner,\n        bytes description\n    );\n\n    event Vote(\n        uint indexed postId,\n        address voter,\n        uint8 vote\n    );\n\n    // @notice Number of posts created\n    // @return Num of posts\n    function numPosts()\n        public\n        view\n        returns(uint)\n    {\n        return posts.length;\n    }\n\n    // @notice Create Post\n    // @param _description IPFS hash of the content of the post\n    function create(bytes _description)\n        public\n    {\n        uint postId = posts.length++;\n        posts[postId] = Post({\n            creationDate: block.timestamp,\n            description: _description,\n            owner: msg.sender,\n            upvotes: 0,\n            downvotes: 0\n        });\n        emit NewPost(postId, msg.sender, _description);\n    }\n\n    // @notice Vote on a post\n    // @param _postId Id of the post to up/downvote\n    // @param _vote Vote selection: 0 -> none, 1 -> upvote, 2 -> downvote\n    function vote(uint _postId, uint8 _vote)\n        public\n    {\n        Post storage p = posts[_postId];\n        require(p.creationDate != 0, \"Post does not exist\");\n        require(p.voters[msg.sender] == Ballot.NONE, \"You already voted on this post\");\n\n        Ballot b = Ballot(_vote);\n        if (b == Ballot.UPVOTE) {\n            p.upvotes++;\n        } else {\n            p.downvotes++;\n        }\n        p.voters[msg.sender] = b;\n\n        emit Vote(_postId, msg.sender, _vote);\n    }\n\n    // @notice Determine if the sender can vote on a post\n    // @param _postId Id of the post\n    // @return bool that indicates if the sender can vote or not\n    function canVote(uint _postId)\n        public\n        view\n        returns (bool)\n    {\n        if(_postId > posts.length - 1) return false;\n\n        Post storage p = posts[_postId];    \n        return (p.voters[msg.sender] == Ballot.NONE);\n    }\n\n    // @notice Obtain vote for specific post\n    // @param _postId Id of the post\n    // @return uint that represents the vote: 0 -> none, 1 -> upvote, 2 -> downvote\n    function getVote(uint _postId)\n        public\n        view\n        returns (uint8)\n    {\n        Post storage p = posts[_postId];\n        return uint8(p.voters[msg.sender]);\n    }\n\n}", "debug": "keccac_1_+\n18569430475105882587588266137607568536673111973893317399460219858819262702947_+\n6*storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x847001050db40000007fffffffffffffffffffffffffffffffffffffffffe800\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0x1fffffffffffffffffffffffffffffffffffe00000001ffffffefdff7fff0\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_DReddit_4 + calldata_DReddit_4)) +\n32: 0xdff87fffffffffffffffffffdffffffc00000003fffffffc000037c7fbf30212\ncalldata_DReddit_0: 0xcf5ba53f00000000000000000000000000000000000000000000000000000000\ncalldatasize_DReddit: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `create(bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/38/0x255ee755f4b88350ec6ddea5d193b11634dc7b95.sol", "function": "create(bytes)", "lineno": 4, "title": "Integer Overflow ", "type": "Warning"}], "success": true}