{
  "contract": "0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a",
  "tool": "mythril",
  "start": 1563266062.5749729,
  "end": 1563266090.7849355,
  "duration": 28.209962606430054,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2809,
        "code": "amount;\n        em",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "withdrawTokens(address)",
        "lineno": 141,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 2809,
        "code": "amount;\n        em",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3001\n",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "withdrawTokens(address)",
        "lineno": 141,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3001,
        "code": "  balances_[addr] = amount;\n        emi",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "withdrawTokens(address)",
        "lineno": 141,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4967,
        "code": "       return ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_WEGEN_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WEGEN_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_WEGEN: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "burn(uint256)",
        "lineno": 19,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 5533,
        "code": "c >= ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xf5be733820a8f284ff83fbeabdf90ffe681005ee01a2a9f03f1333e1078c007c\ncalldata_WEGEN_32 + 36: 0xd8822bb1e12165d0e10bf8a4b0fc6fbe89efe164fa89a3e682e425a964003d23\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WEGEN_32_+_4: 0xc0edbbdae05a3290112206d5713049bd25fdfd777ae90755fad7a58544233fbb\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WEGEN_4: 0xd8822bb1e12165d0e10bf8a4b0fc6fbe89efe164fa89a3e682e425a964003d23\ncalldata_WEGEN_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WEGEN_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_WEGEN: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5546,
        "code": " return c;\n   ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9b6f802d9e4606141000d9119b8f7ffd8e0952049ed1e0300223e19fffe2003c\ncalldata_WEGEN_32 + 36: 0x362f5fa53cedcd604d71e5b4ef1b73dc89f8a902961b06625e7792d5fed2b421\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WEGEN_32_+_4: 0xe0ac9ff3f408a32ac331a586cf20f3ca6dfaa90a4e51091910881007f936e2b5\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WEGEN_4: 0x362f5fa53cedcd604d71e5b4ef1b73dc89f8a902961b06625e7792d5fed2b421\ncalldata_WEGEN_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_WEGEN_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_WEGEN: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_contracts/0x314dc48e17e904afd13927cb2a5cb7dc46d88a1a.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 25,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}