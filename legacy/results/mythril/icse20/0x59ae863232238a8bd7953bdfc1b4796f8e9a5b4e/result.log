{"error": null, "issues": [{"address": 679, "code": "x = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        balances[from] = balances[from].sub(_value).sub(_fee);\n        balances[_to] = balances[_to].add(_value);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Transfer(from, _to, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Submit a presigned approval\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _value uint256 The amount of tokens to allow.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, b", "debug": "calldata_TipToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TipToken_0: 0x1296830d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferPreSigned(bytes,address,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "transferPreSigned(bytes,address,uint256,uint256,uint256)", "lineno": 306, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1084, "code": "if (v != 27 && v != 28) {\n        return (address(0));\n      } else {\n        return ecrecover(hash, v, r, s);\n      }\n    }\n\n}\n\ncontract TipToken is ERC865Token, Ownable {\n    using SafeMath for uint256;\n\n    uint256 public constant TOTAL_SUPPLY = 10 ** 9;\n\n    string public constant name = \"Tip Token\";\n    string public constant symbol = \"TIP\";\n    uint8 public constant decimals = 18;\n\n    mapping (address => string) aliases;\n    mapping (string => address) addresses;\n\n    /**\n     * Constructor\n     */\n    constructor() public {\n        _totalSupply = TOTAL_SUPPLY * (10**uint256(decimals));\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n    /**\n     * Returns the available supple (total supply minus t", "debug": "calldata_TipToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TipToken_0: 0x19045a2500000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `recover(bytes32,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "recover(bytes32,bytes)", "lineno": 641, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1679, "code": "ddress(this), _spender, _value, _fee, _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        allowed[from][_spender] = _value;\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _value);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n        return true;\n    }\n\n    /**\n     * @notice Increase the amount of tokens that an owner allowed to a spender.\n     * @param _signature bytes The signature, issued by the owner.\n     * @param _spender address The address which will spend the funds.\n     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n     * @param _fee uint256 The amount of to", "debug": "calldata_TipToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TipToken_0: 0x617b390b00000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `approvePreSigned(bytes,address,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "approvePreSigned(bytes,address,uint256,uint256,uint256)", "lineno": 344, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1971, "debug": "calldata_TipToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TipToken_0: 0x6a293d0400000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAlias(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "setAlias(string)", "lineno": 712, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2206, "code": ", _nonce);\n        address from = recover(hashedTx, _signature);\n        require(from != address(0));\n\n        nonces[_signature] = true;\n\n        uint oldValue = allowed[from][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[from][_spender] = 0;\n        } else {\n            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n        }\n        balances[from] = balances[from].sub(_fee);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n\n        emit Approval(from, _spender, _subtractedValue);\n        emit Transfer(from, msg.sender, _fee);\n        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n        return true;\n    }\n\n    /**\n     * @notice Transfer tokens from one address to another\n     * @param _signature bytes The signature, issued by the spender.\n     * @param _from address The address which you want to send tokens from.\n     * @param _to address The address which you want to transfer to.\n     * @param _value uint256 The amount of tokens to be transferred.\n     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n", "debug": "calldata_TipToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TipToken_0: 0x8be5278300000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `decreaseApprovalPreSigned(bytes,address,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "decreaseApprovalPreSigned(bytes,address,uint256,uint256,uint256)", "lineno": 418, "title": "Integer Overflow ", "type": "Warning"}, {"address": 18876, "code": " a - b;\n    }\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_4,_256): 0x1\ncalldata_TipToken_0: 0x7ecc2b5600000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "availableSupply()", "lineno": 32, "title": "Exception state", "type": "Informational"}, {"address": 18894, "code": " retu", "debug": "calldata_TipToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TipToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TipToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\ncalldata_TipToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TipToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "transferFrom(address,address,uint256)", "lineno": 41, "title": "Integer Overflow ", "type": "Warning"}, {"address": 18907, "code": "\n}\n\n\ncontract ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TipToken_32 + 36: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TipToken_32_+_4: 0xd32ba62e013a1e544c40f8298f8c838ef0ca495e903244487f8ba1f8c2a013e7\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TipToken_4: 0x53632f08ddbb360427befb69cb0d577a76825c1eb02b4cefbf971939ae256117\ncalldata_TipToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TipToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "transferFrom(address,address,uint256)", "lineno": 42, "title": "Exception state", "type": "Informational"}, {"address": 18957, "code": "d by owner)\n     */\n    function availableSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n    }\n\n    /**\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    /**\n     * Don't accept ETH.\n     */\n    function () public payable {\n        revert();\n    }\n\n    /**\n     * Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n     * Sets the alias for the msg.sender's address.\n     * @param alias the alias to attach to an address\n     */\n    function setAlias(string alias) public {\n        aliases[msg.sender] = alias;\n        addresses[alias] = msg.sender;\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncalldata_TipToken_0: 0x6a293d0400000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAlias(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "setAlias(string)", "lineno": 672, "title": "Integer Overflow ", "type": "Warning"}, {"address": 18986, "code": "d by owner)\n     */\n    function availableSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n    }\n\n    /**\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    /**\n     * Don't accept ETH.\n     */\n    function () public payable {\n        revert();\n    }\n\n    /**\n     * Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n     * Sets the alias for the msg.sender's address.\n     * @param alias the alias to attach to an address\n     */\n    function setAlias(string alias) public {\n        aliases[msg.sender] = alias;\n        addresses[alias] = msg.sender;\n    }\n}", "debug": "calldata_TipToken_4 + calldata_TipToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_TipToken_0: 0x6a293d0400000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAlias(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "setAlias(string)", "lineno": 672, "title": "Integer Overflow ", "type": "Warning"}, {"address": 19000, "code": "d by owner)\n     */\n    function availableSupply() public view returns (uint256) {\n        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n    }\n\n    /**\n     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n     * from the token owner's account. The `spender` contract function\n     * `receiveApproval(...)` is then executed\n     */\n    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n    /**\n     * Don't accept ETH.\n     */\n    function () public payable {\n        revert();\n    }\n\n    /**\n     * Owner can transfer out any accidentally sent ERC20 tokens\n     */\n    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n        return ERC20(tokenAddress).transfer(owner, tokens);\n    }\n\n    /**\n     * Sets the alias for the msg.sender's address.\n     * @param alias the alias to attach to an address\n     */\n    function setAlias(string alias) public {\n        aliases[msg.sender] = alias;\n        addresses[alias] = msg.sender;\n    }\n}", "debug": "calldata_TipToken_4 + calldata_TipToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_TipToken_0: 0x6a293d0400000000000000000000000000000000000000000000000000000000\ncalldatasize_TipToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setAlias(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/5/0x59ae863232238a8bd7953bdfc1b4796f8e9a5b4e.sol", "function": "setAlias(string)", "lineno": 672, "title": "Integer Overflow ", "type": "Warning"}], "success": true}