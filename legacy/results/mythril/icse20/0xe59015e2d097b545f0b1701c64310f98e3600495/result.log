{"error": null, "issues": [{"address": 1504, "code": ") {\n        require(ms", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "fallback", "lineno": 509, "title": "Message call to external contract", "type": "Informational"}, {"address": 2270, "code": "sOpen = opn;\n        o", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "buyAlt(address,uint256,string)", "lineno": 548, "title": "Message call to external contract", "type": "Informational"}, {"address": 3109, "code": " }\n\n    // Private ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 575, "title": "Message call to external contract", "type": "Informational"}, {"address": 3109, "code": " }\n\n    // Private ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3915\nCall at address: 3594\nCall at address: 3915\nCall at address: 3594\nCall at address: 3594\nCall at address: 3417\nCall at address: 3417\n", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 575, "title": "Multiple Calls", "type": "Information"}, {"address": 3109, "code": " }\n\n    // Private ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function finalize(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 575, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3417, "code": "etTokensAmount(etherAmount);\n        req", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3594\nCall at address: 3417\n", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 584, "title": "Multiple Calls", "type": "Information"}, {"address": 3594, "code": "eturn tokens;\n    }", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 587, "title": "Message call to external contract", "type": "Informational"}, {"address": 3594, "code": "eturn tokens;\n    }", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3915\n", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 587, "title": "Multiple Calls", "type": "Information"}, {"address": 3594, "code": "eturn tokens;\n    }", "debug": "", "description": "A possible transaction order independence vulnerability exists in function finalize(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 587, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3915, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 590, "title": "Message call to external contract", "type": "Informational"}, {"address": 3915, "debug": "", "description": "A possible transaction order independence vulnerability exists in function finalize(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 590, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4386, "code": "ens);\n    }\n\n    function ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ncalldata_TokenSale_0: 0x8526492f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\nstorage_1: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "getTokensAmount(uint256)", "lineno": 494, "title": "Exception state", "type": "Informational"}, {"address": 5015, "code": "        }\n        }", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalizePresale()", "lineno": 567, "title": "Message call to external contract", "type": "Informational"}, {"address": 5015, "code": "        }\n        }", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 5187\n", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalizePresale()", "lineno": 567, "title": "Multiple Calls", "type": "Information"}, {"address": 5015, "code": "        }\n        }", "debug": "", "description": "A possible transaction order independence vulnerability exists in function finalizePresale(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalizePresale()", "lineno": 567, "title": "Transaction order dependence", "type": "Warning"}, {"address": 5187, "code": "e unsold capacity moves to t", "debug": "", "description": "A possible transaction order independence vulnerability exists in function finalizePresale(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalizePresale()", "lineno": 571, "title": "Transaction order dependence", "type": "Warning"}, {"address": 6026, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "buyAlt(address,uint256,string)", "lineno": 590, "title": "Message call to external contract", "type": "Informational"}, {"address": 6026, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2270\n", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "buyAlt(address,uint256,string)", "lineno": 590, "title": "Multiple Calls", "type": "Information"}, {"address": 6162, "code": "b) internal co", "debug": "The exception is triggered under the following conditions:\n\nretval_3109: 0x400000\nretval_3594: 0xe4e1e0\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\ncalldata_TokenSale_0: 0x4bb278f300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenSale: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/24/0xe59015e2d097b545f0b1701c64310f98e3600495.sol", "function": "finalize()", "lineno": 78, "title": "Exception state", "type": "Informational"}], "success": true}