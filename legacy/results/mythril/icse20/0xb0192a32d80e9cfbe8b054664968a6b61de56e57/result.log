{"error": null, "issues": [{"address": 1014, "code": "operator) {\n        return true;\n    }\n\n    return super.isApprovedForAll(owner, operator);\n  }\n}\n\ncontra", "debug": "calldata_TradeableERC721Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TradeableERC721Token_0: 0x30176e1300000000000000000000000000000000000000000000000000000000\ncalldatasize_TradeableERC721Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setBaseTokenURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xb0192a32d80e9cfbe8b054664968a6b61de56e57.sol", "function": "setBaseTokenURI(string)", "lineno": 926, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3011, "code": "6 tokenId) public view return", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/unique_chucks/42/0xb0192a32d80e9cfbe8b054664968a6b61de56e57.sol", "function": "approve(address,uint256)", "lineno": 402, "title": "State change after external call", "type": "Warning"}, {"address": 4976, "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/42/0xb0192a32d80e9cfbe8b054664968a6b61de56e57.sol", "function": "safeTransferFrom(address,address,uint256)", "lineno": 936, "title": "Message call to external contract", "type": "Informational"}, {"address": 9952, "code": "he next token ID\n    */\n  function _getNextTokenId() private view returns (uint256) {\n    return totalSupply().add(1);\n  }\n\n  function tokenURI(uint256 _tokenId) external view returns (string) {\n    return Strings.strConcat(\n        baseTokenURI,\n        Strings.uint2str(_tokenId)\n    );\n  }\n\n  /**\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    // Whitelist OpenSea proxy contract for easy trading.\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n    if (proxyRegistry.proxies(owner) == operator) {\n        return true;\n    }\n\n    return super.isApprovedForAll(owner, operator);\n  }\n}\n\ncontract ToonToken is TradeableERC721Token {\n  constructor() TradeableERC721Token(\"ToonToken\", \"Toon\", \"https://webcartoons-nl.herokuapp.com/toontoken/\", 0xa5409ec958c83c3f309868babaca7c86dcb077c1) public {  }\n}", "debug": "calldata_TradeableERC721Token_4 + calldata_TradeableERC721Token_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_11: 0x0\ncaller: 0x0\ncalldata_TradeableERC721Token_0: 0x30176e1300000000000000000000000000000000000000000000000000000000\ncalldatasize_TradeableERC721Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setBaseTokenURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xb0192a32d80e9cfbe8b054664968a6b61de56e57.sol", "function": "setBaseTokenURI(string)", "lineno": 900, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9966, "code": "he next token ID\n    */\n  function _getNextTokenId() private view returns (uint256) {\n    return totalSupply().add(1);\n  }\n\n  function tokenURI(uint256 _tokenId) external view returns (string) {\n    return Strings.strConcat(\n        baseTokenURI,\n        Strings.uint2str(_tokenId)\n    );\n  }\n\n  /**\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n   */\n  function isApprovedForAll(\n    address owner,\n    address operator\n  )\n    public\n    view\n    returns (bool)\n  {\n    // Whitelist OpenSea proxy contract for easy trading.\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n    if (proxyRegistry.proxies(owner) == operator) {\n        return true;\n    }\n\n    return super.isApprovedForAll(owner, operator);\n  }\n}\n\ncontract ToonToken is TradeableERC721Token {\n  constructor() TradeableERC721Token(\"ToonToken\", \"Toon\", \"https://webcartoons-nl.herokuapp.com/toontoken/\", 0xa5409ec958c83c3f309868babaca7c86dcb077c1) public {  }\n}", "debug": "calldata_TradeableERC721Token_4 + calldata_TradeableERC721Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_11: 0x0\ncaller: 0x0\ncalldata_TradeableERC721Token_0: 0x30176e1300000000000000000000000000000000000000000000000000000000\ncalldatasize_TradeableERC721Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setBaseTokenURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/42/0xb0192a32d80e9cfbe8b054664968a6b61de56e57.sol", "function": "setBaseTokenURI(string)", "lineno": 900, "title": "Integer Overflow ", "type": "Warning"}], "success": true}