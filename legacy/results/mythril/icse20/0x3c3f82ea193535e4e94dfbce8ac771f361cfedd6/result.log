{"error": null, "issues": [{"address": 236, "code": "re of the same length\n    require(_from.length == _to.length &&\n            _to.length ==_values.length &&\n            _values.length == _fees.length &&\n            _fees.length == _nonces.length &&\n            _nonces.length == _v.length &&\n            _v.length == _r.length &&\n            _r.length == _s.length);\n\n    for(uint i; i < _from.length; i++) {\n      transferPreSigned(_from[i],\n                        _to[i],\n                        _values[i],\n                        _fees[i],\n                        _nonces[i],\n                        _v[i],\n                        _r[i],\n                        _s[i]);\n    }\n\n    return true;\n  }\n\n  /**\n  * @dev Calculates transfer hash.\n  */\n  function calculateHash(address _from, address _to, uint256 _value, uint256 _fee, uint256 _nonce) public view returns (bytes32) {\n    return keccak256(abi.encodePacked(uint256(0), address(this), _from, _to, _value, _fee, _nonce));\n  }\n\n  /**\n  * @dev Validates the signature\n  */\n  function isValidSignature(address _signer, bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) public pure returns (bool) {\n    return _signer == e", "debug": "calldata_SignedTransferToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SignedTransferToken_0: 0x1a2789e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SignedTransferToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferPreSignedBulk(address[],address[],uint256[],uint256[],uint256[],uint8[],bytes32[],bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x3c3f82ea193535e4e94dfbce8ac771f361cfedd6.sol", "function": "transferPreSignedBulk(address[],address[],uint256[],uint256[],uint256[],uint8[],bytes32[],bytes32[])", "lineno": 455, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4910, "code": "act PausableSignedTransferToken is SignedTransferToken, PausableToken {\n\n  function transferPreSigned(address _from,\n                             address _t", "debug": "", "description": "The return value of an external call is not checked. Note that execution continue even if the called contract throws.", "filename": "/unique_chucks/13/0x3c3f82ea193535e4e94dfbce8ac771f361cfedd6.sol", "function": "isValidSignature(address,bytes32,uint8,bytes32,bytes32)", "lineno": 509, "title": "Unchecked CALL return value", "type": "Informational"}, {"address": 7948, "code": "face.", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SignedTransferToken_4: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_SignedTransferToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_SignedTransferToken_0: 0xd73dd62300000000000000000000000000000000000000000000000000000000\ncalldatasize_SignedTransferToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `increaseApproval(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/13/0x3c3f82ea193535e4e94dfbce8ac771f361cfedd6.sol", "function": "increaseApproval(address,uint256)", "lineno": 92, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7961, "code": "ntract ERC20In", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SignedTransferToken_32 + 36: 0x1\ncalldata_SignedTransferToken_32 + 68: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SignedTransferToken_0: 0xe8f9566600000000000000000000000000000000000000000000000000000000\ncalldatasize_SignedTransferToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/13/0x3c3f82ea193535e4e94dfbce8ac771f361cfedd6.sol", "function": "transferPreSigned(address,address,uint256,uint256,uint256,uint8,bytes32,bytes32)", "lineno": 94, "title": "Exception state", "type": "Informational"}], "success": true}