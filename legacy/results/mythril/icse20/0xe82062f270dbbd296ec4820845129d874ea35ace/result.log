{"error": null, "issues": [{"address": 441, "code": ";\n\ncontract ERC20 ", "debug": "storage_0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenPoolList_0: 0xa3b0a4f00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenPoolList: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `add(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/29/0xe82062f270dbbd296ec4820845129d874ea35ace.sol", "function": "add(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 649, "code": ";\n    Added(x);\n  }\n\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenPoolList_4: 0x0\nstorage_0: 0x0\ncalldata_TokenPoolList_0: 0x80c9419e00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenPoolList: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe82062f270dbbd296ec4820845129d874ea35ace.sol", "function": "_function_0x80c9419e", "lineno": 101, "title": "Exception state", "type": "Informational"}, {"address": 724, "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenPoolList_4: 0x0\nstorage_0: 0x0\ncalldata_TokenPoolList_0: 0xb93f9b0a00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenPoolList: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/29/0xe82062f270dbbd296ec4820845129d874ea35ace.sol", "function": "getAddress(uint256)", "lineno": 112, "title": "Exception state", "type": "Informational"}], "success": true}