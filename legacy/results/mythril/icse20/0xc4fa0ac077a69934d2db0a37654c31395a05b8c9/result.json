{
  "contract": "0xc4fa0ac077a69934d2db0a37654c31395a05b8c9",
  "tool": "mythril",
  "start": 1563560290.356726,
  "end": 1563560338.453635,
  "duration": 48.096909046173096,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 2119,
        "code": "_ndx]];\n    }\n   ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_1: 0x0\ncalldata_SimplePHXExchange_0: 0xf45f52800000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getTknOfferor(uint256)",
        "lineno": 164,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2364,
        "code": " always 1 more th",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_1: 0x0\ncalldata_SimplePHXExchange_0: 0x213e609f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getTknOfferAmount(uint256)",
        "lineno": 172,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2511,
        "code": ".e. # of Wei Requ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_1: 0x0\ncalldata_SimplePHXExchange_0: 0x3c5b7d3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nextcodesize: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyTkn(uint256)",
        "lineno": 125,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2697,
        "code": "18\n        require(msg.value >= _purchasePrice);\n        require(phxC",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_1: 0x1\ncalldata_SimplePHXExchange_0: 0x3c5b7d3f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nstorage_0: 0x0\nextcodesize: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyTkn(uint256)",
        "lineno": 125,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 2979,
        "code": "fer(_purchasePrice);\n        _cancelTknOffer(_offeror);\n",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyTkn(uint256)",
        "lineno": 128,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2979,
        "code": "fer(_purchasePrice);\n        _cancelTknOffer(_offeror);\n",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3094\n",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyTkn(uint256)",
        "lineno": 128,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3147,
        "code": "  \n    function g",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_5: 0x0\ncalldata_SimplePHXExchange_0: 0x4bba863e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getEthOfferor(uint256)",
        "lineno": 182,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3218,
        "code": "\" address is a co",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_5: 0x0\ncalldata_SimplePHXExchange_0: 0x5416707c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getEthOfferAmount(uint256)",
        "lineno": 191,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3348,
        "code": "[_ndx]];\n    }\n  ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_1: 0x0\ncalldata_SimplePHXExchange_0: 0x681c2ad000000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getTknOfferPrice(uint256)",
        "lineno": 168,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 3798,
        "code": "     _cancelTknOffer(msg.sender);\n    }\n\n    function _can",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 85,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3942,
        "code": "ises Required = W",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_5: 0x0\ncalldata_SimplePHXExchange_0: 0x847dd67c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nextcodesize: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyEth(uint256)",
        "lineno": 135,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4128,
        "code": "require(phxCoin.transferFrom(msg.sender, _offeror, _purchasePrice));",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_5: 0x1\ncalldata_SimplePHXExchange_0: 0x847dd67c00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nstorage_0: 0x0\nextcodesize: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyEth(uint256)",
        "lineno": 136,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4384,
        "code": "EtherOffered[_offeror]);\n        _cancelEthOffer(_offeror)",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "buyEth(uint256)",
        "lineno": 137,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 4895,
        "code": ";\n\n/*\n*   Basic PH",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SimplePHXExchange_0: 0x8f1fdbb900000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nextcodesize: 0x0\n",
        "description": "A possible integer overflow exists in the function `offerEth(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "offerEth(uint256)",
        "lineno": 1,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 4996,
        "code": "f(tknAddrNdx[msg.sende",
        "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SimplePHXExchange_0: 0x8f1fdbb900000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nextcodesize: 0x0\n",
        "description": "A possible integer underflow exists in the function `offerEth(uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "offerEth(uint256)",
        "lineno": 83,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 5985,
        "code": " \n    // **\n    \n",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_SimplePHXExchange_4: 0x0\nstorage_5: 0x0\ncalldata_SimplePHXExchange_0: 0x9c4abe0600000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "getEthOfferPrice(uint256)",
        "lineno": 186,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6621,
        "code": "nt ndx = tknAddrNdx[_offeror];\n\n ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 92,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6688,
        "code": "f this isn't the only offer, resh",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 94,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 6774,
        "code": "dx;\n        tknOfferors.length = tk",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\nreturndatasize: 0x20\nretval_3798: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SimplePHXExchange_0: 0x6feef2bf00000000000000000000000000000000000000000000000000000000\ncalldatasize_SimplePHXExchange: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 97,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 6904,
        "code": "rs.length - 1]] = ndx;\n        tknOfferors.length = tk",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 97,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 7035,
        "code": "ength - 1;\n        delete tknAddrNdx[_offeror]; // !i",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 98,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 7716,
        "code": "{\n    \n    // ScaleFactor\n    // It needs to be possible to make PHX cost less than 1 Wei / Rise\n    // And vice-versa, make ETH cost less than 1 Rise / Wei\n    uint public ScaleFactor = 10 ** 18;  \n    \n    // ****  Maps for the Token-Seller Side of the Contract\n    // Array of offerors\n    address[] public tknOfferors;\n\tmapping(address => uint256) public tknAddrNdx;\n\n\t// Array between each address and their tokens offered and buy prices.\n\tmapping(address => uint256) public tknTokensOffered;\n\tmapping(address => uint256) public tknPricePerToken; // In qWeiPerRise (need to multiply by 10 ** 36 to get it to ETH / PHX)\n\n    // ****  Maps for the Token-Buyer Side of the Contract\n    // Array of offerors\n    address[] public ethOfferors;\n\tmapping(address => uint256) public ethAddrNdx;\n\n\t// Array between each address and their tokens offered and buy prices.\n\tmapping(address => uint256) public ethEtherOffered;\n\tmapping(address => uint256) public ethPricePerToken; // In qRisePerWei (need to multiply by 10 ** 36 to get it to PHX / ETH)\n    // ****\n\n    ERC20Token public phxCoin;\n\n    function SimplePHXExchange() public {\n        phxCoin = ERC20Token(0x14b759A158879B133710f4059d32565b4a66140C); // Initiates a PHX Coin !important -- Make sure this is the PHX contract!\n        tknOfferors.push(0x0); // This is because all IDs in tknAddrNdx will initialize to zero\n        ethOfferors.push(0x0); // This is because all IDs in ethAddrNdx will initialize to zero\n    }\n\n    function offerTkn(uint _tokensOffered, uint _tokenPrice) public {\n        require(_humanSender(msg.sender));\n        require(tknAddrNdx[msg.sender] == 0); // Make sure that this offeror has cancelled all previous offers\n        require(0 < _tokensOffered); // Make sure some number of tokens are offered\n        require(phxCoin.transferFrom(msg.sender, this, _tokensOffered)); // Require that transfer can be and is made\n        tknTokensOffered[msg.sender] = _tokensOffered;\n        tknPricePerToken[msg.sender] = _tokenPrice; // in qWeiPerRise\n        tknOfferors.push(msg.sender);\n        tknAddrNdx[msg.sender] = tknOfferors.length - 1;\n    }\n    \n    function offerEth(uint _tokenPrice) public payable {\n        require(_humanSender(msg.sender));\n        require(ethAddrNdx[msg.sender] == 0); // Make sure that this offeror has cancelled all previous offers\n        require(0 < msg.value); // Make sure some amount of eth is offered\n        ethEtherOffered[msg.sender]  = msg.value;\n        ethPricePerToken[msg.sender] = _tokenPrice; // in qRisesPerWei\n        ethOfferors.push(msg.sender);\n        ethAddrNdx[msg.sender] = ethOfferors.length - 1;\n    }\n\n    function cancelTknOffer() public {\n        if(tknAddrNdx[msg.sender] == 0) return; // No need to cancel non-existent offer\n        phxCoin.transfer(msg.sender, tknTokensOffered[msg.sender]); // Return the Tokens\n        _cancelTknOffer(msg.sender);\n    }\n\n    function _cancelTknOffer(address _offeror) internal {\n        delete tknTokensOffered[_offeror];\n        delete tknPricePerToken[_offeror];\n\n        uint ndx = tknAddrNdx[_offeror];\n\n        // If this isn't the only offer, reshuffle the array\n        // Moving the last entry to the middle of the list\n        tknOfferors[ndx] = tknOfferors[tknOfferors.length - 1];\n        tknAddrNdx[tknOfferors[tknOfferors.length - 1]] = ndx;\n        tknOfferors.length = tknOfferors.length - 1;\n        delete tknAddrNdx[_offeror]; // !important\n    }\n\n    function cancelEthOffer() public {\n        if(ethAddrNdx[msg.sender] == 0) return; // No need to cancel non-existent offer\n        msg.sender.transfer(ethEtherOffered[msg.sender]); // Return the Tokens\n        _cancelEthOffer(msg.sender);\n    }\n\n    function _cancelEthOffer(address _offeror) internal {\n        delete ethEtherOffered[_offeror];\n        delete ethPricePerToken[_offeror];\n        \n        uint ndx = ethAddrNdx[_offeror];\n\n        // If this isn't the only offer, reshuffle the array\n        // Moving the last entry to the middle of the list\n        ethOfferors[ndx] = ethOfferors[ethOfferors.length - 1];\n        ethAddrNdx[ethOfferors[ethOfferors.length - 1]] = ndx;\n        ethOfferors.length = ethOfferors.length - 1;\n        delete ethAddrNdx[_offeror]; // !important\n    }\n    \n    function buyTkn(uint _ndx) payable public {\n        require(_humanSender(msg.sender));\n        address _offeror = tknOfferors[_ndx];\n        uint _purchasePrice = tknTokensOffered[_offeror] * tknPricePerToken[_offeror] / ScaleFactor; // i.e. # of Wei Required = Rises * (qWei/Rise) / 10**18\n        require(msg.value >= _purchasePrice);\n        require(phxCoin.transfer(msg.sender, tknTokensOffered[_offeror])); // Successful transfer of tokens to purchaser\n        _offeror.transfer(_purchasePrice);\n        _cancelTknOffer(_offeror);\n    }\n    \n    function buyEth(uint _ndx) public {\n        require(_humanSender(msg.sender));\n        address _offeror = ethOfferors[_ndx];\n        uint _purchasePrice = ethEtherOffered[_offeror] * ethPricePerToken[_offeror] / ScaleFactor;  // i.e. # of Rises Required = Wei * (qTRs/Wei) / 10**18\n        require(phxCoin.transferFrom(msg.sender, _offeror, _purchasePrice)); // Successful transfer of tokens to offeror\n        msg.sender.transfer(ethEtherOffered[_offeror]);\n        _cancelEthOffer(_offeror);\n    }\n    \n    function updateTknPrice(uint _newPrice) public {\n        // Make sure that this offeror has an offer out there\n        require(tknTokensOffered[msg.sender] != 0); \n        tknPricePerToken[msg.sender] = _newPrice;\n    }\n    \n    function updateEthPrice(uint _newPrice) public {\n        // Make sure that this offeror has an offer out there\n        require(ethEtherOffered[msg.sender] != 0); \n        ethPricePerToken[msg.sender] = _newPrice;\n    }\n    \n    // Getter Functions\n    \n    function getNumTknOfferors() public constant returns (uint _numOfferors) {\n        return tknOfferors.length; // !important:  This is always 1 more than the number of actual offers\n    }\n    \n    function getTknOfferor(uint _ndx) public constant returns (address _offeror) {\n        return tknOfferors[_ndx];\n    }\n    \n    function getTknOfferPrice(uint _ndx) public constant returns (uint _tokenPrice) {\n        return tknPricePerToken[tknOfferors[_ndx]];\n    }\n    \n    function getTknOfferAmount(uint _ndx) public constant returns (uint _tokensOffered) {\n        return tknTokensOffered[tknOfferors[_ndx]];\n    }\n    \n    function getNumEthOfferors() public constant returns (uint _numOfferors) {\n        return ethOfferors.length; // !important:  This is always 1 more than the number of actual offers\n    }\n    \n    function getEthOfferor(uint _ndx) public constant returns (address _offeror) {\n        return ethOfferors[_ndx];\n    }\n    \n    function getEthOfferPrice(uint _ndx) public constant returns (uint _etherPrice) {\n        return ethPricePerToken[ethOfferors[_ndx]];\n    }\n    \n    function getEthOfferAmount(uint _ndx) public constant returns (uint _etherOffered) {\n        return ethEtherOffered[ethOfferors[_ndx]];\n    }\n    \n    // **\n    \n    // A Security Precaution -- Don't interact with contracts unless you\n    // Have a need to / desire to.\n    // Determine if the \"_from\" address is a contract\n    function _humanSender(address _from) private view returns (bool) {\n      uint codeLength;\n      assembly {\n          codeLength := extcodesize(_from)\n      }\n      return (codeLength == 0); // If this is \"true\" sender is most likely a Wallet\n    }\n}",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/17/0xc4fa0ac077a69934d2db0a37654c31395a05b8c9.sol",
        "function": "cancelTknOffer()",
        "lineno": 27,
        "title": "State change after external call",
        "type": "Warning"
      }
    ],
    "success": true
  }
}