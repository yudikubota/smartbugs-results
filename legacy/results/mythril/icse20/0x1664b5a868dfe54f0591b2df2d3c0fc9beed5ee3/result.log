{"error": null, "issues": [{"address": 1649, "code": ");\n  ", "debug": "storage_58612239108549098792174875956930637727137801981672359265585547298486206736878: 0xb2c81e3be60b809eebca250ae5f3958de8241f3c0942692d3cecd1fd00743211\ncallvalue: 0x93931c13e507cbbcbf74d9eee4fb920eeaef84aa5110428da2eddb017d5ebcdd\ncalldatasize_ldoh: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_contracts/0x1664b5a868dfe54f0591b2df2d3c0fc9beed5ee3.sol", "function": "fallback", "lineno": 569, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1662, "code": "allowance(addr", "debug": "The exception is triggered under the following conditions:\n\nstorage_58612239108549098792174875956930637727137801981672359265585547298486206736878: 0xc63a21246c99b000ea0030728005ea6909080a424a47ca48059be3c0ff803205\ncallvalue: 0xd2bd697b67b8b7eebcef8ebaf405ca6a0b728a06c347eda3d5dbebfeffbdb977\ncalldatasize_ldoh: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x1664b5a868dfe54f0591b2df2d3c0fc9beed5ee3.sol", "function": "fallback", "lineno": 570, "title": "Exception state", "type": "Informational"}, {"address": 1686, "code": "ken \t\t= 0xC39E626A04C5971D770e319760D79", "debug": "The exception is triggered under the following conditions:\n\ncalldatasize_ldoh: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ldoh_4 + 0: 0x0\nstorage_14: 0x0\ncalldata_ldoh_0: 0x1c019a5200000000000000000000000000000000000000000000000000000000\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_contracts/0x1664b5a868dfe54f0591b2df2d3c0fc9beed5ee3.sol", "function": "_function_0x1c019a52", "lineno": 125, "title": "Exception state", "type": "Informational"}], "success": true}