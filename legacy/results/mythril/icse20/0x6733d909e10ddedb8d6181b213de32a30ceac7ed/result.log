{"error": null, "issues": [{"address": 1005, "code": "tring tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() c", "debug": "calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 22, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1017, "code": "tring tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() c", "debug": "calldata_Token_4 + calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 22, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1026, "code": "tring tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() c", "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 22, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1032, "code": "tring tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() c", "debug": "calldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 22, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2039, "code": "s[_from] -= _amount;\n  ", "debug": "calldata_Token_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_Token_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "transferFrom(address,address,uint256)", "lineno": 64, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2914, "code": "           balances[msg", "debug": "calldata_Token_32 + 4: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_Token_4: 0xa7e6e147bc0ca40011bf9bbaadf7593cb8cc90b17cb7d73775f0d8eb1435e9c1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xb135d1e4a0020a903239033aa9b45a69384c906b52a71e0575829626809581fd\ncalldata_Token_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "transfer(address,uint256)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3323, "code": "         name = toke", "debug": "storage_3: 0x0\ncalldata_Token_4 + calldata_Token_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 27, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3716, "code": "ntract Token {\n    string public symbol = \"\";\n    string public name = \"\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\n    address owner = 0;\n    bool setupDone = false;\n   \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n \n    function Token(address adr) {\n        owner = adr;        \n    }\n   \n    function SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() constant returns (uint256 totalSupply) {        \n        return _totalSupply;\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3730, "code": "ntract Token {\n    string public symbol = \"\";\n    string public name = \"\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\n    address owner = 0;\n    bool setupDone = false;\n   \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n \n    function Token(address adr) {\n        owner = adr;        \n    }\n   \n    function SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() constant returns (uint256 totalSupply) {        \n        return _totalSupply;\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0xa7d18fd5703fddff6f5377fa44900dfb4a10ffffe39800000000000000000060\nstorage_3: 0x0\ncalldata_Token_4 + calldata_Token_4: 0x7fffffffffffffffffffffffffffffffffffffff3fffffffffffffffffffff41\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3747, "code": "ntract Token {\n    string public symbol = \"\";\n    string public name = \"\";\n    uint8 public constant decimals = 18;\n    uint256 _totalSupply = 0;\n    address owner = 0;\n    bool setupDone = false;\n   \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n    mapping(address => uint256) balances;\n \n    mapping(address => mapping (address => uint256)) allowed;\n \n    function Token(address adr) {\n        owner = adr;        \n    }\n   \n    function SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply)\n    {\n        if (msg.sender == owner && setupDone == false)\n        {\n            symbol = tokenSymbol;\n            name = tokenName;\n            _totalSupply = tokenSupply * 1000000000000000000;\n            balances[owner] = _totalSupply;\n            setupDone = true;\n        }\n    }\n \n    function totalSupply() constant returns (uint256 totalSupply) {        \n        return _totalSupply;\n    }\n \n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n \n    function transfer(address _to, uint256 _amount) returns (bool success) {\n        if (balances[msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(msg.sender, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) returns (bool success) {\n        if (balances[_from] >= _amount\n            && allowed[_from][msg.sender] >= _amount\n            && _amount > 0\n            && balances[_to] + _amount > balances[_to]) {\n            balances[_from] -= _amount;\n            allowed[_from][msg.sender] -= _amount;\n            balances[_to] += _amount;\n            Transfer(_from, _to, _amount);\n            return true;\n        } else {\n            return false;\n        }\n    }\n \n    function approve(address _spender, uint256 _amount) returns (bool success) {\n        allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n \n    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}", "debug": "mem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 + calldata_Token_4 + calldata_Token_4)): 0x28\nstorage_3: 0x0\ncalldata_Token_4 + calldata_Token_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee1\ncaller: 0x0\ncalldata_Token_0: 0xb6d2a9b900000000000000000000000000000000000000000000000000000000\ncalldatasize_Token: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `SetupToken(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/1/0x6733d909e10ddedb8d6181b213de32a30ceac7ed.sol", "function": "SetupToken(string,string,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}