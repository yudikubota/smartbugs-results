{"error": null, "issues": [{"address": 552, "code": "  }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        c", "debug": "calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 311, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1421, "code": "ansactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n  ", "debug": "calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigWallet_0: 0x9119e5fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransactionWithSignatures(address,uint256,bytes,uint256,uint8[],bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransactionWithSignatures(address,uint256,bytes,uint256,uint8[],bytes32[])", "lineno": 319, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1937, "code": "(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n            ", "debug": "calldata_MultiSigWallet_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MultiSigWallet_0: 0xfbc6d0ff00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `confirmTransactionWithSignatures(bytes32,uint8[],bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "confirmTransactionWithSignatures(bytes32,uint8[],bytes32[])", "lineno": 344, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2222, "code": "ctionHash)\n    {\n        transactionHash = addT", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 316, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2231, "code": "ctionHash)\n    {\n        transactionHash = addT", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 316, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2237, "code": "ctionHash)\n    {\n        transactionHash = addT", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff41\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 316, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2544, "code": "       OwnerRemov", "debug": "storage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "removeOwner(address)", "lineno": 273, "title": "Integer Underflow", "type": "Warning"}, {"address": 2588, "code": "nction up", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "removeOwner(address)", "lineno": 276, "title": "Exception state", "type": "Informational"}, {"address": 4327, "code": ";\n\ncontract ERC20I", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0x0\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "addOwner(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6534, "code": "                executed: false\n     ", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 297, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6919, "code": "ission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n ", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x80\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 300, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6987, "code": ";\n\ncontract ERC20I", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xfe300e18c158ec412f5c4ede49124210c0840a26d60f2007ff5ff3ffff7ffd4e\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xdd83f7f8af5940bbbafeca9a46defb91bd4a9c9c8467e400400300002000f0c5\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7994, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "storage_3: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe2000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "removeOwner(address)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7996, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "storage_3: 0x7ffff9f100000000000000000000000000000000000000000000000000000000\ncalldata_MultiSigWallet_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MultiSigWallet_4: 0xff00\ncaller: 0x0\ncalldata_MultiSigWallet_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "removeOwner(address)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8067, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x60\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8096, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x1f\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0x9119e5fb00000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransactionWithSignatures(address,uint256,bytes,uint256,uint8[],bytes32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransactionWithSignatures(address,uint256,bytes,uint256,uint8[],bytes32[])", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8110, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x80\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8127, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x25\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8132, "code": " Submission(bytes32 transactionHash);\n    event Execution(bytes32 transactionHash);\n    event Deposit(address sender, uint value);\n    event OwnerAddition(address owner);\n    event OwnerRemoval(address owner);\n    event RequiredUpdate(uint required);\n    event CoinCreation(address coin);\n\n    mapping (bytes32 => Transaction) public transactions;\n    mapping (bytes32 => mapping (address => bool)) public confirmations;\n    mapping (address => bool) public isOwner;\n    address[] owners;\n    bytes32[] transactionList;\n    uint public required;\n\n    struct Transaction {\n        address destination;\n        uint value;\n        bytes data;\n        uint nonce;\n        bool executed;\n    }\n\n    modifier onlyWallet() {\n        if (msg.sender != address(this))\n            revert();\n        _;\n    }\n\n    modifier signaturesFromOwners(bytes32 transactionHash, uint8[] v, bytes32[] rs) {\n        for (uint i=0; i<v.length; i++)\n            if (!isOwner[ecrecover(transactionHash, v[i], rs[i], rs[v.length + i])])\n                revert();\n        _;\n    }\n\n    modifier ownerDoesNotExist(address owner) {\n        if (isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier ownerExists(address owner) {\n        if (!isOwner[owner])\n            revert();\n        _;\n    }\n\n    modifier confirmed(bytes32 transactionHash, address owner) {\n        if (!confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notConfirmed(bytes32 transactionHash, address owner) {\n        if (confirmations[transactionHash][owner])\n            revert();\n        _;\n    }\n\n    modifier notExecuted(bytes32 transactionHash) {\n        if (transactions[transactionHash].executed)\n            revert();\n        _;\n    }\n\n    modifier notNull(address destination) {\n        if (destination == 0)\n            revert();\n        _;\n    }\n\n    modifier validRequired(uint _ownerCount, uint _required) {\n        if (   _required > _ownerCount\n            || _required == 0\n            || _ownerCount == 0)\n            revert();\n        _;\n    }\n\n    function addOwner(address owner)\n        external\n        onlyWallet\n        ownerDoesNotExist(owner)\n    {\n        isOwner[owner] = true;\n        owners.push(owner);\n        OwnerAddition(owner);\n    }\n\n    function removeOwner(address owner)\n        external\n        onlyWallet\n        ownerExists(owner)\n    {\n        isOwner[owner] = false;\n        for (uint i=0; i<owners.length - 1; i++)\n            if (owners[i] == owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n        if (required > owners.length)\n            updateRequired(owners.length);\n        OwnerRemoval(owner);\n    }\n\n    function updateRequired(uint _required)\n        public\n        onlyWallet\n        validRequired(owners.length, _required)\n    {\n        required = _required;\n        RequiredUpdate(_required);\n    }\n\n    function addTransaction(address destination, uint value, bytes data, uint nonce)\n        private\n        notNull(destination)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = sha3(destination, value, data, nonce);\n        if (transactions[transactionHash].destination == 0) {\n            transactions[transactionHash] = Transaction({\n                destination: destination,\n                value: value,\n                data: data,\n                nonce: nonce,\n                executed: false\n            });\n            transactionList.push(transactionHash);\n            Submission(transactionHash);\n        }\n    }\n\n    function submitTransaction(address destination, uint value, bytes data, uint nonce)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransaction(transactionHash);\n    }\n\n    function submitTransactionWithSignatures(address destination, uint value, bytes data, uint nonce, uint8[] v, bytes32[] rs)\n        external\n        ownerExists(msg.sender)\n        returns (bytes32 transactionHash)\n    {\n        transactionHash = addTransaction(destination, value, data, nonce);\n        confirmTransactionWithSignatures(transactionHash, v, rs);\n    }\n\n    function addConfirmation(bytes32 transactionHash, address owner)\n        private\n        notConfirmed(transactionHash, owner)\n    {\n        confirmations[transactionHash][owner] = true;\n        Confirmation(owner, transactionHash);\n    }\n\n    function confirmTransaction(bytes32 transactionHash)\n        public\n        ownerExists(msg.sender)\n    {\n        addConfirmation(transactionHash, msg.sender);\n        executeTransaction(transactionHash);\n    }\n\n    function confirmTransactionWithSignatures(bytes32 transactionHash, uint8[] v, bytes32[] rs)\n        public\n        signaturesFromOwners(transactionHash, v, rs)\n    {\n        for (uint i=0; i<v.length; i++)\n            addConfirmation(transactionHash, ecrecover(transactionHash, v[i], rs[i], rs[i + v.length]));\n        executeTransaction(transactionHash);\n    }\n\n    function executeTransaction(bytes32 transactionHash)\n        public\n        notExecuted(transactionHash)\n    {\n        if (isConfirmed(transactionHash)) {\n            Transaction storage txn = transactions[transactionHash]; //\n            txn.executed = true;\n            if (!txn.destination.call.value(txn.value)(txn.data))\n                revert();\n            Execution(transactionHash);\n        }\n    }\n\n    function revokeConfirmation(bytes32 transactionHash)\n        external\n        ownerExists(msg.sender)\n        confirmed(transactionHash, msg.sender)\n        notExecuted(transactionHash)\n    {\n        confirmations[transactionHash][msg.sender] = false;\n        Revocation(msg.sender, transactionHash);\n    }\n\n    function MultiSigWallet(address[] _owners, uint _required)\n        validRequired(_owners.length, _required)\n    {\n        for (uint i=0; i<_owners.length; i++)\n            isOwner[_owners[i]] = true;\n        owners = _owners;\n        required = _required;\n    }\n\n    function()\n        payable\n    {\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n\n    function isConfirmed(bytes32 transactionHash)\n        public\n        constant\n        returns (bool)\n    {\n        uint count = 0;\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n    }\n\n    function confirmationCount(bytes32 transactionHash)\n        external\n        constant\n        returns (uint count)\n    {\n        for (uint i=0; i<owners.length; i++)\n            if (confirmations[transactionHash][owners[i]])\n                count += 1;\n    }\n\n    function filterTransactions(bool isPending)\n        private\n        constant\n        returns (bytes32[] _transactionList)\n    {\n        bytes32[] memory _transactionListTemp = new bytes32[](transactionList.length);\n        uint count = 0;\n        for (uint i=0; i<transactionList.length; i++)\n            if (   isPending && !transactions[transactionList[i]].executed\n                || !isPending && transactions[transactionList[i]].executed)\n            {\n                _transactionListTemp[count] = transactionList[i];\n                count += 1;\n            }\n        _transactionList = new bytes32[](count);\n        for (i=0; i<count; i++)\n            if (_transactionListTemp[i] > 0)\n                _transactionList[i] = _transactionListTemp[i];\n    }\n\n    function getPendingTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(true);\n    }\n\n    function getExecutedTransactions()\n        external\n        constant\n        returns (bytes32[])\n    {\n        return filterTransactions(false);\n    }\n    \n    function createCoin()\n        external\n        onlyWallet\n    {\n        CoinCreation(new DatCoin());\n    }\n}", "debug": "calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36: 0x40\nkeccac_2_+\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_MultiSigWallet_4 + calldata_MultiSigWallet_32 + 36)) +\n64: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128_+\n32_+\n32*\nConcat(0,\n_______Extract(255,\n_______________5,\n_______________31_+\n_______________calldata_MultiSigWallet_4_+_calldata_MultiSigWallet_32_+_36))): 0x0\ncalldata_MultiSigWallet_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_MultiSigWallet_0: 0xd59b56400000000000000000000000000000000000000000000000000000000\ncalldatasize_MultiSigWallet: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `submitTransaction(address,uint256,bytes,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/25/0xbf6008bd7ac150e50fbb4efe6aa6af5ae47362b9.sol", "function": "submitTransaction(address,uint256,bytes,uint256)", "lineno": 169, "title": "Integer Overflow ", "type": "Warning"}], "success": true}