{
  "contract": "0xa549ef3164556b3fdba16680798032b993c2325b",
  "tool": "mythril",
  "start": 1563608107.4031165,
  "end": 1563608450.0660782,
  "duration": 342.6629617214203,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 788,
        "code": "    onlyOwner\n    {\n        require(!configured);\n        require(bytes(_symbol).length > 0);\n        require(bytes(_name).length > 0);\n        require(_decimals > 0 && _decimals <= 32);\n\n        symbol = _symbol;\n        name = _name;\n        description = _description;\n        decimals = _decimals;\n        source = _source;\n        proof = _proof;\n        totalSupply = _totalSupply;\n        configured = true;\n\n        balances[owner] = _totalSupply;\n\n        SourceChanged(_source, _proof, _totalSupply);\n    }\n\n    function changeSource(string newSource, string newProof, uint256 newTotalSupply) onlyOwner {\n        uint256 prevBalance = balances[owner];\n\n        if (newTotalSupply < totalSupply) {\n            uint256 decrease = totalSupply.sub(newTotalSu",
        "debug": "calldata_VeTokenizedAsset_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VeTokenizedAsset_0: 0x415efb1500000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setup(string,string,string,uint256,string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "setup(string,string,string,uint256,string,string,uint256)",
        "lineno": 230,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1483,
        "code": "           balances[owner] = prevBalance.sub(decrease); // throws when balance is insufficient\n        } else if (newTotalSupply > totalSupply) {\n            uint256 increase = newTotalSupply.sub(totalSupply);\n            balances[owner] = prevBalance.add(increase);\n        }\n\n        source = newSource;\n        proof = newProof;\n        totalSupply = newTotalSupply;\n\n        SourceChanged(newSource, newProof, newTotalSupply);\n    }\n\n    function mint(uint256 amount) public onlyOwner {\n        require(amount > 0);\n\n        totalSupply = totalSupply.add(amount);\n        balances[owner] = balances[owner].add(amount);\n\n        SupplyChanged(totalSupply);\n    }\n\n    function burn(uint256 amount) p",
        "debug": "calldata_VeTokenizedAsset_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSource(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 256,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9267,
        "code": "   return a - ",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x90529f3cb42002e8b0cc3fdfff7cd702a5df52a482090211f05bc64868bcfffe\ncalldata_VeTokenizedAsset_32 + 36: 0x814020a400006aa2893a20155d6fe954322b9860414d0ee0189c60868bc003d\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0x883e9d32741ffc3e88389ddea9a5d86d62bc991e7df43123eed200400000ffc0\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 19,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9285,
        "code": " a);\n",
        "debug": "storage_10: 0x8000000000000000000000000000000000000000000\ncalldata_VeTokenizedAsset_32 + 36: 0x7fffffffffffffffffff87fffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0xfffffdefffedffb45a0000000000000000000000000000000000000000000001\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSource(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 24,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9298,
        "code": "urn c;\n  }\n}\n\n",
        "debug": "The exception is triggered under the following conditions:\n\nstorage_10: 0x0\ncalldata_VeTokenizedAsset_32 + 36: 0xfffffffffffffffffff7ffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_3,_256): 0x7fffffffffffffffffffff000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 25,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 9377,
        "code": "tring public name;\n    string public description;\n    uint256 public decimals;\n    string public source;\n    string public proof;\n    uint256 public totalSupply;\n\n    //--- Construction\n\n    function VeTokenizedAsset() {\n        // asset should be parametrized using `setup()` function\n    }\n\n    //--- Events\n\n    event SourceChanged(string newSource, string newProof, uint256 newTotalSupply);\n    event SupplyChanged(uint256 newTotalSupply);\n\n    //--- Public mutable functions\n\n    function setup(\n        string _symbol,\n        string _name,\n        string _description,\n        uint256 _decimals,\n        string _source,\n        string _proof,\n        uint256 _totalSupply\n    )\n        public\n        onlyOwner\n    {\n        require(!configured);\n        require(bytes(_symbol).length > 0);\n        require(bytes(_name).length > 0);\n        require(_decimals > 0 && _decimals <= 32);\n\n        symbol = _symbol;\n        name = _name;\n        description = _description;\n        decimals = _decimals;\n        source = _source;\n        proof = _proof;\n        totalSupply = _totalSupply;\n        configured = true;\n\n        balances[owner] = _totalSupply;\n\n        SourceChanged(_source, _proof, _totalSupply);\n    }\n\n    function changeSource(string newSource, string newProof, uint256 newTotalSupply) onlyOwner {\n        uint256 prevBalance = balances[owner];\n\n        if (newTotalSupply < totalSupply) {\n            uint256 decrease = totalSupply.sub(newTotalSupply);\n            balances[owner] = prevBalance.sub(decrease); // throws when balance is insufficient\n        } else if (newTotalSupply > totalSupply) {\n            uint256 increase = newTotalSupply.sub(totalSupply);\n            balances[owner] = prevBalance.add(increase);\n        }\n\n        source = newSource;\n        proof = newProof;\n        totalSupply = newTotalSupply;\n\n        SourceChanged(newSource, newProof, newTotalSupply);\n    }\n\n    function mint(uint256 amount) public onlyOwner {\n        require(amount > 0);\n\n        totalSupply = totalSupply.add(amount);\n        balances[owner] = balances[owner].add(amount);\n\n        SupplyChanged(totalSupply);\n    }\n\n    function burn(uint256 amount) public onlyOwner {\n        require(amount > 0);\n        require(amount <= balances[owner]);\n\n        totalSupply = totalSupply.sub(amount);\n        balances[owner] = balances[owner].sub(amount); // throws when balance is insufficient\n\n        SupplyChanged(totalSupply);\n    }\n}",
        "debug": "storage_10: 0x20000000000000000000000040000000000002000000\ncalldata_VeTokenizedAsset_4 + calldata_VeTokenizedAsset_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_VeTokenizedAsset_32 + 36: 0x20000000000000000000000040000000000002000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSource(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 200,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 9391,
        "code": "tring public name;\n    string public description;\n    uint256 public decimals;\n    string public source;\n    string public proof;\n    uint256 public totalSupply;\n\n    //--- Construction\n\n    function VeTokenizedAsset() {\n        // asset should be parametrized using `setup()` function\n    }\n\n    //--- Events\n\n    event SourceChanged(string newSource, string newProof, uint256 newTotalSupply);\n    event SupplyChanged(uint256 newTotalSupply);\n\n    //--- Public mutable functions\n\n    function setup(\n        string _symbol,\n        string _name,\n        string _description,\n        uint256 _decimals,\n        string _source,\n        string _proof,\n        uint256 _totalSupply\n    )\n        public\n        onlyOwner\n    {\n        require(!configured);\n        require(bytes(_symbol).length > 0);\n        require(bytes(_name).length > 0);\n        require(_decimals > 0 && _decimals <= 32);\n\n        symbol = _symbol;\n        name = _name;\n        description = _description;\n        decimals = _decimals;\n        source = _source;\n        proof = _proof;\n        totalSupply = _totalSupply;\n        configured = true;\n\n        balances[owner] = _totalSupply;\n\n        SourceChanged(_source, _proof, _totalSupply);\n    }\n\n    function changeSource(string newSource, string newProof, uint256 newTotalSupply) onlyOwner {\n        uint256 prevBalance = balances[owner];\n\n        if (newTotalSupply < totalSupply) {\n            uint256 decrease = totalSupply.sub(newTotalSupply);\n            balances[owner] = prevBalance.sub(decrease); // throws when balance is insufficient\n        } else if (newTotalSupply > totalSupply) {\n            uint256 increase = newTotalSupply.sub(totalSupply);\n            balances[owner] = prevBalance.add(increase);\n        }\n\n        source = newSource;\n        proof = newProof;\n        totalSupply = newTotalSupply;\n\n        SourceChanged(newSource, newProof, newTotalSupply);\n    }\n\n    function mint(uint256 amount) public onlyOwner {\n        require(amount > 0);\n\n        totalSupply = totalSupply.add(amount);\n        balances[owner] = balances[owner].add(amount);\n\n        SupplyChanged(totalSupply);\n    }\n\n    function burn(uint256 amount) public onlyOwner {\n        require(amount > 0);\n        require(amount <= balances[owner]);\n\n        totalSupply = totalSupply.sub(amount);\n        balances[owner] = balances[owner].sub(amount); // throws when balance is insufficient\n\n        SupplyChanged(totalSupply);\n    }\n}",
        "debug": "storage_10: 0x20000000000000000000000000\ncalldata_VeTokenizedAsset_4 + calldata_VeTokenizedAsset_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60\ncalldata_VeTokenizedAsset_32 + 36: 0x20000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_VeTokenizedAsset_0: 0x6ef958df00000000000000000000000000000000000000000000000000000000\ncalldatasize_VeTokenizedAsset: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `changeSource(string,string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/22/0xa549ef3164556b3fdba16680798032b993c2325b.sol",
        "function": "changeSource(string,string,uint256)",
        "lineno": 200,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}