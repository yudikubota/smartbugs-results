{
  "contract": "0x405b15a78a968607529aaa1f482e642883809496",
  "tool": "mythril",
  "start": 1563535848.1776683,
  "end": 1563535883.046621,
  "duration": 34.86895275115967,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 245,
        "code": "s, uint256[] values)\n    onlyOwner\n    returns (uint256) {\n        uint256 i = 0;\n        while (i < dests.length) {\n           ERC20(_tokenAddr).transfer(dests[i], values[i]);\n           i += 1;\n        }\n        return(i);\n    }\n}",
        "debug": "calldata_urunitairdropper_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_urunitairdropper_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_urunitairdropper: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `multisend(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/16/0x405b15a78a968607529aaa1f482e642883809496.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 54,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 677,
        "code": ";\n    }\n}",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_urunitairdropper_4 + calldata_urunitairdropper_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_urunitairdropper_0: 0xad8733ca00000000000000000000000000000000000000000000000000000000\ncalldatasize_urunitairdropper: 0x4\nmem_128 +\n32 +\n32*\ncalldata_urunitairdropper_4 + calldata_urunitairdropper_32 + 4: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/16/0x405b15a78a968607529aaa1f482e642883809496.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 62,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 824,
        "code": "  i += 1;\n        }\n        return(i);\n    }\n}",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/16/0x405b15a78a968607529aaa1f482e642883809496.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 60,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 824,
        "code": "  i += 1;\n        }\n        return(i);\n    }\n}",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 824\nCall at address: 824\n",
        "filename": "/unique_chucks/16/0x405b15a78a968607529aaa1f482e642883809496.sol",
        "function": "multisend(address,address[],uint256[])",
        "lineno": 60,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}