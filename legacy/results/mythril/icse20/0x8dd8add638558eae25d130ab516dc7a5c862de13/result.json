{
  "contract": "0x8dd8add638558eae25d130ab516dc7a5c862de13",
  "tool": "mythril",
  "start": 1563598949.1563487,
  "end": 1563598990.5501332,
  "duration": 41.393784523010254,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 123,
        "code": " transfer_kongtou(address _token, address[] _dsts, uint256[] _values) \n    public\n    payable\n   {\n        ERC20Token token = ERC20Token(_token);\n        for (uint256 i = 0; i < _dsts.length; i++) {\n            token.transferFrom(msg.sender, _dsts[i], _values[i]);\n        }\n   }\n\n\n}",
        "debug": "calldata_HSN_kongtou6_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_HSN_kongtou6_0: 0xa41fbd7000000000000000000000000000000000000000000000000000000000\ncalldatasize_HSN_kongtou6: 0x4\n",
        "description": "A possible integer overflow exists in the function `transfer_kongtou(address,address[],uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0x8dd8add638558eae25d130ab516dc7a5c862de13.sol",
        "function": "transfer_kongtou(address,address[],uint256[])",
        "lineno": 9,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 344,
        "code": "       }\n ",
        "debug": "The exception is triggered under the following conditions:\n\ncalldata_HSN_kongtou6_4 + calldata_HSN_kongtou6_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_HSN_kongtou6_0: 0xa41fbd7000000000000000000000000000000000000000000000000000000000\ncalldatasize_HSN_kongtou6: 0x4\nmem_128 +\n32 +\n32*calldata_HSN_kongtou6_4 + calldata_HSN_kongtou6_32 + 4: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/20/0x8dd8add638558eae25d130ab516dc7a5c862de13.sol",
        "function": "transfer_kongtou(address,address[],uint256[])",
        "lineno": 16,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 542,
        "code": "From(msg.sender, _dsts[i], _values[i]);\n        }\n  ",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0x8dd8add638558eae25d130ab516dc7a5c862de13.sol",
        "function": "transfer_kongtou(address,address[],uint256[])",
        "lineno": 15,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 542,
        "code": "From(msg.sender, _dsts[i], _values[i]);\n        }\n  ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 542\nCall at address: 542\n",
        "filename": "/unique_chucks/20/0x8dd8add638558eae25d130ab516dc7a5c862de13.sol",
        "function": "transfer_kongtou(address,address[],uint256[])",
        "lineno": 15,
        "title": "Multiple Calls",
        "type": "Information"
      }
    ],
    "success": true
  }
}