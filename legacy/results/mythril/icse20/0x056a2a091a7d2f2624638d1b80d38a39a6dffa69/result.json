{
  "contract": "0x056a2a091a7d2f2624638d1b80d38a39a6dffa69",
  "tool": "mythril",
  "start": 1563810118.2775793,
  "end": 1563810349.994266,
  "duration": 231.71668672561646,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1417,
        "code": "ecimals);\n\t\treturn true;\n\n\t}\n\n\tfunction withdrawnTokens(address[] _tokens, address _to) public onlyOwner returns (bool){\n\n\t\tfor(uint256 i = 0; i < _tokens.length; i++){\n\n\t\t\taddress token = _tokens[i];\n\t\t\tuint256 balance = ERC20Interface(token).balanc",
        "debug": "calldata_SAFEToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SAFEToken_0: 0xaa3435c000000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "setTokenInformation(string,string,uint8)",
        "lineno": 220,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1629,
        "code": "his);\n\t\t\tif(balance != 0) ERC20Interface(token).transfer(_to, balance);\n\n\t\t}\n\n\t\treturn true;\n\t\n\t}\n\n\tfunction isError(uint8 _error) private returns (bool){\n\n\t\tError(msg.sender, _error);\n\t\treturn false;\n\n\t}\n\n}",
        "debug": "calldata_SAFEToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SAFEToken_0: 0xd8f9659b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `withdrawnTokens(address[],address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "withdrawnTokens(address[],address)",
        "lineno": 230,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3106,
        "code": "(_from, _to, _value);\n\t",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SAFEToken_32_+_4: 0xc050fffff320c00020003d81af848540000000000000040000110001bd062022\ncalldata_SAFEToken_32 + 36: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SAFEToken_4: 0xfe51000008ce80008001c1d33616877ffffffffffffff7ffffe10000398d50ac\nstorage_2: 0x0\ncalldata_SAFEToken_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 136,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5094,
        "code": "er) public view returns",
        "debug": "calldata_SAFEToken_32 + 4: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SAFEToken_4: 0x9c9efb7ae5acd378025256a3945f5859076e809243093d9ecae2636c9fd28979\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xc290137095b13347e55005a6dc184559e0489f1233480050d0fb4bba17d34179\ncalldata_SAFEToken_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_2: 0x0\ncalldata_SAFEToken_0: 0xa9059cbb00000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transfer(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "transfer(address,uint256)",
        "lineno": 121,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 5964,
        "code": "lse;\n\n\t}\n\n}",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "withdrawnTokens(address[],address)",
        "lineno": 242,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 7277,
        "code": "ddress indexed _from, address indexed _to, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\tevent MintingAgentChanged(address _addr, bool _state);\n\tevent Mint(address indexed _to, uint256 _value);\n\tevent MintFinished();\n\tevent UpdatedTokenInformation(string _newName, string _newSymbol, uint8 _newDecimals);\n\tevent OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n\tevent TransfersAreAllowed();\n\tevent Error(address indexed _self, uint8 _errorCode);\n\n\tuint256 constant private MAX_UINT256 = 2**256 - 1;\n\tuint8 constant private ERROR_ZERO_ADDRESS = 1;\n\tuint8 constant private ERROR_INSUFICIENT_BALANCE = 2;\n\tuint8 constant private ERROR_INSUFICIENT_ALLOWENCE = 3;\n\tuint8 constant private ERROR_ARRAYS_LENGTH_DIFF = 4;\n\tuint8 constant private ERROR_INT_OVERFLOW = 5;\n\tuint8 constant private ERROR_UNAUTHORIZED = 6;\n\tuint8 constant private ERROR_TRANSFER_NOT_ALLOWED = 7;\n\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tbool public transfersSuspended = true;\n\taddress owner;\n\tuint256 totalSupply_ = 0;\n\tbool mintingFinished = false;\n\tmapping(address => uint256) balances;\n\tmapping(address => mapping(address => uint256)) internal allowed;\n\tmapping(address => bool) mintAgents;\n\n\tmodifier onlyOwner(){\n\n\t\trequire(msg.sender == owner);\n\t\t_;\n\n\t}\n\n\tmodifier onlyMintAgent(){\n\n\t\trequire(mintAgents[msg.sender]);\n\t\t_;\n\n\t}\n\n\tmodifier canMint(){\n\n\t\trequire(!mintingFinished);\n\t\t_;\n\n\t}\n\n\tfunction SAFEToken(uint256 _totalSupply, string _name, string _symbol, uint8 _decimals) public{\n\n\t\ttotalSupply_ = _totalSupply;\n\t\towner = msg.sender;\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t\tbalances[owner] = totalSupply_;\n\n\t}\n    \n\tfunction totalSupply() public view returns (uint256){\n\n\t\treturn totalSupply_;\n\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tif(_to == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tif(balances[msg.sender] < _value) return isError(ERROR_INSUFICIENT_BALANCE);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256){\n\n\t\treturn balances[_owner];\n\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tuint256 allowance = allowed[_from][msg.sender];\n\t\tif(balances[_from] < _value) return isError(ERROR_INSUFICIENT_BALANCE);\n\t\tif(allowance < _value) return isError(ERROR_INSUFICIENT_ALLOWENCE);\n\t\tbalances[_to] += _value;\n\t\tbalances[_from] -= _value;\n\t\tif(allowance < MAX_UINT256) allowed[_from][msg.sender] -= _value;\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tif(_spender == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256){\n\n\t\treturn allowed[_owner][_spender];\n\n\t}\n\n\tfunction mint(address[] _receivers, uint256[] _values) public onlyMintAgent canMint returns (bool){\n\n\t\tif(_receivers.length != _values.length) return isError(ERROR_ARRAYS_LENGTH_DIFF);\n\n\t\tfor(uint256 i = 0; i < _receivers.length; ++i){\n\n\t\t\tif(totalSupply_ + _values[i] < totalSupply_) return isError(ERROR_INT_OVERFLOW);\n\t\t\ttotalSupply_ += _values[i];\n\n\t\t}\n\t\t\t\n\t\tfor(i = 0; i < _receivers.length; ++i){\n\n\t\t\tbalances[_receivers[i]] += _values[i];\n\t\t\tMint(_receivers[i], _values[i]);\n\t\t\tTransfer(address(0), _receivers[i], _values[i]);\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction setMintAgent(address _addr, bool _state) onlyOwner canMint public returns (bool){\n\n\t\tif(_addr == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tmintAgents[_addr] = _state;\n\t\tMintingAgentChanged(_addr, _state);\n\t\treturn true;\n\n\t}\n\n\tfunction finishMinting() onlyOwner canMint public returns (bool){\n\n\t\tmintingFinished = true;\n\t\tMintFinished();\n\t\treturn true;\n\n\t}\n\n\tfunction allowTransfers() onlyOwner public returns (bool){\n\n\t\ttransfersSuspended = false;\n\t\tTransfersAreAllowed();\n\t\treturn true;\n\n\t}\n\n\tfunction changeOwner(address _newOwner) public onlyOwner returns(bool){\n\n\t\tif(_newOwner == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\taddress prevOwner = owner;\n\t\towner = _newOwner;\n\t\tOwnershipTransferred(prevOwner, owner);\n\t\treturn true;\n\n\t}\n    \n\tfunction setTokenInformation(string _name, string _symbol, uint8 _decimals) public onlyOwner returns (bool){\n\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t\tUpdatedTokenInformation(_name, _symbol, _decimals);\n\t\treturn true;\n\n\t}\n\n\tfunction withdrawnTokens(address[] _tokens, address _to) public onlyOwner returns (bool){\n\n\t\tfor(uint256 i = 0; i < _tokens.length; i++){\n\n\t\t\taddress token = _tokens[i];\n\t\t\tuint256 balance = ERC20Interface(token).balanceOf(this);\n\t\t\tif(balance != 0) ERC20Interface(token).transfer(_to, balance);\n\n\t\t}\n\n\t\treturn true;\n\t\n\t}\n\n\tfunction isError(uint8 _error) private returns (bool){\n\n\t\tError(msg.sender, _error);\n\t\treturn false;\n\n\t}\n\n}",
        "debug": "calldata_SAFEToken_4 + calldata_SAFEToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_2: 0x0\ncaller: 0x0\ncalldata_SAFEToken_0: 0xaa3435c000000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "setTokenInformation(string,string,uint8)",
        "lineno": 41,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 7291,
        "code": "ddress indexed _from, address indexed _to, uint256 _value);\n\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\tevent MintingAgentChanged(address _addr, bool _state);\n\tevent Mint(address indexed _to, uint256 _value);\n\tevent MintFinished();\n\tevent UpdatedTokenInformation(string _newName, string _newSymbol, uint8 _newDecimals);\n\tevent OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n\tevent TransfersAreAllowed();\n\tevent Error(address indexed _self, uint8 _errorCode);\n\n\tuint256 constant private MAX_UINT256 = 2**256 - 1;\n\tuint8 constant private ERROR_ZERO_ADDRESS = 1;\n\tuint8 constant private ERROR_INSUFICIENT_BALANCE = 2;\n\tuint8 constant private ERROR_INSUFICIENT_ALLOWENCE = 3;\n\tuint8 constant private ERROR_ARRAYS_LENGTH_DIFF = 4;\n\tuint8 constant private ERROR_INT_OVERFLOW = 5;\n\tuint8 constant private ERROR_UNAUTHORIZED = 6;\n\tuint8 constant private ERROR_TRANSFER_NOT_ALLOWED = 7;\n\n\tstring public name;\n\tstring public symbol;\n\tuint8 public decimals;\n\tbool public transfersSuspended = true;\n\taddress owner;\n\tuint256 totalSupply_ = 0;\n\tbool mintingFinished = false;\n\tmapping(address => uint256) balances;\n\tmapping(address => mapping(address => uint256)) internal allowed;\n\tmapping(address => bool) mintAgents;\n\n\tmodifier onlyOwner(){\n\n\t\trequire(msg.sender == owner);\n\t\t_;\n\n\t}\n\n\tmodifier onlyMintAgent(){\n\n\t\trequire(mintAgents[msg.sender]);\n\t\t_;\n\n\t}\n\n\tmodifier canMint(){\n\n\t\trequire(!mintingFinished);\n\t\t_;\n\n\t}\n\n\tfunction SAFEToken(uint256 _totalSupply, string _name, string _symbol, uint8 _decimals) public{\n\n\t\ttotalSupply_ = _totalSupply;\n\t\towner = msg.sender;\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t\tbalances[owner] = totalSupply_;\n\n\t}\n    \n\tfunction totalSupply() public view returns (uint256){\n\n\t\treturn totalSupply_;\n\n\t}\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tif(_to == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tif(balances[msg.sender] < _value) return isError(ERROR_INSUFICIENT_BALANCE);\n\t\tbalances[msg.sender] -= _value;\n\t\tbalances[_to] += _value;\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction balanceOf(address _owner) public view returns (uint256){\n\n\t\treturn balances[_owner];\n\n\t}\n\n\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tuint256 allowance = allowed[_from][msg.sender];\n\t\tif(balances[_from] < _value) return isError(ERROR_INSUFICIENT_BALANCE);\n\t\tif(allowance < _value) return isError(ERROR_INSUFICIENT_ALLOWENCE);\n\t\tbalances[_to] += _value;\n\t\tbalances[_from] -= _value;\n\t\tif(allowance < MAX_UINT256) allowed[_from][msg.sender] -= _value;\n\t\tTransfer(_from, _to, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool success){\n\n\t\tif(transfersSuspended) return isError(ERROR_TRANSFER_NOT_ALLOWED);\n\t\tif(_spender == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\n\t}\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256){\n\n\t\treturn allowed[_owner][_spender];\n\n\t}\n\n\tfunction mint(address[] _receivers, uint256[] _values) public onlyMintAgent canMint returns (bool){\n\n\t\tif(_receivers.length != _values.length) return isError(ERROR_ARRAYS_LENGTH_DIFF);\n\n\t\tfor(uint256 i = 0; i < _receivers.length; ++i){\n\n\t\t\tif(totalSupply_ + _values[i] < totalSupply_) return isError(ERROR_INT_OVERFLOW);\n\t\t\ttotalSupply_ += _values[i];\n\n\t\t}\n\t\t\t\n\t\tfor(i = 0; i < _receivers.length; ++i){\n\n\t\t\tbalances[_receivers[i]] += _values[i];\n\t\t\tMint(_receivers[i], _values[i]);\n\t\t\tTransfer(address(0), _receivers[i], _values[i]);\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction setMintAgent(address _addr, bool _state) onlyOwner canMint public returns (bool){\n\n\t\tif(_addr == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\tmintAgents[_addr] = _state;\n\t\tMintingAgentChanged(_addr, _state);\n\t\treturn true;\n\n\t}\n\n\tfunction finishMinting() onlyOwner canMint public returns (bool){\n\n\t\tmintingFinished = true;\n\t\tMintFinished();\n\t\treturn true;\n\n\t}\n\n\tfunction allowTransfers() onlyOwner public returns (bool){\n\n\t\ttransfersSuspended = false;\n\t\tTransfersAreAllowed();\n\t\treturn true;\n\n\t}\n\n\tfunction changeOwner(address _newOwner) public onlyOwner returns(bool){\n\n\t\tif(_newOwner == address(0)) return isError(ERROR_ZERO_ADDRESS);\n\t\taddress prevOwner = owner;\n\t\towner = _newOwner;\n\t\tOwnershipTransferred(prevOwner, owner);\n\t\treturn true;\n\n\t}\n    \n\tfunction setTokenInformation(string _name, string _symbol, uint8 _decimals) public onlyOwner returns (bool){\n\n\t\tname = _name;\n\t\tsymbol = _symbol;\n\t\tdecimals = _decimals;\n\t\tUpdatedTokenInformation(_name, _symbol, _decimals);\n\t\treturn true;\n\n\t}\n\n\tfunction withdrawnTokens(address[] _tokens, address _to) public onlyOwner returns (bool){\n\n\t\tfor(uint256 i = 0; i < _tokens.length; i++){\n\n\t\t\taddress token = _tokens[i];\n\t\t\tuint256 balance = ERC20Interface(token).balanceOf(this);\n\t\t\tif(balance != 0) ERC20Interface(token).transfer(_to, balance);\n\n\t\t}\n\n\t\treturn true;\n\t\n\t}\n\n\tfunction isError(uint8 _error) private returns (bool){\n\n\t\tError(msg.sender, _error);\n\t\treturn false;\n\n\t}\n\n}",
        "debug": "calldata_SAFEToken_4 + calldata_SAFEToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_2: 0x0\ncaller: 0x0\ncalldata_SAFEToken_0: 0xaa3435c000000000000000000000000000000000000000000000000000000000\ncalldatasize_SAFEToken: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `setTokenInformation(string,string,uint8)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/31/0x056a2a091a7d2f2624638d1b80d38a39a6dffa69.sol",
        "function": "setTokenInformation(string,string,uint8)",
        "lineno": 41,
        "title": "Integer Overflow ",
        "type": "Warning"
      }
    ],
    "success": true
  }
}