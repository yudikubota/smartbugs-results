{"error": null, "issues": [{"address": 2016, "code": "t deposit measured in ETH to ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "fallback", "lineno": 468, "title": "Message call to external contract", "type": "Informational"}, {"address": 2016, "code": "t deposit measured in ETH to ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2155\n", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "fallback", "lineno": 468, "title": "Multiple Calls", "type": "Information"}, {"address": 2155, "code": "ap includes other deposits\n  ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function fallback. The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "fallback", "lineno": 468, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2639, "code": " if an address is authorized\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x0\ncalldata_TopCoinDistribution_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TopCoinDistribution_0: 0x3a3e8e8400000000000000000000000000000000000000000000000000000000\ncalldatasize_TopCoinDistribution: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "getAuthorizer(uint256)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 2864, "code": "setStart(uint _star", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "authorizedCreateTokens(address,uint256)", "lineno": 509, "title": "Message call to external contract", "type": "Informational"}, {"address": 2864, "code": "setStart(uint _star", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3141\n", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "authorizedCreateTokens(address,uint256)", "lineno": 509, "title": "Multiple Calls", "type": "Information"}, {"address": 3141, "code": "Allows the owner to set the m", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "authorizedCreateTokens(address,uint256)", "lineno": 514, "title": "Message call to external contract", "type": "Informational"}, {"address": 3547, "code": "t, restrictedTokens", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "finishMinting()", "lineno": 540, "title": "Message call to external contract", "type": "Informational"}, {"address": 5820, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "retrieveTokens(address)", "lineno": 563, "title": "Message call to external contract", "type": "Warning"}, {"address": 5820, "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 6012\n", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "retrieveTokens(address)", "lineno": 563, "title": "Multiple Calls", "type": "Information"}, {"address": 6012, "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/9/0x3296294a172d541c548819875e027b5fcb3e4a85.sol", "function": "retrieveTokens(address)", "lineno": 563, "title": "Message call to external contract", "type": "Warning"}], "success": true}