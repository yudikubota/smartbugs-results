{"error": null, "issues": [{"address": 1133, "code": ";\n\t\tuint value;\n\t\tbool ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_WithdrawConfirmation_4: 0x0\nstorage_4: 0x0\ncalldata_WithdrawConfirmation_0: 0x25e7c2700000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "_function_0x025e7c27", "lineno": 100, "title": "Exception state", "type": "Informational"}, {"address": 1554, "code": "}\n        owners.", "debug": "storage_4: 0x0\nstorage_0: 0x0\ncalldata_WithdrawConfirmation_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WithdrawConfirmation_4: 0xff00\ncalldata_WithdrawConfirmation_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeOwner(address)`.\nThe subtraction may result in a value < 0.", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "removeOwner(address)", "lineno": 164, "title": "Integer Underflow", "type": "Warning"}, {"address": 1598, "code": " OwnerRem", "debug": "The exception is triggered under the following conditions:\n\nstorage_0: 0x0\ncalldata_WithdrawConfirmation_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WithdrawConfirmation_4: 0xff00\ncalldata_WithdrawConfirmation_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "removeOwner(address)", "lineno": 166, "title": "Exception state", "type": "Informational"}, {"address": 2928, "code": ";\n\n// ------------", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WithdrawConfirmation_4: 0x0\ncalldata_WithdrawConfirmation_0: 0x7065cb4800000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "addOwner(address)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4151, "code": "nt withdrawId) pub", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_WithdrawConfirmation_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_WithdrawConfirmation_0: 0xdc55576600000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `createWithdraw(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "createWithdraw(address,uint256)", "lineno": 182, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4374, "code": " uint indexed withdrawId);\n\tevent OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n\tevent WithdrawCreated(address indexed destination, uint indexed value, uint indexed id);\n\tevent Execution(uint indexed withdrawId);\n\tevent ExecutionFailure(uint indexed withdrawId);\n\n\tmapping(address => bool) public isOwner;\n\tmapping(uint => Withdraw) public withdraws;\n\tmapping(uint => mapping(address => bool)) public confirmations;\n\taddress[] public owners;\n\tuint public withdrawCount;\n\t\n\tstruct Withdraw {\n\t\taddress destination;\n\t\tuint value;\n\t\tbool executed;\n\t}\n\t\n\tmodifier hasPermission() {\n        require(isOwner[msg.sender]);\n        _;\n    }\n\t\n\tmodifier ownerDoesNotExist(address _owner) {\n        require(!isOwner[_owner]);\n        _;\n    }\n\t\n\tmodifier ownerExists(address _owner) {\n        require(isOwner[_owner]);\n        _;\n    }\n\t\n\tmodifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\t\n\tmodifier notConfirmed(uint withdrawId, address _owner) {\n        require(!confirmations[withdrawId][_owner]);\n        _;\n    }\n\t\n\tmodifier withdrawExists(uint withdrawId) {\n        require(withdraws[withdrawId].destination != 0);\n        _;\n    }\n\t\n\tmodifier confirmed(uint withdrawId, address _owner) {\n        require(confirmations[withdrawId][_owner]);\n        _;\n    }\n\t\n\tmodifier notExecuted(uint withdrawId) {\n        require(!withdraws[withdrawId].executed);\n        _;\n    }\n\t\n\tconstructor() public {\n\t\towners.push(owner);\n\t\tisOwner[owner] = true;\n\t}\n\t\n\tfunction addOwner(address _owner) public ownerDoesNotExist(_owner) hasPermission {\n\t\tisOwner[_owner] = true;\n\t\towners.push(_owner);\n\t\temit OwnerAddition(_owner);\n\t}\n\t\n\tfunction removeOwner(address _owner) public ownerExists(_owner) hasPermission {\n\t\trequire(_owner != owner);\n        isOwner[_owner] = false;\n        for(uint i=0; i < owners.length - 1; i++) {\n            if(owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n\t\t}\n        owners.length -= 1;\n        emit OwnerRemoval(_owner);\n    }\n\t\n\tfunction createWithdraw(address to, uint value) public ownerExists(msg.sender) notNull(to) {\n\t\tuint withdrawId = withdrawCount;\n\t\twithdraws[withdrawId] = Withdraw({\n\t\t\tdestination: to,\n\t\t\tvalue: value,\n\t\t\texecuted: false\n\t\t});\n\t\twithdrawCount += 1;\n\t\tconfirmations[withdrawId][msg.sender] = true;\n\t\temit WithdrawCreated(to, value, withdrawId);\n\t\texecuteWithdraw(withdrawId);\n\t}\n\t\n\tfunction isConfirmed(uint withdrawId) public constant returns(bool) {\n\t\tfor(uint i=0; i < owners.length; i++) {\n            if(!confirmations[withdrawId][owners[i]])\n                return false;\n        }\n\t\treturn true;\n\t}\n\t\n\tfunction confirmWithdraw(uint withdrawId) public ownerExists(msg.sender) withdrawExists(withdrawId) notConfirmed(withdrawId, msg.sender) {\n\t\tconfirmations[withdrawId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, withdrawId);\n\t\texecuteWithdraw(withdrawId);\n\t}\n\t\n\tfunction executeWithdraw(uint withdrawId) public ownerExists(msg.sender) confirmed(withdrawId, msg.sender) notExecuted(withdrawId) {\n\t\tif(isConfirmed(withdrawId)) {\n\t\t\tWithdraw storage with = withdraws[withdrawId];\n\t\t\twith.executed = true;\n\t\t\tif(with.destination.send(with.value))\n\t\t\t\temit Execution(withdrawId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(withdrawId);\n                with.executed = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// -------------------------------------", "debug": "storage_4: 0x7ffffffffffffffffffffffffffffffffffffd4b55739a394980000000000000\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_WithdrawConfirmation_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WithdrawConfirmation_4: 0xff00\ncalldata_WithdrawConfirmation_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "removeOwner(address)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4376, "code": " uint indexed withdrawId);\n\tevent OwnerAddition(address indexed owner);\n    event OwnerRemoval(address indexed owner);\n\tevent WithdrawCreated(address indexed destination, uint indexed value, uint indexed id);\n\tevent Execution(uint indexed withdrawId);\n\tevent ExecutionFailure(uint indexed withdrawId);\n\n\tmapping(address => bool) public isOwner;\n\tmapping(uint => Withdraw) public withdraws;\n\tmapping(uint => mapping(address => bool)) public confirmations;\n\taddress[] public owners;\n\tuint public withdrawCount;\n\t\n\tstruct Withdraw {\n\t\taddress destination;\n\t\tuint value;\n\t\tbool executed;\n\t}\n\t\n\tmodifier hasPermission() {\n        require(isOwner[msg.sender]);\n        _;\n    }\n\t\n\tmodifier ownerDoesNotExist(address _owner) {\n        require(!isOwner[_owner]);\n        _;\n    }\n\t\n\tmodifier ownerExists(address _owner) {\n        require(isOwner[_owner]);\n        _;\n    }\n\t\n\tmodifier notNull(address _address) {\n        require(_address != 0);\n        _;\n    }\n\t\n\tmodifier notConfirmed(uint withdrawId, address _owner) {\n        require(!confirmations[withdrawId][_owner]);\n        _;\n    }\n\t\n\tmodifier withdrawExists(uint withdrawId) {\n        require(withdraws[withdrawId].destination != 0);\n        _;\n    }\n\t\n\tmodifier confirmed(uint withdrawId, address _owner) {\n        require(confirmations[withdrawId][_owner]);\n        _;\n    }\n\t\n\tmodifier notExecuted(uint withdrawId) {\n        require(!withdraws[withdrawId].executed);\n        _;\n    }\n\t\n\tconstructor() public {\n\t\towners.push(owner);\n\t\tisOwner[owner] = true;\n\t}\n\t\n\tfunction addOwner(address _owner) public ownerDoesNotExist(_owner) hasPermission {\n\t\tisOwner[_owner] = true;\n\t\towners.push(_owner);\n\t\temit OwnerAddition(_owner);\n\t}\n\t\n\tfunction removeOwner(address _owner) public ownerExists(_owner) hasPermission {\n\t\trequire(_owner != owner);\n        isOwner[_owner] = false;\n        for(uint i=0; i < owners.length - 1; i++) {\n            if(owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n\t\t}\n        owners.length -= 1;\n        emit OwnerRemoval(_owner);\n    }\n\t\n\tfunction createWithdraw(address to, uint value) public ownerExists(msg.sender) notNull(to) {\n\t\tuint withdrawId = withdrawCount;\n\t\twithdraws[withdrawId] = Withdraw({\n\t\t\tdestination: to,\n\t\t\tvalue: value,\n\t\t\texecuted: false\n\t\t});\n\t\twithdrawCount += 1;\n\t\tconfirmations[withdrawId][msg.sender] = true;\n\t\temit WithdrawCreated(to, value, withdrawId);\n\t\texecuteWithdraw(withdrawId);\n\t}\n\t\n\tfunction isConfirmed(uint withdrawId) public constant returns(bool) {\n\t\tfor(uint i=0; i < owners.length; i++) {\n            if(!confirmations[withdrawId][owners[i]])\n                return false;\n        }\n\t\treturn true;\n\t}\n\t\n\tfunction confirmWithdraw(uint withdrawId) public ownerExists(msg.sender) withdrawExists(withdrawId) notConfirmed(withdrawId, msg.sender) {\n\t\tconfirmations[withdrawId][msg.sender] = true;\n\t\temit Confirmation(msg.sender, withdrawId);\n\t\texecuteWithdraw(withdrawId);\n\t}\n\t\n\tfunction executeWithdraw(uint withdrawId) public ownerExists(msg.sender) confirmed(withdrawId, msg.sender) notExecuted(withdrawId) {\n\t\tif(isConfirmed(withdrawId)) {\n\t\t\tWithdraw storage with = withdraws[withdrawId];\n\t\t\twith.executed = true;\n\t\t\tif(with.destination.send(with.value))\n\t\t\t\temit Execution(withdrawId);\n\t\t\telse {\n\t\t\t\temit ExecutionFailure(withdrawId);\n                with.executed = false;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and a\n// fixed supply\n// -------------------------------------", "debug": "storage_4: 0x7ff35fffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x0\nstorage_0: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_WithdrawConfirmation_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_WithdrawConfirmation_4: 0xff00\ncalldata_WithdrawConfirmation_0: 0x173825d900000000000000000000000000000000000000000000000000000000\ncalldatasize_WithdrawConfirmation: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeOwner(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/21/0xf4f5271c9d6f23cc00f93625b502f88d289a1607.sol", "function": "removeOwner(address)", "lineno": 86, "title": "Integer Overflow ", "type": "Warning"}], "success": true}