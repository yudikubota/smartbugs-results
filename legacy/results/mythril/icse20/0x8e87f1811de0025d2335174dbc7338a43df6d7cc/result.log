{"error": null, "issues": [{"address": 4992, "code": "racts/math/SafeMath.sol\n\n/**\n", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/2/0x8e87f1811de0025d2335174dbc7338a43df6d7cc.sol", "function": "refundERC20(address,address,uint256)", "lineno": 136, "title": "Message call to external contract", "type": "Warning"}, {"address": 5433, "code": "address payee, uint256 amo", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenTemplate_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenTemplate_0: 0x4bd2276600000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTemplate: 0x4\nretval_5421: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0x8e87f1811de0025d2335174dbc7338a43df6d7cc.sol", "function": "refundETH(address,uint256)", "lineno": 122, "title": "Exception state", "type": "Informational"}, {"address": 8643, "code": " {\n    c = _a + ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenTemplate_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_10: 0xff00\ncalldata_TokenTemplate_0: 0x42966c6800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTemplate: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0x8e87f1811de0025d2335174dbc7338a43df6d7cc.sol", "function": "burn(uint256)", "lineno": 181, "title": "Exception state", "type": "Informational"}, {"address": 8660, "code": "ken, wi", "debug": "storage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_TokenTemplate_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\ncaller: 0x0\ncalldata_TokenTemplate_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTemplate: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/2/0x8e87f1811de0025d2335174dbc7338a43df6d7cc.sol", "function": "mint(address,uint256)", "lineno": 192, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8673, "code": "llowances.\n */\n", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_1: 0x1\ncalldata_TokenTemplate_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\ncalldata_TokenTemplate_0: 0x40c10f1900000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTemplate: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/2/0x8e87f1811de0025d2335174dbc7338a43df6d7cc.sol", "function": "mint(address,uint256)", "lineno": 192, "title": "Exception state", "type": "Informational"}], "success": true}