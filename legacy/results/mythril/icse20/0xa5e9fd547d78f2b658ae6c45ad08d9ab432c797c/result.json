{
  "contract": "0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c",
  "tool": "mythril",
  "start": 1563527980.6519747,
  "end": 1563528258.6947,
  "duration": 278.04272532463074,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 1952,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "fallback",
        "lineno": 393,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 1952,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2260\nCall at address: 2260\n",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "fallback",
        "lineno": 393,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2059,
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "fallback",
        "lineno": 393,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 2260,
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "fallback",
        "lineno": 393,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 2956,
        "code": "Cap && collected.add(msg.va",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3453\nCall at address: 3261\n",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 371,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 2956,
        "code": "Cap && collected.add(msg.va",
        "debug": "",
        "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 371,
        "title": "Transaction order dependence",
        "type": "Warning"
      },
      {
        "address": 3261,
        "code": "ached = true;\n       ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 372,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3261,
        "code": "ached = true;\n       ",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 3453\n",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 372,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3453,
        "code": "Cap) {\n            softCapReached = true;\n        ",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 371,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3536,
        "code": "Reached(softCap);\n      ",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "withdraw()",
        "lineno": 373,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 3881,
        "code": "d);\n    }\n\n    function wit",
        "debug": "",
        "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "refund()",
        "lineno": 357,
        "title": "Message call to external contract",
        "type": "Informational"
      },
      {
        "address": 3881,
        "code": "d);\n    }\n\n    function wit",
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4076\nCall at address: 4076\n",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "refund()",
        "lineno": 357,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 3966,
        "code": "require(benefic",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0x0\nreturndatasize: 0x20\nretval_3881: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_14: 0x0\nstorage_13: 0x0\ncalldata_VeraCoinPreSale_0: 0x590e1ae300000000000000000000000000000000000000000000000000000000\ncalldatasize_VeraCoinPreSale: 0x4\nstorage_7: 0x0\ncallvalue: 0x0\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "refund()",
        "lineno": 362,
        "title": "Exception state",
        "type": "Informational"
      },
      {
        "address": 4076,
        "code": "ed = true;\n    }\n\n    f",
        "debug": "",
        "description": "In the function `refund()` the following predictable state variables are used to determine Ether recipient:\n- block.timestamp\n",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "refund()",
        "lineno": 364,
        "title": "Dependence on predictable environment variable",
        "type": "Warning"
      },
      {
        "address": 4179,
        "code": "rchase(address _owner) priv",
        "debug": "",
        "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "refund()",
        "lineno": 367,
        "title": "State change after external call",
        "type": "Warning"
      },
      {
        "address": 4943,
        "code": "rn c;\n    }\n}\n",
        "debug": "The exception is triggered under the following conditions:\n\ntimestamp: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xbbce0cbefffeffffff3bc01fffff7fff93ee90000201038b3f01d470fbbab7a9\nstorage_6: 0xf4e50980addffff7ff98ef7fffffffffb4129dfff205f4c99b7c82eebc5aa421\nstorage_14: 0x0\nstorage_13: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncalldatasize_VeraCoinPreSale: 0x3\n",
        "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ",
        "filename": "/unique_chucks/10/0xa5e9fd547d78f2b658ae6c45ad08d9ab432c797c.sol",
        "function": "fallback",
        "lineno": 30,
        "title": "Exception state",
        "type": "Informational"
      }
    ],
    "success": true
  }
}