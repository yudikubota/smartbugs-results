{
  "contract": "0xde6c7366c50663712de30919b2cb9af2dd1a5378",
  "tool": "mythril",
  "start": 1563606855.3667605,
  "end": 1563606908.759433,
  "duration": 53.392672538757324,
  "analysis": {
    "error": null,
    "issues": [
      {
        "address": 502,
        "code": "alue) onlyOwner public {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= _value;\n             balances[addresses[i]] += _value;\n             emit Transfer(owner, addresses[i], _value);\n         }\n    }\n    \n    \n    function balanceOf(address _owner) constan",
        "debug": "calldata_MDL_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MDL_0: 0x1d461b8300000000000000000000000000000000000000000000000000000000\ncalldatasize_MDL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airdropMDL(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "airdropMDL(address[],uint256)",
        "lineno": 52,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 1069,
        "code": "_extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _",
        "debug": "calldata_MDL_32 + 36: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_MDL_0: 0xcae9ca5100000000000000000000000000000000000000000000000000000000\ncalldatasize_MDL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `approveAndCall(address,uint256,bytes)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 65,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2051,
        "code": "esses[i]] += _value;\n    ",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_1,_256): 0x0\ncalldata_MDL_32 + 4: 0x1\ncalldata_MDL_4 + calldata_MDL_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MDL_0: 0x1d461b8300000000000000000000000000000000000000000000000000000000\ncalldatasize_MDL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer underflow exists in the function `airdropMDL(address[],uint256)`.\nThe subtraction may result in a value < 0.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "airdropMDL(address[],uint256)",
        "lineno": 55,
        "title": "Integer Underflow",
        "type": "Warning"
      },
      {
        "address": 2151,
        "code": "ansfer(owner, addresses[i], _val",
        "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MDL_cpy: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncalldata_MDL_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\ncalldata_MDL_4 + calldata_MDL_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncaller: 0x0\ncalldata_MDL_0: 0x1d461b8300000000000000000000000000000000000000000000000000000000\ncalldatasize_MDL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `airdropMDL(address[],uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "airdropMDL(address[],uint256)",
        "lineno": 56,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 2688,
        "code": "amount;\n             al",
        "debug": "calldata_MDL_32 + 36: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MDL_32_+_4: 0x800000000000000000008eb2e34648ee0801030820000000000000000000a000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_MDL_4: 0x800000000000000003ffd0badcb9b7000000002781000000000000000006bfff\ncalldata_MDL_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_MDL: 0x4\ncallvalue: 0x0\n",
        "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "transferFrom(address,address,uint256)",
        "lineno": 78,
        "title": "Integer Overflow ",
        "type": "Warning"
      },
      {
        "address": 3895,
        "code": "address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n        return true;\n    }\n    \n    function transferF",
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "approveAndCall(address,uint256,bytes)",
        "lineno": 68,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4314,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "withdrawContractTokens(address)",
        "lineno": 110,
        "title": "Message call to external contract",
        "type": "Warning"
      },
      {
        "address": 4314,
        "debug": "",
        "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4572\n",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "withdrawContractTokens(address)",
        "lineno": 110,
        "title": "Multiple Calls",
        "type": "Information"
      },
      {
        "address": 4572,
        "debug": "",
        "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.",
        "filename": "/unique_chucks/20/0xde6c7366c50663712de30919b2cb9af2dd1a5378.sol",
        "function": "withdrawContractTokens(address)",
        "lineno": 110,
        "title": "Message call to external contract",
        "type": "Warning"
      }
    ],
    "success": true
  }
}