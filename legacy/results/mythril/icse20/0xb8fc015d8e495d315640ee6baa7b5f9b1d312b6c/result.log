{"error": null, "issues": [{"address": 535, "code": "rn true if beneficiary exists, false otherwise.\n   */\n  function beneficiaryExists(\n    address _beneficiary\n  ) internal view returns (bool) {\n    return beneficiaryDistributionContracts[_be", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTimelockPool_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_TokenTimelockPool_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenTimelockPool_0: 0x95e2db3d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getDistributionContracts(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "getDistributionContracts(address)", "lineno": 377, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2287, "code": "k addresses.\n   */\n  function ", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "reclaim()", "lineno": 366, "title": "Message call to external contract", "type": "Informational"}, {"address": 2287, "code": "k addresses.\n   */\n  function ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4776\n", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "reclaim()", "lineno": 366, "title": "Multiple Calls", "type": "Information"}, {"address": 2780, "code": "ns (bool) {\n    return beneficiaryDistributionContrac", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTimelockPool_4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_TokenTimelockPool_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenTimelockPool_0: 0x95e2db3d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getDistributionContracts(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "getDistributionContracts(address)", "lineno": 381, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2782, "code": "ns (bool) {\n    return beneficiaryDistributionContrac", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTimelockPool_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\ncalldata_TokenTimelockPool_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenTimelockPool_0: 0x95e2db3d00000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getDistributionContracts(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "getDistributionContracts(address)", "lineno": 381, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3439, "code": "eleaseDate\n    );\n\n    // Book", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "addBeneficiary(address,uint256)", "lineno": 334, "title": "Message call to external contract", "type": "Informational"}, {"address": 4262, "code": "quire(_addr != address(0));\n    require(_addr != address(this));\n    ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenTimelockPool_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_TokenTimelockPool_4: 0x0\ncalldata_TokenTimelockPool_0: 0xc1cd823300000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "_function_0xc1cd8233", "lineno": 269, "title": "Exception state", "type": "Informational"}, {"address": 4365, "code": "  uint256 amount\n  );\n  event ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_TokenTimelockPool_4: 0x0\nstorage_6: 0x0\ncalldata_TokenTimelockPool_0: 0xefeb5e5800000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "_function_0xefeb5e58", "lineno": 264, "title": "Exception state", "type": "Informational"}, {"address": 4776, "code": "\n    address _from,\n    addr", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "reclaim()", "lineno": 87, "title": "Message call to external contract", "type": "Informational"}, {"address": 4861, "code": "_b;\n  }\n\n  /**\n ", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x0\ntimestamp: 0x0\nstorage_5: 0x1\nstorage_3: 0x1\ncalldata_TokenTimelockPool_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_TokenTimelockPool_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_TokenTimelockPool_0: 0x96074e7000000000000000000000000000000000000000000000000000000000\ncalldatasize_TokenTimelockPool: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xb8fc015d8e495d315640ee6baa7b5f9b1d312b6c.sol", "function": "addBeneficiary(address,uint256)", "lineno": 36, "title": "Exception state", "type": "Informational"}], "success": true}