{"error": null, "issues": [{"address": 760, "debug": "calldata_TESecurityToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_TESecurityToken_0: 0x133922ad00000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setCompanyURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "setCompanyURI(string)", "lineno": 551, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11481, "code": "256 c) {\n    c", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\ncalldata_TESecurityToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TESecurityToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_6: 0x0\ncaller: 0x0\ncalldata_TESecurityToken_0: 0x158a1cc300000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "burn(address,uint256,bytes32)", "lineno": 169, "title": "Exception state", "type": "Informational"}, {"address": 11498, "code": "tanda", "debug": "calldata_TESecurityToken_32 + 4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_1: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_3: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TESecurityToken_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_TESecurityToken_0: 0x1e458bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `mint(address,uint256,bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "mint(address,uint256,bytes32)", "lineno": 180, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11511, "code": ", with no allo", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x0\nstorage_1: 0x1\ncalldata_TESecurityToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_TESecurityToken_4: 0xff00\nstorage_6: 0x0\ncaller: 0x0\ncalldata_TESecurityToken_0: 0x1e458bee00000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "mint(address,uint256,bytes32)", "lineno": 180, "title": "Exception state", "type": "Informational"}, {"address": 13338, "code": "c transferNeedApproval = true;\n\n\tevent LogAddToWhitelist(address sender, address indexed beneficiary);\n\tevent LogRemoveFromWhitelist(address sender, address indexed beneficiary);\n\tevent LogSetTransferNeedApproval(address sender, bool value);\n    event LogTransferFromIssuer(address sender, address indexed from, address indexed to, uint256 value);\n    event LogProof(bytes32 indexed proof);\n    event LogProofOfExistance(bytes32 indexed p0, bytes32 indexed p1, bytes32 indexed p2, bytes data);\n    event LogSetNextContract(address sender, address indexed next);\n\n\tmodifier isWhitelisted(address investor) \n\t{\n\t\trequire(whitelist[investor] == true);\n\t\t_;\n\t}\n\n\tmodifier isActiveContract() \n\t{\n\t\trequire(nextContract == 0x0);\n\t\t_;\n\t}\n\n\tconstructor (address prev)\n\tpublic\n\t{\n\t\tpreviousContract = prev;\n\t}\n\n\tfunction setNextContract(address next)\n\twhenNotPaused\n\tonlyOwner\n\tisActiveContract\n\tpublic\n\t{\n\t\trequire (nextContract == 0x0);\n\t\tnextContract = next;\n\t\tLogSetNextContract(msg.sender, nextContract);\n\t}\n\n\tfunction setTransferNeedApproval(bool value)\n\tonlyOwner\n\tisActiveContract\n\tpublic\n\t{\n\t\trequire (transferNeedApproval != value);\n\t\ttransferNeedApproval = value;\n\t\temit LogSetTransferNeedApproval(msg.sender, value);\n\t}\n\n\tfunction proofOfExistance(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 docHash, bytes data) \n\tisActiveContract\n\tpublic\n\t{\n\t\temit LogProofOfExistance(p0, p1, p2, data);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction addToWhitelist(address investor, bytes32 docHash) \n\twhenNotPaused\n\tonlyOwner\n\tisActiveContract\t\n\texternal \n\t{\n\t\trequire (investor != 0x0);\n\t\trequire (whitelist[investor] == false);\n\n\t\twhitelist[investor] = true;\n\n\t\temit LogAddToWhitelist(msg.sender, investor);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction removeFromWhitelist(address investor, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\t\n\tisActiveContract\t\n\texternal \n\t{\n\t\trequire (investor != 0x0);\n\t\trequire (whitelist[investor] == true);\n\t\twhitelist[investor] = false;\n\t\temit LogRemoveFromWhitelist(msg.sender, investor);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction burn(address holder, uint256 value, bytes32 docHash) \n\tonlyOwner \n\twhenNotPaused\n\tisActiveContract\t\n\tpublic\n\treturns (bool)\t\n\t{\n\t\trequire(value <= balances[holder]);\n\t\tbalances[holder] = balances[holder].sub(value);\n\t\ttotalSupply_ = totalSupply_.sub(value);\n\t\temit Transfer(holder, address(0), value);\n\t\temit LogProof(docHash);\n\t\treturn true;\n\t}\n\n\tfunction mint(address to, uint256 value, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(to)\n\tpublic\n\treturns (bool)\n\t{\n\t    totalSupply_ = totalSupply_.add(value);\n    \tbalances[to] = balances[to].add(value);\n\t    emit Transfer(address(0), to, value);\n\t\temit LogProof(docHash);\n\t\treturn true;\n\t}\n\n\tfunction transferFromIssuer(address from, address to, uint256 value, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(to)\n    public\n    returns (bool)\n\t{\n\t    require(value <= balances[from]);\n\t    require(docHash != 0x0);\n\n\t    balances[from] = balances[from].sub(value);\n\t    balances[to] = balances[to].add(value);\n\t    emit Transfer(from, to, value);\n\t    emit LogTransferFromIssuer(msg.sender, from, to, value);\n\t\temit LogProof(docHash);\n\t    return true;\n\t}\n\n\tfunction transfer(address to, uint256 amount)\n\tpublic \n\twhenNotPaused\n\tisActiveContract\n\tisWhitelisted(msg.sender)\t\t\n\tisWhitelisted(to)\t\n\treturns (bool)\n\t{\n\t\trequire (transferNeedApproval == false);\n\t\tbool ret = super.transfer(to, amount);\n\t\treturn ret;\n\t}\n\n\tfunction transferFrom(address from, address to, uint256 value) \n\tpublic \n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(from)\t\n\tisWhitelisted(to)\n\treturns (bool)\n\t{\n\t\trequire (transferNeedApproval == false);\n\t\tbool ret = super.transferFrom(from, to, value);\n\t\treturn ret;\n\t}\n\n\tfunction setCompanyURI(string _companyURI) \n\tonlyOwner \n\twhenNotPaused\n\tisActiveContract\t\n\tpublic\n\t{\n\t\trequire(bytes(_companyURI).length > 0); \n\t\tcompanyURI = _companyURI;\n\t}\n}", "debug": "calldata_TESecurityToken_4 + calldata_TESecurityToken_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0x0\nstorage_6: 0x0\ncaller: 0x0\ncalldata_TESecurityToken_0: 0x133922ad00000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setCompanyURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "setCompanyURI(string)", "lineno": 382, "title": "Integer Overflow ", "type": "Warning"}, {"address": 13352, "code": "c transferNeedApproval = true;\n\n\tevent LogAddToWhitelist(address sender, address indexed beneficiary);\n\tevent LogRemoveFromWhitelist(address sender, address indexed beneficiary);\n\tevent LogSetTransferNeedApproval(address sender, bool value);\n    event LogTransferFromIssuer(address sender, address indexed from, address indexed to, uint256 value);\n    event LogProof(bytes32 indexed proof);\n    event LogProofOfExistance(bytes32 indexed p0, bytes32 indexed p1, bytes32 indexed p2, bytes data);\n    event LogSetNextContract(address sender, address indexed next);\n\n\tmodifier isWhitelisted(address investor) \n\t{\n\t\trequire(whitelist[investor] == true);\n\t\t_;\n\t}\n\n\tmodifier isActiveContract() \n\t{\n\t\trequire(nextContract == 0x0);\n\t\t_;\n\t}\n\n\tconstructor (address prev)\n\tpublic\n\t{\n\t\tpreviousContract = prev;\n\t}\n\n\tfunction setNextContract(address next)\n\twhenNotPaused\n\tonlyOwner\n\tisActiveContract\n\tpublic\n\t{\n\t\trequire (nextContract == 0x0);\n\t\tnextContract = next;\n\t\tLogSetNextContract(msg.sender, nextContract);\n\t}\n\n\tfunction setTransferNeedApproval(bool value)\n\tonlyOwner\n\tisActiveContract\n\tpublic\n\t{\n\t\trequire (transferNeedApproval != value);\n\t\ttransferNeedApproval = value;\n\t\temit LogSetTransferNeedApproval(msg.sender, value);\n\t}\n\n\tfunction proofOfExistance(bytes32 p0, bytes32 p1, bytes32 p2, bytes32 docHash, bytes data) \n\tisActiveContract\n\tpublic\n\t{\n\t\temit LogProofOfExistance(p0, p1, p2, data);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction addToWhitelist(address investor, bytes32 docHash) \n\twhenNotPaused\n\tonlyOwner\n\tisActiveContract\t\n\texternal \n\t{\n\t\trequire (investor != 0x0);\n\t\trequire (whitelist[investor] == false);\n\n\t\twhitelist[investor] = true;\n\n\t\temit LogAddToWhitelist(msg.sender, investor);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction removeFromWhitelist(address investor, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\t\n\tisActiveContract\t\n\texternal \n\t{\n\t\trequire (investor != 0x0);\n\t\trequire (whitelist[investor] == true);\n\t\twhitelist[investor] = false;\n\t\temit LogRemoveFromWhitelist(msg.sender, investor);\n\t\temit LogProof(docHash);\n\t}\n\n\tfunction burn(address holder, uint256 value, bytes32 docHash) \n\tonlyOwner \n\twhenNotPaused\n\tisActiveContract\t\n\tpublic\n\treturns (bool)\t\n\t{\n\t\trequire(value <= balances[holder]);\n\t\tbalances[holder] = balances[holder].sub(value);\n\t\ttotalSupply_ = totalSupply_.sub(value);\n\t\temit Transfer(holder, address(0), value);\n\t\temit LogProof(docHash);\n\t\treturn true;\n\t}\n\n\tfunction mint(address to, uint256 value, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(to)\n\tpublic\n\treturns (bool)\n\t{\n\t    totalSupply_ = totalSupply_.add(value);\n    \tbalances[to] = balances[to].add(value);\n\t    emit Transfer(address(0), to, value);\n\t\temit LogProof(docHash);\n\t\treturn true;\n\t}\n\n\tfunction transferFromIssuer(address from, address to, uint256 value, bytes32 docHash)\n\tonlyOwner\n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(to)\n    public\n    returns (bool)\n\t{\n\t    require(value <= balances[from]);\n\t    require(docHash != 0x0);\n\n\t    balances[from] = balances[from].sub(value);\n\t    balances[to] = balances[to].add(value);\n\t    emit Transfer(from, to, value);\n\t    emit LogTransferFromIssuer(msg.sender, from, to, value);\n\t\temit LogProof(docHash);\n\t    return true;\n\t}\n\n\tfunction transfer(address to, uint256 amount)\n\tpublic \n\twhenNotPaused\n\tisActiveContract\n\tisWhitelisted(msg.sender)\t\t\n\tisWhitelisted(to)\t\n\treturns (bool)\n\t{\n\t\trequire (transferNeedApproval == false);\n\t\tbool ret = super.transfer(to, amount);\n\t\treturn ret;\n\t}\n\n\tfunction transferFrom(address from, address to, uint256 value) \n\tpublic \n\twhenNotPaused\n\tisActiveContract\t\n\tisWhitelisted(from)\t\n\tisWhitelisted(to)\n\treturns (bool)\n\t{\n\t\trequire (transferNeedApproval == false);\n\t\tbool ret = super.transferFrom(from, to, value);\n\t\treturn ret;\n\t}\n\n\tfunction setCompanyURI(string _companyURI) \n\tonlyOwner \n\twhenNotPaused\n\tisActiveContract\t\n\tpublic\n\t{\n\t\trequire(bytes(_companyURI).length > 0); \n\t\tcompanyURI = _companyURI;\n\t}\n}", "debug": "calldata_TESecurityToken_4 + calldata_TESecurityToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60\nstorage_3: 0x0\nstorage_6: 0x0\ncaller: 0x0\ncalldata_TESecurityToken_0: 0x133922ad00000000000000000000000000000000000000000000000000000000\ncalldatasize_TESecurityToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setCompanyURI(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/19/0xe707d9d42ba282811c985085080ac103cf544043.sol", "function": "setCompanyURI(string)", "lineno": 382, "title": "Integer Overflow ", "type": "Warning"}], "success": true}