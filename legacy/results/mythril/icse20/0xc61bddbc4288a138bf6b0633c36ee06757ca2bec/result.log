{"error": null, "issues": [{"address": 1674, "code": "   // double ch", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 95, "title": "Message call to external contract", "type": "Warning"}, {"address": 1674, "code": "   // double ch", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2140\nCall at address: 1982\n", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 95, "title": "Multiple Calls", "type": "Information"}, {"address": 1982, "code": "erOf(_id) == address(this));\n        Asset me", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 96, "title": "Message call to external contract", "type": "Warning"}, {"address": 1982, "code": "erOf(_id) == address(this));\n        Asset me", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2140\n", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 96, "title": "Multiple Calls", "type": "Information"}, {"address": 2140, "code": "SimpleERC721 la", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 98, "title": "Message call to external contract", "type": "Warning"}, {"address": 2252, "code": "nsfer(msg.sender,last.", "debug": "The exception is triggered under the following conditions:\n\nstorage_2: 0x0\ncallvalue: 0x0\nmem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 36)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n160: 0x0\nretval_2140: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1982: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nreturndatasize: 0x20\nretval_1674: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Solitaire_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_1: 0x0\ncalldata_Solitaire_0: 0xd3c1b4500000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "addLayer(address,uint256,string,string)", "lineno": 99, "title": "Exception state", "type": "Informational"}, {"address": 3925, "code": "ss(this).balance);\n  }\n\n}\n\n\ncontract ", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdraw(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "withdraw()", "lineno": 21, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4243, "code": ");\n    }\n    \n ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "refund(address,uint256,address)", "lineno": 67, "title": "Message call to external contract", "type": "Warning"}, {"address": 4243, "code": ");\n    }\n    \n ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 4499\n", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "refund(address,uint256,address)", "lineno": 67, "title": "Multiple Calls", "type": "Information"}, {"address": 4499, "code": "ee) public onlyOwner{\n ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "refund(address,uint256,address)", "lineno": 70, "title": "Message call to external contract", "type": "Warning"}, {"address": 5114, "code": "\n        }\n  ", "debug": "mem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 100)) +\n96: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Solitaire_0: 0xa7a62aee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `init(address,uint256,address,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "init(address,uint256,address,string,string)", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5363, "code": "_owner,_url,", "debug": "storage_2: 0x1\nmem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 100)) +\n96: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Solitaire_0: 0xa7a62aee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `init(address,uint256,address,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "init(address,uint256,address,string,string)", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6782, "code": "    event NewAsset(uint256 index,address nft, uint256 token, address owner, string url,string memo);\n\n    struct Asset{\n        address nft;\n        uint256 tokenId;\n        address owner;\n        string url;\n        string memo;\n    }\n    uint256 public fee = 5 finney;\n    Asset[] queue;\n\n    function init(address _nft,uint256 _id,address _owner,string _url,string _memo) public onlyOwner{\n        require(queue.length<=1);\n        Asset memory a = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: _owner,\n            url: _url,\n            memo: _memo\n        });\n        if (queue.length==0){\n            queue.push(a);\n        }else{\n            queue[0] = a;\n        }\n        emit NewAsset(0,_nft,_id,_owner,_url,_memo);\n    }\n    \n    function refund(address _nft,uint256 _id,address _owner) public onlyOwner{\n        require(_owner != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == address(this));\n        se.transfer(_owner,_id);\n    }\n    \n    function setfee(uint256 _fee) public onlyOwner{\n        require(_fee>=0);\n        fee = _fee;\n    }\n    \n    function totalAssets() public view returns(uint256){\n        return queue.length;\n    }\n    \n    function getAsset(uint256 _index) public view returns(address _nft,uint256 _id,address _owner,string _url,string _memo){\n        require(_index<queue.length);\n        Asset memory _a = queue[_index];\n        _nft = _a.nft;\n        _id = _a.tokenId;\n        _owner = _a.owner;\n        _url = _a.url;\n        _memo = _a.memo;\n    }\n    \n    function addLayer(address _nft,uint256 _id,string _url,string _memo) public payable{\n        require(msg.value >=fee);\n        require(_nft != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == msg.sender);\n        se.transferFrom(msg.sender,address(this),_id);\n        // double check\n        require(se.ownerOf(_id) == address(this));\n        Asset memory last = queue[queue.length -1];\n        SimpleERC721 lastse = SimpleERC721(last.nft);\n        lastse.transfer(msg.sender,last.tokenId);\n        Asset memory newasset = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: msg.sender,\n            url: _url,\n            memo: _memo\n        });\n        uint256 index = queue.push(newasset) - 1;\n        emit NewAsset(index,_nft,  _id,  msg.sender,_url,_memo);\n    }\n\n}", "debug": "keccac_3_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n5*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_3 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n5*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Solitaire_0: 0xa7a62aee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `init(address,uint256,address,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "init(address,uint256,address,string,string)", "lineno": 34, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6811, "code": "    event NewAsset(uint256 index,address nft, uint256 token, address owner, string url,string memo);\n\n    struct Asset{\n        address nft;\n        uint256 tokenId;\n        address owner;\n        string url;\n        string memo;\n    }\n    uint256 public fee = 5 finney;\n    Asset[] queue;\n\n    function init(address _nft,uint256 _id,address _owner,string _url,string _memo) public onlyOwner{\n        require(queue.length<=1);\n        Asset memory a = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: _owner,\n            url: _url,\n            memo: _memo\n        });\n        if (queue.length==0){\n            queue.push(a);\n        }else{\n            queue[0] = a;\n        }\n        emit NewAsset(0,_nft,_id,_owner,_url,_memo);\n    }\n    \n    function refund(address _nft,uint256 _id,address _owner) public onlyOwner{\n        require(_owner != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == address(this));\n        se.transfer(_owner,_id);\n    }\n    \n    function setfee(uint256 _fee) public onlyOwner{\n        require(_fee>=0);\n        fee = _fee;\n    }\n    \n    function totalAssets() public view returns(uint256){\n        return queue.length;\n    }\n    \n    function getAsset(uint256 _index) public view returns(address _nft,uint256 _id,address _owner,string _url,string _memo){\n        require(_index<queue.length);\n        Asset memory _a = queue[_index];\n        _nft = _a.nft;\n        _id = _a.tokenId;\n        _owner = _a.owner;\n        _url = _a.url;\n        _memo = _a.memo;\n    }\n    \n    function addLayer(address _nft,uint256 _id,string _url,string _memo) public payable{\n        require(msg.value >=fee);\n        require(_nft != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == msg.sender);\n        se.transferFrom(msg.sender,address(this),_id);\n        // double check\n        require(se.ownerOf(_id) == address(this));\n        Asset memory last = queue[queue.length -1];\n        SimpleERC721 lastse = SimpleERC721(last.nft);\n        lastse.transfer(msg.sender,last.tokenId);\n        Asset memory newasset = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: msg.sender,\n            url: _url,\n            memo: _memo\n        });\n        uint256 index = queue.push(newasset) - 1;\n        emit NewAsset(index,_nft,  _id,  msg.sender,_url,_memo);\n    }\n\n}", "debug": "mem_mem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 100)) +\n96: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Solitaire_0: 0xa7a62aee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `init(address,uint256,address,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "init(address,uint256,address,string,string)", "lineno": 34, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6825, "code": "    event NewAsset(uint256 index,address nft, uint256 token, address owner, string url,string memo);\n\n    struct Asset{\n        address nft;\n        uint256 tokenId;\n        address owner;\n        string url;\n        string memo;\n    }\n    uint256 public fee = 5 finney;\n    Asset[] queue;\n\n    function init(address _nft,uint256 _id,address _owner,string _url,string _memo) public onlyOwner{\n        require(queue.length<=1);\n        Asset memory a = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: _owner,\n            url: _url,\n            memo: _memo\n        });\n        if (queue.length==0){\n            queue.push(a);\n        }else{\n            queue[0] = a;\n        }\n        emit NewAsset(0,_nft,_id,_owner,_url,_memo);\n    }\n    \n    function refund(address _nft,uint256 _id,address _owner) public onlyOwner{\n        require(_owner != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == address(this));\n        se.transfer(_owner,_id);\n    }\n    \n    function setfee(uint256 _fee) public onlyOwner{\n        require(_fee>=0);\n        fee = _fee;\n    }\n    \n    function totalAssets() public view returns(uint256){\n        return queue.length;\n    }\n    \n    function getAsset(uint256 _index) public view returns(address _nft,uint256 _id,address _owner,string _url,string _memo){\n        require(_index<queue.length);\n        Asset memory _a = queue[_index];\n        _nft = _a.nft;\n        _id = _a.tokenId;\n        _owner = _a.owner;\n        _url = _a.url;\n        _memo = _a.memo;\n    }\n    \n    function addLayer(address _nft,uint256 _id,string _url,string _memo) public payable{\n        require(msg.value >=fee);\n        require(_nft != address(0));\n        SimpleERC721 se = SimpleERC721(_nft);\n        require(se.ownerOf(_id) == msg.sender);\n        se.transferFrom(msg.sender,address(this),_id);\n        // double check\n        require(se.ownerOf(_id) == address(this));\n        Asset memory last = queue[queue.length -1];\n        SimpleERC721 lastse = SimpleERC721(last.nft);\n        lastse.transfer(msg.sender,last.tokenId);\n        Asset memory newasset = Asset({\n            nft: _nft,\n            tokenId: _id,\n            owner: msg.sender,\n            url: _url,\n            memo: _memo\n        });\n        uint256 index = queue.push(newasset) - 1;\n        emit NewAsset(index,_nft,  _id,  msg.sender,_url,_memo);\n    }\n\n}", "debug": "mem_mem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 100)) +\n96: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_352 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 68)) +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_Solitaire_4 + calldata_Solitaire_32 + 100)) +\n96: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_0: 0x0\ncaller: 0x0\ncalldata_Solitaire_0: 0xa7a62aee00000000000000000000000000000000000000000000000000000000\ncalldatasize_Solitaire: 0x4\nstorage_2: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `init(address,uint256,address,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/unique_chucks/28/0xc61bddbc4288a138bf6b0633c36ee06757ca2bec.sol", "function": "init(address,uint256,address,string,string)", "lineno": 34, "title": "Integer Overflow ", "type": "Warning"}], "success": true}